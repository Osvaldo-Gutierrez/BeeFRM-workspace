options {
//BUILD_PARSER           = false;
//BUILD_TOKEN_MANAGER    = false;
//CACHE_TOKENS           = true;
//CHOICE_AMBIGUITY_CHECK = 3;
//COMMON_TOKEN_ACTION    = true;

//DEBUG_LOOKAHEAD        = true;
//DEBUG_PARSER           = true;
//DEBUG_TOKEN_MANAGER    = true;

//ERROR_REPORTING        = false;
  FORCE_LA_CHECK         = true;
  IGNORE_CASE            = true;
//JAVA_UNICODE_ESCAPE    = true; // '\u0000'-'\u00FF'
  LOOKAHEAD              = 2;
//OPTIMIZE_TOKEN_MANAGER = true;
//OTHER_AMBIGUITY_CHECK  = 2;
//OUTPUT_DIRECTORY       = "<current directory>";
//SANITY_CHECK           = false;
  STATIC                 = false;
//UNICODE_INPUT          = true;
//USER_CHAR_STREAM       = true;
//USER_TOKEN_MANAGER     = true;
}

PARSER_BEGIN(CopyParser)
/*
 *   Copyright (c) 2017 by BEE S.A. All Rights Reserved.
 *   THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF BEE S.A.
 *   The copyright notice above does not evidence any actual or intended
 *   publication of such source code.
 */

package cl.bee.perseus.copyparser;


import java.io.*;

import org.apache.log4j.*;


/**
 * @author  alarrea@bee.cl
 * @version 1.0
 */
public class CopyParser {

  //private static Logger logger = Logger.getLogger(CopyParser.class);

    /******************************************************************************
     * main
     ******************************************************************************/
    /**
     *
     * @param args TODO_javadoc
     *
     */
    public static void main(String args[]) {}
}

PARSER_END(CopyParser)

/****************************************************************************/
/* MORE                                                                     */
/****************************************************************************/

MORE :
{
  "*>" : COMMENT_STATE
}

/****************************************************************************/
/* SPECIAL_TOKEN                                                            */
/****************************************************************************/

SPECIAL_TOKEN :
{
  <EOL              : "\n"                      >
| <SPACECHAR        : (" "|"\t"|"\f"|";"|"\r")+ >
| < SPACE_SEPARATOR : (<SPACECHAR>|<EOL>)+      >
| < COMMA_SEPARATOR : "," <SPACE_SEPARATOR>     >
}

/****************************************************************************/
/* COMMENT_STATE                                                            */
/****************************************************************************/

<COMMENT_STATE>
SPECIAL_TOKEN :
{
  <COMMENT : "\n"|"\r"|"\r\n" > : DEFAULT
}

/****************************************************************************/
/* MORE                                                                     */
/****************************************************************************/

<COMMENT_STATE>
MORE :
{
  < ~[] >
}

/****************************************************************************/
/*                                                                          */
/****************************************************************************/

TOKEN :
{
  <ALL                : "ALL"        >
| <BY                 : "BY"         >
| <COPY               : "COPY"       >
| <HIGH_VALUE         : "HIGH-VALUE" >
| <HIGH_VALUES        : "HIGH-VALUES">
| <IN                 : "IN"         >
| <LOW_VALUE          : "LOW-VALUE"  >
| <LOW_VALUES         : "LOW-VALUES" >
| <NULL               : "NULL"       >
| <NULLS              : "NULLS"      >
| <OF                 : "OF"         >
| <QUOTE              : "QUOTE"      >
| <QUOTES             : "QUOTES"     >
| <REPLACING          : "REPLACING"  >
| <SPACE              : "SPACE"      >
| <SPACES             : "SPACES"     >
| <SUPPRESS           : "SUPPRESS"   >
| <ZERO               : "ZERO"       >
| <ZEROES             : "ZEROES"     >
| <ZEROS              : "ZEROS"      >

| <DOTCHAR            : "."          >
| <MINUSCHAR          : "-"          >
| <PLUSCHAR           : "+"          >

| <HEXNUMBER          : ("X\""(["0"-"9","a"-"f"])+"\"" |"X'" (["0"-"9","a"-"f"])+"'" )                                              >
| <INTEGER            : (<DIGIT>)+                                                                                                  >
| <REAL               : (<DIGIT>)*[",","."](<DIGIT>)+                                                                               > /* ALA */
| <QUOTEDPSEUDOTEXT   : "=="(~["="])*"=="                                                                                           >
| <QUOTEDSTRING       : (<QUOTECHAR>(~["\""]|<DOUBLEDQUOTECHAR>)*<QUOTECHAR>|<APOSTROPHE>(~["'"]|<DOUBLEDAPOSTROPHE>)*<APOSTROPHE>) >
| <IDENTIFIER         : ((<DIGIT>)+ (<MINUSCHAR>)*)*(<DIGIT>)*<LETTER>(<LETTERDIGIT>)*((<MINUSCHAR>)+ (<LETTERDIGIT>)+)*            > /* ALA */
| <#APOSTROPHE        : "'"                                                                                                         >
| <#DOUBLEDAPOSTROPHE : "''"                                                                                                        >
| <#DOUBLEDQUOTECHAR  : "\"\""                                                                                                      >
| <#QUOTECHAR         : "\""                                                                                                        >
| <#DOLLARCHAR        : "$"                                                                                                         >
| <#DIGIT             : ["0"-"9"]                                                                                                   >
| <#LETTER            : ["a"-"z"]                                                                                                   >
| <#LETTERDIGIT       : ["a"-"z","0"-"9"]                                                                                           >
}

/****************************************************************************/
/*                                                                          */
/****************************************************************************/

void CopyStatement() :
{}
{
  <COPY> ( <IDENTIFIER> | Literal() ) [ ( <OF> | <IN> ) ( <IDENTIFIER> | Literal() ) ] [ <SUPPRESS> ] [ <REPLACING> ( CopyOperand() <BY> CopyOperand() )+ ] <DOTCHAR>
  <EOF>
}

/****************************************************************************/
/*                                                                          */
/****************************************************************************/

void Literal() :
{}
{
  [ <ALL> ] ( NonNumericConstant() | NumericConstant() /* | <DBCS> */ | FigurativeConstant() )
}

/****************************************************************************/
/*                                                                          */
/****************************************************************************/

void NonNumericConstant() :
{}
{
   ( ( <QUOTEDSTRING> )+ | <HEXNUMBER> )
}

/****************************************************************************/
/*                                                                          */
/****************************************************************************/

void NumericConstant() :
{}
{
  ( <PLUSCHAR> | <MINUSCHAR> )? ( IntegerConstant() | <REAL> ) /* ALA */
}

/****************************************************************************/
/*                                                                          */
/****************************************************************************/

void FigurativeConstant() :
{}
{
    <ZERO>       | <ZEROS> | <ZEROES>
  | <SPACE>      | <SPACES>
  | <HIGH_VALUE> | <HIGH_VALUES>
  | <LOW_VALUE>  | <LOW_VALUES>
  | <QUOTE>      | <QUOTES>
  | <NULL>       | <NULLS>
}

/****************************************************************************/
/*                                                                          */
/****************************************************************************/

void IntegerConstant() :
{}
{
  <INTEGER>
}

/****************************************************************************/
/*                                                                          */
/****************************************************************************/

void CopyOperand() :
{
//Token tok = null;
}
{
  ( <QUOTEDPSEUDOTEXT> | /* Identifier() | Literal() |*/ <IDENTIFIER> )
}
