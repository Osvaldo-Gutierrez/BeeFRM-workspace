/*
 *   Copyright (c) 2020 by BEE S.A. All Rights Reserved.
 *   THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF BEE S.A.
 *   The copyright notice above does not evidence any actual or intended
 *   publication of such source code.
 */

options {
//DEBUG_LOOKAHEAD       = true;
  DEBUG_PARSER          = true;
//DEBUG_TOKEN_MANAGER   = true;

  FORCE_LA_CHECK        = true;
  IGNORE_CASE           = true;
  LOOKAHEAD             = 4;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC                = false;
}

PARSER_BEGIN(CobolParser)
/*
 *   Copyright (c) 2020 by BEE S.A. All Rights Reserved.
 *   THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF BEE S.A.
 *   The copyright notice above does not evidence any actual or intended
 *   publication of such source code.
 */

package cl.bee.perseus.cobolparser;


import java.io.*;

import cl.bee.perseus.cobolparser.syntaxtree.*;
import cl.bee.perseus.cobolparser.visitor.*;


/**
 * @author  alarrea@bee.cl
 * @version 1.0
 */
public class CobolParser {

    /******************************************************************************
    * main
    ******************************************************************************/
    /**
    *
    * @param args TODO_javadoc
    *
    */
    public static void main(String args[]) {

        try {

            boolean tracing = false;

            for (int i = 0; i < args.length; i++) {

                if (args[i].equalsIgnoreCase("-tracing")) {
                    tracing = true;
                }
            }

            CobolParser parser = new CobolParser(new FileInputStream(args[args.length - 1]));

            if (tracing) {
                parser.enable_tracing();
            }
            else {
                parser.disable_tracing();
            }

            Node root = parser.CompilationUnit();

            root.accept(new DepthFirstVisitor());

        } catch (Exception e) {
            e.printStackTrace(System.err);
        }
    }
}

PARSER_END(CobolParser)

/*****************************************************************************************************************************************
 * <DEFAULT> MORE
 *****************************************************************************************************************************************/

MORE :
{
    "*>"            : COMMENT_STATE
  | "EXEC"          : EXEC_STATE

  | "DATE-WRITTEN"  : ONELINE_STATE
  | "DATE-COMPILED" : ONELINE_STATE
  | "AUTHOR"        : ONELINE_STATE
  | "COPYDD"        : ONELINE_STATE
  | "EJECT"         : ONELINE_STATE
  | "SKIP1"         : ONELINE_STATE
  | "SKIP2"         : ONELINE_STATE
  | "SKIP3"         : ONELINE_STATE
//| "REMARKS"       : ONELINE_STATE
}

/*****************************************************************************************************************************************
 * <DEFAULT, PICTURE_STATE> SPECIAL_TOKEN
 *****************************************************************************************************************************************/

<DEFAULT, PICTURE_STATE> SPECIAL_TOKEN :
{
    <SPACE_SEPARATOR : ( <SPACECHAR> | <EOL> )+ >
  | <#SPACECHAR      : ( " " | "\t" | "\f" | ";" | "\r" )+ >
  | <#EOL            : "\n" >
}

/*****************************************************************************************************************************************
 * <EXEC_STATE> TOKE
 *****************************************************************************************************************************************/

<EXEC_STATE> TOKEN :
{
    <EXEC : "END-EXEC" > : DEFAULT
}

/*****************************************************************************************************************************************
 * <EXEC_STATE> MORE
 *****************************************************************************************************************************************/

<EXEC_STATE> MORE :
{
    < ~[] >
}

/*****************************************************************************************************************************************
 * <COMMENT_STATE> SPECIAL_TOKEN
 *****************************************************************************************************************************************/

<COMMENT_STATE> SPECIAL_TOKEN :
{
    <COMMENT   : "\n" | "\r" | "\r\n" > : DEFAULT
}

/*****************************************************************************************************************************************
 * <COMMENT_STATE> MORE
 *****************************************************************************************************************************************/

<COMMENT_STATE> MORE :
{
    < ~[] >
}

/*****************************************************************************************************************************************
 * <ONELINE_STATE> SPECIAL_TOKEN
 *****************************************************************************************************************************************/

<ONELINE_STATE> SPECIAL_TOKEN :
{
    <ONELINE   : "\n" | "\r" | "\r\n" > : DEFAULT
}

/*****************************************************************************************************************************************
 * <ONELINE_STATE> MORE
 *****************************************************************************************************************************************/

<ONELINE_STATE> MORE :
{
    < ~[] >
}

/*****************************************************************************************************************************************
 * <DEFAULT> TOKEN
 *****************************************************************************************************************************************/

TOKEN :
{
  //<DOT       :   <DOTCHAR> <SPACE_SEPARATOR> > // TODO : Could be simplified by <DOTCHAR> ?
    <DOT       : ( <DOTCHAR> <SPACE_SEPARATOR> )+ >
  | <#DOTCHAR  : "." >
}

/*****************************************************************************************************************************************
 * <DEFAULT> TOKEN
 *****************************************************************************************************************************************/

TOKEN :
{
    <ACCEPT                : "ACCEPT"                 >
  | <ACCESS                : "ACCESS"                 >
  | <ADD                   : "ADD"                    >
  | <ADDRESS               : "ADDRESS"                > // extension to support pointers
  | <ADVANCING             : "ADVANCING"              >
  | <AFTER                 : "AFTER"                  >
  | <ALL                   : "ALL"                    >
  | <ALPHABET              : "ALPHABET"               >
  | <ALPHABETIC            : "ALPHABETIC"             >
  | <ALPHABETIC_LOWER      : "ALPHABETIC-LOWER"       >
  | <ALPHABETIC_UPPER      : "ALPHABETIC-UPPER"       >
  | <ALPHANUMERIC          : "ALPHANUMERIC"           >
  | <ALPHANUMERIC_EDITED   : "ALPHANUMERIC-EDITED"    >
  | <ALSO                  : "ALSO"                   >
  | <ALTER                 : "ALTER"                  >
  | <ALTERNATE             : "ALTERNATE"              >
  | <AND                   : "AND"                    >
  | <ANY                   : "ANY"                    >
  | <APPROXIMATE           : "APPROXIMATE"            > // tandem extension
  | <ARE                   : "ARE"                    >
  | <AREA                  : "AREA"                   >
  | <AREAS                 : "AREAS"                  >
  | <ASCENDING             : "ASCENDING"              >
  | <ASSIGN                : "ASSIGN"                 >
  | <AT                    : "AT"                     >
//| <AUTHOR                : "AUTHOR"                 >
  | <BEFORE                : "BEFORE"                 >
  | <BEGINNING             : "BEGINNING"              > // extension
  | <BINARY                : "BINARY"                 >
  | <BLANK                 : "BLANK"                  >
  | <BLOCK                 : "BLOCK"                  >
  | <BOTTOM                : "BOTTOM"                 >
  | <BY                    : "BY"                     >
  | <CALL                  : "CALL"                   >
  | <CALL_CONVENTION       : "CALL-CONVENTION"        >
  | <CANCEL                : "CANCEL"                 >
  | <CD                    : "CD"                     >
  | <CF                    : "CF"                     >
  | <CH                    : "CH"                     >
  | <CHARACTER             : "CHARACTER"              >
  | <CHARACTERS            : "CHARACTERS"             >
  | <CLASS                 : "CLASS"                  >
  | <CLOCK_UNITS           : "CLOCK-UNITS"            >
  | <CLOSE                 : "CLOSE"                  >
//|< COBOL                 : "COBOL"                  >
  | <CODE                  : "CODE"                   >
  | <CODE_SET              : "CODE-SET"               >
  | <COLLATING             : "COLLATING"              >
  | <COLUMN                : "COLUMN"                 >
  | <COMMA                 : "COMMA"                  >
  | <COMMON                : "COMMON"                 >
  | <COMMUNICATION         : "COMMUNICATION"          >
  | <COMP                  : "COMP"                   >
  | <COMP_1                : "COMP-1"                 > // extension in many dialects
  | <COMP_2                : "COMP-2"                 > // extension in many dialects
  | <COMP_3                : "COMP-3"                 > // extension in many dialects
  | <COMP_4                : "COMP-4"                 > // extension in many dialects
  | <COMPUTATIONAL         : "COMPUTATIONAL"          >
  | <COMPUTATIONAL_1       : "COMPUTATIONAL-1"        > // extension
  | <COMPUTATIONAL_2       : "COMPUTATIONAL-2"        > // extension
  | <COMPUTATIONAL_3       : "COMPUTATIONAL-3"        > // extension
  | <COMPUTATIONAL_4       : "COMPUTATIONAL-4"        > // extension
  | <COMPUTE               : "COMPUTE"                >
  | <CONFIGURATION         : "CONFIGURATION"          >
  | <CONTAINS              : "CONTAINS"               >
  | <CONTENT               : "CONTENT"                >
  | <CONTINUE              : "CONTINUE"               >
  | <CONTROL               : "CONTROL"                >
  | <CONTROLS              : "CONTROLS"               >
  | <CONVERTING            : "CONVERTING"             >
  | <COPY                  : "COPY"                   >
  | <CORR                  : "CORR"                   >
  | <CORRESPONDING         : "CORRESPONDING"          >
  | <COUNT                 : "COUNT"                  >
  | <CURRENCY              : "CURRENCY"               >
  | <DATA                  : "DATA"                   >
  | <DATE                  : "DATE"                   >
//| <DATE_COMPILED         : "DATE-COMPILED"          >
//| <DATE_WRITTEN          : "DATE-WRITTEN"           >
  | <DAY                   : "DAY"                    >
  | <DAY_OF_WEEK           : "DAY-OF-WEEK"            >
  | <DBCS                  : "DBCS"                   > // extension to support double bytes characters
  | <DE                    : "DE"                     >
  | <DEBUG_CONTENTS        : "DEBUG-CONTENTS"         >
  | <DEBUG_ITEM            : "DEBUG-ITEM"             >
  | <DEBUG_LINE            : "DEBUG-LINE"             >
  | <DEBUG_NAME            : "DEBUG-NAME"             >
  | <DEBUG_SUB_1           : "DEBUG-SUB-1"            >
  | <DEBUG_SUB_2           : "DEBUG-SUB-2"            >
  | <DEBUG_SUB_3           : "DEBUG-SUB-3"            >
  | <DEBUGGING             : "DEBUGGING"              >
  | <DECIMAL_POINT         : "DECIMAL-POINT"          >
  | <DECLARATIVES          : "DECLARATIVES"           >
  | <DELETE                : "DELETE"                 >
  | <DELIMITED             : "DELIMITED"              >
  | <DELIMITER             : "DELIMITER"              >
  | <DEPENDING             : "DEPENDING"              >
  | <DESCENDING            : "DESCENDING"             >
  | <DESCRIPTOR            : "DESCRIPTOR"             >
  | <DESTINATION           : "DESTINATION"            >
  | <DETAIL                : "DETAIL"                 >
  | <DISABLE               : "DISABLE"                >
  | <DISPLAY               : "DISPLAY"                >
  | <DISPLAY_1             : "DISPLAY-1"              > // extension
  | <DIVIDE                : "DIVIDE"                 >
  | <DIVISION              : "DIVISION"               >
  | <DOWN                  : "DOWN"                   >
  | <DUPLICATES            : "DUPLICATES"             >
  | <DYNAMIC               : "DYNAMIC"                >
  | <EGCS                  : "EGCS"                   > // extension
  | <EGI                   : "EGI"                    >
  | <ELSE                  : "ELSE"                   >
  | <EMI                   : "EMI"                    >
  | <ENABLE                : "ENABLE"                 >
  | <END                   : "END"                    >
  | <END_ADD               : "END-ADD"                >
  | <END_CALL              : "END-CALL"               >
  | <END_COMPUTE           : "END-COMPUTE"            >
  | <END_DELETE            : "END-DELETE"             >
  | <END_DIVIDE            : "END-DIVIDE"             >
  | <END_EVALUATE          : "END-EVALUATE"           >
  | <END_IF                : "END-IF"                 >
  | <END_MULTIPLY          : "END-MULTIPLY"           >
  | <END_OF_PAGE           : "END-OF-PAGE"            >
  | <END_PERFORM           : "END-PERFORM"            >
  | <END_READ              : "END-READ"               >
  | <END_RECEIVE           : "END-RECEIVE"            >
  | <END_RETURN            : "END-RETURN"             >
  | <END_REWRITE           : "END-REWRITE"            >
  | <END_SEARCH            : "END-SEARCH"             >
  | <END_START             : "END-START"              >
  | <END_STRING            : "END-STRING"             >
  | <END_SUBTRACT          : "END-SUBTRACT"           >
  | <END_UNSTRING          : "END-UNSTRING"           >
  | <END_WRITE             : "END-WRITE"              >
  | <ENDING                : "ENDINF"                 >
  | <ENTER                 : "ENTER"                  > // not present in all COBOLs, use CALL instead
  | <ENTRY                 : "ENTRY"                  >
  | <ENVIRONMENT           : "ENVIRONMENT"            >
  | <EOP                   : "EOP"                    >
  | <EQUAL                 : "EQUAL"                  >
  | <ERROR                 : "ERROR"                  >
  | <ESI                   : "ESI"                    >
  | <EVALUATE              : "EVALUATE"               >
  | <EVERY                 : "EVERY"                  >
  | <EXCEPTION             : "EXCEPTION"              >
//| <EXCLUSIVE             : "EXCLUSIVE"              > tandem extension
  | <EXIT                  : "EXIT"                   >
  | <EXTEND                : "EXTEND"                 >
  | <EXTERNAL              : "EXTERNAL"               >
  | <FALSE                 : "FALSE"                  >
  | <FD                    : "FD"                     >
  | <FILE                  : "FILE"                   >
  | <FILE_CONTROL          : "FILE-CONTROL"           >
  | <FILLER                : "FILLER"                 >
  | <FINAL                 : "FINAL"                  >
  | <FIRST                 : "FIRST"                  >
  | <FOOTING               : "FOOTING"                >
  | <FOR                   : "FOR"                    >
  | <FROM                  : "FROM"                   >
  | <FUNCTION              : "FUNCTION"               >
  | <GENERATE              : "GENERATE"               >
  | <GOBACK                : "GOBACK"                 > // extension
  | <GENERIC               : "GENERIC"                > // tandem extension
  | <GIVING                : "GIVING"                 >
  | <GLOBAL                : "GLOBAL"                 >
  | <GO                    : "GO"                     >
  | <GREATER               : "GREATER"                >
  | <GROUP                 : "GROUP"                  >
  | <HEADING               : "HEADING"                >
  | <HIGH_VALUE            : "HIGH-VALUE"             >
  | <HIGH_VALUES           : "HIGH-VALUES"            >
  | <I_O                   : "I-O"                    >
  | <I_O_CONTROL           : "I-O-CONTROL"            >
  | <ID                    : "ID"                     > // extension, synonym for IDENTIFICATION
  | <IDENTIFICATION        : "IDENTIFICATION"         >
  | <IDENTIFIED            : "IDENTIFIED"             >
  | <IF                    : "IF"                     >
  | <IMPLICIT              : "IMPLICIT"               >
  | <IN                    : "IN"                     >
  | <INDEX                 : "INDEX"                  >
  | <INDEXED               : "INDEXED"                >
  | <INDICATE              : "INDICATE"               >
  | <INITIAL               : "INITIAL"                >
  | <INITIALIZE            : "INITIALIZE"             >
  | <INITIATE              : "INITIATE"               >
  | <INPUT                 : "INPUT"                  >
  | <INPUT_OUTPUT          : "INPUT-OUTPUT"           >
  | <INSPECT               : "INSPECT"                >
  | <INSTALLATION          : "INSTALLATION"           >
  | <INTO                  : "INTO"                   >
  | <INVALID               : "INVALID"                >
  | <IS                    : "IS"                     >
  | <JUST                  : "JUST"                   >
  | <JUSTIFIED             : "JUSTIFIED"              >
  | <JUSTIFY               : "JUSTIFY"                >
  | <KANJI                 : "KANJI"                  > // extension to support Kanji characters (japanese)
  | <KEY                   : "KEY"                    >
  | <LABEL                 : "LABEL"                  >
  | <LAST                  : "LAST"                   >
  | <LEADING               : "LEADING"                >
  | <LEFT                  : "LEFT"                   >
  | <LENGTH                : "LENGTH"                 >
  | <LESS                  : "LESS"                   >
  | <LIMIT                 : "LIMIT"                  >
  | <LIMITS                : "LIMITS"                 >
  | <LINAGE                : "LINAGE"                 >
  | <LINAGE_COUNTER        : "LINAGE_COUNTER"         >
  | <LINE                  : "LINE"                   >
  | <LINES                 : "LINES"                  >
  | <LINE_COUNTER          : "LINE-COUNTER"           >
  | <LINKAGE               : "LINKAGE"                >
  | <LOCK                  : "LOCK"                   >
  | <LOCKFILE              : "LOCKFILE"               > // tandem extension
  | <LOW_VALUE             : "LOW-VALUE"              >
  | <LOW_VALUES            : "LOW-VALUES"             >
  | <MEMORY                : "MEMORY"                 >
  | <MERGE                 : "MERGE"                  >
  | <MESSAGE               : "MESSAGE"                >
  | <MODE                  : "MODE"                   >
  | <MODULES               : "MODULES"                >
  | <MORE_LABELS           : "MORE-LABELS"            > // IBM extension
  | <MOVE                  : "MOVE"                   >
  | <MULTIPLE              : "MULTIPLE"               >
  | <MULTIPLY              : "MULTIPLY"               >
  | <NATIVE                : "NATIVE"                 >
  | <NEGATIVE              : "NEGATIVE"               >
  | <NEXT                  : "NEXT"                   >
  | <NO                    : "NO"                     >
  | <NOT                   : "NOT"                    >
  | <NULL                  : "NULL"                   > // tandem & IBM extension
  | <NULLS                 : "NULLS"                  > // tandem & IBM extension
  | <NUMBER                : "NUMBER"                 >
  | <NUMERIC               : "NUMERIC"                >
  | <NUMERIC_EDITED        : "NUMERIC-EDITED"         >
  | <OBJECT_COMPUTER       : "OBJECT-COMPUTER"        >
  | <OCCURS                : "OCCURS"                 >
  | <OF                    : "OF"                     >
  | <OFF                   : "OFF"                    >
  | <OMITTED               : "OMITTED"                >
  | <ON                    : "ON"                     >
  | <OPEN                  : "OPEN"                   >
  | <OPTIONAL              : "OPTIONAL"               >
  | <OR                    : "OR"                     >
  | <ORDER                 : "ORDER"                  >
  | <ORGANIZATION          : "ORGANIZATION"           >
  | <OTHER                 : "OTHER"                  >
  | <OUTPUT                : "OUTPUT"                 >
  | <OVERFLOW              : "OVERFLOW"               >
  | <PACKED_DECIMAL        : "PACKED-DECIMAL"         >
  | <PADDING               : "PADDING"                >
  | <PAGE                  : "PAGE"                   >
  | <PAGE_COUNTER          : "PAGE-COUNTER"           >
  | <PASSWORD              : "PASSWORD"               >
  | <PERFORM               : "PERFORM"                >
  | <PF                    : "PF"                     >
  | <PH                    : "PH"                     >
  | <PIC                   : "PIC"                    > : PICTURE_STATE /* ALA */
  | <PICTURE               : "PICTURE"                > : PICTURE_STATE /* ALA */
  | <PLUS                  : "PLUS"                   >
  | <POINTER               : "POINTER"                >
  | <POSITION              : "POSITION"               >
  | <POSITIVE              : "POSITIVE"               >
  | <PRINTING              : "PRINTING"               >
  | <PROCEDURE             : "PROCEDURE"              >
  | <PROCEDURES            : "PROCEDURES"             >
  | <PROCEDURE_POINTER     : "PROCEDURE-POINTER"      >
  | <PROCEED               : "PROCEED"                >
  | <PROGRAM               : "PROGRAM"                >
  | <PROGRAM_ID            : "PROGRAM-ID"             >
  | <PROGRAM_STATUS        : "PROGRAM-STATUS"         > // tandem extension
  | <PROMPT                : "PROMPT"                 > // tandem extension
  | <PROTECTED             : "PROTECTED"              > // tandem extension
  | <PURGE                 : "PURGE"                  >
  | <QUEUE                 : "QUEUE"                  >
  | <QUOTE                 : "QUOTE"                  >
  | <QUOTES                : "QUOTES"                 >
  | <RANDOM                : "RANDOM"                 >
  | <RD                    : "RD"                     >
  | <READ                  : "READ"                   >
  | <RECEIVE               : "RECEIVE"                >
  | <RECEIVE_CONTROL       : "RECEIVE-CONTROL"        > // tandem extension
  | <RECORD                : "RECORD"                 >
  | <RECORDING             : "RECORDING"              > // probably IBM extension
  | <RECORDS               : "RECORDS"                >
  | <REDEFINES             : "REDEFINES"              >
  | <REEL                  : "REEL"                   >
  | <REFERENCE             : "REFERENCE"              >
  | <REFERENCES            : "REFERENCES"             >
  | <RELATIVE              : "RELATIVE"               >
  | <RELEASE               : "RELEASE"                >
  | <REMAINDER             : "REMAINDER"              >
  | <REMOVAL               : "REMOVAL"                >
  | <RENAMES               : "RENAMES"                >
  | <REPLACE               : "REPLACE"                >
  | <REPLACING             : "REPLACING"              >
  | <REPLY                 : "REPLY"                  > // tandem extension
  | <REPORT                : "REPORT"                 >
  | <REPORTING             : "REPORTING"              >
  | <REPORTS               : "REPORTS"                >
  | <RERUN                 : "RERUN"                  >
  | <RESERVE               : "RESERVE"                >
  | <RESET                 : "RESET"                  >
  | <RETURN                : "RETURN"                 > // IBM extension - does not do what expected ;-)
  | <RETURN_CODE           : "RETURN-CODE"            > // special register IBM
  | <RETURNED              : "RETURNED"               >
  | <RETURNING             : "RETURNING"              >
  | <REVERSED              : "REVERSED"               >
  | <REWIND                : "REWIND"                 >
  | <REWRITE               : "REWRITE"                >
  | <RF                    : "RF"                     >
  | <RH                    : "RH"                     >
  | <RIGHT                 : "RIGHT"                  >
  | <ROUNDED               : "ROUNDED"                >
  | <RUN                   : "RUN"                    >
  | <SAME                  : "SAME"                   >
  | <SD                    : "SD"                     >
  | <SEARCH                : "SEARCH"                 >
  | <SECTION               : "SECTION"                >
  | <SECURITY              : "SECURITY"               >
  | <SEGMENT               : "SEGMENT"                >
  | <SEGMENT_LIMIT         : "SEGMENT-LIMIT"          >
  | <SELECT                : "SELECT"                 >
  | <SEND                  : "SEND"                   >
  | <SENTENCE              : "SENTENCE"               >
  | <SEPARATE              : "SEPARATE"               >
  | <SEQUENCE              : "SEQUENCE"               >
  | <SEQUENTIAL            : "SEQUENTIAL"             >

  | <SERVICE               : "SERVICE"                > // ALA

  | <SET                   : "SET"                    >
  | <SHARED                : "SHARED"                 > // tandem extension, should be in C2000
  | <SHIFT_IN              : "SHIFT-IN"               > // IBM special register
  | <SHIFT_OUT             : "SHIFT-OUT"              > // IBM special register
  | <SIGN                  : "SIGN"                   >
  | <SIZE                  : "SIZE"                   >
  | <SORT                  : "SORT"                   >
  | <SORT_CONTROL          : "SORT-CONTROL"           > // IBM special register
  | <SORT_CORE_SIZE        : "SORT-CORE-SIZE"         > // IBM special register
  | <SORT_FILE_SIZE        : "SORT-FILE-SIZE"         > // IBM special register
  | <SORT_MERGE            : "SORT-MERGE"             >
  | <SORT_MESSAGE          : "SORT-MESSAGE"           > // IBM special register
  | <SORT_MODE_SIZE        : "SORT-MODE-SIZE"         > // IBM special register
  | <SORT_RETURN           : "SORT-RETURN"            > // IBM special register
  | <SOURCE                : "SOURCE"                 >
  | <SOURCE_COMPUTER       : "SOURCE-COMPUTER"        >
  | <SPACE                 : "SPACE"                  >
  | <SPACES                : "SPACES"                 >
  | <SPECIAL_NAMES         : "SPECIAL-NAMES"          >
  | <STANDARD              : "STANDARD"               >
  | <STANDARD_1            : "STANDARD-1"             >
  | <STANDARD_2            : "STANDARD-2"             >
  | <START                 : "START"                  >
  | <STATUS                : "STATUS"                 >
  | <STDCALL               : "STDCALL"                >
  | <STOP                  : "STOP"                   >
  | <STRING                : "STRING"                 >
  | <SUB_QUEUE_1           : "SUB-QUEUE-1"            >
  | <SUB_QUEUE_2           : "SUB-QUEUE-2"            >
  | <SUB_QUEUE_3           : "SUB-QUEUE-3"            >
  | <SUBTRACT              : "SUBTRACT"               >
  | <SUM                   : "SUM"                    >
  | <SUPPRESS              : "SUPPRESS"               >
  | <SYMBOLIC              : "SYMBOLIC"               >
  | <SYNC                  : "SYNC"                   >
  | <SYNCHRONIZED          : "SYNCHRONIZED"           >
  | <TABLE                 : "TABLE"                  >
  | <TALLY                 : "TALLY"                  > // IBM special register
  | <TALLYING              : "TALLYING"               >
  | <TAPE                  : "TAPE"                   >
  | <TERMINAL              : "TERMINAL"               >
  | <TERMINATE             : "TERMINATE"              >
  | <TEST                  : "TEST"                   >
  | <TEXT                  : "TEXT"                   >
  | <THAN                  : "THAN"                   >
  | <THEN                  : "THEN"                   >
  | <THROUGH               : "THROUGH"                >
  | <THRU                  : "THRU"                   >
  | <TIME                  : "TIME"                   >
  | <TIMES                 : "TIMES"                  >
  | <TO                    : "TO"                     >
  | <TOP                   : "TOP"                    >
  | <TRAILING              : "TRAILING"               >
  | <TRUE                  : "TRUE"                   >
  | <TYPE                  : "TYPE"                   >
  | <UNIT                  : "UNIT"                   >
  | <UNLOCK                : "UNLOCK"                 > // tandem extension
  | <UNLOCKFILE            : "UNLOCKFILE"             > // tandem again
  | <UNLOCKRECORD          : "UNLOCKRECORD"           > // guess what
  | <UNSTRING              : "UNSTRING"               >
  | <UNTIL                 : "UNTIL"                  >
  | <UP                    : "UP"                     >
  | <UPON                  : "UPON"                   >
  | <USAGE                 : "USAGE"                  >
  | <USE                   : "USE"                    >
  | <USING                 : "USING"                  >
  | <VALUE                 : "VALUE"                  >
  | <VALUES                : "VALUES"                 >
  | <VARYING               : "VARYING"                >
  | <WHEN                  : "WHEN"                   >
  | <WHEN_COMPILED         : "WHEN-COMPILED"          > // IBM special register
  | <WITH                  : "WITH"                   >
  | <WORDS                 : "WORDS"                  >
  | <WORKING_STORAGE       : "WORKING-STORAGE"        >
  | <WRITE                 : "WRITE"                  >
  | <YYYYMMDD              : "YYYYMMDD"               >
  | <YYYYDDD               : "YYYYDDD"                >
  | <ZERO                  : "ZERO"                   >
  | <ZEROS                 : "ZEROS"                  >
  | <ZEROES                : "ZEROES"                 >

  | <ALPHANUMERIC_HASHTABLE: "ALPHANUMERIC-HASHTABLE" >
  | <BINARY_BYTE           : "BINARY-BYTE"            >
  | <BINARY_DOUBLE         : "BINARY-DOUBLE"          >
  | <BINARY_LONG           : "BINARY-LONG"            >
  | <BINARY_M              : "BINARY-M"               >
  | <BINARY_REV            : "BINARY-REV"             >
  | <BINARY_SHORT          : "BINARY-SHORT"           >
  | <BIT                   : "BIT"                    >
  | <COMPONENT             : "COMPONENT"              >
  | <COMPUTATIONAL_2_A     : "COMPUTATIONAL-2-A"      >
  | <COMPUTATIONAL_1_A     : "COMPUTATIONAL-1-A"      >
  | <COMPUTATIONAL_1_E     : "COMPUTATIONAL-1-E"      >
  | <COMPUTATIONAL_1_M     : "COMPUTATIONAL-1-M"      >
  | <COMPUTATIONAL_1_MVS   : "COMPUTATIONAL-1-MVS"    >
  | <COMPUTATIONAL_1_REV   : "COMPUTATIONAL-1-REV"    >
  | <COMPUTATIONAL_2_E     : "COMPUTATIONAL-2-E"      >
  | <COMPUTATIONAL_2_M     : "COMPUTATIONAL-2-M"      >
  | <COMPUTATIONAL_2_MVS   : "COMPUTATIONAL-2-MVS"    >
  | <COMPUTATIONAL_2_REV   : "COMPUTATIONAL-2-REV"    >
  | <COMPUTATIONAL_3_A     : "COMPUTATIONAL-3-A"      >
  | <COMPUTATIONAL_3_M     : "COMPUTATIONAL-3-M"      >
  | <COMPUTATIONAL_4_M     : "COMPUTATIONAL-4-M"      >
  | <COMPUTATIONAL_5       : "COMPUTATIONAL-5"        >
  | <COMPUTATIONAL_5_M     : "COMPUTATIONAL-5-M"      >
  | <COMPUTATIONAL_6       : "COMPUTATIONAL-6"        >
  | <COMPUTATIONAL_A       : "COMPUTATIONAL-A"        >
  | <COMPUTATIONAL_B       : "COMPUTATIONAL-B"        >
  | <COMPUTATIONAL_D       : "COMPUTATIONAL-D"        >
  | <COMPUTATIONAL_M       : "COMPUTATIONAL-M"        >
  | <COMPUTATIONAL_N       : "COMPUTATIONAL-N"        >
  | <COMPUTATIONAL_P       : "COMPUTATIONAL-P"        >
  | <COMPUTATIONAL_S       : "COMPUTATIONAL-S"        >
  | <COMPUTATIONAL_X       : "COMPUTATIONAL-X"        >
  | <COMPUTATIONAL_X_REV   : "COMPUTATIONAL-X-REV"    >
  | <COMP_1_A              : "COMP-1-A"               >
  | <COMP_1_E              : "COMP-1-E"               >
  | <COMP_1_M              : "COMP-1-M"               >
  | <COMP_1_MVS            : "COMP-1-MVS"             >
  | <COMP_1_REV            : "COMP-1-REV"             >
  | <COMP_2_A              : "COMP-2-A"               >
  | <COMP_2_E              : "COMP-2-E"               >
  | <COMP_2_M              : "COMP-2-M"               >
  | <COMP_2_MVS            : "COMP-2-MVS"             >
  | <COMP_2_REV            : "COMP-2-REV"             >
  | <COMP_3_A              : "COMP-3-A"               >
  | <COMP_3_M              : "COMP-3-M"               >
  | <COMP_4_M              : "COMP-4-M"               >
  | <COMP_5                : "COMP-5"                 >
  | <COMP_5_M              : "COMP-5-M"               >
  | <COMP_6                : "COMP-6"                 >
  | <COMP_A                : "COMP-A"                 >
  | <COMP_B                : "COMP-B"                 >
  | <COMP_D                : "COMP-D"                 >
  | <COMP_M                : "COMP-M"                 >
  | <COMP_N                : "COMP-N"                 >
  | <COMP_P                : "COMP-P"                 >
  | <COMP_S                : "COMP-S"                 >
  | <COMP_X                : "COMP-X"                 >
  | <COMP_X_REV            : "COMP-X-REV"             >
  | <DEFAULT_FONT          : "DEFAULT-FONT"           >
  | <DISPLAY_WS            : "DISPLAY-WS"             >
  | <DOUBLE                : "DOUBLE"                 >
  | <EXTERNAL_FORM         : "EXTERNAL-FORM"          >
  | <FIXED_FONT            : "FIXED-FONT"             >
  | <FLOAT                 : "FLOAT"                  >
  | <FLOAT_LONG            : "FLOAT-LONG"             >
  | <FLOAT_SHORT           : "FLOAT-SHORT"            >
  | <FONT                  : "FONT"                   >
  | <HANDLE                : "HANDLE"                 >
  | <JBOOLEAN              : "JBOOLEAN"               >
  | <JBYTE                 : "JBYTE"                  >
  | <JCHAR                 : "JCHAR"                  >
  | <JDOUBLE               : "JDOUBLE"                >
  | <JFLOAT                : "JFLOAT"                 >
  | <JINT                  : "JINT"                   >
  | <JLONG                 : "JLONG"                  >
  | <JPACKED_DECIMAL       : "JPACKED-DECIMAL"        >
  | <JSHORT                : "JSHORT"                 >
  | <JSTRING               : "JSTRING"                >
  | <LARGE_FONT            : "LARGE-FONT"             >
  | <MEDIUM_FONT           : "MEDIUM-FONT"            >
  | <NATIONAL              : "NATIONAL"               >
  | <NUMERIC_HASHTABLE     : "NUMERIC-HASHTABLE"      >
  | <OBJECT                : "OBJECT"                 >
  | <OBJECT_HASHTABLE      : "OBJECT-HASHTABLE"       >
  | <PACKED_DECIMAL_A      : "PACKED-DECIMAL-A"       >
  | <PACKED_DECIMAL_E      : "PACKED-DECIMAL-E"       >
  | <PACKED_DECIMAL_H      : "PACKED-DECIMAL-H"       >
  | <PACKED_DECIMAL_I      : "PACKED-DECIMAL-I"       >
  | <PACKED_DECIMAL_M      : "PACKED-DECIMAL-M"       >
  | <SIGNED_INT            : "SIGNED-INT"             >
  | <SIGNED_LONG           : "SIGNED-LONG"            >
  | <SIGNED_SHORT          : "SIGNED-SHORT"           >
  | <SMALL_FONT            : "SMALL-FONT"             >
  | <SQLIND                : "SQLIND"                 >
  | <THREAD                : "THREAD"                 >
  | <TRADITIONAL_FONT      : "TRADITIONAL-FONT"       >
  | <UNSIGNED_INT          : "UNSIGNED-INT"           >
  | <UNSIGNED_LONG         : "UNSIGNED-LONG"          >
  | <UNSIGNED_SHORT        : "UNSIGNED-SHORT"         >
  | <WINDOW                : "WINDOW"                 >
}

/*****************************************************************************************************************************************
 * <DEFAULT> TOKEN
 *****************************************************************************************************************************************/

<PICTURE_STATE> TOKEN : /* ALA */
{
    <PICTURE_STRING : ( <DOLLARCHAR> )? ( ( <PICCHARDOT> )+ ( <REPEAT> )? )* ( ( <PICCHAR> )+ ( <REPEAT> )? ) > : DEFAULT

  | <#DIGIT         : ["0"-"9"]                                                                                        >
  | <#PICCHARDOT    : (["A","B","E","G","N","P","S","V","X","Z","0","9","/",",",".","+","-","$","*"]|"CR"|"DB") > // ":"
  | <#PICCHAR       : (["A","B","E","G","N","P","S","V","X","Z","0","9","/",",",    "+","-","$","*"]|"CR"|"DB") > // ":"
  | <#REPEAT        : "(" (<DIGIT>)+ ")"                                                                        >
}

/*****************************************************************************************************************************************
 * <DEFAULT> TOKEN
 *****************************************************************************************************************************************/

TOKEN :
{
    <LEVEL_66         : "66" >
  | <LEVEL_77         : "77" >
  | <LEVEL_88         : "88" >
  | <INTEGER          :                        ( <DIGIT> )+ >
  | <REAL             : ( <DIGIT> )* [",","."] ( <DIGIT> )+ > /* ALA */

  | <MINUSCHAR        : "-"    >
  | <LPARENCHAR       : "("    >
  | <RPARENCHAR       : ")"    >
  | <COLONCHAR        : ":"    >
//| <DOTCHAR          : "."    >
  | <COMMACHAR        : ","    >
  | <DOUBLEDQUOTECHAR : "\"\"" >
  | <QUOTECHAR        : "\""   >
  | <DOUBLEDAPOSTROPHE: "''"   >
  | <APOSTROPHE       : "'"    >
  | <PLUSCHAR         : "+"    >
  | <ASTERISKCHAR     : "*"    >
  | <POWEROF          : "**"   >
  | <SLASHCHAR        : "/"    >
  | <DOLLARCHAR       : "$"    >
  | <LESSTHANOREQUAL  : "<="   >
  | <LESSTHANCHAR     : "<"    >
  | <MORETHANOREQUAL  : ">="   >
  | <MORETHANCHAR     : ">"    >
  | <EQUALCHAR        : "="    >
  | <NOTEQUAL         : "<>"   >

  | <HEXNUMBER        : ["h","x"] ( ( <QUOTECHAR>  ( ["0"-"9","a"-"f"] )+ <QUOTECHAR> )
                                  | ( <APOSTROPHE> ( ["0"-"9","a"-"f"] )+ <APOSTROPHE> )
                                  ) >

  | <QUOTEDSTRING     : ( <QUOTECHAR>  (~["\""] | <DOUBLEDQUOTECHAR>  )* <QUOTECHAR>
                        | <APOSTROPHE> (~["'"]  | <DOUBLEDAPOSTROPHE> )* <APOSTROPHE>
                        ) >

  | <COBOL_WORD       : (["a"-"z","0"-"9"])+ ( (<MINUSCHAR> | "_" )+ ( ["a"-"z","0"-"9"] )+ )* > // NB : COBOL_WORD can be defined as an INTEGER (or a LEVEL_66* or a LEVEL_NUMBER) too !
  | <OTHER_CHARS      : ~[] >
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void CobolWord() : // Contains at least one alphabetic, max. 30 char
{}
{
  <COBOL_WORD>
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void QuotedText() :
{}
{
  ( IterableQuotedText() )+
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void IterableQuotedText() :
{}
{
  <QUOTEDSTRING> | <DOUBLEDQUOTECHAR> | <DOUBLEDAPOSTROPHE>
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void IntegerConstant() :
{}
{
  <LEVEL_66> | <LEVEL_77> | <LEVEL_88> | <INTEGER>
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void NumericConstant() :
{}
{
//  [ <PLUSCHAR> | <MINUSCHAR> ] ( ( <DOTCHAR> | <COMMACHAR> ) IntegerConstant() | IntegerConstant() [ ( <DOTCHAR> | <COMMACHAR> ) IntegerConstant() ] )
    [ <PLUSCHAR> | <MINUSCHAR> ] ( IntegerConstant() | <REAL> ) /* ALA */
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void LevelNumber() :
{}
{
  <INTEGER>
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void FigurativeConstant() :
{}
{
    <ZERO>       | <ZEROS> | <ZEROES>
  | <SPACE>      | <SPACES>
  | <HIGH_VALUE> | <HIGH_VALUES>
  | <LOW_VALUE>  | <LOW_VALUES>
  | <QUOTE>      | <QUOTES>
  | <NULL>       | <NULLS>
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void NonNumericConstant() :
{}
{
  ( QuotedText()
  | <HEXNUMBER>
  )
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void IterableNonNumericConstant() :
{}
{
  ( IterableQuotedText()
  | <HEXNUMBER>
  )
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void Literal() :
{}
{
  [ <ALL> ] ( NonNumericConstant()
            | NumericConstant()
            /* | <DBCS> */
            | FigurativeConstant()
            )
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void IterableLiteral() :
{}
{
  [ <ALL> ] ( IterableNonNumericConstant()
            | NumericConstant()
            /* | <DBCS> */
            | FigurativeConstant()
            )
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void IterableCondition() :
{}
{
  // TODO : This step was created because of the ambiguite of the rule ClassCondition() inside of RelationCondition() : CobolWord() CobolWord() === ArithmeticExpression() ClassCondition()
    LOOKAHEAD(ArithmeticExpression()) ArithmeticExpression()
  | <LPARENCHAR> Condition() <RPARENCHAR>
}

//
//
//

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void Condition() :
{}
{
  CombinableCondition() ( ( <AND> | <OR> ) ( LOOKAHEAD(CombinableCondition()) CombinableCondition() | AbbreviationRest() ) )*
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void CombinableCondition() :
{}
{
  [ <NOT> ] SimpleCondition()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void SimpleCondition() :
{}
{
    LOOKAHEAD(RelationCondition()   ) RelationCondition()
  | LOOKAHEAD(ArithmeticExpression()) ArithmeticExpression()
  | <LPARENCHAR> Condition() <RPARENCHAR>
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void ClassCondition() :
{}
{
  [ <IS> ] [ <NOT> ] ( <NUMERIC> | <ALPHABETIC> | <ALPHABETIC_LOWER> | <ALPHABETIC_UPPER> | ClassName() | <DBCS> | <KANJI> )
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void RelationCondition() :
{}
{
  ArithmeticExpression() ( LOOKAHEAD(AbbreviationRest()) AbbreviationRest()
                         | LOOKAHEAD(SignCondition()   ) SignCondition()
                         | ClassCondition()
                         )
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void SignCondition() :
{}
{
  [ <IS> ] [ <NOT> ] ( <POSITIVE> | <NEGATIVE> | <ZERO> | <ZEROS> | <ZEROES> )
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void RelationalOperator() :
{}
{
  [ <IS> ] [ <NOT> ] ( <GREATER> [ <THAN> ] [ <OR> <EQUAL> [ <TO> ] ]
                     | <MORETHANCHAR>
                     | <LESS> [ <THAN> ] [ <OR> <EQUAL> [ <TO> ] ]
                     | <LESSTHANCHAR>
                     | <EQUAL> [ <TO> ]
                     | <EQUALCHAR>
                     | <NOTEQUAL>
                     | <MORETHANOREQUAL>
                     | <LESSTHANOREQUAL>
                     )
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void AbbreviationLeaf() :
{}
{
    LOOKAHEAD(ArithmeticExpression()) ArithmeticExpression()
  // TODO : Is there another abbreviation rule ?
  | <LPARENCHAR> AbbreviationLeaf() ( ( <AND> | <OR> ) AbbreviationLeaf() )+ <RPARENCHAR> /* ALA */
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void AbbreviationRest() :
{}
{
  RelationalOperator() AbbreviationLeaf()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void ProcedureName() :
{}
{
  ( ParagraphName() [ ( <IN> | <OF> ) SectionName() ]
  | SectionName() // Useless here ...
  )
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void Subscript() :
{}
{
  <LPARENCHAR> ArithmeticExpression() ( [ <COMMACHAR> ] ArithmeticExpression() )* <RPARENCHAR> /* ALA */
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void FunctionClause() :
{}
{
  <FUNCTION> FunctionName() [ LOOKAHEAD(Subscript()) Subscript() ] [ <LPARENCHAR> LeftmostCharacterPosition() <COLONCHAR> [ Length() ] <RPARENCHAR> ]
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void Identifier() :
{}
{
  ( QualifiedDataName() ( LOOKAHEAD(Subscript()) Subscript() )* [ <LPARENCHAR> LeftmostCharacterPosition() <COLONCHAR> [ Length() ] <RPARENCHAR> ]
  | <LINAGE_COUNTER> [ ( <IN> | <OF> ) FileName() ]
  | <PROGRAM_STATUS>
  )
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void QualifiedDataName() :
{}
{
  ( DataName() ( ( <IN> | <OF> ) DataName() )*
  [ ( <IN> | <OF> ) FileName() ] // Useless part here ...
  | SpecialRegister() // Useless here ...
  )
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void Length() :
{}
{
  ArithmeticExpression()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void LeftmostCharacterPosition() :
{}
{
  ArithmeticExpression()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void Mode() :
{}
{
  CobolWord()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void AlphabetName() :
{}
{
  CobolWord()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void ClassName() :
{}
{
  CobolWord()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void ConditionName() :
{}
{
  CobolWord()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void DataName() :
{}
{
  CobolWord()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void FileName() :
{}
{
  CobolWord()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void IndexName() :
{}
{
  CobolWord()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void MnemonicName() :
{}
{
  CobolWord()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void RecordName() :
{}
{
  Identifier()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void RoutineName() :
{}
{
  CobolWord()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void SymbolicCharacter() :
{}
{
  CobolWord()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void LibraryName() :
{}
{
  CobolWord()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void ProgramName() :
{}
{
  CobolWord()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void SectionName() :
{}
{
  IntegerConstant() | CobolWord() // We force IntegerConstant() recognization here ...
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void ParagraphName() :
{}
{
  IntegerConstant() | CobolWord() // We force IntegerConstant() recognization here ...
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void SystemName() :
{}
{
  CobolWord()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void ComputerName() :
{}
{
  SystemName()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void LanguageName() :
{}
{
  SystemName()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void EnvironmentName() :
{}
{
  SystemName()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void AssignmentName() :
{}
{
  SystemName()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void BasisName() :
{}
{
  ProgramName()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void FunctionName() :
{}
{
  ( CobolWord()
  | <LENGTH> // To avoid conflicts with token having same name ...
  | <WHEN_COMPILED>
  | <SUM>
  | <RANDOM>
  )
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void SpecialRegister() :
{}
{
  ( <ADDRESS> <OF> DataName()
  | <DEBUG_ITEM>
  | <LENGTH> <OF> Identifier()
  | <RETURN_CODE>
  | <SHIFT_OUT>
  | <SHIFT_IN>
  | <SORT_CONTROL>
  | <SORT_CORE_SIZE>
  | <SORT_FILE_SIZE>
  | <SORT_MESSAGE>
  | <SORT_MODE_SIZE>
  | <SORT_RETURN>
  | <TALLY>
  | <WHEN_COMPILED>
  )
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void CdName() :
{}
{
  CobolWord()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void ConventionName() :
{}
{
  CobolWord()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void HandleComponent() :
{}
{
  CobolWord()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void ImplicitTitle() :
{}
{
  QuotedText()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void LevelName66() :
{}
{
  DataName()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void LevelName77() :
{}
{
  DataName()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void LevelName88() :
{}
{
  ConditionName()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void LevelName() :
{}
{
  [ DataName() | <FILLER> | <REPLY> | <PROGRAM_STATUS> ]
}

//
//
//

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void ArithmeticExpression() :
{}
{
  TimesDiv() ( ( <PLUSCHAR> | <MINUSCHAR> ) TimesDiv() )*
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void TimesDiv() :
{}
{
  Power() ( ( <ASTERISKCHAR> | <SLASHCHAR> ) Power() )*
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void Power() :
{}
{
  [ ( <PLUSCHAR> | <MINUSCHAR> ) ] Basis() ( <POWEROF> Basis() )*
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void Basis() :
{}
{
  // IMPORTANT : From more complex to most specific :
  // TODO : Dirty hack : is <ALL> a valid value ?
  ( FunctionClause() | Identifier() | Literal() | <ALL> | <LPARENCHAR> ArithmeticExpression() <RPARENCHAR> )
}

//
//
//

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void CommentLine() :
{}
{
  ( ( NonDotChars() | Literal() )+ [ <DOT> ] )+
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void CompilationUnit() :
{}
{
  ProgramUnit()
  ( NestedProgramUnit() EndProgramStatement() )*
  [ EndProgramStatement() ( CompilationUnit() )* ]
  <EOF>
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void ProgramUnit() :
{}
{
  IdentificationDivision()
  [ EnvironmentDivision() ]
  [ DataDivision() ]
  [ ProcedureDivision() ]
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void NestedProgramUnit() :
{}
{
  NestedIdentificationDivision()
  [ EnvironmentDivision() ]
  [ DataDivision() ]
  [ ProcedureDivision() ]
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void EndProgramStatement() :
{}
{
  <END> <PROGRAM> ProgramName() <DOT>
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void CopyBookUnit() :
{}
{
  LinkageSectionEntry()
  <EOF>
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void IdentificationDivision() :
{}
{
  ( <IDENTIFICATION> | <ID> ) <DIVISION> <DOT>
  ProgramIdParagraph()
  ( IdentificationDivisionParagraph() )*
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void NestedIdentificationDivision() :
{}
{
  ( <IDENTIFICATION> | <ID> ) <DIVISION> <DOT>
  NestedProgramIdParagraph()
  ( IdentificationDivisionParagraph() )*
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void IdentificationDivisionParagraph() :
{}
{
  /*  AuthorParagraph()
  | */
    InstallationParagraph()
//| DateWrittenParagraph()
//| DateCompiledParagraph()
  | SecurityParagraph()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void ProgramIdParagraph() :
{}
{
  <PROGRAM_ID> <DOT> ProgramName() [ [ <IS> ] <INITIAL> [ <PROGRAM> ] ] <DOT>
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void NestedProgramIdParagraph() :
{}
{
  <PROGRAM_ID> <DOT> ProgramName()
  [ [ <IS> ] InitialOrCommon() [ <PROGRAM> ] ] <DOT>
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void InitialOrCommon() :
{}
{
  ( <INITIAL> [ <COMMON> ]
  | <COMMON> [ <INITIAL> ]
  )
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/
/*
void AuthorParagraph() :
{}
{
  <AUTHOR> <DOT> [ CommentLine() ]
}
*/

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void InstallationParagraph() :
{}
{
  <INSTALLATION> <DOT> [ CommentLine() ]
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

/*
void DateWrittenParagraph() :
{}
{
  <DATE_WRITTEN> <DOT> [ CommentLine() ]
}
*/

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

/*
void DateCompiledParagraph() :
{}
{
  <DATE_COMPILED> <DOT> [ CommentLine() ]
}
*/

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void SecurityParagraph() :
{}
{
  <SECURITY> <DOT> [ CommentLine() ]
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void EnvironmentDivision() :
{}
{
  <ENVIRONMENT> <DIVISION> <DOT>
  ( EnvironmentSection() )*
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void EnvironmentSection() :
{}
{
    ConfigurationSection()
  | InputOutputSection()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void ConfigurationSection() :
{}
{
  <CONFIGURATION> <SECTION> <DOT>
  ( ConfigurationSectionParagraph() )*
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void ConfigurationSectionParagraph() :
{}
{
    SourceComputerParagraph()
  | ObjectComputerParagraph()
  | SpecialNamesParagraph()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void SourceComputerParagraph() :
{}
{
  <SOURCE_COMPUTER> <DOT> ComputerName() [ [ <WITH> ] <DEBUGGING> <MODE> ] <DOT>
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void ObjectComputerParagraph() :
{}
{
  <OBJECT_COMPUTER> <DOT>
  ComputerName() ( ObjectComputerClause() )* <DOT>
}

void ObjectComputerClause() :
{}
{
    MemorySizeClause()
  | CollatingSequenceClause()
  | SegmentLimitClause()
  | CharacterSetClause()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void MemorySizeClause() :
{}
{
  <MEMORY> [ <SIZE> ] IntegerConstant() [ <WORDS> | <CHARACTERS> | <MODULES> ]
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void CollatingSequenceClause() :
{}
{
  [ <PROGRAM> ] [ <COLLATING> ] <SEQUENCE> [ <IS> ] AlphabetName()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void SegmentLimitClause() :
{}
{
  ( <SEGMENT_LIMIT> | <SEGMENT> <LIMIT> ) [ <IS> ] IntegerConstant()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void CharacterSetClause() : // Tandem ???
{}
{
  <CHARACTER> <SET> [ CommentLine() ]
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void SpecialNamesParagraph() :
{}
{
  <SPECIAL_NAMES> <DOT>
  [ ( SpecialNameClause() )+ <DOT> ]
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void SpecialNameClause() :
{}
{
    AlphabetClause()
  | ClassClause()
  | CurrencySignClause()
  | DecimalPointClause()
  | SymbolicCharactersClause()
  | CallConventionClause()
  | EnvironmentNameIsMnemonicNameClause()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void IterableAlphabetPhrase() :
{}
{
    ( <THROUGH> | <THRU> ) IterableLiteral()
  | ( <ALSO> IterableLiteral() )+
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void AlphabetClause() :
{}
{
  <ALPHABET> AlphabetName() [ <IS> ]
  ( <STANDARD_1>
  | <STANDARD_2>
  | <NATIVE>
  | CobolWord()
  | ( IterableLiteral() [ IterableAlphabetPhrase() ] )+
  )
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void ClassClause() :
{}
{
  // TODO (SUPPRESS) : Dirty hack : IterableLiteral() --> Identifier() | IterableLiteral()
  <CLASS> ClassName() [ <IS> ] ( ( Identifier() | IterableLiteral() ) [ ( <THROUGH> | <THRU> ) ( Identifier() | IterableLiteral() ) ] )+
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void CurrencySignClause() :
{}
{
  <CURRENCY> [ <SIGN> ] [ <IS> ] Literal()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void DecimalPointClause() :
{}
{
  <DECIMAL_POINT> [ <IS> ] <COMMA>
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void SymbolicCharactersClause() :
{}
{
  <SYMBOLIC> [ <CHARACTERS> ] ( ( SymbolicCharacter() )+ [ ( <ARE> | <IS> ) ] ( NumericConstant() | <HEXNUMBER> )+ )+ [ <IN> AlphabetName() ]
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void CallConventionClause() :
{}
{
  <CALL_CONVENTION> IntegerConstant() [ <IS> ] ConventionName()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void EnvironmentNameIsMnemonicNameClause() :
{}
{
  EnvironmentName()
  ( [ <IS> ] MnemonicName() [ SpecialNamesParagraphStatusPhrase() ]
  | SpecialNamesParagraphStatusPhrase()
  )
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void SpecialNamesParagraphStatusPhrase() :
{}
{
  ( <ON>  [ <STATUS> ] [ <IS> ] IterableCondition() [ <OFF> [ <STATUS> ] [ <IS> ] IterableCondition() ]
  | <OFF> [ <STATUS> ] [ <IS> ] IterableCondition() [ <ON>  [ <STATUS> ] [ <IS> ] IterableCondition() ]
  )
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void InputOutputSection() :
{}
{
  <INPUT_OUTPUT> <SECTION> <DOT>
  ( InputOutputSectionParagraph() )*
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void InputOutputSectionParagraph() :
{}
{
    FileControlParagraph()
  | IOControlParagraph()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void FileControlParagraph() :
{}
{
  <FILE_CONTROL> ( LOOKAHEAD([ <DOT> ] FileControlEntry()) [ <DOT> ] FileControlEntry() )* <DOT>
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void FileControlEntry() :
{}
{
  SelectClause()
  ( FileControlClause() )*
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void FileControlClause() :
{}
{
    AssignClause()
  | ReserveClause()
  | OrganizationClause()
  | PaddingCharacterClause()
  | RecordDelimiterClause()
  | AccessModeClause()
  | RecordKeyClause()
  | AlternateRecordKeyClause()
  | FileStatusClause()
  | PasswordClause()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void SelectClause() :
{}
{
  <SELECT> [ <OPTIONAL> ] FileName()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void AssignClause() :
{}
{
  <ASSIGN> [ <TO> ] ( AssignmentName() | Literal() ) [ <USING> ( AssignmentName() | Literal() ) ]
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void ReserveClause() :
{}
{
  <RESERVE> IntegerConstant() [ <AREA> | <AREAS> ]
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void OrganizationClause() :
{}
{
  [ <ORGANIZATION> [ <IS> ] ]
  ( SequentialOrganizationClause()
  | LineSequentialOrganizationClause()
  | RelativeOrganizationClause()
  | IndexedOrganizationClause()
  )
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void SequentialOrganizationClause() :
{}
{
  <SEQUENTIAL>
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void LineSequentialOrganizationClause() :
{}
{
  <LINE> <SEQUENTIAL>
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void RelativeOrganizationClause() :
{}
{
  <RELATIVE> [ Identifier() ]
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void IndexedOrganizationClause() :
{}
{
  <INDEXED>
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void PaddingCharacterClause() :
{}
{
  <PADDING> [ <CHARACTER> ] [ <IS> ] ( Identifier() | Literal() )
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void RecordDelimiterClause() :
{}
{
  <RECORD> <DELIMITER> [ <IS> ] ( <STANDARD_1> | <IMPLICIT> | AssignmentName() )
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void AccessModeClause() :
{}
{
  <ACCESS> [ <MODE> ] [ <IS> ]
  ( SequentialAccessMode()
  | RandomAccessMode()
  | DynamicAccessMode()
  )
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void SequentialAccessMode() :
{}
{
  <SEQUENTIAL> [ RelativeKeyClause() ]
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void RandomAccessMode() :
{}
{
  <RANDOM> [ RelativeKeyClause() ]
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void DynamicAccessMode() :
{}
{
  <DYNAMIC> [ RelativeKeyClause() ]
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void RelativeKeyClause() :
{}
{
  <RELATIVE> [ <KEY> ] [ <IS> ] Identifier()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void RecordKeyClause() :
{}
{
  <RECORD> [ <KEY> ] [ <IS> ] Identifier() [ PasswordClause() ] [ [ <WITH> ] <DUPLICATES> ]
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void AlternateRecordKeyClause() :
{}
{
  <ALTERNATE> RecordKeyClause()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void PasswordClause() :
{}
{
  <PASSWORD> [ <IS> ] DataName()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void FileStatusClause() :
{}
{
  [ <FILE> ] <STATUS> [ <IS> ] Identifier() [ Identifier() ]
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void IOControlParagraph() :
{}
{
  <I_O_CONTROL>
  ( LOOKAHEAD([ <DOT> ] IOControlClause())
    [ <DOT> ] IOControlClause()
  )*
  <DOT>
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void IOControlClause() :
{}
{
    RerunClause()
  | SameAreaClause()
  | MultipleFileClause()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void RerunClause() :
{}
{
  <RERUN> [ <ON> ( AssignmentName() | FileName() ) ] <EVERY> ( LOOKAHEAD(Rerun2()) Rerun2() | IntegerConstant() [ <CLOCK_UNITS> ] )
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void Rerun2() :
{}
{
    IntegerConstant() <RECORDS>
  | [ <END> ] [ <OF> ] ( <REEL> | <UNIT> ) <OF> FileName()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void SameAreaClause() :
{}
{
  // TODO : Dirty hack : Are <SAME> <AREA> ... or <SAME> ... valid values ?
  <SAME> [ <RECORD> | <SORT> | <SORT_MERGE> ] [ <AREA> ] [ <FOR> ] ( FileName() )+
//| <SAME> <AREA> [ <FOR> ] ( FileName() )+
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void MultipleFileClause() :
{}
{
  <MULTIPLE> <FILE> [ <TAPE> ] [ <CONTAINS> ] ( FileName() [ [ <POSITION> ] IntegerConstant() ] )+
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void DataDivision() :
{}
{
  <DATA> <DIVISION> <DOT>
  ( DataDivisionSection() )*
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void DataDivisionSection() :
{}
{
    FileSection()
  | WorkingStorageSection()
  | LinkageSection()
  | CommunicationSection()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void FileSection() :
{}
{
  <FILE> <SECTION> <DOT>
  ( FileAndSortDescriptionEntry() ( DataDescriptionEntry() )* )*
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void FileAndSortDescriptionEntry() :
{}
{
  ( <FD> | <SD> ) FileName()
  (
    LOOKAHEAD([ <DOT> ] FileAndSortDescriptionEntryClause())
              [ <DOT> ] FileAndSortDescriptionEntryClause()
  )* <DOT>
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void FileAndSortDescriptionEntryClause() :
{}
{
    ExternalClause()
  | GlobalClause()
  | BlockContainsClause()
  | RecordContainsClause()
  | LabelRecordsClause()
  | ValueOfClause()
  | DataRecordClause()
  | LinageClause()
  | CodeSetClause()
  | ReportClause()
  | RecordingModeClause()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void ExternalClause() :
{}
{
  [ <IS> ] <EXTERNAL>
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void GlobalClause() :
{}
{
  [ <IS> ] <GLOBAL>
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void BlockContainsClause() :
{}
{
  <BLOCK> [ <CONTAINS> ] IntegerConstant() [ <TO> IntegerConstant() ] [ <RECORDS> | <CHARACTERS> ]
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void RecordContainsClause() :
{}
{
  <RECORD> [ <CONTAINS> ]
  ( IntegerConstant() [ <TO> IntegerConstant() ] [ <CHARACTERS> ]
  | [ <IS> ] <VARYING> [ <IN> ] [ <SIZE> ]
    [ [ <FROM> ] IntegerConstant() [ <TO> IntegerConstant() ] [ <CHARACTERS> ] ]
    [ <DEPENDING> [ <ON> ] Identifier() ]
  )
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void LabelRecordsClause() :
{}
{
  <LABEL> ( <RECORD>  [ ( <IS> | <ARE> ) ]
          | <RECORDS> [ ( <IS> | <ARE> ) ]
          ) ( <OMITTED> | <STANDARD> | ( DataName() )+ )
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void ValueOfClause() :
{}
{
  <VALUE> <OF> ( SystemName() <IS> ( Identifier() | Literal() ) )+
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void DataRecordClause() :
{}
{
  <DATA> ( <RECORD> [ <IS> ]
         | <RECORDS> [ <ARE> ]
         ) ( DataName() )+
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void LinageClause() :
{}
{
  <LINAGE> [ <IS> ] ( DataName() | IntegerConstant() ) [ <LINES> ]
  ( [ <WITH> ] <FOOTING> [ <AT> ] ( DataName() | IntegerConstant() )
  | [ <LINES> ] [ <AT> ] ( <TOP> | <BOTTOM> ) ( DataName() | IntegerConstant() )
  )*
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void RecordingModeClause() :
{}
{
  <RECORDING> [ <MODE> ] [ <IS> ] Mode()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void CodeSetClause() :
{}
{
  <CODE_SET> [ <IS> ] AlphabetName()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void ReportClause() :
{}
{
  ( <REPORT> [ <IS> ] | <REPORTS> [ <ARE> ] ) ( Identifier() )+
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void DataDescriptionEntry() :
{}
{
  ( <LEVEL_66>    LevelName66()                                            RenamesClause()                 <DOT>
  | <LEVEL_77>    LevelName77() ( LOOKAHEAD(DataDescriptionEntryClause() ) DataDescriptionEntryClause() )* <DOT>
  | <LEVEL_88>    LevelName88()                                            ConditionValueClause()          <DOT>
  | LevelNumber() LevelName()   ( LOOKAHEAD(DataDescriptionEntryClause() ) DataDescriptionEntryClause() )* <DOT>
  | ExecStatement()                                                                                        <DOT> /* ALA */
  )
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void DataDescriptionEntryClause() :
{}
{
    DataPictureClause()
  | DataValueClause()
  | DataUsageClause()
  | DataRedefinesClause()
  | DataExternalClause()
  | DataGlobalClause()
  | DataIdentifiedClause()
  | DataSignClause()
  | DataOccursClause()
  | DataSynchronizedClause()
  | DataJustifiedClause()
  | DataBlankWhenZeroClause()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void DataRedefinesClause() :
{}
{
  <REDEFINES> DataName() [ DataPictureClause() ]
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void DataBlankWhenZeroClause() :
{}
{
  <BLANK> [ <WHEN> ] ( <ZERO> | <ZEROS> | <ZEROES> )
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void DataJustifiedClause() :
{}
{
  ( <JUSTIFIED> | <JUST> ) [ <RIGHT> ]
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void DataOccursClause() :
{}
{
  <OCCURS> IntegerConstant() [ <TO> IntegerConstant() ] [ <TIMES> ]
  [ <DEPENDING> [ <ON> ] Identifier() ]
  ( ( <ASCENDING> | <DESCENDING> ) [ <KEY> ] [ <IS> ] ( Identifier() )+ )*
  [ <INDEXED> [ <BY> ] IndexName() ( [ <COMMACHAR> ] IndexName() )* ] /* ALA */
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void DataPictureClause() :
{}
{
  ( <PICTURE> | <PIC> ) [ <IS> ] <PICTURE_STRING> /* ALA */
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

/*
void PictureString() :
{}
{
  PictureOccurence() ( LOOKAHEAD(<DOTCHAR> PictureOccurence()) <DOTCHAR> PictureOccurence() | PictureOccurence() )*
  ( <DOTCHAR> )* // There can be additional dots at end of picture strings ...
}
*/
/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

/*
void PictureOccurence() :
{}
{
    ( NonDotChars() )+ [ <LPARENCHAR> IntegerConstant() <RPARENCHAR> ]
  | <DOTCHAR> ( <LPARENCHAR> IntegerConstant() <RPARENCHAR> | NonDotChars() )
}
*/

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

/*
void PicturePunctuation() :
{}
{
  <SLASHCHAR> | <COMMACHAR> | <COLONCHAR> | <ASTERISKCHAR> | <MINUSCHAR> | <PLUSCHAR> |
  <POWEROF> | <LESSTHANOREQUAL> | <LESSTHANCHAR> | <MORETHANOREQUAL> | <MORETHANCHAR> |
  <EQUALCHAR> | <NOTEQUAL>
}
*/

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void PictureCurrency() :
{}
{
  <DOLLARCHAR> // to be completed
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void NonDotChars() :
{}
{
  IntegerConstant() | CobolWord() | /*PicturePunctuation() |*/ PictureCurrency()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void DataExternalClause() :
{}
{
  [ <IS> ] <EXTERNAL> [ <BY> Literal() ]
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void DataGlobalClause() :
{}
{
  [ <IS> ] <GLOBAL>
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void DataIdentifiedClause() :
{}
{
  [ <IS> ] <IDENTIFIED> <BY> Literal()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void DataUsageClause() :
{}
{
  [ <USAGE> [ <IS> ] ] ( MemoryUsage() | ExternalUsage() | PropertyObjectModifier() )
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void MemoryUsage() :
{}
{
    <DISPLAY>             | <DISPLAY_1>
  | <COMP>                | <COMPUTATIONAL>
  | <COMP_N>              | <COMPUTATIONAL_N>
  | <COMP_1>              | <COMPUTATIONAL_1>
  | <COMP_1_REV>          | <COMPUTATIONAL_1_REV> | <COMP_1_M>         | <COMPUTATIONAL_1_M>
  | <COMP_1_MVS>          | <COMPUTATIONAL_1_MVS> | <COMP_1_E>         | <COMPUTATIONAL_1_E>
  | <COMP_2>              | <COMPUTATIONAL_2>
  | <COMP_2_REV>          | <COMPUTATIONAL_2_REV> | <COMP_2_M>         | <COMPUTATIONAL_2_M>
  | <COMP_2_MVS>          | <COMPUTATIONAL_2_MVS> | <COMP_2_E>         | <COMPUTATIONAL_2_E>
  | <COMP_3>              | <COMPUTATIONAL_3>
  | <COMP_4>              | <COMPUTATIONAL_4>
  | <COMP_5>              | <COMPUTATIONAL_5>
  | <COMP_6>              | <COMPUTATIONAL_6>
  | <COMP_S>              | <COMPUTATIONAL_S>     | <COMP_1_A>         | <COMPUTATIONAL_1_A>
  | <COMP_D>              | <COMPUTATIONAL_D>     | <COMP_2_A>         | <COMPUTATIONAL_2_A>
  | <PACKED_DECIMAL>      | <COMP_P>              | <COMPUTATIONAL_P>
  | <PACKED_DECIMAL_A>    | <COMP_3_A>            | <COMPUTATIONAL_3_A>
  | <PACKED_DECIMAL_I>    | <PACKED_DECIMAL_E>    | <PACKED_DECIMAL_H> | <COMP_3_M>        | <COMPUTATIONAL_3_M> | <PACKED_DECIMAL_M>
  | <BINARY> | <BINARY_M> | <COMP_M>              | <COMPUTATIONAL_M>  | <COMP_A>          | <COMPUTATIONAL_A>   | <COMP_4_M>         | <COMPUTATIONAL_4_M> | <COMP_B> | <COMPUTATIONAL_B>
  | <BINARY_REV>
  | <SQLIND>
  | <COMP_X>              | <COMP_X>              | <COMPUTATIONAL_X>  | <COMPUTATIONAL_X> | <COMP_5_M>          | <COMPUTATIONAL_5_M>
  | <COMP_X_REV>          | <COMPUTATIONAL_X_REV>
  | <DISPLAY_WS>
  | <EXTERNAL_FORM>
  | <NATIONAL>
  | <KANJI>
  | <SIGNED_SHORT>
  | <UNSIGNED_SHORT>
  | <SIGNED_INT>
  | <UNSIGNED_INT>
  | <SIGNED_LONG>
  | <UNSIGNED_LONG>
  | <FLOAT>
  | <DOUBLE>
  | <HANDLE> <OF> <THREAD> // <OF> is not optional here
  | <HANDLE> [ [ <OF> ] HandleComponent() [ ImplicitTitle() ] ]
  | <HANDLE> [ <OF> ] <FONT> [ <FIXED_FONT> | <TRADITIONAL_FONT> | <DEFAULT_FONT> | <SMALL_FONT> | <MEDIUM_FONT> | <LARGE_FONT> ]
  | <HANDLE> [ <OF> ] <WINDOW> [ ImplicitTitle() ]
  | <WINDOW>
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void ExternalUsage() :
{}
{
    <INDEX>
  | <POINTER>
  | <PROCEDURE_POINTER> | <PROCEDURE> <POINTER>
  | <STRING>
  | <JPACKED_DECIMAL>
  | <JSTRING>
  | <JBYTE>
  | <JSHORT>
  | <JINT>
  | <JLONG>
  | <JBOOLEAN>
  | <JFLOAT>
  | <JDOUBLE>
  | <JCHAR>
  | <ALPHANUMERIC_HASHTABLE>
  | <NUMERIC_HASHTABLE>
  | <OBJECT_HASHTABLE>
  | <OBJECT> <REFERENCE> [ [ <OF> ] ( ClassName() | Literal() ) ]
  | ( <OBJECT> | <COMPONENT> ) [ [ <OF> ] ClassName() ]
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void PropertyObjectModifier() :
{}
{
    <CHARACTER>
  | <BINARY_BYTE>
  | <BINARY_SHORT>
  | <BINARY>
  | <BINARY_LONG>
  | <BINARY_DOUBLE>
  | <FLOAT_SHORT>
  | <FLOAT_LONG>
  | <BIT>
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void DataSignClause() :
{}
{
  [ <SIGN> [ <IS> ] ] ( <LEADING> | <TRAILING> ) [ <SEPARATE> [ <CHARACTER> ] ]
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void DataSynchronizedClause() :
{}
{
  ( <SYNCHRONIZED> | <SYNC> ) [ ( <LEFT> | <RIGHT> ) ]
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void DataValueClause() :
{}
{
  ( <VALUE> [ <IS> ] | <VALUES> [ <ARE> ] ) Through() ( [ <COMMACHAR> ] Through() )* /* ALA */
}

/****************************************************************************/
/*                                                                          */
/****************************************************************************/

/* ALA */
void Through() :
{}
{
  // TODO (SUPPRESS) : Dirty hack : Literal() --> PictureString() | IterableLiteral()
 /*( LOOKAHEAD(PictureString()) PictureString() |*/ IterableLiteral() /*)*/ [ ( <THROUGH> | <THRU> ) IterableLiteral() ]
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void ConditionValueClause() :
{}
{
  DataValueClause()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void RenamesClause() :
{}
{
  <RENAMES> Identifier() [ ( <THROUGH> | <THRU> ) Identifier() ]
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void CommunicationDescriptionEntry() :
{}
{
  (
    LOOKAHEAD(CommunicationInputEntry())  CommunicationInputEntry()
  | LOOKAHEAD(CommunicationOutputEntry()) CommunicationOutputEntry()
  | LOOKAHEAD(CommunicationIOEntry())     CommunicationIOEntry()
  ) <DOT>
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void CommunicationInputEntry() :
{}
{
  <CD> CdName() [ <FOR> ] [ <INITIAL> ] <INPUT> ( CommunicationInputClause() )* ( DataName() )*
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void CommunicationOutputEntry() :
{}
{
  <CD> CdName() [ <FOR> ] <OUTPUT> ( CommunicationOutputClause() )*
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void CommunicationIOEntry() :
{}
{
  <CD> CdName() [ <FOR> ] [ <INITIAL> ] <I_O> ( CommunicationIOClause() )* ( DataName() )*
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void CommunicationInputClause() :
{}
{
    <MESSAGE> ( <DATE> | <TIME> | <COUNT> ) [ <IS> ] DataName()
  | <TEXT> <LENGTH> [ <IS> ] DataName()
  | <END> <KEY> [ <IS> ] DataName()
  | <STATUS> <KEY> [ <IS> ] DataName()
  | <COUNT> [ <IS> ] DataName()
  | [ <SYMBOLIC> ] ( <QUEUE> | <SUB_QUEUE_1> | <SUB_QUEUE_2> | <SUB_QUEUE_3> | <SOURCE> ) [ <IS> ] DataName()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void CommunicationOutputClause() :
{}
{
    <DESTINATION> <COUNT> [ <IS> ] DataName()
  | <TEXT> <LENGTH> [ <IS> ] DataName()
  | <STATUS> <KEY> [ <IS> ] DataName()
  | LOOKAHEAD([ <SYMBOLIC> ] <DESTINATION> [ <IS> ] DataName())
    [ <SYMBOLIC> ] <DESTINATION> [ <IS> ] DataName()
  | <DESTINATION> <TABLE> <OCCURS> IntegerConstant() [ <TIMES> ] [ <INDEXED> [ <BY> ] ( IndexName() )+ ]
  | <ERROR> <KEY> [ <IS> ] DataName()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void CommunicationIOClause() :
{}
{
    <MESSAGE> ( <DATE> | <TIME> ) [ <IS> ] DataName()
  | <TEXT> <LENGTH> [ <IS> ] DataName()
  | <END> <KEY> [ <IS> ] DataName()
  | <STATUS> <KEY> [ <IS> ] DataName()
  | [ <SYMBOLIC> ] <TERMINAL> [ <IS> ] DataName()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void WorkingStorageSection() :
{}
{
  <WORKING_STORAGE> <SECTION> <DOT>
  ( DataDescriptionEntry() )*
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void LinkageSectionEntry() :
{}
{
  ( DataDescriptionEntry() )*
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void LinkageSection() :
{}
{
  <LINKAGE> <SECTION> <DOT>
  LinkageSectionEntry()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void CommunicationSection() :
{}
{
  <COMMUNICATION> <SECTION> <DOT>
  ( CommunicationDescriptionEntry() ( DataDescriptionEntry() )* )*
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void ProcedureDivision() :
{}
{
  <PROCEDURE> <DIVISION> [ ConventionName() ] [ <USING> ( DataName() )+ ] <DOT>
  [ Declaratives() ]
  ProcedureBody()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void Declaratives() :
{}
{
  <DECLARATIVES> <DOT>
  ( SectionHeader() <DOT>
    UseStatement() <DOT>
    Paragraphs()
  )+
  <END> <DECLARATIVES> <DOT>
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void ProcedureBody() :
{}
{
  Paragraphs() ( ProcedureSection() )*
}

//
//
//

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void ProcedureSection() :
{}
{
  SectionHeader() <DOT> Paragraphs()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void SectionHeader() :
{}
{
  SectionName() <SECTION> [ IntegerConstant() ]
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void Paragraphs() :
{}
{
  ( Sentence() )* ( Paragraph() )*
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void Paragraph() :
{}
{
  ParagraphName() <DOT>

  ( ExitStatement()
  | AlteredGoto()
  | Sentence()
  )* /* ALA */
}

//
//
//

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void Sentence() :
{}
{
  StatementList() <DOT>
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void StatementList() :
{}
{
  ( Statement() )+
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void Statement() :
{}
{
  ( AcceptStatement()
  | AddStatement()
  | AlterStatement()
  | CallStatement()
  | CancelStatement()
  | CloseStatement()
  | ComputeStatement()
  | ContinueStatement()
  | DeleteStatement()
  | DisplayStatement()
  | DivideStatement()
  | EntryStatement()
  | EvaluateStatement()
  | ExecStatement() /* ALA */
//| ExitStatement()
  | ExitProgramStatement()
  | GobackStatement()
  | GotoStatement()
  | IfStatement()
  | InitializeStatement()
  | InspectStatement()
  | MergeStatement()
  | MoveStatement()
  | MultiplyStatement()
  | OpenStatement()
  | PerformStatement()
  | ReadStatement()
  | ReleaseStatement()
  | ReturnStatement()
  | RewriteStatement()
  | SearchStatement()
  | SetStatement()
  | SortStatement()
  | StartStatement()
  | StopStatement()
  | StringStatement()
  | SubtractStatement()
  | UnstringStatement()
  | WriteStatement()
  | ServiceStatement()
  )
}

//
//
//

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void AcceptStatement() :
{}
{
  <ACCEPT> ( <REPLY> | <OMITTED> | Identifier() )
  [ <FROM>
  ( MnemonicName()
  | EnvironmentName()
  | <DATE> [ <YYYYMMDD> ]
  | <DAY> [ <YYYYDDD> ]
  | <DAY_OF_WEEK>
  | <TIME>
  )
  ]
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void AddStatement() :
{}
{
  <ADD>
  ( ( <CORRESPONDING> | <CORR> )                    Identifier()                    <TO>   Identifier() [ <ROUNDED> ]
  | ( Identifier() | Literal() )( [ <COMMACHAR> ] ( Identifier() | Literal() ) )* [ <TO> ( Identifier() [ <ROUNDED> ] )+ ] [ <GIVING> ( Identifier() [ <ROUNDED> ] )+ ] /* ALA */
  )
  [       [ <ON> ] <SIZE> <ERROR> StatementList() ]
  [ <NOT> [ <ON> ] <SIZE> <ERROR> StatementList() ]
  [ <END_ADD> ]
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void AlteredGoto() :
{}
{
  <GO> [ <TO> ] <DOT>
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

/**
 * ALTER is one of the most dangerous statement ever invented by man.
 * ALTER is to GOTO what an atomic bomb is to firecrackers.
 */
void AlterStatement() :
{}
{
  <ALTER> ( ProcedureName() <TO> [ <PROCEED> <TO> ] ProcedureName() )+
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void CallByContent() :
{}
{
  [ <BY> ] <CONTENT>       ( <ADDRESS> <OF> Identifier() | [ <LENGTH> <OF> ] Identifier() | Literal() | <OMITTED> ) ( [ <COMMACHAR> ] ( <ADDRESS> <OF> Identifier() | [ <LENGTH> <OF> ] Identifier() | Literal() | <OMITTED> ) )* /* ALA */
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void CallByReference() :
{}
{
  [ [ <BY> ] <REFERENCE> ] ( <ADDRESS> <OF> Identifier() | Identifier() | FileName() | <OMITTED> )                  ( [ <COMMACHAR> ] ( <ADDRESS> <OF> Identifier() | Identifier() | FileName() | <OMITTED> ) )* /* ALA */
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void CallByDescriptor() :
{}
{
  [ <BY> ] <DESCRIPTOR>   ( <ADDRESS> <OF> Identifier() |                   Identifier() | FileName() | <OMITTED> )+
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void CallByValue() :
{}
{
  [ <BY> ] <VALUE>        ( <ADDRESS> <OF> Identifier() | [ <LENGTH> <OF> ] Identifier() | Literal() | <OMITTED> )+
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void CallStatement() :
{}
{
  <CALL>
  ( LOOKAHEAD(ConventionName() ( Identifier() | Literal() )) ConventionName() ( Identifier() | Literal() )
  |                                                                           ( Identifier() | Literal() )
  )
  [ [ <WITH> ] <STDCALL> [ <LINKAGE> ] ] // Fijutsu Cobol
  [ <USING>
    ( LOOKAHEAD(CallByContent())    CallByContent()
    | LOOKAHEAD(CallByDescriptor()) CallByDescriptor()
    | LOOKAHEAD(CallByValue())      CallByValue()
    | LOOKAHEAD(CallByReference())  CallByReference()
    )+
  ]
  [ ( <GIVING> | <RETURNING> ) Identifier() ]
  [ LOOKAHEAD([ <ON> ] <EXCEPTION>) [ <ON> ] <EXCEPTION> StatementList() ]
  [ LOOKAHEAD(<NOT> [ <ON> ] <EXCEPTION>) <NOT> [ <ON> ] <EXCEPTION> StatementList() ]
  [ [ <ON> ] <OVERFLOW> StatementList() ]
  [ <NOT> [ <ON> ] <OVERFLOW> StatementList() ]
  [ <END_CALL> ]
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void CancelStatement() :
{}
{
  <CANCEL> ( Identifier() | Literal() )+
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void CloseStatement() :
{}
{
  <CLOSE>
  ( FileName()
            [ ( ( <REEL> | <UNIT> ) [ ( [ <FOR> ] <REMOVAL>
                                      | [ <WITH> ] <NO> <REWIND>
                                      )
                                    ]
              | [ <WITH> ] ( <NO> <REWIND> | <LOCK> )
              )
            ]
  )+
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void ComputeStatement() :
{}
{
  <COMPUTE> ( Identifier() [ <ROUNDED> ] )+
            ( <EQUALCHAR> | <EQUAL> )
            ArithmeticExpression()
            [ [ <ON> ] <SIZE> <ERROR> StatementList() ]
            [ <NOT> [ <ON> ] <SIZE> <ERROR> StatementList() ]
  [ <END_COMPUTE> ]
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void ContinueStatement() :
{}
{
  <CONTINUE>
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void DeleteStatement() :
{}
{
  <DELETE> FileName() [ <RECORD> ]
  [ <INVALID> [ <KEY> ] StatementList() ]
  [ <NOT> <INVALID> [ <KEY> ] StatementList() ]
  [ <END_DELETE> ]
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void DisplayStatement() :
{}
{
  <DISPLAY> ( Identifier() | Literal() ) ( [ <COMMACHAR> ] ( Identifier() | Literal() ) )* /* ALA */
  [ <UPON> ( MnemonicName() | EnvironmentName() ) ]
  [ [ <WITH> ] <NO> <ADVANCING> ]
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void DivideStatement() :
{}
{
  <DIVIDE> ( Identifier() | Literal() )
  ( <INTO> ( Identifier() | Literal() ) [ <ROUNDED> ] ( <GIVING> ( Identifier() [ <ROUNDED> ] )+ | ( ( Identifier() | Literal() ) [ <ROUNDED> ] )* )
  | <BY> ( Identifier() | Literal() )                 [ <GIVING> ( Identifier() [ <ROUNDED> ] )+ ]
  )
  [ <REMAINDER> Identifier() ]
  [ [ <ON> ] <SIZE> <ERROR> StatementList() ]
  [ <NOT> [ <ON> ] <SIZE> <ERROR> StatementList() ]
  [ <END_DIVIDE> ]
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void EntryStatement() :
{}
{
  <ENTRY> Literal() [ <USING> ( Identifier() )+ ]
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void EvaluateStatement() :
{}
{
  <EVALUATE> EvaluateValue()
  ( <ALSO> EvaluateValue() )*
  ( ( EvaluateWhenClause() )+ [ <THEN> ] StatementList() )+
  [ <END_EVALUATE> ]

}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void EvaluateValue() :
{}
{
  ( Condition()
  | <TRUE> // Useless here ...
  | <FALSE> // Useless here ...
  )
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void EvaluateWhenClause() :
{}
{
  ( LOOKAHEAD(<WHEN> <OTHER>)
    <WHEN> <OTHER>
  | <WHEN> EvaluatePhrase() ( <ALSO> EvaluatePhrase() )*
  )
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void EvaluateThruPhrase() :
{}
{
  [ <NOT> ] ArithmeticExpression() ( <THROUGH> | <THRU> ) ArithmeticExpression()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void EvaluatePhrase() :
{}
{
  ( LOOKAHEAD(EvaluateThruPhrase()) EvaluateThruPhrase()
  | Condition()
  | <ANY>
  | <TRUE> // Useless here ...
  | <FALSE> // Useless here ...
  )
}

/****************************************************************************/
/*                                                                          */
/****************************************************************************/

void ExecStatement() :
{}
{
  <EXEC> /* ALA */
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void ExitStatement() :
{}
{
  <EXIT> <DOT>
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void ExitProgramStatement() :
{}
{
  <EXIT> <PROGRAM>
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void GobackStatement() :
{}
{
  <GOBACK>
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void GotoStatement() :
{}
{
  <GO> [ <TO> ]
  ( ( ProcedureName() )+ [ <DEPENDING> [ <ON> ] Identifier() ]
  | <MORE_LABELS> // ??? IBM extension ???
  )
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void IfStatement() :
{}
{
  <IF> Condition() [ <THEN> ] ( StatementList() | <NEXT> <SENTENCE> )
  [ <ELSE> ( StatementList() | <NEXT> <SENTENCE> ) ]
  [ <END_IF> ]

}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void InitializeStatement() :
{}
{
  <INITIALIZE> ( Identifier() )+
  [ <REPLACING> ( ( <ALPHABETIC>
                  | <ALPHANUMERIC>
                  | <NUMERIC>
                  | <ALPHANUMERIC_EDITED>
                  | <NUMERIC_EDITED>
                  | <DBCS>
                  | <EGCS>
                  ) [ <DATA> ] <BY> ( Identifier() | Literal() )
                )+
  ]

}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void InspectStatement() :
{}
{
  <INSPECT> Identifier()
  ( TallyingPhrase()
  | ConvertingPhrase()
  | ReplacingPhrase()
  )
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void IterableTallyingClause() :
{}
{
  <CHARACTERS> ( IterableBeforeAfterPhrase() )*
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void RecursiveTallyingClause() :
{}
{
  ( <ALL> | <LEADING> ) IterableBeforeAfterClause()
  ( LOOKAHEAD(Identifier() <FOR> ) ( Identifier() <FOR> ( RecursiveTallyingClause() | IterableTallyingClause() )+ )+
  | IterableBeforeAfterClause()
  )*
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void TallyingPhrase() :
{}
{
  <TALLYING>
  ( Identifier() <FOR> ( RecursiveTallyingClause() | IterableTallyingClause() )+ )+
  [ ReplacingPhrase() ]
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void ConvertingPhrase() :
{}
{
  <CONVERTING> ( Identifier() | Literal() ) <TO> IterableBeforeAfterClause()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void ReplacingPhrase() :
{}
{
  <REPLACING>
  ( <CHARACTERS> <BY> IterableBeforeAfterClause()
  | ( <ALL> | <LEADING> | <FIRST> ) ( LOOKAHEAD(( Identifier() | Literal() ) <BY> IterableBeforeAfterClause()) ( Identifier() | Literal() ) <BY> IterableBeforeAfterClause() )+
  )+
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void IterableBeforeAfterClause() :
{}
{
  ( Identifier() | IterableLiteral() ) ( IterableBeforeAfterPhrase() )*
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void IterableBeforeAfterPhrase() :
{}
{
  ( <BEFORE> | <AFTER> ) [ <INITIAL> ] ( Identifier() | IterableLiteral() )
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void MergeStatement() :
{}
{
  <MERGE> FileName()
  ( [ <ON> ] ( <ASCENDING> | <DESCENDING> ) [ <KEY> ] ( Identifier() )+ )+
  [ [ <COLLATING> ] <SEQUENCE> [ <IS> ] AlphabetName() ] <USING> FileName() ( FileName() )+
  ( <OUTPUT> <PROCEDURE> [ <IS> ] ProcedureName() [ ( <THROUGH> | <THRU> ) ProcedureName() ]
  | <GIVING> ( FileName() )+
  )
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void MoveStatement() :
{}
{
  // <MOVE> FunctionClause() : NON-CONFORMING STANDARD
  <MOVE>
  ( ArithmeticExpression() <TO> Identifier() ( [ <COMMACHAR> ] Identifier() )* /* ALA */
  | ( <CORRESPONDING> | <CORR> ) Identifier() <TO> ( Identifier() )+
  )
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void MultiplyStatement() :
{}
{
  <MULTIPLY> ( Identifier() | Literal() ) <BY> ( ( Identifier() | Literal() ) [ <ROUNDED> ] )+
  [ <GIVING> ( Identifier() [ <ROUNDED> ] )+ ]
  [ [ <ON> ] <SIZE> <ERROR> StatementList() ]
  [ <NOT> [ <ON> ] <SIZE> <ERROR> StatementList() ]
  [ <END_MULTIPLY> ]
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void OpenStatement() :
{}
{
  <OPEN> ( <INPUT> ( FileName() [ ( <REVERSED> | [ <WITH> ] <NO> <REWIND> ) ] )+
         | <OUTPUT> ( FileName() [ [ <WITH> ] <NO> <REWIND> ] )+
         | <I_O> ( FileName() )+
         | <EXTEND> ( FileName() )+
         )+
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void PerformStatement() :
{}
{
  // TODO : Rule "PERFORM <Identifier Range> ***<With Test>*** <Numeric> TIMES" doesn't exist.
  <PERFORM>
  ( LOOKAHEAD(PerformFlavour() StatementList() <END_PERFORM>) PerformFlavour() StatementList() <END_PERFORM>
  | LOOKAHEAD(PerformProcedureScopeClause() PerformFlavour()) PerformProcedureScopeClause() PerformFlavour()
  | LOOKAHEAD(StatementList() <END_PERFORM>)                  StatementList() <END_PERFORM>
  | PerformProcedureScopeClause()
  )
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void PerformFlavour() :
{}
{
    PerformTimeClause()
  | [ PerformTestPositionClause() ] ( PerformUntilClause() | PerformVaryingWithAfterClause() )
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void PerformVaryingWithAfterClause() :
{}
{
  <VARYING> PerformVaryingPhrase() ( <AFTER> PerformVaryingPhrase() )*
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void PerformVaryingPhrase() :
{}
{
  Identifier()
  <FROM> ( Identifier() | Literal() )
  <BY>   ( Identifier() | Literal() )
  PerformUntilClause()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void PerformUntilClause() :
{}
{
  <UNTIL> Condition()
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void PerformTestPositionClause() :
{}
{
  [ <WITH> ] <TEST> ( <BEFORE> | <AFTER> )
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void PerformProcedureScopeClause() :
{}
{
  ProcedureName() [ ( <THROUGH> | <THRU> ) ProcedureName() ]
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void PerformTimeClause() :
{}
{
  ( Identifier() | IntegerConstant() ) <TIMES>
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void ReadStatement() :
{}
{
  <READ> FileName() [ <NEXT> ] [ <RECORD> ]
  [ <INTO> Identifier() ]
  [ <KEY> [ <IS> ] Identifier() ]
  [ <INVALID> [ <KEY> ] StatementList() ]
  [ <NOT> <INVALID> [ <KEY> ] StatementList() ]
  [ [ <AT> ] <END> StatementList() ]
  [ <NOT> [ <AT> ] <END> StatementList() ]
  [ <END_READ> ]
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void ReleaseStatement() :
{}
{
  <RELEASE> RecordName() [ <FROM> Identifier() ]
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void ReturnStatement() :
{}
{
  <RETURN> FileName() [ <RECORD> ] [ <INTO> Identifier() ]
  [ <AT> ] <END> StatementList()
  [ <NOT> [ <AT> ] <END> StatementList() ]
  [ <END_RETURN> ]
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void RewriteStatement() :
{}
{
  <REWRITE> RecordName() [ <FROM> Identifier() ]
  [ <INVALID> [ <KEY> ] StatementList() ]
  [ <NOT> <INVALID> [ <KEY> ] StatementList() ]
  [ <END_REWRITE> ]
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void SearchStatement() :
{}
{
  <SEARCH> [ <ALL> ] Identifier()
  [ <VARYING> Identifier() ]
  [ [ <AT> ] <END> StatementList() ]
  ( <WHEN> Condition() ( StatementList() | <NEXT> <SENTENCE> ) )+
  [ <END_SEARCH> ]
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void SetStatement() :
{}
{
  <SET> [ <CONFIGURATION> ] ( Identifier() | Literal() ) ( [ <COMMACHAR> ] Identifier() | Literal() )* /* ALA */
  ( <TO> [ <CONFIGURATION> ] ( Identifier() | <TRUE> | <FALSE> | <ON> | <OFF> | [ <ENTRY> ] Literal() )
  | ( <UP> | <DOWN> ) [ <BY> ] ( Identifier() | Literal() )
  )
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void SortStatement() :
{}
{
  <SORT> FileName()
  ( [ <ON> ] ( <ASCENDING> | <DESCENDING> ) [ <KEY> ] ( Identifier() )+ )+
  [ [ <WITH> ] <DUPLICATES> [ <IN> ] [ <ORDER> ] ]
  [ [ <COLLATING> ] <SEQUENCE> [ <IS> ] AlphabetName() ]
  ( <USING> ( FileName() )+ | <INPUT> <PROCEDURE> [ <IS> ] ProcedureName() [ ( <THROUGH> | <THRU> ) ProcedureName() ] )
  ( <GIVING> ( FileName() )+ | <OUTPUT> <PROCEDURE> [ <IS> ] ProcedureName() [ ( <THROUGH> | <THRU> ) ProcedureName() ] )
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void StartStatement() :
{}
{
  <START> FileName()
  [ <KEY> RelationalOperator() Identifier() ]
  [ <INVALID> [ <KEY> ] StatementList() ]
  [ <NOT> <INVALID> [ <KEY> ] StatementList() ]
  [ <END_START> ]
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void StopStatement() :
{}
{
  <STOP> ( <RUN> | Literal() )
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void StringStatement() :
{}
{
  <STRING>
  ( ( Identifier() | IterableLiteral() ) ( [ <COMMACHAR> ] ( Identifier() | IterableLiteral() ) )* <DELIMITED> [ <BY> ] ( Identifier() | IterableLiteral() | <SIZE> ) )+
  <INTO> Identifier()
  [ [ <WITH> ] <POINTER> Identifier() ]
  [ [ <ON> ] <OVERFLOW> StatementList() ]
  [ <NOT> [ <ON> ] <OVERFLOW> StatementList() ]
  [ <END_STRING> ]
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void SubtractStatement() :
{}
{
  <SUBTRACT>
  ( ( Identifier() | Literal() )+ <FROM> ( ( Identifier() | Literal() ) [ <ROUNDED> ] )+ [ <GIVING> ( Identifier() [ <ROUNDED> ] )+ ]
  | ( <CORRESPONDING> | <CORR> ) Identifier() <FROM> Identifier() [ <ROUNDED> ]
  )
  [ [ <ON> ] <SIZE> <ERROR> StatementList() ]
  [ <NOT> [ <ON> ] <SIZE> <ERROR> StatementList() ]
  [ <END_SUBTRACT> ]
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void UnstringStatement() :
{}
{
  <UNSTRING> Identifier()
  [ <DELIMITED> [ <BY> ] [ <ALL> ] ( Identifier() | Literal() ) ( <OR> [ <ALL> ] ( Identifier() | Literal() ) )* ]
  <INTO>
  ( Identifier() [ <DELIMITER> [ <IN> ] Identifier() ] [ <COUNT> [ <IN> ] Identifier() ] )+
  [ [ <WITH> ] <POINTER> Identifier() ] [ <TALLYING> [ <IN> ] Identifier() ]
  [ [ <ON> ] <OVERFLOW> StatementList() ]
  [ <NOT> [ <ON> ] <OVERFLOW> StatementList() ]
  [ <END_UNSTRING> ]
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void UseStatement() :
{}
{
  <USE> ( [ <FOR> ] <DEBUGGING> [ <ON> ] ( ( ProcedureName() )+ | <ALL> ( <PROCEDURES> | <REFERENCES> <OF> DataName() ) )
        | [ <GLOBAL> ] <AFTER> [ <STANDARD> ]
          ( ( <EXCEPTION> | <ERROR> )
          | [ ( <BEGINNING> | <ENDING> ) ] [ ( <FILE> | <REEL> | <UNIT> ) ] <LABEL>
          )
          <PROCEDURE> [ <ON> ] ( ( FileName() )+ | <INPUT> | <OUTPUT> | <I_O> | <EXTEND> )
        )
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void WriteStatement() :
{}
{
  <WRITE> RecordName() [ <FROM> Identifier() ]
  [ AdvancingPhrase() ]
  [ [ <AT> ] ( <END_OF_PAGE> | <EOP> ) StatementList() ]
  [ <NOT> [ <AT> ] ( <END_OF_PAGE> | <EOP> ) StatementList() ]
  [ <INVALID> [ <KEY> ] StatementList() ]
  [ <NOT> <INVALID> [ <KEY> ] StatementList() ]
  [ <END_WRITE> ]
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void ServiceStatement() :
{}
{
  <SERVICE> <LABEL>
}

/*****************************************************************************************************************************************
 *
 *****************************************************************************************************************************************/

void AdvancingPhrase() :
{}
{
  ( <BEFORE> | <AFTER> ) [ <ADVANCING> ]
  ( <PAGE>
  | ( IntegerConstant() | Identifier() | Literal() ) [ ( <LINE> | <LINES> ) ]
  | MnemonicName() // Useless here ...
  )
}

/****************************************************************************/
/*                                                                          */
/****************************************************************************/
/* ALA */
void DataDescription() :
{}
{
  ( DataDescriptionEntry() )*
  <EOF>
}

/****************************************************************************/
/*                                                                          */
/****************************************************************************/
/* ALA */
void SentenceList() :
{}
{
  ( Sentence() )*
  <EOF>
}