/*
 *   Copyright (c) 20XX by XXXXXXXX All Rights Reserved.
 *   THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF XXXXXXXX
 *   The copyright notice above does not evidence any actual or intended
 *   publication of such source code.
 */

options {
   FORCE_LA_CHECK = true;
   IGNORE_CASE = true;
   LOOKAHEAD = 2;
   STATIC = false;
}

PARSER_BEGIN(CopyParser)
package cl.bee.perseus.copyparser;

import java.io.*;
import org.apache.log4j.*;
import cl.bee.perseus.copyparser.syntaxtree.*;
import java.util.Vector;


public class CopyParser 
{
   public static void main(String args[])
   {
   }
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      NodeToken node = new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);

      if ( t.specialToken == null )
         return node;

      Vector temp = new Vector();
      Token orig = t;

      while ( t.specialToken != null ) {
         t = t.specialToken;
         temp.addElement(new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn));
      }

      // Reverse the special token list
      for ( int i = temp.size() - 1; i >= 0; --i )
         node.addSpecial((NodeToken)temp.elementAt(i));

      node.trimSpecials();
      return node;
   }
}


PARSER_END(CopyParser)

MORE :
{
   "*>" : COMMENT_STATE
}

SPECIAL_TOKEN :
{
   <EOL: "\n">
   | <SPACECHAR: (" " | "\t" | "\f" | ";" | "\r")+>
   | <SPACE_SEPARATOR: (<SPACECHAR> | <EOL>)+>
   | <COMMA_SEPARATOR: "," <SPACE_SEPARATOR>>
}

<COMMENT_STATE> SPECIAL_TOKEN :
{
   <COMMENT: "\n" | "\r" | "\r\n"> : DEFAULT
}

<COMMENT_STATE> MORE :
{
   <~[]>
}

TOKEN :
{
   <ALL: "ALL">
   | <BY: "BY">
   | <COPY: "COPY">
   | <HIGH_VALUE: "HIGH-VALUE">
   | <HIGH_VALUES: "HIGH-VALUES">
   | <IN: "IN">
   | <LOW_VALUE: "LOW-VALUE">
   | <LOW_VALUES: "LOW-VALUES">
   | <NULL: "NULL">
   | <NULLS: "NULLS">
   | <OF: "OF">
   | <QUOTE: "QUOTE">
   | <QUOTES: "QUOTES">
   | <REPLACING: "REPLACING">
   | <SPACE: "SPACE">
   | <SPACES: "SPACES">
   | <SUPPRESS: "SUPPRESS">
   | <ZERO: "ZERO">
   | <ZEROES: "ZEROES">
   | <ZEROS: "ZEROS">
   | <DOTCHAR: ".">
   | <MINUSCHAR: "-">
   | <PLUSCHAR: "+">
   | <HEXNUMBER: ("X\"" (["0"-"9", "a"-"f"])+ "\"" | "X'" (["0"-"9", "a"-"f"])+ "'")>
   | <INTEGER: (<DIGIT>)+>
   | <REAL: (<DIGIT>)* [",", "."] (<DIGIT>)+>
   | <QUOTEDPSEUDOTEXT: "==" (~["="])* "==">
   | <QUOTEDSTRING: (<QUOTECHAR> (~["\""] | <DOUBLEDQUOTECHAR>)* <QUOTECHAR> | <APOSTROPHE> (~["'"] | <DOUBLEDAPOSTROPHE>)* <APOSTROPHE>)>
   | <IDENTIFIER: ((<DIGIT>)+ (<MINUSCHAR>)*)* (<DIGIT>)* <LETTER> (<LETTERDIGIT>)* ((<MINUSCHAR>)+ (<LETTERDIGIT>)+)*>
   | <#APOSTROPHE: "'">
   | <#DOUBLEDAPOSTROPHE: "''">
   | <#DOUBLEDQUOTECHAR: "\"\"">
   | <#QUOTECHAR: "\"">
   | <#DOLLARCHAR: "$">
   | <#DIGIT: ["0"-"9"]>
   | <#LETTER: ["a"-"z"]>
   | <#LETTERDIGIT: ["a"-"z", "0"-"9"]>
}

CopyStatement CopyStatement() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   Literal n5;
   NodeOptional n6 = new NodeOptional();
   NodeSequence n7;
   NodeChoice n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeChoice n13;
   NodeToken n14;
   Token n15;
   Literal n16;
   NodeOptional n17 = new NodeOptional();
   NodeToken n18;
   Token n19;
   NodeOptional n20 = new NodeOptional();
   NodeSequence n21;
   NodeToken n22;
   Token n23;
   NodeList n24;
   NodeSequence n25;
   CopyOperand n26;
   NodeToken n27;
   Token n28;
   CopyOperand n29;
   NodeToken n30;
   Token n31;
   NodeToken n32;
   Token n33;

   
}
{
   n1=<COPY> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n4=<IDENTIFIER> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n2 = new NodeChoice(n3, 0); }
      |
         n5=Literal()
         { n2 = new NodeChoice(n5, 1); }
      )
      
   )
   (
      { n7 = new NodeSequence(2); }
      (
         (
            n10=<OF> { n9 = JTBToolkit.makeNodeToken(n10); }
            { n8 = new NodeChoice(n9, 0); }
         |
            n12=<IN> { n11 = JTBToolkit.makeNodeToken(n12); }
            { n8 = new NodeChoice(n11, 1); }
         )
         
      )
      { n7.addNode(n8); }
      (
         (
            n15=<IDENTIFIER> { n14 = JTBToolkit.makeNodeToken(n15); }
            { n13 = new NodeChoice(n14, 0); }
         |
            n16=Literal()
            { n13 = new NodeChoice(n16, 1); }
         )
         
      )
      { n7.addNode(n13); }
      { n6.addNode(n7); }
   )?
   (
      n19=<SUPPRESS> { n18 = JTBToolkit.makeNodeToken(n19); }
      { n17.addNode(n18); }
   )?
   (
      { n24 = new NodeList(); }
      { n21 = new NodeSequence(2); }
      n23=<REPLACING> { n22 = JTBToolkit.makeNodeToken(n23); }
      { n21.addNode(n22); }
      (
         { n25 = new NodeSequence(3); }
         n26=CopyOperand()
         { n25.addNode(n26); }
         n28=<BY> { n27 = JTBToolkit.makeNodeToken(n28); }
         { n25.addNode(n27); }
         n29=CopyOperand()
         { n25.addNode(n29); }
         { n24.addNode(n25); }
      )+
      { n24.nodes.trimToSize(); }
      { n21.addNode(n24); }
      { n20.addNode(n21); }
   )?
   n31=<DOTCHAR> { n30 = JTBToolkit.makeNodeToken(n31); }
   n33=<EOF> { 
      n33.beginColumn++; n33.endColumn++;
      n32 = JTBToolkit.makeNodeToken(n33);
   }
   
   { return new CopyStatement(n0,n2,n6,n17,n20,n30,n32); }
}

Literal Literal() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeChoice n3;
   NonNumericConstant n4;
   NumericConstant n5;
   FigurativeConstant n6;

   
}
{
   (
      n2=<ALL> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   (
      (
         n4=NonNumericConstant()
         { n3 = new NodeChoice(n4, 0); }
      |
         n5=NumericConstant()
         { n3 = new NodeChoice(n5, 1); }
      |
         n6=FigurativeConstant()
         { n3 = new NodeChoice(n6, 2); }
      )
      
   )
   
   { return new Literal(n0,n3); }
}

NonNumericConstant NonNumericConstant() :
{
   NodeChoice n0;
   NodeList n1 = new NodeList();
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   
}
{
   (
      (
         (
            n3=<QUOTEDSTRING> { n2 = JTBToolkit.makeNodeToken(n3); }
            { n1.addNode(n2); }
         )+
         { n1.nodes.trimToSize(); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n5=<HEXNUMBER> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n0 = new NodeChoice(n4, 1); }
      )
      
   )
   
   { return new NonNumericConstant(n0); }
}

NumericConstant NumericConstant() :
{
   NodeOptional n0 = new NodeOptional();
   NodeChoice n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeChoice n6;
   IntegerConstant n7;
   NodeToken n8;
   Token n9;

   
}
{
   (
      (
         n3=<PLUSCHAR> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1 = new NodeChoice(n2, 0); }
      |
         n5=<MINUSCHAR> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n1 = new NodeChoice(n4, 1); }
      )
      { n0.addNode(n1); }
   )?
   (
      (
         n7=IntegerConstant()
         { n6 = new NodeChoice(n7, 0); }
      |
         n9=<REAL> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n6 = new NodeChoice(n8, 1); }
      )
      
   )
   
   { return new NumericConstant(n0,n6); }
}

FigurativeConstant FigurativeConstant() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;

   
}
{
   (
      n2=<ZERO> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<ZEROS> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<ZEROES> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<SPACE> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=<SPACES> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12=<HIGH_VALUE> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      n14=<HIGH_VALUES> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6); }
   |
      n16=<LOW_VALUE> { n15 = JTBToolkit.makeNodeToken(n16); }
      { n0 = new NodeChoice(n15, 7); }
   |
      n18=<LOW_VALUES> { n17 = JTBToolkit.makeNodeToken(n18); }
      { n0 = new NodeChoice(n17, 8); }
   |
      n20=<QUOTE> { n19 = JTBToolkit.makeNodeToken(n20); }
      { n0 = new NodeChoice(n19, 9); }
   |
      n22=<QUOTES> { n21 = JTBToolkit.makeNodeToken(n22); }
      { n0 = new NodeChoice(n21, 10); }
   |
      n24=<NULL> { n23 = JTBToolkit.makeNodeToken(n24); }
      { n0 = new NodeChoice(n23, 11); }
   |
      n26=<NULLS> { n25 = JTBToolkit.makeNodeToken(n26); }
      { n0 = new NodeChoice(n25, 12); }
   )
   
   { return new FigurativeConstant(n0); }
}

IntegerConstant IntegerConstant() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<INTEGER> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new IntegerConstant(n0); }
}

CopyOperand CopyOperand() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
   (
      (
         n2=<QUOTEDPSEUDOTEXT> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<IDENTIFIER> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   
   { return new CopyOperand(n0); }
}
