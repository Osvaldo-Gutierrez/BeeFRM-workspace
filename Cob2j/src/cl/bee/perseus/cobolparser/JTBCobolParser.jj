/*
 *   Copyright (c) 20XX by XXXXXXXX All Rights Reserved.
 *   THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF XXXXXXXX
 *   The copyright notice above does not evidence any actual or intended
 *   publication of such source code.
 */

options {
   DEBUG_PARSER = true;
   FORCE_LA_CHECK = true;
   IGNORE_CASE = true;
   LOOKAHEAD = 4;
   OTHER_AMBIGUITY_CHECK = 1;
   STATIC = false;
}

PARSER_BEGIN(CobolParser)
package cl.bee.perseus.cobolparser;

import java.io.*;
import cl.bee.perseus.cobolparser.syntaxtree.*;
import cl.bee.perseus.cobolparser.visitor.*;
import java.util.Vector;


public class CobolParser 
{
   public static void main(String args[])
   {
      try
      {
         boolean tracing = false;
         for ( int i = 0; i < args.length; i++ )
         {
            if ( args[i].equalsIgnoreCase("-tracing") )
            {
               tracing = true;
            }
         }
         CobolParser parser = new CobolParser(new FileInputStream(args[args.length - 1]));
         if ( tracing )
         {
            parser.enable_tracing();
         }
         else
         {
            parser.disable_tracing();
         }
         Node root = parser.CompilationUnit();
         root.accept(new DepthFirstVisitor());
      }
      catch (Exception e)
      {
         e.printStackTrace(System.err);
      }
   }
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      NodeToken node = new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);

      if ( t.specialToken == null )
         return node;

      Vector temp = new Vector();
      Token orig = t;

      while ( t.specialToken != null ) {
         t = t.specialToken;
         temp.addElement(new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn));
      }

      // Reverse the special token list
      for ( int i = temp.size() - 1; i >= 0; --i )
         node.addSpecial((NodeToken)temp.elementAt(i));

      node.trimSpecials();
      return node;
   }
}


PARSER_END(CobolParser)

MORE :
{
   "*>" : COMMENT_STATE
   | "EXEC" : EXEC_STATE
   | "DATE-WRITTEN" : ONELINE_STATE
   | "DATE-COMPILED" : ONELINE_STATE
   | "AUTHOR" : ONELINE_STATE
   | "COPYDD" : ONELINE_STATE
   | "EJECT" : ONELINE_STATE
   | "SKIP1" : ONELINE_STATE
   | "SKIP2" : ONELINE_STATE
   | "SKIP3" : ONELINE_STATE
}

<DEFAULT, PICTURE_STATE> SPECIAL_TOKEN :
{
   <SPACE_SEPARATOR: (<SPACECHAR> | <EOL>)+>
   | <#SPACECHAR: (" " | "\t" | "\f" | ";" | "\r")+>
   | <#EOL: "\n">
}

<EXEC_STATE> TOKEN :
{
   <EXEC: "END-EXEC"> : DEFAULT
}

<EXEC_STATE> MORE :
{
   <~[]>
}

<COMMENT_STATE> SPECIAL_TOKEN :
{
   <COMMENT: "\n" | "\r" | "\r\n"> : DEFAULT
}

<COMMENT_STATE> MORE :
{
   <~[]>
}

<ONELINE_STATE> SPECIAL_TOKEN :
{
   <ONELINE: "\n" | "\r" | "\r\n"> : DEFAULT
}

<ONELINE_STATE> MORE :
{
   <~[]>
}

TOKEN :
{
   <DOT: (<DOTCHAR> <SPACE_SEPARATOR>)+>
   | <#DOTCHAR: ".">
}

TOKEN :
{
   <ACCEPT: "ACCEPT">
   | <ACCESS: "ACCESS">
   | <ADD: "ADD">
   | <ADDRESS: "ADDRESS">
   | <ADVANCING: "ADVANCING">
   | <AFTER: "AFTER">
   | <ALL: "ALL">
   | <ALPHABET: "ALPHABET">
   | <ALPHABETIC: "ALPHABETIC">
   | <ALPHABETIC_LOWER: "ALPHABETIC-LOWER">
   | <ALPHABETIC_UPPER: "ALPHABETIC-UPPER">
   | <ALPHANUMERIC: "ALPHANUMERIC">
   | <ALPHANUMERIC_EDITED: "ALPHANUMERIC-EDITED">
   | <ALSO: "ALSO">
   | <ALTER: "ALTER">
   | <ALTERNATE: "ALTERNATE">
   | <AND: "AND">
   | <ANY: "ANY">
   | <APPROXIMATE: "APPROXIMATE">
   | <ARE: "ARE">
   | <AREA: "AREA">
   | <AREAS: "AREAS">
   | <ASCENDING: "ASCENDING">
   | <ASSIGN: "ASSIGN">
   | <AT: "AT">
   | <BEFORE: "BEFORE">
   | <BEGINNING: "BEGINNING">
   | <BINARY: "BINARY">
   | <BLANK: "BLANK">
   | <BLOCK: "BLOCK">
   | <BOTTOM: "BOTTOM">
   | <BY: "BY">
   | <CALL: "CALL">
   | <CALL_CONVENTION: "CALL-CONVENTION">
   | <CANCEL: "CANCEL">
   | <CD: "CD">
   | <CF: "CF">
   | <CH: "CH">
   | <CHARACTER: "CHARACTER">
   | <CHARACTERS: "CHARACTERS">
   | <CLASS: "CLASS">
   | <CLOCK_UNITS: "CLOCK-UNITS">
   | <CLOSE: "CLOSE">
   | <CODE: "CODE">
   | <CODE_SET: "CODE-SET">
   | <COLLATING: "COLLATING">
   | <COLUMN: "COLUMN">
   | <COMMA: "COMMA">
   | <COMMON: "COMMON">
   | <COMMUNICATION: "COMMUNICATION">
   | <COMP: "COMP">
   | <COMP_1: "COMP-1">
   | <COMP_2: "COMP-2">
   | <COMP_3: "COMP-3">
   | <COMP_4: "COMP-4">
   | <COMPUTATIONAL: "COMPUTATIONAL">
   | <COMPUTATIONAL_1: "COMPUTATIONAL-1">
   | <COMPUTATIONAL_2: "COMPUTATIONAL-2">
   | <COMPUTATIONAL_3: "COMPUTATIONAL-3">
   | <COMPUTATIONAL_4: "COMPUTATIONAL-4">
   | <COMPUTE: "COMPUTE">
   | <CONFIGURATION: "CONFIGURATION">
   | <CONTAINS: "CONTAINS">
   | <CONTENT: "CONTENT">
   | <CONTINUE: "CONTINUE">
   | <CONTROL: "CONTROL">
   | <CONTROLS: "CONTROLS">
   | <CONVERTING: "CONVERTING">
   | <COPY: "COPY">
   | <CORR: "CORR">
   | <CORRESPONDING: "CORRESPONDING">
   | <COUNT: "COUNT">
   | <CURRENCY: "CURRENCY">
   | <DATA: "DATA">
   | <DATE: "DATE">
   | <DAY: "DAY">
   | <DAY_OF_WEEK: "DAY-OF-WEEK">
   | <DBCS: "DBCS">
   | <DE: "DE">
   | <DEBUG_CONTENTS: "DEBUG-CONTENTS">
   | <DEBUG_ITEM: "DEBUG-ITEM">
   | <DEBUG_LINE: "DEBUG-LINE">
   | <DEBUG_NAME: "DEBUG-NAME">
   | <DEBUG_SUB_1: "DEBUG-SUB-1">
   | <DEBUG_SUB_2: "DEBUG-SUB-2">
   | <DEBUG_SUB_3: "DEBUG-SUB-3">
   | <DEBUGGING: "DEBUGGING">
   | <DECIMAL_POINT: "DECIMAL-POINT">
   | <DECLARATIVES: "DECLARATIVES">
   | <DELETE: "DELETE">
   | <DELIMITED: "DELIMITED">
   | <DELIMITER: "DELIMITER">
   | <DEPENDING: "DEPENDING">
   | <DESCENDING: "DESCENDING">
   | <DESCRIPTOR: "DESCRIPTOR">
   | <DESTINATION: "DESTINATION">
   | <DETAIL: "DETAIL">
   | <DISABLE: "DISABLE">
   | <DISPLAY: "DISPLAY">
   | <DISPLAY_1: "DISPLAY-1">
   | <DIVIDE: "DIVIDE">
   | <DIVISION: "DIVISION">
   | <DOWN: "DOWN">
   | <DUPLICATES: "DUPLICATES">
   | <DYNAMIC: "DYNAMIC">
   | <EGCS: "EGCS">
   | <EGI: "EGI">
   | <ELSE: "ELSE">
   | <EMI: "EMI">
   | <ENABLE: "ENABLE">
   | <END: "END">
   | <END_ADD: "END-ADD">
   | <END_CALL: "END-CALL">
   | <END_COMPUTE: "END-COMPUTE">
   | <END_DELETE: "END-DELETE">
   | <END_DIVIDE: "END-DIVIDE">
   | <END_EVALUATE: "END-EVALUATE">
   | <END_IF: "END-IF">
   | <END_MULTIPLY: "END-MULTIPLY">
   | <END_OF_PAGE: "END-OF-PAGE">
   | <END_PERFORM: "END-PERFORM">
   | <END_READ: "END-READ">
   | <END_RECEIVE: "END-RECEIVE">
   | <END_RETURN: "END-RETURN">
   | <END_REWRITE: "END-REWRITE">
   | <END_SEARCH: "END-SEARCH">
   | <END_START: "END-START">
   | <END_STRING: "END-STRING">
   | <END_SUBTRACT: "END-SUBTRACT">
   | <END_UNSTRING: "END-UNSTRING">
   | <END_WRITE: "END-WRITE">
   | <ENDING: "ENDINF">
   | <ENTER: "ENTER">
   | <ENTRY: "ENTRY">
   | <ENVIRONMENT: "ENVIRONMENT">
   | <EOP: "EOP">
   | <EQUAL: "EQUAL">
   | <ERROR: "ERROR">
   | <ESI: "ESI">
   | <EVALUATE: "EVALUATE">
   | <EVERY: "EVERY">
   | <EXCEPTION: "EXCEPTION">
   | <EXIT: "EXIT">
   | <EXTEND: "EXTEND">
   | <EXTERNAL: "EXTERNAL">
   | <FALSE: "FALSE">
   | <FD: "FD">
   | <FILE: "FILE">
   | <FILE_CONTROL: "FILE-CONTROL">
   | <FILLER: "FILLER">
   | <FINAL: "FINAL">
   | <FIRST: "FIRST">
   | <FOOTING: "FOOTING">
   | <FOR: "FOR">
   | <FROM: "FROM">
   | <FUNCTION: "FUNCTION">
   | <GENERATE: "GENERATE">
   | <GOBACK: "GOBACK">
   | <GENERIC: "GENERIC">
   | <GIVING: "GIVING">
   | <GLOBAL: "GLOBAL">
   | <GO: "GO">
   | <GREATER: "GREATER">
   | <GROUP: "GROUP">
   | <HEADING: "HEADING">
   | <HIGH_VALUE: "HIGH-VALUE">
   | <HIGH_VALUES: "HIGH-VALUES">
   | <I_O: "I-O">
   | <I_O_CONTROL: "I-O-CONTROL">
   | <ID: "ID">
   | <IDENTIFICATION: "IDENTIFICATION">
   | <IDENTIFIED: "IDENTIFIED">
   | <IF: "IF">
   | <IMPLICIT: "IMPLICIT">
   | <IN: "IN">
   | <INDEX: "INDEX">
   | <INDEXED: "INDEXED">
   | <INDICATE: "INDICATE">
   | <INITIAL: "INITIAL">
   | <INITIALIZE: "INITIALIZE">
   | <INITIATE: "INITIATE">
   | <INPUT: "INPUT">
   | <INPUT_OUTPUT: "INPUT-OUTPUT">
   | <INSPECT: "INSPECT">
   | <INSTALLATION: "INSTALLATION">
   | <INTO: "INTO">
   | <INVALID: "INVALID">
   | <IS: "IS">
   | <JUST: "JUST">
   | <JUSTIFIED: "JUSTIFIED">
   | <JUSTIFY: "JUSTIFY">
   | <KANJI: "KANJI">
   | <KEY: "KEY">
   | <LABEL: "LABEL">
   | <LAST: "LAST">
   | <LEADING: "LEADING">
   | <LEFT: "LEFT">
   | <LENGTH: "LENGTH">
   | <LESS: "LESS">
   | <LIMIT: "LIMIT">
   | <LIMITS: "LIMITS">
   | <LINAGE: "LINAGE">
   | <LINAGE_COUNTER: "LINAGE_COUNTER">
   | <LINE: "LINE">
   | <LINES: "LINES">
   | <LINE_COUNTER: "LINE-COUNTER">
   | <LINKAGE: "LINKAGE">
   | <LOCK: "LOCK">
   | <LOCKFILE: "LOCKFILE">
   | <LOW_VALUE: "LOW-VALUE">
   | <LOW_VALUES: "LOW-VALUES">
   | <MEMORY: "MEMORY">
   | <MERGE: "MERGE">
   | <MESSAGE: "MESSAGE">
   | <MODE: "MODE">
   | <MODULES: "MODULES">
   | <MORE_LABELS: "MORE-LABELS">
   | <MOVE: "MOVE">
   | <MULTIPLE: "MULTIPLE">
   | <MULTIPLY: "MULTIPLY">
   | <NATIVE: "NATIVE">
   | <NEGATIVE: "NEGATIVE">
   | <NEXT: "NEXT">
   | <NO: "NO">
   | <NOT: "NOT">
   | <NULL: "NULL">
   | <NULLS: "NULLS">
   | <NUMBER: "NUMBER">
   | <NUMERIC: "NUMERIC">
   | <NUMERIC_EDITED: "NUMERIC-EDITED">
   | <OBJECT_COMPUTER: "OBJECT-COMPUTER">
   | <OCCURS: "OCCURS">
   | <OF: "OF">
   | <OFF: "OFF">
   | <OMITTED: "OMITTED">
   | <ON: "ON">
   | <OPEN: "OPEN">
   | <OPTIONAL: "OPTIONAL">
   | <OR: "OR">
   | <ORDER: "ORDER">
   | <ORGANIZATION: "ORGANIZATION">
   | <OTHER: "OTHER">
   | <OUTPUT: "OUTPUT">
   | <OVERFLOW: "OVERFLOW">
   | <PACKED_DECIMAL: "PACKED-DECIMAL">
   | <PADDING: "PADDING">
   | <PAGE: "PAGE">
   | <PAGE_COUNTER: "PAGE-COUNTER">
   | <PASSWORD: "PASSWORD">
   | <PERFORM: "PERFORM">
   | <PF: "PF">
   | <PH: "PH">
   | <PIC: "PIC"> : PICTURE_STATE
   | <PICTURE: "PICTURE"> : PICTURE_STATE
   | <PLUS: "PLUS">
   | <POINTER: "POINTER">
   | <POSITION: "POSITION">
   | <POSITIVE: "POSITIVE">
   | <PRINTING: "PRINTING">
   | <PROCEDURE: "PROCEDURE">
   | <PROCEDURES: "PROCEDURES">
   | <PROCEDURE_POINTER: "PROCEDURE-POINTER">
   | <PROCEED: "PROCEED">
   | <PROGRAM: "PROGRAM">
   | <PROGRAM_ID: "PROGRAM-ID">
   | <PROGRAM_STATUS: "PROGRAM-STATUS">
   | <PROMPT: "PROMPT">
   | <PROTECTED: "PROTECTED">
   | <PURGE: "PURGE">
   | <QUEUE: "QUEUE">
   | <QUOTE: "QUOTE">
   | <QUOTES: "QUOTES">
   | <RANDOM: "RANDOM">
   | <RD: "RD">
   | <READ: "READ">
   | <RECEIVE: "RECEIVE">
   | <RECEIVE_CONTROL: "RECEIVE-CONTROL">
   | <RECORD: "RECORD">
   | <RECORDING: "RECORDING">
   | <RECORDS: "RECORDS">
   | <REDEFINES: "REDEFINES">
   | <REEL: "REEL">
   | <REFERENCE: "REFERENCE">
   | <REFERENCES: "REFERENCES">
   | <RELATIVE: "RELATIVE">
   | <RELEASE: "RELEASE">
   | <REMAINDER: "REMAINDER">
   | <REMOVAL: "REMOVAL">
   | <RENAMES: "RENAMES">
   | <REPLACE: "REPLACE">
   | <REPLACING: "REPLACING">
   | <REPLY: "REPLY">
   | <REPORT: "REPORT">
   | <REPORTING: "REPORTING">
   | <REPORTS: "REPORTS">
   | <RERUN: "RERUN">
   | <RESERVE: "RESERVE">
   | <RESET: "RESET">
   | <RETURN: "RETURN">
   | <RETURN_CODE: "RETURN-CODE">
   | <RETURNED: "RETURNED">
   | <RETURNING: "RETURNING">
   | <REVERSED: "REVERSED">
   | <REWIND: "REWIND">
   | <REWRITE: "REWRITE">
   | <RF: "RF">
   | <RH: "RH">
   | <RIGHT: "RIGHT">
   | <ROUNDED: "ROUNDED">
   | <RUN: "RUN">
   | <SAME: "SAME">
   | <SD: "SD">
   | <SEARCH: "SEARCH">
   | <SECTION: "SECTION">
   | <SECURITY: "SECURITY">
   | <SEGMENT: "SEGMENT">
   | <SEGMENT_LIMIT: "SEGMENT-LIMIT">
   | <SELECT: "SELECT">
   | <SEND: "SEND">
   | <SENTENCE: "SENTENCE">
   | <SEPARATE: "SEPARATE">
   | <SEQUENCE: "SEQUENCE">
   | <SEQUENTIAL: "SEQUENTIAL">
   | <SERVICE: "SERVICE">
   | <SET: "SET">
   | <SHARED: "SHARED">
   | <SHIFT_IN: "SHIFT-IN">
   | <SHIFT_OUT: "SHIFT-OUT">
   | <SIGN: "SIGN">
   | <SIZE: "SIZE">
   | <SORT: "SORT">
   | <SORT_CONTROL: "SORT-CONTROL">
   | <SORT_CORE_SIZE: "SORT-CORE-SIZE">
   | <SORT_FILE_SIZE: "SORT-FILE-SIZE">
   | <SORT_MERGE: "SORT-MERGE">
   | <SORT_MESSAGE: "SORT-MESSAGE">
   | <SORT_MODE_SIZE: "SORT-MODE-SIZE">
   | <SORT_RETURN: "SORT-RETURN">
   | <SOURCE: "SOURCE">
   | <SOURCE_COMPUTER: "SOURCE-COMPUTER">
   | <SPACE: "SPACE">
   | <SPACES: "SPACES">
   | <SPECIAL_NAMES: "SPECIAL-NAMES">
   | <STANDARD: "STANDARD">
   | <STANDARD_1: "STANDARD-1">
   | <STANDARD_2: "STANDARD-2">
   | <START: "START">
   | <STATUS: "STATUS">
   | <STDCALL: "STDCALL">
   | <STOP: "STOP">
   | <STRING: "STRING">
   | <SUB_QUEUE_1: "SUB-QUEUE-1">
   | <SUB_QUEUE_2: "SUB-QUEUE-2">
   | <SUB_QUEUE_3: "SUB-QUEUE-3">
   | <SUBTRACT: "SUBTRACT">
   | <SUM: "SUM">
   | <SUPPRESS: "SUPPRESS">
   | <SYMBOLIC: "SYMBOLIC">
   | <SYNC: "SYNC">
   | <SYNCHRONIZED: "SYNCHRONIZED">
   | <TABLE: "TABLE">
   | <TALLY: "TALLY">
   | <TALLYING: "TALLYING">
   | <TAPE: "TAPE">
   | <TERMINAL: "TERMINAL">
   | <TERMINATE: "TERMINATE">
   | <TEST: "TEST">
   | <TEXT: "TEXT">
   | <THAN: "THAN">
   | <THEN: "THEN">
   | <THROUGH: "THROUGH">
   | <THRU: "THRU">
   | <TIME: "TIME">
   | <TIMES: "TIMES">
   | <TO: "TO">
   | <TOP: "TOP">
   | <TRAILING: "TRAILING">
   | <TRUE: "TRUE">
   | <TYPE: "TYPE">
   | <UNIT: "UNIT">
   | <UNLOCK: "UNLOCK">
   | <UNLOCKFILE: "UNLOCKFILE">
   | <UNLOCKRECORD: "UNLOCKRECORD">
   | <UNSTRING: "UNSTRING">
   | <UNTIL: "UNTIL">
   | <UP: "UP">
   | <UPON: "UPON">
   | <USAGE: "USAGE">
   | <USE: "USE">
   | <USING: "USING">
   | <VALUE: "VALUE">
   | <VALUES: "VALUES">
   | <VARYING: "VARYING">
   | <WHEN: "WHEN">
   | <WHEN_COMPILED: "WHEN-COMPILED">
   | <WITH: "WITH">
   | <WORDS: "WORDS">
   | <WORKING_STORAGE: "WORKING-STORAGE">
   | <WRITE: "WRITE">
   | <YYYYMMDD: "YYYYMMDD">
   | <YYYYDDD: "YYYYDDD">
   | <ZERO: "ZERO">
   | <ZEROS: "ZEROS">
   | <ZEROES: "ZEROES">
   | <ALPHANUMERIC_HASHTABLE: "ALPHANUMERIC-HASHTABLE">
   | <BINARY_BYTE: "BINARY-BYTE">
   | <BINARY_DOUBLE: "BINARY-DOUBLE">
   | <BINARY_LONG: "BINARY-LONG">
   | <BINARY_M: "BINARY-M">
   | <BINARY_REV: "BINARY-REV">
   | <BINARY_SHORT: "BINARY-SHORT">
   | <BIT: "BIT">
   | <COMPONENT: "COMPONENT">
   | <COMPUTATIONAL_2_A: "COMPUTATIONAL-2-A">
   | <COMPUTATIONAL_1_A: "COMPUTATIONAL-1-A">
   | <COMPUTATIONAL_1_E: "COMPUTATIONAL-1-E">
   | <COMPUTATIONAL_1_M: "COMPUTATIONAL-1-M">
   | <COMPUTATIONAL_1_MVS: "COMPUTATIONAL-1-MVS">
   | <COMPUTATIONAL_1_REV: "COMPUTATIONAL-1-REV">
   | <COMPUTATIONAL_2_E: "COMPUTATIONAL-2-E">
   | <COMPUTATIONAL_2_M: "COMPUTATIONAL-2-M">
   | <COMPUTATIONAL_2_MVS: "COMPUTATIONAL-2-MVS">
   | <COMPUTATIONAL_2_REV: "COMPUTATIONAL-2-REV">
   | <COMPUTATIONAL_3_A: "COMPUTATIONAL-3-A">
   | <COMPUTATIONAL_3_M: "COMPUTATIONAL-3-M">
   | <COMPUTATIONAL_4_M: "COMPUTATIONAL-4-M">
   | <COMPUTATIONAL_5: "COMPUTATIONAL-5">
   | <COMPUTATIONAL_5_M: "COMPUTATIONAL-5-M">
   | <COMPUTATIONAL_6: "COMPUTATIONAL-6">
   | <COMPUTATIONAL_A: "COMPUTATIONAL-A">
   | <COMPUTATIONAL_B: "COMPUTATIONAL-B">
   | <COMPUTATIONAL_D: "COMPUTATIONAL-D">
   | <COMPUTATIONAL_M: "COMPUTATIONAL-M">
   | <COMPUTATIONAL_N: "COMPUTATIONAL-N">
   | <COMPUTATIONAL_P: "COMPUTATIONAL-P">
   | <COMPUTATIONAL_S: "COMPUTATIONAL-S">
   | <COMPUTATIONAL_X: "COMPUTATIONAL-X">
   | <COMPUTATIONAL_X_REV: "COMPUTATIONAL-X-REV">
   | <COMP_1_A: "COMP-1-A">
   | <COMP_1_E: "COMP-1-E">
   | <COMP_1_M: "COMP-1-M">
   | <COMP_1_MVS: "COMP-1-MVS">
   | <COMP_1_REV: "COMP-1-REV">
   | <COMP_2_A: "COMP-2-A">
   | <COMP_2_E: "COMP-2-E">
   | <COMP_2_M: "COMP-2-M">
   | <COMP_2_MVS: "COMP-2-MVS">
   | <COMP_2_REV: "COMP-2-REV">
   | <COMP_3_A: "COMP-3-A">
   | <COMP_3_M: "COMP-3-M">
   | <COMP_4_M: "COMP-4-M">
   | <COMP_5: "COMP-5">
   | <COMP_5_M: "COMP-5-M">
   | <COMP_6: "COMP-6">
   | <COMP_A: "COMP-A">
   | <COMP_B: "COMP-B">
   | <COMP_D: "COMP-D">
   | <COMP_M: "COMP-M">
   | <COMP_N: "COMP-N">
   | <COMP_P: "COMP-P">
   | <COMP_S: "COMP-S">
   | <COMP_X: "COMP-X">
   | <COMP_X_REV: "COMP-X-REV">
   | <DEFAULT_FONT: "DEFAULT-FONT">
   | <DISPLAY_WS: "DISPLAY-WS">
   | <DOUBLE: "DOUBLE">
   | <EXTERNAL_FORM: "EXTERNAL-FORM">
   | <FIXED_FONT: "FIXED-FONT">
   | <FLOAT: "FLOAT">
   | <FLOAT_LONG: "FLOAT-LONG">
   | <FLOAT_SHORT: "FLOAT-SHORT">
   | <FONT: "FONT">
   | <HANDLE: "HANDLE">
   | <JBOOLEAN: "JBOOLEAN">
   | <JBYTE: "JBYTE">
   | <JCHAR: "JCHAR">
   | <JDOUBLE: "JDOUBLE">
   | <JFLOAT: "JFLOAT">
   | <JINT: "JINT">
   | <JLONG: "JLONG">
   | <JPACKED_DECIMAL: "JPACKED-DECIMAL">
   | <JSHORT: "JSHORT">
   | <JSTRING: "JSTRING">
   | <LARGE_FONT: "LARGE-FONT">
   | <MEDIUM_FONT: "MEDIUM-FONT">
   | <NATIONAL: "NATIONAL">
   | <NUMERIC_HASHTABLE: "NUMERIC-HASHTABLE">
   | <OBJECT: "OBJECT">
   | <OBJECT_HASHTABLE: "OBJECT-HASHTABLE">
   | <PACKED_DECIMAL_A: "PACKED-DECIMAL-A">
   | <PACKED_DECIMAL_E: "PACKED-DECIMAL-E">
   | <PACKED_DECIMAL_H: "PACKED-DECIMAL-H">
   | <PACKED_DECIMAL_I: "PACKED-DECIMAL-I">
   | <PACKED_DECIMAL_M: "PACKED-DECIMAL-M">
   | <SIGNED_INT: "SIGNED-INT">
   | <SIGNED_LONG: "SIGNED-LONG">
   | <SIGNED_SHORT: "SIGNED-SHORT">
   | <SMALL_FONT: "SMALL-FONT">
   | <SQLIND: "SQLIND">
   | <THREAD: "THREAD">
   | <TRADITIONAL_FONT: "TRADITIONAL-FONT">
   | <UNSIGNED_INT: "UNSIGNED-INT">
   | <UNSIGNED_LONG: "UNSIGNED-LONG">
   | <UNSIGNED_SHORT: "UNSIGNED-SHORT">
   | <WINDOW: "WINDOW">
}

<PICTURE_STATE> TOKEN :
{
   <PICTURE_STRING: (<DOLLARCHAR>)? ((<PICCHARDOT>)+ (<REPEAT>)?)* ((<PICCHAR>)+ (<REPEAT>)?)> : DEFAULT
   | <#DIGIT: ["0"-"9"]>
   | <#PICCHARDOT: (["A", "B", "E", "G", "N", "P", "S", "V", "X", "Z", "0", "9", "/", ",", ".", "+", "-", "$", "*"] | "CR" | "DB")>
   | <#PICCHAR: (["A", "B", "E", "G", "N", "P", "S", "V", "X", "Z", "0", "9", "/", ",", "+", "-", "$", "*"] | "CR" | "DB")>
   | <#REPEAT: "(" (<DIGIT>)+ ")">
}

TOKEN :
{
   <LEVEL_66: "66">
   | <LEVEL_77: "77">
   | <LEVEL_88: "88">
   | <INTEGER: (<DIGIT>)+>
   | <REAL: (<DIGIT>)* [",", "."] (<DIGIT>)+>
   | <MINUSCHAR: "-">
   | <LPARENCHAR: "(">
   | <RPARENCHAR: ")">
   | <COLONCHAR: ":">
   | <COMMACHAR: ",">
   | <DOUBLEDQUOTECHAR: "\"\"">
   | <QUOTECHAR: "\"">
   | <DOUBLEDAPOSTROPHE: "''">
   | <APOSTROPHE: "'">
   | <PLUSCHAR: "+">
   | <ASTERISKCHAR: "*">
   | <POWEROF: "**">
   | <SLASHCHAR: "/">
   | <DOLLARCHAR: "$">
   | <LESSTHANOREQUAL: "<=">
   | <LESSTHANCHAR: "<">
   | <MORETHANOREQUAL: ">=">
   | <MORETHANCHAR: ">">
   | <EQUALCHAR: "=">
   | <NOTEQUAL: "<>">
   | <HEXNUMBER: ["h", "x"] ((<QUOTECHAR> (["0"-"9", "a"-"f"])+ <QUOTECHAR>) | (<APOSTROPHE> (["0"-"9", "a"-"f"])+ <APOSTROPHE>))>
   | <QUOTEDSTRING: (<QUOTECHAR> (~["\""] | <DOUBLEDQUOTECHAR>)* <QUOTECHAR> | <APOSTROPHE> (~["'"] | <DOUBLEDAPOSTROPHE>)* <APOSTROPHE>)>
   | <COBOL_WORD: (["a"-"z", "0"-"9"])+ ((<MINUSCHAR> | "_")+ (["a"-"z", "0"-"9"])+)*>
   | <OTHER_CHARS: ~[]>
}

CobolWord CobolWord() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<COBOL_WORD> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new CobolWord(n0); }
}

QuotedText QuotedText() :
{
   NodeList n0 = new NodeList();
   IterableQuotedText n1;

   
}
{
   (
      n1=IterableQuotedText()
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   
   { return new QuotedText(n0); }
}

IterableQuotedText IterableQuotedText() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   
}
{
   (
      n2=<QUOTEDSTRING> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<DOUBLEDQUOTECHAR> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<DOUBLEDAPOSTROPHE> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   )
   
   { return new IterableQuotedText(n0); }
}

IntegerConstant IntegerConstant() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   (
      n2=<LEVEL_66> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<LEVEL_77> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<LEVEL_88> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<INTEGER> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   )
   
   { return new IntegerConstant(n0); }
}

NumericConstant NumericConstant() :
{
   NodeOptional n0 = new NodeOptional();
   NodeChoice n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeChoice n6;
   IntegerConstant n7;
   NodeToken n8;
   Token n9;

   
}
{
   (
      (
         n3=<PLUSCHAR> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1 = new NodeChoice(n2, 0); }
      |
         n5=<MINUSCHAR> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n1 = new NodeChoice(n4, 1); }
      )
      { n0.addNode(n1); }
   )?
   (
      (
         n7=IntegerConstant()
         { n6 = new NodeChoice(n7, 0); }
      |
         n9=<REAL> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n6 = new NodeChoice(n8, 1); }
      )
      
   )
   
   { return new NumericConstant(n0,n6); }
}

LevelNumber LevelNumber() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<INTEGER> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new LevelNumber(n0); }
}

FigurativeConstant FigurativeConstant() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;

   
}
{
   (
      n2=<ZERO> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<ZEROS> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<ZEROES> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<SPACE> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=<SPACES> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12=<HIGH_VALUE> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      n14=<HIGH_VALUES> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6); }
   |
      n16=<LOW_VALUE> { n15 = JTBToolkit.makeNodeToken(n16); }
      { n0 = new NodeChoice(n15, 7); }
   |
      n18=<LOW_VALUES> { n17 = JTBToolkit.makeNodeToken(n18); }
      { n0 = new NodeChoice(n17, 8); }
   |
      n20=<QUOTE> { n19 = JTBToolkit.makeNodeToken(n20); }
      { n0 = new NodeChoice(n19, 9); }
   |
      n22=<QUOTES> { n21 = JTBToolkit.makeNodeToken(n22); }
      { n0 = new NodeChoice(n21, 10); }
   |
      n24=<NULL> { n23 = JTBToolkit.makeNodeToken(n24); }
      { n0 = new NodeChoice(n23, 11); }
   |
      n26=<NULLS> { n25 = JTBToolkit.makeNodeToken(n26); }
      { n0 = new NodeChoice(n25, 12); }
   )
   
   { return new FigurativeConstant(n0); }
}

NonNumericConstant NonNumericConstant() :
{
   NodeChoice n0;
   QuotedText n1;
   NodeToken n2;
   Token n3;

   
}
{
   (
      (
         n1=QuotedText()
         { n0 = new NodeChoice(n1, 0); }
      |
         n3=<HEXNUMBER> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n0 = new NodeChoice(n2, 1); }
      )
      
   )
   
   { return new NonNumericConstant(n0); }
}

IterableNonNumericConstant IterableNonNumericConstant() :
{
   NodeChoice n0;
   IterableQuotedText n1;
   NodeToken n2;
   Token n3;

   
}
{
   (
      (
         n1=IterableQuotedText()
         { n0 = new NodeChoice(n1, 0); }
      |
         n3=<HEXNUMBER> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n0 = new NodeChoice(n2, 1); }
      )
      
   )
   
   { return new IterableNonNumericConstant(n0); }
}

Literal Literal() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeChoice n3;
   NonNumericConstant n4;
   NumericConstant n5;
   FigurativeConstant n6;

   
}
{
   (
      n2=<ALL> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   (
      (
         n4=NonNumericConstant()
         { n3 = new NodeChoice(n4, 0); }
      |
         n5=NumericConstant()
         { n3 = new NodeChoice(n5, 1); }
      |
         n6=FigurativeConstant()
         { n3 = new NodeChoice(n6, 2); }
      )
      
   )
   
   { return new Literal(n0,n3); }
}

IterableLiteral IterableLiteral() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeChoice n3;
   IterableNonNumericConstant n4;
   NumericConstant n5;
   FigurativeConstant n6;

   
}
{
   (
      n2=<ALL> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   (
      (
         n4=IterableNonNumericConstant()
         { n3 = new NodeChoice(n4, 0); }
      |
         n5=NumericConstant()
         { n3 = new NodeChoice(n5, 1); }
      |
         n6=FigurativeConstant()
         { n3 = new NodeChoice(n6, 2); }
      )
      
   )
   
   { return new IterableLiteral(n0,n3); }
}

IterableCondition IterableCondition() :
{
   NodeChoice n0;
   ArithmeticExpression n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Condition n5;
   NodeToken n6;
   Token n7;

   
}
{
   (
      LOOKAHEAD(ArithmeticExpression())
      n1=ArithmeticExpression()
      { n0 = new NodeChoice(n1, 0); }
   |
      { n2 = new NodeSequence(3); }
      n4=<LPARENCHAR> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=Condition()
      { n2.addNode(n5); }
      n7=<RPARENCHAR> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n2.addNode(n6); }
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new IterableCondition(n0); }
}

Condition Condition() :
{
   CombinableCondition n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeChoice n8;
   CombinableCondition n9;
   AbbreviationRest n10;

   
}
{
   n0=CombinableCondition()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            n5=<AND> { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7=<OR> { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         )
         
      )
      { n2.addNode(n3); }
      (
         (
            LOOKAHEAD(CombinableCondition())
            n9=CombinableCondition()
            { n8 = new NodeChoice(n9, 0); }
         |
            n10=AbbreviationRest()
            { n8 = new NodeChoice(n10, 1); }
         )
         
      )
      { n2.addNode(n8); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new Condition(n0,n1); }
}

CombinableCondition CombinableCondition() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   SimpleCondition n3;

   
}
{
   (
      n2=<NOT> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n3=SimpleCondition()
   
   { return new CombinableCondition(n0,n3); }
}

SimpleCondition SimpleCondition() :
{
   NodeChoice n0;
   RelationCondition n1;
   ArithmeticExpression n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   Condition n6;
   NodeToken n7;
   Token n8;

   
}
{
   (
      LOOKAHEAD(RelationCondition())
      n1=RelationCondition()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(ArithmeticExpression())
      n2=ArithmeticExpression()
      { n0 = new NodeChoice(n2, 1); }
   |
      { n3 = new NodeSequence(3); }
      n5=<LPARENCHAR> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n6=Condition()
      { n3.addNode(n6); }
      n8=<RPARENCHAR> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n3.addNode(n7); }
      { n0 = new NodeChoice(n3, 2); }
   )
   
   { return new SimpleCondition(n0); }
}

ClassCondition ClassCondition() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   NodeChoice n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   ClassName n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;

   
}
{
   (
      n2=<IS> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   (
      n5=<NOT> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
   )?
   (
      (
         n8=<NUMERIC> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6 = new NodeChoice(n7, 0); }
      |
         n10=<ALPHABETIC> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n6 = new NodeChoice(n9, 1); }
      |
         n12=<ALPHABETIC_LOWER> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n6 = new NodeChoice(n11, 2); }
      |
         n14=<ALPHABETIC_UPPER> { n13 = JTBToolkit.makeNodeToken(n14); }
         { n6 = new NodeChoice(n13, 3); }
      |
         n15=ClassName()
         { n6 = new NodeChoice(n15, 4); }
      |
         n17=<DBCS> { n16 = JTBToolkit.makeNodeToken(n17); }
         { n6 = new NodeChoice(n16, 5); }
      |
         n19=<KANJI> { n18 = JTBToolkit.makeNodeToken(n19); }
         { n6 = new NodeChoice(n18, 6); }
      )
      
   )
   
   { return new ClassCondition(n0,n3,n6); }
}

RelationCondition RelationCondition() :
{
   ArithmeticExpression n0;
   NodeChoice n1;
   AbbreviationRest n2;
   SignCondition n3;
   ClassCondition n4;

   
}
{
   n0=ArithmeticExpression()
   (
      (
         LOOKAHEAD(AbbreviationRest())
         n2=AbbreviationRest()
         { n1 = new NodeChoice(n2, 0); }
      |
         LOOKAHEAD(SignCondition())
         n3=SignCondition()
         { n1 = new NodeChoice(n3, 1); }
      |
         n4=ClassCondition()
         { n1 = new NodeChoice(n4, 2); }
      )
      
   )
   
   { return new RelationCondition(n0,n1); }
}

SignCondition SignCondition() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   NodeChoice n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;

   
}
{
   (
      n2=<IS> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   (
      n5=<NOT> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
   )?
   (
      (
         n8=<POSITIVE> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6 = new NodeChoice(n7, 0); }
      |
         n10=<NEGATIVE> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n6 = new NodeChoice(n9, 1); }
      |
         n12=<ZERO> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n6 = new NodeChoice(n11, 2); }
      |
         n14=<ZEROS> { n13 = JTBToolkit.makeNodeToken(n14); }
         { n6 = new NodeChoice(n13, 3); }
      |
         n16=<ZEROES> { n15 = JTBToolkit.makeNodeToken(n16); }
         { n6 = new NodeChoice(n15, 4); }
      )
      
   )
   
   { return new SignCondition(n0,n3,n6); }
}

RelationalOperator RelationalOperator() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   NodeChoice n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10 = new NodeOptional();
   NodeToken n11;
   Token n12;
   NodeOptional n13 = new NodeOptional();
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeOptional n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   NodeSequence n24;
   NodeToken n25;
   Token n26;
   NodeOptional n27 = new NodeOptional();
   NodeToken n28;
   Token n29;
   NodeOptional n30 = new NodeOptional();
   NodeSequence n31;
   NodeToken n32;
   Token n33;
   NodeToken n34;
   Token n35;
   NodeOptional n36;
   NodeToken n37;
   Token n38;
   NodeToken n39;
   Token n40;
   NodeSequence n41;
   NodeToken n42;
   Token n43;
   NodeOptional n44 = new NodeOptional();
   NodeToken n45;
   Token n46;
   NodeToken n47;
   Token n48;
   NodeToken n49;
   Token n50;
   NodeToken n51;
   Token n52;
   NodeToken n53;
   Token n54;

   
}
{
   (
      n2=<IS> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   (
      n5=<NOT> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
   )?
   (
      (
         { n7 = new NodeSequence(3); }
         n9=<GREATER> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
         (
            n12=<THAN> { n11 = JTBToolkit.makeNodeToken(n12); }
            { n10.addNode(n11); }
         )?
         { n7.addNode(n10); }
         (
            { n19 = new NodeOptional(); }
            { n14 = new NodeSequence(3); }
            n16=<OR> { n15 = JTBToolkit.makeNodeToken(n16); }
            { n14.addNode(n15); }
            n18=<EQUAL> { n17 = JTBToolkit.makeNodeToken(n18); }
            { n14.addNode(n17); }
            (
               n21=<TO> { n20 = JTBToolkit.makeNodeToken(n21); }
               { n19.addNode(n20); }
            )?
            { n14.addNode(n19); }
            { n13.addNode(n14); }
         )?
         { n7.addNode(n13); }
         { n6 = new NodeChoice(n7, 0); }
      |
         n23=<MORETHANCHAR> { n22 = JTBToolkit.makeNodeToken(n23); }
         { n6 = new NodeChoice(n22, 1); }
      |
         { n24 = new NodeSequence(3); }
         n26=<LESS> { n25 = JTBToolkit.makeNodeToken(n26); }
         { n24.addNode(n25); }
         (
            n29=<THAN> { n28 = JTBToolkit.makeNodeToken(n29); }
            { n27.addNode(n28); }
         )?
         { n24.addNode(n27); }
         (
            { n36 = new NodeOptional(); }
            { n31 = new NodeSequence(3); }
            n33=<OR> { n32 = JTBToolkit.makeNodeToken(n33); }
            { n31.addNode(n32); }
            n35=<EQUAL> { n34 = JTBToolkit.makeNodeToken(n35); }
            { n31.addNode(n34); }
            (
               n38=<TO> { n37 = JTBToolkit.makeNodeToken(n38); }
               { n36.addNode(n37); }
            )?
            { n31.addNode(n36); }
            { n30.addNode(n31); }
         )?
         { n24.addNode(n30); }
         { n6 = new NodeChoice(n24, 2); }
      |
         n40=<LESSTHANCHAR> { n39 = JTBToolkit.makeNodeToken(n40); }
         { n6 = new NodeChoice(n39, 3); }
      |
         { n41 = new NodeSequence(2); }
         n43=<EQUAL> { n42 = JTBToolkit.makeNodeToken(n43); }
         { n41.addNode(n42); }
         (
            n46=<TO> { n45 = JTBToolkit.makeNodeToken(n46); }
            { n44.addNode(n45); }
         )?
         { n41.addNode(n44); }
         { n6 = new NodeChoice(n41, 4); }
      |
         n48=<EQUALCHAR> { n47 = JTBToolkit.makeNodeToken(n48); }
         { n6 = new NodeChoice(n47, 5); }
      |
         n50=<NOTEQUAL> { n49 = JTBToolkit.makeNodeToken(n50); }
         { n6 = new NodeChoice(n49, 6); }
      |
         n52=<MORETHANOREQUAL> { n51 = JTBToolkit.makeNodeToken(n52); }
         { n6 = new NodeChoice(n51, 7); }
      |
         n54=<LESSTHANOREQUAL> { n53 = JTBToolkit.makeNodeToken(n54); }
         { n6 = new NodeChoice(n53, 8); }
      )
      
   )
   
   { return new RelationalOperator(n0,n3,n6); }
}

AbbreviationLeaf AbbreviationLeaf() :
{
   NodeChoice n0;
   ArithmeticExpression n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   AbbreviationLeaf n5;
   NodeList n6 = new NodeList();
   NodeSequence n7;
   NodeChoice n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   AbbreviationLeaf n13;
   NodeToken n14;
   Token n15;

   
}
{
   (
      LOOKAHEAD(ArithmeticExpression())
      n1=ArithmeticExpression()
      { n0 = new NodeChoice(n1, 0); }
   |
      { n2 = new NodeSequence(4); }
      n4=<LPARENCHAR> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=AbbreviationLeaf()
      { n2.addNode(n5); }
      (
         { n7 = new NodeSequence(2); }
         (
            (
               n10=<AND> { n9 = JTBToolkit.makeNodeToken(n10); }
               { n8 = new NodeChoice(n9, 0); }
            |
               n12=<OR> { n11 = JTBToolkit.makeNodeToken(n12); }
               { n8 = new NodeChoice(n11, 1); }
            )
            
         )
         { n7.addNode(n8); }
         n13=AbbreviationLeaf()
         { n7.addNode(n13); }
         { n6.addNode(n7); }
      )+
      { n6.nodes.trimToSize(); }
      { n2.addNode(n6); }
      n15=<RPARENCHAR> { n14 = JTBToolkit.makeNodeToken(n15); }
      { n2.addNode(n14); }
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new AbbreviationLeaf(n0); }
}

AbbreviationRest AbbreviationRest() :
{
   RelationalOperator n0;
   AbbreviationLeaf n1;

   
}
{
   n0=RelationalOperator()
   n1=AbbreviationLeaf()
   
   { return new AbbreviationRest(n0,n1); }
}

ProcedureName ProcedureName() :
{
   NodeChoice n0;
   NodeSequence n1;
   ParagraphName n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeChoice n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   SectionName n10;
   SectionName n11;

   
}
{
   (
      (
         { n1 = new NodeSequence(2); }
         n2=ParagraphName()
         { n1.addNode(n2); }
         (
            { n4 = new NodeSequence(2); }
            (
               (
                  n7=<IN> { n6 = JTBToolkit.makeNodeToken(n7); }
                  { n5 = new NodeChoice(n6, 0); }
               |
                  n9=<OF> { n8 = JTBToolkit.makeNodeToken(n9); }
                  { n5 = new NodeChoice(n8, 1); }
               )
               
            )
            { n4.addNode(n5); }
            n10=SectionName()
            { n4.addNode(n10); }
            { n3.addNode(n4); }
         )?
         { n1.addNode(n3); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n11=SectionName()
         { n0 = new NodeChoice(n11, 1); }
      )
      
   )
   
   { return new ProcedureName(n0); }
}

Subscript Subscript() :
{
   NodeToken n0;
   Token n1;
   ArithmeticExpression n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeOptional n5;
   NodeToken n6;
   Token n7;
   ArithmeticExpression n8;
   NodeToken n9;
   Token n10;

   
}
{
   n1=<LPARENCHAR> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=ArithmeticExpression()
   (
      { n5 = new NodeOptional(); }
      { n4 = new NodeSequence(2); }
      (
         n7=<COMMACHAR> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5.addNode(n6); }
      )?
      { n4.addNode(n5); }
      n8=ArithmeticExpression()
      { n4.addNode(n8); }
      { n3.addNode(n4); }
   )*
   { n3.nodes.trimToSize(); }
   n10=<RPARENCHAR> { n9 = JTBToolkit.makeNodeToken(n10); }
   
   { return new Subscript(n0,n2,n3,n9); }
}

FunctionClause FunctionClause() :
{
   NodeToken n0;
   Token n1;
   FunctionName n2;
   NodeOptional n3 = new NodeOptional();
   Subscript n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   LeftmostCharacterPosition n9;
   NodeToken n10;
   Token n11;
   NodeOptional n12;
   Length n13;
   NodeToken n14;
   Token n15;

   
}
{
   n1=<FUNCTION> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=FunctionName()
   (
      LOOKAHEAD(Subscript())
      n4=Subscript()
      { n3.addNode(n4); }
   )?
   (
      { n12 = new NodeOptional(); }
      { n6 = new NodeSequence(5); }
      n8=<LPARENCHAR> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=LeftmostCharacterPosition()
      { n6.addNode(n9); }
      n11=<COLONCHAR> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n6.addNode(n10); }
      (
         n13=Length()
         { n12.addNode(n13); }
      )?
      { n6.addNode(n12); }
      n15=<RPARENCHAR> { n14 = JTBToolkit.makeNodeToken(n15); }
      { n6.addNode(n14); }
      { n5.addNode(n6); }
   )?
   
   { return new FunctionClause(n0,n2,n3,n5); }
}

Identifier Identifier() :
{
   NodeChoice n0;
   NodeSequence n1;
   QualifiedDataName n2;
   NodeListOptional n3 = new NodeListOptional();
   Subscript n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   LeftmostCharacterPosition n9;
   NodeToken n10;
   Token n11;
   NodeOptional n12;
   Length n13;
   NodeToken n14;
   Token n15;
   NodeSequence n16;
   NodeToken n17;
   Token n18;
   NodeOptional n19 = new NodeOptional();
   NodeSequence n20;
   NodeChoice n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   FileName n26;
   NodeToken n27;
   Token n28;

   
}
{
   (
      (
         { n1 = new NodeSequence(3); }
         n2=QualifiedDataName()
         { n1.addNode(n2); }
         (
            LOOKAHEAD(Subscript())
            n4=Subscript()
            { n3.addNode(n4); }
         )*
         { n3.nodes.trimToSize(); }
         { n1.addNode(n3); }
         (
            { n12 = new NodeOptional(); }
            { n6 = new NodeSequence(5); }
            n8=<LPARENCHAR> { n7 = JTBToolkit.makeNodeToken(n8); }
            { n6.addNode(n7); }
            n9=LeftmostCharacterPosition()
            { n6.addNode(n9); }
            n11=<COLONCHAR> { n10 = JTBToolkit.makeNodeToken(n11); }
            { n6.addNode(n10); }
            (
               n13=Length()
               { n12.addNode(n13); }
            )?
            { n6.addNode(n12); }
            n15=<RPARENCHAR> { n14 = JTBToolkit.makeNodeToken(n15); }
            { n6.addNode(n14); }
            { n5.addNode(n6); }
         )?
         { n1.addNode(n5); }
         { n0 = new NodeChoice(n1, 0); }
      |
         { n16 = new NodeSequence(2); }
         n18=<LINAGE_COUNTER> { n17 = JTBToolkit.makeNodeToken(n18); }
         { n16.addNode(n17); }
         (
            { n20 = new NodeSequence(2); }
            (
               (
                  n23=<IN> { n22 = JTBToolkit.makeNodeToken(n23); }
                  { n21 = new NodeChoice(n22, 0); }
               |
                  n25=<OF> { n24 = JTBToolkit.makeNodeToken(n25); }
                  { n21 = new NodeChoice(n24, 1); }
               )
               
            )
            { n20.addNode(n21); }
            n26=FileName()
            { n20.addNode(n26); }
            { n19.addNode(n20); }
         )?
         { n16.addNode(n19); }
         { n0 = new NodeChoice(n16, 1); }
      |
         n28=<PROGRAM_STATUS> { n27 = JTBToolkit.makeNodeToken(n28); }
         { n0 = new NodeChoice(n27, 2); }
      )
      
   )
   
   { return new Identifier(n0); }
}

QualifiedDataName QualifiedDataName() :
{
   NodeChoice n0;
   NodeSequence n1;
   DataName n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeChoice n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   DataName n10;
   NodeOptional n11 = new NodeOptional();
   NodeSequence n12;
   NodeChoice n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   FileName n18;
   SpecialRegister n19;

   
}
{
   (
      (
         { n1 = new NodeSequence(3); }
         n2=DataName()
         { n1.addNode(n2); }
         (
            { n4 = new NodeSequence(2); }
            (
               (
                  n7=<IN> { n6 = JTBToolkit.makeNodeToken(n7); }
                  { n5 = new NodeChoice(n6, 0); }
               |
                  n9=<OF> { n8 = JTBToolkit.makeNodeToken(n9); }
                  { n5 = new NodeChoice(n8, 1); }
               )
               
            )
            { n4.addNode(n5); }
            n10=DataName()
            { n4.addNode(n10); }
            { n3.addNode(n4); }
         )*
         { n3.nodes.trimToSize(); }
         { n1.addNode(n3); }
         (
            { n12 = new NodeSequence(2); }
            (
               (
                  n15=<IN> { n14 = JTBToolkit.makeNodeToken(n15); }
                  { n13 = new NodeChoice(n14, 0); }
               |
                  n17=<OF> { n16 = JTBToolkit.makeNodeToken(n17); }
                  { n13 = new NodeChoice(n16, 1); }
               )
               
            )
            { n12.addNode(n13); }
            n18=FileName()
            { n12.addNode(n18); }
            { n11.addNode(n12); }
         )?
         { n1.addNode(n11); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n19=SpecialRegister()
         { n0 = new NodeChoice(n19, 1); }
      )
      
   )
   
   { return new QualifiedDataName(n0); }
}

Length Length() :
{
   ArithmeticExpression n0;

   
}
{
   n0=ArithmeticExpression()
   
   { return new Length(n0); }
}

LeftmostCharacterPosition LeftmostCharacterPosition() :
{
   ArithmeticExpression n0;

   
}
{
   n0=ArithmeticExpression()
   
   { return new LeftmostCharacterPosition(n0); }
}

Mode Mode() :
{
   CobolWord n0;

   
}
{
   n0=CobolWord()
   
   { return new Mode(n0); }
}

AlphabetName AlphabetName() :
{
   CobolWord n0;

   
}
{
   n0=CobolWord()
   
   { return new AlphabetName(n0); }
}

ClassName ClassName() :
{
   CobolWord n0;

   
}
{
   n0=CobolWord()
   
   { return new ClassName(n0); }
}

ConditionName ConditionName() :
{
   CobolWord n0;

   
}
{
   n0=CobolWord()
   
   { return new ConditionName(n0); }
}

DataName DataName() :
{
   CobolWord n0;

   
}
{
   n0=CobolWord()
   
   { return new DataName(n0); }
}

FileName FileName() :
{
   CobolWord n0;

   
}
{
   n0=CobolWord()
   
   { return new FileName(n0); }
}

IndexName IndexName() :
{
   CobolWord n0;

   
}
{
   n0=CobolWord()
   
   { return new IndexName(n0); }
}

MnemonicName MnemonicName() :
{
   CobolWord n0;

   
}
{
   n0=CobolWord()
   
   { return new MnemonicName(n0); }
}

RecordName RecordName() :
{
   Identifier n0;

   
}
{
   n0=Identifier()
   
   { return new RecordName(n0); }
}

RoutineName RoutineName() :
{
   CobolWord n0;

   
}
{
   n0=CobolWord()
   
   { return new RoutineName(n0); }
}

SymbolicCharacter SymbolicCharacter() :
{
   CobolWord n0;

   
}
{
   n0=CobolWord()
   
   { return new SymbolicCharacter(n0); }
}

LibraryName LibraryName() :
{
   CobolWord n0;

   
}
{
   n0=CobolWord()
   
   { return new LibraryName(n0); }
}

ProgramName ProgramName() :
{
   CobolWord n0;

   
}
{
   n0=CobolWord()
   
   { return new ProgramName(n0); }
}

SectionName SectionName() :
{
   NodeChoice n0;
   IntegerConstant n1;
   CobolWord n2;

   
}
{
   (
      n1=IntegerConstant()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=CobolWord()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new SectionName(n0); }
}

ParagraphName ParagraphName() :
{
   NodeChoice n0;
   IntegerConstant n1;
   CobolWord n2;

   
}
{
   (
      n1=IntegerConstant()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=CobolWord()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new ParagraphName(n0); }
}

SystemName SystemName() :
{
   CobolWord n0;

   
}
{
   n0=CobolWord()
   
   { return new SystemName(n0); }
}

ComputerName ComputerName() :
{
   SystemName n0;

   
}
{
   n0=SystemName()
   
   { return new ComputerName(n0); }
}

LanguageName LanguageName() :
{
   SystemName n0;

   
}
{
   n0=SystemName()
   
   { return new LanguageName(n0); }
}

EnvironmentName EnvironmentName() :
{
   SystemName n0;

   
}
{
   n0=SystemName()
   
   { return new EnvironmentName(n0); }
}

AssignmentName AssignmentName() :
{
   SystemName n0;

   
}
{
   n0=SystemName()
   
   { return new AssignmentName(n0); }
}

BasisName BasisName() :
{
   ProgramName n0;

   
}
{
   n0=ProgramName()
   
   { return new BasisName(n0); }
}

FunctionName FunctionName() :
{
   NodeChoice n0;
   CobolWord n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;

   
}
{
   (
      (
         n1=CobolWord()
         { n0 = new NodeChoice(n1, 0); }
      |
         n3=<LENGTH> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n0 = new NodeChoice(n2, 1); }
      |
         n5=<WHEN_COMPILED> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n0 = new NodeChoice(n4, 2); }
      |
         n7=<SUM> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n0 = new NodeChoice(n6, 3); }
      |
         n9=<RANDOM> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n0 = new NodeChoice(n8, 4); }
      )
      
   )
   
   { return new FunctionName(n0); }
}

SpecialRegister SpecialRegister() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   DataName n6;
   NodeToken n7;
   Token n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   Identifier n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   NodeToken n33;
   Token n34;
   NodeToken n35;
   Token n36;

   
}
{
   (
      (
         { n1 = new NodeSequence(3); }
         n3=<ADDRESS> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         n5=<OF> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n1.addNode(n4); }
         n6=DataName()
         { n1.addNode(n6); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n8=<DEBUG_ITEM> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n0 = new NodeChoice(n7, 1); }
      |
         { n9 = new NodeSequence(3); }
         n11=<LENGTH> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n9.addNode(n10); }
         n13=<OF> { n12 = JTBToolkit.makeNodeToken(n13); }
         { n9.addNode(n12); }
         n14=Identifier()
         { n9.addNode(n14); }
         { n0 = new NodeChoice(n9, 2); }
      |
         n16=<RETURN_CODE> { n15 = JTBToolkit.makeNodeToken(n16); }
         { n0 = new NodeChoice(n15, 3); }
      |
         n18=<SHIFT_OUT> { n17 = JTBToolkit.makeNodeToken(n18); }
         { n0 = new NodeChoice(n17, 4); }
      |
         n20=<SHIFT_IN> { n19 = JTBToolkit.makeNodeToken(n20); }
         { n0 = new NodeChoice(n19, 5); }
      |
         n22=<SORT_CONTROL> { n21 = JTBToolkit.makeNodeToken(n22); }
         { n0 = new NodeChoice(n21, 6); }
      |
         n24=<SORT_CORE_SIZE> { n23 = JTBToolkit.makeNodeToken(n24); }
         { n0 = new NodeChoice(n23, 7); }
      |
         n26=<SORT_FILE_SIZE> { n25 = JTBToolkit.makeNodeToken(n26); }
         { n0 = new NodeChoice(n25, 8); }
      |
         n28=<SORT_MESSAGE> { n27 = JTBToolkit.makeNodeToken(n28); }
         { n0 = new NodeChoice(n27, 9); }
      |
         n30=<SORT_MODE_SIZE> { n29 = JTBToolkit.makeNodeToken(n30); }
         { n0 = new NodeChoice(n29, 10); }
      |
         n32=<SORT_RETURN> { n31 = JTBToolkit.makeNodeToken(n32); }
         { n0 = new NodeChoice(n31, 11); }
      |
         n34=<TALLY> { n33 = JTBToolkit.makeNodeToken(n34); }
         { n0 = new NodeChoice(n33, 12); }
      |
         n36=<WHEN_COMPILED> { n35 = JTBToolkit.makeNodeToken(n36); }
         { n0 = new NodeChoice(n35, 13); }
      )
      
   )
   
   { return new SpecialRegister(n0); }
}

CdName CdName() :
{
   CobolWord n0;

   
}
{
   n0=CobolWord()
   
   { return new CdName(n0); }
}

ConventionName ConventionName() :
{
   CobolWord n0;

   
}
{
   n0=CobolWord()
   
   { return new ConventionName(n0); }
}

HandleComponent HandleComponent() :
{
   CobolWord n0;

   
}
{
   n0=CobolWord()
   
   { return new HandleComponent(n0); }
}

ImplicitTitle ImplicitTitle() :
{
   QuotedText n0;

   
}
{
   n0=QuotedText()
   
   { return new ImplicitTitle(n0); }
}

LevelName66 LevelName66() :
{
   DataName n0;

   
}
{
   n0=DataName()
   
   { return new LevelName66(n0); }
}

LevelName77 LevelName77() :
{
   DataName n0;

   
}
{
   n0=DataName()
   
   { return new LevelName77(n0); }
}

LevelName88 LevelName88() :
{
   ConditionName n0;

   
}
{
   n0=ConditionName()
   
   { return new LevelName88(n0); }
}

LevelName LevelName() :
{
   NodeOptional n0 = new NodeOptional();
   NodeChoice n1;
   DataName n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   (
      (
         n2=DataName()
         { n1 = new NodeChoice(n2, 0); }
      |
         n4=<FILLER> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n1 = new NodeChoice(n3, 1); }
      |
         n6=<REPLY> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n1 = new NodeChoice(n5, 2); }
      |
         n8=<PROGRAM_STATUS> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n1 = new NodeChoice(n7, 3); }
      )
      { n0.addNode(n1); }
   )?
   
   { return new LevelName(n0); }
}

ArithmeticExpression ArithmeticExpression() :
{
   TimesDiv n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   TimesDiv n8;

   
}
{
   n0=TimesDiv()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            n5=<PLUSCHAR> { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7=<MINUSCHAR> { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         )
         
      )
      { n2.addNode(n3); }
      n8=TimesDiv()
      { n2.addNode(n8); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ArithmeticExpression(n0,n1); }
}

TimesDiv TimesDiv() :
{
   Power n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Power n8;

   
}
{
   n0=Power()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            n5=<ASTERISKCHAR> { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7=<SLASHCHAR> { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         )
         
      )
      { n2.addNode(n3); }
      n8=Power()
      { n2.addNode(n8); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new TimesDiv(n0,n1); }
}

Power Power() :
{
   NodeOptional n0 = new NodeOptional();
   NodeChoice n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Basis n6;
   NodeListOptional n7 = new NodeListOptional();
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   Basis n11;

   
}
{
   (
      (
         (
            n3=<PLUSCHAR> { n2 = JTBToolkit.makeNodeToken(n3); }
            { n1 = new NodeChoice(n2, 0); }
         |
            n5=<MINUSCHAR> { n4 = JTBToolkit.makeNodeToken(n5); }
            { n1 = new NodeChoice(n4, 1); }
         )
         
      )
      { n0.addNode(n1); }
   )?
   n6=Basis()
   (
      { n8 = new NodeSequence(2); }
      n10=<POWEROF> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n8.addNode(n9); }
      n11=Basis()
      { n8.addNode(n11); }
      { n7.addNode(n8); }
   )*
   { n7.nodes.trimToSize(); }
   
   { return new Power(n0,n6,n7); }
}

Basis Basis() :
{
   NodeChoice n0;
   FunctionClause n1;
   Identifier n2;
   Literal n3;
   NodeToken n4;
   Token n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   ArithmeticExpression n9;
   NodeToken n10;
   Token n11;

   
}
{
   (
      (
         n1=FunctionClause()
         { n0 = new NodeChoice(n1, 0); }
      |
         n2=Identifier()
         { n0 = new NodeChoice(n2, 1); }
      |
         n3=Literal()
         { n0 = new NodeChoice(n3, 2); }
      |
         n5=<ALL> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n0 = new NodeChoice(n4, 3); }
      |
         { n6 = new NodeSequence(3); }
         n8=<LPARENCHAR> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6.addNode(n7); }
         n9=ArithmeticExpression()
         { n6.addNode(n9); }
         n11=<RPARENCHAR> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n6.addNode(n10); }
         { n0 = new NodeChoice(n6, 4); }
      )
      
   )
   
   { return new Basis(n0); }
}

CommentLine CommentLine() :
{
   NodeList n0 = new NodeList();
   NodeSequence n1;
   NodeList n2;
   NodeChoice n3;
   NonDotChars n4;
   Literal n5;
   NodeOptional n6;
   NodeToken n7;
   Token n8;

   
}
{
   (
      { n2 = new NodeList(); }
      { n6 = new NodeOptional(); }
      { n1 = new NodeSequence(2); }
      (
         (
            n4=NonDotChars()
            { n3 = new NodeChoice(n4, 0); }
         |
            n5=Literal()
            { n3 = new NodeChoice(n5, 1); }
         )
         { n2.addNode(n3); }
      )+
      { n2.nodes.trimToSize(); }
      { n1.addNode(n2); }
      (
         n8=<DOT> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6.addNode(n7); }
      )?
      { n1.addNode(n6); }
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   
   { return new CommentLine(n0); }
}

CompilationUnit CompilationUnit() :
{
   ProgramUnit n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NestedProgramUnit n3;
   EndProgramStatement n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   EndProgramStatement n7;
   NodeListOptional n8;
   CompilationUnit n9;
   NodeToken n10;
   Token n11;

   
}
{
   n0=ProgramUnit()
   (
      { n2 = new NodeSequence(2); }
      n3=NestedProgramUnit()
      { n2.addNode(n3); }
      n4=EndProgramStatement()
      { n2.addNode(n4); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   (
      { n8 = new NodeListOptional(); }
      { n6 = new NodeSequence(2); }
      n7=EndProgramStatement()
      { n6.addNode(n7); }
      (
         n9=CompilationUnit()
         { n8.addNode(n9); }
      )*
      { n8.nodes.trimToSize(); }
      { n6.addNode(n8); }
      { n5.addNode(n6); }
   )?
   n11=<EOF> { 
      n11.beginColumn++; n11.endColumn++;
      n10 = JTBToolkit.makeNodeToken(n11);
   }
   
   { return new CompilationUnit(n0,n1,n5,n10); }
}

ProgramUnit ProgramUnit() :
{
   IdentificationDivision n0;
   NodeOptional n1 = new NodeOptional();
   EnvironmentDivision n2;
   NodeOptional n3 = new NodeOptional();
   DataDivision n4;
   NodeOptional n5 = new NodeOptional();
   ProcedureDivision n6;

   
}
{
   n0=IdentificationDivision()
   (
      n2=EnvironmentDivision()
      { n1.addNode(n2); }
   )?
   (
      n4=DataDivision()
      { n3.addNode(n4); }
   )?
   (
      n6=ProcedureDivision()
      { n5.addNode(n6); }
   )?
   
   { return new ProgramUnit(n0,n1,n3,n5); }
}

NestedProgramUnit NestedProgramUnit() :
{
   NestedIdentificationDivision n0;
   NodeOptional n1 = new NodeOptional();
   EnvironmentDivision n2;
   NodeOptional n3 = new NodeOptional();
   DataDivision n4;
   NodeOptional n5 = new NodeOptional();
   ProcedureDivision n6;

   
}
{
   n0=NestedIdentificationDivision()
   (
      n2=EnvironmentDivision()
      { n1.addNode(n2); }
   )?
   (
      n4=DataDivision()
      { n3.addNode(n4); }
   )?
   (
      n6=ProcedureDivision()
      { n5.addNode(n6); }
   )?
   
   { return new NestedProgramUnit(n0,n1,n3,n5); }
}

EndProgramStatement EndProgramStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   ProgramName n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1=<END> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PROGRAM> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=ProgramName()
   n6=<DOT> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new EndProgramStatement(n0,n2,n4,n5); }
}

CopyBookUnit CopyBookUnit() :
{
   LinkageSectionEntry n0;
   NodeToken n1;
   Token n2;

   
}
{
   n0=LinkageSectionEntry()
   n2=<EOF> { 
      n2.beginColumn++; n2.endColumn++;
      n1 = JTBToolkit.makeNodeToken(n2);
   }
   
   { return new CopyBookUnit(n0,n1); }
}

IdentificationDivision IdentificationDivision() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   ProgramIdParagraph n9;
   NodeListOptional n10 = new NodeListOptional();
   IdentificationDivisionParagraph n11;

   
}
{
   (
      (
         n2=<IDENTIFICATION> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<ID> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<DIVISION> { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=<DOT> { n7 = JTBToolkit.makeNodeToken(n8); }
   n9=ProgramIdParagraph()
   (
      n11=IdentificationDivisionParagraph()
      { n10.addNode(n11); }
   )*
   { n10.nodes.trimToSize(); }
   
   { return new IdentificationDivision(n0,n5,n7,n9,n10); }
}

NestedIdentificationDivision NestedIdentificationDivision() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NestedProgramIdParagraph n9;
   NodeListOptional n10 = new NodeListOptional();
   IdentificationDivisionParagraph n11;

   
}
{
   (
      (
         n2=<IDENTIFICATION> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<ID> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<DIVISION> { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=<DOT> { n7 = JTBToolkit.makeNodeToken(n8); }
   n9=NestedProgramIdParagraph()
   (
      n11=IdentificationDivisionParagraph()
      { n10.addNode(n11); }
   )*
   { n10.nodes.trimToSize(); }
   
   { return new NestedIdentificationDivision(n0,n5,n7,n9,n10); }
}

IdentificationDivisionParagraph IdentificationDivisionParagraph() :
{
   NodeChoice n0;
   InstallationParagraph n1;
   SecurityParagraph n2;

   
}
{
   (
      n1=InstallationParagraph()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=SecurityParagraph()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new IdentificationDivisionParagraph(n0); }
}

ProgramIdParagraph ProgramIdParagraph() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   ProgramName n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeOptional n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeOptional n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;

   
}
{
   n1=<PROGRAM_ID> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<DOT> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=ProgramName()
   (
      { n7 = new NodeOptional(); }
      { n12 = new NodeOptional(); }
      { n6 = new NodeSequence(3); }
      (
         n9=<IS> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
      )?
      { n6.addNode(n7); }
      n11=<INITIAL> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n6.addNode(n10); }
      (
         n14=<PROGRAM> { n13 = JTBToolkit.makeNodeToken(n14); }
         { n12.addNode(n13); }
      )?
      { n6.addNode(n12); }
      { n5.addNode(n6); }
   )?
   n16=<DOT> { n15 = JTBToolkit.makeNodeToken(n16); }
   
   { return new ProgramIdParagraph(n0,n2,n4,n5,n15); }
}

NestedProgramIdParagraph NestedProgramIdParagraph() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   ProgramName n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeOptional n7;
   NodeToken n8;
   Token n9;
   InitialOrCommon n10;
   NodeOptional n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;

   
}
{
   n1=<PROGRAM_ID> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<DOT> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=ProgramName()
   (
      { n7 = new NodeOptional(); }
      { n11 = new NodeOptional(); }
      { n6 = new NodeSequence(3); }
      (
         n9=<IS> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
      )?
      { n6.addNode(n7); }
      n10=InitialOrCommon()
      { n6.addNode(n10); }
      (
         n13=<PROGRAM> { n12 = JTBToolkit.makeNodeToken(n13); }
         { n11.addNode(n12); }
      )?
      { n6.addNode(n11); }
      { n5.addNode(n6); }
   )?
   n15=<DOT> { n14 = JTBToolkit.makeNodeToken(n15); }
   
   { return new NestedProgramIdParagraph(n0,n2,n4,n5,n14); }
}

InitialOrCommon InitialOrCommon() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10 = new NodeOptional();
   NodeToken n11;
   Token n12;

   
}
{
   (
      (
         { n1 = new NodeSequence(2); }
         n3=<INITIAL> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         (
            n6=<COMMON> { n5 = JTBToolkit.makeNodeToken(n6); }
            { n4.addNode(n5); }
         )?
         { n1.addNode(n4); }
         { n0 = new NodeChoice(n1, 0); }
      |
         { n7 = new NodeSequence(2); }
         n9=<COMMON> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
         (
            n12=<INITIAL> { n11 = JTBToolkit.makeNodeToken(n12); }
            { n10.addNode(n11); }
         )?
         { n7.addNode(n10); }
         { n0 = new NodeChoice(n7, 1); }
      )
      
   )
   
   { return new InitialOrCommon(n0); }
}

InstallationParagraph InstallationParagraph() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   CommentLine n5;

   
}
{
   n1=<INSTALLATION> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<DOT> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n5=CommentLine()
      { n4.addNode(n5); }
   )?
   
   { return new InstallationParagraph(n0,n2,n4); }
}

SecurityParagraph SecurityParagraph() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   CommentLine n5;

   
}
{
   n1=<SECURITY> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<DOT> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n5=CommentLine()
      { n4.addNode(n5); }
   )?
   
   { return new SecurityParagraph(n0,n2,n4); }
}

EnvironmentDivision EnvironmentDivision() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeListOptional n6 = new NodeListOptional();
   EnvironmentSection n7;

   
}
{
   n1=<ENVIRONMENT> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<DIVISION> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<DOT> { n4 = JTBToolkit.makeNodeToken(n5); }
   (
      n7=EnvironmentSection()
      { n6.addNode(n7); }
   )*
   { n6.nodes.trimToSize(); }
   
   { return new EnvironmentDivision(n0,n2,n4,n6); }
}

EnvironmentSection EnvironmentSection() :
{
   NodeChoice n0;
   ConfigurationSection n1;
   InputOutputSection n2;

   
}
{
   (
      n1=ConfigurationSection()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=InputOutputSection()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new EnvironmentSection(n0); }
}

ConfigurationSection ConfigurationSection() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeListOptional n6 = new NodeListOptional();
   ConfigurationSectionParagraph n7;

   
}
{
   n1=<CONFIGURATION> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<SECTION> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<DOT> { n4 = JTBToolkit.makeNodeToken(n5); }
   (
      n7=ConfigurationSectionParagraph()
      { n6.addNode(n7); }
   )*
   { n6.nodes.trimToSize(); }
   
   { return new ConfigurationSection(n0,n2,n4,n6); }
}

ConfigurationSectionParagraph ConfigurationSectionParagraph() :
{
   NodeChoice n0;
   SourceComputerParagraph n1;
   ObjectComputerParagraph n2;
   SpecialNamesParagraph n3;

   
}
{
   (
      n1=SourceComputerParagraph()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=ObjectComputerParagraph()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=SpecialNamesParagraph()
      { n0 = new NodeChoice(n3, 2); }
   )
   
   { return new ConfigurationSectionParagraph(n0); }
}

SourceComputerParagraph SourceComputerParagraph() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   ComputerName n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeOptional n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;

   
}
{
   n1=<SOURCE_COMPUTER> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<DOT> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=ComputerName()
   (
      { n7 = new NodeOptional(); }
      { n6 = new NodeSequence(3); }
      (
         n9=<WITH> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
      )?
      { n6.addNode(n7); }
      n11=<DEBUGGING> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n6.addNode(n10); }
      n13=<MODE> { n12 = JTBToolkit.makeNodeToken(n13); }
      { n6.addNode(n12); }
      { n5.addNode(n6); }
   )?
   n15=<DOT> { n14 = JTBToolkit.makeNodeToken(n15); }
   
   { return new SourceComputerParagraph(n0,n2,n4,n5,n14); }
}

ObjectComputerParagraph ObjectComputerParagraph() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   ComputerName n4;
   NodeListOptional n5 = new NodeListOptional();
   ObjectComputerClause n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1=<OBJECT_COMPUTER> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<DOT> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=ComputerName()
   (
      n6=ObjectComputerClause()
      { n5.addNode(n6); }
   )*
   { n5.nodes.trimToSize(); }
   n8=<DOT> { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new ObjectComputerParagraph(n0,n2,n4,n5,n7); }
}

ObjectComputerClause ObjectComputerClause() :
{
   NodeChoice n0;
   MemorySizeClause n1;
   CollatingSequenceClause n2;
   SegmentLimitClause n3;
   CharacterSetClause n4;

   
}
{
   (
      n1=MemorySizeClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=CollatingSequenceClause()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=SegmentLimitClause()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=CharacterSetClause()
      { n0 = new NodeChoice(n4, 3); }
   )
   
   { return new ObjectComputerClause(n0); }
}

MemorySizeClause MemorySizeClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   IntegerConstant n5;
   NodeOptional n6 = new NodeOptional();
   NodeChoice n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;

   
}
{
   n1=<MEMORY> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<SIZE> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n5=IntegerConstant()
   (
      (
         n9=<WORDS> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7 = new NodeChoice(n8, 0); }
      |
         n11=<CHARACTERS> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n7 = new NodeChoice(n10, 1); }
      |
         n13=<MODULES> { n12 = JTBToolkit.makeNodeToken(n13); }
         { n7 = new NodeChoice(n12, 2); }
      )
      { n6.addNode(n7); }
   )?
   
   { return new MemorySizeClause(n0,n2,n5,n6); }
}

CollatingSequenceClause CollatingSequenceClause() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeOptional n8 = new NodeOptional();
   NodeToken n9;
   Token n10;
   AlphabetName n11;

   
}
{
   (
      n2=<PROGRAM> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   (
      n5=<COLLATING> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
   )?
   n7=<SEQUENCE> { n6 = JTBToolkit.makeNodeToken(n7); }
   (
      n10=<IS> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n8.addNode(n9); }
   )?
   n11=AlphabetName()
   
   { return new CollatingSequenceClause(n0,n3,n6,n8,n11); }
}

SegmentLimitClause SegmentLimitClause() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeOptional n8 = new NodeOptional();
   NodeToken n9;
   Token n10;
   IntegerConstant n11;

   
}
{
   (
      (
         n2=<SEGMENT_LIMIT> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         { n3 = new NodeSequence(2); }
         n5=<SEGMENT> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
         n7=<LIMIT> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n3.addNode(n6); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   (
      n10=<IS> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n8.addNode(n9); }
   )?
   n11=IntegerConstant()
   
   { return new SegmentLimitClause(n0,n8,n11); }
}

CharacterSetClause CharacterSetClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   CommentLine n5;

   
}
{
   n1=<CHARACTER> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<SET> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n5=CommentLine()
      { n4.addNode(n5); }
   )?
   
   { return new CharacterSetClause(n0,n2,n4); }
}

SpecialNamesParagraph SpecialNamesParagraph() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeSequence n5;
   NodeList n6;
   SpecialNameClause n7;
   NodeToken n8;
   Token n9;

   
}
{
   n1=<SPECIAL_NAMES> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<DOT> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      { n6 = new NodeList(); }
      { n5 = new NodeSequence(2); }
      (
         n7=SpecialNameClause()
         { n6.addNode(n7); }
      )+
      { n6.nodes.trimToSize(); }
      { n5.addNode(n6); }
      n9=<DOT> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n5.addNode(n8); }
      { n4.addNode(n5); }
   )?
   
   { return new SpecialNamesParagraph(n0,n2,n4); }
}

SpecialNameClause SpecialNameClause() :
{
   NodeChoice n0;
   AlphabetClause n1;
   ClassClause n2;
   CurrencySignClause n3;
   DecimalPointClause n4;
   SymbolicCharactersClause n5;
   CallConventionClause n6;
   EnvironmentNameIsMnemonicNameClause n7;

   
}
{
   (
      n1=AlphabetClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=ClassClause()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=CurrencySignClause()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=DecimalPointClause()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=SymbolicCharactersClause()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=CallConventionClause()
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=EnvironmentNameIsMnemonicNameClause()
      { n0 = new NodeChoice(n7, 6); }
   )
   
   { return new SpecialNameClause(n0); }
}

IterableAlphabetPhrase IterableAlphabetPhrase() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   IterableLiteral n7;
   NodeList n8 = new NodeList();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   IterableLiteral n12;

   
}
{
   (
      { n1 = new NodeSequence(2); }
      (
         (
            n4=<THROUGH> { n3 = JTBToolkit.makeNodeToken(n4); }
            { n2 = new NodeChoice(n3, 0); }
         |
            n6=<THRU> { n5 = JTBToolkit.makeNodeToken(n6); }
            { n2 = new NodeChoice(n5, 1); }
         )
         
      )
      { n1.addNode(n2); }
      n7=IterableLiteral()
      { n1.addNode(n7); }
      { n0 = new NodeChoice(n1, 0); }
   |
      (
         { n9 = new NodeSequence(2); }
         n11=<ALSO> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n9.addNode(n10); }
         n12=IterableLiteral()
         { n9.addNode(n12); }
         { n8.addNode(n9); }
      )+
      { n8.nodes.trimToSize(); }
      { n0 = new NodeChoice(n8, 1); }
   )
   
   { return new IterableAlphabetPhrase(n0); }
}

AlphabetClause AlphabetClause() :
{
   NodeToken n0;
   Token n1;
   AlphabetName n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   NodeChoice n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   CobolWord n13;
   NodeList n14 = new NodeList();
   NodeSequence n15;
   IterableLiteral n16;
   NodeOptional n17;
   IterableAlphabetPhrase n18;

   
}
{
   n1=<ALPHABET> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=AlphabetName()
   (
      n5=<IS> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
   )?
   (
      (
         n8=<STANDARD_1> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6 = new NodeChoice(n7, 0); }
      |
         n10=<STANDARD_2> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n6 = new NodeChoice(n9, 1); }
      |
         n12=<NATIVE> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n6 = new NodeChoice(n11, 2); }
      |
         n13=CobolWord()
         { n6 = new NodeChoice(n13, 3); }
      |
         (
            { n17 = new NodeOptional(); }
            { n15 = new NodeSequence(2); }
            n16=IterableLiteral()
            { n15.addNode(n16); }
            (
               n18=IterableAlphabetPhrase()
               { n17.addNode(n18); }
            )?
            { n15.addNode(n17); }
            { n14.addNode(n15); }
         )+
         { n14.nodes.trimToSize(); }
         { n6 = new NodeChoice(n14, 4); }
      )
      
   )
   
   { return new AlphabetClause(n0,n2,n3,n6); }
}

ClassClause ClassClause() :
{
   NodeToken n0;
   Token n1;
   ClassName n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   NodeList n6 = new NodeList();
   NodeSequence n7;
   NodeChoice n8;
   Identifier n9;
   IterableLiteral n10;
   NodeOptional n11;
   NodeSequence n12;
   NodeChoice n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeChoice n18;
   Identifier n19;
   IterableLiteral n20;

   
}
{
   n1=<CLASS> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=ClassName()
   (
      n5=<IS> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
   )?
   (
      { n11 = new NodeOptional(); }
      { n7 = new NodeSequence(2); }
      (
         (
            n9=Identifier()
            { n8 = new NodeChoice(n9, 0); }
         |
            n10=IterableLiteral()
            { n8 = new NodeChoice(n10, 1); }
         )
         
      )
      { n7.addNode(n8); }
      (
         { n12 = new NodeSequence(2); }
         (
            (
               n15=<THROUGH> { n14 = JTBToolkit.makeNodeToken(n15); }
               { n13 = new NodeChoice(n14, 0); }
            |
               n17=<THRU> { n16 = JTBToolkit.makeNodeToken(n17); }
               { n13 = new NodeChoice(n16, 1); }
            )
            
         )
         { n12.addNode(n13); }
         (
            (
               n19=Identifier()
               { n18 = new NodeChoice(n19, 0); }
            |
               n20=IterableLiteral()
               { n18 = new NodeChoice(n20, 1); }
            )
            
         )
         { n12.addNode(n18); }
         { n11.addNode(n12); }
      )?
      { n7.addNode(n11); }
      { n6.addNode(n7); }
   )+
   { n6.nodes.trimToSize(); }
   
   { return new ClassClause(n0,n2,n3,n6); }
}

CurrencySignClause CurrencySignClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;
   Literal n8;

   
}
{
   n1=<CURRENCY> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<SIGN> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   (
      n7=<IS> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
   )?
   n8=Literal()
   
   { return new CurrencySignClause(n0,n2,n5,n8); }
}

DecimalPointClause DecimalPointClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1=<DECIMAL_POINT> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<IS> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n6=<COMMA> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new DecimalPointClause(n0,n2,n5); }
}

SymbolicCharactersClause SymbolicCharactersClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeList n5 = new NodeList();
   NodeSequence n6;
   NodeList n7;
   SymbolicCharacter n8;
   NodeOptional n9;
   NodeChoice n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeList n15;
   NodeChoice n16;
   NumericConstant n17;
   NodeToken n18;
   Token n19;
   NodeOptional n20 = new NodeOptional();
   NodeSequence n21;
   NodeToken n22;
   Token n23;
   AlphabetName n24;

   
}
{
   n1=<SYMBOLIC> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<CHARACTERS> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   (
      { n7 = new NodeList(); }
      { n9 = new NodeOptional(); }
      { n15 = new NodeList(); }
      { n6 = new NodeSequence(3); }
      (
         n8=SymbolicCharacter()
         { n7.addNode(n8); }
      )+
      { n7.nodes.trimToSize(); }
      { n6.addNode(n7); }
      (
         (
            (
               n12=<ARE> { n11 = JTBToolkit.makeNodeToken(n12); }
               { n10 = new NodeChoice(n11, 0); }
            |
               n14=<IS> { n13 = JTBToolkit.makeNodeToken(n14); }
               { n10 = new NodeChoice(n13, 1); }
            )
            
         )
         { n9.addNode(n10); }
      )?
      { n6.addNode(n9); }
      (
         (
            n17=NumericConstant()
            { n16 = new NodeChoice(n17, 0); }
         |
            n19=<HEXNUMBER> { n18 = JTBToolkit.makeNodeToken(n19); }
            { n16 = new NodeChoice(n18, 1); }
         )
         { n15.addNode(n16); }
      )+
      { n15.nodes.trimToSize(); }
      { n6.addNode(n15); }
      { n5.addNode(n6); }
   )+
   { n5.nodes.trimToSize(); }
   (
      { n21 = new NodeSequence(2); }
      n23=<IN> { n22 = JTBToolkit.makeNodeToken(n23); }
      { n21.addNode(n22); }
      n24=AlphabetName()
      { n21.addNode(n24); }
      { n20.addNode(n21); }
   )?
   
   { return new SymbolicCharactersClause(n0,n2,n5,n20); }
}

CallConventionClause CallConventionClause() :
{
   NodeToken n0;
   Token n1;
   IntegerConstant n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   ConventionName n6;

   
}
{
   n1=<CALL_CONVENTION> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=IntegerConstant()
   (
      n5=<IS> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
   )?
   n6=ConventionName()
   
   { return new CallConventionClause(n0,n2,n3,n6); }
}

EnvironmentNameIsMnemonicNameClause EnvironmentNameIsMnemonicNameClause() :
{
   EnvironmentName n0;
   NodeChoice n1;
   NodeSequence n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   MnemonicName n6;
   NodeOptional n7 = new NodeOptional();
   SpecialNamesParagraphStatusPhrase n8;
   SpecialNamesParagraphStatusPhrase n9;

   
}
{
   n0=EnvironmentName()
   (
      (
         { n2 = new NodeSequence(3); }
         (
            n5=<IS> { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3.addNode(n4); }
         )?
         { n2.addNode(n3); }
         n6=MnemonicName()
         { n2.addNode(n6); }
         (
            n8=SpecialNamesParagraphStatusPhrase()
            { n7.addNode(n8); }
         )?
         { n2.addNode(n7); }
         { n1 = new NodeChoice(n2, 0); }
      |
         n9=SpecialNamesParagraphStatusPhrase()
         { n1 = new NodeChoice(n9, 1); }
      )
      
   )
   
   { return new EnvironmentNameIsMnemonicNameClause(n0,n1); }
}

SpecialNamesParagraphStatusPhrase SpecialNamesParagraphStatusPhrase() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   NodeToken n8;
   Token n9;
   IterableCondition n10;
   NodeOptional n11 = new NodeOptional();
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   NodeOptional n15;
   NodeToken n16;
   Token n17;
   NodeOptional n18;
   NodeToken n19;
   Token n20;
   IterableCondition n21;
   NodeSequence n22;
   NodeToken n23;
   Token n24;
   NodeOptional n25 = new NodeOptional();
   NodeToken n26;
   Token n27;
   NodeOptional n28 = new NodeOptional();
   NodeToken n29;
   Token n30;
   IterableCondition n31;
   NodeOptional n32 = new NodeOptional();
   NodeSequence n33;
   NodeToken n34;
   Token n35;
   NodeOptional n36;
   NodeToken n37;
   Token n38;
   NodeOptional n39;
   NodeToken n40;
   Token n41;
   IterableCondition n42;

   
}
{
   (
      (
         { n1 = new NodeSequence(5); }
         n3=<ON> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         (
            n6=<STATUS> { n5 = JTBToolkit.makeNodeToken(n6); }
            { n4.addNode(n5); }
         )?
         { n1.addNode(n4); }
         (
            n9=<IS> { n8 = JTBToolkit.makeNodeToken(n9); }
            { n7.addNode(n8); }
         )?
         { n1.addNode(n7); }
         n10=IterableCondition()
         { n1.addNode(n10); }
         (
            { n15 = new NodeOptional(); }
            { n18 = new NodeOptional(); }
            { n12 = new NodeSequence(4); }
            n14=<OFF> { n13 = JTBToolkit.makeNodeToken(n14); }
            { n12.addNode(n13); }
            (
               n17=<STATUS> { n16 = JTBToolkit.makeNodeToken(n17); }
               { n15.addNode(n16); }
            )?
            { n12.addNode(n15); }
            (
               n20=<IS> { n19 = JTBToolkit.makeNodeToken(n20); }
               { n18.addNode(n19); }
            )?
            { n12.addNode(n18); }
            n21=IterableCondition()
            { n12.addNode(n21); }
            { n11.addNode(n12); }
         )?
         { n1.addNode(n11); }
         { n0 = new NodeChoice(n1, 0); }
      |
         { n22 = new NodeSequence(5); }
         n24=<OFF> { n23 = JTBToolkit.makeNodeToken(n24); }
         { n22.addNode(n23); }
         (
            n27=<STATUS> { n26 = JTBToolkit.makeNodeToken(n27); }
            { n25.addNode(n26); }
         )?
         { n22.addNode(n25); }
         (
            n30=<IS> { n29 = JTBToolkit.makeNodeToken(n30); }
            { n28.addNode(n29); }
         )?
         { n22.addNode(n28); }
         n31=IterableCondition()
         { n22.addNode(n31); }
         (
            { n36 = new NodeOptional(); }
            { n39 = new NodeOptional(); }
            { n33 = new NodeSequence(4); }
            n35=<ON> { n34 = JTBToolkit.makeNodeToken(n35); }
            { n33.addNode(n34); }
            (
               n38=<STATUS> { n37 = JTBToolkit.makeNodeToken(n38); }
               { n36.addNode(n37); }
            )?
            { n33.addNode(n36); }
            (
               n41=<IS> { n40 = JTBToolkit.makeNodeToken(n41); }
               { n39.addNode(n40); }
            )?
            { n33.addNode(n39); }
            n42=IterableCondition()
            { n33.addNode(n42); }
            { n32.addNode(n33); }
         )?
         { n22.addNode(n32); }
         { n0 = new NodeChoice(n22, 1); }
      )
      
   )
   
   { return new SpecialNamesParagraphStatusPhrase(n0); }
}

InputOutputSection InputOutputSection() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeListOptional n6 = new NodeListOptional();
   InputOutputSectionParagraph n7;

   
}
{
   n1=<INPUT_OUTPUT> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<SECTION> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<DOT> { n4 = JTBToolkit.makeNodeToken(n5); }
   (
      n7=InputOutputSectionParagraph()
      { n6.addNode(n7); }
   )*
   { n6.nodes.trimToSize(); }
   
   { return new InputOutputSection(n0,n2,n4,n6); }
}

InputOutputSectionParagraph InputOutputSectionParagraph() :
{
   NodeChoice n0;
   FileControlParagraph n1;
   IOControlParagraph n2;

   
}
{
   (
      n1=FileControlParagraph()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=IOControlParagraph()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new InputOutputSectionParagraph(n0); }
}

FileControlParagraph FileControlParagraph() :
{
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   NodeSequence n3;
   NodeOptional n4;
   NodeToken n5;
   Token n6;
   FileControlEntry n7;
   NodeToken n8;
   Token n9;

   
}
{
   n1=<FILE_CONTROL> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      LOOKAHEAD([ <DOT> ] FileControlEntry())
      { n4 = new NodeOptional(); }
      { n3 = new NodeSequence(2); }
      (
         n6=<DOT> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4.addNode(n5); }
      )?
      { n3.addNode(n4); }
      n7=FileControlEntry()
      { n3.addNode(n7); }
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   n9=<DOT> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new FileControlParagraph(n0,n2,n8); }
}

FileControlEntry FileControlEntry() :
{
   SelectClause n0;
   NodeListOptional n1 = new NodeListOptional();
   FileControlClause n2;

   
}
{
   n0=SelectClause()
   (
      n2=FileControlClause()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new FileControlEntry(n0,n1); }
}

FileControlClause FileControlClause() :
{
   NodeChoice n0;
   AssignClause n1;
   ReserveClause n2;
   OrganizationClause n3;
   PaddingCharacterClause n4;
   RecordDelimiterClause n5;
   AccessModeClause n6;
   RecordKeyClause n7;
   AlternateRecordKeyClause n8;
   FileStatusClause n9;
   PasswordClause n10;

   
}
{
   (
      n1=AssignClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=ReserveClause()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=OrganizationClause()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=PaddingCharacterClause()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=RecordDelimiterClause()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=AccessModeClause()
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=RecordKeyClause()
      { n0 = new NodeChoice(n7, 6); }
   |
      n8=AlternateRecordKeyClause()
      { n0 = new NodeChoice(n8, 7); }
   |
      n9=FileStatusClause()
      { n0 = new NodeChoice(n9, 8); }
   |
      n10=PasswordClause()
      { n0 = new NodeChoice(n10, 9); }
   )
   
   { return new FileControlClause(n0); }
}

SelectClause SelectClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   FileName n5;

   
}
{
   n1=<SELECT> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<OPTIONAL> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n5=FileName()
   
   { return new SelectClause(n0,n2,n5); }
}

AssignClause AssignClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeChoice n5;
   AssignmentName n6;
   Literal n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeChoice n12;
   AssignmentName n13;
   Literal n14;

   
}
{
   n1=<ASSIGN> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<TO> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   (
      (
         n6=AssignmentName()
         { n5 = new NodeChoice(n6, 0); }
      |
         n7=Literal()
         { n5 = new NodeChoice(n7, 1); }
      )
      
   )
   (
      { n9 = new NodeSequence(2); }
      n11=<USING> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      (
         (
            n13=AssignmentName()
            { n12 = new NodeChoice(n13, 0); }
         |
            n14=Literal()
            { n12 = new NodeChoice(n14, 1); }
         )
         
      )
      { n9.addNode(n12); }
      { n8.addNode(n9); }
   )?
   
   { return new AssignClause(n0,n2,n5,n8); }
}

ReserveClause ReserveClause() :
{
   NodeToken n0;
   Token n1;
   IntegerConstant n2;
   NodeOptional n3 = new NodeOptional();
   NodeChoice n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1=<RESERVE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=IntegerConstant()
   (
      (
         n6=<AREA> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4 = new NodeChoice(n5, 0); }
      |
         n8=<AREAS> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n4 = new NodeChoice(n7, 1); }
      )
      { n3.addNode(n4); }
   )?
   
   { return new ReserveClause(n0,n2,n3); }
}

OrganizationClause OrganizationClause() :
{
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4;
   NodeToken n5;
   Token n6;
   NodeChoice n7;
   SequentialOrganizationClause n8;
   LineSequentialOrganizationClause n9;
   RelativeOrganizationClause n10;
   IndexedOrganizationClause n11;

   
}
{
   (
      { n4 = new NodeOptional(); }
      { n1 = new NodeSequence(2); }
      n3=<ORGANIZATION> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      (
         n6=<IS> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4.addNode(n5); }
      )?
      { n1.addNode(n4); }
      { n0.addNode(n1); }
   )?
   (
      (
         n8=SequentialOrganizationClause()
         { n7 = new NodeChoice(n8, 0); }
      |
         n9=LineSequentialOrganizationClause()
         { n7 = new NodeChoice(n9, 1); }
      |
         n10=RelativeOrganizationClause()
         { n7 = new NodeChoice(n10, 2); }
      |
         n11=IndexedOrganizationClause()
         { n7 = new NodeChoice(n11, 3); }
      )
      
   )
   
   { return new OrganizationClause(n0,n7); }
}

SequentialOrganizationClause SequentialOrganizationClause() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<SEQUENTIAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new SequentialOrganizationClause(n0); }
}

LineSequentialOrganizationClause LineSequentialOrganizationClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   
}
{
   n1=<LINE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<SEQUENTIAL> { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new LineSequentialOrganizationClause(n0,n2); }
}

RelativeOrganizationClause RelativeOrganizationClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   Identifier n3;

   
}
{
   n1=<RELATIVE> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=Identifier()
      { n2.addNode(n3); }
   )?
   
   { return new RelativeOrganizationClause(n0,n2); }
}

IndexedOrganizationClause IndexedOrganizationClause() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<INDEXED> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new IndexedOrganizationClause(n0); }
}

PaddingCharacterClause PaddingCharacterClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;
   NodeChoice n8;
   Identifier n9;
   Literal n10;

   
}
{
   n1=<PADDING> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<CHARACTER> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   (
      n7=<IS> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
   )?
   (
      (
         n9=Identifier()
         { n8 = new NodeChoice(n9, 0); }
      |
         n10=Literal()
         { n8 = new NodeChoice(n10, 1); }
      )
      
   )
   
   { return new PaddingCharacterClause(n0,n2,n5,n8); }
}

RecordDelimiterClause RecordDelimiterClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   NodeChoice n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   AssignmentName n12;

   
}
{
   n1=<RECORD> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<DELIMITER> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n6=<IS> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
   )?
   (
      (
         n9=<STANDARD_1> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7 = new NodeChoice(n8, 0); }
      |
         n11=<IMPLICIT> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n7 = new NodeChoice(n10, 1); }
      |
         n12=AssignmentName()
         { n7 = new NodeChoice(n12, 2); }
      )
      
   )
   
   { return new RecordDelimiterClause(n0,n2,n4,n7); }
}

AccessModeClause AccessModeClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;
   NodeChoice n8;
   SequentialAccessMode n9;
   RandomAccessMode n10;
   DynamicAccessMode n11;

   
}
{
   n1=<ACCESS> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<MODE> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   (
      n7=<IS> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
   )?
   (
      (
         n9=SequentialAccessMode()
         { n8 = new NodeChoice(n9, 0); }
      |
         n10=RandomAccessMode()
         { n8 = new NodeChoice(n10, 1); }
      |
         n11=DynamicAccessMode()
         { n8 = new NodeChoice(n11, 2); }
      )
      
   )
   
   { return new AccessModeClause(n0,n2,n5,n8); }
}

SequentialAccessMode SequentialAccessMode() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   RelativeKeyClause n3;

   
}
{
   n1=<SEQUENTIAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=RelativeKeyClause()
      { n2.addNode(n3); }
   )?
   
   { return new SequentialAccessMode(n0,n2); }
}

RandomAccessMode RandomAccessMode() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   RelativeKeyClause n3;

   
}
{
   n1=<RANDOM> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=RelativeKeyClause()
      { n2.addNode(n3); }
   )?
   
   { return new RandomAccessMode(n0,n2); }
}

DynamicAccessMode DynamicAccessMode() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   RelativeKeyClause n3;

   
}
{
   n1=<DYNAMIC> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=RelativeKeyClause()
      { n2.addNode(n3); }
   )?
   
   { return new DynamicAccessMode(n0,n2); }
}

RelativeKeyClause RelativeKeyClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;
   Identifier n8;

   
}
{
   n1=<RELATIVE> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<KEY> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   (
      n7=<IS> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
   )?
   n8=Identifier()
   
   { return new RelativeKeyClause(n0,n2,n5,n8); }
}

RecordKeyClause RecordKeyClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;
   Identifier n8;
   NodeOptional n9 = new NodeOptional();
   PasswordClause n10;
   NodeOptional n11 = new NodeOptional();
   NodeSequence n12;
   NodeOptional n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;

   
}
{
   n1=<RECORD> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<KEY> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   (
      n7=<IS> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
   )?
   n8=Identifier()
   (
      n10=PasswordClause()
      { n9.addNode(n10); }
   )?
   (
      { n13 = new NodeOptional(); }
      { n12 = new NodeSequence(2); }
      (
         n15=<WITH> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n13.addNode(n14); }
      )?
      { n12.addNode(n13); }
      n17=<DUPLICATES> { n16 = JTBToolkit.makeNodeToken(n17); }
      { n12.addNode(n16); }
      { n11.addNode(n12); }
   )?
   
   { return new RecordKeyClause(n0,n2,n5,n8,n9,n11); }
}

AlternateRecordKeyClause AlternateRecordKeyClause() :
{
   NodeToken n0;
   Token n1;
   RecordKeyClause n2;

   
}
{
   n1=<ALTERNATE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=RecordKeyClause()
   
   { return new AlternateRecordKeyClause(n0,n2); }
}

PasswordClause PasswordClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   DataName n5;

   
}
{
   n1=<PASSWORD> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<IS> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n5=DataName()
   
   { return new PasswordClause(n0,n2,n5); }
}

FileStatusClause FileStatusClause() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;
   Identifier n8;
   NodeOptional n9 = new NodeOptional();
   Identifier n10;

   
}
{
   (
      n2=<FILE> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n4=<STATUS> { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      n7=<IS> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
   )?
   n8=Identifier()
   (
      n10=Identifier()
      { n9.addNode(n10); }
   )?
   
   { return new FileStatusClause(n0,n3,n5,n8,n9); }
}

IOControlParagraph IOControlParagraph() :
{
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   NodeSequence n3;
   NodeOptional n4;
   NodeToken n5;
   Token n6;
   IOControlClause n7;
   NodeToken n8;
   Token n9;

   
}
{
   n1=<I_O_CONTROL> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      LOOKAHEAD([ <DOT> ] IOControlClause())
      { n4 = new NodeOptional(); }
      { n3 = new NodeSequence(2); }
      (
         n6=<DOT> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4.addNode(n5); }
      )?
      { n3.addNode(n4); }
      n7=IOControlClause()
      { n3.addNode(n7); }
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   n9=<DOT> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new IOControlParagraph(n0,n2,n8); }
}

IOControlClause IOControlClause() :
{
   NodeChoice n0;
   RerunClause n1;
   SameAreaClause n2;
   MultipleFileClause n3;

   
}
{
   (
      n1=RerunClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=SameAreaClause()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=MultipleFileClause()
      { n0 = new NodeChoice(n3, 2); }
   )
   
   { return new IOControlClause(n0); }
}

RerunClause RerunClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeChoice n6;
   AssignmentName n7;
   FileName n8;
   NodeToken n9;
   Token n10;
   NodeChoice n11;
   Rerun2 n12;
   NodeSequence n13;
   IntegerConstant n14;
   NodeOptional n15 = new NodeOptional();
   NodeToken n16;
   Token n17;

   
}
{
   n1=<RERUN> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n3 = new NodeSequence(2); }
      n5=<ON> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      (
         (
            n7=AssignmentName()
            { n6 = new NodeChoice(n7, 0); }
         |
            n8=FileName()
            { n6 = new NodeChoice(n8, 1); }
         )
         
      )
      { n3.addNode(n6); }
      { n2.addNode(n3); }
   )?
   n10=<EVERY> { n9 = JTBToolkit.makeNodeToken(n10); }
   (
      (
         LOOKAHEAD(Rerun2())
         n12=Rerun2()
         { n11 = new NodeChoice(n12, 0); }
      |
         { n13 = new NodeSequence(2); }
         n14=IntegerConstant()
         { n13.addNode(n14); }
         (
            n17=<CLOCK_UNITS> { n16 = JTBToolkit.makeNodeToken(n17); }
            { n15.addNode(n16); }
         )?
         { n13.addNode(n15); }
         { n11 = new NodeChoice(n13, 1); }
      )
      
   )
   
   { return new RerunClause(n0,n2,n9,n11); }
}

Rerun2 Rerun2() :
{
   NodeChoice n0;
   NodeSequence n1;
   IntegerConstant n2;
   NodeToken n3;
   Token n4;
   NodeSequence n5;
   NodeOptional n6 = new NodeOptional();
   NodeToken n7;
   Token n8;
   NodeOptional n9 = new NodeOptional();
   NodeToken n10;
   Token n11;
   NodeChoice n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   FileName n19;

   
}
{
   (
      { n1 = new NodeSequence(2); }
      n2=IntegerConstant()
      { n1.addNode(n2); }
      n4=<RECORDS> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n1.addNode(n3); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n5 = new NodeSequence(5); }
      (
         n8=<END> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6.addNode(n7); }
      )?
      { n5.addNode(n6); }
      (
         n11=<OF> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n9.addNode(n10); }
      )?
      { n5.addNode(n9); }
      (
         (
            n14=<REEL> { n13 = JTBToolkit.makeNodeToken(n14); }
            { n12 = new NodeChoice(n13, 0); }
         |
            n16=<UNIT> { n15 = JTBToolkit.makeNodeToken(n16); }
            { n12 = new NodeChoice(n15, 1); }
         )
         
      )
      { n5.addNode(n12); }
      n18=<OF> { n17 = JTBToolkit.makeNodeToken(n18); }
      { n5.addNode(n17); }
      n19=FileName()
      { n5.addNode(n19); }
      { n0 = new NodeChoice(n5, 1); }
   )
   
   { return new Rerun2(n0); }
}

SameAreaClause SameAreaClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10 = new NodeOptional();
   NodeToken n11;
   Token n12;
   NodeOptional n13 = new NodeOptional();
   NodeToken n14;
   Token n15;
   NodeList n16 = new NodeList();
   FileName n17;

   
}
{
   n1=<SAME> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n5=<RECORD> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3 = new NodeChoice(n4, 0); }
      |
         n7=<SORT> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n3 = new NodeChoice(n6, 1); }
      |
         n9=<SORT_MERGE> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n3 = new NodeChoice(n8, 2); }
      )
      { n2.addNode(n3); }
   )?
   (
      n12=<AREA> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n10.addNode(n11); }
   )?
   (
      n15=<FOR> { n14 = JTBToolkit.makeNodeToken(n15); }
      { n13.addNode(n14); }
   )?
   (
      n17=FileName()
      { n16.addNode(n17); }
   )+
   { n16.nodes.trimToSize(); }
   
   { return new SameAreaClause(n0,n2,n10,n13,n16); }
}

MultipleFileClause MultipleFileClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   NodeToken n8;
   Token n9;
   NodeList n10 = new NodeList();
   NodeSequence n11;
   FileName n12;
   NodeOptional n13;
   NodeSequence n14;
   NodeOptional n15;
   NodeToken n16;
   Token n17;
   IntegerConstant n18;

   
}
{
   n1=<MULTIPLE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<FILE> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n6=<TAPE> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
   )?
   (
      n9=<CONTAINS> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n7.addNode(n8); }
   )?
   (
      { n13 = new NodeOptional(); }
      { n11 = new NodeSequence(2); }
      n12=FileName()
      { n11.addNode(n12); }
      (
         { n15 = new NodeOptional(); }
         { n14 = new NodeSequence(2); }
         (
            n17=<POSITION> { n16 = JTBToolkit.makeNodeToken(n17); }
            { n15.addNode(n16); }
         )?
         { n14.addNode(n15); }
         n18=IntegerConstant()
         { n14.addNode(n18); }
         { n13.addNode(n14); }
      )?
      { n11.addNode(n13); }
      { n10.addNode(n11); }
   )+
   { n10.nodes.trimToSize(); }
   
   { return new MultipleFileClause(n0,n2,n4,n7,n10); }
}

DataDivision DataDivision() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeListOptional n6 = new NodeListOptional();
   DataDivisionSection n7;

   
}
{
   n1=<DATA> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<DIVISION> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<DOT> { n4 = JTBToolkit.makeNodeToken(n5); }
   (
      n7=DataDivisionSection()
      { n6.addNode(n7); }
   )*
   { n6.nodes.trimToSize(); }
   
   { return new DataDivision(n0,n2,n4,n6); }
}

DataDivisionSection DataDivisionSection() :
{
   NodeChoice n0;
   FileSection n1;
   WorkingStorageSection n2;
   LinkageSection n3;
   CommunicationSection n4;

   
}
{
   (
      n1=FileSection()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=WorkingStorageSection()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=LinkageSection()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=CommunicationSection()
      { n0 = new NodeChoice(n4, 3); }
   )
   
   { return new DataDivisionSection(n0); }
}

FileSection FileSection() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeListOptional n6 = new NodeListOptional();
   NodeSequence n7;
   FileAndSortDescriptionEntry n8;
   NodeListOptional n9;
   DataDescriptionEntry n10;

   
}
{
   n1=<FILE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<SECTION> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<DOT> { n4 = JTBToolkit.makeNodeToken(n5); }
   (
      { n9 = new NodeListOptional(); }
      { n7 = new NodeSequence(2); }
      n8=FileAndSortDescriptionEntry()
      { n7.addNode(n8); }
      (
         n10=DataDescriptionEntry()
         { n9.addNode(n10); }
      )*
      { n9.nodes.trimToSize(); }
      { n7.addNode(n9); }
      { n6.addNode(n7); }
   )*
   { n6.nodes.trimToSize(); }
   
   { return new FileSection(n0,n2,n4,n6); }
}

FileAndSortDescriptionEntry FileAndSortDescriptionEntry() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   FileName n5;
   NodeListOptional n6 = new NodeListOptional();
   NodeSequence n7;
   NodeOptional n8;
   NodeToken n9;
   Token n10;
   FileAndSortDescriptionEntryClause n11;
   NodeToken n12;
   Token n13;

   
}
{
   (
      (
         n2=<FD> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<SD> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n5=FileName()
   (
      LOOKAHEAD([ <DOT> ] FileAndSortDescriptionEntryClause())
      { n8 = new NodeOptional(); }
      { n7 = new NodeSequence(2); }
      (
         n10=<DOT> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n8.addNode(n9); }
      )?
      { n7.addNode(n8); }
      n11=FileAndSortDescriptionEntryClause()
      { n7.addNode(n11); }
      { n6.addNode(n7); }
   )*
   { n6.nodes.trimToSize(); }
   n13=<DOT> { n12 = JTBToolkit.makeNodeToken(n13); }
   
   { return new FileAndSortDescriptionEntry(n0,n5,n6,n12); }
}

FileAndSortDescriptionEntryClause FileAndSortDescriptionEntryClause() :
{
   NodeChoice n0;
   ExternalClause n1;
   GlobalClause n2;
   BlockContainsClause n3;
   RecordContainsClause n4;
   LabelRecordsClause n5;
   ValueOfClause n6;
   DataRecordClause n7;
   LinageClause n8;
   CodeSetClause n9;
   ReportClause n10;
   RecordingModeClause n11;

   
}
{
   (
      n1=ExternalClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=GlobalClause()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=BlockContainsClause()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=RecordContainsClause()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=LabelRecordsClause()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=ValueOfClause()
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=DataRecordClause()
      { n0 = new NodeChoice(n7, 6); }
   |
      n8=LinageClause()
      { n0 = new NodeChoice(n8, 7); }
   |
      n9=CodeSetClause()
      { n0 = new NodeChoice(n9, 8); }
   |
      n10=ReportClause()
      { n0 = new NodeChoice(n10, 9); }
   |
      n11=RecordingModeClause()
      { n0 = new NodeChoice(n11, 10); }
   )
   
   { return new FileAndSortDescriptionEntryClause(n0); }
}

ExternalClause ExternalClause() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
   (
      n2=<IS> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n4=<EXTERNAL> { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new ExternalClause(n0,n3); }
}

GlobalClause GlobalClause() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
   (
      n2=<IS> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n4=<GLOBAL> { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new GlobalClause(n0,n3); }
}

BlockContainsClause BlockContainsClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   IntegerConstant n5;
   NodeOptional n6 = new NodeOptional();
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   IntegerConstant n10;
   NodeOptional n11 = new NodeOptional();
   NodeChoice n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;

   
}
{
   n1=<BLOCK> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<CONTAINS> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n5=IntegerConstant()
   (
      { n7 = new NodeSequence(2); }
      n9=<TO> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n7.addNode(n8); }
      n10=IntegerConstant()
      { n7.addNode(n10); }
      { n6.addNode(n7); }
   )?
   (
      (
         n14=<RECORDS> { n13 = JTBToolkit.makeNodeToken(n14); }
         { n12 = new NodeChoice(n13, 0); }
      |
         n16=<CHARACTERS> { n15 = JTBToolkit.makeNodeToken(n16); }
         { n12 = new NodeChoice(n15, 1); }
      )
      { n11.addNode(n12); }
   )?
   
   { return new BlockContainsClause(n0,n2,n5,n6,n11); }
}

RecordContainsClause RecordContainsClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeChoice n5;
   NodeSequence n6;
   IntegerConstant n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   IntegerConstant n12;
   NodeOptional n13 = new NodeOptional();
   NodeToken n14;
   Token n15;
   NodeSequence n16;
   NodeOptional n17 = new NodeOptional();
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NodeOptional n22 = new NodeOptional();
   NodeToken n23;
   Token n24;
   NodeOptional n25 = new NodeOptional();
   NodeToken n26;
   Token n27;
   NodeOptional n28 = new NodeOptional();
   NodeSequence n29;
   NodeOptional n30;
   NodeToken n31;
   Token n32;
   IntegerConstant n33;
   NodeOptional n34;
   NodeSequence n35;
   NodeToken n36;
   Token n37;
   IntegerConstant n38;
   NodeOptional n39;
   NodeToken n40;
   Token n41;
   NodeOptional n42 = new NodeOptional();
   NodeSequence n43;
   NodeToken n44;
   Token n45;
   NodeOptional n46;
   NodeToken n47;
   Token n48;
   Identifier n49;

   
}
{
   n1=<RECORD> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<CONTAINS> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   (
      (
         { n6 = new NodeSequence(3); }
         n7=IntegerConstant()
         { n6.addNode(n7); }
         (
            { n9 = new NodeSequence(2); }
            n11=<TO> { n10 = JTBToolkit.makeNodeToken(n11); }
            { n9.addNode(n10); }
            n12=IntegerConstant()
            { n9.addNode(n12); }
            { n8.addNode(n9); }
         )?
         { n6.addNode(n8); }
         (
            n15=<CHARACTERS> { n14 = JTBToolkit.makeNodeToken(n15); }
            { n13.addNode(n14); }
         )?
         { n6.addNode(n13); }
         { n5 = new NodeChoice(n6, 0); }
      |
         { n16 = new NodeSequence(6); }
         (
            n19=<IS> { n18 = JTBToolkit.makeNodeToken(n19); }
            { n17.addNode(n18); }
         )?
         { n16.addNode(n17); }
         n21=<VARYING> { n20 = JTBToolkit.makeNodeToken(n21); }
         { n16.addNode(n20); }
         (
            n24=<IN> { n23 = JTBToolkit.makeNodeToken(n24); }
            { n22.addNode(n23); }
         )?
         { n16.addNode(n22); }
         (
            n27=<SIZE> { n26 = JTBToolkit.makeNodeToken(n27); }
            { n25.addNode(n26); }
         )?
         { n16.addNode(n25); }
         (
            { n30 = new NodeOptional(); }
            { n34 = new NodeOptional(); }
            { n39 = new NodeOptional(); }
            { n29 = new NodeSequence(4); }
            (
               n32=<FROM> { n31 = JTBToolkit.makeNodeToken(n32); }
               { n30.addNode(n31); }
            )?
            { n29.addNode(n30); }
            n33=IntegerConstant()
            { n29.addNode(n33); }
            (
               { n35 = new NodeSequence(2); }
               n37=<TO> { n36 = JTBToolkit.makeNodeToken(n37); }
               { n35.addNode(n36); }
               n38=IntegerConstant()
               { n35.addNode(n38); }
               { n34.addNode(n35); }
            )?
            { n29.addNode(n34); }
            (
               n41=<CHARACTERS> { n40 = JTBToolkit.makeNodeToken(n41); }
               { n39.addNode(n40); }
            )?
            { n29.addNode(n39); }
            { n28.addNode(n29); }
         )?
         { n16.addNode(n28); }
         (
            { n46 = new NodeOptional(); }
            { n43 = new NodeSequence(3); }
            n45=<DEPENDING> { n44 = JTBToolkit.makeNodeToken(n45); }
            { n43.addNode(n44); }
            (
               n48=<ON> { n47 = JTBToolkit.makeNodeToken(n48); }
               { n46.addNode(n47); }
            )?
            { n43.addNode(n46); }
            n49=Identifier()
            { n43.addNode(n49); }
            { n42.addNode(n43); }
         )?
         { n16.addNode(n42); }
         { n5 = new NodeChoice(n16, 1); }
      )
      
   )
   
   { return new RecordContainsClause(n0,n2,n5); }
}

LabelRecordsClause LabelRecordsClause() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeOptional n6 = new NodeOptional();
   NodeChoice n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   NodeOptional n15 = new NodeOptional();
   NodeChoice n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeChoice n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   NodeList n26 = new NodeList();
   DataName n27;

   
}
{
   n1=<LABEL> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         { n3 = new NodeSequence(2); }
         n5=<RECORD> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
         (
            (
               (
                  n9=<IS> { n8 = JTBToolkit.makeNodeToken(n9); }
                  { n7 = new NodeChoice(n8, 0); }
               |
                  n11=<ARE> { n10 = JTBToolkit.makeNodeToken(n11); }
                  { n7 = new NodeChoice(n10, 1); }
               )
               
            )
            { n6.addNode(n7); }
         )?
         { n3.addNode(n6); }
         { n2 = new NodeChoice(n3, 0); }
      |
         { n12 = new NodeSequence(2); }
         n14=<RECORDS> { n13 = JTBToolkit.makeNodeToken(n14); }
         { n12.addNode(n13); }
         (
            (
               (
                  n18=<IS> { n17 = JTBToolkit.makeNodeToken(n18); }
                  { n16 = new NodeChoice(n17, 0); }
               |
                  n20=<ARE> { n19 = JTBToolkit.makeNodeToken(n20); }
                  { n16 = new NodeChoice(n19, 1); }
               )
               
            )
            { n15.addNode(n16); }
         )?
         { n12.addNode(n15); }
         { n2 = new NodeChoice(n12, 1); }
      )
      
   )
   (
      (
         n23=<OMITTED> { n22 = JTBToolkit.makeNodeToken(n23); }
         { n21 = new NodeChoice(n22, 0); }
      |
         n25=<STANDARD> { n24 = JTBToolkit.makeNodeToken(n25); }
         { n21 = new NodeChoice(n24, 1); }
      |
         (
            n27=DataName()
            { n26.addNode(n27); }
         )+
         { n26.nodes.trimToSize(); }
         { n21 = new NodeChoice(n26, 2); }
      )
      
   )
   
   { return new LabelRecordsClause(n0,n2,n21); }
}

ValueOfClause ValueOfClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeList n4 = new NodeList();
   NodeSequence n5;
   SystemName n6;
   NodeToken n7;
   Token n8;
   NodeChoice n9;
   Identifier n10;
   Literal n11;

   
}
{
   n1=<VALUE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<OF> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      { n5 = new NodeSequence(3); }
      n6=SystemName()
      { n5.addNode(n6); }
      n8=<IS> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n5.addNode(n7); }
      (
         (
            n10=Identifier()
            { n9 = new NodeChoice(n10, 0); }
         |
            n11=Literal()
            { n9 = new NodeChoice(n11, 1); }
         )
         
      )
      { n5.addNode(n9); }
      { n4.addNode(n5); }
   )+
   { n4.nodes.trimToSize(); }
   
   { return new ValueOfClause(n0,n2,n4); }
}

DataRecordClause DataRecordClause() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeOptional n6 = new NodeOptional();
   NodeToken n7;
   Token n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeOptional n12 = new NodeOptional();
   NodeToken n13;
   Token n14;
   NodeList n15 = new NodeList();
   DataName n16;

   
}
{
   n1=<DATA> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         { n3 = new NodeSequence(2); }
         n5=<RECORD> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
         (
            n8=<IS> { n7 = JTBToolkit.makeNodeToken(n8); }
            { n6.addNode(n7); }
         )?
         { n3.addNode(n6); }
         { n2 = new NodeChoice(n3, 0); }
      |
         { n9 = new NodeSequence(2); }
         n11=<RECORDS> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n9.addNode(n10); }
         (
            n14=<ARE> { n13 = JTBToolkit.makeNodeToken(n14); }
            { n12.addNode(n13); }
         )?
         { n9.addNode(n12); }
         { n2 = new NodeChoice(n9, 1); }
      )
      
   )
   (
      n16=DataName()
      { n15.addNode(n16); }
   )+
   { n15.nodes.trimToSize(); }
   
   { return new DataRecordClause(n0,n2,n15); }
}

LinageClause LinageClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeChoice n5;
   DataName n6;
   IntegerConstant n7;
   NodeOptional n8 = new NodeOptional();
   NodeToken n9;
   Token n10;
   NodeListOptional n11 = new NodeListOptional();
   NodeChoice n12;
   NodeSequence n13;
   NodeOptional n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeOptional n19;
   NodeToken n20;
   Token n21;
   NodeChoice n22;
   DataName n23;
   IntegerConstant n24;
   NodeSequence n25;
   NodeOptional n26;
   NodeToken n27;
   Token n28;
   NodeOptional n29;
   NodeToken n30;
   Token n31;
   NodeChoice n32;
   NodeToken n33;
   Token n34;
   NodeToken n35;
   Token n36;
   NodeChoice n37;
   DataName n38;
   IntegerConstant n39;

   
}
{
   n1=<LINAGE> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<IS> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   (
      (
         n6=DataName()
         { n5 = new NodeChoice(n6, 0); }
      |
         n7=IntegerConstant()
         { n5 = new NodeChoice(n7, 1); }
      )
      
   )
   (
      n10=<LINES> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n8.addNode(n9); }
   )?
   (
      { n14 = new NodeOptional(); }
      { n19 = new NodeOptional(); }
      { n26 = new NodeOptional(); }
      { n29 = new NodeOptional(); }
      (
         { n13 = new NodeSequence(4); }
         (
            n16=<WITH> { n15 = JTBToolkit.makeNodeToken(n16); }
            { n14.addNode(n15); }
         )?
         { n13.addNode(n14); }
         n18=<FOOTING> { n17 = JTBToolkit.makeNodeToken(n18); }
         { n13.addNode(n17); }
         (
            n21=<AT> { n20 = JTBToolkit.makeNodeToken(n21); }
            { n19.addNode(n20); }
         )?
         { n13.addNode(n19); }
         (
            (
               n23=DataName()
               { n22 = new NodeChoice(n23, 0); }
            |
               n24=IntegerConstant()
               { n22 = new NodeChoice(n24, 1); }
            )
            
         )
         { n13.addNode(n22); }
         { n12 = new NodeChoice(n13, 0); }
      |
         { n25 = new NodeSequence(4); }
         (
            n28=<LINES> { n27 = JTBToolkit.makeNodeToken(n28); }
            { n26.addNode(n27); }
         )?
         { n25.addNode(n26); }
         (
            n31=<AT> { n30 = JTBToolkit.makeNodeToken(n31); }
            { n29.addNode(n30); }
         )?
         { n25.addNode(n29); }
         (
            (
               n34=<TOP> { n33 = JTBToolkit.makeNodeToken(n34); }
               { n32 = new NodeChoice(n33, 0); }
            |
               n36=<BOTTOM> { n35 = JTBToolkit.makeNodeToken(n36); }
               { n32 = new NodeChoice(n35, 1); }
            )
            
         )
         { n25.addNode(n32); }
         (
            (
               n38=DataName()
               { n37 = new NodeChoice(n38, 0); }
            |
               n39=IntegerConstant()
               { n37 = new NodeChoice(n39, 1); }
            )
            
         )
         { n25.addNode(n37); }
         { n12 = new NodeChoice(n25, 1); }
      )
      { n11.addNode(n12); }
   )*
   { n11.nodes.trimToSize(); }
   
   { return new LinageClause(n0,n2,n5,n8,n11); }
}

RecordingModeClause RecordingModeClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;
   Mode n8;

   
}
{
   n1=<RECORDING> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<MODE> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   (
      n7=<IS> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
   )?
   n8=Mode()
   
   { return new RecordingModeClause(n0,n2,n5,n8); }
}

CodeSetClause CodeSetClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   AlphabetName n5;

   
}
{
   n1=<CODE_SET> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<IS> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n5=AlphabetName()
   
   { return new CodeSetClause(n0,n2,n5); }
}

ReportClause ReportClause() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10 = new NodeOptional();
   NodeToken n11;
   Token n12;
   NodeList n13 = new NodeList();
   Identifier n14;

   
}
{
   (
      (
         { n1 = new NodeSequence(2); }
         n3=<REPORT> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         (
            n6=<IS> { n5 = JTBToolkit.makeNodeToken(n6); }
            { n4.addNode(n5); }
         )?
         { n1.addNode(n4); }
         { n0 = new NodeChoice(n1, 0); }
      |
         { n7 = new NodeSequence(2); }
         n9=<REPORTS> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
         (
            n12=<ARE> { n11 = JTBToolkit.makeNodeToken(n12); }
            { n10.addNode(n11); }
         )?
         { n7.addNode(n10); }
         { n0 = new NodeChoice(n7, 1); }
      )
      
   )
   (
      n14=Identifier()
      { n13.addNode(n14); }
   )+
   { n13.nodes.trimToSize(); }
   
   { return new ReportClause(n0,n13); }
}

DataDescriptionEntry DataDescriptionEntry() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   LevelName66 n4;
   RenamesClause n5;
   NodeToken n6;
   Token n7;
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   LevelName77 n11;
   NodeListOptional n12 = new NodeListOptional();
   DataDescriptionEntryClause n13;
   NodeToken n14;
   Token n15;
   NodeSequence n16;
   NodeToken n17;
   Token n18;
   LevelName88 n19;
   ConditionValueClause n20;
   NodeToken n21;
   Token n22;
   NodeSequence n23;
   LevelNumber n24;
   LevelName n25;
   NodeListOptional n26 = new NodeListOptional();
   DataDescriptionEntryClause n27;
   NodeToken n28;
   Token n29;
   NodeSequence n30;
   ExecStatement n31;
   NodeToken n32;
   Token n33;

   
}
{
   (
      (
         { n1 = new NodeSequence(4); }
         n3=<LEVEL_66> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         n4=LevelName66()
         { n1.addNode(n4); }
         n5=RenamesClause()
         { n1.addNode(n5); }
         n7=<DOT> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n1.addNode(n6); }
         { n0 = new NodeChoice(n1, 0); }
      |
         { n8 = new NodeSequence(4); }
         n10=<LEVEL_77> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n8.addNode(n9); }
         n11=LevelName77()
         { n8.addNode(n11); }
         (
            LOOKAHEAD(DataDescriptionEntryClause())
            n13=DataDescriptionEntryClause()
            { n12.addNode(n13); }
         )*
         { n12.nodes.trimToSize(); }
         { n8.addNode(n12); }
         n15=<DOT> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n8.addNode(n14); }
         { n0 = new NodeChoice(n8, 1); }
      |
         { n16 = new NodeSequence(4); }
         n18=<LEVEL_88> { n17 = JTBToolkit.makeNodeToken(n18); }
         { n16.addNode(n17); }
         n19=LevelName88()
         { n16.addNode(n19); }
         n20=ConditionValueClause()
         { n16.addNode(n20); }
         n22=<DOT> { n21 = JTBToolkit.makeNodeToken(n22); }
         { n16.addNode(n21); }
         { n0 = new NodeChoice(n16, 2); }
      |
         { n23 = new NodeSequence(4); }
         n24=LevelNumber()
         { n23.addNode(n24); }
         n25=LevelName()
         { n23.addNode(n25); }
         (
            LOOKAHEAD(DataDescriptionEntryClause())
            n27=DataDescriptionEntryClause()
            { n26.addNode(n27); }
         )*
         { n26.nodes.trimToSize(); }
         { n23.addNode(n26); }
         n29=<DOT> { n28 = JTBToolkit.makeNodeToken(n29); }
         { n23.addNode(n28); }
         { n0 = new NodeChoice(n23, 3); }
      |
         { n30 = new NodeSequence(2); }
         n31=ExecStatement()
         { n30.addNode(n31); }
         n33=<DOT> { n32 = JTBToolkit.makeNodeToken(n33); }
         { n30.addNode(n32); }
         { n0 = new NodeChoice(n30, 4); }
      )
      
   )
   
   { return new DataDescriptionEntry(n0); }
}

DataDescriptionEntryClause DataDescriptionEntryClause() :
{
   NodeChoice n0;
   DataPictureClause n1;
   DataValueClause n2;
   DataUsageClause n3;
   DataRedefinesClause n4;
   DataExternalClause n5;
   DataGlobalClause n6;
   DataIdentifiedClause n7;
   DataSignClause n8;
   DataOccursClause n9;
   DataSynchronizedClause n10;
   DataJustifiedClause n11;
   DataBlankWhenZeroClause n12;

   
}
{
   (
      n1=DataPictureClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=DataValueClause()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=DataUsageClause()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=DataRedefinesClause()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=DataExternalClause()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=DataGlobalClause()
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=DataIdentifiedClause()
      { n0 = new NodeChoice(n7, 6); }
   |
      n8=DataSignClause()
      { n0 = new NodeChoice(n8, 7); }
   |
      n9=DataOccursClause()
      { n0 = new NodeChoice(n9, 8); }
   |
      n10=DataSynchronizedClause()
      { n0 = new NodeChoice(n10, 9); }
   |
      n11=DataJustifiedClause()
      { n0 = new NodeChoice(n11, 10); }
   |
      n12=DataBlankWhenZeroClause()
      { n0 = new NodeChoice(n12, 11); }
   )
   
   { return new DataDescriptionEntryClause(n0); }
}

DataRedefinesClause DataRedefinesClause() :
{
   NodeToken n0;
   Token n1;
   DataName n2;
   NodeOptional n3 = new NodeOptional();
   DataPictureClause n4;

   
}
{
   n1=<REDEFINES> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=DataName()
   (
      n4=DataPictureClause()
      { n3.addNode(n4); }
   )?
   
   { return new DataRedefinesClause(n0,n2,n3); }
}

DataBlankWhenZeroClause DataBlankWhenZeroClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeChoice n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;

   
}
{
   n1=<BLANK> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<WHEN> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   (
      (
         n7=<ZERO> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5 = new NodeChoice(n6, 0); }
      |
         n9=<ZEROS> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n5 = new NodeChoice(n8, 1); }
      |
         n11=<ZEROES> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n5 = new NodeChoice(n10, 2); }
      )
      
   )
   
   { return new DataBlankWhenZeroClause(n0,n2,n5); }
}

DataJustifiedClause DataJustifiedClause() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;

   
}
{
   (
      (
         n2=<JUSTIFIED> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<JUST> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   (
      n7=<RIGHT> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
   )?
   
   { return new DataJustifiedClause(n0,n5); }
}

DataOccursClause DataOccursClause() :
{
   NodeToken n0;
   Token n1;
   IntegerConstant n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   IntegerConstant n7;
   NodeOptional n8 = new NodeOptional();
   NodeToken n9;
   Token n10;
   NodeOptional n11 = new NodeOptional();
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   NodeOptional n15;
   NodeToken n16;
   Token n17;
   Identifier n18;
   NodeListOptional n19 = new NodeListOptional();
   NodeSequence n20;
   NodeChoice n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   NodeOptional n26;
   NodeToken n27;
   Token n28;
   NodeOptional n29;
   NodeToken n30;
   Token n31;
   NodeList n32;
   Identifier n33;
   NodeOptional n34 = new NodeOptional();
   NodeSequence n35;
   NodeToken n36;
   Token n37;
   NodeOptional n38;
   NodeToken n39;
   Token n40;
   IndexName n41;
   NodeListOptional n42;
   NodeSequence n43;
   NodeOptional n44;
   NodeToken n45;
   Token n46;
   IndexName n47;

   
}
{
   n1=<OCCURS> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=IntegerConstant()
   (
      { n4 = new NodeSequence(2); }
      n6=<TO> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=IntegerConstant()
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )?
   (
      n10=<TIMES> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n8.addNode(n9); }
   )?
   (
      { n15 = new NodeOptional(); }
      { n12 = new NodeSequence(3); }
      n14=<DEPENDING> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n12.addNode(n13); }
      (
         n17=<ON> { n16 = JTBToolkit.makeNodeToken(n17); }
         { n15.addNode(n16); }
      )?
      { n12.addNode(n15); }
      n18=Identifier()
      { n12.addNode(n18); }
      { n11.addNode(n12); }
   )?
   (
      { n26 = new NodeOptional(); }
      { n29 = new NodeOptional(); }
      { n32 = new NodeList(); }
      { n20 = new NodeSequence(4); }
      (
         (
            n23=<ASCENDING> { n22 = JTBToolkit.makeNodeToken(n23); }
            { n21 = new NodeChoice(n22, 0); }
         |
            n25=<DESCENDING> { n24 = JTBToolkit.makeNodeToken(n25); }
            { n21 = new NodeChoice(n24, 1); }
         )
         
      )
      { n20.addNode(n21); }
      (
         n28=<KEY> { n27 = JTBToolkit.makeNodeToken(n28); }
         { n26.addNode(n27); }
      )?
      { n20.addNode(n26); }
      (
         n31=<IS> { n30 = JTBToolkit.makeNodeToken(n31); }
         { n29.addNode(n30); }
      )?
      { n20.addNode(n29); }
      (
         n33=Identifier()
         { n32.addNode(n33); }
      )+
      { n32.nodes.trimToSize(); }
      { n20.addNode(n32); }
      { n19.addNode(n20); }
   )*
   { n19.nodes.trimToSize(); }
   (
      { n38 = new NodeOptional(); }
      { n42 = new NodeListOptional(); }
      { n35 = new NodeSequence(4); }
      n37=<INDEXED> { n36 = JTBToolkit.makeNodeToken(n37); }
      { n35.addNode(n36); }
      (
         n40=<BY> { n39 = JTBToolkit.makeNodeToken(n40); }
         { n38.addNode(n39); }
      )?
      { n35.addNode(n38); }
      n41=IndexName()
      { n35.addNode(n41); }
      (
         { n44 = new NodeOptional(); }
         { n43 = new NodeSequence(2); }
         (
            n46=<COMMACHAR> { n45 = JTBToolkit.makeNodeToken(n46); }
            { n44.addNode(n45); }
         )?
         { n43.addNode(n44); }
         n47=IndexName()
         { n43.addNode(n47); }
         { n42.addNode(n43); }
      )*
      { n42.nodes.trimToSize(); }
      { n35.addNode(n42); }
      { n34.addNode(n35); }
   )?
   
   { return new DataOccursClause(n0,n2,n3,n8,n11,n19,n34); }
}

DataPictureClause DataPictureClause() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;

   
}
{
   (
      (
         n2=<PICTURE> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<PIC> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   (
      n7=<IS> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
   )?
   n9=<PICTURE_STRING> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new DataPictureClause(n0,n5,n8); }
}

PictureCurrency PictureCurrency() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<DOLLARCHAR> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new PictureCurrency(n0); }
}

NonDotChars NonDotChars() :
{
   NodeChoice n0;
   IntegerConstant n1;
   CobolWord n2;
   PictureCurrency n3;

   
}
{
   (
      n1=IntegerConstant()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=CobolWord()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=PictureCurrency()
      { n0 = new NodeChoice(n3, 2); }
   )
   
   { return new NonDotChars(n0); }
}

DataExternalClause DataExternalClause() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   Literal n9;

   
}
{
   (
      n2=<IS> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n4=<EXTERNAL> { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      { n6 = new NodeSequence(2); }
      n8=<BY> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=Literal()
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )?
   
   { return new DataExternalClause(n0,n3,n5); }
}

DataGlobalClause DataGlobalClause() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
   (
      n2=<IS> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n4=<GLOBAL> { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new DataGlobalClause(n0,n3); }
}

DataIdentifiedClause DataIdentifiedClause() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   Literal n7;

   
}
{
   (
      n2=<IS> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n4=<IDENTIFIED> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<BY> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Literal()
   
   { return new DataIdentifiedClause(n0,n3,n5,n7); }
}

DataUsageClause DataUsageClause() :
{
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4;
   NodeToken n5;
   Token n6;
   NodeChoice n7;
   MemoryUsage n8;
   ExternalUsage n9;
   PropertyObjectModifier n10;

   
}
{
   (
      { n4 = new NodeOptional(); }
      { n1 = new NodeSequence(2); }
      n3=<USAGE> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      (
         n6=<IS> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4.addNode(n5); }
      )?
      { n1.addNode(n4); }
      { n0.addNode(n1); }
   )?
   (
      (
         n8=MemoryUsage()
         { n7 = new NodeChoice(n8, 0); }
      |
         n9=ExternalUsage()
         { n7 = new NodeChoice(n9, 1); }
      |
         n10=PropertyObjectModifier()
         { n7 = new NodeChoice(n10, 2); }
      )
      
   )
   
   { return new DataUsageClause(n0,n7); }
}

MemoryUsage MemoryUsage() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   NodeToken n33;
   Token n34;
   NodeToken n35;
   Token n36;
   NodeToken n37;
   Token n38;
   NodeToken n39;
   Token n40;
   NodeToken n41;
   Token n42;
   NodeToken n43;
   Token n44;
   NodeToken n45;
   Token n46;
   NodeToken n47;
   Token n48;
   NodeToken n49;
   Token n50;
   NodeToken n51;
   Token n52;
   NodeToken n53;
   Token n54;
   NodeToken n55;
   Token n56;
   NodeToken n57;
   Token n58;
   NodeToken n59;
   Token n60;
   NodeToken n61;
   Token n62;
   NodeToken n63;
   Token n64;
   NodeToken n65;
   Token n66;
   NodeToken n67;
   Token n68;
   NodeToken n69;
   Token n70;
   NodeToken n71;
   Token n72;
   NodeToken n73;
   Token n74;
   NodeToken n75;
   Token n76;
   NodeToken n77;
   Token n78;
   NodeToken n79;
   Token n80;
   NodeToken n81;
   Token n82;
   NodeToken n83;
   Token n84;
   NodeToken n85;
   Token n86;
   NodeToken n87;
   Token n88;
   NodeToken n89;
   Token n90;
   NodeToken n91;
   Token n92;
   NodeToken n93;
   Token n94;
   NodeToken n95;
   Token n96;
   NodeToken n97;
   Token n98;
   NodeToken n99;
   Token n100;
   NodeToken n101;
   Token n102;
   NodeToken n103;
   Token n104;
   NodeToken n105;
   Token n106;
   NodeToken n107;
   Token n108;
   NodeToken n109;
   Token n110;
   NodeToken n111;
   Token n112;
   NodeToken n113;
   Token n114;
   NodeToken n115;
   Token n116;
   NodeToken n117;
   Token n118;
   NodeToken n119;
   Token n120;
   NodeToken n121;
   Token n122;
   NodeToken n123;
   Token n124;
   NodeToken n125;
   Token n126;
   NodeToken n127;
   Token n128;
   NodeToken n129;
   Token n130;
   NodeToken n131;
   Token n132;
   NodeToken n133;
   Token n134;
   NodeToken n135;
   Token n136;
   NodeToken n137;
   Token n138;
   NodeToken n139;
   Token n140;
   NodeToken n141;
   Token n142;
   NodeToken n143;
   Token n144;
   NodeToken n145;
   Token n146;
   NodeToken n147;
   Token n148;
   NodeToken n149;
   Token n150;
   NodeToken n151;
   Token n152;
   NodeToken n153;
   Token n154;
   NodeToken n155;
   Token n156;
   NodeToken n157;
   Token n158;
   NodeToken n159;
   Token n160;
   NodeToken n161;
   Token n162;
   NodeToken n163;
   Token n164;
   NodeToken n165;
   Token n166;
   NodeToken n167;
   Token n168;
   NodeToken n169;
   Token n170;
   NodeToken n171;
   Token n172;
   NodeSequence n173;
   NodeToken n174;
   Token n175;
   NodeToken n176;
   Token n177;
   NodeToken n178;
   Token n179;
   NodeSequence n180;
   NodeToken n181;
   Token n182;
   NodeOptional n183 = new NodeOptional();
   NodeSequence n184;
   NodeOptional n185;
   NodeToken n186;
   Token n187;
   HandleComponent n188;
   NodeOptional n189;
   ImplicitTitle n190;
   NodeSequence n191;
   NodeToken n192;
   Token n193;
   NodeOptional n194 = new NodeOptional();
   NodeToken n195;
   Token n196;
   NodeToken n197;
   Token n198;
   NodeOptional n199 = new NodeOptional();
   NodeChoice n200;
   NodeToken n201;
   Token n202;
   NodeToken n203;
   Token n204;
   NodeToken n205;
   Token n206;
   NodeToken n207;
   Token n208;
   NodeToken n209;
   Token n210;
   NodeToken n211;
   Token n212;
   NodeSequence n213;
   NodeToken n214;
   Token n215;
   NodeOptional n216 = new NodeOptional();
   NodeToken n217;
   Token n218;
   NodeToken n219;
   Token n220;
   NodeOptional n221 = new NodeOptional();
   ImplicitTitle n222;
   NodeToken n223;
   Token n224;

   
}
{
   (
      n2=<DISPLAY> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<DISPLAY_1> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<COMP> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<COMPUTATIONAL> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=<COMP_N> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12=<COMPUTATIONAL_N> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      n14=<COMP_1> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6); }
   |
      n16=<COMPUTATIONAL_1> { n15 = JTBToolkit.makeNodeToken(n16); }
      { n0 = new NodeChoice(n15, 7); }
   |
      n18=<COMP_1_REV> { n17 = JTBToolkit.makeNodeToken(n18); }
      { n0 = new NodeChoice(n17, 8); }
   |
      n20=<COMPUTATIONAL_1_REV> { n19 = JTBToolkit.makeNodeToken(n20); }
      { n0 = new NodeChoice(n19, 9); }
   |
      n22=<COMP_1_M> { n21 = JTBToolkit.makeNodeToken(n22); }
      { n0 = new NodeChoice(n21, 10); }
   |
      n24=<COMPUTATIONAL_1_M> { n23 = JTBToolkit.makeNodeToken(n24); }
      { n0 = new NodeChoice(n23, 11); }
   |
      n26=<COMP_1_MVS> { n25 = JTBToolkit.makeNodeToken(n26); }
      { n0 = new NodeChoice(n25, 12); }
   |
      n28=<COMPUTATIONAL_1_MVS> { n27 = JTBToolkit.makeNodeToken(n28); }
      { n0 = new NodeChoice(n27, 13); }
   |
      n30=<COMP_1_E> { n29 = JTBToolkit.makeNodeToken(n30); }
      { n0 = new NodeChoice(n29, 14); }
   |
      n32=<COMPUTATIONAL_1_E> { n31 = JTBToolkit.makeNodeToken(n32); }
      { n0 = new NodeChoice(n31, 15); }
   |
      n34=<COMP_2> { n33 = JTBToolkit.makeNodeToken(n34); }
      { n0 = new NodeChoice(n33, 16); }
   |
      n36=<COMPUTATIONAL_2> { n35 = JTBToolkit.makeNodeToken(n36); }
      { n0 = new NodeChoice(n35, 17); }
   |
      n38=<COMP_2_REV> { n37 = JTBToolkit.makeNodeToken(n38); }
      { n0 = new NodeChoice(n37, 18); }
   |
      n40=<COMPUTATIONAL_2_REV> { n39 = JTBToolkit.makeNodeToken(n40); }
      { n0 = new NodeChoice(n39, 19); }
   |
      n42=<COMP_2_M> { n41 = JTBToolkit.makeNodeToken(n42); }
      { n0 = new NodeChoice(n41, 20); }
   |
      n44=<COMPUTATIONAL_2_M> { n43 = JTBToolkit.makeNodeToken(n44); }
      { n0 = new NodeChoice(n43, 21); }
   |
      n46=<COMP_2_MVS> { n45 = JTBToolkit.makeNodeToken(n46); }
      { n0 = new NodeChoice(n45, 22); }
   |
      n48=<COMPUTATIONAL_2_MVS> { n47 = JTBToolkit.makeNodeToken(n48); }
      { n0 = new NodeChoice(n47, 23); }
   |
      n50=<COMP_2_E> { n49 = JTBToolkit.makeNodeToken(n50); }
      { n0 = new NodeChoice(n49, 24); }
   |
      n52=<COMPUTATIONAL_2_E> { n51 = JTBToolkit.makeNodeToken(n52); }
      { n0 = new NodeChoice(n51, 25); }
   |
      n54=<COMP_3> { n53 = JTBToolkit.makeNodeToken(n54); }
      { n0 = new NodeChoice(n53, 26); }
   |
      n56=<COMPUTATIONAL_3> { n55 = JTBToolkit.makeNodeToken(n56); }
      { n0 = new NodeChoice(n55, 27); }
   |
      n58=<COMP_4> { n57 = JTBToolkit.makeNodeToken(n58); }
      { n0 = new NodeChoice(n57, 28); }
   |
      n60=<COMPUTATIONAL_4> { n59 = JTBToolkit.makeNodeToken(n60); }
      { n0 = new NodeChoice(n59, 29); }
   |
      n62=<COMP_5> { n61 = JTBToolkit.makeNodeToken(n62); }
      { n0 = new NodeChoice(n61, 30); }
   |
      n64=<COMPUTATIONAL_5> { n63 = JTBToolkit.makeNodeToken(n64); }
      { n0 = new NodeChoice(n63, 31); }
   |
      n66=<COMP_6> { n65 = JTBToolkit.makeNodeToken(n66); }
      { n0 = new NodeChoice(n65, 32); }
   |
      n68=<COMPUTATIONAL_6> { n67 = JTBToolkit.makeNodeToken(n68); }
      { n0 = new NodeChoice(n67, 33); }
   |
      n70=<COMP_S> { n69 = JTBToolkit.makeNodeToken(n70); }
      { n0 = new NodeChoice(n69, 34); }
   |
      n72=<COMPUTATIONAL_S> { n71 = JTBToolkit.makeNodeToken(n72); }
      { n0 = new NodeChoice(n71, 35); }
   |
      n74=<COMP_1_A> { n73 = JTBToolkit.makeNodeToken(n74); }
      { n0 = new NodeChoice(n73, 36); }
   |
      n76=<COMPUTATIONAL_1_A> { n75 = JTBToolkit.makeNodeToken(n76); }
      { n0 = new NodeChoice(n75, 37); }
   |
      n78=<COMP_D> { n77 = JTBToolkit.makeNodeToken(n78); }
      { n0 = new NodeChoice(n77, 38); }
   |
      n80=<COMPUTATIONAL_D> { n79 = JTBToolkit.makeNodeToken(n80); }
      { n0 = new NodeChoice(n79, 39); }
   |
      n82=<COMP_2_A> { n81 = JTBToolkit.makeNodeToken(n82); }
      { n0 = new NodeChoice(n81, 40); }
   |
      n84=<COMPUTATIONAL_2_A> { n83 = JTBToolkit.makeNodeToken(n84); }
      { n0 = new NodeChoice(n83, 41); }
   |
      n86=<PACKED_DECIMAL> { n85 = JTBToolkit.makeNodeToken(n86); }
      { n0 = new NodeChoice(n85, 42); }
   |
      n88=<COMP_P> { n87 = JTBToolkit.makeNodeToken(n88); }
      { n0 = new NodeChoice(n87, 43); }
   |
      n90=<COMPUTATIONAL_P> { n89 = JTBToolkit.makeNodeToken(n90); }
      { n0 = new NodeChoice(n89, 44); }
   |
      n92=<PACKED_DECIMAL_A> { n91 = JTBToolkit.makeNodeToken(n92); }
      { n0 = new NodeChoice(n91, 45); }
   |
      n94=<COMP_3_A> { n93 = JTBToolkit.makeNodeToken(n94); }
      { n0 = new NodeChoice(n93, 46); }
   |
      n96=<COMPUTATIONAL_3_A> { n95 = JTBToolkit.makeNodeToken(n96); }
      { n0 = new NodeChoice(n95, 47); }
   |
      n98=<PACKED_DECIMAL_I> { n97 = JTBToolkit.makeNodeToken(n98); }
      { n0 = new NodeChoice(n97, 48); }
   |
      n100=<PACKED_DECIMAL_E> { n99 = JTBToolkit.makeNodeToken(n100); }
      { n0 = new NodeChoice(n99, 49); }
   |
      n102=<PACKED_DECIMAL_H> { n101 = JTBToolkit.makeNodeToken(n102); }
      { n0 = new NodeChoice(n101, 50); }
   |
      n104=<COMP_3_M> { n103 = JTBToolkit.makeNodeToken(n104); }
      { n0 = new NodeChoice(n103, 51); }
   |
      n106=<COMPUTATIONAL_3_M> { n105 = JTBToolkit.makeNodeToken(n106); }
      { n0 = new NodeChoice(n105, 52); }
   |
      n108=<PACKED_DECIMAL_M> { n107 = JTBToolkit.makeNodeToken(n108); }
      { n0 = new NodeChoice(n107, 53); }
   |
      n110=<BINARY> { n109 = JTBToolkit.makeNodeToken(n110); }
      { n0 = new NodeChoice(n109, 54); }
   |
      n112=<BINARY_M> { n111 = JTBToolkit.makeNodeToken(n112); }
      { n0 = new NodeChoice(n111, 55); }
   |
      n114=<COMP_M> { n113 = JTBToolkit.makeNodeToken(n114); }
      { n0 = new NodeChoice(n113, 56); }
   |
      n116=<COMPUTATIONAL_M> { n115 = JTBToolkit.makeNodeToken(n116); }
      { n0 = new NodeChoice(n115, 57); }
   |
      n118=<COMP_A> { n117 = JTBToolkit.makeNodeToken(n118); }
      { n0 = new NodeChoice(n117, 58); }
   |
      n120=<COMPUTATIONAL_A> { n119 = JTBToolkit.makeNodeToken(n120); }
      { n0 = new NodeChoice(n119, 59); }
   |
      n122=<COMP_4_M> { n121 = JTBToolkit.makeNodeToken(n122); }
      { n0 = new NodeChoice(n121, 60); }
   |
      n124=<COMPUTATIONAL_4_M> { n123 = JTBToolkit.makeNodeToken(n124); }
      { n0 = new NodeChoice(n123, 61); }
   |
      n126=<COMP_B> { n125 = JTBToolkit.makeNodeToken(n126); }
      { n0 = new NodeChoice(n125, 62); }
   |
      n128=<COMPUTATIONAL_B> { n127 = JTBToolkit.makeNodeToken(n128); }
      { n0 = new NodeChoice(n127, 63); }
   |
      n130=<BINARY_REV> { n129 = JTBToolkit.makeNodeToken(n130); }
      { n0 = new NodeChoice(n129, 64); }
   |
      n132=<SQLIND> { n131 = JTBToolkit.makeNodeToken(n132); }
      { n0 = new NodeChoice(n131, 65); }
   |
      n134=<COMP_X> { n133 = JTBToolkit.makeNodeToken(n134); }
      { n0 = new NodeChoice(n133, 66); }
   |
      n136=<COMP_X> { n135 = JTBToolkit.makeNodeToken(n136); }
      { n0 = new NodeChoice(n135, 67); }
   |
      n138=<COMPUTATIONAL_X> { n137 = JTBToolkit.makeNodeToken(n138); }
      { n0 = new NodeChoice(n137, 68); }
   |
      n140=<COMPUTATIONAL_X> { n139 = JTBToolkit.makeNodeToken(n140); }
      { n0 = new NodeChoice(n139, 69); }
   |
      n142=<COMP_5_M> { n141 = JTBToolkit.makeNodeToken(n142); }
      { n0 = new NodeChoice(n141, 70); }
   |
      n144=<COMPUTATIONAL_5_M> { n143 = JTBToolkit.makeNodeToken(n144); }
      { n0 = new NodeChoice(n143, 71); }
   |
      n146=<COMP_X_REV> { n145 = JTBToolkit.makeNodeToken(n146); }
      { n0 = new NodeChoice(n145, 72); }
   |
      n148=<COMPUTATIONAL_X_REV> { n147 = JTBToolkit.makeNodeToken(n148); }
      { n0 = new NodeChoice(n147, 73); }
   |
      n150=<DISPLAY_WS> { n149 = JTBToolkit.makeNodeToken(n150); }
      { n0 = new NodeChoice(n149, 74); }
   |
      n152=<EXTERNAL_FORM> { n151 = JTBToolkit.makeNodeToken(n152); }
      { n0 = new NodeChoice(n151, 75); }
   |
      n154=<NATIONAL> { n153 = JTBToolkit.makeNodeToken(n154); }
      { n0 = new NodeChoice(n153, 76); }
   |
      n156=<KANJI> { n155 = JTBToolkit.makeNodeToken(n156); }
      { n0 = new NodeChoice(n155, 77); }
   |
      n158=<SIGNED_SHORT> { n157 = JTBToolkit.makeNodeToken(n158); }
      { n0 = new NodeChoice(n157, 78); }
   |
      n160=<UNSIGNED_SHORT> { n159 = JTBToolkit.makeNodeToken(n160); }
      { n0 = new NodeChoice(n159, 79); }
   |
      n162=<SIGNED_INT> { n161 = JTBToolkit.makeNodeToken(n162); }
      { n0 = new NodeChoice(n161, 80); }
   |
      n164=<UNSIGNED_INT> { n163 = JTBToolkit.makeNodeToken(n164); }
      { n0 = new NodeChoice(n163, 81); }
   |
      n166=<SIGNED_LONG> { n165 = JTBToolkit.makeNodeToken(n166); }
      { n0 = new NodeChoice(n165, 82); }
   |
      n168=<UNSIGNED_LONG> { n167 = JTBToolkit.makeNodeToken(n168); }
      { n0 = new NodeChoice(n167, 83); }
   |
      n170=<FLOAT> { n169 = JTBToolkit.makeNodeToken(n170); }
      { n0 = new NodeChoice(n169, 84); }
   |
      n172=<DOUBLE> { n171 = JTBToolkit.makeNodeToken(n172); }
      { n0 = new NodeChoice(n171, 85); }
   |
      { n173 = new NodeSequence(3); }
      n175=<HANDLE> { n174 = JTBToolkit.makeNodeToken(n175); }
      { n173.addNode(n174); }
      n177=<OF> { n176 = JTBToolkit.makeNodeToken(n177); }
      { n173.addNode(n176); }
      n179=<THREAD> { n178 = JTBToolkit.makeNodeToken(n179); }
      { n173.addNode(n178); }
      { n0 = new NodeChoice(n173, 86); }
   |
      { n180 = new NodeSequence(2); }
      n182=<HANDLE> { n181 = JTBToolkit.makeNodeToken(n182); }
      { n180.addNode(n181); }
      (
         { n185 = new NodeOptional(); }
         { n189 = new NodeOptional(); }
         { n184 = new NodeSequence(3); }
         (
            n187=<OF> { n186 = JTBToolkit.makeNodeToken(n187); }
            { n185.addNode(n186); }
         )?
         { n184.addNode(n185); }
         n188=HandleComponent()
         { n184.addNode(n188); }
         (
            n190=ImplicitTitle()
            { n189.addNode(n190); }
         )?
         { n184.addNode(n189); }
         { n183.addNode(n184); }
      )?
      { n180.addNode(n183); }
      { n0 = new NodeChoice(n180, 87); }
   |
      { n191 = new NodeSequence(4); }
      n193=<HANDLE> { n192 = JTBToolkit.makeNodeToken(n193); }
      { n191.addNode(n192); }
      (
         n196=<OF> { n195 = JTBToolkit.makeNodeToken(n196); }
         { n194.addNode(n195); }
      )?
      { n191.addNode(n194); }
      n198=<FONT> { n197 = JTBToolkit.makeNodeToken(n198); }
      { n191.addNode(n197); }
      (
         (
            n202=<FIXED_FONT> { n201 = JTBToolkit.makeNodeToken(n202); }
            { n200 = new NodeChoice(n201, 0); }
         |
            n204=<TRADITIONAL_FONT> { n203 = JTBToolkit.makeNodeToken(n204); }
            { n200 = new NodeChoice(n203, 1); }
         |
            n206=<DEFAULT_FONT> { n205 = JTBToolkit.makeNodeToken(n206); }
            { n200 = new NodeChoice(n205, 2); }
         |
            n208=<SMALL_FONT> { n207 = JTBToolkit.makeNodeToken(n208); }
            { n200 = new NodeChoice(n207, 3); }
         |
            n210=<MEDIUM_FONT> { n209 = JTBToolkit.makeNodeToken(n210); }
            { n200 = new NodeChoice(n209, 4); }
         |
            n212=<LARGE_FONT> { n211 = JTBToolkit.makeNodeToken(n212); }
            { n200 = new NodeChoice(n211, 5); }
         )
         { n199.addNode(n200); }
      )?
      { n191.addNode(n199); }
      { n0 = new NodeChoice(n191, 88); }
   |
      { n213 = new NodeSequence(4); }
      n215=<HANDLE> { n214 = JTBToolkit.makeNodeToken(n215); }
      { n213.addNode(n214); }
      (
         n218=<OF> { n217 = JTBToolkit.makeNodeToken(n218); }
         { n216.addNode(n217); }
      )?
      { n213.addNode(n216); }
      n220=<WINDOW> { n219 = JTBToolkit.makeNodeToken(n220); }
      { n213.addNode(n219); }
      (
         n222=ImplicitTitle()
         { n221.addNode(n222); }
      )?
      { n213.addNode(n221); }
      { n0 = new NodeChoice(n213, 89); }
   |
      n224=<WINDOW> { n223 = JTBToolkit.makeNodeToken(n224); }
      { n0 = new NodeChoice(n223, 90); }
   )
   
   { return new MemoryUsage(n0); }
}

ExternalUsage ExternalUsage() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   NodeToken n28;
   Token n29;
   NodeToken n30;
   Token n31;
   NodeToken n32;
   Token n33;
   NodeToken n34;
   Token n35;
   NodeToken n36;
   Token n37;
   NodeToken n38;
   Token n39;
   NodeSequence n40;
   NodeToken n41;
   Token n42;
   NodeToken n43;
   Token n44;
   NodeOptional n45 = new NodeOptional();
   NodeSequence n46;
   NodeOptional n47;
   NodeToken n48;
   Token n49;
   NodeChoice n50;
   ClassName n51;
   Literal n52;
   NodeSequence n53;
   NodeChoice n54;
   NodeToken n55;
   Token n56;
   NodeToken n57;
   Token n58;
   NodeOptional n59 = new NodeOptional();
   NodeSequence n60;
   NodeOptional n61;
   NodeToken n62;
   Token n63;
   ClassName n64;

   
}
{
   (
      n2=<INDEX> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<POINTER> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<PROCEDURE_POINTER> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      { n7 = new NodeSequence(2); }
      n9=<PROCEDURE> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n7.addNode(n8); }
      n11=<POINTER> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n7.addNode(n10); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n13=<STRING> { n12 = JTBToolkit.makeNodeToken(n13); }
      { n0 = new NodeChoice(n12, 4); }
   |
      n15=<JPACKED_DECIMAL> { n14 = JTBToolkit.makeNodeToken(n15); }
      { n0 = new NodeChoice(n14, 5); }
   |
      n17=<JSTRING> { n16 = JTBToolkit.makeNodeToken(n17); }
      { n0 = new NodeChoice(n16, 6); }
   |
      n19=<JBYTE> { n18 = JTBToolkit.makeNodeToken(n19); }
      { n0 = new NodeChoice(n18, 7); }
   |
      n21=<JSHORT> { n20 = JTBToolkit.makeNodeToken(n21); }
      { n0 = new NodeChoice(n20, 8); }
   |
      n23=<JINT> { n22 = JTBToolkit.makeNodeToken(n23); }
      { n0 = new NodeChoice(n22, 9); }
   |
      n25=<JLONG> { n24 = JTBToolkit.makeNodeToken(n25); }
      { n0 = new NodeChoice(n24, 10); }
   |
      n27=<JBOOLEAN> { n26 = JTBToolkit.makeNodeToken(n27); }
      { n0 = new NodeChoice(n26, 11); }
   |
      n29=<JFLOAT> { n28 = JTBToolkit.makeNodeToken(n29); }
      { n0 = new NodeChoice(n28, 12); }
   |
      n31=<JDOUBLE> { n30 = JTBToolkit.makeNodeToken(n31); }
      { n0 = new NodeChoice(n30, 13); }
   |
      n33=<JCHAR> { n32 = JTBToolkit.makeNodeToken(n33); }
      { n0 = new NodeChoice(n32, 14); }
   |
      n35=<ALPHANUMERIC_HASHTABLE> { n34 = JTBToolkit.makeNodeToken(n35); }
      { n0 = new NodeChoice(n34, 15); }
   |
      n37=<NUMERIC_HASHTABLE> { n36 = JTBToolkit.makeNodeToken(n37); }
      { n0 = new NodeChoice(n36, 16); }
   |
      n39=<OBJECT_HASHTABLE> { n38 = JTBToolkit.makeNodeToken(n39); }
      { n0 = new NodeChoice(n38, 17); }
   |
      { n40 = new NodeSequence(3); }
      n42=<OBJECT> { n41 = JTBToolkit.makeNodeToken(n42); }
      { n40.addNode(n41); }
      n44=<REFERENCE> { n43 = JTBToolkit.makeNodeToken(n44); }
      { n40.addNode(n43); }
      (
         { n47 = new NodeOptional(); }
         { n46 = new NodeSequence(2); }
         (
            n49=<OF> { n48 = JTBToolkit.makeNodeToken(n49); }
            { n47.addNode(n48); }
         )?
         { n46.addNode(n47); }
         (
            (
               n51=ClassName()
               { n50 = new NodeChoice(n51, 0); }
            |
               n52=Literal()
               { n50 = new NodeChoice(n52, 1); }
            )
            
         )
         { n46.addNode(n50); }
         { n45.addNode(n46); }
      )?
      { n40.addNode(n45); }
      { n0 = new NodeChoice(n40, 18); }
   |
      { n53 = new NodeSequence(2); }
      (
         (
            n56=<OBJECT> { n55 = JTBToolkit.makeNodeToken(n56); }
            { n54 = new NodeChoice(n55, 0); }
         |
            n58=<COMPONENT> { n57 = JTBToolkit.makeNodeToken(n58); }
            { n54 = new NodeChoice(n57, 1); }
         )
         
      )
      { n53.addNode(n54); }
      (
         { n61 = new NodeOptional(); }
         { n60 = new NodeSequence(2); }
         (
            n63=<OF> { n62 = JTBToolkit.makeNodeToken(n63); }
            { n61.addNode(n62); }
         )?
         { n60.addNode(n61); }
         n64=ClassName()
         { n60.addNode(n64); }
         { n59.addNode(n60); }
      )?
      { n53.addNode(n59); }
      { n0 = new NodeChoice(n53, 19); }
   )
   
   { return new ExternalUsage(n0); }
}

PropertyObjectModifier PropertyObjectModifier() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;

   
}
{
   (
      n2=<CHARACTER> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<BINARY_BYTE> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<BINARY_SHORT> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<BINARY> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=<BINARY_LONG> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12=<BINARY_DOUBLE> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      n14=<FLOAT_SHORT> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6); }
   |
      n16=<FLOAT_LONG> { n15 = JTBToolkit.makeNodeToken(n16); }
      { n0 = new NodeChoice(n15, 7); }
   |
      n18=<BIT> { n17 = JTBToolkit.makeNodeToken(n18); }
      { n0 = new NodeChoice(n17, 8); }
   )
   
   { return new PropertyObjectModifier(n0); }
}

DataSignClause DataSignClause() :
{
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4;
   NodeToken n5;
   Token n6;
   NodeChoice n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeOptional n12 = new NodeOptional();
   NodeSequence n13;
   NodeToken n14;
   Token n15;
   NodeOptional n16;
   NodeToken n17;
   Token n18;

   
}
{
   (
      { n4 = new NodeOptional(); }
      { n1 = new NodeSequence(2); }
      n3=<SIGN> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      (
         n6=<IS> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4.addNode(n5); }
      )?
      { n1.addNode(n4); }
      { n0.addNode(n1); }
   )?
   (
      (
         n9=<LEADING> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7 = new NodeChoice(n8, 0); }
      |
         n11=<TRAILING> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n7 = new NodeChoice(n10, 1); }
      )
      
   )
   (
      { n16 = new NodeOptional(); }
      { n13 = new NodeSequence(2); }
      n15=<SEPARATE> { n14 = JTBToolkit.makeNodeToken(n15); }
      { n13.addNode(n14); }
      (
         n18=<CHARACTER> { n17 = JTBToolkit.makeNodeToken(n18); }
         { n16.addNode(n17); }
      )?
      { n13.addNode(n16); }
      { n12.addNode(n13); }
   )?
   
   { return new DataSignClause(n0,n7,n12); }
}

DataSynchronizedClause DataSynchronizedClause() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeChoice n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;

   
}
{
   (
      (
         n2=<SYNCHRONIZED> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<SYNC> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   (
      (
         (
            n8=<LEFT> { n7 = JTBToolkit.makeNodeToken(n8); }
            { n6 = new NodeChoice(n7, 0); }
         |
            n10=<RIGHT> { n9 = JTBToolkit.makeNodeToken(n10); }
            { n6 = new NodeChoice(n9, 1); }
         )
         
      )
      { n5.addNode(n6); }
   )?
   
   { return new DataSynchronizedClause(n0,n5); }
}

DataValueClause DataValueClause() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10 = new NodeOptional();
   NodeToken n11;
   Token n12;
   Through n13;
   NodeListOptional n14 = new NodeListOptional();
   NodeSequence n15;
   NodeOptional n16;
   NodeToken n17;
   Token n18;
   Through n19;

   
}
{
   (
      (
         { n1 = new NodeSequence(2); }
         n3=<VALUE> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         (
            n6=<IS> { n5 = JTBToolkit.makeNodeToken(n6); }
            { n4.addNode(n5); }
         )?
         { n1.addNode(n4); }
         { n0 = new NodeChoice(n1, 0); }
      |
         { n7 = new NodeSequence(2); }
         n9=<VALUES> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
         (
            n12=<ARE> { n11 = JTBToolkit.makeNodeToken(n12); }
            { n10.addNode(n11); }
         )?
         { n7.addNode(n10); }
         { n0 = new NodeChoice(n7, 1); }
      )
      
   )
   n13=Through()
   (
      { n16 = new NodeOptional(); }
      { n15 = new NodeSequence(2); }
      (
         n18=<COMMACHAR> { n17 = JTBToolkit.makeNodeToken(n18); }
         { n16.addNode(n17); }
      )?
      { n15.addNode(n16); }
      n19=Through()
      { n15.addNode(n19); }
      { n14.addNode(n15); }
   )*
   { n14.nodes.trimToSize(); }
   
   { return new DataValueClause(n0,n13,n14); }
}

Through Through() :
{
   IterableLiteral n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   IterableLiteral n8;

   
}
{
   n0=IterableLiteral()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            n5=<THROUGH> { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7=<THRU> { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         )
         
      )
      { n2.addNode(n3); }
      n8=IterableLiteral()
      { n2.addNode(n8); }
      { n1.addNode(n2); }
   )?
   
   { return new Through(n0,n1); }
}

ConditionValueClause ConditionValueClause() :
{
   DataValueClause n0;

   
}
{
   n0=DataValueClause()
   
   { return new ConditionValueClause(n0); }
}

RenamesClause RenamesClause() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeChoice n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   Identifier n10;

   
}
{
   n1=<RENAMES> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   (
      { n4 = new NodeSequence(2); }
      (
         (
            n7=<THROUGH> { n6 = JTBToolkit.makeNodeToken(n7); }
            { n5 = new NodeChoice(n6, 0); }
         |
            n9=<THRU> { n8 = JTBToolkit.makeNodeToken(n9); }
            { n5 = new NodeChoice(n8, 1); }
         )
         
      )
      { n4.addNode(n5); }
      n10=Identifier()
      { n4.addNode(n10); }
      { n3.addNode(n4); }
   )?
   
   { return new RenamesClause(n0,n2,n3); }
}

CommunicationDescriptionEntry CommunicationDescriptionEntry() :
{
   NodeChoice n0;
   CommunicationInputEntry n1;
   CommunicationOutputEntry n2;
   CommunicationIOEntry n3;
   NodeToken n4;
   Token n5;

   
}
{
   (
      (
         LOOKAHEAD(CommunicationInputEntry())
         n1=CommunicationInputEntry()
         { n0 = new NodeChoice(n1, 0); }
      |
         LOOKAHEAD(CommunicationOutputEntry())
         n2=CommunicationOutputEntry()
         { n0 = new NodeChoice(n2, 1); }
      |
         LOOKAHEAD(CommunicationIOEntry())
         n3=CommunicationIOEntry()
         { n0 = new NodeChoice(n3, 2); }
      )
      
   )
   n5=<DOT> { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new CommunicationDescriptionEntry(n0,n4); }
}

CommunicationInputEntry CommunicationInputEntry() :
{
   NodeToken n0;
   Token n1;
   CdName n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   NodeOptional n6 = new NodeOptional();
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeListOptional n11 = new NodeListOptional();
   CommunicationInputClause n12;
   NodeListOptional n13 = new NodeListOptional();
   DataName n14;

   
}
{
   n1=<CD> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=CdName()
   (
      n5=<FOR> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
   )?
   (
      n8=<INITIAL> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
   )?
   n10=<INPUT> { n9 = JTBToolkit.makeNodeToken(n10); }
   (
      n12=CommunicationInputClause()
      { n11.addNode(n12); }
   )*
   { n11.nodes.trimToSize(); }
   (
      n14=DataName()
      { n13.addNode(n14); }
   )*
   { n13.nodes.trimToSize(); }
   
   { return new CommunicationInputEntry(n0,n2,n3,n6,n9,n11,n13); }
}

CommunicationOutputEntry CommunicationOutputEntry() :
{
   NodeToken n0;
   Token n1;
   CdName n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeListOptional n8 = new NodeListOptional();
   CommunicationOutputClause n9;

   
}
{
   n1=<CD> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=CdName()
   (
      n5=<FOR> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
   )?
   n7=<OUTPUT> { n6 = JTBToolkit.makeNodeToken(n7); }
   (
      n9=CommunicationOutputClause()
      { n8.addNode(n9); }
   )*
   { n8.nodes.trimToSize(); }
   
   { return new CommunicationOutputEntry(n0,n2,n3,n6,n8); }
}

CommunicationIOEntry CommunicationIOEntry() :
{
   NodeToken n0;
   Token n1;
   CdName n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   NodeOptional n6 = new NodeOptional();
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeListOptional n11 = new NodeListOptional();
   CommunicationIOClause n12;
   NodeListOptional n13 = new NodeListOptional();
   DataName n14;

   
}
{
   n1=<CD> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=CdName()
   (
      n5=<FOR> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
   )?
   (
      n8=<INITIAL> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
   )?
   n10=<I_O> { n9 = JTBToolkit.makeNodeToken(n10); }
   (
      n12=CommunicationIOClause()
      { n11.addNode(n12); }
   )*
   { n11.nodes.trimToSize(); }
   (
      n14=DataName()
      { n13.addNode(n14); }
   )*
   { n13.nodes.trimToSize(); }
   
   { return new CommunicationIOEntry(n0,n2,n3,n6,n9,n11,n13); }
}

CommunicationInputClause CommunicationInputClause() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeChoice n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeOptional n11 = new NodeOptional();
   NodeToken n12;
   Token n13;
   DataName n14;
   NodeSequence n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeOptional n20 = new NodeOptional();
   NodeToken n21;
   Token n22;
   DataName n23;
   NodeSequence n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeOptional n29 = new NodeOptional();
   NodeToken n30;
   Token n31;
   DataName n32;
   NodeSequence n33;
   NodeToken n34;
   Token n35;
   NodeToken n36;
   Token n37;
   NodeOptional n38 = new NodeOptional();
   NodeToken n39;
   Token n40;
   DataName n41;
   NodeSequence n42;
   NodeToken n43;
   Token n44;
   NodeOptional n45 = new NodeOptional();
   NodeToken n46;
   Token n47;
   DataName n48;
   NodeSequence n49;
   NodeOptional n50 = new NodeOptional();
   NodeToken n51;
   Token n52;
   NodeChoice n53;
   NodeToken n54;
   Token n55;
   NodeToken n56;
   Token n57;
   NodeToken n58;
   Token n59;
   NodeToken n60;
   Token n61;
   NodeToken n62;
   Token n63;
   NodeOptional n64 = new NodeOptional();
   NodeToken n65;
   Token n66;
   DataName n67;

   
}
{
   (
      { n1 = new NodeSequence(4); }
      n3=<MESSAGE> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      (
         (
            n6=<DATE> { n5 = JTBToolkit.makeNodeToken(n6); }
            { n4 = new NodeChoice(n5, 0); }
         |
            n8=<TIME> { n7 = JTBToolkit.makeNodeToken(n8); }
            { n4 = new NodeChoice(n7, 1); }
         |
            n10=<COUNT> { n9 = JTBToolkit.makeNodeToken(n10); }
            { n4 = new NodeChoice(n9, 2); }
         )
         
      )
      { n1.addNode(n4); }
      (
         n13=<IS> { n12 = JTBToolkit.makeNodeToken(n13); }
         { n11.addNode(n12); }
      )?
      { n1.addNode(n11); }
      n14=DataName()
      { n1.addNode(n14); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n15 = new NodeSequence(4); }
      n17=<TEXT> { n16 = JTBToolkit.makeNodeToken(n17); }
      { n15.addNode(n16); }
      n19=<LENGTH> { n18 = JTBToolkit.makeNodeToken(n19); }
      { n15.addNode(n18); }
      (
         n22=<IS> { n21 = JTBToolkit.makeNodeToken(n22); }
         { n20.addNode(n21); }
      )?
      { n15.addNode(n20); }
      n23=DataName()
      { n15.addNode(n23); }
      { n0 = new NodeChoice(n15, 1); }
   |
      { n24 = new NodeSequence(4); }
      n26=<END> { n25 = JTBToolkit.makeNodeToken(n26); }
      { n24.addNode(n25); }
      n28=<KEY> { n27 = JTBToolkit.makeNodeToken(n28); }
      { n24.addNode(n27); }
      (
         n31=<IS> { n30 = JTBToolkit.makeNodeToken(n31); }
         { n29.addNode(n30); }
      )?
      { n24.addNode(n29); }
      n32=DataName()
      { n24.addNode(n32); }
      { n0 = new NodeChoice(n24, 2); }
   |
      { n33 = new NodeSequence(4); }
      n35=<STATUS> { n34 = JTBToolkit.makeNodeToken(n35); }
      { n33.addNode(n34); }
      n37=<KEY> { n36 = JTBToolkit.makeNodeToken(n37); }
      { n33.addNode(n36); }
      (
         n40=<IS> { n39 = JTBToolkit.makeNodeToken(n40); }
         { n38.addNode(n39); }
      )?
      { n33.addNode(n38); }
      n41=DataName()
      { n33.addNode(n41); }
      { n0 = new NodeChoice(n33, 3); }
   |
      { n42 = new NodeSequence(3); }
      n44=<COUNT> { n43 = JTBToolkit.makeNodeToken(n44); }
      { n42.addNode(n43); }
      (
         n47=<IS> { n46 = JTBToolkit.makeNodeToken(n47); }
         { n45.addNode(n46); }
      )?
      { n42.addNode(n45); }
      n48=DataName()
      { n42.addNode(n48); }
      { n0 = new NodeChoice(n42, 4); }
   |
      { n49 = new NodeSequence(4); }
      (
         n52=<SYMBOLIC> { n51 = JTBToolkit.makeNodeToken(n52); }
         { n50.addNode(n51); }
      )?
      { n49.addNode(n50); }
      (
         (
            n55=<QUEUE> { n54 = JTBToolkit.makeNodeToken(n55); }
            { n53 = new NodeChoice(n54, 0); }
         |
            n57=<SUB_QUEUE_1> { n56 = JTBToolkit.makeNodeToken(n57); }
            { n53 = new NodeChoice(n56, 1); }
         |
            n59=<SUB_QUEUE_2> { n58 = JTBToolkit.makeNodeToken(n59); }
            { n53 = new NodeChoice(n58, 2); }
         |
            n61=<SUB_QUEUE_3> { n60 = JTBToolkit.makeNodeToken(n61); }
            { n53 = new NodeChoice(n60, 3); }
         |
            n63=<SOURCE> { n62 = JTBToolkit.makeNodeToken(n63); }
            { n53 = new NodeChoice(n62, 4); }
         )
         
      )
      { n49.addNode(n53); }
      (
         n66=<IS> { n65 = JTBToolkit.makeNodeToken(n66); }
         { n64.addNode(n65); }
      )?
      { n49.addNode(n64); }
      n67=DataName()
      { n49.addNode(n67); }
      { n0 = new NodeChoice(n49, 5); }
   )
   
   { return new CommunicationInputClause(n0); }
}

CommunicationOutputClause CommunicationOutputClause() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeOptional n6 = new NodeOptional();
   NodeToken n7;
   Token n8;
   DataName n9;
   NodeSequence n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeOptional n15 = new NodeOptional();
   NodeToken n16;
   Token n17;
   DataName n18;
   NodeSequence n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   NodeOptional n24 = new NodeOptional();
   NodeToken n25;
   Token n26;
   DataName n27;
   NodeSequence n28;
   NodeOptional n29 = new NodeOptional();
   NodeToken n30;
   Token n31;
   NodeToken n32;
   Token n33;
   NodeOptional n34 = new NodeOptional();
   NodeToken n35;
   Token n36;
   DataName n37;
   NodeSequence n38;
   NodeToken n39;
   Token n40;
   NodeToken n41;
   Token n42;
   NodeToken n43;
   Token n44;
   IntegerConstant n45;
   NodeOptional n46 = new NodeOptional();
   NodeToken n47;
   Token n48;
   NodeOptional n49 = new NodeOptional();
   NodeSequence n50;
   NodeToken n51;
   Token n52;
   NodeOptional n53;
   NodeToken n54;
   Token n55;
   NodeList n56;
   IndexName n57;
   NodeSequence n58;
   NodeToken n59;
   Token n60;
   NodeToken n61;
   Token n62;
   NodeOptional n63 = new NodeOptional();
   NodeToken n64;
   Token n65;
   DataName n66;

   
}
{
   (
      { n1 = new NodeSequence(4); }
      n3=<DESTINATION> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n5=<COUNT> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n1.addNode(n4); }
      (
         n8=<IS> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6.addNode(n7); }
      )?
      { n1.addNode(n6); }
      n9=DataName()
      { n1.addNode(n9); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n10 = new NodeSequence(4); }
      n12=<TEXT> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n10.addNode(n11); }
      n14=<LENGTH> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n10.addNode(n13); }
      (
         n17=<IS> { n16 = JTBToolkit.makeNodeToken(n17); }
         { n15.addNode(n16); }
      )?
      { n10.addNode(n15); }
      n18=DataName()
      { n10.addNode(n18); }
      { n0 = new NodeChoice(n10, 1); }
   |
      { n19 = new NodeSequence(4); }
      n21=<STATUS> { n20 = JTBToolkit.makeNodeToken(n21); }
      { n19.addNode(n20); }
      n23=<KEY> { n22 = JTBToolkit.makeNodeToken(n23); }
      { n19.addNode(n22); }
      (
         n26=<IS> { n25 = JTBToolkit.makeNodeToken(n26); }
         { n24.addNode(n25); }
      )?
      { n19.addNode(n24); }
      n27=DataName()
      { n19.addNode(n27); }
      { n0 = new NodeChoice(n19, 2); }
   |
      LOOKAHEAD([ <SYMBOLIC> ] <DESTINATION> [ <IS> ] DataName())
      { n28 = new NodeSequence(5); }
      (
         n31=<SYMBOLIC> { n30 = JTBToolkit.makeNodeToken(n31); }
         { n29.addNode(n30); }
      )?
      { n28.addNode(n29); }
      n33=<DESTINATION> { n32 = JTBToolkit.makeNodeToken(n33); }
      { n28.addNode(n32); }
      (
         n36=<IS> { n35 = JTBToolkit.makeNodeToken(n36); }
         { n34.addNode(n35); }
      )?
      { n28.addNode(n34); }
      n37=DataName()
      { n28.addNode(n37); }
      { n0 = new NodeChoice(n28, 3); }
   |
      { n38 = new NodeSequence(6); }
      n40=<DESTINATION> { n39 = JTBToolkit.makeNodeToken(n40); }
      { n38.addNode(n39); }
      n42=<TABLE> { n41 = JTBToolkit.makeNodeToken(n42); }
      { n38.addNode(n41); }
      n44=<OCCURS> { n43 = JTBToolkit.makeNodeToken(n44); }
      { n38.addNode(n43); }
      n45=IntegerConstant()
      { n38.addNode(n45); }
      (
         n48=<TIMES> { n47 = JTBToolkit.makeNodeToken(n48); }
         { n46.addNode(n47); }
      )?
      { n38.addNode(n46); }
      (
         { n53 = new NodeOptional(); }
         { n56 = new NodeList(); }
         { n50 = new NodeSequence(3); }
         n52=<INDEXED> { n51 = JTBToolkit.makeNodeToken(n52); }
         { n50.addNode(n51); }
         (
            n55=<BY> { n54 = JTBToolkit.makeNodeToken(n55); }
            { n53.addNode(n54); }
         )?
         { n50.addNode(n53); }
         (
            n57=IndexName()
            { n56.addNode(n57); }
         )+
         { n56.nodes.trimToSize(); }
         { n50.addNode(n56); }
         { n49.addNode(n50); }
      )?
      { n38.addNode(n49); }
      { n0 = new NodeChoice(n38, 4); }
   |
      { n58 = new NodeSequence(4); }
      n60=<ERROR> { n59 = JTBToolkit.makeNodeToken(n60); }
      { n58.addNode(n59); }
      n62=<KEY> { n61 = JTBToolkit.makeNodeToken(n62); }
      { n58.addNode(n61); }
      (
         n65=<IS> { n64 = JTBToolkit.makeNodeToken(n65); }
         { n63.addNode(n64); }
      )?
      { n58.addNode(n63); }
      n66=DataName()
      { n58.addNode(n66); }
      { n0 = new NodeChoice(n58, 5); }
   )
   
   { return new CommunicationOutputClause(n0); }
}

CommunicationIOClause CommunicationIOClause() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeChoice n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeOptional n9 = new NodeOptional();
   NodeToken n10;
   Token n11;
   DataName n12;
   NodeSequence n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeOptional n18 = new NodeOptional();
   NodeToken n19;
   Token n20;
   DataName n21;
   NodeSequence n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeOptional n27 = new NodeOptional();
   NodeToken n28;
   Token n29;
   DataName n30;
   NodeSequence n31;
   NodeToken n32;
   Token n33;
   NodeToken n34;
   Token n35;
   NodeOptional n36 = new NodeOptional();
   NodeToken n37;
   Token n38;
   DataName n39;
   NodeSequence n40;
   NodeOptional n41 = new NodeOptional();
   NodeToken n42;
   Token n43;
   NodeToken n44;
   Token n45;
   NodeOptional n46 = new NodeOptional();
   NodeToken n47;
   Token n48;
   DataName n49;

   
}
{
   (
      { n1 = new NodeSequence(4); }
      n3=<MESSAGE> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      (
         (
            n6=<DATE> { n5 = JTBToolkit.makeNodeToken(n6); }
            { n4 = new NodeChoice(n5, 0); }
         |
            n8=<TIME> { n7 = JTBToolkit.makeNodeToken(n8); }
            { n4 = new NodeChoice(n7, 1); }
         )
         
      )
      { n1.addNode(n4); }
      (
         n11=<IS> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n9.addNode(n10); }
      )?
      { n1.addNode(n9); }
      n12=DataName()
      { n1.addNode(n12); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n13 = new NodeSequence(4); }
      n15=<TEXT> { n14 = JTBToolkit.makeNodeToken(n15); }
      { n13.addNode(n14); }
      n17=<LENGTH> { n16 = JTBToolkit.makeNodeToken(n17); }
      { n13.addNode(n16); }
      (
         n20=<IS> { n19 = JTBToolkit.makeNodeToken(n20); }
         { n18.addNode(n19); }
      )?
      { n13.addNode(n18); }
      n21=DataName()
      { n13.addNode(n21); }
      { n0 = new NodeChoice(n13, 1); }
   |
      { n22 = new NodeSequence(4); }
      n24=<END> { n23 = JTBToolkit.makeNodeToken(n24); }
      { n22.addNode(n23); }
      n26=<KEY> { n25 = JTBToolkit.makeNodeToken(n26); }
      { n22.addNode(n25); }
      (
         n29=<IS> { n28 = JTBToolkit.makeNodeToken(n29); }
         { n27.addNode(n28); }
      )?
      { n22.addNode(n27); }
      n30=DataName()
      { n22.addNode(n30); }
      { n0 = new NodeChoice(n22, 2); }
   |
      { n31 = new NodeSequence(4); }
      n33=<STATUS> { n32 = JTBToolkit.makeNodeToken(n33); }
      { n31.addNode(n32); }
      n35=<KEY> { n34 = JTBToolkit.makeNodeToken(n35); }
      { n31.addNode(n34); }
      (
         n38=<IS> { n37 = JTBToolkit.makeNodeToken(n38); }
         { n36.addNode(n37); }
      )?
      { n31.addNode(n36); }
      n39=DataName()
      { n31.addNode(n39); }
      { n0 = new NodeChoice(n31, 3); }
   |
      { n40 = new NodeSequence(4); }
      (
         n43=<SYMBOLIC> { n42 = JTBToolkit.makeNodeToken(n43); }
         { n41.addNode(n42); }
      )?
      { n40.addNode(n41); }
      n45=<TERMINAL> { n44 = JTBToolkit.makeNodeToken(n45); }
      { n40.addNode(n44); }
      (
         n48=<IS> { n47 = JTBToolkit.makeNodeToken(n48); }
         { n46.addNode(n47); }
      )?
      { n40.addNode(n46); }
      n49=DataName()
      { n40.addNode(n49); }
      { n0 = new NodeChoice(n40, 4); }
   )
   
   { return new CommunicationIOClause(n0); }
}

WorkingStorageSection WorkingStorageSection() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeListOptional n6 = new NodeListOptional();
   DataDescriptionEntry n7;

   
}
{
   n1=<WORKING_STORAGE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<SECTION> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<DOT> { n4 = JTBToolkit.makeNodeToken(n5); }
   (
      n7=DataDescriptionEntry()
      { n6.addNode(n7); }
   )*
   { n6.nodes.trimToSize(); }
   
   { return new WorkingStorageSection(n0,n2,n4,n6); }
}

LinkageSectionEntry LinkageSectionEntry() :
{
   NodeListOptional n0 = new NodeListOptional();
   DataDescriptionEntry n1;

   
}
{
   (
      n1=DataDescriptionEntry()
      { n0.addNode(n1); }
   )*
   { n0.nodes.trimToSize(); }
   
   { return new LinkageSectionEntry(n0); }
}

LinkageSection LinkageSection() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   LinkageSectionEntry n6;

   
}
{
   n1=<LINKAGE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<SECTION> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<DOT> { n4 = JTBToolkit.makeNodeToken(n5); }
   n6=LinkageSectionEntry()
   
   { return new LinkageSection(n0,n2,n4,n6); }
}

CommunicationSection CommunicationSection() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeListOptional n6 = new NodeListOptional();
   NodeSequence n7;
   CommunicationDescriptionEntry n8;
   NodeListOptional n9;
   DataDescriptionEntry n10;

   
}
{
   n1=<COMMUNICATION> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<SECTION> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<DOT> { n4 = JTBToolkit.makeNodeToken(n5); }
   (
      { n9 = new NodeListOptional(); }
      { n7 = new NodeSequence(2); }
      n8=CommunicationDescriptionEntry()
      { n7.addNode(n8); }
      (
         n10=DataDescriptionEntry()
         { n9.addNode(n10); }
      )*
      { n9.nodes.trimToSize(); }
      { n7.addNode(n9); }
      { n6.addNode(n7); }
   )*
   { n6.nodes.trimToSize(); }
   
   { return new CommunicationSection(n0,n2,n4,n6); }
}

ProcedureDivision ProcedureDivision() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   ConventionName n5;
   NodeOptional n6 = new NodeOptional();
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   NodeList n10;
   DataName n11;
   NodeToken n12;
   Token n13;
   NodeOptional n14 = new NodeOptional();
   Declaratives n15;
   ProcedureBody n16;

   
}
{
   n1=<PROCEDURE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<DIVISION> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n5=ConventionName()
      { n4.addNode(n5); }
   )?
   (
      { n10 = new NodeList(); }
      { n7 = new NodeSequence(2); }
      n9=<USING> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n7.addNode(n8); }
      (
         n11=DataName()
         { n10.addNode(n11); }
      )+
      { n10.nodes.trimToSize(); }
      { n7.addNode(n10); }
      { n6.addNode(n7); }
   )?
   n13=<DOT> { n12 = JTBToolkit.makeNodeToken(n13); }
   (
      n15=Declaratives()
      { n14.addNode(n15); }
   )?
   n16=ProcedureBody()
   
   { return new ProcedureDivision(n0,n2,n4,n6,n12,n14,n16); }
}

Declaratives Declaratives() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeList n4 = new NodeList();
   NodeSequence n5;
   SectionHeader n6;
   NodeToken n7;
   Token n8;
   UseStatement n9;
   NodeToken n10;
   Token n11;
   Paragraphs n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;

   
}
{
   n1=<DECLARATIVES> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<DOT> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      { n5 = new NodeSequence(5); }
      n6=SectionHeader()
      { n5.addNode(n6); }
      n8=<DOT> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n5.addNode(n7); }
      n9=UseStatement()
      { n5.addNode(n9); }
      n11=<DOT> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n5.addNode(n10); }
      n12=Paragraphs()
      { n5.addNode(n12); }
      { n4.addNode(n5); }
   )+
   { n4.nodes.trimToSize(); }
   n14=<END> { n13 = JTBToolkit.makeNodeToken(n14); }
   n16=<DECLARATIVES> { n15 = JTBToolkit.makeNodeToken(n16); }
   n18=<DOT> { n17 = JTBToolkit.makeNodeToken(n18); }
   
   { return new Declaratives(n0,n2,n4,n13,n15,n17); }
}

ProcedureBody ProcedureBody() :
{
   Paragraphs n0;
   NodeListOptional n1 = new NodeListOptional();
   ProcedureSection n2;

   
}
{
   n0=Paragraphs()
   (
      n2=ProcedureSection()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ProcedureBody(n0,n1); }
}

ProcedureSection ProcedureSection() :
{
   SectionHeader n0;
   NodeToken n1;
   Token n2;
   Paragraphs n3;

   
}
{
   n0=SectionHeader()
   n2=<DOT> { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Paragraphs()
   
   { return new ProcedureSection(n0,n1,n3); }
}

SectionHeader SectionHeader() :
{
   SectionName n0;
   NodeToken n1;
   Token n2;
   NodeOptional n3 = new NodeOptional();
   IntegerConstant n4;

   
}
{
   n0=SectionName()
   n2=<SECTION> { n1 = JTBToolkit.makeNodeToken(n2); }
   (
      n4=IntegerConstant()
      { n3.addNode(n4); }
   )?
   
   { return new SectionHeader(n0,n1,n3); }
}

Paragraphs Paragraphs() :
{
   NodeListOptional n0 = new NodeListOptional();
   Sentence n1;
   NodeListOptional n2 = new NodeListOptional();
   Paragraph n3;

   
}
{
   (
      n1=Sentence()
      { n0.addNode(n1); }
   )*
   { n0.nodes.trimToSize(); }
   (
      n3=Paragraph()
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   
   { return new Paragraphs(n0,n2); }
}

Paragraph Paragraph() :
{
   ParagraphName n0;
   NodeToken n1;
   Token n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeChoice n4;
   ExitStatement n5;
   AlteredGoto n6;
   Sentence n7;

   
}
{
   n0=ParagraphName()
   n2=<DOT> { n1 = JTBToolkit.makeNodeToken(n2); }
   (
      (
         n5=ExitStatement()
         { n4 = new NodeChoice(n5, 0); }
      |
         n6=AlteredGoto()
         { n4 = new NodeChoice(n6, 1); }
      |
         n7=Sentence()
         { n4 = new NodeChoice(n7, 2); }
      )
      { n3.addNode(n4); }
   )*
   { n3.nodes.trimToSize(); }
   
   { return new Paragraph(n0,n1,n3); }
}

Sentence Sentence() :
{
   StatementList n0;
   NodeToken n1;
   Token n2;

   
}
{
   n0=StatementList()
   n2=<DOT> { n1 = JTBToolkit.makeNodeToken(n2); }
   
   { return new Sentence(n0,n1); }
}

StatementList StatementList() :
{
   NodeList n0 = new NodeList();
   Statement n1;

   
}
{
   (
      n1=Statement()
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   
   { return new StatementList(n0); }
}

Statement Statement() :
{
   NodeChoice n0;
   AcceptStatement n1;
   AddStatement n2;
   AlterStatement n3;
   CallStatement n4;
   CancelStatement n5;
   CloseStatement n6;
   ComputeStatement n7;
   ContinueStatement n8;
   DeleteStatement n9;
   DisplayStatement n10;
   DivideStatement n11;
   EntryStatement n12;
   EvaluateStatement n13;
   ExecStatement n14;
   ExitProgramStatement n15;
   GobackStatement n16;
   GotoStatement n17;
   IfStatement n18;
   InitializeStatement n19;
   InspectStatement n20;
   MergeStatement n21;
   MoveStatement n22;
   MultiplyStatement n23;
   OpenStatement n24;
   PerformStatement n25;
   ReadStatement n26;
   ReleaseStatement n27;
   ReturnStatement n28;
   RewriteStatement n29;
   SearchStatement n30;
   SetStatement n31;
   SortStatement n32;
   StartStatement n33;
   StopStatement n34;
   StringStatement n35;
   SubtractStatement n36;
   UnstringStatement n37;
   WriteStatement n38;
   ServiceStatement n39;

   
}
{
   (
      (
         n1=AcceptStatement()
         { n0 = new NodeChoice(n1, 0); }
      |
         n2=AddStatement()
         { n0 = new NodeChoice(n2, 1); }
      |
         n3=AlterStatement()
         { n0 = new NodeChoice(n3, 2); }
      |
         n4=CallStatement()
         { n0 = new NodeChoice(n4, 3); }
      |
         n5=CancelStatement()
         { n0 = new NodeChoice(n5, 4); }
      |
         n6=CloseStatement()
         { n0 = new NodeChoice(n6, 5); }
      |
         n7=ComputeStatement()
         { n0 = new NodeChoice(n7, 6); }
      |
         n8=ContinueStatement()
         { n0 = new NodeChoice(n8, 7); }
      |
         n9=DeleteStatement()
         { n0 = new NodeChoice(n9, 8); }
      |
         n10=DisplayStatement()
         { n0 = new NodeChoice(n10, 9); }
      |
         n11=DivideStatement()
         { n0 = new NodeChoice(n11, 10); }
      |
         n12=EntryStatement()
         { n0 = new NodeChoice(n12, 11); }
      |
         n13=EvaluateStatement()
         { n0 = new NodeChoice(n13, 12); }
      |
         n14=ExecStatement()
         { n0 = new NodeChoice(n14, 13); }
      |
         n15=ExitProgramStatement()
         { n0 = new NodeChoice(n15, 14); }
      |
         n16=GobackStatement()
         { n0 = new NodeChoice(n16, 15); }
      |
         n17=GotoStatement()
         { n0 = new NodeChoice(n17, 16); }
      |
         n18=IfStatement()
         { n0 = new NodeChoice(n18, 17); }
      |
         n19=InitializeStatement()
         { n0 = new NodeChoice(n19, 18); }
      |
         n20=InspectStatement()
         { n0 = new NodeChoice(n20, 19); }
      |
         n21=MergeStatement()
         { n0 = new NodeChoice(n21, 20); }
      |
         n22=MoveStatement()
         { n0 = new NodeChoice(n22, 21); }
      |
         n23=MultiplyStatement()
         { n0 = new NodeChoice(n23, 22); }
      |
         n24=OpenStatement()
         { n0 = new NodeChoice(n24, 23); }
      |
         n25=PerformStatement()
         { n0 = new NodeChoice(n25, 24); }
      |
         n26=ReadStatement()
         { n0 = new NodeChoice(n26, 25); }
      |
         n27=ReleaseStatement()
         { n0 = new NodeChoice(n27, 26); }
      |
         n28=ReturnStatement()
         { n0 = new NodeChoice(n28, 27); }
      |
         n29=RewriteStatement()
         { n0 = new NodeChoice(n29, 28); }
      |
         n30=SearchStatement()
         { n0 = new NodeChoice(n30, 29); }
      |
         n31=SetStatement()
         { n0 = new NodeChoice(n31, 30); }
      |
         n32=SortStatement()
         { n0 = new NodeChoice(n32, 31); }
      |
         n33=StartStatement()
         { n0 = new NodeChoice(n33, 32); }
      |
         n34=StopStatement()
         { n0 = new NodeChoice(n34, 33); }
      |
         n35=StringStatement()
         { n0 = new NodeChoice(n35, 34); }
      |
         n36=SubtractStatement()
         { n0 = new NodeChoice(n36, 35); }
      |
         n37=UnstringStatement()
         { n0 = new NodeChoice(n37, 36); }
      |
         n38=WriteStatement()
         { n0 = new NodeChoice(n38, 37); }
      |
         n39=ServiceStatement()
         { n0 = new NodeChoice(n39, 38); }
      )
      
   )
   
   { return new Statement(n0); }
}

AcceptStatement AcceptStatement() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   Identifier n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeChoice n12;
   MnemonicName n13;
   EnvironmentName n14;
   NodeSequence n15;
   NodeToken n16;
   Token n17;
   NodeOptional n18;
   NodeToken n19;
   Token n20;
   NodeSequence n21;
   NodeToken n22;
   Token n23;
   NodeOptional n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;

   
}
{
   n1=<ACCEPT> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n4=<REPLY> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n2 = new NodeChoice(n3, 0); }
      |
         n6=<OMITTED> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n2 = new NodeChoice(n5, 1); }
      |
         n7=Identifier()
         { n2 = new NodeChoice(n7, 2); }
      )
      
   )
   (
      { n18 = new NodeOptional(); }
      { n24 = new NodeOptional(); }
      { n9 = new NodeSequence(2); }
      n11=<FROM> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      (
         (
            n13=MnemonicName()
            { n12 = new NodeChoice(n13, 0); }
         |
            n14=EnvironmentName()
            { n12 = new NodeChoice(n14, 1); }
         |
            { n15 = new NodeSequence(2); }
            n17=<DATE> { n16 = JTBToolkit.makeNodeToken(n17); }
            { n15.addNode(n16); }
            (
               n20=<YYYYMMDD> { n19 = JTBToolkit.makeNodeToken(n20); }
               { n18.addNode(n19); }
            )?
            { n15.addNode(n18); }
            { n12 = new NodeChoice(n15, 2); }
         |
            { n21 = new NodeSequence(2); }
            n23=<DAY> { n22 = JTBToolkit.makeNodeToken(n23); }
            { n21.addNode(n22); }
            (
               n26=<YYYYDDD> { n25 = JTBToolkit.makeNodeToken(n26); }
               { n24.addNode(n25); }
            )?
            { n21.addNode(n24); }
            { n12 = new NodeChoice(n21, 3); }
         |
            n28=<DAY_OF_WEEK> { n27 = JTBToolkit.makeNodeToken(n28); }
            { n12 = new NodeChoice(n27, 4); }
         |
            n30=<TIME> { n29 = JTBToolkit.makeNodeToken(n30); }
            { n12 = new NodeChoice(n29, 5); }
         )
         
      )
      { n9.addNode(n12); }
      { n8.addNode(n9); }
   )?
   
   { return new AcceptStatement(n0,n2,n8); }
}

AddStatement AddStatement() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeSequence n3;
   NodeChoice n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   Identifier n9;
   NodeToken n10;
   Token n11;
   Identifier n12;
   NodeOptional n13 = new NodeOptional();
   NodeToken n14;
   Token n15;
   NodeSequence n16;
   NodeChoice n17;
   Identifier n18;
   Literal n19;
   NodeListOptional n20 = new NodeListOptional();
   NodeSequence n21;
   NodeOptional n22;
   NodeToken n23;
   Token n24;
   NodeChoice n25;
   Identifier n26;
   Literal n27;
   NodeOptional n28 = new NodeOptional();
   NodeSequence n29;
   NodeToken n30;
   Token n31;
   NodeList n32;
   NodeSequence n33;
   Identifier n34;
   NodeOptional n35;
   NodeToken n36;
   Token n37;
   NodeOptional n38 = new NodeOptional();
   NodeSequence n39;
   NodeToken n40;
   Token n41;
   NodeList n42;
   NodeSequence n43;
   Identifier n44;
   NodeOptional n45;
   NodeToken n46;
   Token n47;
   NodeOptional n48 = new NodeOptional();
   NodeSequence n49;
   NodeOptional n50;
   NodeToken n51;
   Token n52;
   NodeToken n53;
   Token n54;
   NodeToken n55;
   Token n56;
   StatementList n57;
   NodeOptional n58 = new NodeOptional();
   NodeSequence n59;
   NodeToken n60;
   Token n61;
   NodeOptional n62;
   NodeToken n63;
   Token n64;
   NodeToken n65;
   Token n66;
   NodeToken n67;
   Token n68;
   StatementList n69;
   NodeOptional n70 = new NodeOptional();
   NodeToken n71;
   Token n72;

   
}
{
   n1=<ADD> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         { n3 = new NodeSequence(5); }
         (
            (
               n6=<CORRESPONDING> { n5 = JTBToolkit.makeNodeToken(n6); }
               { n4 = new NodeChoice(n5, 0); }
            |
               n8=<CORR> { n7 = JTBToolkit.makeNodeToken(n8); }
               { n4 = new NodeChoice(n7, 1); }
            )
            
         )
         { n3.addNode(n4); }
         n9=Identifier()
         { n3.addNode(n9); }
         n11=<TO> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n3.addNode(n10); }
         n12=Identifier()
         { n3.addNode(n12); }
         (
            n15=<ROUNDED> { n14 = JTBToolkit.makeNodeToken(n15); }
            { n13.addNode(n14); }
         )?
         { n3.addNode(n13); }
         { n2 = new NodeChoice(n3, 0); }
      |
         { n16 = new NodeSequence(4); }
         (
            (
               n18=Identifier()
               { n17 = new NodeChoice(n18, 0); }
            |
               n19=Literal()
               { n17 = new NodeChoice(n19, 1); }
            )
            
         )
         { n16.addNode(n17); }
         (
            { n22 = new NodeOptional(); }
            { n21 = new NodeSequence(2); }
            (
               n24=<COMMACHAR> { n23 = JTBToolkit.makeNodeToken(n24); }
               { n22.addNode(n23); }
            )?
            { n21.addNode(n22); }
            (
               (
                  n26=Identifier()
                  { n25 = new NodeChoice(n26, 0); }
               |
                  n27=Literal()
                  { n25 = new NodeChoice(n27, 1); }
               )
               
            )
            { n21.addNode(n25); }
            { n20.addNode(n21); }
         )*
         { n20.nodes.trimToSize(); }
         { n16.addNode(n20); }
         (
            { n32 = new NodeList(); }
            { n29 = new NodeSequence(2); }
            n31=<TO> { n30 = JTBToolkit.makeNodeToken(n31); }
            { n29.addNode(n30); }
            (
               { n35 = new NodeOptional(); }
               { n33 = new NodeSequence(2); }
               n34=Identifier()
               { n33.addNode(n34); }
               (
                  n37=<ROUNDED> { n36 = JTBToolkit.makeNodeToken(n37); }
                  { n35.addNode(n36); }
               )?
               { n33.addNode(n35); }
               { n32.addNode(n33); }
            )+
            { n32.nodes.trimToSize(); }
            { n29.addNode(n32); }
            { n28.addNode(n29); }
         )?
         { n16.addNode(n28); }
         (
            { n42 = new NodeList(); }
            { n39 = new NodeSequence(2); }
            n41=<GIVING> { n40 = JTBToolkit.makeNodeToken(n41); }
            { n39.addNode(n40); }
            (
               { n45 = new NodeOptional(); }
               { n43 = new NodeSequence(2); }
               n44=Identifier()
               { n43.addNode(n44); }
               (
                  n47=<ROUNDED> { n46 = JTBToolkit.makeNodeToken(n47); }
                  { n45.addNode(n46); }
               )?
               { n43.addNode(n45); }
               { n42.addNode(n43); }
            )+
            { n42.nodes.trimToSize(); }
            { n39.addNode(n42); }
            { n38.addNode(n39); }
         )?
         { n16.addNode(n38); }
         { n2 = new NodeChoice(n16, 1); }
      )
      
   )
   (
      { n50 = new NodeOptional(); }
      { n49 = new NodeSequence(4); }
      (
         n52=<ON> { n51 = JTBToolkit.makeNodeToken(n52); }
         { n50.addNode(n51); }
      )?
      { n49.addNode(n50); }
      n54=<SIZE> { n53 = JTBToolkit.makeNodeToken(n54); }
      { n49.addNode(n53); }
      n56=<ERROR> { n55 = JTBToolkit.makeNodeToken(n56); }
      { n49.addNode(n55); }
      n57=StatementList()
      { n49.addNode(n57); }
      { n48.addNode(n49); }
   )?
   (
      { n62 = new NodeOptional(); }
      { n59 = new NodeSequence(5); }
      n61=<NOT> { n60 = JTBToolkit.makeNodeToken(n61); }
      { n59.addNode(n60); }
      (
         n64=<ON> { n63 = JTBToolkit.makeNodeToken(n64); }
         { n62.addNode(n63); }
      )?
      { n59.addNode(n62); }
      n66=<SIZE> { n65 = JTBToolkit.makeNodeToken(n66); }
      { n59.addNode(n65); }
      n68=<ERROR> { n67 = JTBToolkit.makeNodeToken(n68); }
      { n59.addNode(n67); }
      n69=StatementList()
      { n59.addNode(n69); }
      { n58.addNode(n59); }
   )?
   (
      n72=<END_ADD> { n71 = JTBToolkit.makeNodeToken(n72); }
      { n70.addNode(n71); }
   )?
   
   { return new AddStatement(n0,n2,n48,n58,n70); }
}

AlteredGoto AlteredGoto() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1=<GO> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<TO> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n6=<DOT> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new AlteredGoto(n0,n2,n5); }
}

AlterStatement AlterStatement() :
{
   NodeToken n0;
   Token n1;
   NodeList n2 = new NodeList();
   NodeSequence n3;
   ProcedureName n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7;
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   ProcedureName n13;

   
}
{
   n1=<ALTER> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n7 = new NodeOptional(); }
      { n3 = new NodeSequence(4); }
      n4=ProcedureName()
      { n3.addNode(n4); }
      n6=<TO> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n3.addNode(n5); }
      (
         { n8 = new NodeSequence(2); }
         n10=<PROCEED> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n8.addNode(n9); }
         n12=<TO> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n8.addNode(n11); }
         { n7.addNode(n8); }
      )?
      { n3.addNode(n7); }
      n13=ProcedureName()
      { n3.addNode(n13); }
      { n2.addNode(n3); }
   )+
   { n2.nodes.trimToSize(); }
   
   { return new AlterStatement(n0,n2); }
}

CallByContent CallByContent() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeChoice n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   Identifier n11;
   NodeSequence n12;
   NodeOptional n13 = new NodeOptional();
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   Identifier n19;
   Literal n20;
   NodeToken n21;
   Token n22;
   NodeListOptional n23 = new NodeListOptional();
   NodeSequence n24;
   NodeOptional n25;
   NodeToken n26;
   Token n27;
   NodeChoice n28;
   NodeSequence n29;
   NodeToken n30;
   Token n31;
   NodeToken n32;
   Token n33;
   Identifier n34;
   NodeSequence n35;
   NodeOptional n36;
   NodeSequence n37;
   NodeToken n38;
   Token n39;
   NodeToken n40;
   Token n41;
   Identifier n42;
   Literal n43;
   NodeToken n44;
   Token n45;

   
}
{
   (
      n2=<BY> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n4=<CONTENT> { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      (
         { n6 = new NodeSequence(3); }
         n8=<ADDRESS> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6.addNode(n7); }
         n10=<OF> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n6.addNode(n9); }
         n11=Identifier()
         { n6.addNode(n11); }
         { n5 = new NodeChoice(n6, 0); }
      |
         { n12 = new NodeSequence(2); }
         (
            { n14 = new NodeSequence(2); }
            n16=<LENGTH> { n15 = JTBToolkit.makeNodeToken(n16); }
            { n14.addNode(n15); }
            n18=<OF> { n17 = JTBToolkit.makeNodeToken(n18); }
            { n14.addNode(n17); }
            { n13.addNode(n14); }
         )?
         { n12.addNode(n13); }
         n19=Identifier()
         { n12.addNode(n19); }
         { n5 = new NodeChoice(n12, 1); }
      |
         n20=Literal()
         { n5 = new NodeChoice(n20, 2); }
      |
         n22=<OMITTED> { n21 = JTBToolkit.makeNodeToken(n22); }
         { n5 = new NodeChoice(n21, 3); }
      )
      
   )
   (
      { n25 = new NodeOptional(); }
      { n36 = new NodeOptional(); }
      { n24 = new NodeSequence(2); }
      (
         n27=<COMMACHAR> { n26 = JTBToolkit.makeNodeToken(n27); }
         { n25.addNode(n26); }
      )?
      { n24.addNode(n25); }
      (
         (
            { n29 = new NodeSequence(3); }
            n31=<ADDRESS> { n30 = JTBToolkit.makeNodeToken(n31); }
            { n29.addNode(n30); }
            n33=<OF> { n32 = JTBToolkit.makeNodeToken(n33); }
            { n29.addNode(n32); }
            n34=Identifier()
            { n29.addNode(n34); }
            { n28 = new NodeChoice(n29, 0); }
         |
            { n35 = new NodeSequence(2); }
            (
               { n37 = new NodeSequence(2); }
               n39=<LENGTH> { n38 = JTBToolkit.makeNodeToken(n39); }
               { n37.addNode(n38); }
               n41=<OF> { n40 = JTBToolkit.makeNodeToken(n41); }
               { n37.addNode(n40); }
               { n36.addNode(n37); }
            )?
            { n35.addNode(n36); }
            n42=Identifier()
            { n35.addNode(n42); }
            { n28 = new NodeChoice(n35, 1); }
         |
            n43=Literal()
            { n28 = new NodeChoice(n43, 2); }
         |
            n45=<OMITTED> { n44 = JTBToolkit.makeNodeToken(n45); }
            { n28 = new NodeChoice(n44, 3); }
         )
         
      )
      { n24.addNode(n28); }
      { n23.addNode(n24); }
   )*
   { n23.nodes.trimToSize(); }
   
   { return new CallByContent(n0,n3,n5,n23); }
}

CallByReference CallByReference() :
{
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   NodeOptional n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeChoice n7;
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   Identifier n13;
   Identifier n14;
   FileName n15;
   NodeToken n16;
   Token n17;
   NodeListOptional n18 = new NodeListOptional();
   NodeSequence n19;
   NodeOptional n20;
   NodeToken n21;
   Token n22;
   NodeChoice n23;
   NodeSequence n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   Identifier n29;
   Identifier n30;
   FileName n31;
   NodeToken n32;
   Token n33;

   
}
{
   (
      { n2 = new NodeOptional(); }
      { n1 = new NodeSequence(2); }
      (
         n4=<BY> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n2.addNode(n3); }
      )?
      { n1.addNode(n2); }
      n6=<REFERENCE> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n1.addNode(n5); }
      { n0.addNode(n1); }
   )?
   (
      (
         { n8 = new NodeSequence(3); }
         n10=<ADDRESS> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n8.addNode(n9); }
         n12=<OF> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n8.addNode(n11); }
         n13=Identifier()
         { n8.addNode(n13); }
         { n7 = new NodeChoice(n8, 0); }
      |
         n14=Identifier()
         { n7 = new NodeChoice(n14, 1); }
      |
         n15=FileName()
         { n7 = new NodeChoice(n15, 2); }
      |
         n17=<OMITTED> { n16 = JTBToolkit.makeNodeToken(n17); }
         { n7 = new NodeChoice(n16, 3); }
      )
      
   )
   (
      { n20 = new NodeOptional(); }
      { n19 = new NodeSequence(2); }
      (
         n22=<COMMACHAR> { n21 = JTBToolkit.makeNodeToken(n22); }
         { n20.addNode(n21); }
      )?
      { n19.addNode(n20); }
      (
         (
            { n24 = new NodeSequence(3); }
            n26=<ADDRESS> { n25 = JTBToolkit.makeNodeToken(n26); }
            { n24.addNode(n25); }
            n28=<OF> { n27 = JTBToolkit.makeNodeToken(n28); }
            { n24.addNode(n27); }
            n29=Identifier()
            { n24.addNode(n29); }
            { n23 = new NodeChoice(n24, 0); }
         |
            n30=Identifier()
            { n23 = new NodeChoice(n30, 1); }
         |
            n31=FileName()
            { n23 = new NodeChoice(n31, 2); }
         |
            n33=<OMITTED> { n32 = JTBToolkit.makeNodeToken(n33); }
            { n23 = new NodeChoice(n32, 3); }
         )
         
      )
      { n19.addNode(n23); }
      { n18.addNode(n19); }
   )*
   { n18.nodes.trimToSize(); }
   
   { return new CallByReference(n0,n7,n18); }
}

CallByDescriptor CallByDescriptor() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeList n5 = new NodeList();
   NodeChoice n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   Identifier n12;
   Identifier n13;
   FileName n14;
   NodeToken n15;
   Token n16;

   
}
{
   (
      n2=<BY> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n4=<DESCRIPTOR> { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      (
         { n7 = new NodeSequence(3); }
         n9=<ADDRESS> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
         n11=<OF> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n7.addNode(n10); }
         n12=Identifier()
         { n7.addNode(n12); }
         { n6 = new NodeChoice(n7, 0); }
      |
         n13=Identifier()
         { n6 = new NodeChoice(n13, 1); }
      |
         n14=FileName()
         { n6 = new NodeChoice(n14, 2); }
      |
         n16=<OMITTED> { n15 = JTBToolkit.makeNodeToken(n16); }
         { n6 = new NodeChoice(n15, 3); }
      )
      { n5.addNode(n6); }
   )+
   { n5.nodes.trimToSize(); }
   
   { return new CallByDescriptor(n0,n3,n5); }
}

CallByValue CallByValue() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeList n5 = new NodeList();
   NodeChoice n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   Identifier n12;
   NodeSequence n13;
   NodeOptional n14;
   NodeSequence n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   Identifier n20;
   Literal n21;
   NodeToken n22;
   Token n23;

   
}
{
   (
      n2=<BY> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n4=<VALUE> { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      { n14 = new NodeOptional(); }
      (
         { n7 = new NodeSequence(3); }
         n9=<ADDRESS> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
         n11=<OF> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n7.addNode(n10); }
         n12=Identifier()
         { n7.addNode(n12); }
         { n6 = new NodeChoice(n7, 0); }
      |
         { n13 = new NodeSequence(2); }
         (
            { n15 = new NodeSequence(2); }
            n17=<LENGTH> { n16 = JTBToolkit.makeNodeToken(n17); }
            { n15.addNode(n16); }
            n19=<OF> { n18 = JTBToolkit.makeNodeToken(n19); }
            { n15.addNode(n18); }
            { n14.addNode(n15); }
         )?
         { n13.addNode(n14); }
         n20=Identifier()
         { n13.addNode(n20); }
         { n6 = new NodeChoice(n13, 1); }
      |
         n21=Literal()
         { n6 = new NodeChoice(n21, 2); }
      |
         n23=<OMITTED> { n22 = JTBToolkit.makeNodeToken(n23); }
         { n6 = new NodeChoice(n22, 3); }
      )
      { n5.addNode(n6); }
   )+
   { n5.nodes.trimToSize(); }
   
   { return new CallByValue(n0,n3,n5); }
}

CallStatement CallStatement() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeSequence n3;
   ConventionName n4;
   NodeChoice n5;
   Identifier n6;
   Literal n7;
   NodeChoice n8;
   Identifier n9;
   Literal n10;
   NodeOptional n11 = new NodeOptional();
   NodeSequence n12;
   NodeOptional n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeOptional n18;
   NodeToken n19;
   Token n20;
   NodeOptional n21 = new NodeOptional();
   NodeSequence n22;
   NodeToken n23;
   Token n24;
   NodeList n25;
   NodeChoice n26;
   CallByContent n27;
   CallByDescriptor n28;
   CallByValue n29;
   CallByReference n30;
   NodeOptional n31 = new NodeOptional();
   NodeSequence n32;
   NodeChoice n33;
   NodeToken n34;
   Token n35;
   NodeToken n36;
   Token n37;
   Identifier n38;
   NodeOptional n39 = new NodeOptional();
   NodeSequence n40;
   NodeOptional n41;
   NodeToken n42;
   Token n43;
   NodeToken n44;
   Token n45;
   StatementList n46;
   NodeOptional n47 = new NodeOptional();
   NodeSequence n48;
   NodeToken n49;
   Token n50;
   NodeOptional n51;
   NodeToken n52;
   Token n53;
   NodeToken n54;
   Token n55;
   StatementList n56;
   NodeOptional n57 = new NodeOptional();
   NodeSequence n58;
   NodeOptional n59;
   NodeToken n60;
   Token n61;
   NodeToken n62;
   Token n63;
   StatementList n64;
   NodeOptional n65 = new NodeOptional();
   NodeSequence n66;
   NodeToken n67;
   Token n68;
   NodeOptional n69;
   NodeToken n70;
   Token n71;
   NodeToken n72;
   Token n73;
   StatementList n74;
   NodeOptional n75 = new NodeOptional();
   NodeToken n76;
   Token n77;

   
}
{
   n1=<CALL> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         LOOKAHEAD(ConventionName() ( Identifier() | Literal() ))
         { n3 = new NodeSequence(3); }
         n4=ConventionName()
         { n3.addNode(n4); }
         (
            (
               n6=Identifier()
               { n5 = new NodeChoice(n6, 0); }
            |
               n7=Literal()
               { n5 = new NodeChoice(n7, 1); }
            )
            
         )
         { n3.addNode(n5); }
         { n2 = new NodeChoice(n3, 0); }
      |
         (
            (
               n9=Identifier()
               { n8 = new NodeChoice(n9, 0); }
            |
               n10=Literal()
               { n8 = new NodeChoice(n10, 1); }
            )
            
         )
         { n2 = new NodeChoice(n8, 1); }
      )
      
   )
   (
      { n13 = new NodeOptional(); }
      { n18 = new NodeOptional(); }
      { n12 = new NodeSequence(3); }
      (
         n15=<WITH> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n13.addNode(n14); }
      )?
      { n12.addNode(n13); }
      n17=<STDCALL> { n16 = JTBToolkit.makeNodeToken(n17); }
      { n12.addNode(n16); }
      (
         n20=<LINKAGE> { n19 = JTBToolkit.makeNodeToken(n20); }
         { n18.addNode(n19); }
      )?
      { n12.addNode(n18); }
      { n11.addNode(n12); }
   )?
   (
      { n25 = new NodeList(); }
      { n22 = new NodeSequence(2); }
      n24=<USING> { n23 = JTBToolkit.makeNodeToken(n24); }
      { n22.addNode(n23); }
      (
         (
            LOOKAHEAD(CallByContent())
            n27=CallByContent()
            { n26 = new NodeChoice(n27, 0); }
         |
            LOOKAHEAD(CallByDescriptor())
            n28=CallByDescriptor()
            { n26 = new NodeChoice(n28, 1); }
         |
            LOOKAHEAD(CallByValue())
            n29=CallByValue()
            { n26 = new NodeChoice(n29, 2); }
         |
            LOOKAHEAD(CallByReference())
            n30=CallByReference()
            { n26 = new NodeChoice(n30, 3); }
         )
         { n25.addNode(n26); }
      )+
      { n25.nodes.trimToSize(); }
      { n22.addNode(n25); }
      { n21.addNode(n22); }
   )?
   (
      { n32 = new NodeSequence(2); }
      (
         (
            n35=<GIVING> { n34 = JTBToolkit.makeNodeToken(n35); }
            { n33 = new NodeChoice(n34, 0); }
         |
            n37=<RETURNING> { n36 = JTBToolkit.makeNodeToken(n37); }
            { n33 = new NodeChoice(n36, 1); }
         )
         
      )
      { n32.addNode(n33); }
      n38=Identifier()
      { n32.addNode(n38); }
      { n31.addNode(n32); }
   )?
   (
      LOOKAHEAD([ <ON> ] <EXCEPTION>)
      { n41 = new NodeOptional(); }
      { n40 = new NodeSequence(3); }
      (
         n43=<ON> { n42 = JTBToolkit.makeNodeToken(n43); }
         { n41.addNode(n42); }
      )?
      { n40.addNode(n41); }
      n45=<EXCEPTION> { n44 = JTBToolkit.makeNodeToken(n45); }
      { n40.addNode(n44); }
      n46=StatementList()
      { n40.addNode(n46); }
      { n39.addNode(n40); }
   )?
   (
      LOOKAHEAD(<NOT> [ <ON> ] <EXCEPTION>)
      { n51 = new NodeOptional(); }
      { n48 = new NodeSequence(4); }
      n50=<NOT> { n49 = JTBToolkit.makeNodeToken(n50); }
      { n48.addNode(n49); }
      (
         n53=<ON> { n52 = JTBToolkit.makeNodeToken(n53); }
         { n51.addNode(n52); }
      )?
      { n48.addNode(n51); }
      n55=<EXCEPTION> { n54 = JTBToolkit.makeNodeToken(n55); }
      { n48.addNode(n54); }
      n56=StatementList()
      { n48.addNode(n56); }
      { n47.addNode(n48); }
   )?
   (
      { n59 = new NodeOptional(); }
      { n58 = new NodeSequence(3); }
      (
         n61=<ON> { n60 = JTBToolkit.makeNodeToken(n61); }
         { n59.addNode(n60); }
      )?
      { n58.addNode(n59); }
      n63=<OVERFLOW> { n62 = JTBToolkit.makeNodeToken(n63); }
      { n58.addNode(n62); }
      n64=StatementList()
      { n58.addNode(n64); }
      { n57.addNode(n58); }
   )?
   (
      { n69 = new NodeOptional(); }
      { n66 = new NodeSequence(4); }
      n68=<NOT> { n67 = JTBToolkit.makeNodeToken(n68); }
      { n66.addNode(n67); }
      (
         n71=<ON> { n70 = JTBToolkit.makeNodeToken(n71); }
         { n69.addNode(n70); }
      )?
      { n66.addNode(n69); }
      n73=<OVERFLOW> { n72 = JTBToolkit.makeNodeToken(n73); }
      { n66.addNode(n72); }
      n74=StatementList()
      { n66.addNode(n74); }
      { n65.addNode(n66); }
   )?
   (
      n77=<END_CALL> { n76 = JTBToolkit.makeNodeToken(n77); }
      { n75.addNode(n76); }
   )?
   
   { return new CallStatement(n0,n2,n11,n21,n31,n39,n47,n57,n65,n75); }
}

CancelStatement CancelStatement() :
{
   NodeToken n0;
   Token n1;
   NodeList n2 = new NodeList();
   NodeChoice n3;
   Identifier n4;
   Literal n5;

   
}
{
   n1=<CANCEL> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n4=Identifier()
         { n3 = new NodeChoice(n4, 0); }
      |
         n5=Literal()
         { n3 = new NodeChoice(n5, 1); }
      )
      { n2.addNode(n3); }
   )+
   { n2.nodes.trimToSize(); }
   
   { return new CancelStatement(n0,n2); }
}

CloseStatement CloseStatement() :
{
   NodeToken n0;
   Token n1;
   NodeList n2 = new NodeList();
   NodeSequence n3;
   FileName n4;
   NodeOptional n5;
   NodeChoice n6;
   NodeSequence n7;
   NodeChoice n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeOptional n13;
   NodeChoice n14;
   NodeSequence n15;
   NodeOptional n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeSequence n21;
   NodeOptional n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeSequence n29;
   NodeOptional n30;
   NodeToken n31;
   Token n32;
   NodeChoice n33;
   NodeSequence n34;
   NodeToken n35;
   Token n36;
   NodeToken n37;
   Token n38;
   NodeToken n39;
   Token n40;

   
}
{
   n1=<CLOSE> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n5 = new NodeOptional(); }
      { n3 = new NodeSequence(2); }
      n4=FileName()
      { n3.addNode(n4); }
      (
         { n13 = new NodeOptional(); }
         { n30 = new NodeOptional(); }
         (
            (
               { n7 = new NodeSequence(2); }
               (
                  (
                     n10=<REEL> { n9 = JTBToolkit.makeNodeToken(n10); }
                     { n8 = new NodeChoice(n9, 0); }
                  |
                     n12=<UNIT> { n11 = JTBToolkit.makeNodeToken(n12); }
                     { n8 = new NodeChoice(n11, 1); }
                  )
                  
               )
               { n7.addNode(n8); }
               (
                  { n16 = new NodeOptional(); }
                  { n22 = new NodeOptional(); }
                  (
                     (
                        { n15 = new NodeSequence(2); }
                        (
                           n18=<FOR> { n17 = JTBToolkit.makeNodeToken(n18); }
                           { n16.addNode(n17); }
                        )?
                        { n15.addNode(n16); }
                        n20=<REMOVAL> { n19 = JTBToolkit.makeNodeToken(n20); }
                        { n15.addNode(n19); }
                        { n14 = new NodeChoice(n15, 0); }
                     |
                        { n21 = new NodeSequence(3); }
                        (
                           n24=<WITH> { n23 = JTBToolkit.makeNodeToken(n24); }
                           { n22.addNode(n23); }
                        )?
                        { n21.addNode(n22); }
                        n26=<NO> { n25 = JTBToolkit.makeNodeToken(n26); }
                        { n21.addNode(n25); }
                        n28=<REWIND> { n27 = JTBToolkit.makeNodeToken(n28); }
                        { n21.addNode(n27); }
                        { n14 = new NodeChoice(n21, 1); }
                     )
                     
                  )
                  { n13.addNode(n14); }
               )?
               { n7.addNode(n13); }
               { n6 = new NodeChoice(n7, 0); }
            |
               { n29 = new NodeSequence(2); }
               (
                  n32=<WITH> { n31 = JTBToolkit.makeNodeToken(n32); }
                  { n30.addNode(n31); }
               )?
               { n29.addNode(n30); }
               (
                  (
                     { n34 = new NodeSequence(2); }
                     n36=<NO> { n35 = JTBToolkit.makeNodeToken(n36); }
                     { n34.addNode(n35); }
                     n38=<REWIND> { n37 = JTBToolkit.makeNodeToken(n38); }
                     { n34.addNode(n37); }
                     { n33 = new NodeChoice(n34, 0); }
                  |
                     n40=<LOCK> { n39 = JTBToolkit.makeNodeToken(n40); }
                     { n33 = new NodeChoice(n39, 1); }
                  )
                  
               )
               { n29.addNode(n33); }
               { n6 = new NodeChoice(n29, 1); }
            )
            
         )
         { n5.addNode(n6); }
      )?
      { n3.addNode(n5); }
      { n2.addNode(n3); }
   )+
   { n2.nodes.trimToSize(); }
   
   { return new CloseStatement(n0,n2); }
}

ComputeStatement ComputeStatement() :
{
   NodeToken n0;
   Token n1;
   NodeList n2 = new NodeList();
   NodeSequence n3;
   Identifier n4;
   NodeOptional n5;
   NodeToken n6;
   Token n7;
   NodeChoice n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   ArithmeticExpression n13;
   NodeOptional n14 = new NodeOptional();
   NodeSequence n15;
   NodeOptional n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   StatementList n23;
   NodeOptional n24 = new NodeOptional();
   NodeSequence n25;
   NodeToken n26;
   Token n27;
   NodeOptional n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   NodeToken n33;
   Token n34;
   StatementList n35;
   NodeOptional n36 = new NodeOptional();
   NodeToken n37;
   Token n38;

   
}
{
   n1=<COMPUTE> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n5 = new NodeOptional(); }
      { n3 = new NodeSequence(2); }
      n4=Identifier()
      { n3.addNode(n4); }
      (
         n7=<ROUNDED> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5.addNode(n6); }
      )?
      { n3.addNode(n5); }
      { n2.addNode(n3); }
   )+
   { n2.nodes.trimToSize(); }
   (
      (
         n10=<EQUALCHAR> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n8 = new NodeChoice(n9, 0); }
      |
         n12=<EQUAL> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n8 = new NodeChoice(n11, 1); }
      )
      
   )
   n13=ArithmeticExpression()
   (
      { n16 = new NodeOptional(); }
      { n15 = new NodeSequence(4); }
      (
         n18=<ON> { n17 = JTBToolkit.makeNodeToken(n18); }
         { n16.addNode(n17); }
      )?
      { n15.addNode(n16); }
      n20=<SIZE> { n19 = JTBToolkit.makeNodeToken(n20); }
      { n15.addNode(n19); }
      n22=<ERROR> { n21 = JTBToolkit.makeNodeToken(n22); }
      { n15.addNode(n21); }
      n23=StatementList()
      { n15.addNode(n23); }
      { n14.addNode(n15); }
   )?
   (
      { n28 = new NodeOptional(); }
      { n25 = new NodeSequence(5); }
      n27=<NOT> { n26 = JTBToolkit.makeNodeToken(n27); }
      { n25.addNode(n26); }
      (
         n30=<ON> { n29 = JTBToolkit.makeNodeToken(n30); }
         { n28.addNode(n29); }
      )?
      { n25.addNode(n28); }
      n32=<SIZE> { n31 = JTBToolkit.makeNodeToken(n32); }
      { n25.addNode(n31); }
      n34=<ERROR> { n33 = JTBToolkit.makeNodeToken(n34); }
      { n25.addNode(n33); }
      n35=StatementList()
      { n25.addNode(n35); }
      { n24.addNode(n25); }
   )?
   (
      n38=<END_COMPUTE> { n37 = JTBToolkit.makeNodeToken(n38); }
      { n36.addNode(n37); }
   )?
   
   { return new ComputeStatement(n0,n2,n8,n13,n14,n24,n36); }
}

ContinueStatement ContinueStatement() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<CONTINUE> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new ContinueStatement(n0); }
}

DeleteStatement DeleteStatement() :
{
   NodeToken n0;
   Token n1;
   FileName n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   NodeOptional n6 = new NodeOptional();
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10;
   NodeToken n11;
   Token n12;
   StatementList n13;
   NodeOptional n14 = new NodeOptional();
   NodeSequence n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeOptional n20;
   NodeToken n21;
   Token n22;
   StatementList n23;
   NodeOptional n24 = new NodeOptional();
   NodeToken n25;
   Token n26;

   
}
{
   n1=<DELETE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=FileName()
   (
      n5=<RECORD> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
   )?
   (
      { n10 = new NodeOptional(); }
      { n7 = new NodeSequence(3); }
      n9=<INVALID> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n7.addNode(n8); }
      (
         n12=<KEY> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n10.addNode(n11); }
      )?
      { n7.addNode(n10); }
      n13=StatementList()
      { n7.addNode(n13); }
      { n6.addNode(n7); }
   )?
   (
      { n20 = new NodeOptional(); }
      { n15 = new NodeSequence(4); }
      n17=<NOT> { n16 = JTBToolkit.makeNodeToken(n17); }
      { n15.addNode(n16); }
      n19=<INVALID> { n18 = JTBToolkit.makeNodeToken(n19); }
      { n15.addNode(n18); }
      (
         n22=<KEY> { n21 = JTBToolkit.makeNodeToken(n22); }
         { n20.addNode(n21); }
      )?
      { n15.addNode(n20); }
      n23=StatementList()
      { n15.addNode(n23); }
      { n14.addNode(n15); }
   )?
   (
      n26=<END_DELETE> { n25 = JTBToolkit.makeNodeToken(n26); }
      { n24.addNode(n25); }
   )?
   
   { return new DeleteStatement(n0,n2,n3,n6,n14,n24); }
}

DisplayStatement DisplayStatement() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   Identifier n3;
   Literal n4;
   NodeListOptional n5 = new NodeListOptional();
   NodeSequence n6;
   NodeOptional n7;
   NodeToken n8;
   Token n9;
   NodeChoice n10;
   Identifier n11;
   Literal n12;
   NodeOptional n13 = new NodeOptional();
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   NodeChoice n17;
   MnemonicName n18;
   EnvironmentName n19;
   NodeOptional n20 = new NodeOptional();
   NodeSequence n21;
   NodeOptional n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;

   
}
{
   n1=<DISPLAY> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n3=Identifier()
         { n2 = new NodeChoice(n3, 0); }
      |
         n4=Literal()
         { n2 = new NodeChoice(n4, 1); }
      )
      
   )
   (
      { n7 = new NodeOptional(); }
      { n6 = new NodeSequence(2); }
      (
         n9=<COMMACHAR> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
      )?
      { n6.addNode(n7); }
      (
         (
            n11=Identifier()
            { n10 = new NodeChoice(n11, 0); }
         |
            n12=Literal()
            { n10 = new NodeChoice(n12, 1); }
         )
         
      )
      { n6.addNode(n10); }
      { n5.addNode(n6); }
   )*
   { n5.nodes.trimToSize(); }
   (
      { n14 = new NodeSequence(2); }
      n16=<UPON> { n15 = JTBToolkit.makeNodeToken(n16); }
      { n14.addNode(n15); }
      (
         (
            n18=MnemonicName()
            { n17 = new NodeChoice(n18, 0); }
         |
            n19=EnvironmentName()
            { n17 = new NodeChoice(n19, 1); }
         )
         
      )
      { n14.addNode(n17); }
      { n13.addNode(n14); }
   )?
   (
      { n22 = new NodeOptional(); }
      { n21 = new NodeSequence(3); }
      (
         n24=<WITH> { n23 = JTBToolkit.makeNodeToken(n24); }
         { n22.addNode(n23); }
      )?
      { n21.addNode(n22); }
      n26=<NO> { n25 = JTBToolkit.makeNodeToken(n26); }
      { n21.addNode(n25); }
      n28=<ADVANCING> { n27 = JTBToolkit.makeNodeToken(n28); }
      { n21.addNode(n27); }
      { n20.addNode(n21); }
   )?
   
   { return new DisplayStatement(n0,n2,n5,n13,n20); }
}

DivideStatement DivideStatement() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   Identifier n3;
   Literal n4;
   NodeChoice n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   NodeChoice n9;
   Identifier n10;
   Literal n11;
   NodeOptional n12 = new NodeOptional();
   NodeToken n13;
   Token n14;
   NodeChoice n15;
   NodeSequence n16;
   NodeToken n17;
   Token n18;
   NodeList n19 = new NodeList();
   NodeSequence n20;
   Identifier n21;
   NodeOptional n22;
   NodeToken n23;
   Token n24;
   NodeListOptional n25 = new NodeListOptional();
   NodeSequence n26;
   NodeChoice n27;
   Identifier n28;
   Literal n29;
   NodeOptional n30;
   NodeToken n31;
   Token n32;
   NodeSequence n33;
   NodeToken n34;
   Token n35;
   NodeChoice n36;
   Identifier n37;
   Literal n38;
   NodeOptional n39 = new NodeOptional();
   NodeSequence n40;
   NodeToken n41;
   Token n42;
   NodeList n43;
   NodeSequence n44;
   Identifier n45;
   NodeOptional n46;
   NodeToken n47;
   Token n48;
   NodeOptional n49 = new NodeOptional();
   NodeSequence n50;
   NodeToken n51;
   Token n52;
   Identifier n53;
   NodeOptional n54 = new NodeOptional();
   NodeSequence n55;
   NodeOptional n56;
   NodeToken n57;
   Token n58;
   NodeToken n59;
   Token n60;
   NodeToken n61;
   Token n62;
   StatementList n63;
   NodeOptional n64 = new NodeOptional();
   NodeSequence n65;
   NodeToken n66;
   Token n67;
   NodeOptional n68;
   NodeToken n69;
   Token n70;
   NodeToken n71;
   Token n72;
   NodeToken n73;
   Token n74;
   StatementList n75;
   NodeOptional n76 = new NodeOptional();
   NodeToken n77;
   Token n78;

   
}
{
   n1=<DIVIDE> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n3=Identifier()
         { n2 = new NodeChoice(n3, 0); }
      |
         n4=Literal()
         { n2 = new NodeChoice(n4, 1); }
      )
      
   )
   (
      (
         { n6 = new NodeSequence(4); }
         n8=<INTO> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6.addNode(n7); }
         (
            (
               n10=Identifier()
               { n9 = new NodeChoice(n10, 0); }
            |
               n11=Literal()
               { n9 = new NodeChoice(n11, 1); }
            )
            
         )
         { n6.addNode(n9); }
         (
            n14=<ROUNDED> { n13 = JTBToolkit.makeNodeToken(n14); }
            { n12.addNode(n13); }
         )?
         { n6.addNode(n12); }
         (
            (
               { n16 = new NodeSequence(2); }
               n18=<GIVING> { n17 = JTBToolkit.makeNodeToken(n18); }
               { n16.addNode(n17); }
               (
                  { n22 = new NodeOptional(); }
                  { n20 = new NodeSequence(2); }
                  n21=Identifier()
                  { n20.addNode(n21); }
                  (
                     n24=<ROUNDED> { n23 = JTBToolkit.makeNodeToken(n24); }
                     { n22.addNode(n23); }
                  )?
                  { n20.addNode(n22); }
                  { n19.addNode(n20); }
               )+
               { n19.nodes.trimToSize(); }
               { n16.addNode(n19); }
               { n15 = new NodeChoice(n16, 0); }
            |
               (
                  { n30 = new NodeOptional(); }
                  { n26 = new NodeSequence(2); }
                  (
                     (
                        n28=Identifier()
                        { n27 = new NodeChoice(n28, 0); }
                     |
                        n29=Literal()
                        { n27 = new NodeChoice(n29, 1); }
                     )
                     
                  )
                  { n26.addNode(n27); }
                  (
                     n32=<ROUNDED> { n31 = JTBToolkit.makeNodeToken(n32); }
                     { n30.addNode(n31); }
                  )?
                  { n26.addNode(n30); }
                  { n25.addNode(n26); }
               )*
               { n25.nodes.trimToSize(); }
               { n15 = new NodeChoice(n25, 1); }
            )
            
         )
         { n6.addNode(n15); }
         { n5 = new NodeChoice(n6, 0); }
      |
         { n33 = new NodeSequence(3); }
         n35=<BY> { n34 = JTBToolkit.makeNodeToken(n35); }
         { n33.addNode(n34); }
         (
            (
               n37=Identifier()
               { n36 = new NodeChoice(n37, 0); }
            |
               n38=Literal()
               { n36 = new NodeChoice(n38, 1); }
            )
            
         )
         { n33.addNode(n36); }
         (
            { n43 = new NodeList(); }
            { n40 = new NodeSequence(2); }
            n42=<GIVING> { n41 = JTBToolkit.makeNodeToken(n42); }
            { n40.addNode(n41); }
            (
               { n46 = new NodeOptional(); }
               { n44 = new NodeSequence(2); }
               n45=Identifier()
               { n44.addNode(n45); }
               (
                  n48=<ROUNDED> { n47 = JTBToolkit.makeNodeToken(n48); }
                  { n46.addNode(n47); }
               )?
               { n44.addNode(n46); }
               { n43.addNode(n44); }
            )+
            { n43.nodes.trimToSize(); }
            { n40.addNode(n43); }
            { n39.addNode(n40); }
         )?
         { n33.addNode(n39); }
         { n5 = new NodeChoice(n33, 1); }
      )
      
   )
   (
      { n50 = new NodeSequence(2); }
      n52=<REMAINDER> { n51 = JTBToolkit.makeNodeToken(n52); }
      { n50.addNode(n51); }
      n53=Identifier()
      { n50.addNode(n53); }
      { n49.addNode(n50); }
   )?
   (
      { n56 = new NodeOptional(); }
      { n55 = new NodeSequence(4); }
      (
         n58=<ON> { n57 = JTBToolkit.makeNodeToken(n58); }
         { n56.addNode(n57); }
      )?
      { n55.addNode(n56); }
      n60=<SIZE> { n59 = JTBToolkit.makeNodeToken(n60); }
      { n55.addNode(n59); }
      n62=<ERROR> { n61 = JTBToolkit.makeNodeToken(n62); }
      { n55.addNode(n61); }
      n63=StatementList()
      { n55.addNode(n63); }
      { n54.addNode(n55); }
   )?
   (
      { n68 = new NodeOptional(); }
      { n65 = new NodeSequence(5); }
      n67=<NOT> { n66 = JTBToolkit.makeNodeToken(n67); }
      { n65.addNode(n66); }
      (
         n70=<ON> { n69 = JTBToolkit.makeNodeToken(n70); }
         { n68.addNode(n69); }
      )?
      { n65.addNode(n68); }
      n72=<SIZE> { n71 = JTBToolkit.makeNodeToken(n72); }
      { n65.addNode(n71); }
      n74=<ERROR> { n73 = JTBToolkit.makeNodeToken(n74); }
      { n65.addNode(n73); }
      n75=StatementList()
      { n65.addNode(n75); }
      { n64.addNode(n65); }
   )?
   (
      n78=<END_DIVIDE> { n77 = JTBToolkit.makeNodeToken(n78); }
      { n76.addNode(n77); }
   )?
   
   { return new DivideStatement(n0,n2,n5,n49,n54,n64,n76); }
}

EntryStatement EntryStatement() :
{
   NodeToken n0;
   Token n1;
   Literal n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeList n7;
   Identifier n8;

   
}
{
   n1=<ENTRY> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Literal()
   (
      { n7 = new NodeList(); }
      { n4 = new NodeSequence(2); }
      n6=<USING> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      (
         n8=Identifier()
         { n7.addNode(n8); }
      )+
      { n7.nodes.trimToSize(); }
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )?
   
   { return new EntryStatement(n0,n2,n3); }
}

EvaluateStatement EvaluateStatement() :
{
   NodeToken n0;
   Token n1;
   EvaluateValue n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   EvaluateValue n7;
   NodeList n8 = new NodeList();
   NodeSequence n9;
   NodeList n10;
   EvaluateWhenClause n11;
   NodeOptional n12;
   NodeToken n13;
   Token n14;
   StatementList n15;
   NodeOptional n16 = new NodeOptional();
   NodeToken n17;
   Token n18;

   
}
{
   n1=<EVALUATE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=EvaluateValue()
   (
      { n4 = new NodeSequence(2); }
      n6=<ALSO> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=EvaluateValue()
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )*
   { n3.nodes.trimToSize(); }
   (
      { n10 = new NodeList(); }
      { n12 = new NodeOptional(); }
      { n9 = new NodeSequence(3); }
      (
         n11=EvaluateWhenClause()
         { n10.addNode(n11); }
      )+
      { n10.nodes.trimToSize(); }
      { n9.addNode(n10); }
      (
         n14=<THEN> { n13 = JTBToolkit.makeNodeToken(n14); }
         { n12.addNode(n13); }
      )?
      { n9.addNode(n12); }
      n15=StatementList()
      { n9.addNode(n15); }
      { n8.addNode(n9); }
   )+
   { n8.nodes.trimToSize(); }
   (
      n18=<END_EVALUATE> { n17 = JTBToolkit.makeNodeToken(n18); }
      { n16.addNode(n17); }
   )?
   
   { return new EvaluateStatement(n0,n2,n3,n8,n16); }
}

EvaluateValue EvaluateValue() :
{
   NodeChoice n0;
   Condition n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   
}
{
   (
      (
         n1=Condition()
         { n0 = new NodeChoice(n1, 0); }
      |
         n3=<TRUE> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n0 = new NodeChoice(n2, 1); }
      |
         n5=<FALSE> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n0 = new NodeChoice(n4, 2); }
      )
      
   )
   
   { return new EvaluateValue(n0); }
}

EvaluateWhenClause EvaluateWhenClause() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   EvaluatePhrase n9;
   NodeListOptional n10 = new NodeListOptional();
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   EvaluatePhrase n14;

   
}
{
   (
      (
         LOOKAHEAD(<WHEN> <OTHER>)
         { n1 = new NodeSequence(3); }
         n3=<WHEN> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         n5=<OTHER> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n1.addNode(n4); }
         { n0 = new NodeChoice(n1, 0); }
      |
         { n6 = new NodeSequence(3); }
         n8=<WHEN> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6.addNode(n7); }
         n9=EvaluatePhrase()
         { n6.addNode(n9); }
         (
            { n11 = new NodeSequence(2); }
            n13=<ALSO> { n12 = JTBToolkit.makeNodeToken(n13); }
            { n11.addNode(n12); }
            n14=EvaluatePhrase()
            { n11.addNode(n14); }
            { n10.addNode(n11); }
         )*
         { n10.nodes.trimToSize(); }
         { n6.addNode(n10); }
         { n0 = new NodeChoice(n6, 1); }
      )
      
   )
   
   { return new EvaluateWhenClause(n0); }
}

EvaluateThruPhrase EvaluateThruPhrase() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   ArithmeticExpression n3;
   NodeChoice n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   ArithmeticExpression n9;

   
}
{
   (
      n2=<NOT> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n3=ArithmeticExpression()
   (
      (
         n6=<THROUGH> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4 = new NodeChoice(n5, 0); }
      |
         n8=<THRU> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n4 = new NodeChoice(n7, 1); }
      )
      
   )
   n9=ArithmeticExpression()
   
   { return new EvaluateThruPhrase(n0,n3,n4,n9); }
}

EvaluatePhrase EvaluatePhrase() :
{
   NodeChoice n0;
   EvaluateThruPhrase n1;
   Condition n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   (
      (
         LOOKAHEAD(EvaluateThruPhrase())
         n1=EvaluateThruPhrase()
         { n0 = new NodeChoice(n1, 0); }
      |
         n2=Condition()
         { n0 = new NodeChoice(n2, 1); }
      |
         n4=<ANY> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 2); }
      |
         n6=<TRUE> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 3); }
      |
         n8=<FALSE> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n0 = new NodeChoice(n7, 4); }
      )
      
   )
   
   { return new EvaluatePhrase(n0); }
}

ExecStatement ExecStatement() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<EXEC> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new ExecStatement(n0); }
}

ExitStatement ExitStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   
}
{
   n1=<EXIT> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<DOT> { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new ExitStatement(n0,n2); }
}

ExitProgramStatement ExitProgramStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   
}
{
   n1=<EXIT> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PROGRAM> { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new ExitProgramStatement(n0,n2); }
}

GobackStatement GobackStatement() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<GOBACK> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new GobackStatement(n0); }
}

GotoStatement GotoStatement() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeChoice n5;
   NodeSequence n6;
   NodeList n7 = new NodeList();
   ProcedureName n8;
   NodeOptional n9 = new NodeOptional();
   NodeSequence n10;
   NodeToken n11;
   Token n12;
   NodeOptional n13;
   NodeToken n14;
   Token n15;
   Identifier n16;
   NodeToken n17;
   Token n18;

   
}
{
   n1=<GO> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<TO> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   (
      (
         { n6 = new NodeSequence(2); }
         (
            n8=ProcedureName()
            { n7.addNode(n8); }
         )+
         { n7.nodes.trimToSize(); }
         { n6.addNode(n7); }
         (
            { n13 = new NodeOptional(); }
            { n10 = new NodeSequence(3); }
            n12=<DEPENDING> { n11 = JTBToolkit.makeNodeToken(n12); }
            { n10.addNode(n11); }
            (
               n15=<ON> { n14 = JTBToolkit.makeNodeToken(n15); }
               { n13.addNode(n14); }
            )?
            { n10.addNode(n13); }
            n16=Identifier()
            { n10.addNode(n16); }
            { n9.addNode(n10); }
         )?
         { n6.addNode(n9); }
         { n5 = new NodeChoice(n6, 0); }
      |
         n18=<MORE_LABELS> { n17 = JTBToolkit.makeNodeToken(n18); }
         { n5 = new NodeChoice(n17, 1); }
      )
      
   )
   
   { return new GotoStatement(n0,n2,n5); }
}

IfStatement IfStatement() :
{
   NodeToken n0;
   Token n1;
   Condition n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   NodeChoice n6;
   StatementList n7;
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeOptional n13 = new NodeOptional();
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   NodeChoice n17;
   StatementList n18;
   NodeSequence n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   NodeOptional n24 = new NodeOptional();
   NodeToken n25;
   Token n26;

   
}
{
   n1=<IF> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Condition()
   (
      n5=<THEN> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
   )?
   (
      (
         n7=StatementList()
         { n6 = new NodeChoice(n7, 0); }
      |
         { n8 = new NodeSequence(2); }
         n10=<NEXT> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n8.addNode(n9); }
         n12=<SENTENCE> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n8.addNode(n11); }
         { n6 = new NodeChoice(n8, 1); }
      )
      
   )
   (
      { n14 = new NodeSequence(2); }
      n16=<ELSE> { n15 = JTBToolkit.makeNodeToken(n16); }
      { n14.addNode(n15); }
      (
         (
            n18=StatementList()
            { n17 = new NodeChoice(n18, 0); }
         |
            { n19 = new NodeSequence(2); }
            n21=<NEXT> { n20 = JTBToolkit.makeNodeToken(n21); }
            { n19.addNode(n20); }
            n23=<SENTENCE> { n22 = JTBToolkit.makeNodeToken(n23); }
            { n19.addNode(n22); }
            { n17 = new NodeChoice(n19, 1); }
         )
         
      )
      { n14.addNode(n17); }
      { n13.addNode(n14); }
   )?
   (
      n26=<END_IF> { n25 = JTBToolkit.makeNodeToken(n26); }
      { n24.addNode(n25); }
   )?
   
   { return new IfStatement(n0,n2,n3,n6,n13,n24); }
}

InitializeStatement InitializeStatement() :
{
   NodeToken n0;
   Token n1;
   NodeList n2 = new NodeList();
   Identifier n3;
   NodeOptional n4 = new NodeOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   NodeList n8;
   NodeSequence n9;
   NodeChoice n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeOptional n25;
   NodeToken n26;
   Token n27;
   NodeToken n28;
   Token n29;
   NodeChoice n30;
   Identifier n31;
   Literal n32;

   
}
{
   n1=<INITIALIZE> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=Identifier()
      { n2.addNode(n3); }
   )+
   { n2.nodes.trimToSize(); }
   (
      { n8 = new NodeList(); }
      { n5 = new NodeSequence(2); }
      n7=<REPLACING> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
      (
         { n25 = new NodeOptional(); }
         { n9 = new NodeSequence(4); }
         (
            (
               n12=<ALPHABETIC> { n11 = JTBToolkit.makeNodeToken(n12); }
               { n10 = new NodeChoice(n11, 0); }
            |
               n14=<ALPHANUMERIC> { n13 = JTBToolkit.makeNodeToken(n14); }
               { n10 = new NodeChoice(n13, 1); }
            |
               n16=<NUMERIC> { n15 = JTBToolkit.makeNodeToken(n16); }
               { n10 = new NodeChoice(n15, 2); }
            |
               n18=<ALPHANUMERIC_EDITED> { n17 = JTBToolkit.makeNodeToken(n18); }
               { n10 = new NodeChoice(n17, 3); }
            |
               n20=<NUMERIC_EDITED> { n19 = JTBToolkit.makeNodeToken(n20); }
               { n10 = new NodeChoice(n19, 4); }
            |
               n22=<DBCS> { n21 = JTBToolkit.makeNodeToken(n22); }
               { n10 = new NodeChoice(n21, 5); }
            |
               n24=<EGCS> { n23 = JTBToolkit.makeNodeToken(n24); }
               { n10 = new NodeChoice(n23, 6); }
            )
            
         )
         { n9.addNode(n10); }
         (
            n27=<DATA> { n26 = JTBToolkit.makeNodeToken(n27); }
            { n25.addNode(n26); }
         )?
         { n9.addNode(n25); }
         n29=<BY> { n28 = JTBToolkit.makeNodeToken(n29); }
         { n9.addNode(n28); }
         (
            (
               n31=Identifier()
               { n30 = new NodeChoice(n31, 0); }
            |
               n32=Literal()
               { n30 = new NodeChoice(n32, 1); }
            )
            
         )
         { n9.addNode(n30); }
         { n8.addNode(n9); }
      )+
      { n8.nodes.trimToSize(); }
      { n5.addNode(n8); }
      { n4.addNode(n5); }
   )?
   
   { return new InitializeStatement(n0,n2,n4); }
}

InspectStatement InspectStatement() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeChoice n3;
   TallyingPhrase n4;
   ConvertingPhrase n5;
   ReplacingPhrase n6;

   
}
{
   n1=<INSPECT> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   (
      (
         n4=TallyingPhrase()
         { n3 = new NodeChoice(n4, 0); }
      |
         n5=ConvertingPhrase()
         { n3 = new NodeChoice(n5, 1); }
      |
         n6=ReplacingPhrase()
         { n3 = new NodeChoice(n6, 2); }
      )
      
   )
   
   { return new InspectStatement(n0,n2,n3); }
}

IterableTallyingClause IterableTallyingClause() :
{
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   IterableBeforeAfterPhrase n3;

   
}
{
   n1=<CHARACTERS> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=IterableBeforeAfterPhrase()
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   
   { return new IterableTallyingClause(n0,n2); }
}

RecursiveTallyingClause RecursiveTallyingClause() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   IterableBeforeAfterClause n5;
   NodeListOptional n6 = new NodeListOptional();
   NodeChoice n7;
   NodeList n8;
   NodeSequence n9;
   Identifier n10;
   NodeToken n11;
   Token n12;
   NodeList n13;
   NodeChoice n14;
   RecursiveTallyingClause n15;
   IterableTallyingClause n16;
   IterableBeforeAfterClause n17;

   
}
{
   (
      (
         n2=<ALL> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<LEADING> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n5=IterableBeforeAfterClause()
   (
      { n8 = new NodeList(); }
      (
         LOOKAHEAD(Identifier() <FOR>)
         (
            { n13 = new NodeList(); }
            { n9 = new NodeSequence(3); }
            n10=Identifier()
            { n9.addNode(n10); }
            n12=<FOR> { n11 = JTBToolkit.makeNodeToken(n12); }
            { n9.addNode(n11); }
            (
               (
                  n15=RecursiveTallyingClause()
                  { n14 = new NodeChoice(n15, 0); }
               |
                  n16=IterableTallyingClause()
                  { n14 = new NodeChoice(n16, 1); }
               )
               { n13.addNode(n14); }
            )+
            { n13.nodes.trimToSize(); }
            { n9.addNode(n13); }
            { n8.addNode(n9); }
         )+
         { n8.nodes.trimToSize(); }
         { n7 = new NodeChoice(n8, 0); }
      |
         n17=IterableBeforeAfterClause()
         { n7 = new NodeChoice(n17, 1); }
      )
      { n6.addNode(n7); }
   )*
   { n6.nodes.trimToSize(); }
   
   { return new RecursiveTallyingClause(n0,n5,n6); }
}

TallyingPhrase TallyingPhrase() :
{
   NodeToken n0;
   Token n1;
   NodeList n2 = new NodeList();
   NodeSequence n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
   NodeList n7;
   NodeChoice n8;
   RecursiveTallyingClause n9;
   IterableTallyingClause n10;
   NodeOptional n11 = new NodeOptional();
   ReplacingPhrase n12;

   
}
{
   n1=<TALLYING> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n7 = new NodeList(); }
      { n3 = new NodeSequence(3); }
      n4=Identifier()
      { n3.addNode(n4); }
      n6=<FOR> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n3.addNode(n5); }
      (
         (
            n9=RecursiveTallyingClause()
            { n8 = new NodeChoice(n9, 0); }
         |
            n10=IterableTallyingClause()
            { n8 = new NodeChoice(n10, 1); }
         )
         { n7.addNode(n8); }
      )+
      { n7.nodes.trimToSize(); }
      { n3.addNode(n7); }
      { n2.addNode(n3); }
   )+
   { n2.nodes.trimToSize(); }
   (
      n12=ReplacingPhrase()
      { n11.addNode(n12); }
   )?
   
   { return new TallyingPhrase(n0,n2,n11); }
}

ConvertingPhrase ConvertingPhrase() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   Identifier n3;
   Literal n4;
   NodeToken n5;
   Token n6;
   IterableBeforeAfterClause n7;

   
}
{
   n1=<CONVERTING> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n3=Identifier()
         { n2 = new NodeChoice(n3, 0); }
      |
         n4=Literal()
         { n2 = new NodeChoice(n4, 1); }
      )
      
   )
   n6=<TO> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=IterableBeforeAfterClause()
   
   { return new ConvertingPhrase(n0,n2,n5,n7); }
}

ReplacingPhrase ReplacingPhrase() :
{
   NodeToken n0;
   Token n1;
   NodeList n2 = new NodeList();
   NodeChoice n3;
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   IterableBeforeAfterClause n9;
   NodeSequence n10;
   NodeChoice n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeList n18;
   NodeSequence n19;
   NodeChoice n20;
   Identifier n21;
   Literal n22;
   NodeToken n23;
   Token n24;
   IterableBeforeAfterClause n25;

   
}
{
   n1=<REPLACING> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n18 = new NodeList(); }
      (
         { n4 = new NodeSequence(3); }
         n6=<CHARACTERS> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4.addNode(n5); }
         n8=<BY> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n4.addNode(n7); }
         n9=IterableBeforeAfterClause()
         { n4.addNode(n9); }
         { n3 = new NodeChoice(n4, 0); }
      |
         { n10 = new NodeSequence(2); }
         (
            (
               n13=<ALL> { n12 = JTBToolkit.makeNodeToken(n13); }
               { n11 = new NodeChoice(n12, 0); }
            |
               n15=<LEADING> { n14 = JTBToolkit.makeNodeToken(n15); }
               { n11 = new NodeChoice(n14, 1); }
            |
               n17=<FIRST> { n16 = JTBToolkit.makeNodeToken(n17); }
               { n11 = new NodeChoice(n16, 2); }
            )
            
         )
         { n10.addNode(n11); }
         (
            LOOKAHEAD(( Identifier() | Literal() ) <BY> IterableBeforeAfterClause())
            { n19 = new NodeSequence(3); }
            (
               (
                  n21=Identifier()
                  { n20 = new NodeChoice(n21, 0); }
               |
                  n22=Literal()
                  { n20 = new NodeChoice(n22, 1); }
               )
               
            )
            { n19.addNode(n20); }
            n24=<BY> { n23 = JTBToolkit.makeNodeToken(n24); }
            { n19.addNode(n23); }
            n25=IterableBeforeAfterClause()
            { n19.addNode(n25); }
            { n18.addNode(n19); }
         )+
         { n18.nodes.trimToSize(); }
         { n10.addNode(n18); }
         { n3 = new NodeChoice(n10, 1); }
      )
      { n2.addNode(n3); }
   )+
   { n2.nodes.trimToSize(); }
   
   { return new ReplacingPhrase(n0,n2); }
}

IterableBeforeAfterClause IterableBeforeAfterClause() :
{
   NodeChoice n0;
   Identifier n1;
   IterableLiteral n2;
   NodeListOptional n3 = new NodeListOptional();
   IterableBeforeAfterPhrase n4;

   
}
{
   (
      (
         n1=Identifier()
         { n0 = new NodeChoice(n1, 0); }
      |
         n2=IterableLiteral()
         { n0 = new NodeChoice(n2, 1); }
      )
      
   )
   (
      n4=IterableBeforeAfterPhrase()
      { n3.addNode(n4); }
   )*
   { n3.nodes.trimToSize(); }
   
   { return new IterableBeforeAfterClause(n0,n3); }
}

IterableBeforeAfterPhrase IterableBeforeAfterPhrase() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;
   NodeChoice n8;
   Identifier n9;
   IterableLiteral n10;

   
}
{
   (
      (
         n2=<BEFORE> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<AFTER> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   (
      n7=<INITIAL> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
   )?
   (
      (
         n9=Identifier()
         { n8 = new NodeChoice(n9, 0); }
      |
         n10=IterableLiteral()
         { n8 = new NodeChoice(n10, 1); }
      )
      
   )
   
   { return new IterableBeforeAfterPhrase(n0,n5,n8); }
}

MergeStatement MergeStatement() :
{
   NodeToken n0;
   Token n1;
   FileName n2;
   NodeList n3 = new NodeList();
   NodeSequence n4;
   NodeOptional n5;
   NodeToken n6;
   Token n7;
   NodeChoice n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeOptional n13;
   NodeToken n14;
   Token n15;
   NodeList n16;
   Identifier n17;
   NodeOptional n18 = new NodeOptional();
   NodeSequence n19;
   NodeOptional n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeOptional n25;
   NodeToken n26;
   Token n27;
   AlphabetName n28;
   NodeToken n29;
   Token n30;
   FileName n31;
   NodeList n32 = new NodeList();
   FileName n33;
   NodeChoice n34;
   NodeSequence n35;
   NodeToken n36;
   Token n37;
   NodeToken n38;
   Token n39;
   NodeOptional n40 = new NodeOptional();
   NodeToken n41;
   Token n42;
   ProcedureName n43;
   NodeOptional n44 = new NodeOptional();
   NodeSequence n45;
   NodeChoice n46;
   NodeToken n47;
   Token n48;
   NodeToken n49;
   Token n50;
   ProcedureName n51;
   NodeSequence n52;
   NodeToken n53;
   Token n54;
   NodeList n55 = new NodeList();
   FileName n56;

   
}
{
   n1=<MERGE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=FileName()
   (
      { n5 = new NodeOptional(); }
      { n13 = new NodeOptional(); }
      { n16 = new NodeList(); }
      { n4 = new NodeSequence(4); }
      (
         n7=<ON> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5.addNode(n6); }
      )?
      { n4.addNode(n5); }
      (
         (
            n10=<ASCENDING> { n9 = JTBToolkit.makeNodeToken(n10); }
            { n8 = new NodeChoice(n9, 0); }
         |
            n12=<DESCENDING> { n11 = JTBToolkit.makeNodeToken(n12); }
            { n8 = new NodeChoice(n11, 1); }
         )
         
      )
      { n4.addNode(n8); }
      (
         n15=<KEY> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n13.addNode(n14); }
      )?
      { n4.addNode(n13); }
      (
         n17=Identifier()
         { n16.addNode(n17); }
      )+
      { n16.nodes.trimToSize(); }
      { n4.addNode(n16); }
      { n3.addNode(n4); }
   )+
   { n3.nodes.trimToSize(); }
   (
      { n20 = new NodeOptional(); }
      { n25 = new NodeOptional(); }
      { n19 = new NodeSequence(4); }
      (
         n22=<COLLATING> { n21 = JTBToolkit.makeNodeToken(n22); }
         { n20.addNode(n21); }
      )?
      { n19.addNode(n20); }
      n24=<SEQUENCE> { n23 = JTBToolkit.makeNodeToken(n24); }
      { n19.addNode(n23); }
      (
         n27=<IS> { n26 = JTBToolkit.makeNodeToken(n27); }
         { n25.addNode(n26); }
      )?
      { n19.addNode(n25); }
      n28=AlphabetName()
      { n19.addNode(n28); }
      { n18.addNode(n19); }
   )?
   n30=<USING> { n29 = JTBToolkit.makeNodeToken(n30); }
   n31=FileName()
   (
      n33=FileName()
      { n32.addNode(n33); }
   )+
   { n32.nodes.trimToSize(); }
   (
      (
         { n35 = new NodeSequence(5); }
         n37=<OUTPUT> { n36 = JTBToolkit.makeNodeToken(n37); }
         { n35.addNode(n36); }
         n39=<PROCEDURE> { n38 = JTBToolkit.makeNodeToken(n39); }
         { n35.addNode(n38); }
         (
            n42=<IS> { n41 = JTBToolkit.makeNodeToken(n42); }
            { n40.addNode(n41); }
         )?
         { n35.addNode(n40); }
         n43=ProcedureName()
         { n35.addNode(n43); }
         (
            { n45 = new NodeSequence(2); }
            (
               (
                  n48=<THROUGH> { n47 = JTBToolkit.makeNodeToken(n48); }
                  { n46 = new NodeChoice(n47, 0); }
               |
                  n50=<THRU> { n49 = JTBToolkit.makeNodeToken(n50); }
                  { n46 = new NodeChoice(n49, 1); }
               )
               
            )
            { n45.addNode(n46); }
            n51=ProcedureName()
            { n45.addNode(n51); }
            { n44.addNode(n45); }
         )?
         { n35.addNode(n44); }
         { n34 = new NodeChoice(n35, 0); }
      |
         { n52 = new NodeSequence(2); }
         n54=<GIVING> { n53 = JTBToolkit.makeNodeToken(n54); }
         { n52.addNode(n53); }
         (
            n56=FileName()
            { n55.addNode(n56); }
         )+
         { n55.nodes.trimToSize(); }
         { n52.addNode(n55); }
         { n34 = new NodeChoice(n52, 1); }
      )
      
   )
   
   { return new MergeStatement(n0,n2,n3,n18,n29,n31,n32,n34); }
}

MoveStatement MoveStatement() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeSequence n3;
   ArithmeticExpression n4;
   NodeToken n5;
   Token n6;
   Identifier n7;
   NodeListOptional n8 = new NodeListOptional();
   NodeSequence n9;
   NodeOptional n10;
   NodeToken n11;
   Token n12;
   Identifier n13;
   NodeSequence n14;
   NodeChoice n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   Identifier n20;
   NodeToken n21;
   Token n22;
   NodeList n23 = new NodeList();
   Identifier n24;

   
}
{
   n1=<MOVE> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         { n3 = new NodeSequence(4); }
         n4=ArithmeticExpression()
         { n3.addNode(n4); }
         n6=<TO> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n3.addNode(n5); }
         n7=Identifier()
         { n3.addNode(n7); }
         (
            { n10 = new NodeOptional(); }
            { n9 = new NodeSequence(2); }
            (
               n12=<COMMACHAR> { n11 = JTBToolkit.makeNodeToken(n12); }
               { n10.addNode(n11); }
            )?
            { n9.addNode(n10); }
            n13=Identifier()
            { n9.addNode(n13); }
            { n8.addNode(n9); }
         )*
         { n8.nodes.trimToSize(); }
         { n3.addNode(n8); }
         { n2 = new NodeChoice(n3, 0); }
      |
         { n14 = new NodeSequence(4); }
         (
            (
               n17=<CORRESPONDING> { n16 = JTBToolkit.makeNodeToken(n17); }
               { n15 = new NodeChoice(n16, 0); }
            |
               n19=<CORR> { n18 = JTBToolkit.makeNodeToken(n19); }
               { n15 = new NodeChoice(n18, 1); }
            )
            
         )
         { n14.addNode(n15); }
         n20=Identifier()
         { n14.addNode(n20); }
         n22=<TO> { n21 = JTBToolkit.makeNodeToken(n22); }
         { n14.addNode(n21); }
         (
            n24=Identifier()
            { n23.addNode(n24); }
         )+
         { n23.nodes.trimToSize(); }
         { n14.addNode(n23); }
         { n2 = new NodeChoice(n14, 1); }
      )
      
   )
   
   { return new MoveStatement(n0,n2); }
}

MultiplyStatement MultiplyStatement() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   Identifier n3;
   Literal n4;
   NodeToken n5;
   Token n6;
   NodeList n7 = new NodeList();
   NodeSequence n8;
   NodeChoice n9;
   Identifier n10;
   Literal n11;
   NodeOptional n12;
   NodeToken n13;
   Token n14;
   NodeOptional n15 = new NodeOptional();
   NodeSequence n16;
   NodeToken n17;
   Token n18;
   NodeList n19;
   NodeSequence n20;
   Identifier n21;
   NodeOptional n22;
   NodeToken n23;
   Token n24;
   NodeOptional n25 = new NodeOptional();
   NodeSequence n26;
   NodeOptional n27;
   NodeToken n28;
   Token n29;
   NodeToken n30;
   Token n31;
   NodeToken n32;
   Token n33;
   StatementList n34;
   NodeOptional n35 = new NodeOptional();
   NodeSequence n36;
   NodeToken n37;
   Token n38;
   NodeOptional n39;
   NodeToken n40;
   Token n41;
   NodeToken n42;
   Token n43;
   NodeToken n44;
   Token n45;
   StatementList n46;
   NodeOptional n47 = new NodeOptional();
   NodeToken n48;
   Token n49;

   
}
{
   n1=<MULTIPLY> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n3=Identifier()
         { n2 = new NodeChoice(n3, 0); }
      |
         n4=Literal()
         { n2 = new NodeChoice(n4, 1); }
      )
      
   )
   n6=<BY> { n5 = JTBToolkit.makeNodeToken(n6); }
   (
      { n12 = new NodeOptional(); }
      { n8 = new NodeSequence(2); }
      (
         (
            n10=Identifier()
            { n9 = new NodeChoice(n10, 0); }
         |
            n11=Literal()
            { n9 = new NodeChoice(n11, 1); }
         )
         
      )
      { n8.addNode(n9); }
      (
         n14=<ROUNDED> { n13 = JTBToolkit.makeNodeToken(n14); }
         { n12.addNode(n13); }
      )?
      { n8.addNode(n12); }
      { n7.addNode(n8); }
   )+
   { n7.nodes.trimToSize(); }
   (
      { n19 = new NodeList(); }
      { n16 = new NodeSequence(2); }
      n18=<GIVING> { n17 = JTBToolkit.makeNodeToken(n18); }
      { n16.addNode(n17); }
      (
         { n22 = new NodeOptional(); }
         { n20 = new NodeSequence(2); }
         n21=Identifier()
         { n20.addNode(n21); }
         (
            n24=<ROUNDED> { n23 = JTBToolkit.makeNodeToken(n24); }
            { n22.addNode(n23); }
         )?
         { n20.addNode(n22); }
         { n19.addNode(n20); }
      )+
      { n19.nodes.trimToSize(); }
      { n16.addNode(n19); }
      { n15.addNode(n16); }
   )?
   (
      { n27 = new NodeOptional(); }
      { n26 = new NodeSequence(4); }
      (
         n29=<ON> { n28 = JTBToolkit.makeNodeToken(n29); }
         { n27.addNode(n28); }
      )?
      { n26.addNode(n27); }
      n31=<SIZE> { n30 = JTBToolkit.makeNodeToken(n31); }
      { n26.addNode(n30); }
      n33=<ERROR> { n32 = JTBToolkit.makeNodeToken(n33); }
      { n26.addNode(n32); }
      n34=StatementList()
      { n26.addNode(n34); }
      { n25.addNode(n26); }
   )?
   (
      { n39 = new NodeOptional(); }
      { n36 = new NodeSequence(5); }
      n38=<NOT> { n37 = JTBToolkit.makeNodeToken(n38); }
      { n36.addNode(n37); }
      (
         n41=<ON> { n40 = JTBToolkit.makeNodeToken(n41); }
         { n39.addNode(n40); }
      )?
      { n36.addNode(n39); }
      n43=<SIZE> { n42 = JTBToolkit.makeNodeToken(n43); }
      { n36.addNode(n42); }
      n45=<ERROR> { n44 = JTBToolkit.makeNodeToken(n45); }
      { n36.addNode(n44); }
      n46=StatementList()
      { n36.addNode(n46); }
      { n35.addNode(n36); }
   )?
   (
      n49=<END_MULTIPLY> { n48 = JTBToolkit.makeNodeToken(n49); }
      { n47.addNode(n48); }
   )?
   
   { return new MultiplyStatement(n0,n2,n5,n7,n15,n25,n35,n47); }
}

OpenStatement OpenStatement() :
{
   NodeToken n0;
   Token n1;
   NodeList n2 = new NodeList();
   NodeChoice n3;
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeList n7;
   NodeSequence n8;
   FileName n9;
   NodeOptional n10;
   NodeChoice n11;
   NodeToken n12;
   Token n13;
   NodeSequence n14;
   NodeOptional n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NodeSequence n22;
   NodeToken n23;
   Token n24;
   NodeList n25;
   NodeSequence n26;
   FileName n27;
   NodeOptional n28;
   NodeSequence n29;
   NodeOptional n30;
   NodeToken n31;
   Token n32;
   NodeToken n33;
   Token n34;
   NodeToken n35;
   Token n36;
   NodeSequence n37;
   NodeToken n38;
   Token n39;
   NodeList n40;
   FileName n41;
   NodeSequence n42;
   NodeToken n43;
   Token n44;
   NodeList n45;
   FileName n46;

   
}
{
   n1=<OPEN> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n7 = new NodeList(); }
      { n25 = new NodeList(); }
      { n40 = new NodeList(); }
      { n45 = new NodeList(); }
      (
         { n4 = new NodeSequence(2); }
         n6=<INPUT> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4.addNode(n5); }
         (
            { n10 = new NodeOptional(); }
            { n8 = new NodeSequence(2); }
            n9=FileName()
            { n8.addNode(n9); }
            (
               { n15 = new NodeOptional(); }
               (
                  (
                     n13=<REVERSED> { n12 = JTBToolkit.makeNodeToken(n13); }
                     { n11 = new NodeChoice(n12, 0); }
                  |
                     { n14 = new NodeSequence(3); }
                     (
                        n17=<WITH> { n16 = JTBToolkit.makeNodeToken(n17); }
                        { n15.addNode(n16); }
                     )?
                     { n14.addNode(n15); }
                     n19=<NO> { n18 = JTBToolkit.makeNodeToken(n19); }
                     { n14.addNode(n18); }
                     n21=<REWIND> { n20 = JTBToolkit.makeNodeToken(n21); }
                     { n14.addNode(n20); }
                     { n11 = new NodeChoice(n14, 1); }
                  )
                  
               )
               { n10.addNode(n11); }
            )?
            { n8.addNode(n10); }
            { n7.addNode(n8); }
         )+
         { n7.nodes.trimToSize(); }
         { n4.addNode(n7); }
         { n3 = new NodeChoice(n4, 0); }
      |
         { n22 = new NodeSequence(2); }
         n24=<OUTPUT> { n23 = JTBToolkit.makeNodeToken(n24); }
         { n22.addNode(n23); }
         (
            { n28 = new NodeOptional(); }
            { n26 = new NodeSequence(2); }
            n27=FileName()
            { n26.addNode(n27); }
            (
               { n30 = new NodeOptional(); }
               { n29 = new NodeSequence(3); }
               (
                  n32=<WITH> { n31 = JTBToolkit.makeNodeToken(n32); }
                  { n30.addNode(n31); }
               )?
               { n29.addNode(n30); }
               n34=<NO> { n33 = JTBToolkit.makeNodeToken(n34); }
               { n29.addNode(n33); }
               n36=<REWIND> { n35 = JTBToolkit.makeNodeToken(n36); }
               { n29.addNode(n35); }
               { n28.addNode(n29); }
            )?
            { n26.addNode(n28); }
            { n25.addNode(n26); }
         )+
         { n25.nodes.trimToSize(); }
         { n22.addNode(n25); }
         { n3 = new NodeChoice(n22, 1); }
      |
         { n37 = new NodeSequence(2); }
         n39=<I_O> { n38 = JTBToolkit.makeNodeToken(n39); }
         { n37.addNode(n38); }
         (
            n41=FileName()
            { n40.addNode(n41); }
         )+
         { n40.nodes.trimToSize(); }
         { n37.addNode(n40); }
         { n3 = new NodeChoice(n37, 2); }
      |
         { n42 = new NodeSequence(2); }
         n44=<EXTEND> { n43 = JTBToolkit.makeNodeToken(n44); }
         { n42.addNode(n43); }
         (
            n46=FileName()
            { n45.addNode(n46); }
         )+
         { n45.nodes.trimToSize(); }
         { n42.addNode(n45); }
         { n3 = new NodeChoice(n42, 3); }
      )
      { n2.addNode(n3); }
   )+
   { n2.nodes.trimToSize(); }
   
   { return new OpenStatement(n0,n2); }
}

PerformStatement PerformStatement() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeSequence n3;
   PerformFlavour n4;
   StatementList n5;
   NodeToken n6;
   Token n7;
   NodeSequence n8;
   PerformProcedureScopeClause n9;
   PerformFlavour n10;
   NodeSequence n11;
   StatementList n12;
   NodeToken n13;
   Token n14;
   PerformProcedureScopeClause n15;

   
}
{
   n1=<PERFORM> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         LOOKAHEAD(PerformFlavour() StatementList() <END_PERFORM>)
         { n3 = new NodeSequence(4); }
         n4=PerformFlavour()
         { n3.addNode(n4); }
         n5=StatementList()
         { n3.addNode(n5); }
         n7=<END_PERFORM> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n3.addNode(n6); }
         { n2 = new NodeChoice(n3, 0); }
      |
         LOOKAHEAD(PerformProcedureScopeClause() PerformFlavour())
         { n8 = new NodeSequence(3); }
         n9=PerformProcedureScopeClause()
         { n8.addNode(n9); }
         n10=PerformFlavour()
         { n8.addNode(n10); }
         { n2 = new NodeChoice(n8, 1); }
      |
         LOOKAHEAD(StatementList() <END_PERFORM>)
         { n11 = new NodeSequence(3); }
         n12=StatementList()
         { n11.addNode(n12); }
         n14=<END_PERFORM> { n13 = JTBToolkit.makeNodeToken(n14); }
         { n11.addNode(n13); }
         { n2 = new NodeChoice(n11, 2); }
      |
         n15=PerformProcedureScopeClause()
         { n2 = new NodeChoice(n15, 3); }
      )
      
   )
   
   { return new PerformStatement(n0,n2); }
}

PerformFlavour PerformFlavour() :
{
   NodeChoice n0;
   PerformTimeClause n1;
   NodeSequence n2;
   NodeOptional n3 = new NodeOptional();
   PerformTestPositionClause n4;
   NodeChoice n5;
   PerformUntilClause n6;
   PerformVaryingWithAfterClause n7;

   
}
{
   (
      n1=PerformTimeClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      { n2 = new NodeSequence(2); }
      (
         n4=PerformTestPositionClause()
         { n3.addNode(n4); }
      )?
      { n2.addNode(n3); }
      (
         (
            n6=PerformUntilClause()
            { n5 = new NodeChoice(n6, 0); }
         |
            n7=PerformVaryingWithAfterClause()
            { n5 = new NodeChoice(n7, 1); }
         )
         
      )
      { n2.addNode(n5); }
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new PerformFlavour(n0); }
}

PerformVaryingWithAfterClause PerformVaryingWithAfterClause() :
{
   NodeToken n0;
   Token n1;
   PerformVaryingPhrase n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   PerformVaryingPhrase n7;

   
}
{
   n1=<VARYING> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=PerformVaryingPhrase()
   (
      { n4 = new NodeSequence(2); }
      n6=<AFTER> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=PerformVaryingPhrase()
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )*
   { n3.nodes.trimToSize(); }
   
   { return new PerformVaryingWithAfterClause(n0,n2,n3); }
}

PerformVaryingPhrase PerformVaryingPhrase() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   NodeChoice n3;
   Identifier n4;
   Literal n5;
   NodeToken n6;
   Token n7;
   NodeChoice n8;
   Identifier n9;
   Literal n10;
   PerformUntilClause n11;

   
}
{
   n0=Identifier()
   n2=<FROM> { n1 = JTBToolkit.makeNodeToken(n2); }
   (
      (
         n4=Identifier()
         { n3 = new NodeChoice(n4, 0); }
      |
         n5=Literal()
         { n3 = new NodeChoice(n5, 1); }
      )
      
   )
   n7=<BY> { n6 = JTBToolkit.makeNodeToken(n7); }
   (
      (
         n9=Identifier()
         { n8 = new NodeChoice(n9, 0); }
      |
         n10=Literal()
         { n8 = new NodeChoice(n10, 1); }
      )
      
   )
   n11=PerformUntilClause()
   
   { return new PerformVaryingPhrase(n0,n1,n3,n6,n8,n11); }
}

PerformUntilClause PerformUntilClause() :
{
   NodeToken n0;
   Token n1;
   Condition n2;

   
}
{
   n1=<UNTIL> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Condition()
   
   { return new PerformUntilClause(n0,n2); }
}

PerformTestPositionClause PerformTestPositionClause() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeChoice n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;

   
}
{
   (
      n2=<WITH> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n4=<TEST> { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      (
         n7=<BEFORE> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5 = new NodeChoice(n6, 0); }
      |
         n9=<AFTER> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n5 = new NodeChoice(n8, 1); }
      )
      
   )
   
   { return new PerformTestPositionClause(n0,n3,n5); }
}

PerformProcedureScopeClause PerformProcedureScopeClause() :
{
   ProcedureName n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   ProcedureName n8;

   
}
{
   n0=ProcedureName()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            n5=<THROUGH> { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7=<THRU> { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         )
         
      )
      { n2.addNode(n3); }
      n8=ProcedureName()
      { n2.addNode(n8); }
      { n1.addNode(n2); }
   )?
   
   { return new PerformProcedureScopeClause(n0,n1); }
}

PerformTimeClause PerformTimeClause() :
{
   NodeChoice n0;
   Identifier n1;
   IntegerConstant n2;
   NodeToken n3;
   Token n4;

   
}
{
   (
      (
         n1=Identifier()
         { n0 = new NodeChoice(n1, 0); }
      |
         n2=IntegerConstant()
         { n0 = new NodeChoice(n2, 1); }
      )
      
   )
   n4=<TIMES> { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new PerformTimeClause(n0,n3); }
}

ReadStatement ReadStatement() :
{
   NodeToken n0;
   Token n1;
   FileName n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   NodeOptional n6 = new NodeOptional();
   NodeToken n7;
   Token n8;
   NodeOptional n9 = new NodeOptional();
   NodeSequence n10;
   NodeToken n11;
   Token n12;
   Identifier n13;
   NodeOptional n14 = new NodeOptional();
   NodeSequence n15;
   NodeToken n16;
   Token n17;
   NodeOptional n18;
   NodeToken n19;
   Token n20;
   Identifier n21;
   NodeOptional n22 = new NodeOptional();
   NodeSequence n23;
   NodeToken n24;
   Token n25;
   NodeOptional n26;
   NodeToken n27;
   Token n28;
   StatementList n29;
   NodeOptional n30 = new NodeOptional();
   NodeSequence n31;
   NodeToken n32;
   Token n33;
   NodeToken n34;
   Token n35;
   NodeOptional n36;
   NodeToken n37;
   Token n38;
   StatementList n39;
   NodeOptional n40 = new NodeOptional();
   NodeSequence n41;
   NodeOptional n42;
   NodeToken n43;
   Token n44;
   NodeToken n45;
   Token n46;
   StatementList n47;
   NodeOptional n48 = new NodeOptional();
   NodeSequence n49;
   NodeToken n50;
   Token n51;
   NodeOptional n52;
   NodeToken n53;
   Token n54;
   NodeToken n55;
   Token n56;
   StatementList n57;
   NodeOptional n58 = new NodeOptional();
   NodeToken n59;
   Token n60;

   
}
{
   n1=<READ> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=FileName()
   (
      n5=<NEXT> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
   )?
   (
      n8=<RECORD> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
   )?
   (
      { n10 = new NodeSequence(2); }
      n12=<INTO> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n10.addNode(n11); }
      n13=Identifier()
      { n10.addNode(n13); }
      { n9.addNode(n10); }
   )?
   (
      { n18 = new NodeOptional(); }
      { n15 = new NodeSequence(3); }
      n17=<KEY> { n16 = JTBToolkit.makeNodeToken(n17); }
      { n15.addNode(n16); }
      (
         n20=<IS> { n19 = JTBToolkit.makeNodeToken(n20); }
         { n18.addNode(n19); }
      )?
      { n15.addNode(n18); }
      n21=Identifier()
      { n15.addNode(n21); }
      { n14.addNode(n15); }
   )?
   (
      { n26 = new NodeOptional(); }
      { n23 = new NodeSequence(3); }
      n25=<INVALID> { n24 = JTBToolkit.makeNodeToken(n25); }
      { n23.addNode(n24); }
      (
         n28=<KEY> { n27 = JTBToolkit.makeNodeToken(n28); }
         { n26.addNode(n27); }
      )?
      { n23.addNode(n26); }
      n29=StatementList()
      { n23.addNode(n29); }
      { n22.addNode(n23); }
   )?
   (
      { n36 = new NodeOptional(); }
      { n31 = new NodeSequence(4); }
      n33=<NOT> { n32 = JTBToolkit.makeNodeToken(n33); }
      { n31.addNode(n32); }
      n35=<INVALID> { n34 = JTBToolkit.makeNodeToken(n35); }
      { n31.addNode(n34); }
      (
         n38=<KEY> { n37 = JTBToolkit.makeNodeToken(n38); }
         { n36.addNode(n37); }
      )?
      { n31.addNode(n36); }
      n39=StatementList()
      { n31.addNode(n39); }
      { n30.addNode(n31); }
   )?
   (
      { n42 = new NodeOptional(); }
      { n41 = new NodeSequence(3); }
      (
         n44=<AT> { n43 = JTBToolkit.makeNodeToken(n44); }
         { n42.addNode(n43); }
      )?
      { n41.addNode(n42); }
      n46=<END> { n45 = JTBToolkit.makeNodeToken(n46); }
      { n41.addNode(n45); }
      n47=StatementList()
      { n41.addNode(n47); }
      { n40.addNode(n41); }
   )?
   (
      { n52 = new NodeOptional(); }
      { n49 = new NodeSequence(4); }
      n51=<NOT> { n50 = JTBToolkit.makeNodeToken(n51); }
      { n49.addNode(n50); }
      (
         n54=<AT> { n53 = JTBToolkit.makeNodeToken(n54); }
         { n52.addNode(n53); }
      )?
      { n49.addNode(n52); }
      n56=<END> { n55 = JTBToolkit.makeNodeToken(n56); }
      { n49.addNode(n55); }
      n57=StatementList()
      { n49.addNode(n57); }
      { n48.addNode(n49); }
   )?
   (
      n60=<END_READ> { n59 = JTBToolkit.makeNodeToken(n60); }
      { n58.addNode(n59); }
   )?
   
   { return new ReadStatement(n0,n2,n3,n6,n9,n14,n22,n30,n40,n48,n58); }
}

ReleaseStatement ReleaseStatement() :
{
   NodeToken n0;
   Token n1;
   RecordName n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   Identifier n7;

   
}
{
   n1=<RELEASE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=RecordName()
   (
      { n4 = new NodeSequence(2); }
      n6=<FROM> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=Identifier()
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )?
   
   { return new ReleaseStatement(n0,n2,n3); }
}

ReturnStatement ReturnStatement() :
{
   NodeToken n0;
   Token n1;
   FileName n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   NodeOptional n6 = new NodeOptional();
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   Identifier n10;
   NodeOptional n11 = new NodeOptional();
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   StatementList n16;
   NodeOptional n17 = new NodeOptional();
   NodeSequence n18;
   NodeToken n19;
   Token n20;
   NodeOptional n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   StatementList n26;
   NodeOptional n27 = new NodeOptional();
   NodeToken n28;
   Token n29;

   
}
{
   n1=<RETURN> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=FileName()
   (
      n5=<RECORD> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
   )?
   (
      { n7 = new NodeSequence(2); }
      n9=<INTO> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n7.addNode(n8); }
      n10=Identifier()
      { n7.addNode(n10); }
      { n6.addNode(n7); }
   )?
   (
      n13=<AT> { n12 = JTBToolkit.makeNodeToken(n13); }
      { n11.addNode(n12); }
   )?
   n15=<END> { n14 = JTBToolkit.makeNodeToken(n15); }
   n16=StatementList()
   (
      { n21 = new NodeOptional(); }
      { n18 = new NodeSequence(4); }
      n20=<NOT> { n19 = JTBToolkit.makeNodeToken(n20); }
      { n18.addNode(n19); }
      (
         n23=<AT> { n22 = JTBToolkit.makeNodeToken(n23); }
         { n21.addNode(n22); }
      )?
      { n18.addNode(n21); }
      n25=<END> { n24 = JTBToolkit.makeNodeToken(n25); }
      { n18.addNode(n24); }
      n26=StatementList()
      { n18.addNode(n26); }
      { n17.addNode(n18); }
   )?
   (
      n29=<END_RETURN> { n28 = JTBToolkit.makeNodeToken(n29); }
      { n27.addNode(n28); }
   )?
   
   { return new ReturnStatement(n0,n2,n3,n6,n11,n14,n16,n17,n27); }
}

RewriteStatement RewriteStatement() :
{
   NodeToken n0;
   Token n1;
   RecordName n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   Identifier n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeOptional n12;
   NodeToken n13;
   Token n14;
   StatementList n15;
   NodeOptional n16 = new NodeOptional();
   NodeSequence n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NodeOptional n22;
   NodeToken n23;
   Token n24;
   StatementList n25;
   NodeOptional n26 = new NodeOptional();
   NodeToken n27;
   Token n28;

   
}
{
   n1=<REWRITE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=RecordName()
   (
      { n4 = new NodeSequence(2); }
      n6=<FROM> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=Identifier()
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )?
   (
      { n12 = new NodeOptional(); }
      { n9 = new NodeSequence(3); }
      n11=<INVALID> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      (
         n14=<KEY> { n13 = JTBToolkit.makeNodeToken(n14); }
         { n12.addNode(n13); }
      )?
      { n9.addNode(n12); }
      n15=StatementList()
      { n9.addNode(n15); }
      { n8.addNode(n9); }
   )?
   (
      { n22 = new NodeOptional(); }
      { n17 = new NodeSequence(4); }
      n19=<NOT> { n18 = JTBToolkit.makeNodeToken(n19); }
      { n17.addNode(n18); }
      n21=<INVALID> { n20 = JTBToolkit.makeNodeToken(n21); }
      { n17.addNode(n20); }
      (
         n24=<KEY> { n23 = JTBToolkit.makeNodeToken(n24); }
         { n22.addNode(n23); }
      )?
      { n17.addNode(n22); }
      n25=StatementList()
      { n17.addNode(n25); }
      { n16.addNode(n17); }
   )?
   (
      n28=<END_REWRITE> { n27 = JTBToolkit.makeNodeToken(n28); }
      { n26.addNode(n27); }
   )?
   
   { return new RewriteStatement(n0,n2,n3,n8,n16,n26); }
}

SearchStatement SearchStatement() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   Identifier n5;
   NodeOptional n6 = new NodeOptional();
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   Identifier n10;
   NodeOptional n11 = new NodeOptional();
   NodeSequence n12;
   NodeOptional n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   StatementList n18;
   NodeList n19 = new NodeList();
   NodeSequence n20;
   NodeToken n21;
   Token n22;
   Condition n23;
   NodeChoice n24;
   StatementList n25;
   NodeSequence n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   NodeOptional n31 = new NodeOptional();
   NodeToken n32;
   Token n33;

   
}
{
   n1=<SEARCH> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<ALL> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n5=Identifier()
   (
      { n7 = new NodeSequence(2); }
      n9=<VARYING> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n7.addNode(n8); }
      n10=Identifier()
      { n7.addNode(n10); }
      { n6.addNode(n7); }
   )?
   (
      { n13 = new NodeOptional(); }
      { n12 = new NodeSequence(3); }
      (
         n15=<AT> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n13.addNode(n14); }
      )?
      { n12.addNode(n13); }
      n17=<END> { n16 = JTBToolkit.makeNodeToken(n17); }
      { n12.addNode(n16); }
      n18=StatementList()
      { n12.addNode(n18); }
      { n11.addNode(n12); }
   )?
   (
      { n20 = new NodeSequence(3); }
      n22=<WHEN> { n21 = JTBToolkit.makeNodeToken(n22); }
      { n20.addNode(n21); }
      n23=Condition()
      { n20.addNode(n23); }
      (
         (
            n25=StatementList()
            { n24 = new NodeChoice(n25, 0); }
         |
            { n26 = new NodeSequence(2); }
            n28=<NEXT> { n27 = JTBToolkit.makeNodeToken(n28); }
            { n26.addNode(n27); }
            n30=<SENTENCE> { n29 = JTBToolkit.makeNodeToken(n30); }
            { n26.addNode(n29); }
            { n24 = new NodeChoice(n26, 1); }
         )
         
      )
      { n20.addNode(n24); }
      { n19.addNode(n20); }
   )+
   { n19.nodes.trimToSize(); }
   (
      n33=<END_SEARCH> { n32 = JTBToolkit.makeNodeToken(n33); }
      { n31.addNode(n32); }
   )?
   
   { return new SearchStatement(n0,n2,n5,n6,n11,n19,n31); }
}

SetStatement SetStatement() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeChoice n5;
   Identifier n6;
   Literal n7;
   NodeListOptional n8 = new NodeListOptional();
   NodeChoice n9;
   NodeSequence n10;
   NodeOptional n11;
   NodeToken n12;
   Token n13;
   Identifier n14;
   Literal n15;
   NodeChoice n16;
   NodeSequence n17;
   NodeToken n18;
   Token n19;
   NodeOptional n20 = new NodeOptional();
   NodeToken n21;
   Token n22;
   NodeChoice n23;
   Identifier n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   NodeSequence n33;
   NodeOptional n34 = new NodeOptional();
   NodeToken n35;
   Token n36;
   Literal n37;
   NodeSequence n38;
   NodeChoice n39;
   NodeToken n40;
   Token n41;
   NodeToken n42;
   Token n43;
   NodeOptional n44 = new NodeOptional();
   NodeToken n45;
   Token n46;
   NodeChoice n47;
   Identifier n48;
   Literal n49;

   
}
{
   n1=<SET> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<CONFIGURATION> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   (
      (
         n6=Identifier()
         { n5 = new NodeChoice(n6, 0); }
      |
         n7=Literal()
         { n5 = new NodeChoice(n7, 1); }
      )
      
   )
   (
      { n11 = new NodeOptional(); }
      (
         { n10 = new NodeSequence(2); }
         (
            n13=<COMMACHAR> { n12 = JTBToolkit.makeNodeToken(n13); }
            { n11.addNode(n12); }
         )?
         { n10.addNode(n11); }
         n14=Identifier()
         { n10.addNode(n14); }
         { n9 = new NodeChoice(n10, 0); }
      |
         n15=Literal()
         { n9 = new NodeChoice(n15, 1); }
      )
      { n8.addNode(n9); }
   )*
   { n8.nodes.trimToSize(); }
   (
      (
         { n17 = new NodeSequence(3); }
         n19=<TO> { n18 = JTBToolkit.makeNodeToken(n19); }
         { n17.addNode(n18); }
         (
            n22=<CONFIGURATION> { n21 = JTBToolkit.makeNodeToken(n22); }
            { n20.addNode(n21); }
         )?
         { n17.addNode(n20); }
         (
            (
               n24=Identifier()
               { n23 = new NodeChoice(n24, 0); }
            |
               n26=<TRUE> { n25 = JTBToolkit.makeNodeToken(n26); }
               { n23 = new NodeChoice(n25, 1); }
            |
               n28=<FALSE> { n27 = JTBToolkit.makeNodeToken(n28); }
               { n23 = new NodeChoice(n27, 2); }
            |
               n30=<ON> { n29 = JTBToolkit.makeNodeToken(n30); }
               { n23 = new NodeChoice(n29, 3); }
            |
               n32=<OFF> { n31 = JTBToolkit.makeNodeToken(n32); }
               { n23 = new NodeChoice(n31, 4); }
            |
               { n33 = new NodeSequence(2); }
               (
                  n36=<ENTRY> { n35 = JTBToolkit.makeNodeToken(n36); }
                  { n34.addNode(n35); }
               )?
               { n33.addNode(n34); }
               n37=Literal()
               { n33.addNode(n37); }
               { n23 = new NodeChoice(n33, 5); }
            )
            
         )
         { n17.addNode(n23); }
         { n16 = new NodeChoice(n17, 0); }
      |
         { n38 = new NodeSequence(3); }
         (
            (
               n41=<UP> { n40 = JTBToolkit.makeNodeToken(n41); }
               { n39 = new NodeChoice(n40, 0); }
            |
               n43=<DOWN> { n42 = JTBToolkit.makeNodeToken(n43); }
               { n39 = new NodeChoice(n42, 1); }
            )
            
         )
         { n38.addNode(n39); }
         (
            n46=<BY> { n45 = JTBToolkit.makeNodeToken(n46); }
            { n44.addNode(n45); }
         )?
         { n38.addNode(n44); }
         (
            (
               n48=Identifier()
               { n47 = new NodeChoice(n48, 0); }
            |
               n49=Literal()
               { n47 = new NodeChoice(n49, 1); }
            )
            
         )
         { n38.addNode(n47); }
         { n16 = new NodeChoice(n38, 1); }
      )
      
   )
   
   { return new SetStatement(n0,n2,n5,n8,n16); }
}

SortStatement SortStatement() :
{
   NodeToken n0;
   Token n1;
   FileName n2;
   NodeList n3 = new NodeList();
   NodeSequence n4;
   NodeOptional n5;
   NodeToken n6;
   Token n7;
   NodeChoice n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeOptional n13;
   NodeToken n14;
   Token n15;
   NodeList n16;
   Identifier n17;
   NodeOptional n18 = new NodeOptional();
   NodeSequence n19;
   NodeOptional n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeOptional n25;
   NodeToken n26;
   Token n27;
   NodeOptional n28;
   NodeToken n29;
   Token n30;
   NodeOptional n31 = new NodeOptional();
   NodeSequence n32;
   NodeOptional n33;
   NodeToken n34;
   Token n35;
   NodeToken n36;
   Token n37;
   NodeOptional n38;
   NodeToken n39;
   Token n40;
   AlphabetName n41;
   NodeChoice n42;
   NodeSequence n43;
   NodeToken n44;
   Token n45;
   NodeList n46 = new NodeList();
   FileName n47;
   NodeSequence n48;
   NodeToken n49;
   Token n50;
   NodeToken n51;
   Token n52;
   NodeOptional n53 = new NodeOptional();
   NodeToken n54;
   Token n55;
   ProcedureName n56;
   NodeOptional n57 = new NodeOptional();
   NodeSequence n58;
   NodeChoice n59;
   NodeToken n60;
   Token n61;
   NodeToken n62;
   Token n63;
   ProcedureName n64;
   NodeChoice n65;
   NodeSequence n66;
   NodeToken n67;
   Token n68;
   NodeList n69 = new NodeList();
   FileName n70;
   NodeSequence n71;
   NodeToken n72;
   Token n73;
   NodeToken n74;
   Token n75;
   NodeOptional n76 = new NodeOptional();
   NodeToken n77;
   Token n78;
   ProcedureName n79;
   NodeOptional n80 = new NodeOptional();
   NodeSequence n81;
   NodeChoice n82;
   NodeToken n83;
   Token n84;
   NodeToken n85;
   Token n86;
   ProcedureName n87;

   
}
{
   n1=<SORT> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=FileName()
   (
      { n5 = new NodeOptional(); }
      { n13 = new NodeOptional(); }
      { n16 = new NodeList(); }
      { n4 = new NodeSequence(4); }
      (
         n7=<ON> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5.addNode(n6); }
      )?
      { n4.addNode(n5); }
      (
         (
            n10=<ASCENDING> { n9 = JTBToolkit.makeNodeToken(n10); }
            { n8 = new NodeChoice(n9, 0); }
         |
            n12=<DESCENDING> { n11 = JTBToolkit.makeNodeToken(n12); }
            { n8 = new NodeChoice(n11, 1); }
         )
         
      )
      { n4.addNode(n8); }
      (
         n15=<KEY> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n13.addNode(n14); }
      )?
      { n4.addNode(n13); }
      (
         n17=Identifier()
         { n16.addNode(n17); }
      )+
      { n16.nodes.trimToSize(); }
      { n4.addNode(n16); }
      { n3.addNode(n4); }
   )+
   { n3.nodes.trimToSize(); }
   (
      { n20 = new NodeOptional(); }
      { n25 = new NodeOptional(); }
      { n28 = new NodeOptional(); }
      { n19 = new NodeSequence(4); }
      (
         n22=<WITH> { n21 = JTBToolkit.makeNodeToken(n22); }
         { n20.addNode(n21); }
      )?
      { n19.addNode(n20); }
      n24=<DUPLICATES> { n23 = JTBToolkit.makeNodeToken(n24); }
      { n19.addNode(n23); }
      (
         n27=<IN> { n26 = JTBToolkit.makeNodeToken(n27); }
         { n25.addNode(n26); }
      )?
      { n19.addNode(n25); }
      (
         n30=<ORDER> { n29 = JTBToolkit.makeNodeToken(n30); }
         { n28.addNode(n29); }
      )?
      { n19.addNode(n28); }
      { n18.addNode(n19); }
   )?
   (
      { n33 = new NodeOptional(); }
      { n38 = new NodeOptional(); }
      { n32 = new NodeSequence(4); }
      (
         n35=<COLLATING> { n34 = JTBToolkit.makeNodeToken(n35); }
         { n33.addNode(n34); }
      )?
      { n32.addNode(n33); }
      n37=<SEQUENCE> { n36 = JTBToolkit.makeNodeToken(n37); }
      { n32.addNode(n36); }
      (
         n40=<IS> { n39 = JTBToolkit.makeNodeToken(n40); }
         { n38.addNode(n39); }
      )?
      { n32.addNode(n38); }
      n41=AlphabetName()
      { n32.addNode(n41); }
      { n31.addNode(n32); }
   )?
   (
      (
         { n43 = new NodeSequence(2); }
         n45=<USING> { n44 = JTBToolkit.makeNodeToken(n45); }
         { n43.addNode(n44); }
         (
            n47=FileName()
            { n46.addNode(n47); }
         )+
         { n46.nodes.trimToSize(); }
         { n43.addNode(n46); }
         { n42 = new NodeChoice(n43, 0); }
      |
         { n48 = new NodeSequence(5); }
         n50=<INPUT> { n49 = JTBToolkit.makeNodeToken(n50); }
         { n48.addNode(n49); }
         n52=<PROCEDURE> { n51 = JTBToolkit.makeNodeToken(n52); }
         { n48.addNode(n51); }
         (
            n55=<IS> { n54 = JTBToolkit.makeNodeToken(n55); }
            { n53.addNode(n54); }
         )?
         { n48.addNode(n53); }
         n56=ProcedureName()
         { n48.addNode(n56); }
         (
            { n58 = new NodeSequence(2); }
            (
               (
                  n61=<THROUGH> { n60 = JTBToolkit.makeNodeToken(n61); }
                  { n59 = new NodeChoice(n60, 0); }
               |
                  n63=<THRU> { n62 = JTBToolkit.makeNodeToken(n63); }
                  { n59 = new NodeChoice(n62, 1); }
               )
               
            )
            { n58.addNode(n59); }
            n64=ProcedureName()
            { n58.addNode(n64); }
            { n57.addNode(n58); }
         )?
         { n48.addNode(n57); }
         { n42 = new NodeChoice(n48, 1); }
      )
      
   )
   (
      (
         { n66 = new NodeSequence(2); }
         n68=<GIVING> { n67 = JTBToolkit.makeNodeToken(n68); }
         { n66.addNode(n67); }
         (
            n70=FileName()
            { n69.addNode(n70); }
         )+
         { n69.nodes.trimToSize(); }
         { n66.addNode(n69); }
         { n65 = new NodeChoice(n66, 0); }
      |
         { n71 = new NodeSequence(5); }
         n73=<OUTPUT> { n72 = JTBToolkit.makeNodeToken(n73); }
         { n71.addNode(n72); }
         n75=<PROCEDURE> { n74 = JTBToolkit.makeNodeToken(n75); }
         { n71.addNode(n74); }
         (
            n78=<IS> { n77 = JTBToolkit.makeNodeToken(n78); }
            { n76.addNode(n77); }
         )?
         { n71.addNode(n76); }
         n79=ProcedureName()
         { n71.addNode(n79); }
         (
            { n81 = new NodeSequence(2); }
            (
               (
                  n84=<THROUGH> { n83 = JTBToolkit.makeNodeToken(n84); }
                  { n82 = new NodeChoice(n83, 0); }
               |
                  n86=<THRU> { n85 = JTBToolkit.makeNodeToken(n86); }
                  { n82 = new NodeChoice(n85, 1); }
               )
               
            )
            { n81.addNode(n82); }
            n87=ProcedureName()
            { n81.addNode(n87); }
            { n80.addNode(n81); }
         )?
         { n71.addNode(n80); }
         { n65 = new NodeChoice(n71, 1); }
      )
      
   )
   
   { return new SortStatement(n0,n2,n3,n18,n31,n42,n65); }
}

StartStatement StartStatement() :
{
   NodeToken n0;
   Token n1;
   FileName n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   RelationalOperator n7;
   Identifier n8;
   NodeOptional n9 = new NodeOptional();
   NodeSequence n10;
   NodeToken n11;
   Token n12;
   NodeOptional n13;
   NodeToken n14;
   Token n15;
   StatementList n16;
   NodeOptional n17 = new NodeOptional();
   NodeSequence n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeOptional n23;
   NodeToken n24;
   Token n25;
   StatementList n26;
   NodeOptional n27 = new NodeOptional();
   NodeToken n28;
   Token n29;

   
}
{
   n1=<START> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=FileName()
   (
      { n4 = new NodeSequence(3); }
      n6=<KEY> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=RelationalOperator()
      { n4.addNode(n7); }
      n8=Identifier()
      { n4.addNode(n8); }
      { n3.addNode(n4); }
   )?
   (
      { n13 = new NodeOptional(); }
      { n10 = new NodeSequence(3); }
      n12=<INVALID> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n10.addNode(n11); }
      (
         n15=<KEY> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n13.addNode(n14); }
      )?
      { n10.addNode(n13); }
      n16=StatementList()
      { n10.addNode(n16); }
      { n9.addNode(n10); }
   )?
   (
      { n23 = new NodeOptional(); }
      { n18 = new NodeSequence(4); }
      n20=<NOT> { n19 = JTBToolkit.makeNodeToken(n20); }
      { n18.addNode(n19); }
      n22=<INVALID> { n21 = JTBToolkit.makeNodeToken(n22); }
      { n18.addNode(n21); }
      (
         n25=<KEY> { n24 = JTBToolkit.makeNodeToken(n25); }
         { n23.addNode(n24); }
      )?
      { n18.addNode(n23); }
      n26=StatementList()
      { n18.addNode(n26); }
      { n17.addNode(n18); }
   )?
   (
      n29=<END_START> { n28 = JTBToolkit.makeNodeToken(n29); }
      { n27.addNode(n28); }
   )?
   
   { return new StartStatement(n0,n2,n3,n9,n17,n27); }
}

StopStatement StopStatement() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   Literal n5;

   
}
{
   n1=<STOP> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n4=<RUN> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n2 = new NodeChoice(n3, 0); }
      |
         n5=Literal()
         { n2 = new NodeChoice(n5, 1); }
      )
      
   )
   
   { return new StopStatement(n0,n2); }
}

StringStatement StringStatement() :
{
   NodeToken n0;
   Token n1;
   NodeList n2 = new NodeList();
   NodeSequence n3;
   NodeChoice n4;
   Identifier n5;
   IterableLiteral n6;
   NodeListOptional n7;
   NodeSequence n8;
   NodeOptional n9;
   NodeToken n10;
   Token n11;
   NodeChoice n12;
   Identifier n13;
   IterableLiteral n14;
   NodeToken n15;
   Token n16;
   NodeOptional n17;
   NodeToken n18;
   Token n19;
   NodeChoice n20;
   Identifier n21;
   IterableLiteral n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   Identifier n27;
   NodeOptional n28 = new NodeOptional();
   NodeSequence n29;
   NodeOptional n30;
   NodeToken n31;
   Token n32;
   NodeToken n33;
   Token n34;
   Identifier n35;
   NodeOptional n36 = new NodeOptional();
   NodeSequence n37;
   NodeOptional n38;
   NodeToken n39;
   Token n40;
   NodeToken n41;
   Token n42;
   StatementList n43;
   NodeOptional n44 = new NodeOptional();
   NodeSequence n45;
   NodeToken n46;
   Token n47;
   NodeOptional n48;
   NodeToken n49;
   Token n50;
   NodeToken n51;
   Token n52;
   StatementList n53;
   NodeOptional n54 = new NodeOptional();
   NodeToken n55;
   Token n56;

   
}
{
   n1=<STRING> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n7 = new NodeListOptional(); }
      { n17 = new NodeOptional(); }
      { n3 = new NodeSequence(5); }
      (
         (
            n5=Identifier()
            { n4 = new NodeChoice(n5, 0); }
         |
            n6=IterableLiteral()
            { n4 = new NodeChoice(n6, 1); }
         )
         
      )
      { n3.addNode(n4); }
      (
         { n9 = new NodeOptional(); }
         { n8 = new NodeSequence(2); }
         (
            n11=<COMMACHAR> { n10 = JTBToolkit.makeNodeToken(n11); }
            { n9.addNode(n10); }
         )?
         { n8.addNode(n9); }
         (
            (
               n13=Identifier()
               { n12 = new NodeChoice(n13, 0); }
            |
               n14=IterableLiteral()
               { n12 = new NodeChoice(n14, 1); }
            )
            
         )
         { n8.addNode(n12); }
         { n7.addNode(n8); }
      )*
      { n7.nodes.trimToSize(); }
      { n3.addNode(n7); }
      n16=<DELIMITED> { n15 = JTBToolkit.makeNodeToken(n16); }
      { n3.addNode(n15); }
      (
         n19=<BY> { n18 = JTBToolkit.makeNodeToken(n19); }
         { n17.addNode(n18); }
      )?
      { n3.addNode(n17); }
      (
         (
            n21=Identifier()
            { n20 = new NodeChoice(n21, 0); }
         |
            n22=IterableLiteral()
            { n20 = new NodeChoice(n22, 1); }
         |
            n24=<SIZE> { n23 = JTBToolkit.makeNodeToken(n24); }
            { n20 = new NodeChoice(n23, 2); }
         )
         
      )
      { n3.addNode(n20); }
      { n2.addNode(n3); }
   )+
   { n2.nodes.trimToSize(); }
   n26=<INTO> { n25 = JTBToolkit.makeNodeToken(n26); }
   n27=Identifier()
   (
      { n30 = new NodeOptional(); }
      { n29 = new NodeSequence(3); }
      (
         n32=<WITH> { n31 = JTBToolkit.makeNodeToken(n32); }
         { n30.addNode(n31); }
      )?
      { n29.addNode(n30); }
      n34=<POINTER> { n33 = JTBToolkit.makeNodeToken(n34); }
      { n29.addNode(n33); }
      n35=Identifier()
      { n29.addNode(n35); }
      { n28.addNode(n29); }
   )?
   (
      { n38 = new NodeOptional(); }
      { n37 = new NodeSequence(3); }
      (
         n40=<ON> { n39 = JTBToolkit.makeNodeToken(n40); }
         { n38.addNode(n39); }
      )?
      { n37.addNode(n38); }
      n42=<OVERFLOW> { n41 = JTBToolkit.makeNodeToken(n42); }
      { n37.addNode(n41); }
      n43=StatementList()
      { n37.addNode(n43); }
      { n36.addNode(n37); }
   )?
   (
      { n48 = new NodeOptional(); }
      { n45 = new NodeSequence(4); }
      n47=<NOT> { n46 = JTBToolkit.makeNodeToken(n47); }
      { n45.addNode(n46); }
      (
         n50=<ON> { n49 = JTBToolkit.makeNodeToken(n50); }
         { n48.addNode(n49); }
      )?
      { n45.addNode(n48); }
      n52=<OVERFLOW> { n51 = JTBToolkit.makeNodeToken(n52); }
      { n45.addNode(n51); }
      n53=StatementList()
      { n45.addNode(n53); }
      { n44.addNode(n45); }
   )?
   (
      n56=<END_STRING> { n55 = JTBToolkit.makeNodeToken(n56); }
      { n54.addNode(n55); }
   )?
   
   { return new StringStatement(n0,n2,n25,n27,n28,n36,n44,n54); }
}

SubtractStatement SubtractStatement() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeSequence n3;
   NodeList n4 = new NodeList();
   NodeChoice n5;
   Identifier n6;
   Literal n7;
   NodeToken n8;
   Token n9;
   NodeList n10 = new NodeList();
   NodeSequence n11;
   NodeChoice n12;
   Identifier n13;
   Literal n14;
   NodeOptional n15;
   NodeToken n16;
   Token n17;
   NodeOptional n18 = new NodeOptional();
   NodeSequence n19;
   NodeToken n20;
   Token n21;
   NodeList n22;
   NodeSequence n23;
   Identifier n24;
   NodeOptional n25;
   NodeToken n26;
   Token n27;
   NodeSequence n28;
   NodeChoice n29;
   NodeToken n30;
   Token n31;
   NodeToken n32;
   Token n33;
   Identifier n34;
   NodeToken n35;
   Token n36;
   Identifier n37;
   NodeOptional n38 = new NodeOptional();
   NodeToken n39;
   Token n40;
   NodeOptional n41 = new NodeOptional();
   NodeSequence n42;
   NodeOptional n43;
   NodeToken n44;
   Token n45;
   NodeToken n46;
   Token n47;
   NodeToken n48;
   Token n49;
   StatementList n50;
   NodeOptional n51 = new NodeOptional();
   NodeSequence n52;
   NodeToken n53;
   Token n54;
   NodeOptional n55;
   NodeToken n56;
   Token n57;
   NodeToken n58;
   Token n59;
   NodeToken n60;
   Token n61;
   StatementList n62;
   NodeOptional n63 = new NodeOptional();
   NodeToken n64;
   Token n65;

   
}
{
   n1=<SUBTRACT> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         { n3 = new NodeSequence(4); }
         (
            (
               n6=Identifier()
               { n5 = new NodeChoice(n6, 0); }
            |
               n7=Literal()
               { n5 = new NodeChoice(n7, 1); }
            )
            { n4.addNode(n5); }
         )+
         { n4.nodes.trimToSize(); }
         { n3.addNode(n4); }
         n9=<FROM> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n3.addNode(n8); }
         (
            { n15 = new NodeOptional(); }
            { n11 = new NodeSequence(2); }
            (
               (
                  n13=Identifier()
                  { n12 = new NodeChoice(n13, 0); }
               |
                  n14=Literal()
                  { n12 = new NodeChoice(n14, 1); }
               )
               
            )
            { n11.addNode(n12); }
            (
               n17=<ROUNDED> { n16 = JTBToolkit.makeNodeToken(n17); }
               { n15.addNode(n16); }
            )?
            { n11.addNode(n15); }
            { n10.addNode(n11); }
         )+
         { n10.nodes.trimToSize(); }
         { n3.addNode(n10); }
         (
            { n22 = new NodeList(); }
            { n19 = new NodeSequence(2); }
            n21=<GIVING> { n20 = JTBToolkit.makeNodeToken(n21); }
            { n19.addNode(n20); }
            (
               { n25 = new NodeOptional(); }
               { n23 = new NodeSequence(2); }
               n24=Identifier()
               { n23.addNode(n24); }
               (
                  n27=<ROUNDED> { n26 = JTBToolkit.makeNodeToken(n27); }
                  { n25.addNode(n26); }
               )?
               { n23.addNode(n25); }
               { n22.addNode(n23); }
            )+
            { n22.nodes.trimToSize(); }
            { n19.addNode(n22); }
            { n18.addNode(n19); }
         )?
         { n3.addNode(n18); }
         { n2 = new NodeChoice(n3, 0); }
      |
         { n28 = new NodeSequence(5); }
         (
            (
               n31=<CORRESPONDING> { n30 = JTBToolkit.makeNodeToken(n31); }
               { n29 = new NodeChoice(n30, 0); }
            |
               n33=<CORR> { n32 = JTBToolkit.makeNodeToken(n33); }
               { n29 = new NodeChoice(n32, 1); }
            )
            
         )
         { n28.addNode(n29); }
         n34=Identifier()
         { n28.addNode(n34); }
         n36=<FROM> { n35 = JTBToolkit.makeNodeToken(n36); }
         { n28.addNode(n35); }
         n37=Identifier()
         { n28.addNode(n37); }
         (
            n40=<ROUNDED> { n39 = JTBToolkit.makeNodeToken(n40); }
            { n38.addNode(n39); }
         )?
         { n28.addNode(n38); }
         { n2 = new NodeChoice(n28, 1); }
      )
      
   )
   (
      { n43 = new NodeOptional(); }
      { n42 = new NodeSequence(4); }
      (
         n45=<ON> { n44 = JTBToolkit.makeNodeToken(n45); }
         { n43.addNode(n44); }
      )?
      { n42.addNode(n43); }
      n47=<SIZE> { n46 = JTBToolkit.makeNodeToken(n47); }
      { n42.addNode(n46); }
      n49=<ERROR> { n48 = JTBToolkit.makeNodeToken(n49); }
      { n42.addNode(n48); }
      n50=StatementList()
      { n42.addNode(n50); }
      { n41.addNode(n42); }
   )?
   (
      { n55 = new NodeOptional(); }
      { n52 = new NodeSequence(5); }
      n54=<NOT> { n53 = JTBToolkit.makeNodeToken(n54); }
      { n52.addNode(n53); }
      (
         n57=<ON> { n56 = JTBToolkit.makeNodeToken(n57); }
         { n55.addNode(n56); }
      )?
      { n52.addNode(n55); }
      n59=<SIZE> { n58 = JTBToolkit.makeNodeToken(n59); }
      { n52.addNode(n58); }
      n61=<ERROR> { n60 = JTBToolkit.makeNodeToken(n61); }
      { n52.addNode(n60); }
      n62=StatementList()
      { n52.addNode(n62); }
      { n51.addNode(n52); }
   )?
   (
      n65=<END_SUBTRACT> { n64 = JTBToolkit.makeNodeToken(n65); }
      { n63.addNode(n64); }
   )?
   
   { return new SubtractStatement(n0,n2,n41,n51,n63); }
}

UnstringStatement UnstringStatement() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10;
   NodeToken n11;
   Token n12;
   NodeChoice n13;
   Identifier n14;
   Literal n15;
   NodeListOptional n16;
   NodeSequence n17;
   NodeToken n18;
   Token n19;
   NodeOptional n20;
   NodeToken n21;
   Token n22;
   NodeChoice n23;
   Identifier n24;
   Literal n25;
   NodeToken n26;
   Token n27;
   NodeList n28 = new NodeList();
   NodeSequence n29;
   Identifier n30;
   NodeOptional n31;
   NodeSequence n32;
   NodeToken n33;
   Token n34;
   NodeOptional n35;
   NodeToken n36;
   Token n37;
   Identifier n38;
   NodeOptional n39;
   NodeSequence n40;
   NodeToken n41;
   Token n42;
   NodeOptional n43;
   NodeToken n44;
   Token n45;
   Identifier n46;
   NodeOptional n47 = new NodeOptional();
   NodeSequence n48;
   NodeOptional n49;
   NodeToken n50;
   Token n51;
   NodeToken n52;
   Token n53;
   Identifier n54;
   NodeOptional n55 = new NodeOptional();
   NodeSequence n56;
   NodeToken n57;
   Token n58;
   NodeOptional n59;
   NodeToken n60;
   Token n61;
   Identifier n62;
   NodeOptional n63 = new NodeOptional();
   NodeSequence n64;
   NodeOptional n65;
   NodeToken n66;
   Token n67;
   NodeToken n68;
   Token n69;
   StatementList n70;
   NodeOptional n71 = new NodeOptional();
   NodeSequence n72;
   NodeToken n73;
   Token n74;
   NodeOptional n75;
   NodeToken n76;
   Token n77;
   NodeToken n78;
   Token n79;
   StatementList n80;
   NodeOptional n81 = new NodeOptional();
   NodeToken n82;
   Token n83;

   
}
{
   n1=<UNSTRING> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   (
      { n7 = new NodeOptional(); }
      { n10 = new NodeOptional(); }
      { n16 = new NodeListOptional(); }
      { n4 = new NodeSequence(5); }
      n6=<DELIMITED> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      (
         n9=<BY> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
      )?
      { n4.addNode(n7); }
      (
         n12=<ALL> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n10.addNode(n11); }
      )?
      { n4.addNode(n10); }
      (
         (
            n14=Identifier()
            { n13 = new NodeChoice(n14, 0); }
         |
            n15=Literal()
            { n13 = new NodeChoice(n15, 1); }
         )
         
      )
      { n4.addNode(n13); }
      (
         { n20 = new NodeOptional(); }
         { n17 = new NodeSequence(3); }
         n19=<OR> { n18 = JTBToolkit.makeNodeToken(n19); }
         { n17.addNode(n18); }
         (
            n22=<ALL> { n21 = JTBToolkit.makeNodeToken(n22); }
            { n20.addNode(n21); }
         )?
         { n17.addNode(n20); }
         (
            (
               n24=Identifier()
               { n23 = new NodeChoice(n24, 0); }
            |
               n25=Literal()
               { n23 = new NodeChoice(n25, 1); }
            )
            
         )
         { n17.addNode(n23); }
         { n16.addNode(n17); }
      )*
      { n16.nodes.trimToSize(); }
      { n4.addNode(n16); }
      { n3.addNode(n4); }
   )?
   n27=<INTO> { n26 = JTBToolkit.makeNodeToken(n27); }
   (
      { n31 = new NodeOptional(); }
      { n39 = new NodeOptional(); }
      { n29 = new NodeSequence(3); }
      n30=Identifier()
      { n29.addNode(n30); }
      (
         { n35 = new NodeOptional(); }
         { n32 = new NodeSequence(3); }
         n34=<DELIMITER> { n33 = JTBToolkit.makeNodeToken(n34); }
         { n32.addNode(n33); }
         (
            n37=<IN> { n36 = JTBToolkit.makeNodeToken(n37); }
            { n35.addNode(n36); }
         )?
         { n32.addNode(n35); }
         n38=Identifier()
         { n32.addNode(n38); }
         { n31.addNode(n32); }
      )?
      { n29.addNode(n31); }
      (
         { n43 = new NodeOptional(); }
         { n40 = new NodeSequence(3); }
         n42=<COUNT> { n41 = JTBToolkit.makeNodeToken(n42); }
         { n40.addNode(n41); }
         (
            n45=<IN> { n44 = JTBToolkit.makeNodeToken(n45); }
            { n43.addNode(n44); }
         )?
         { n40.addNode(n43); }
         n46=Identifier()
         { n40.addNode(n46); }
         { n39.addNode(n40); }
      )?
      { n29.addNode(n39); }
      { n28.addNode(n29); }
   )+
   { n28.nodes.trimToSize(); }
   (
      { n49 = new NodeOptional(); }
      { n48 = new NodeSequence(3); }
      (
         n51=<WITH> { n50 = JTBToolkit.makeNodeToken(n51); }
         { n49.addNode(n50); }
      )?
      { n48.addNode(n49); }
      n53=<POINTER> { n52 = JTBToolkit.makeNodeToken(n53); }
      { n48.addNode(n52); }
      n54=Identifier()
      { n48.addNode(n54); }
      { n47.addNode(n48); }
   )?
   (
      { n59 = new NodeOptional(); }
      { n56 = new NodeSequence(3); }
      n58=<TALLYING> { n57 = JTBToolkit.makeNodeToken(n58); }
      { n56.addNode(n57); }
      (
         n61=<IN> { n60 = JTBToolkit.makeNodeToken(n61); }
         { n59.addNode(n60); }
      )?
      { n56.addNode(n59); }
      n62=Identifier()
      { n56.addNode(n62); }
      { n55.addNode(n56); }
   )?
   (
      { n65 = new NodeOptional(); }
      { n64 = new NodeSequence(3); }
      (
         n67=<ON> { n66 = JTBToolkit.makeNodeToken(n67); }
         { n65.addNode(n66); }
      )?
      { n64.addNode(n65); }
      n69=<OVERFLOW> { n68 = JTBToolkit.makeNodeToken(n69); }
      { n64.addNode(n68); }
      n70=StatementList()
      { n64.addNode(n70); }
      { n63.addNode(n64); }
   )?
   (
      { n75 = new NodeOptional(); }
      { n72 = new NodeSequence(4); }
      n74=<NOT> { n73 = JTBToolkit.makeNodeToken(n74); }
      { n72.addNode(n73); }
      (
         n77=<ON> { n76 = JTBToolkit.makeNodeToken(n77); }
         { n75.addNode(n76); }
      )?
      { n72.addNode(n75); }
      n79=<OVERFLOW> { n78 = JTBToolkit.makeNodeToken(n79); }
      { n72.addNode(n78); }
      n80=StatementList()
      { n72.addNode(n80); }
      { n71.addNode(n72); }
   )?
   (
      n83=<END_UNSTRING> { n82 = JTBToolkit.makeNodeToken(n83); }
      { n81.addNode(n82); }
   )?
   
   { return new UnstringStatement(n0,n2,n3,n26,n28,n47,n55,n63,n71,n81); }
}

UseStatement UseStatement() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeSequence n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeOptional n9 = new NodeOptional();
   NodeToken n10;
   Token n11;
   NodeChoice n12;
   NodeList n13 = new NodeList();
   ProcedureName n14;
   NodeSequence n15;
   NodeToken n16;
   Token n17;
   NodeChoice n18;
   NodeToken n19;
   Token n20;
   NodeSequence n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   DataName n26;
   NodeSequence n27;
   NodeOptional n28 = new NodeOptional();
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   NodeOptional n33 = new NodeOptional();
   NodeToken n34;
   Token n35;
   NodeChoice n36;
   NodeChoice n37;
   NodeToken n38;
   Token n39;
   NodeToken n40;
   Token n41;
   NodeSequence n42;
   NodeOptional n43 = new NodeOptional();
   NodeChoice n44;
   NodeToken n45;
   Token n46;
   NodeToken n47;
   Token n48;
   NodeOptional n49 = new NodeOptional();
   NodeChoice n50;
   NodeToken n51;
   Token n52;
   NodeToken n53;
   Token n54;
   NodeToken n55;
   Token n56;
   NodeToken n57;
   Token n58;
   NodeToken n59;
   Token n60;
   NodeOptional n61 = new NodeOptional();
   NodeToken n62;
   Token n63;
   NodeChoice n64;
   NodeList n65 = new NodeList();
   FileName n66;
   NodeToken n67;
   Token n68;
   NodeToken n69;
   Token n70;
   NodeToken n71;
   Token n72;
   NodeToken n73;
   Token n74;

   
}
{
   n1=<USE> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         { n3 = new NodeSequence(4); }
         (
            n6=<FOR> { n5 = JTBToolkit.makeNodeToken(n6); }
            { n4.addNode(n5); }
         )?
         { n3.addNode(n4); }
         n8=<DEBUGGING> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n3.addNode(n7); }
         (
            n11=<ON> { n10 = JTBToolkit.makeNodeToken(n11); }
            { n9.addNode(n10); }
         )?
         { n3.addNode(n9); }
         (
            (
               (
                  n14=ProcedureName()
                  { n13.addNode(n14); }
               )+
               { n13.nodes.trimToSize(); }
               { n12 = new NodeChoice(n13, 0); }
            |
               { n15 = new NodeSequence(2); }
               n17=<ALL> { n16 = JTBToolkit.makeNodeToken(n17); }
               { n15.addNode(n16); }
               (
                  (
                     n20=<PROCEDURES> { n19 = JTBToolkit.makeNodeToken(n20); }
                     { n18 = new NodeChoice(n19, 0); }
                  |
                     { n21 = new NodeSequence(3); }
                     n23=<REFERENCES> { n22 = JTBToolkit.makeNodeToken(n23); }
                     { n21.addNode(n22); }
                     n25=<OF> { n24 = JTBToolkit.makeNodeToken(n25); }
                     { n21.addNode(n24); }
                     n26=DataName()
                     { n21.addNode(n26); }
                     { n18 = new NodeChoice(n21, 1); }
                  )
                  
               )
               { n15.addNode(n18); }
               { n12 = new NodeChoice(n15, 1); }
            )
            
         )
         { n3.addNode(n12); }
         { n2 = new NodeChoice(n3, 0); }
      |
         { n27 = new NodeSequence(7); }
         (
            n30=<GLOBAL> { n29 = JTBToolkit.makeNodeToken(n30); }
            { n28.addNode(n29); }
         )?
         { n27.addNode(n28); }
         n32=<AFTER> { n31 = JTBToolkit.makeNodeToken(n32); }
         { n27.addNode(n31); }
         (
            n35=<STANDARD> { n34 = JTBToolkit.makeNodeToken(n35); }
            { n33.addNode(n34); }
         )?
         { n27.addNode(n33); }
         (
            (
               (
                  (
                     n39=<EXCEPTION> { n38 = JTBToolkit.makeNodeToken(n39); }
                     { n37 = new NodeChoice(n38, 0); }
                  |
                     n41=<ERROR> { n40 = JTBToolkit.makeNodeToken(n41); }
                     { n37 = new NodeChoice(n40, 1); }
                  )
                  
               )
               { n36 = new NodeChoice(n37, 0); }
            |
               { n42 = new NodeSequence(3); }
               (
                  (
                     (
                        n46=<BEGINNING> { n45 = JTBToolkit.makeNodeToken(n46); }
                        { n44 = new NodeChoice(n45, 0); }
                     |
                        n48=<ENDING> { n47 = JTBToolkit.makeNodeToken(n48); }
                        { n44 = new NodeChoice(n47, 1); }
                     )
                     
                  )
                  { n43.addNode(n44); }
               )?
               { n42.addNode(n43); }
               (
                  (
                     (
                        n52=<FILE> { n51 = JTBToolkit.makeNodeToken(n52); }
                        { n50 = new NodeChoice(n51, 0); }
                     |
                        n54=<REEL> { n53 = JTBToolkit.makeNodeToken(n54); }
                        { n50 = new NodeChoice(n53, 1); }
                     |
                        n56=<UNIT> { n55 = JTBToolkit.makeNodeToken(n56); }
                        { n50 = new NodeChoice(n55, 2); }
                     )
                     
                  )
                  { n49.addNode(n50); }
               )?
               { n42.addNode(n49); }
               n58=<LABEL> { n57 = JTBToolkit.makeNodeToken(n58); }
               { n42.addNode(n57); }
               { n36 = new NodeChoice(n42, 1); }
            )
            
         )
         { n27.addNode(n36); }
         n60=<PROCEDURE> { n59 = JTBToolkit.makeNodeToken(n60); }
         { n27.addNode(n59); }
         (
            n63=<ON> { n62 = JTBToolkit.makeNodeToken(n63); }
            { n61.addNode(n62); }
         )?
         { n27.addNode(n61); }
         (
            (
               (
                  n66=FileName()
                  { n65.addNode(n66); }
               )+
               { n65.nodes.trimToSize(); }
               { n64 = new NodeChoice(n65, 0); }
            |
               n68=<INPUT> { n67 = JTBToolkit.makeNodeToken(n68); }
               { n64 = new NodeChoice(n67, 1); }
            |
               n70=<OUTPUT> { n69 = JTBToolkit.makeNodeToken(n70); }
               { n64 = new NodeChoice(n69, 2); }
            |
               n72=<I_O> { n71 = JTBToolkit.makeNodeToken(n72); }
               { n64 = new NodeChoice(n71, 3); }
            |
               n74=<EXTEND> { n73 = JTBToolkit.makeNodeToken(n74); }
               { n64 = new NodeChoice(n73, 4); }
            )
            
         )
         { n27.addNode(n64); }
         { n2 = new NodeChoice(n27, 1); }
      )
      
   )
   
   { return new UseStatement(n0,n2); }
}

WriteStatement WriteStatement() :
{
   NodeToken n0;
   Token n1;
   RecordName n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   Identifier n7;
   NodeOptional n8 = new NodeOptional();
   AdvancingPhrase n9;
   NodeOptional n10 = new NodeOptional();
   NodeSequence n11;
   NodeOptional n12;
   NodeToken n13;
   Token n14;
   NodeChoice n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   StatementList n20;
   NodeOptional n21 = new NodeOptional();
   NodeSequence n22;
   NodeToken n23;
   Token n24;
   NodeOptional n25;
   NodeToken n26;
   Token n27;
   NodeChoice n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   StatementList n33;
   NodeOptional n34 = new NodeOptional();
   NodeSequence n35;
   NodeToken n36;
   Token n37;
   NodeOptional n38;
   NodeToken n39;
   Token n40;
   StatementList n41;
   NodeOptional n42 = new NodeOptional();
   NodeSequence n43;
   NodeToken n44;
   Token n45;
   NodeToken n46;
   Token n47;
   NodeOptional n48;
   NodeToken n49;
   Token n50;
   StatementList n51;
   NodeOptional n52 = new NodeOptional();
   NodeToken n53;
   Token n54;

   
}
{
   n1=<WRITE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=RecordName()
   (
      { n4 = new NodeSequence(2); }
      n6=<FROM> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=Identifier()
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )?
   (
      n9=AdvancingPhrase()
      { n8.addNode(n9); }
   )?
   (
      { n12 = new NodeOptional(); }
      { n11 = new NodeSequence(3); }
      (
         n14=<AT> { n13 = JTBToolkit.makeNodeToken(n14); }
         { n12.addNode(n13); }
      )?
      { n11.addNode(n12); }
      (
         (
            n17=<END_OF_PAGE> { n16 = JTBToolkit.makeNodeToken(n17); }
            { n15 = new NodeChoice(n16, 0); }
         |
            n19=<EOP> { n18 = JTBToolkit.makeNodeToken(n19); }
            { n15 = new NodeChoice(n18, 1); }
         )
         
      )
      { n11.addNode(n15); }
      n20=StatementList()
      { n11.addNode(n20); }
      { n10.addNode(n11); }
   )?
   (
      { n25 = new NodeOptional(); }
      { n22 = new NodeSequence(4); }
      n24=<NOT> { n23 = JTBToolkit.makeNodeToken(n24); }
      { n22.addNode(n23); }
      (
         n27=<AT> { n26 = JTBToolkit.makeNodeToken(n27); }
         { n25.addNode(n26); }
      )?
      { n22.addNode(n25); }
      (
         (
            n30=<END_OF_PAGE> { n29 = JTBToolkit.makeNodeToken(n30); }
            { n28 = new NodeChoice(n29, 0); }
         |
            n32=<EOP> { n31 = JTBToolkit.makeNodeToken(n32); }
            { n28 = new NodeChoice(n31, 1); }
         )
         
      )
      { n22.addNode(n28); }
      n33=StatementList()
      { n22.addNode(n33); }
      { n21.addNode(n22); }
   )?
   (
      { n38 = new NodeOptional(); }
      { n35 = new NodeSequence(3); }
      n37=<INVALID> { n36 = JTBToolkit.makeNodeToken(n37); }
      { n35.addNode(n36); }
      (
         n40=<KEY> { n39 = JTBToolkit.makeNodeToken(n40); }
         { n38.addNode(n39); }
      )?
      { n35.addNode(n38); }
      n41=StatementList()
      { n35.addNode(n41); }
      { n34.addNode(n35); }
   )?
   (
      { n48 = new NodeOptional(); }
      { n43 = new NodeSequence(4); }
      n45=<NOT> { n44 = JTBToolkit.makeNodeToken(n45); }
      { n43.addNode(n44); }
      n47=<INVALID> { n46 = JTBToolkit.makeNodeToken(n47); }
      { n43.addNode(n46); }
      (
         n50=<KEY> { n49 = JTBToolkit.makeNodeToken(n50); }
         { n48.addNode(n49); }
      )?
      { n43.addNode(n48); }
      n51=StatementList()
      { n43.addNode(n51); }
      { n42.addNode(n43); }
   )?
   (
      n54=<END_WRITE> { n53 = JTBToolkit.makeNodeToken(n54); }
      { n52.addNode(n53); }
   )?
   
   { return new WriteStatement(n0,n2,n3,n8,n10,n21,n34,n42,n52); }
}

ServiceStatement ServiceStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   
}
{
   n1=<SERVICE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<LABEL> { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new ServiceStatement(n0,n2); }
}

AdvancingPhrase AdvancingPhrase() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;
   NodeChoice n8;
   NodeToken n9;
   Token n10;
   NodeSequence n11;
   NodeChoice n12;
   IntegerConstant n13;
   Identifier n14;
   Literal n15;
   NodeOptional n16 = new NodeOptional();
   NodeChoice n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   MnemonicName n22;

   
}
{
   (
      (
         n2=<BEFORE> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<AFTER> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   (
      n7=<ADVANCING> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
   )?
   (
      (
         n10=<PAGE> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n8 = new NodeChoice(n9, 0); }
      |
         { n11 = new NodeSequence(2); }
         (
            (
               n13=IntegerConstant()
               { n12 = new NodeChoice(n13, 0); }
            |
               n14=Identifier()
               { n12 = new NodeChoice(n14, 1); }
            |
               n15=Literal()
               { n12 = new NodeChoice(n15, 2); }
            )
            
         )
         { n11.addNode(n12); }
         (
            (
               (
                  n19=<LINE> { n18 = JTBToolkit.makeNodeToken(n19); }
                  { n17 = new NodeChoice(n18, 0); }
               |
                  n21=<LINES> { n20 = JTBToolkit.makeNodeToken(n21); }
                  { n17 = new NodeChoice(n20, 1); }
               )
               
            )
            { n16.addNode(n17); }
         )?
         { n11.addNode(n16); }
         { n8 = new NodeChoice(n11, 1); }
      |
         n22=MnemonicName()
         { n8 = new NodeChoice(n22, 2); }
      )
      
   )
   
   { return new AdvancingPhrase(n0,n5,n8); }
}

DataDescription DataDescription() :
{
   NodeListOptional n0 = new NodeListOptional();
   DataDescriptionEntry n1;
   NodeToken n2;
   Token n3;

   
}
{
   (
      n1=DataDescriptionEntry()
      { n0.addNode(n1); }
   )*
   { n0.nodes.trimToSize(); }
   n3=<EOF> { 
      n3.beginColumn++; n3.endColumn++;
      n2 = JTBToolkit.makeNodeToken(n3);
   }
   
   { return new DataDescription(n0,n2); }
}

SentenceList SentenceList() :
{
   NodeListOptional n0 = new NodeListOptional();
   Sentence n1;
   NodeToken n2;
   Token n3;

   
}
{
   (
      n1=Sentence()
      { n0.addNode(n1); }
   )*
   { n0.nodes.trimToSize(); }
   n3=<EOF> { 
      n3.beginColumn++; n3.endColumn++;
      n2 = JTBToolkit.makeNodeToken(n3);
   }
   
   { return new SentenceList(n0,n2); }
}
