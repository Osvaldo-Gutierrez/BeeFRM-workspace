/*
 *   Copyright (c) 20XX by XXXXXXXX All Rights Reserved.
 *   THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF XXXXXXXX
 *   The copyright notice above does not evidence any actual or intended
 *   publication of such source code.
 */

options {
   LOOKAHEAD = 6;
   FORCE_LA_CHECK = true;
   STATIC = false;
}

PARSER_BEGIN(PrepTex)
package cl.bee.preptex;

import java.io.*;
import java.util.*;
import cl.bee.preptex.syntaxtree.*;
import cl.bee.preptex.util.*;
import cl.bee.preptex.visitor.*;
import org.apache.log4j.*;
import java.util.Vector;


public class PrepTex 
{
   private static Logger logger = Logger.getLogger(PrepTex.class);
   public static void main(String args[])
   {
   }
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      NodeToken node = new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);

      if ( t.specialToken == null )
         return node;

      Vector temp = new Vector();
      Token orig = t;

      while ( t.specialToken != null ) {
         t = t.specialToken;
         temp.addElement(new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn));
      }

      // Reverse the special token list
      for ( int i = temp.size() - 1; i >= 0; --i )
         node.addSpecial((NodeToken)temp.elementAt(i));

      node.trimSpecials();
      return node;
   }
}


PARSER_END(PrepTex)

SKIP :
{
   " "
   | "\n"
   | "\r"
   | "\t"
   | "\f"
}

MORE :
{
   <"!"> : COMMAND_COMMENT_STATE
   | <"TEXT[:"> : TEXT_STATE
}

TOKEN [IGNORE_CASE] :
{
   <IF: "IF">
   | <THEN: "THEN">
   | <ELSE: "ELSE">
   | <END: "END">
   | <WHILE: "WHILE">
   | <EACH: "EACH">
   | <IN: "IN">
   | <FOR: "FOR">
   | <TO: "TO">
   | <STEP: "STEP">
   | <NEXT: "NEXT">
   | <INCLUDE: "INCLUDE">
   | <OF: "OF">
   | <NOT: "NOT">
   | <TRUE: "TRUE">
   | <FALSE: "FALSE">
   | <OR: "OR">
   | <AND: "AND">
   | <COMMA: ",">
   | <LPAREN: "(">
   | <RPAREN: ")">
   | <LBRACE: "{">
   | <RBRACE: "}">
   | <PLUS: "+">
   | <MINUS: "-">
   | <STAR: "*">
   | <SLASH: "/">
   | <EQUAL: "=">
   | <PLUSASSIGN: "+=">
   | <GT: ">">
   | <LT: "<">
   | <LE: "<=">
   | <GE: ">=">
   | <NE: "<>">
   | <IDENTIFIER: <LETTERINI> (<LETTER> | <DIGIT>)*>
   | <DOUBLE: ("-")? (<DIGIT>)+>
   | <STRING: "\"" (~["\"", "\\", "\n", "\r"] | <ESCAPED>)* "\"" | "'" (~["'", "\\", "\n", "\r"] | <ESCAPED>)* "'">
   | <#LETTERINI: ["$", "A"-"Z", "a"-"z"]>
   | <#LETTER: ["$", "A"-"Z", "_", "a"-"z"]>
   | <#DIGIT: ["0"-"9"]>
   | <#ESCAPED: "\\" (<ESC> | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"])>
   | <#ESC: ["n", "t", "b", "r", "f", "\\", "'", "\""]>
}

<COMMAND_COMMENT_STATE> SPECIAL_TOKEN :
{
   <LF_COMMENT: "\n" | "\r" | "\r\n"> : DEFAULT
}

<COMMAND_COMMENT_STATE> MORE :
{
   <~[]>
}

<TEXT_STATE> TOKEN :
{
   <TEXT: ":]"> : DEFAULT
}

<TEXT_STATE> MORE :
{
   <~[]>
}

specification specification() :
{
   statement_list n0;
   NodeToken n1;
   Token n2;

   
}
{
   n0=statement_list()
   n2=<EOF> { 
      n2.beginColumn++; n2.endColumn++;
      n1 = JTBToolkit.makeNodeToken(n2);
   }
   
   { return new specification(n0,n1); }
}

statement_list statement_list() :
{
   NodeListOptional n0 = new NodeListOptional();
   statement n1;

   
}
{
   (
      n1=statement()
      { n0.addNode(n1); }
   )*
   { n0.nodes.trimToSize(); }
   
   { return new statement_list(n0); }
}

statement statement() :
{
   NodeChoice n0;
   assignment_statement n1;
   selection_statement n2;
   iteration_statement n3;
   include_statement n4;
   text_statement n5;

   
}
{
   (
      n1=assignment_statement()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=selection_statement()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=iteration_statement()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=include_statement()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=text_statement()
      { n0 = new NodeChoice(n5, 4); }
   )
   
   { return new statement(n0); }
}

selection_statement selection_statement() :
{
   NodeToken n0;
   Token n1;
   expression_statement n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   statement_list n6;
   NodeOptional n7 = new NodeOptional();
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   statement_list n11;
   NodeToken n12;
   Token n13;

   
}
{
   n1=<IF> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=expression_statement()
   (
      n5=<THEN> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
   )?
   n6=statement_list()
   (
      { n8 = new NodeSequence(2); }
      n10=<ELSE> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n8.addNode(n9); }
      n11=statement_list()
      { n8.addNode(n11); }
      { n7.addNode(n8); }
   )?
   n13=<END> { n12 = JTBToolkit.makeNodeToken(n13); }
   
   { return new selection_statement(n0,n2,n3,n6,n7,n12); }
}

iteration_statement iteration_statement() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   expression_statement n4;
   statement_list n5;
   NodeToken n6;
   Token n7;
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   argument_expression_list n19;
   NodeToken n20;
   Token n21;
   statement_list n22;
   NodeToken n23;
   Token n24;
   NodeSequence n25;
   NodeToken n26;
   Token n27;
   NodeToken n28;
   Token n29;
   NodeToken n30;
   Token n31;
   expression_statement n32;
   NodeToken n33;
   Token n34;
   expression_statement n35;
   NodeOptional n36 = new NodeOptional();
   NodeSequence n37;
   NodeToken n38;
   Token n39;
   expression_statement n40;
   statement_list n41;
   NodeToken n42;
   Token n43;
   NodeToken n44;
   Token n45;

   
}
{
   (
      { n1 = new NodeSequence(4); }
      n3=<WHILE> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n4=expression_statement()
      { n1.addNode(n4); }
      n5=statement_list()
      { n1.addNode(n5); }
      n7=<END> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n1.addNode(n6); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n8 = new NodeSequence(9); }
      n10=<FOR> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n8.addNode(n9); }
      n12=<EACH> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n8.addNode(n11); }
      n14=<IDENTIFIER> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n8.addNode(n13); }
      n16=<IN> { n15 = JTBToolkit.makeNodeToken(n16); }
      { n8.addNode(n15); }
      n18=<LPAREN> { n17 = JTBToolkit.makeNodeToken(n18); }
      { n8.addNode(n17); }
      n19=argument_expression_list()
      { n8.addNode(n19); }
      n21=<RPAREN> { n20 = JTBToolkit.makeNodeToken(n21); }
      { n8.addNode(n20); }
      n22=statement_list()
      { n8.addNode(n22); }
      n24=<END> { n23 = JTBToolkit.makeNodeToken(n24); }
      { n8.addNode(n23); }
      { n0 = new NodeChoice(n8, 1); }
   |
      { n25 = new NodeSequence(10); }
      n27=<FOR> { n26 = JTBToolkit.makeNodeToken(n27); }
      { n25.addNode(n26); }
      n29=<IDENTIFIER> { n28 = JTBToolkit.makeNodeToken(n29); }
      { n25.addNode(n28); }
      n31=<EQUAL> { n30 = JTBToolkit.makeNodeToken(n31); }
      { n25.addNode(n30); }
      n32=expression_statement()
      { n25.addNode(n32); }
      n34=<TO> { n33 = JTBToolkit.makeNodeToken(n34); }
      { n25.addNode(n33); }
      n35=expression_statement()
      { n25.addNode(n35); }
      (
         { n37 = new NodeSequence(2); }
         n39=<STEP> { n38 = JTBToolkit.makeNodeToken(n39); }
         { n37.addNode(n38); }
         n40=expression_statement()
         { n37.addNode(n40); }
         { n36.addNode(n37); }
      )?
      { n25.addNode(n36); }
      n41=statement_list()
      { n25.addNode(n41); }
      n43=<NEXT> { n42 = JTBToolkit.makeNodeToken(n43); }
      { n25.addNode(n42); }
      n45=<IDENTIFIER> { n44 = JTBToolkit.makeNodeToken(n45); }
      { n25.addNode(n44); }
      { n0 = new NodeChoice(n25, 2); }
   )
   
   { return new iteration_statement(n0); }
}

include_statement include_statement() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   identifier_list n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1=<INCLUDE> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n3 = new NodeSequence(2); }
      n4=identifier_list()
      { n3.addNode(n4); }
      n6=<OF> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n3.addNode(n5); }
      { n2.addNode(n3); }
   )?
   n8=<STRING> { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new include_statement(n0,n2,n7); }
}

text_statement text_statement() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<TEXT> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new text_statement(n0); }
}

assignment_statement assignment_statement() :
{
   unary_expression n0;
   assignment_operator n1;
   expression_statement n2;

   
}
{
   n0=unary_expression()
   n1=assignment_operator()
   n2=expression_statement()
   
   { return new assignment_statement(n0,n1,n2); }
}

identifier_list identifier_list() :
{
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n3 = new NodeSequence(2); }
      n5=<COMMA> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n7=<IDENTIFIER> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n3.addNode(n6); }
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   
   { return new identifier_list(n0,n2); }
}

expression_statement expression_statement() :
{
   logical_or_expression n0;

   
}
{
   n0=logical_or_expression()
   
   { return new expression_statement(n0); }
}

assignment_operator assignment_operator() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
   (
      n2=<EQUAL> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<PLUSASSIGN> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new assignment_operator(n0); }
}

logical_or_expression logical_or_expression() :
{
   logical_and_expression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   logical_and_expression n5;

   
}
{
   n0=logical_and_expression()
   (
      { n2 = new NodeSequence(2); }
      n4=<OR> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=logical_and_expression()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new logical_or_expression(n0,n1); }
}

logical_and_expression logical_and_expression() :
{
   equality_expression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   equality_expression n5;

   
}
{
   n0=equality_expression()
   (
      { n2 = new NodeSequence(2); }
      n4=<AND> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=equality_expression()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new logical_and_expression(n0,n1); }
}

equality_expression equality_expression() :
{
   relational_expression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   relational_expression n8;

   
}
{
   n0=relational_expression()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            n5=<EQUAL> { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7=<NE> { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         )
         
      )
      { n2.addNode(n3); }
      n8=relational_expression()
      { n2.addNode(n8); }
      { n1.addNode(n2); }
   )?
   
   { return new equality_expression(n0,n1); }
}

relational_expression relational_expression() :
{
   additive_expression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   additive_expression n12;

   
}
{
   n0=additive_expression()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            n5=<LT> { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7=<GT> { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         |
            n9=<LE> { n8 = JTBToolkit.makeNodeToken(n9); }
            { n3 = new NodeChoice(n8, 2); }
         |
            n11=<GE> { n10 = JTBToolkit.makeNodeToken(n11); }
            { n3 = new NodeChoice(n10, 3); }
         )
         
      )
      { n2.addNode(n3); }
      n12=additive_expression()
      { n2.addNode(n12); }
      { n1.addNode(n2); }
   )?
   
   { return new relational_expression(n0,n1); }
}

additive_expression additive_expression() :
{
   multiplicative_expression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   multiplicative_expression n8;

   
}
{
   n0=multiplicative_expression()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            n5=<PLUS> { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7=<MINUS> { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         )
         
      )
      { n2.addNode(n3); }
      n8=multiplicative_expression()
      { n2.addNode(n8); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new additive_expression(n0,n1); }
}

multiplicative_expression multiplicative_expression() :
{
   unary_expression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   unary_expression n8;

   
}
{
   n0=unary_expression()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            n5=<STAR> { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7=<SLASH> { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         )
         
      )
      { n2.addNode(n3); }
      n8=unary_expression()
      { n2.addNode(n8); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new multiplicative_expression(n0,n1); }
}

unary_expression unary_expression() :
{
   NodeChoice n0;
   postfix_expression n1;
   NodeSequence n2;
   unary_operator n3;
   unary_expression n4;

   
}
{
   (
      n1=postfix_expression()
      { n0 = new NodeChoice(n1, 0); }
   |
      { n2 = new NodeSequence(2); }
      n3=unary_operator()
      { n2.addNode(n3); }
      n4=unary_expression()
      { n2.addNode(n4); }
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new unary_expression(n0); }
}

unary_operator unary_operator() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
   (
      n2=<MINUS> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<NOT> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new unary_operator(n0); }
}

postfix_expression postfix_expression() :
{
   primary_expression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   argument_expression_list n5;
   NodeToken n6;
   Token n7;

   
}
{
   n0=primary_expression()
   (
      { n2 = new NodeSequence(3); }
      n4=<LPAREN> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=argument_expression_list()
      { n2.addNode(n5); }
      n7=<RPAREN> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )?
   
   { return new postfix_expression(n0,n1); }
}

argument_expression_list argument_expression_list() :
{
   expression_statement n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   expression_statement n5;

   
}
{
   n0=expression_statement()
   (
      { n2 = new NodeSequence(2); }
      n4=<COMMA> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=expression_statement()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new argument_expression_list(n0,n1); }
}

primary_expression primary_expression() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   constant n3;
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   expression_statement n7;
   NodeToken n8;
   Token n9;
   NodeSequence n10;
   NodeToken n11;
   Token n12;
   expression_statement n13;
   NodeToken n14;
   Token n15;

   
}
{
   (
      n2=<IDENTIFIER> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n3=constant()
      { n0 = new NodeChoice(n3, 1); }
   |
      { n4 = new NodeSequence(3); }
      n6=<LPAREN> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=expression_statement()
      { n4.addNode(n7); }
      n9=<RPAREN> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n4.addNode(n8); }
      { n0 = new NodeChoice(n4, 2); }
   |
      { n10 = new NodeSequence(3); }
      n12=<LBRACE> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n10.addNode(n11); }
      n13=expression_statement()
      { n10.addNode(n13); }
      n15=<RBRACE> { n14 = JTBToolkit.makeNodeToken(n15); }
      { n10.addNode(n14); }
      { n0 = new NodeChoice(n10, 3); }
   )
   
   { return new primary_expression(n0); }
}

constant constant() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   (
      n2=<DOUBLE> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<STRING> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<TRUE> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<FALSE> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   )
   
   { return new constant(n0); }
}
