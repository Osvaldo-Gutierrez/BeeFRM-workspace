/* Generated By:JavaCC: Do not edit this line. PrepTexConstants.java */
package cl.bee.preptex;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface PrepTexConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int IF = 8;
  /** RegularExpression Id. */
  int THEN = 9;
  /** RegularExpression Id. */
  int ELSE = 10;
  /** RegularExpression Id. */
  int END = 11;
  /** RegularExpression Id. */
  int WHILE = 12;
  /** RegularExpression Id. */
  int EACH = 13;
  /** RegularExpression Id. */
  int IN = 14;
  /** RegularExpression Id. */
  int FOR = 15;
  /** RegularExpression Id. */
  int TO = 16;
  /** RegularExpression Id. */
  int STEP = 17;
  /** RegularExpression Id. */
  int NEXT = 18;
  /** RegularExpression Id. */
  int INCLUDE = 19;
  /** RegularExpression Id. */
  int OF = 20;
  /** RegularExpression Id. */
  int NOT = 21;
  /** RegularExpression Id. */
  int TRUE = 22;
  /** RegularExpression Id. */
  int FALSE = 23;
  /** RegularExpression Id. */
  int OR = 24;
  /** RegularExpression Id. */
  int AND = 25;
  /** RegularExpression Id. */
  int COMMA = 26;
  /** RegularExpression Id. */
  int LPAREN = 27;
  /** RegularExpression Id. */
  int RPAREN = 28;
  /** RegularExpression Id. */
  int LBRACE = 29;
  /** RegularExpression Id. */
  int RBRACE = 30;
  /** RegularExpression Id. */
  int PLUS = 31;
  /** RegularExpression Id. */
  int MINUS = 32;
  /** RegularExpression Id. */
  int STAR = 33;
  /** RegularExpression Id. */
  int SLASH = 34;
  /** RegularExpression Id. */
  int EQUAL = 35;
  /** RegularExpression Id. */
  int PLUSASSIGN = 36;
  /** RegularExpression Id. */
  int GT = 37;
  /** RegularExpression Id. */
  int LT = 38;
  /** RegularExpression Id. */
  int LE = 39;
  /** RegularExpression Id. */
  int GE = 40;
  /** RegularExpression Id. */
  int NE = 41;
  /** RegularExpression Id. */
  int IDENTIFIER = 42;
  /** RegularExpression Id. */
  int DOUBLE = 43;
  /** RegularExpression Id. */
  int STRING = 44;
  /** RegularExpression Id. */
  int LETTERINI = 45;
  /** RegularExpression Id. */
  int LETTER = 46;
  /** RegularExpression Id. */
  int DIGIT = 47;
  /** RegularExpression Id. */
  int ESCAPED = 48;
  /** RegularExpression Id. */
  int ESC = 49;
  /** RegularExpression Id. */
  int LF_COMMENT = 50;
  /** RegularExpression Id. */
  int TEXT = 52;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int COMMAND_COMMENT_STATE = 1;
  /** Lexical state. */
  int TEXT_STATE = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\f\"",
    "\"!\"",
    "\"TEXT[:\"",
    "\"IF\"",
    "\"THEN\"",
    "\"ELSE\"",
    "\"END\"",
    "\"WHILE\"",
    "\"EACH\"",
    "\"IN\"",
    "\"FOR\"",
    "\"TO\"",
    "\"STEP\"",
    "\"NEXT\"",
    "\"INCLUDE\"",
    "\"OF\"",
    "\"NOT\"",
    "\"TRUE\"",
    "\"FALSE\"",
    "\"OR\"",
    "\"AND\"",
    "\",\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"=\"",
    "\"+=\"",
    "\">\"",
    "\"<\"",
    "\"<=\"",
    "\">=\"",
    "\"<>\"",
    "<IDENTIFIER>",
    "<DOUBLE>",
    "<STRING>",
    "<LETTERINI>",
    "<LETTER>",
    "<DIGIT>",
    "<ESCAPED>",
    "<ESC>",
    "<LF_COMMENT>",
    "<token of kind 51>",
    "\":]\"",
    "<token of kind 53>",
  };

}
