/* Generated By:JavaCC: Do not edit this line. FLGParser.java */
package cl.bee.genfrmjava.flgparser;

import java.io.*;
import java.util.*;
import cl.bee.genfrmjava.flgparser.visitor.*;
import cl.bee.genfrmjava.flgparser.syntaxtree.*;
import java.util.Vector;


public class FLGParser implements FLGParserConstants {
   public static void main(String args[])
   {
   }

  final public specification specification() throws ParseException {
   form n0;
   NodeList n1 = new NodeList();
   text n2;
   adef n3;
   NodeList n4 = new NodeList();
   field n5;
   order n6;
   NodeOptional n7 = new NodeOptional();
   NodeList n8;
   ndata n9;
   eofrm n10;
   NodeToken n11;
   Token n12;
    n0 = form();
    label_1:
    while (true) {
      n2 = text();
        n1.addNode(n2);
      if (jj_2_1(2)) {
        ;
      } else {
        break label_1;
      }
    }
     n1.nodes.trimToSize();
    n3 = adef();
    label_2:
    while (true) {
      n5 = field();
        n4.addNode(n5);
      if (jj_2_2(2)) {
        ;
      } else {
        break label_2;
      }
    }
     n4.nodes.trimToSize();
    n6 = order();
    if (jj_2_4(2)) {
        n8 = new NodeList();
      label_3:
      while (true) {
        n9 = ndata();
           n8.addNode(n9);
        if (jj_2_3(2)) {
          ;
        } else {
          break label_3;
        }
      }
        n8.nodes.trimToSize();
        n7.addNode(n8);
    } else {
      ;
    }
    n10 = eofrm();
    n12 = jj_consume_token(0);
      n12.beginColumn++; n12.endColumn++;
      n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new specification(n0,n1,n3,n4,n6,n7,n10,n11);}
    throw new Error("Missing return statement in function");
  }

  final public form form() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeList n2 = new NodeList();
   NodeChoice n3;
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeSequence n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeSequence n29;
   NodeToken n30;
   Token n31;
   NodeToken n32;
   Token n33;
   NodeChoice n34;
   NodeToken n35;
   Token n36;
   NodeToken n37;
   Token n38;
   NodeSequence n39;
   NodeToken n40;
   Token n41;
   NodeToken n42;
   Token n43;
   NodeToken n44;
   Token n45;
   NodeSequence n46;
   NodeToken n47;
   Token n48;
   NodeToken n49;
   Token n50;
   NodeToken n51;
   Token n52;
   NodeSequence n53;
   NodeToken n54;
   Token n55;
   NodeToken n56;
   Token n57;
   NodeToken n58;
   Token n59;
   NodeSequence n60;
   NodeToken n61;
   Token n62;
   NodeToken n63;
   Token n64;
   NodeToken n65;
   Token n66;
   NodeToken n67;
   Token n68;
   NodeToken n69;
   Token n70;
   NodeToken n71;
   Token n72;
    n1 = jj_consume_token(FORM);
               n0 = JTBToolkit.makeNodeToken(n1);
    label_4:
    while (true) {
      if (jj_2_7(2)) {
           n4 = new NodeSequence(3);
        n6 = jj_consume_token(NAME_ST_FORM);
                             n5 = JTBToolkit.makeNodeToken(n6);
           n4.addNode(n5);
        n8 = jj_consume_token(EQUAL_ST_FORM);
                              n7 = JTBToolkit.makeNodeToken(n8);
           n4.addNode(n7);
        n10 = jj_consume_token(STRING_ST_FORM);
                                n9 = JTBToolkit.makeNodeToken(n10);
           n4.addNode(n9);
           n3 = new NodeChoice(n4, 0);
      } else if (jj_2_8(2)) {
           n11 = new NodeSequence(3);
        n13 = jj_consume_token(HELP_FORM);
                           n12 = JTBToolkit.makeNodeToken(n13);
           n11.addNode(n12);
        n15 = jj_consume_token(EQUAL_ST_FORM);
                               n14 = JTBToolkit.makeNodeToken(n15);
           n11.addNode(n14);
        n17 = jj_consume_token(STRING_ST_FORM);
                                n16 = JTBToolkit.makeNodeToken(n17);
           n11.addNode(n16);
           n3 = new NodeChoice(n11, 1);
      } else if (jj_2_9(2)) {
           n18 = new NodeSequence(5);
        n20 = jj_consume_token(AREA_TO_CLEAR);
                               n19 = JTBToolkit.makeNodeToken(n20);
           n18.addNode(n19);
        n22 = jj_consume_token(EQUAL_ST_FORM);
                               n21 = JTBToolkit.makeNodeToken(n22);
           n18.addNode(n21);
        n24 = jj_consume_token(INTEGER_ST_FORM);
                                 n23 = JTBToolkit.makeNodeToken(n24);
           n18.addNode(n23);
        n26 = jj_consume_token(COLON_ST_FORM);
                               n25 = JTBToolkit.makeNodeToken(n26);
           n18.addNode(n25);
        n28 = jj_consume_token(INTEGER_ST_FORM);
                                 n27 = JTBToolkit.makeNodeToken(n28);
           n18.addNode(n27);
           n3 = new NodeChoice(n18, 2);
      } else if (jj_2_10(2)) {
           n29 = new NodeSequence(3);
        n31 = jj_consume_token(WIDTH);
                       n30 = JTBToolkit.makeNodeToken(n31);
           n29.addNode(n30);
        n33 = jj_consume_token(EQUAL_ST_FORM);
                               n32 = JTBToolkit.makeNodeToken(n33);
           n29.addNode(n32);
        if (jj_2_5(2)) {
          n36 = jj_consume_token(INTEGER_ST_FORM);
                                       n35 = JTBToolkit.makeNodeToken(n36);
                 n34 = new NodeChoice(n35, 0);
        } else if (jj_2_6(2)) {
          n38 = jj_consume_token(CURRENT);
                               n37 = JTBToolkit.makeNodeToken(n38);
                 n34 = new NodeChoice(n37, 1);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
           n29.addNode(n34);
           n3 = new NodeChoice(n29, 3);
      } else if (jj_2_11(2)) {
           n39 = new NodeSequence(3);
        n41 = jj_consume_token(BACKGROUND);
                            n40 = JTBToolkit.makeNodeToken(n41);
           n39.addNode(n40);
        n43 = jj_consume_token(EQUAL_ST_FORM);
                               n42 = JTBToolkit.makeNodeToken(n43);
           n39.addNode(n42);
        n45 = jj_consume_token(CURRENT);
                         n44 = JTBToolkit.makeNodeToken(n45);
           n39.addNode(n44);
           n3 = new NodeChoice(n39, 4);
      } else if (jj_2_12(2)) {
           n46 = new NodeSequence(3);
        n48 = jj_consume_token(HIGHLIGHT);
                           n47 = JTBToolkit.makeNodeToken(n48);
           n46.addNode(n47);
        n50 = jj_consume_token(EQUAL_ST_FORM);
                               n49 = JTBToolkit.makeNodeToken(n50);
           n46.addNode(n49);
        n52 = jj_consume_token(REVERSE_FORM);
                              n51 = JTBToolkit.makeNodeToken(n52);
           n46.addNode(n51);
           n3 = new NodeChoice(n46, 5);
      } else if (jj_2_13(2)) {
           n53 = new NodeSequence(3);
        n55 = jj_consume_token(PRE_HELP_ACTION_ROUTINE);
                                         n54 = JTBToolkit.makeNodeToken(n55);
           n53.addNode(n54);
        n57 = jj_consume_token(EQUAL_ST_FORM);
                               n56 = JTBToolkit.makeNodeToken(n57);
           n53.addNode(n56);
        n59 = jj_consume_token(STRING_ST_FORM);
                                n58 = JTBToolkit.makeNodeToken(n59);
           n53.addNode(n58);
           n3 = new NodeChoice(n53, 6);
      } else if (jj_2_14(2)) {
           n60 = new NodeSequence(5);
        n62 = jj_consume_token(POST_HELP_ACTION_ROUTINE);
                                          n61 = JTBToolkit.makeNodeToken(n62);
           n60.addNode(n61);
        n64 = jj_consume_token(EQUAL_ST_FORM);
                               n63 = JTBToolkit.makeNodeToken(n64);
           n60.addNode(n63);
        n66 = jj_consume_token(STRING_ST_FORM);
                                n65 = JTBToolkit.makeNodeToken(n66);
           n60.addNode(n65);
        n68 = jj_consume_token(COLON_ST_FORM);
                               n67 = JTBToolkit.makeNodeToken(n68);
           n60.addNode(n67);
        n70 = jj_consume_token(STRING_ST_FORM);
                                n69 = JTBToolkit.makeNodeToken(n70);
           n60.addNode(n69);
           n3 = new NodeChoice(n60, 7);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
        n2.addNode(n3);
      if (jj_2_15(2)) {
        ;
      } else {
        break label_4;
      }
    }
     n2.nodes.trimToSize();
    n72 = jj_consume_token(SEMICOLON_ST_FORM);
                             n71 = JTBToolkit.makeNodeToken(n72);
     {if (true) return new form(n0,n2,n71);}
    throw new Error("Missing return statement in function");
  }

  final public text text() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeOptional n12 = new NodeOptional();
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeOptional n17 = new NodeOptional();
   NodeSequence n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeListOptional n23 = new NodeListOptional();
   NodeChoice n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
    n1 = jj_consume_token(TEXT);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAR_ST_TEXT);
                       n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(INTEGER_ST_TEXT);
                          n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(COMMA_ST_TEXT);
                        n6 = JTBToolkit.makeNodeToken(n7);
    n9 = jj_consume_token(INTEGER_ST_TEXT);
                          n8 = JTBToolkit.makeNodeToken(n9);
    n11 = jj_consume_token(RPAR_ST_TEXT);
                        n10 = JTBToolkit.makeNodeToken(n11);
    if (jj_2_16(2)) {
      n14 = jj_consume_token(INTEGER_ST_TEXT);
                              n13 = JTBToolkit.makeNodeToken(n14);
        n12.addNode(n13);
    } else {
      ;
    }
    n16 = jj_consume_token(STRING_ST_TEXT);
                          n15 = JTBToolkit.makeNodeToken(n16);
    if (jj_2_17(2)) {
        n18 = new NodeSequence(2);
      n20 = jj_consume_token(AMPERSAND);
                        n19 = JTBToolkit.makeNodeToken(n20);
        n18.addNode(n19);
      n22 = jj_consume_token(STRING_ST_TEXT);
                             n21 = JTBToolkit.makeNodeToken(n22);
        n18.addNode(n21);
        n17.addNode(n18);
    } else {
      ;
    }
    label_5:
    while (true) {
      if (jj_2_18(2)) {
        ;
      } else {
        break label_5;
      }
      if (jj_2_19(2)) {
        n26 = jj_consume_token(BOLD_TEXT);
                           n25 = JTBToolkit.makeNodeToken(n26);
           n24 = new NodeChoice(n25, 0);
      } else if (jj_2_20(2)) {
        n28 = jj_consume_token(BLINK);
                       n27 = JTBToolkit.makeNodeToken(n28);
           n24 = new NodeChoice(n27, 1);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
        n23.addNode(n24);
    }
     n23.nodes.trimToSize();
    n30 = jj_consume_token(SEMICOLON_ST_TEXT);
                             n29 = JTBToolkit.makeNodeToken(n30);
     {if (true) return new text(n0,n2,n4,n6,n8,n10,n12,n15,n17,n23,n29);}
    throw new Error("Missing return statement in function");
  }

  final public adef adef() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeList n4 = new NodeList();
   NodeChoice n5;
   field_assign n6;
   field_attribute n7;
   NodeToken n8;
   Token n9;
    n1 = jj_consume_token(ATTRIBUTE_DEFAULTS);
                             n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(FIELD);
                n2 = JTBToolkit.makeNodeToken(n3);
    label_6:
    while (true) {
      if (jj_2_21(2)) {
        n6 = field_assign();
           n5 = new NodeChoice(n6, 0);
      } else if (jj_2_22(2)) {
        n7 = field_attribute();
           n5 = new NodeChoice(n7, 1);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
        n4.addNode(n5);
      if (jj_2_23(2)) {
        ;
      } else {
        break label_6;
      }
    }
     n4.nodes.trimToSize();
    n9 = jj_consume_token(SEMICOLON_ST_FIELD);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new adef(n0,n2,n4,n8);}
    throw new Error("Missing return statement in function");
  }

  final public field_assign field_assign() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeSequence n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NodeSequence n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   NodeToken n33;
   Token n34;
   NodeToken n35;
   Token n36;
   NodeToken n37;
   Token n38;
   NodeSequence n39;
   NodeToken n40;
   Token n41;
   NodeToken n42;
   Token n43;
   NodeOptional n44 = new NodeOptional();
   NodeToken n45;
   Token n46;
   NodeToken n47;
   Token n48;
   NodeSequence n49;
   NodeToken n50;
   Token n51;
   NodeToken n52;
   Token n53;
   NodeToken n54;
   Token n55;
   NodeToken n56;
   Token n57;
   NodeToken n58;
   Token n59;
   NodeToken n60;
   Token n61;
   NodeToken n62;
   Token n63;
   NodeListOptional n64 = new NodeListOptional();
   NodeSequence n65;
   NodeToken n66;
   Token n67;
   NodeToken n68;
   Token n69;
   NodeToken n70;
   Token n71;
   NodeToken n72;
   Token n73;
   NodeToken n74;
   Token n75;
   NodeToken n76;
   Token n77;
    if (jj_2_26(2)) {
        n1 = new NodeSequence(3);
      n3 = jj_consume_token(CLEAR_CHARACTER);
                             n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n5 = jj_consume_token(EQUAL_ST_FIELD);
                            n4 = JTBToolkit.makeNodeToken(n5);
        n1.addNode(n4);
      n7 = jj_consume_token(STRING_ST_FIELD);
                             n6 = JTBToolkit.makeNodeToken(n7);
        n1.addNode(n6);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_27(2)) {
        n8 = new NodeSequence(3);
      n10 = jj_consume_token(DEF);
                  n9 = JTBToolkit.makeNodeToken(n10);
        n8.addNode(n9);
      n12 = jj_consume_token(EQUAL_ST_FIELD);
                             n11 = JTBToolkit.makeNodeToken(n12);
        n8.addNode(n11);
      n14 = jj_consume_token(STRING_ST_FIELD);
                              n13 = JTBToolkit.makeNodeToken(n14);
        n8.addNode(n13);
        n0 = new NodeChoice(n8, 1);
    } else if (jj_2_28(2)) {
        n15 = new NodeSequence(3);
      n17 = jj_consume_token(HELP);
                   n16 = JTBToolkit.makeNodeToken(n17);
        n15.addNode(n16);
      n19 = jj_consume_token(EQUAL_ST_FIELD);
                             n18 = JTBToolkit.makeNodeToken(n19);
        n15.addNode(n18);
      n21 = jj_consume_token(STRING_ST_FIELD);
                              n20 = JTBToolkit.makeNodeToken(n21);
        n15.addNode(n20);
        n0 = new NodeChoice(n15, 2);
    } else if (jj_2_29(2)) {
        n22 = new NodeSequence(8);
      n24 = jj_consume_token(NAME_ST_FIELD);
                            n23 = JTBToolkit.makeNodeToken(n24);
        n22.addNode(n23);
      n26 = jj_consume_token(EQUAL_ST_FIELD);
                             n25 = JTBToolkit.makeNodeToken(n26);
        n22.addNode(n25);
      n28 = jj_consume_token(STRING_ST_FIELD);
                              n27 = JTBToolkit.makeNodeToken(n28);
        n22.addNode(n27);
      n30 = jj_consume_token(LPAR_ST_FIELD);
                            n29 = JTBToolkit.makeNodeToken(n30);
        n22.addNode(n29);
      n32 = jj_consume_token(INTEGER_ST_FIELD);
                               n31 = JTBToolkit.makeNodeToken(n32);
        n22.addNode(n31);
      n34 = jj_consume_token(COMMA_ST_FIELD);
                             n33 = JTBToolkit.makeNodeToken(n34);
        n22.addNode(n33);
      n36 = jj_consume_token(INTEGER_ST_FIELD);
                               n35 = JTBToolkit.makeNodeToken(n36);
        n22.addNode(n35);
      n38 = jj_consume_token(RPAR_ST_FIELD);
                            n37 = JTBToolkit.makeNodeToken(n38);
        n22.addNode(n37);
        n0 = new NodeChoice(n22, 3);
    } else if (jj_2_30(2)) {
        n39 = new NodeSequence(4);
      n41 = jj_consume_token(PICTURE);
                      n40 = JTBToolkit.makeNodeToken(n41);
        n39.addNode(n40);
      n43 = jj_consume_token(EQUAL_ST_FIELD);
                             n42 = JTBToolkit.makeNodeToken(n43);
        n39.addNode(n42);
      if (jj_2_24(2)) {
        n46 = jj_consume_token(INTEGER_ST_FIELD);
                                  n45 = JTBToolkit.makeNodeToken(n46);
           n44.addNode(n45);
      } else {
        ;
      }
        n39.addNode(n44);
      n48 = jj_consume_token(STRING_ST_FIELD);
                              n47 = JTBToolkit.makeNodeToken(n48);
        n39.addNode(n47);
        n0 = new NodeChoice(n39, 4);
    } else if (jj_2_31(2)) {
        n49 = new NodeSequence(8);
      n51 = jj_consume_token(INDEX_ST_FIELD);
                             n50 = JTBToolkit.makeNodeToken(n51);
        n49.addNode(n50);
      n53 = jj_consume_token(EQUAL_ST_FIELD);
                             n52 = JTBToolkit.makeNodeToken(n53);
        n49.addNode(n52);
      n55 = jj_consume_token(LPAR_ST_FIELD);
                            n54 = JTBToolkit.makeNodeToken(n55);
        n49.addNode(n54);
      n57 = jj_consume_token(INTEGER_ST_FIELD);
                               n56 = JTBToolkit.makeNodeToken(n57);
        n49.addNode(n56);
      n59 = jj_consume_token(COMMA_ST_FIELD);
                             n58 = JTBToolkit.makeNodeToken(n59);
        n49.addNode(n58);
      n61 = jj_consume_token(INTEGER_ST_FIELD);
                               n60 = JTBToolkit.makeNodeToken(n61);
        n49.addNode(n60);
      n63 = jj_consume_token(RPAR_ST_FIELD);
                            n62 = JTBToolkit.makeNodeToken(n63);
        n49.addNode(n62);
      label_7:
      while (true) {
        if (jj_2_25(2)) {
          ;
        } else {
          break label_7;
        }
           n65 = new NodeSequence(6);
        n67 = jj_consume_token(COLON_ST_FIELD);
                                n66 = JTBToolkit.makeNodeToken(n67);
           n65.addNode(n66);
        n69 = jj_consume_token(LPAR_ST_FIELD);
                               n68 = JTBToolkit.makeNodeToken(n69);
           n65.addNode(n68);
        n71 = jj_consume_token(INTEGER_ST_FIELD);
                                  n70 = JTBToolkit.makeNodeToken(n71);
           n65.addNode(n70);
        n73 = jj_consume_token(COMMA_ST_FIELD);
                                n72 = JTBToolkit.makeNodeToken(n73);
           n65.addNode(n72);
        n75 = jj_consume_token(INTEGER_ST_FIELD);
                                  n74 = JTBToolkit.makeNodeToken(n75);
           n65.addNode(n74);
        n77 = jj_consume_token(RPAR_ST_FIELD);
                               n76 = JTBToolkit.makeNodeToken(n77);
           n65.addNode(n76);
           n64.addNode(n65);
      }
        n64.nodes.trimToSize();
        n49.addNode(n64);
        n0 = new NodeChoice(n49, 5);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new field_assign(n0);}
    throw new Error("Missing return statement in function");
  }

  final public field_attribute field_attribute() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   NodeToken n33;
   Token n34;
   NodeToken n35;
   Token n36;
   NodeToken n37;
   Token n38;
   NodeToken n39;
   Token n40;
   NodeToken n41;
   Token n42;
   NodeToken n43;
   Token n44;
   NodeToken n45;
   Token n46;
    if (jj_2_32(2)) {
      n2 = jj_consume_token(BLANK_FILL);
                        n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_33(2)) {
      n4 = jj_consume_token(DISPLAY_ONLY);
                          n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
    } else if (jj_2_34(2)) {
      n6 = jj_consume_token(ECHO);
                  n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
    } else if (jj_2_35(2)) {
      n8 = jj_consume_token(FIXED_DECIMAL);
                           n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
    } else if (jj_2_36(2)) {
      n10 = jj_consume_token(LEFT_JUSTIFIED);
                             n9 = JTBToolkit.makeNodeToken(n10);
        n0 = new NodeChoice(n9, 4);
    } else if (jj_2_37(2)) {
      n12 = jj_consume_token(NOAUTOTAB);
                        n11 = JTBToolkit.makeNodeToken(n12);
        n0 = new NodeChoice(n11, 5);
    } else if (jj_2_38(2)) {
      n14 = jj_consume_token(NOBLINKING);
                         n13 = JTBToolkit.makeNodeToken(n14);
        n0 = new NodeChoice(n13, 6);
    } else if (jj_2_39(2)) {
      n16 = jj_consume_token(NOBOLD);
                     n15 = JTBToolkit.makeNodeToken(n16);
        n0 = new NodeChoice(n15, 7);
    } else if (jj_2_40(2)) {
      n18 = jj_consume_token(NODISPLAY_ONLY);
                             n17 = JTBToolkit.makeNodeToken(n18);
        n0 = new NodeChoice(n17, 8);
    } else if (jj_2_41(2)) {
      n20 = jj_consume_token(NOECHO);
                     n19 = JTBToolkit.makeNodeToken(n20);
        n0 = new NodeChoice(n19, 9);
    } else if (jj_2_42(2)) {
      n22 = jj_consume_token(NOFIXED_DECIMAL);
                              n21 = JTBToolkit.makeNodeToken(n22);
        n0 = new NodeChoice(n21, 10);
    } else if (jj_2_43(2)) {
      n24 = jj_consume_token(NOREVERSE);
                        n23 = JTBToolkit.makeNodeToken(n24);
        n0 = new NodeChoice(n23, 11);
    } else if (jj_2_44(2)) {
      n26 = jj_consume_token(NOSUPERVISOR_ONLY);
                                n25 = JTBToolkit.makeNodeToken(n26);
        n0 = new NodeChoice(n25, 12);
    } else if (jj_2_45(2)) {
      n28 = jj_consume_token(NOSUPPRESS);
                         n27 = JTBToolkit.makeNodeToken(n28);
        n0 = new NodeChoice(n27, 13);
    } else if (jj_2_46(2)) {
      n30 = jj_consume_token(NOUNDERLINE);
                          n29 = JTBToolkit.makeNodeToken(n30);
        n0 = new NodeChoice(n29, 14);
    } else if (jj_2_47(2)) {
      n32 = jj_consume_token(NOUPPERCASE);
                          n31 = JTBToolkit.makeNodeToken(n32);
        n0 = new NodeChoice(n31, 15);
    } else if (jj_2_48(2)) {
      n34 = jj_consume_token(RESPONSE_REQUIRED);
                                n33 = JTBToolkit.makeNodeToken(n34);
        n0 = new NodeChoice(n33, 16);
    } else if (jj_2_49(2)) {
      n36 = jj_consume_token(REVERSE);
                      n35 = JTBToolkit.makeNodeToken(n36);
        n0 = new NodeChoice(n35, 17);
    } else if (jj_2_50(2)) {
      n38 = jj_consume_token(RIGHT_JUSTIFIED);
                              n37 = JTBToolkit.makeNodeToken(n38);
        n0 = new NodeChoice(n37, 18);
    } else if (jj_2_51(2)) {
      n40 = jj_consume_token(SUPPRESS);
                       n39 = JTBToolkit.makeNodeToken(n40);
        n0 = new NodeChoice(n39, 19);
    } else if (jj_2_52(2)) {
      n42 = jj_consume_token(ZERO_FILL);
                        n41 = JTBToolkit.makeNodeToken(n42);
        n0 = new NodeChoice(n41, 20);
    } else if (jj_2_53(2)) {
      n44 = jj_consume_token(BOLD_FIELD);
                         n43 = JTBToolkit.makeNodeToken(n44);
        n0 = new NodeChoice(n43, 21);
    } else if (jj_2_54(2)) {
      n46 = jj_consume_token(UNDERLINE);
                        n45 = JTBToolkit.makeNodeToken(n46);
        n0 = new NodeChoice(n45, 22);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new field_attribute(n0);}
    throw new Error("Missing return statement in function");
  }

  final public field field() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeList n2 = new NodeList();
   NodeChoice n3;
   field_assign n4;
   field_attribute n5;
   NodeToken n6;
   Token n7;
    n1 = jj_consume_token(FIELD);
                n0 = JTBToolkit.makeNodeToken(n1);
    label_8:
    while (true) {
      if (jj_2_55(2)) {
        n4 = field_assign();
           n3 = new NodeChoice(n4, 0);
      } else if (jj_2_56(2)) {
        n5 = field_attribute();
           n3 = new NodeChoice(n5, 1);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
        n2.addNode(n3);
      if (jj_2_57(2)) {
        ;
      } else {
        break label_8;
      }
    }
     n2.nodes.trimToSize();
    n7 = jj_consume_token(SEMICOLON_ST_FIELD);
                             n6 = JTBToolkit.makeNodeToken(n7);
     {if (true) return new field(n0,n2,n6);}
    throw new Error("Missing return statement in function");
  }

  final public order order() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeList n8 = new NodeList();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
    n1 = jj_consume_token(ORDER);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(BEGIN_WITH);
                     n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(EQUAL_ST_ORDER);
                         n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(INTEGER_ST_ORDER);
                           n6 = JTBToolkit.makeNodeToken(n7);
    label_9:
    while (true) {
        n9 = new NodeSequence(3);
      n11 = jj_consume_token(NAME_ST_ORDER);
                            n10 = JTBToolkit.makeNodeToken(n11);
        n9.addNode(n10);
      n13 = jj_consume_token(EQUAL_ST_ORDER);
                             n12 = JTBToolkit.makeNodeToken(n13);
        n9.addNode(n12);
      n15 = jj_consume_token(STRING_ST_ORDER);
                              n14 = JTBToolkit.makeNodeToken(n15);
        n9.addNode(n14);
        n8.addNode(n9);
      if (jj_2_58(2)) {
        ;
      } else {
        break label_9;
      }
    }
     n8.nodes.trimToSize();
    n17 = jj_consume_token(SEMICOLON_ST_ORDER);
                              n16 = JTBToolkit.makeNodeToken(n17);
     {if (true) return new order(n0,n2,n4,n6,n8,n16);}
    throw new Error("Missing return statement in function");
  }

  final public ndata ndata() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeList n2 = new NodeList();
   NodeChoice n3;
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeSequence n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
    n1 = jj_consume_token(NAMED_DATA);
                     n0 = JTBToolkit.makeNodeToken(n1);
    label_10:
    while (true) {
      if (jj_2_59(2)) {
           n4 = new NodeSequence(3);
        n6 = jj_consume_token(INDEX_ST_NAMED_DATA);
                                    n5 = JTBToolkit.makeNodeToken(n6);
           n4.addNode(n5);
        n8 = jj_consume_token(EQUAL_ST_NAMED_DATA);
                                    n7 = JTBToolkit.makeNodeToken(n8);
           n4.addNode(n7);
        n10 = jj_consume_token(INTEGER_ST_NAMED_DATA);
                                       n9 = JTBToolkit.makeNodeToken(n10);
           n4.addNode(n9);
           n3 = new NodeChoice(n4, 0);
      } else if (jj_2_60(2)) {
           n11 = new NodeSequence(3);
        n13 = jj_consume_token(NAME_ST_NAMED_DATA);
                                    n12 = JTBToolkit.makeNodeToken(n13);
           n11.addNode(n12);
        n15 = jj_consume_token(EQUAL_ST_NAMED_DATA);
                                     n14 = JTBToolkit.makeNodeToken(n15);
           n11.addNode(n14);
        n17 = jj_consume_token(STRING_ST_NAMED_DATA);
                                      n16 = JTBToolkit.makeNodeToken(n17);
           n11.addNode(n16);
           n3 = new NodeChoice(n11, 1);
      } else if (jj_2_61(2)) {
           n18 = new NodeSequence(3);
        n20 = jj_consume_token(DATA);
                      n19 = JTBToolkit.makeNodeToken(n20);
           n18.addNode(n19);
        n22 = jj_consume_token(EQUAL_ST_NAMED_DATA);
                                     n21 = JTBToolkit.makeNodeToken(n22);
           n18.addNode(n21);
        n24 = jj_consume_token(STRING_ST_NAMED_DATA);
                                      n23 = JTBToolkit.makeNodeToken(n24);
           n18.addNode(n23);
           n3 = new NodeChoice(n18, 2);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
        n2.addNode(n3);
      if (jj_2_62(2)) {
        ;
      } else {
        break label_10;
      }
    }
     n2.nodes.trimToSize();
    n26 = jj_consume_token(SEMICOLON_ST_NAMED_DATA);
                                   n25 = JTBToolkit.makeNodeToken(n26);
     {if (true) return new ndata(n0,n2,n25);}
    throw new Error("Missing return statement in function");
  }

  final public eofrm eofrm() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
    n1 = jj_consume_token(END_OF_FORM);
                      n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(NAME);
               n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(EQUAL);
                n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(STRING);
                 n6 = JTBToolkit.makeNodeToken(n7);
    n9 = jj_consume_token(SEMICOLON);
                    n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new eofrm(n0,n2,n4,n6,n8);}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(NAMED_DATA)) return true;
    Token xsp;
    if (jj_3_62()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_62()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_30() {
    if (jj_scan_token(PICTURE)) return true;
    if (jj_scan_token(EQUAL_ST_FIELD)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(INTEGER_ST_FORM)) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(INTEGER_ST_TEXT)) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(TEXT)) return true;
    if (jj_scan_token(LPAR_ST_TEXT)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(WIDTH)) return true;
    if (jj_scan_token(EQUAL_ST_FORM)) return true;
    return false;
  }

  private boolean jj_3_54() {
    if (jj_scan_token(UNDERLINE)) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_scan_token(NAME_ST_FIELD)) return true;
    if (jj_scan_token(EQUAL_ST_FIELD)) return true;
    return false;
  }

  private boolean jj_3_53() {
    if (jj_scan_token(BOLD_FIELD)) return true;
    return false;
  }

  private boolean jj_3_52() {
    if (jj_scan_token(ZERO_FILL)) return true;
    return false;
  }

  private boolean jj_3_51() {
    if (jj_scan_token(SUPPRESS)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(AREA_TO_CLEAR)) return true;
    if (jj_scan_token(EQUAL_ST_FORM)) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_scan_token(HELP)) return true;
    if (jj_scan_token(EQUAL_ST_FIELD)) return true;
    return false;
  }

  private boolean jj_3_50() {
    if (jj_scan_token(RIGHT_JUSTIFIED)) return true;
    return false;
  }

  private boolean jj_3_49() {
    if (jj_scan_token(REVERSE)) return true;
    return false;
  }

  private boolean jj_3_48() {
    if (jj_scan_token(RESPONSE_REQUIRED)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(HELP_FORM)) return true;
    if (jj_scan_token(EQUAL_ST_FORM)) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(DEF)) return true;
    if (jj_scan_token(EQUAL_ST_FIELD)) return true;
    return false;
  }

  private boolean jj_3_47() {
    if (jj_scan_token(NOUPPERCASE)) return true;
    return false;
  }

  private boolean jj_3_46() {
    if (jj_scan_token(NOUNDERLINE)) return true;
    return false;
  }

  private boolean jj_3_45() {
    if (jj_scan_token(NOSUPPRESS)) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_58() {
    if (jj_scan_token(NAME_ST_ORDER)) return true;
    if (jj_scan_token(EQUAL_ST_ORDER)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(NAME_ST_FORM)) return true;
    if (jj_scan_token(EQUAL_ST_FORM)) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_scan_token(CLEAR_CHARACTER)) return true;
    if (jj_scan_token(EQUAL_ST_FIELD)) return true;
    return false;
  }

  private boolean jj_3_44() {
    if (jj_scan_token(NOSUPERVISOR_ONLY)) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_43() {
    if (jj_scan_token(NOREVERSE)) return true;
    return false;
  }

  private boolean jj_3_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) return true;
    }
    return false;
  }

  private boolean jj_3_42() {
    if (jj_scan_token(NOFIXED_DECIMAL)) return true;
    return false;
  }

  private boolean jj_3_4() {
    Token xsp;
    if (jj_3_3()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_3()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_41() {
    if (jj_scan_token(NOECHO)) return true;
    return false;
  }

  private boolean jj_3_40() {
    if (jj_scan_token(NODISPLAY_ONLY)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_39() {
    if (jj_scan_token(NOBOLD)) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(COLON_ST_FIELD)) return true;
    if (jj_scan_token(LPAR_ST_FIELD)) return true;
    return false;
  }

  private boolean jj_3_38() {
    if (jj_scan_token(NOBLINKING)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(POST_HELP_ACTION_ROUTINE)) return true;
    if (jj_scan_token(EQUAL_ST_FORM)) return true;
    return false;
  }

  private boolean jj_3_61() {
    if (jj_scan_token(DATA)) return true;
    if (jj_scan_token(EQUAL_ST_NAMED_DATA)) return true;
    return false;
  }

  private boolean jj_3_37() {
    if (jj_scan_token(NOAUTOTAB)) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_scan_token(LEFT_JUSTIFIED)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(PRE_HELP_ACTION_ROUTINE)) return true;
    if (jj_scan_token(EQUAL_ST_FORM)) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_scan_token(FIXED_DECIMAL)) return true;
    return false;
  }

  private boolean jj_3_60() {
    if (jj_scan_token(NAME_ST_NAMED_DATA)) return true;
    if (jj_scan_token(EQUAL_ST_NAMED_DATA)) return true;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_scan_token(ECHO)) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_scan_token(BLINK)) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_scan_token(DISPLAY_ONLY)) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(BOLD_TEXT)) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_scan_token(INDEX_ST_FIELD)) return true;
    if (jj_scan_token(EQUAL_ST_FIELD)) return true;
    return false;
  }

  private boolean jj_3_56() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(HIGHLIGHT)) return true;
    if (jj_scan_token(EQUAL_ST_FORM)) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_scan_token(BLANK_FILL)) return true;
    return false;
  }

  private boolean jj_3_55() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) return true;
    }
    return false;
  }

  private boolean jj_3_59() {
    if (jj_scan_token(INDEX_ST_NAMED_DATA)) return true;
    if (jj_scan_token(EQUAL_ST_NAMED_DATA)) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(INTEGER_ST_FIELD)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3_42()) {
    jj_scanpos = xsp;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3_45()) {
    jj_scanpos = xsp;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3_48()) {
    jj_scanpos = xsp;
    if (jj_3_49()) {
    jj_scanpos = xsp;
    if (jj_3_50()) {
    jj_scanpos = xsp;
    if (jj_3_51()) {
    jj_scanpos = xsp;
    if (jj_3_52()) {
    jj_scanpos = xsp;
    if (jj_3_53()) {
    jj_scanpos = xsp;
    if (jj_3_54()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_55()) {
    jj_scanpos = xsp;
    if (jj_3_56()) return true;
    }
    return false;
  }

  private boolean jj_3_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_59()) {
    jj_scanpos = xsp;
    if (jj_3_60()) {
    jj_scanpos = xsp;
    if (jj_3_61()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(BACKGROUND)) return true;
    if (jj_scan_token(EQUAL_ST_FORM)) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(AMPERSAND)) return true;
    if (jj_scan_token(STRING_ST_TEXT)) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(FIELD)) return true;
    Token xsp;
    if (jj_3_57()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_57()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(CURRENT)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public FLGParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[62];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public FLGParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public FLGParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new FLGParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public FLGParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new FLGParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public FLGParser(FLGParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(FLGParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[94];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 94; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 62; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      NodeToken node = new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);

      if ( t.specialToken == null )
         return node;

      Vector temp = new Vector();
      Token orig = t;

      while ( t.specialToken != null ) {
         t = t.specialToken;
         temp.addElement(new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn));
      }

      // Reverse the special token list
      for ( int i = temp.size() - 1; i >= 0; --i )
         node.addSpecial((NodeToken)temp.elementAt(i));

      node.trimSpecials();
      return node;
   }
}
