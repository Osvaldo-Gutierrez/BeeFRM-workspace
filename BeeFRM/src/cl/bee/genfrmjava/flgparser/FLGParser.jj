/*
 *   Copyright (c) 20XX by XXXXXXXX All Rights Reserved.
 *   THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF XXXXXXXX
 *   The copyright notice above does not evidence any actual or intended
 *   publication of such source code.
 */

options {
   FORCE_LA_CHECK = true;
   LOOKAHEAD = 2;
   STATIC = false;
}

PARSER_BEGIN(FLGParser)
package cl.bee.genfrmjava.flgparser;

import java.io.*;
import java.util.*;
import cl.bee.genfrmjava.flgparser.visitor.*;
import cl.bee.genfrmjava.flgparser.syntaxtree.*;
import java.util.Vector;


public class FLGParser 
{
   public static void main(String args[])
   {
   }
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      NodeToken node = new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);

      if ( t.specialToken == null )
         return node;

      Vector temp = new Vector();
      Token orig = t;

      while ( t.specialToken != null ) {
         t = t.specialToken;
         temp.addElement(new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn));
      }

      // Reverse the special token list
      for ( int i = temp.size() - 1; i >= 0; --i )
         node.addSpecial((NodeToken)temp.elementAt(i));

      node.trimSpecials();
      return node;
   }
}


PARSER_END(FLGParser)

<*> SKIP :
{
   " "
   | "\t"
   | "\n"
   | "\r"
   | "\f"
}

<COMMENT_STATE> SPECIAL_TOKEN :
{
   <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n"> : DEFAULT
}

<COMMENT_STATE> MORE :
{
   <~[]>
}

MORE :
{
   "!" : COMMENT_STATE
}

TOKEN :
{
   <FORM: "FORM"> : FORM_STATE
   | <TEXT: "TEXT"> : TEXT_STATE
   | <ATTRIBUTE_DEFAULTS: "ATTRIBUTE_DEFAULTS">
   | <FIELD: "FIELD"> : FIELD_STATE
   | <ORDER: "ORDER"> : ORDER_STATE
   | <NAMED_DATA: "NAMED_DATA"> : NAMED_DATA_STATE
   | <END_OF_FORM: "END_OF_FORM">
   | <NAME: "NAME">
   | <EQUAL: "=">
   | <SEMICOLON: ";">
   | <STRING: "'" (~["'", "\n", "\r"] | "'" "'")* "'">
}

<FORM_STATE> TOKEN :
{
   <AREA_TO_CLEAR: "AREA_TO_CLEAR">
   | <BACKGROUND: "BACKGROUND">
   | <CURRENT: "CURRENT">
   | <BLACK: "BLACK">
   | <HIGHLIGHT: "HIGHLIGHT">
   | <REVERSE_FORM: "REVERSE">
   | <HELP_FORM: "HELP_FORM">
   | <NAME_ST_FORM: "NAME">
   | <PRE_HELP_ACTION_ROUTINE: "PRE_HELP_ACTION_ROUTINE">
   | <POST_HELP_ACTION_ROUTINE: "POST_HELP_ACTION_ROUTINE">
   | <WIDTH: "WIDTH">
   | <COLON_ST_FORM: ":">
   | <EQUAL_ST_FORM: "=">
   | <SEMICOLON_ST_FORM: ";"> : DEFAULT
   | <INTEGER_ST_FORM: (["0"-"9"])+>
   | <STRING_ST_FORM: "'" (~["'", "\n", "\r"] | "'" "'")* "'">
}

<TEXT_STATE> TOKEN :
{
   <BOLD_TEXT: "BOLD">
   | <BLINK: "BLINK">
   | <REVERSE_TEXT: "REVERSE">
   | <UNDERLINE_TEXT: "UNDERLINE">
   | <AMPERSAND: "&">
   | <COMMA_ST_TEXT: ",">
   | <LPAR_ST_TEXT: "(">
   | <RPAR_ST_TEXT: ")">
   | <SEMICOLON_ST_TEXT: ";"> : DEFAULT
   | <INTEGER_ST_TEXT: (["0"-"9"])+>
   | <STRING_ST_TEXT: "'" (~["'", "\n", "\r"] | "'" "'")* "'">
}

<FIELD_STATE> TOKEN :
{
   <BLANK_FILL: "BLANK_FILL">
   | <CLEAR_CHARACTER: "CLEAR_CHARACTER">
   | <DEF: "DEFAULT">
   | <DISPLAY_ONLY: "DISPLAY_ONLY">
   | <ECHO: "ECHO">
   | <FIXED_DECIMAL: "FIXED_DECIMAL">
   | <HELP: "HELP">
   | <INDEX_ST_FIELD: "INDEX">
   | <LEFT_JUSTIFIED: "LEFT_JUSTIFIED">
   | <NAME_ST_FIELD: "NAME">
   | <NOAUTOTAB: "NOAUTOTAB">
   | <NOBLINKING: "NOBLINKING">
   | <NOBOLD: "NOBOLD">
   | <NODISPLAY_ONLY: "NODISPLAY_ONLY">
   | <NOECHO: "NOECHO">
   | <NOFIXED_DECIMAL: "NOFIXED_DECIMAL">
   | <NOREVERSE: "NOREVERSE">
   | <NOSUPERVISOR_ONLY: "NOSUPERVISOR_ONLY">
   | <NOSUPPRESS: "NOSUPPRESS">
   | <NOUNDERLINE: "NOUNDERLINE">
   | <NOUPPERCASE: "NOUPPERCASE">
   | <PICTURE: "PICTURE">
   | <RESPONSE_REQUIRED: "RESPONSE_REQUIRED">
   | <REVERSE: "REVERSE">
   | <RIGHT_JUSTIFIED: "RIGHT_JUSTIFIED">
   | <SUPPRESS: "SUPPRESS">
   | <ZERO_FILL: "ZERO_FILL">
   | <BOLD_FIELD: "BOLD">
   | <UNDERLINE: "UNDERLINE">
   | <COLON_ST_FIELD: ":">
   | <COMMA_ST_FIELD: ",">
   | <EQUAL_ST_FIELD: "=">
   | <LPAR_ST_FIELD: "(">
   | <RPAR_ST_FIELD: ")">
   | <SEMICOLON_ST_FIELD: ";"> : DEFAULT
   | <INTEGER_ST_FIELD: (["0"-"9"])+>
   | <STRING_ST_FIELD: "'" (~["'", "\n", "\r"] | "'" "'")* "'">
}

<ORDER_STATE> TOKEN :
{
   <BEGIN_WITH: "BEGIN_WITH">
   | <NAME_ST_ORDER: "NAME">
   | <EQUAL_ST_ORDER: "=">
   | <SEMICOLON_ST_ORDER: ";"> : DEFAULT
   | <INTEGER_ST_ORDER: (["0"-"9"])+>
   | <STRING_ST_ORDER: "'" (~["'", "\n", "\r"] | "'" "'")* "'">
}

<NAMED_DATA_STATE> TOKEN :
{
   <INDEX_ST_NAMED_DATA: "INDEX">
   | <DATA: "DATA">
   | <NAME_ST_NAMED_DATA: "NAME">
   | <EQUAL_ST_NAMED_DATA: "=">
   | <SEMICOLON_ST_NAMED_DATA: ";"> : DEFAULT
   | <INTEGER_ST_NAMED_DATA: (["0"-"9"])+>
   | <STRING_ST_NAMED_DATA: "'" (~["'", "\n", "\r"] | "'" "'")* "'">
}

specification specification() :
{
   form n0;
   NodeList n1 = new NodeList();
   text n2;
   adef n3;
   NodeList n4 = new NodeList();
   field n5;
   order n6;
   NodeOptional n7 = new NodeOptional();
   NodeList n8;
   ndata n9;
   eofrm n10;
   NodeToken n11;
   Token n12;

   
}
{
   n0=form()
   (
      n2=text()
      { n1.addNode(n2); }
   )+
   { n1.nodes.trimToSize(); }
   n3=adef()
   (
      n5=field()
      { n4.addNode(n5); }
   )+
   { n4.nodes.trimToSize(); }
   n6=order()
   (
      { n8 = new NodeList(); }
      (
         n9=ndata()
         { n8.addNode(n9); }
      )+
      { n8.nodes.trimToSize(); }
      { n7.addNode(n8); }
   )?
   n10=eofrm()
   n12=<EOF> { 
      n12.beginColumn++; n12.endColumn++;
      n11 = JTBToolkit.makeNodeToken(n12);
   }
   
   { return new specification(n0,n1,n3,n4,n6,n7,n10,n11); }
}

form form() :
{
   NodeToken n0;
   Token n1;
   NodeList n2 = new NodeList();
   NodeChoice n3;
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeSequence n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeSequence n29;
   NodeToken n30;
   Token n31;
   NodeToken n32;
   Token n33;
   NodeChoice n34;
   NodeToken n35;
   Token n36;
   NodeToken n37;
   Token n38;
   NodeSequence n39;
   NodeToken n40;
   Token n41;
   NodeToken n42;
   Token n43;
   NodeChoice n75;  
   NodeToken n73;   
   Token n74;
   NodeToken n44;
   Token n45;
   NodeSequence n46;
   NodeToken n47;
   Token n48;
   NodeToken n49;
   Token n50;
   NodeToken n51;
   Token n52;
   NodeSequence n53;
   NodeToken n54;
   Token n55;
   NodeToken n56;
   Token n57;
   NodeToken n58;
   Token n59;
   NodeSequence n60;
   NodeToken n61;
   Token n62;
   NodeToken n63;
   Token n64;
   NodeToken n65;
   Token n66;
   NodeToken n67;
   Token n68;
   NodeToken n69;
   Token n70;
   NodeToken n71;
   Token n72;

   
}
{
   n1=<FORM> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         { n4 = new NodeSequence(3); }
         n6=<NAME_ST_FORM> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4.addNode(n5); }
         n8=<EQUAL_ST_FORM> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n4.addNode(n7); }
         n10=<STRING_ST_FORM> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n4.addNode(n9); }
         { n3 = new NodeChoice(n4, 0); }
      |
         { n11 = new NodeSequence(3); }
         n13=<HELP_FORM> { n12 = JTBToolkit.makeNodeToken(n13); }
         { n11.addNode(n12); }
         n15=<EQUAL_ST_FORM> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n11.addNode(n14); }
         n17=<STRING_ST_FORM> { n16 = JTBToolkit.makeNodeToken(n17); }
         { n11.addNode(n16); }
         { n3 = new NodeChoice(n11, 1); }
      |
         { n18 = new NodeSequence(5); }
         n20=<AREA_TO_CLEAR> { n19 = JTBToolkit.makeNodeToken(n20); }
         { n18.addNode(n19); }
         n22=<EQUAL_ST_FORM> { n21 = JTBToolkit.makeNodeToken(n22); }
         { n18.addNode(n21); }
         n24=<INTEGER_ST_FORM> { n23 = JTBToolkit.makeNodeToken(n24); }
         { n18.addNode(n23); }
         n26=<COLON_ST_FORM> { n25 = JTBToolkit.makeNodeToken(n26); }
         { n18.addNode(n25); }
         n28=<INTEGER_ST_FORM> { n27 = JTBToolkit.makeNodeToken(n28); }
         { n18.addNode(n27); }
         { n3 = new NodeChoice(n18, 2); }
      |
         { n29 = new NodeSequence(3); }
         n31=<WIDTH> { n30 = JTBToolkit.makeNodeToken(n31); }
         { n29.addNode(n30); }
         n33=<EQUAL_ST_FORM> { n32 = JTBToolkit.makeNodeToken(n33); }
         { n29.addNode(n32); }
         (
            (
               n36=<INTEGER_ST_FORM> { n35 = JTBToolkit.makeNodeToken(n36); }
               { n34 = new NodeChoice(n35, 0); }
            |
               n38=<CURRENT> { n37 = JTBToolkit.makeNodeToken(n38); }
               { n34 = new NodeChoice(n37, 1); }
            )
            
         )
         { n29.addNode(n34); }
         { n3 = new NodeChoice(n29, 3); }
      |
         { n39 = new NodeSequence(3); }
         n41=<BACKGROUND> { n40 = JTBToolkit.makeNodeToken(n41); }
         { n39.addNode(n40); }
         n43=<EQUAL_ST_FORM> { n42 = JTBToolkit.makeNodeToken(n43); }
         { n39.addNode(n42); }
         (
            (
               n74=<BLACK> { n73 = JTBToolkit.makeNodeToken(n74); }
               { n75 = new NodeChoice(n73, 0); }
            |
               n45=<CURRENT> { n44 = JTBToolkit.makeNodeToken(n45); }
               { n75 = new NodeChoice(n44, 1); }
            )

         )
         { n39.addNode(n75); }
         { n3 = new NodeChoice(n39, 4); }
      |
         { n46 = new NodeSequence(3); }
         n48=<HIGHLIGHT> { n47 = JTBToolkit.makeNodeToken(n48); }
         { n46.addNode(n47); }
         n50=<EQUAL_ST_FORM> { n49 = JTBToolkit.makeNodeToken(n50); }
         { n46.addNode(n49); }
         n52=<REVERSE_FORM> { n51 = JTBToolkit.makeNodeToken(n52); }
         { n46.addNode(n51); }
         { n3 = new NodeChoice(n46, 5); }
      |
         { n53 = new NodeSequence(3); }
         n55=<PRE_HELP_ACTION_ROUTINE> { n54 = JTBToolkit.makeNodeToken(n55); }
         { n53.addNode(n54); }
         n57=<EQUAL_ST_FORM> { n56 = JTBToolkit.makeNodeToken(n57); }
         { n53.addNode(n56); }
         n59=<STRING_ST_FORM> { n58 = JTBToolkit.makeNodeToken(n59); }
         { n53.addNode(n58); }
         { n3 = new NodeChoice(n53, 6); }
      |
         { n60 = new NodeSequence(5); }
         n62=<POST_HELP_ACTION_ROUTINE> { n61 = JTBToolkit.makeNodeToken(n62); }
         { n60.addNode(n61); }
         n64=<EQUAL_ST_FORM> { n63 = JTBToolkit.makeNodeToken(n64); }
         { n60.addNode(n63); }
         n66=<STRING_ST_FORM> { n65 = JTBToolkit.makeNodeToken(n66); }
         { n60.addNode(n65); }
         n68=<COLON_ST_FORM> { n67 = JTBToolkit.makeNodeToken(n68); }
         { n60.addNode(n67); }
         n70=<STRING_ST_FORM> { n69 = JTBToolkit.makeNodeToken(n70); }
         { n60.addNode(n69); }
         { n3 = new NodeChoice(n60, 7); }
      )
      { n2.addNode(n3); }
   )+
   { n2.nodes.trimToSize(); }
   n72=<SEMICOLON_ST_FORM> { n71 = JTBToolkit.makeNodeToken(n72); }
   
   { return new form(n0,n2,n71); }
}

text text() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeOptional n12 = new NodeOptional();
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeOptional n17 = new NodeOptional();
   NodeSequence n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeListOptional n23 = new NodeListOptional();
   NodeChoice n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   NodeToken n33;
   Token n34; 
}
{
   n1=<TEXT> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<LPAR_ST_TEXT> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<INTEGER_ST_TEXT> { n4 = JTBToolkit.makeNodeToken(n5); }
   n7=<COMMA_ST_TEXT> { n6 = JTBToolkit.makeNodeToken(n7); }
   n9=<INTEGER_ST_TEXT> { n8 = JTBToolkit.makeNodeToken(n9); }
   n11=<RPAR_ST_TEXT> { n10 = JTBToolkit.makeNodeToken(n11); }
   (
      n14=<INTEGER_ST_TEXT> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n12.addNode(n13); }
   )?
   n16=<STRING_ST_TEXT> { n15 = JTBToolkit.makeNodeToken(n16); }
   (
      { n18 = new NodeSequence(2); }
      n20=<AMPERSAND> { n19 = JTBToolkit.makeNodeToken(n20); }
      { n18.addNode(n19); }
      n22=<STRING_ST_TEXT> { n21 = JTBToolkit.makeNodeToken(n22); }
      { n18.addNode(n21); }
      { n17.addNode(n18); }
   )?
   (
      (
         n26=<BOLD_TEXT> { n25 = JTBToolkit.makeNodeToken(n26); }
         { n24 = new NodeChoice(n25, 0); }
      |
         n28=<BLINK> { n27 = JTBToolkit.makeNodeToken(n28); }
         { n24 = new NodeChoice(n27, 1); }
      |
         n32=<REVERSE_TEXT> { n31 = JTBToolkit.makeNodeToken(n32); }
         { n24 = new NodeChoice(n31, 1); }
      |
         n34=<UNDERLINE_TEXT> { n33 = JTBToolkit.makeNodeToken(n34); }
         { n24 = new NodeChoice(n33, 1); }
      )
      { n23.addNode(n24); }
   )*
   { n23.nodes.trimToSize(); }
   n30=<SEMICOLON_ST_TEXT> { n29 = JTBToolkit.makeNodeToken(n30); }
   
   { return new text(n0,n2,n4,n6,n8,n10,n12,n15,n17,n23,n29); }
}

adef adef() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeList n4 = new NodeList();
   NodeChoice n5;
   field_assign n6;
   field_attribute n7;
   NodeToken n8;
   Token n9;

   
}
{
   n1=<ATTRIBUTE_DEFAULTS> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<FIELD> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      (
         n6=field_assign()
         { n5 = new NodeChoice(n6, 0); }
      |
         n7=field_attribute()
         { n5 = new NodeChoice(n7, 1); }
      )
      { n4.addNode(n5); }
   )+
   { n4.nodes.trimToSize(); }
   n9=<SEMICOLON_ST_FIELD> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new adef(n0,n2,n4,n8); }
}

field_assign field_assign() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeSequence n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NodeSequence n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   NodeToken n33;
   Token n34;
   NodeToken n35;
   Token n36;
   NodeToken n37;
   Token n38;
   NodeSequence n39;
   NodeToken n40;
   Token n41;
   NodeToken n42;
   Token n43;
   NodeOptional n44 = new NodeOptional();
   NodeToken n45;
   Token n46;
   NodeToken n47;
   Token n48;
   NodeSequence n49;
   NodeToken n50;
   Token n51;
   NodeToken n52;
   Token n53;
   NodeToken n54;
   Token n55;
   NodeToken n56;
   Token n57;
   NodeToken n58;
   Token n59;
   NodeToken n60;
   Token n61;
   NodeToken n62;
   Token n63;
   NodeListOptional n64 = new NodeListOptional();
   NodeSequence n65;
   NodeToken n66;
   Token n67;
   NodeToken n68;
   Token n69;
   NodeToken n70;
   Token n71;
   NodeToken n72;
   Token n73;
   NodeToken n74;
   Token n75;
   NodeToken n76;
   Token n77;

   
}
{
   (
      { n1 = new NodeSequence(3); }
      n3=<CLEAR_CHARACTER> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n5=<EQUAL_ST_FIELD> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n1.addNode(n4); }
      n7=<STRING_ST_FIELD> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n1.addNode(n6); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n8 = new NodeSequence(3); }
      n10=<DEF> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n8.addNode(n9); }
      n12=<EQUAL_ST_FIELD> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n8.addNode(n11); }
      n14=<STRING_ST_FIELD> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n8.addNode(n13); }
      { n0 = new NodeChoice(n8, 1); }
   |
      { n15 = new NodeSequence(3); }
      n17=<HELP> { n16 = JTBToolkit.makeNodeToken(n17); }
      { n15.addNode(n16); }
      n19=<EQUAL_ST_FIELD> { n18 = JTBToolkit.makeNodeToken(n19); }
      { n15.addNode(n18); }
      n21=<STRING_ST_FIELD> { n20 = JTBToolkit.makeNodeToken(n21); }
      { n15.addNode(n20); }
      { n0 = new NodeChoice(n15, 2); }
   |
      { n22 = new NodeSequence(8); }
      n24=<NAME_ST_FIELD> { n23 = JTBToolkit.makeNodeToken(n24); }
      { n22.addNode(n23); }
      n26=<EQUAL_ST_FIELD> { n25 = JTBToolkit.makeNodeToken(n26); }
      { n22.addNode(n25); }
      n28=<STRING_ST_FIELD> { n27 = JTBToolkit.makeNodeToken(n28); }
      { n22.addNode(n27); }
      n30=<LPAR_ST_FIELD> { n29 = JTBToolkit.makeNodeToken(n30); }
      { n22.addNode(n29); }
      n32=<INTEGER_ST_FIELD> { n31 = JTBToolkit.makeNodeToken(n32); }
      { n22.addNode(n31); }
      n34=<COMMA_ST_FIELD> { n33 = JTBToolkit.makeNodeToken(n34); }
      { n22.addNode(n33); }
      n36=<INTEGER_ST_FIELD> { n35 = JTBToolkit.makeNodeToken(n36); }
      { n22.addNode(n35); }
      n38=<RPAR_ST_FIELD> { n37 = JTBToolkit.makeNodeToken(n38); }
      { n22.addNode(n37); }
      { n0 = new NodeChoice(n22, 3); }
   |
      { n39 = new NodeSequence(4); }
      n41=<PICTURE> { n40 = JTBToolkit.makeNodeToken(n41); }
      { n39.addNode(n40); }
      n43=<EQUAL_ST_FIELD> { n42 = JTBToolkit.makeNodeToken(n43); }
      { n39.addNode(n42); }
      (
         n46=<INTEGER_ST_FIELD> { n45 = JTBToolkit.makeNodeToken(n46); }
         { n44.addNode(n45); }
      )?
      { n39.addNode(n44); }
      n48=<STRING_ST_FIELD> { n47 = JTBToolkit.makeNodeToken(n48); }
      { n39.addNode(n47); }
      { n0 = new NodeChoice(n39, 4); }
   |
      { n49 = new NodeSequence(8); }
      n51=<INDEX_ST_FIELD> { n50 = JTBToolkit.makeNodeToken(n51); }
      { n49.addNode(n50); }
      n53=<EQUAL_ST_FIELD> { n52 = JTBToolkit.makeNodeToken(n53); }
      { n49.addNode(n52); }
      n55=<LPAR_ST_FIELD> { n54 = JTBToolkit.makeNodeToken(n55); }
      { n49.addNode(n54); }
      n57=<INTEGER_ST_FIELD> { n56 = JTBToolkit.makeNodeToken(n57); }
      { n49.addNode(n56); }
      n59=<COMMA_ST_FIELD> { n58 = JTBToolkit.makeNodeToken(n59); }
      { n49.addNode(n58); }
      n61=<INTEGER_ST_FIELD> { n60 = JTBToolkit.makeNodeToken(n61); }
      { n49.addNode(n60); }
      n63=<RPAR_ST_FIELD> { n62 = JTBToolkit.makeNodeToken(n63); }
      { n49.addNode(n62); }
      (
         { n65 = new NodeSequence(6); }
         n67=<COLON_ST_FIELD> { n66 = JTBToolkit.makeNodeToken(n67); }
         { n65.addNode(n66); }
         n69=<LPAR_ST_FIELD> { n68 = JTBToolkit.makeNodeToken(n69); }
         { n65.addNode(n68); }
         n71=<INTEGER_ST_FIELD> { n70 = JTBToolkit.makeNodeToken(n71); }
         { n65.addNode(n70); }
         n73=<COMMA_ST_FIELD> { n72 = JTBToolkit.makeNodeToken(n73); }
         { n65.addNode(n72); }
         n75=<INTEGER_ST_FIELD> { n74 = JTBToolkit.makeNodeToken(n75); }
         { n65.addNode(n74); }
         n77=<RPAR_ST_FIELD> { n76 = JTBToolkit.makeNodeToken(n77); }
         { n65.addNode(n76); }
         { n64.addNode(n65); }
      )*
      { n64.nodes.trimToSize(); }
      { n49.addNode(n64); }
      { n0 = new NodeChoice(n49, 5); }
   )
   
   { return new field_assign(n0); }
}

field_attribute field_attribute() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   NodeToken n33;
   Token n34;
   NodeToken n35;
   Token n36;
   NodeToken n37;
   Token n38;
   NodeToken n39;
   Token n40;
   NodeToken n41;
   Token n42;
   NodeToken n43;
   Token n44;
   NodeToken n45;
   Token n46;

   
}
{
   (
      n2=<BLANK_FILL> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<DISPLAY_ONLY> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<ECHO> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<FIXED_DECIMAL> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=<LEFT_JUSTIFIED> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12=<NOAUTOTAB> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      n14=<NOBLINKING> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6); }
   |
      n16=<NOBOLD> { n15 = JTBToolkit.makeNodeToken(n16); }
      { n0 = new NodeChoice(n15, 7); }
   |
      n18=<NODISPLAY_ONLY> { n17 = JTBToolkit.makeNodeToken(n18); }
      { n0 = new NodeChoice(n17, 8); }
   |
      n20=<NOECHO> { n19 = JTBToolkit.makeNodeToken(n20); }
      { n0 = new NodeChoice(n19, 9); }
   |
      n22=<NOFIXED_DECIMAL> { n21 = JTBToolkit.makeNodeToken(n22); }
      { n0 = new NodeChoice(n21, 10); }
   |
      n24=<NOREVERSE> { n23 = JTBToolkit.makeNodeToken(n24); }
      { n0 = new NodeChoice(n23, 11); }
   |
      n26=<NOSUPERVISOR_ONLY> { n25 = JTBToolkit.makeNodeToken(n26); }
      { n0 = new NodeChoice(n25, 12); }
   |
      n28=<NOSUPPRESS> { n27 = JTBToolkit.makeNodeToken(n28); }
      { n0 = new NodeChoice(n27, 13); }
   |
      n30=<NOUNDERLINE> { n29 = JTBToolkit.makeNodeToken(n30); }
      { n0 = new NodeChoice(n29, 14); }
   |
      n32=<NOUPPERCASE> { n31 = JTBToolkit.makeNodeToken(n32); }
      { n0 = new NodeChoice(n31, 15); }
   |
      n34=<RESPONSE_REQUIRED> { n33 = JTBToolkit.makeNodeToken(n34); }
      { n0 = new NodeChoice(n33, 16); }
   |
      n36=<REVERSE> { n35 = JTBToolkit.makeNodeToken(n36); }
      { n0 = new NodeChoice(n35, 17); }
   |
      n38=<RIGHT_JUSTIFIED> { n37 = JTBToolkit.makeNodeToken(n38); }
      { n0 = new NodeChoice(n37, 18); }
   |
      n40=<SUPPRESS> { n39 = JTBToolkit.makeNodeToken(n40); }
      { n0 = new NodeChoice(n39, 19); }
   |
      n42=<ZERO_FILL> { n41 = JTBToolkit.makeNodeToken(n42); }
      { n0 = new NodeChoice(n41, 20); }
   |
      n44=<BOLD_FIELD> { n43 = JTBToolkit.makeNodeToken(n44); }
      { n0 = new NodeChoice(n43, 21); }
   |
      n46=<UNDERLINE> { n45 = JTBToolkit.makeNodeToken(n46); }
      { n0 = new NodeChoice(n45, 22); }
   )
   
   { return new field_attribute(n0); }
}

field field() :
{
   NodeToken n0;
   Token n1;
   NodeList n2 = new NodeList();
   NodeChoice n3;
   field_assign n4;
   field_attribute n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1=<FIELD> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n4=field_assign()
         { n3 = new NodeChoice(n4, 0); }
      |
         n5=field_attribute()
         { n3 = new NodeChoice(n5, 1); }
      )
      { n2.addNode(n3); }
   )+
   { n2.nodes.trimToSize(); }
   n7=<SEMICOLON_ST_FIELD> { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new field(n0,n2,n6); }
}

order order() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeList n8 = new NodeList();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;

   
}
{
   n1=<ORDER> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<BEGIN_WITH> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<EQUAL_ST_ORDER> { n4 = JTBToolkit.makeNodeToken(n5); }
   n7=<INTEGER_ST_ORDER> { n6 = JTBToolkit.makeNodeToken(n7); }
   (
      { n9 = new NodeSequence(3); }
      n11=<NAME_ST_ORDER> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      n13=<EQUAL_ST_ORDER> { n12 = JTBToolkit.makeNodeToken(n13); }
      { n9.addNode(n12); }
      n15=<STRING_ST_ORDER> { n14 = JTBToolkit.makeNodeToken(n15); }
      { n9.addNode(n14); }
      { n8.addNode(n9); }
   )+
   { n8.nodes.trimToSize(); }
   n17=<SEMICOLON_ST_ORDER> { n16 = JTBToolkit.makeNodeToken(n17); }
   
   { return new order(n0,n2,n4,n6,n8,n16); }
}

ndata ndata() :
{
   NodeToken n0;
   Token n1;
   NodeList n2 = new NodeList();
   NodeChoice n3;
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeSequence n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;

   
}
{
   n1=<NAMED_DATA> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         { n4 = new NodeSequence(3); }
         n6=<INDEX_ST_NAMED_DATA> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4.addNode(n5); }
         n8=<EQUAL_ST_NAMED_DATA> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n4.addNode(n7); }
         n10=<INTEGER_ST_NAMED_DATA> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n4.addNode(n9); }
         { n3 = new NodeChoice(n4, 0); }
      |
         { n11 = new NodeSequence(3); }
         n13=<NAME_ST_NAMED_DATA> { n12 = JTBToolkit.makeNodeToken(n13); }
         { n11.addNode(n12); }
         n15=<EQUAL_ST_NAMED_DATA> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n11.addNode(n14); }
         n17=<STRING_ST_NAMED_DATA> { n16 = JTBToolkit.makeNodeToken(n17); }
         { n11.addNode(n16); }
         { n3 = new NodeChoice(n11, 1); }
      |
         { n18 = new NodeSequence(3); }
         n20=<DATA> { n19 = JTBToolkit.makeNodeToken(n20); }
         { n18.addNode(n19); }
         n22=<EQUAL_ST_NAMED_DATA> { n21 = JTBToolkit.makeNodeToken(n22); }
         { n18.addNode(n21); }
         n24=<STRING_ST_NAMED_DATA> { n23 = JTBToolkit.makeNodeToken(n24); }
         { n18.addNode(n23); }
         { n3 = new NodeChoice(n18, 2); }
      )
      { n2.addNode(n3); }
   )+
   { n2.nodes.trimToSize(); }
   n26=<SEMICOLON_ST_NAMED_DATA> { n25 = JTBToolkit.makeNodeToken(n26); }
   
   { return new ndata(n0,n2,n25); }
}

eofrm eofrm() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;

   
}
{
   n1=<END_OF_FORM> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<NAME> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<EQUAL> { n4 = JTBToolkit.makeNodeToken(n5); }
   n7=<STRING> { n6 = JTBToolkit.makeNodeToken(n7); }
   n9=<SEMICOLON> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new eofrm(n0,n2,n4,n6,n8); }
}
