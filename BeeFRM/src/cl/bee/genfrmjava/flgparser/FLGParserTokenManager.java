/* Generated By:JavaCC: Do not edit this line. FLGParserTokenManager.java */
package cl.bee.genfrmjava.flgparser;
import java.io.*;
import java.util.*;
import cl.bee.genfrmjava.flgparser.visitor.*;
import cl.bee.genfrmjava.flgparser.syntaxtree.*;
import java.util.Vector;

/** Token Manager. */
public class FLGParserTokenManager implements FLGParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_6(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_6(int pos, long active0)
{
   return jjMoveNfa_6(jjStopStringLiteralDfa_6(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_6()
{
   switch(curChar)
   {
      case 33:
         return jjStopAtPos(0, 8);
      case 59:
         return jjStopAtPos(0, 18);
      case 61:
         return jjStopAtPos(0, 17);
      case 65:
         return jjMoveStringLiteralDfa1_6(0x800L);
      case 69:
         return jjMoveStringLiteralDfa1_6(0x8000L);
      case 70:
         return jjMoveStringLiteralDfa1_6(0x1200L);
      case 78:
         return jjMoveStringLiteralDfa1_6(0x14000L);
      case 79:
         return jjMoveStringLiteralDfa1_6(0x2000L);
      case 84:
         return jjMoveStringLiteralDfa1_6(0x400L);
      default :
         return jjMoveNfa_6(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_6(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa2_6(active0, 0x14000L);
      case 69:
         return jjMoveStringLiteralDfa2_6(active0, 0x400L);
      case 73:
         return jjMoveStringLiteralDfa2_6(active0, 0x1000L);
      case 78:
         return jjMoveStringLiteralDfa2_6(active0, 0x8000L);
      case 79:
         return jjMoveStringLiteralDfa2_6(active0, 0x200L);
      case 82:
         return jjMoveStringLiteralDfa2_6(active0, 0x2000L);
      case 84:
         return jjMoveStringLiteralDfa2_6(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_6(0, active0);
}
private int jjMoveStringLiteralDfa2_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_6(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa3_6(active0, 0xa000L);
      case 69:
         return jjMoveStringLiteralDfa3_6(active0, 0x1000L);
      case 77:
         return jjMoveStringLiteralDfa3_6(active0, 0x14000L);
      case 82:
         return jjMoveStringLiteralDfa3_6(active0, 0x200L);
      case 84:
         return jjMoveStringLiteralDfa3_6(active0, 0x800L);
      case 88:
         return jjMoveStringLiteralDfa3_6(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_6(1, active0);
}
private int jjMoveStringLiteralDfa3_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_6(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_6(active0, 0x6000L);
      case 76:
         return jjMoveStringLiteralDfa4_6(active0, 0x1000L);
      case 77:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(3, 9);
         break;
      case 82:
         return jjMoveStringLiteralDfa4_6(active0, 0x800L);
      case 84:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(3, 10);
         break;
      case 95:
         return jjMoveStringLiteralDfa4_6(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_6(2, active0);
}
private int jjMoveStringLiteralDfa4_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_6(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 68:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(4, 12);
         return jjMoveStringLiteralDfa5_6(active0, 0x4000L);
      case 73:
         return jjMoveStringLiteralDfa5_6(active0, 0x800L);
      case 79:
         return jjMoveStringLiteralDfa5_6(active0, 0x8000L);
      case 82:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(4, 13);
         break;
      default :
         break;
   }
   return jjStartNfa_6(3, active0);
}
private int jjMoveStringLiteralDfa5_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_6(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa6_6(active0, 0x800L);
      case 70:
         return jjMoveStringLiteralDfa6_6(active0, 0x8000L);
      case 95:
         return jjMoveStringLiteralDfa6_6(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_6(4, active0);
}
private int jjMoveStringLiteralDfa6_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_6(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa7_6(active0, 0x4000L);
      case 85:
         return jjMoveStringLiteralDfa7_6(active0, 0x800L);
      case 95:
         return jjMoveStringLiteralDfa7_6(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_6(5, active0);
}
private int jjMoveStringLiteralDfa7_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_6(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa8_6(active0, 0x4000L);
      case 70:
         return jjMoveStringLiteralDfa8_6(active0, 0x8000L);
      case 84:
         return jjMoveStringLiteralDfa8_6(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_6(6, active0);
}
private int jjMoveStringLiteralDfa8_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_6(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa9_6(active0, 0x800L);
      case 79:
         return jjMoveStringLiteralDfa9_6(active0, 0x8000L);
      case 84:
         return jjMoveStringLiteralDfa9_6(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_6(7, active0);
}
private int jjMoveStringLiteralDfa9_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_6(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 65:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(9, 14);
         break;
      case 82:
         return jjMoveStringLiteralDfa10_6(active0, 0x8000L);
      case 95:
         return jjMoveStringLiteralDfa10_6(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_6(8, active0);
}
private int jjMoveStringLiteralDfa10_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_6(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa11_6(active0, 0x800L);
      case 77:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(10, 15);
         break;
      default :
         break;
   }
   return jjStartNfa_6(9, active0);
}
private int jjMoveStringLiteralDfa11_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_6(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa12_6(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_6(10, active0);
}
private int jjMoveStringLiteralDfa12_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_6(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 70:
         return jjMoveStringLiteralDfa13_6(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_6(11, active0);
}
private int jjMoveStringLiteralDfa13_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_6(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa14_6(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_6(12, active0);
}
private int jjMoveStringLiteralDfa14_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_6(12, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 85:
         return jjMoveStringLiteralDfa15_6(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_6(13, active0);
}
private int jjMoveStringLiteralDfa15_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_6(13, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa16_6(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_6(14, active0);
}
private int jjMoveStringLiteralDfa16_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_6(14, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa17_6(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_6(15, active0);
}
private int jjMoveStringLiteralDfa17_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_6(15, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 83:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(17, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_6(16, active0);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_6(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar != 39)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  jjAddStates(0, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(0, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0, long active1)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 77);
      case 41:
         return jjStopAtPos(0, 78);
      case 44:
         return jjStopAtPos(0, 75);
      case 58:
         return jjStopAtPos(0, 74);
      case 59:
         return jjStopAtPos(0, 79);
      case 61:
         return jjStopAtPos(0, 76);
      case 66:
         return jjMoveStringLiteralDfa1_2(0x200000000000L, 0x100L);
      case 67:
         return jjMoveStringLiteralDfa1_2(0x400000000000L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_2(0x1800000000000L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_2(0x2000000000000L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_2(0x4000000000000L, 0x0L);
      case 72:
         return jjMoveStringLiteralDfa1_2(0x8000000000000L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_2(0x10000000000000L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_2(0x20000000000000L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_2(0xffc0000000000000L, 0x3L);
      case 80:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x4L);
      case 82:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x38L);
      case 83:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x40L);
      case 85:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x200L);
      case 90:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x80L);
      default :
         return jjMoveNfa_2(4, 0);
   }
}
private int jjMoveStringLiteralDfa1_2(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa2_2(active0, 0x40000000000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa2_2(active0, 0x2000000000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa2_2(active0, 0x28800000000000L, active1, 0x98L);
      case 73:
         return jjMoveStringLiteralDfa2_2(active0, 0x5000000000000L, active1, 0x24L);
      case 76:
         return jjMoveStringLiteralDfa2_2(active0, 0x600000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa2_2(active0, 0x10000000000000L, active1, 0x200L);
      case 79:
         return jjMoveStringLiteralDfa2_2(active0, 0xff80000000000000L, active1, 0x103L);
      case 85:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x40L);
      default :
         break;
   }
   return jjStartNfa_2(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa3_2(active0, 0x80200000000000L, active1, 0L);
      case 66:
         return jjMoveStringLiteralDfa3_2(active0, 0x300000000000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x4L);
      case 68:
         return jjMoveStringLiteralDfa3_2(active0, 0x410000000000000L, active1, 0x200L);
      case 69:
         return jjMoveStringLiteralDfa3_2(active0, 0x800400000000000L, active1, 0L);
      case 70:
         return jjMoveStringLiteralDfa3_2(active0, 0x1020800000000000L, active1, 0L);
      case 71:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x20L);
      case 72:
         return jjMoveStringLiteralDfa3_2(active0, 0x2000000000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa3_2(active0, 0x8000000000000L, active1, 0x100L);
      case 77:
         return jjMoveStringLiteralDfa3_2(active0, 0x40000000000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x40L);
      case 82:
         return jjMoveStringLiteralDfa3_2(active0, 0x2000000000000000L, active1, 0x80L);
      case 83:
         return jjMoveStringLiteralDfa3_2(active0, 0xc001000000000000L, active1, 0x8L);
      case 85:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x3L);
      case 86:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x10L);
      case 88:
         return jjMoveStringLiteralDfa3_2(active0, 0x4000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_2(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_2(active0, 0xc00000000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa4_2(active0, 0x800000000000000L, active1, 0L);
      case 68:
         if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(3, 72);
         break;
      case 69:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(3, 54);
         return jjMoveStringLiteralDfa4_2(active0, 0x2014000000000000L, active1, 0x210L);
      case 72:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0x20L);
      case 73:
         return jjMoveStringLiteralDfa4_2(active0, 0x1400000000000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa4_2(active0, 0x100000000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa4_2(active0, 0x200000000000L, active1, 0x1L);
      case 79:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(3, 49);
         return jjMoveStringLiteralDfa4_2(active0, 0x200000000000000L, active1, 0x80L);
      case 80:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(3, 51);
         return jjMoveStringLiteralDfa4_2(active0, 0x1000000000000L, active1, 0x4aL);
      case 84:
         return jjMoveStringLiteralDfa4_2(active0, 0x20000000000000L, active1, 0x4L);
      case 85:
         return jjMoveStringLiteralDfa4_2(active0, 0xc080000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_2(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa5_2(active0, 0x4000000000000L, active1, 0x1L);
      case 72:
         return jjMoveStringLiteralDfa5_2(active0, 0x800000000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa5_2(active0, 0x100000000000000L, active1, 0L);
      case 75:
         return jjMoveStringLiteralDfa5_2(active0, 0x200000000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa5_2(active0, 0x201000000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0x8L);
      case 80:
         return jjMoveStringLiteralDfa5_2(active0, 0xc000000000000000L, active1, 0x2L);
      case 82:
         return jjMoveStringLiteralDfa5_2(active0, 0x400000000000L, active1, 0x250L);
      case 83:
         return jjMoveStringLiteralDfa5_2(active0, 0x400000000000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa5_2(active0, 0x80000000000000L, active1, 0x20L);
      case 85:
         return jjMoveStringLiteralDfa5_2(active0, 0x800000000000L, active1, 0x4L);
      case 86:
         return jjMoveStringLiteralDfa5_2(active0, 0x2000000000000000L, active1, 0L);
      case 88:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(4, 52);
         return jjMoveStringLiteralDfa5_2(active0, 0x1000000000000000L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa5_2(active0, 0x20000000000000L, active1, 0x80L);
      default :
         break;
   }
   return jjStartNfa_2(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_2(active0, 0x1000000000000L, active1, 0L);
      case 68:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(5, 57);
         break;
      case 69:
         return jjMoveStringLiteralDfa6_2(active0, 0x7000000000000000L, active1, 0x43L);
      case 70:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0x80L);
      case 74:
         return jjMoveStringLiteralDfa6_2(active0, 0x20000000000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa6_2(active0, 0x800000000000L, active1, 0x200L);
      case 78:
         return jjMoveStringLiteralDfa6_2(active0, 0x100000000000000L, active1, 0x8L);
      case 79:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(5, 59);
         return jjMoveStringLiteralDfa6_2(active0, 0x80000000000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa6_2(active0, 0x8400000000000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0x4L);
      case 83:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0x10L);
      case 95:
         return jjMoveStringLiteralDfa6_2(active0, 0x4600000000000L, active1, 0x20L);
      default :
         break;
   }
   return jjStartNfa_2(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa7_2(active0, 0x400000000000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa7_2(active0, 0x1004000000000000L, active1, 0L);
      case 69:
         if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(6, 66);
         else if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(6, 68);
         break;
      case 70:
         return jjMoveStringLiteralDfa7_2(active0, 0x200000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0x280L);
      case 74:
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0x20L);
      case 75:
         return jjMoveStringLiteralDfa7_2(active0, 0x100000000000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa7_2(active0, 0x400000000000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa7_2(active0, 0xe000000000000000L, active1, 0x3L);
      case 83:
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0x48L);
      case 84:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(6, 47);
         return jjMoveStringLiteralDfa7_2(active0, 0x80000000000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa7_2(active0, 0x20000000000000L, active1, 0L);
      case 89:
         return jjMoveStringLiteralDfa7_2(active0, 0x1000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_2(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa8_2(active0, 0x480000000000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0x2L);
      case 69:
         return jjMoveStringLiteralDfa8_2(active0, 0x8004000000000000L, active1, 0x8L);
      case 72:
         return jjMoveStringLiteralDfa8_2(active0, 0x400000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa8_2(active0, 0x100200000000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0x81L);
      case 78:
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0x200L);
      case 83:
         if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(7, 70);
         return jjMoveStringLiteralDfa8_2(active0, 0x2020000000000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0x20L);
      case 86:
         return jjMoveStringLiteralDfa8_2(active0, 0x4000000000000000L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa8_2(active0, 0x1001000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_2(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa9_2(active0, 0x400000000000L, active1, 0x2L);
      case 66:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(8, 55);
         break;
      case 67:
         return jjMoveStringLiteralDfa9_2(active0, 0x4000000000000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa9_2(active0, 0x1000000000000000L, active1, 0L);
      case 69:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(8, 61);
         else if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(8, 73);
         break;
      case 73:
         return jjMoveStringLiteralDfa9_2(active0, 0x4000000000000000L, active1, 0x1L);
      case 76:
         if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(8, 71);
         return jjMoveStringLiteralDfa9_2(active0, 0x200000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa9_2(active0, 0x100000000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa9_2(active0, 0x1000000000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa9_2(active0, 0x8000000000000000L, active1, 0x20L);
      case 84:
         return jjMoveStringLiteralDfa9_2(active0, 0x20000000000000L, active1, 0L);
      case 89:
         return jjMoveStringLiteralDfa9_2(active0, 0x400000000000000L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa9_2(active0, 0L, active1, 0x8L);
      default :
         break;
   }
   return jjStartNfa_2(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa10_2(active0, 0x1000000000000000L, active1, 0L);
      case 71:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(9, 56);
         break;
      case 73:
         return jjMoveStringLiteralDfa10_2(active0, 0x24000000000000L, active1, 0L);
      case 76:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(9, 45);
         break;
      case 78:
         return jjMoveStringLiteralDfa10_2(active0, 0x1000000000000L, active1, 0x1L);
      case 82:
         return jjMoveStringLiteralDfa10_2(active0, 0x400000000000L, active1, 0x8L);
      case 83:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(9, 63);
         return jjMoveStringLiteralDfa10_2(active0, 0x4000000000000000L, active1, 0x2L);
      case 84:
         return jjMoveStringLiteralDfa10_2(active0, 0L, active1, 0x20L);
      case 95:
         return jjMoveStringLiteralDfa10_2(active0, 0x400000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_2(8, active0, active1);
}
private int jjMoveStringLiteralDfa10_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa11_2(active0, 0x400000000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa11_2(active0, 0x1000000000000000L, active1, 0L);
      case 69:
         if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(10, 64);
         else if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(10, 65);
         return jjMoveStringLiteralDfa11_2(active0, 0L, active1, 0x8L);
      case 70:
         return jjMoveStringLiteralDfa11_2(active0, 0x20000000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa11_2(active0, 0L, active1, 0x20L);
      case 76:
         return jjMoveStringLiteralDfa11_2(active0, 0x1000000000000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa11_2(active0, 0x4000000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa11_2(active0, 0x4400000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_2(9, active0, active1);
}
private int jjMoveStringLiteralDfa11_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(9, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa12_2(active0, 0x4000000000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa12_2(active0, 0x400000000000L, active1, 0L);
      case 70:
         return jjMoveStringLiteralDfa12_2(active0, 0L, active1, 0x20L);
      case 73:
         return jjMoveStringLiteralDfa12_2(active0, 0x1020000000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa12_2(active0, 0x400000000000000L, active1, 0L);
      case 81:
         return jjMoveStringLiteralDfa12_2(active0, 0L, active1, 0x8L);
      case 82:
         return jjMoveStringLiteralDfa12_2(active0, 0x4000000000000000L, active1, 0L);
      case 89:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(11, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_2(10, active0, active1);
}
private int jjMoveStringLiteralDfa12_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(10, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(11, active0, active1);
      return 12;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa13_2(active0, 0x20000000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa13_2(active0, 0L, active1, 0x20L);
      case 76:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(12, 50);
         return jjMoveStringLiteralDfa13_2(active0, 0x400000000000000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa13_2(active0, 0x1000000000000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa13_2(active0, 0x400000000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa13_2(active0, 0L, active1, 0x8L);
      case 95:
         return jjMoveStringLiteralDfa13_2(active0, 0x4000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_2(11, active0, active1);
}
private int jjMoveStringLiteralDfa13_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(11, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(12, active0, active1);
      return 13;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa14_2(active0, 0x1000000000000000L, active1, 0L);
      case 68:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(13, 53);
         break;
      case 69:
         return jjMoveStringLiteralDfa14_2(active0, 0x400000000000L, active1, 0x20L);
      case 73:
         return jjMoveStringLiteralDfa14_2(active0, 0L, active1, 0x8L);
      case 79:
         return jjMoveStringLiteralDfa14_2(active0, 0x4000000000000000L, active1, 0L);
      case 89:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(13, 58);
         break;
      default :
         break;
   }
   return jjStartNfa_2(12, active0, active1);
}
private int jjMoveStringLiteralDfa14_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(12, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(13, active0, active1);
      return 14;
   }
   switch(curChar)
   {
      case 68:
         if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(14, 69);
         break;
      case 76:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(14, 60);
         break;
      case 78:
         return jjMoveStringLiteralDfa15_2(active0, 0x4000000000000000L, active1, 0L);
      case 82:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(14, 46);
         return jjMoveStringLiteralDfa15_2(active0, 0L, active1, 0x8L);
      default :
         break;
   }
   return jjStartNfa_2(13, active0, active1);
}
private int jjMoveStringLiteralDfa15_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(13, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(14, active0, active1);
      return 15;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa16_2(active0, 0L, active1, 0x8L);
      case 76:
         return jjMoveStringLiteralDfa16_2(active0, 0x4000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_2(14, active0, active1);
}
private int jjMoveStringLiteralDfa16_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(14, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(15, active0, active1);
      return 16;
   }
   switch(curChar)
   {
      case 68:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(16, 67);
         break;
      case 89:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(16, 62);
         break;
      default :
         break;
   }
   return jjStartNfa_2(15, active0, active1);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 80)
                        kind = 80;
                     jjCheckNAdd(0);
                  }
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAdd(0);
                  break;
               case 1:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 2:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 3:
                  if (curChar != 39)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  jjAddStates(2, 3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(2, 3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_5(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_5(int pos, long active0)
{
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 3);
      case 13:
         return jjStartNfaWithStates_5(0, 4, 1);
      default :
         return jjMoveNfa_5(0, 0);
   }
}
private int jjStartNfaWithStates_5(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_5(state, pos + 1);
}
private int jjMoveNfa_5(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 6)
                        kind = 6;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_4(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0)
{
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 58:
         return jjStopAtPos(0, 31);
      case 59:
         return jjStopAtPos(0, 33);
      case 61:
         return jjStopAtPos(0, 32);
      case 65:
         return jjMoveStringLiteralDfa1_4(0x100000L);
      case 66:
         return jjMoveStringLiteralDfa1_4(0xa00000L);
      case 67:
         return jjMoveStringLiteralDfa1_4(0x400000L);
      case 72:
         return jjMoveStringLiteralDfa1_4(0x5000000L);
      case 78:
         return jjMoveStringLiteralDfa1_4(0x8000000L);
      case 80:
         return jjMoveStringLiteralDfa1_4(0x30000000L);
      case 82:
         return jjMoveStringLiteralDfa1_4(0x2000000L);
      case 87:
         return jjMoveStringLiteralDfa1_4(0x40000000L);
      default :
         return jjMoveNfa_4(4, 0);
   }
}
private int jjMoveStringLiteralDfa1_4(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa2_4(active0, 0x8200000L);
      case 69:
         return jjMoveStringLiteralDfa2_4(active0, 0x6000000L);
      case 73:
         return jjMoveStringLiteralDfa2_4(active0, 0x41000000L);
      case 76:
         return jjMoveStringLiteralDfa2_4(active0, 0x800000L);
      case 79:
         return jjMoveStringLiteralDfa2_4(active0, 0x20000000L);
      case 82:
         return jjMoveStringLiteralDfa2_4(active0, 0x10100000L);
      case 85:
         return jjMoveStringLiteralDfa2_4(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_4(0, active0);
}
private int jjMoveStringLiteralDfa2_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa3_4(active0, 0x800000L);
      case 67:
         return jjMoveStringLiteralDfa3_4(active0, 0x200000L);
      case 68:
         return jjMoveStringLiteralDfa3_4(active0, 0x40000000L);
      case 69:
         return jjMoveStringLiteralDfa3_4(active0, 0x10100000L);
      case 71:
         return jjMoveStringLiteralDfa3_4(active0, 0x1000000L);
      case 76:
         return jjMoveStringLiteralDfa3_4(active0, 0x4000000L);
      case 77:
         return jjMoveStringLiteralDfa3_4(active0, 0x8000000L);
      case 82:
         return jjMoveStringLiteralDfa3_4(active0, 0x400000L);
      case 83:
         return jjMoveStringLiteralDfa3_4(active0, 0x20000000L);
      case 86:
         return jjMoveStringLiteralDfa3_4(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_4(1, active0);
}
private int jjMoveStringLiteralDfa3_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_4(active0, 0x100000L);
      case 67:
         return jjMoveStringLiteralDfa4_4(active0, 0x800000L);
      case 69:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(3, 27);
         return jjMoveStringLiteralDfa4_4(active0, 0x2000000L);
      case 72:
         return jjMoveStringLiteralDfa4_4(active0, 0x1000000L);
      case 75:
         return jjMoveStringLiteralDfa4_4(active0, 0x200000L);
      case 80:
         return jjMoveStringLiteralDfa4_4(active0, 0x4000000L);
      case 82:
         return jjMoveStringLiteralDfa4_4(active0, 0x400000L);
      case 84:
         return jjMoveStringLiteralDfa4_4(active0, 0x60000000L);
      case 95:
         return jjMoveStringLiteralDfa4_4(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_4(2, active0);
}
private int jjMoveStringLiteralDfa4_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa5_4(active0, 0x400000L);
      case 71:
         return jjMoveStringLiteralDfa5_4(active0, 0x200000L);
      case 72:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(4, 30);
         return jjMoveStringLiteralDfa5_4(active0, 0x10000000L);
      case 75:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(4, 23);
         break;
      case 76:
         return jjMoveStringLiteralDfa5_4(active0, 0x1000000L);
      case 82:
         return jjMoveStringLiteralDfa5_4(active0, 0x2000000L);
      case 95:
         return jjMoveStringLiteralDfa5_4(active0, 0x24100000L);
      default :
         break;
   }
   return jjStartNfa_4(3, active0);
}
private int jjMoveStringLiteralDfa5_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa6_4(active0, 0x10000000L);
      case 70:
         return jjMoveStringLiteralDfa6_4(active0, 0x4000000L);
      case 72:
         return jjMoveStringLiteralDfa6_4(active0, 0x20000000L);
      case 73:
         return jjMoveStringLiteralDfa6_4(active0, 0x1000000L);
      case 78:
         return jjMoveStringLiteralDfa6_4(active0, 0x400000L);
      case 82:
         return jjMoveStringLiteralDfa6_4(active0, 0x200000L);
      case 83:
         return jjMoveStringLiteralDfa6_4(active0, 0x2000000L);
      case 84:
         return jjMoveStringLiteralDfa6_4(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_4(4, active0);
}
private int jjMoveStringLiteralDfa6_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(6, 25);
         return jjMoveStringLiteralDfa7_4(active0, 0x20000000L);
      case 71:
         return jjMoveStringLiteralDfa7_4(active0, 0x1000000L);
      case 76:
         return jjMoveStringLiteralDfa7_4(active0, 0x10000000L);
      case 79:
         return jjMoveStringLiteralDfa7_4(active0, 0x4300000L);
      case 84:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(6, 22);
         break;
      default :
         break;
   }
   return jjStartNfa_4(5, active0);
}
private int jjMoveStringLiteralDfa7_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 72:
         return jjMoveStringLiteralDfa8_4(active0, 0x1000000L);
      case 76:
         return jjMoveStringLiteralDfa8_4(active0, 0x20000000L);
      case 80:
         return jjMoveStringLiteralDfa8_4(active0, 0x10000000L);
      case 82:
         return jjMoveStringLiteralDfa8_4(active0, 0x4000000L);
      case 85:
         return jjMoveStringLiteralDfa8_4(active0, 0x200000L);
      case 95:
         return jjMoveStringLiteralDfa8_4(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_4(6, active0);
}
private int jjMoveStringLiteralDfa8_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa9_4(active0, 0x100000L);
      case 77:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(8, 26);
         break;
      case 78:
         return jjMoveStringLiteralDfa9_4(active0, 0x200000L);
      case 80:
         return jjMoveStringLiteralDfa9_4(active0, 0x20000000L);
      case 84:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(8, 24);
         break;
      case 95:
         return jjMoveStringLiteralDfa9_4(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_4(7, active0);
}
private int jjMoveStringLiteralDfa9_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa10_4(active0, 0x10000000L);
      case 68:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(9, 21);
         break;
      case 76:
         return jjMoveStringLiteralDfa10_4(active0, 0x100000L);
      case 95:
         return jjMoveStringLiteralDfa10_4(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_4(8, active0);
}
private int jjMoveStringLiteralDfa10_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa11_4(active0, 0x20000000L);
      case 67:
         return jjMoveStringLiteralDfa11_4(active0, 0x10000000L);
      case 69:
         return jjMoveStringLiteralDfa11_4(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_4(9, active0);
}
private int jjMoveStringLiteralDfa11_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa12_4(active0, 0x100000L);
      case 67:
         return jjMoveStringLiteralDfa12_4(active0, 0x20000000L);
      case 84:
         return jjMoveStringLiteralDfa12_4(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_4(10, active0);
}
private int jjMoveStringLiteralDfa12_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa13_4(active0, 0x10000000L);
      case 82:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(12, 20);
         break;
      case 84:
         return jjMoveStringLiteralDfa13_4(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_4(11, active0);
}
private int jjMoveStringLiteralDfa13_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa14_4(active0, 0x20000000L);
      case 79:
         return jjMoveStringLiteralDfa14_4(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_4(12, active0);
}
private int jjMoveStringLiteralDfa14_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(12, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa15_4(active0, 0x10000000L);
      case 79:
         return jjMoveStringLiteralDfa15_4(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_4(13, active0);
}
private int jjMoveStringLiteralDfa15_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(13, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa16_4(active0, 0x20000000L);
      case 95:
         return jjMoveStringLiteralDfa16_4(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_4(14, active0);
}
private int jjMoveStringLiteralDfa16_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(14, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 82:
         return jjMoveStringLiteralDfa17_4(active0, 0x10000000L);
      case 95:
         return jjMoveStringLiteralDfa17_4(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_4(15, active0);
}
private int jjMoveStringLiteralDfa17_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(15, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa18_4(active0, 0x10000000L);
      case 82:
         return jjMoveStringLiteralDfa18_4(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_4(16, active0);
}
private int jjMoveStringLiteralDfa18_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(16, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(17, active0);
      return 18;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa19_4(active0, 0x20000000L);
      case 85:
         return jjMoveStringLiteralDfa19_4(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_4(17, active0);
}
private int jjMoveStringLiteralDfa19_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(17, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(18, active0);
      return 19;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa20_4(active0, 0x10000000L);
      case 85:
         return jjMoveStringLiteralDfa20_4(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_4(18, active0);
}
private int jjMoveStringLiteralDfa20_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(18, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(19, active0);
      return 20;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa21_4(active0, 0x10000000L);
      case 84:
         return jjMoveStringLiteralDfa21_4(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_4(19, active0);
}
private int jjMoveStringLiteralDfa21_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(19, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(20, active0);
      return 21;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa22_4(active0, 0x20000000L);
      case 78:
         return jjMoveStringLiteralDfa22_4(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_4(20, active0);
}
private int jjMoveStringLiteralDfa22_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(20, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(21, active0);
      return 22;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(22, 28);
         break;
      case 78:
         return jjMoveStringLiteralDfa23_4(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_4(21, active0);
}
private int jjMoveStringLiteralDfa23_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(21, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(22, active0);
      return 23;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(23, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_4(22, active0);
}
private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(0);
                  }
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjCheckNAdd(0);
                  break;
               case 1:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 2:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 3:
                  if (curChar != 39)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  jjAddStates(2, 3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(2, 3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 59:
         return jjStopAtPos(0, 92);
      case 61:
         return jjStopAtPos(0, 91);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x4000000L);
      default :
         return jjMoveNfa_0(4, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa2_0(active1, 0x6000000L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active1, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, 0L, active1);
}
private int jjMoveStringLiteralDfa2_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(0, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, 0L, active1);
      return 2;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa3_0(active1, 0x1000000L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active1, 0x4000000L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active1, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, 0L, active1);
}
private int jjMoveStringLiteralDfa3_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(1, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, 0L, active1);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(3, 89);
         break;
      case 69:
         if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(3, 90);
         return jjMoveStringLiteralDfa4_0(active1, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, 0L, active1);
}
private int jjMoveStringLiteralDfa4_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(2, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, 0L, active1);
      return 4;
   }
   switch(curChar)
   {
      case 88:
         if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(4, 88);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, 0L, active1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     jjCheckNAdd(0);
                  }
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  jjCheckNAdd(0);
                  break;
               case 1:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 2:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 3:
                  if (curChar != 39)
                     break;
                  if (kind > 94)
                     kind = 94;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  jjAddStates(2, 3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(2, 3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_3(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 38:
         return jjStopAtPos(0, 38);
      case 40:
         return jjStopAtPos(0, 40);
      case 41:
         return jjStopAtPos(0, 41);
      case 44:
         return jjStopAtPos(0, 39);
      case 59:
         return jjStopAtPos(0, 42);
      case 66:
         return jjMoveStringLiteralDfa1_3(0x3000000000L);
      default :
         return jjMoveNfa_3(4, 0);
   }
}
private int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa2_3(active0, 0x2000000000L);
      case 79:
         return jjMoveStringLiteralDfa2_3(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_3(0, active0);
}
private int jjMoveStringLiteralDfa2_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa3_3(active0, 0x2000000000L);
      case 76:
         return jjMoveStringLiteralDfa3_3(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_3(1, active0);
}
private int jjMoveStringLiteralDfa3_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 68:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(3, 36);
         break;
      case 78:
         return jjMoveStringLiteralDfa4_3(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_3(2, active0);
}
private int jjMoveStringLiteralDfa4_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 75:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(4, 37);
         break;
      default :
         break;
   }
   return jjStartNfa_3(3, active0);
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     jjCheckNAdd(0);
                  }
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjCheckNAdd(0);
                  break;
               case 1:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 2:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 3:
                  if (curChar != 39)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  jjAddStates(2, 3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(2, 3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 59:
         return jjStopAtPos(0, 85);
      case 61:
         return jjStopAtPos(0, 84);
      case 66:
         return jjMoveStringLiteralDfa1_1(0x40000L);
      case 78:
         return jjMoveStringLiteralDfa1_1(0x80000L);
      default :
         return jjMoveNfa_1(4, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa2_1(active1, 0x80000L);
      case 69:
         return jjMoveStringLiteralDfa2_1(active1, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_1(0, 0L, active1);
}
private int jjMoveStringLiteralDfa2_1(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_1(0, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, 0L, active1);
      return 2;
   }
   switch(curChar)
   {
      case 71:
         return jjMoveStringLiteralDfa3_1(active1, 0x40000L);
      case 77:
         return jjMoveStringLiteralDfa3_1(active1, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_1(1, 0L, active1);
}
private int jjMoveStringLiteralDfa3_1(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_1(1, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, 0L, active1);
      return 3;
   }
   switch(curChar)
   {
      case 69:
         if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(3, 83);
         break;
      case 73:
         return jjMoveStringLiteralDfa4_1(active1, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_1(2, 0L, active1);
}
private int jjMoveStringLiteralDfa4_1(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_1(2, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, 0L, active1);
      return 4;
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa5_1(active1, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_1(3, 0L, active1);
}
private int jjMoveStringLiteralDfa5_1(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_1(3, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, 0L, active1);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_1(active1, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_1(4, 0L, active1);
}
private int jjMoveStringLiteralDfa6_1(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_1(4, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, 0L, active1);
      return 6;
   }
   switch(curChar)
   {
      case 87:
         return jjMoveStringLiteralDfa7_1(active1, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_1(5, 0L, active1);
}
private int jjMoveStringLiteralDfa7_1(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_1(5, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(6, 0L, active1);
      return 7;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa8_1(active1, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_1(6, 0L, active1);
}
private int jjMoveStringLiteralDfa8_1(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_1(6, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(7, 0L, active1);
      return 8;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa9_1(active1, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_1(7, 0L, active1);
}
private int jjMoveStringLiteralDfa9_1(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_1(7, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(8, 0L, active1);
      return 9;
   }
   switch(curChar)
   {
      case 72:
         if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(9, 82);
         break;
      default :
         break;
   }
   return jjStartNfa_1(8, 0L, active1);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 86)
                        kind = 86;
                     jjCheckNAdd(0);
                  }
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAdd(0);
                  break;
               case 1:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 2:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 3:
                  if (curChar != 39)
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  jjAddStates(2, 3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(2, 3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   1, 2, 2, 3, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, "\106\117\122\115", 
"\124\105\130\124", "\101\124\124\122\111\102\125\124\105\137\104\105\106\101\125\114\124\123", 
"\106\111\105\114\104", "\117\122\104\105\122", "\116\101\115\105\104\137\104\101\124\101", 
"\105\116\104\137\117\106\137\106\117\122\115", "\116\101\115\105", "\75", "\73", null, 
"\101\122\105\101\137\124\117\137\103\114\105\101\122", "\102\101\103\113\107\122\117\125\116\104", "\103\125\122\122\105\116\124", 
"\102\114\101\103\113", "\110\111\107\110\114\111\107\110\124", "\122\105\126\105\122\123\105", 
"\110\105\114\120\137\106\117\122\115", "\116\101\115\105", 
"\120\122\105\137\110\105\114\120\137\101\103\124\111\117\116\137\122\117\125\124\111\116\105", 
"\120\117\123\124\137\110\105\114\120\137\101\103\124\111\117\116\137\122\117\125\124\111\116\105", "\127\111\104\124\110", "\72", "\75", "\73", null, null, "\102\117\114\104", 
"\102\114\111\116\113", "\46", "\54", "\50", "\51", "\73", null, null, 
"\102\114\101\116\113\137\106\111\114\114", "\103\114\105\101\122\137\103\110\101\122\101\103\124\105\122", 
"\104\105\106\101\125\114\124", "\104\111\123\120\114\101\131\137\117\116\114\131", "\105\103\110\117", 
"\106\111\130\105\104\137\104\105\103\111\115\101\114", "\110\105\114\120", "\111\116\104\105\130", 
"\114\105\106\124\137\112\125\123\124\111\106\111\105\104", "\116\101\115\105", "\116\117\101\125\124\117\124\101\102", 
"\116\117\102\114\111\116\113\111\116\107", "\116\117\102\117\114\104", 
"\116\117\104\111\123\120\114\101\131\137\117\116\114\131", "\116\117\105\103\110\117", 
"\116\117\106\111\130\105\104\137\104\105\103\111\115\101\114", "\116\117\122\105\126\105\122\123\105", 
"\116\117\123\125\120\105\122\126\111\123\117\122\137\117\116\114\131", "\116\117\123\125\120\120\122\105\123\123", 
"\116\117\125\116\104\105\122\114\111\116\105", "\116\117\125\120\120\105\122\103\101\123\105", 
"\120\111\103\124\125\122\105", "\122\105\123\120\117\116\123\105\137\122\105\121\125\111\122\105\104", 
"\122\105\126\105\122\123\105", "\122\111\107\110\124\137\112\125\123\124\111\106\111\105\104", 
"\123\125\120\120\122\105\123\123", "\132\105\122\117\137\106\111\114\114", "\102\117\114\104", 
"\125\116\104\105\122\114\111\116\105", "\72", "\54", "\75", "\50", "\51", "\73", null, null, 
"\102\105\107\111\116\137\127\111\124\110", "\116\101\115\105", "\75", "\73", null, null, "\111\116\104\105\130", 
"\104\101\124\101", "\116\101\115\105", "\75", "\73", null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "NAMED_DATA_STATE",
   "ORDER_STATE",
   "FIELD_STATE",
   "TEXT_STATE",
   "FORM_STATE",
   "COMMENT_STATE",
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 6, -1, 5, 4, 3, -1, 2, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, -1, 6, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffffe01L, 0x7fffffffL, 
};
static final long[] jjtoSkip = {
   0x7eL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x40L, 0x0L, 
};
static final long[] jjtoMore = {
   0x180L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[4];
private final int[] jjstateSet = new int[8];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public FLGParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public FLGParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 4; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 7 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 6;
int defaultLexState = 6;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
       case 3:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         break;
       case 4:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         break;
       case 5:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100001200L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         if (jjmatchedPos == 0 && jjmatchedKind > 7)
         {
            jjmatchedKind = 7;
         }
         break;
       case 6:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_6();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
