*%! Codigo adicional para archivo LDCPQLM
*% PGM_PTC = TRUE
*% LARGO_MI_COMMAREA = 33
*%! BLLCELLS_USR = TRUE
*%! IF PGM_DTC
*%! INCLUDE 'GNSSRC:MANEJO_VSI.SRC'
*%! END
*%! REG = 'CLF'
*% IF CMT_ID 
*% END
*% IF FIN_SCR_VARI
      *<<<< FIN_SCR_VARI
           03 SCR-DISP-RED REDEFINES
              SCR-DISP.
              05 SCR-IMAX   COMP     PIC S9(04).
              05 SCR-I      COMP     PIC S9(04).
              05 SCR-FRM-GLS-DISP    PIC X(15).

      *>>>> FIN_SCR_VARI
*% END
*% IF WSS
      *<<<< WSS
       COPY GNSWGHOY.
       COPY GNSWGRQA REPLACING ==ADR-REQA== BY ==ADR-RDC-REQA==.
       COPY GNSWGRQA REPLACING ==ADR-REQA== BY ==ADR-DBC-REQA==.
       COPY GNSWGRQA REPLACING ==ADR-REQA== BY ==ADR-CLF-REQA==.
       COPY SGCBRDBC.
       COPY COLBRRDC.
       COPY LDCBRCLF. 
       COPY GNSWGCPT.
       COPY LDCWGCCU.
       COPY LDCWGCEG.
       COPY LDCWGMSG.
       COPY LDCWXLSM.
       COPY SGCBRDCP.
       COPY SGCBRDCE.
       COPY GNSWGRQA REPLACING ==ADR-REQA== BY ==ADR-DCE-REQA==.
       COPY GNSWGRQA REPLACING ==ADR-REQA== BY ==ADR-DCP-REQA==.
      * CLAVE EMULACION
       01  WSS-KEY-EMUL.
      * IDENTIFICACION DE OPERACION
           03  WSS-KEY-EM01                        PIC 9(08).
      * CORRELATIVO ERROR
           03  WSS-KEY-EM02                        PIC 9(02).
      * CORRELATIVO DENTRO DEL ERROR ( LINEA OCURRENCIA )
           03  WSS-KEY-EM03                        PIC 9(02).

      * CLAVE EMULACION
       01  CMP-WSS-KEY-EMUL.
      * IDENTIFICACION DE OPERACION
           03  CMP-WSS-KEY-EM01                        PIC 9(08).
      * CORRELATIVO ERROR
           03  CMP-WSS-KEY-EM02                        PIC 9(02).
      * CORRELATIVO DENTRO DEL ERROR ( LINEA OCURRENCIA )
           03  CMP-WSS-KEY-EM03                        PIC 9(02).


       77  WSS-NUM-INDX    VALUE  ZEROES           PIC 9(03).

       01  WSS-TAB.
           03 WSS-TAB-GLS-DESC                     PIC X(40).
           03 WSS-TAB-GLS-DATA                     PIC X(60).

       01  WSS-LOG-QUE  VALUE 'N'                  PIC X(01).
       01  WSS-CTE-SI   VALUE 'S'                  PIC X(01).

       01  WSS-TMP.
           03 WSS-CIC-IOPC                         PIC X(12).
           03 WSS-GLS-DMSG                         PIC X(61).

      *>>>> WSS
*% END
*% IF INI_FIO
      *<<<< INI_FIO

           IF SCR-OFRM-SRV
              MOVE TSK-TERM-ALF TO LSM-COD-TERM
              MOVE TSK-TERM-ALF TO LSM-COD-TERM-MAS
           ELSE
              MOVE EIBTRMID     TO LSM-COD-TERM
              MOVE EIBTRMID     TO LSM-COD-TERM-MAS.

           MOVE TSK-TERM-ALF TO RUTMEN-COD-TERM.


      *>>>> INI_FIO
*% END
*% IF PFS_GET_CON OR PFS_GET_ACC OR PFS_SCR_GKEY
      *<<<< PFS_GET_CON OR PFS_GET_ACC OR PFS_SCR_GKEY
           IF NOT ( FRM-FFLD = FRM-FFLD-PF8 OR FRM-FFLD = FRM-FFLD-PF7 )
      *>>>>
*% END
*% IF PFS_SCR_ACC
      *<<<< PFS_SCR_ACC
           IF FRM-FFLD = FRM-FFLD-PF8 OR FRM-FFLD-PF7
               NEXT SENTENCE.
      *>>>>
*% END
*% IF INI_FND_KEY
      *<<<< INI_FND_KEY

           MOVE SPACES TO FRM-MEN1.
           IF FRM-FFLD = FRM-FFLD-PF7
               MOVE PGM-SNUL TO PGM-STAT-DBC
               SUBTRACT 1 FROM SCR-I GIVING SCR-I
               IF SCR-I NOT > ZEROES
                   MOVE 'LSM RROPRV' TO MSG-COD-MENS
                   GO TO ERR-FND-KEY
               ELSE
                   GO TO CARGA-LSM
           ELSE
           IF FRM-FFLD = FRM-FFLD-PF8
               MOVE PGM-SNUL TO PGM-STAT-DBC
               ADD 1 SCR-I GIVING SCR-I
               IF SCR-I > SCR-IMAX
                   MOVE 'LSM RRONXT' TO MSG-COD-MENS
                   GO TO ERR-FND-KEY
               ELSE
                   GO TO CARGA-LSM.

           GO TO CON-FND-KEY.

      *>>>> INI_FND_KEY
*% END
*% IF FIN_FND_KEY
      *>>>> FIN_FND_KEY

       CON-FND-KEY.
      *
           MOVE ZEROES TO SCR-IMAX.
           MOVE 1      TO SCR-I.

           MOVE '00' TO FIO-STAT.

           PERFORM OBT-DAT-TS.
           IF MSG-COD-MENS > SPACES
              GO TO FIN-FND-KEY.

           MOVE 1 TO SCR-I.

       CARGA-LSM.

           MOVE SPACES TO MSG-COD-MENS.

           IF NOT SCR-OFRM-SRV
              PERFORM PUT-TAB-LSM.

           MOVE '00' TO FIO-STAT.
           GO TO FIN-FND-KEY.
      *
       ERR-FND-KEY.
           MOVE SCR-STAT-CON TO SCR-STAT.

           MOVE 'COL' TO MSG-COD-SIST.
           PERFORM GET-MSG.
           MOVE MSG-GLS-DESC TO FRM-MEN1.
           MOVE '00' TO FIO-STAT.
           GO TO FIN-FND-KEY.

      *>>>> FIN_FND_KEY
*% END
*% IF INI_SCR_DMSG
      *<<<< INI_SCR_DMSG
      * Con este codigo logramos que una vez terminada la consulta
      * las claves no se borren de la pantalla
           IF SCR-CMND = 'CON' AND
              SCR-INST = SCR-INST-GKY AND
              FRM-FFLD NOT = FRM-FFLD-RET
                  MOVE PGM-NO-LIMPIAR-NADA TO PGM-ICLR.

      *>>>> INI_SCR_DMSG
*% END
*% IF EOF
      *<<<< EOF
       COPY GNSBGHOY.
       COPY SGCBFDBC.
       COPY SGCBFDCP.
       COPY SGCBFDCE.
       COPY SGCBGCLI.
       COPY COLBFRDC.
       COPY GNSBGCPT.
       COPY LDCBGCCU.
       COPY LDCBGMMS.
       COPY LDCBFCLF.
       COPY LDCBKCCU.
       COPY LDCBKCEG.


       CAR-MOV-LSM SECTION.
       INI-CAR-MOV-LSM.
           PERFORM GET-FHOY.

           MOVE SPACES          TO MSG-COD-MENS.

           MOVE 'TAB'           TO FIO-SIST.
           MOVE 'VLR'           TO TAB-CIC-TTAB IN TAB.
           MOVE '0999  '        TO TAB-CIC-CTAB IN TAB.
           MOVE 'TAB-CIC-TABL'  TO FIO-AKEY.
           MOVE FIO-GET-KEY     TO FIO-CMND.
           PERFORM GNS-FIO-TAB.
           IF NOT FIO-STAT-OKS
              MOVE 'TAB'          TO MSG-COD-SIST
              MOVE 'CIC0999  NEX' TO MSG-COD-MENS
              PERFORM GET-MSG
                 MOVE MSG-GLS-DESC TO FRM-MENS
                 MOVE 'S' TO SCR-IERR
                 GO TO FIN-CAR-MOV-LSM.

           MOVE TAB-COD-CTAB IN TAB TO CCU-COD-PESO IN CCU-VARI.

           MOVE DBC-NUM-ICLI IN LSM-FLD TO DBC-NUM-ICLI IN DBC
           MOVE DBC-IND-ICLI IN LSM-FLD TO DBC-IND-ICLI IN DBC
           MOVE DBC-GLS-ICLI IN LSM-FLD TO DBC-GLS-ICLI IN DBC
           MOVE 'DBC-IDC-ICLI' TO FIO-AKEY
           MOVE FIO-GET-KEY    TO FIO-CMND
           PERFORM GET-CLI
           IF MSG-COD-MENS > SPACES
              MOVE MSG-GLS-DESC TO FRM-MENS
              MOVE 'S' TO SCR-IERR
              GO TO FIN-CAR-MOV-LSM.

           MOVE DBC-CAI-ICLI IN DBC     TO CCU-CAI-ICLI.
           MOVE DBC-IIC-ICLI IN DBC     TO CCU-IIC-ICLI.

           IF DBC-IND-TICL IN DBC = 'P'
              MOVE DBC-KEY-IDBC IN DBC TO DCP-KEY-IDCP IN DCP
              MOVE FIO-GET-KEY TO FIO-CMND
              PERFORM SGC-FIO-DCP
              MOVE DCP-COD-TBAN IN DCP TO
                   CCU-COD-TBAN IN CCU-VARI
           ELSE
           IF DBC-IND-TICL IN DBC = 'E'
              MOVE DBC-KEY-IDBC IN DBC TO DCE-KEY-IDCE IN DCE
              MOVE FIO-GET-KEY TO FIO-CMND
              PERFORM SGC-FIO-DCE
              MOVE DCE-COD-TBAN IN DCE TO
                   CCU-COD-TBAN IN CCU-VARI.

           IF OPC-IIC-IOPC IN LSM-FLD > ZEROES AND
              OPC-CAI-IOPC IN LSM-FLD > SPACES
              MOVE OPC-CAI-IOPC IN LSM-FLD TO OPC-CAI-IOPC IN OPC
              MOVE OPC-IIC-IOPC IN LSM-FLD TO OPC-IIC-IOPC IN OPC
              MOVE FIO-GET-KEY TO FIO-CMND
              PERFORM COL-FIO-OPC
              IF NOT FIO-STAT-OKS
                 MOVE FIO-STAT     TO PGM-STAT-OPC
                 MOVE 'COL'        TO MSG-COD-SIST
                 MOVE 'OPC    NEX' TO MSG-COD-MENS
                 PERFORM GET-MSG
                 MOVE MSG-GLS-DESC TO FRM-MENS
                 MOVE 'S' TO SCR-IERR
                 GO TO FIN-CAR-MOV-LSM
              ELSE
              IF OPC-MSC-STAT IN OPC = 'A'
                 MOVE FIO-STAT       TO PGM-STAT-OPC
                 MOVE 'COL'          TO MSG-COD-SIST
                 MOVE 'OPC    ACAYA' TO MSG-COD-MENS
                 PERFORM GET-MSG
                 MOVE MSG-GLS-DESC TO FRM-MENS
                 MOVE 'S' TO SCR-IERR
                 GO TO FIN-CAR-MOV-LSM
              ELSE
                MOVE OPC-CAI-IOPC IN LSM-FLD TO CCU-CAI-IOPC(1)
                MOVE OPC-IIC-IOPC IN LSM-FLD TO CCU-IIC-IOPC(1)
                MOVE OPC-VAL-SCRE IN OPC     TO CCU-VAL-SCRE(1)
                MOVE SPACES                  TO CCU-OPC-ICRG(1)
           ELSE
              MOVE SPACES                  TO CCU-CAI-IOPC(1)
              MOVE ZEROES                  TO CCU-IIC-IOPC(1)
              MOVE ZEROES                  TO CCU-VAL-SCRE(1)
              MOVE SPACES                  TO CCU-OPC-ICRG(1).


           MOVE FIO-MSFL   TO CCU-MSFL.
           MOVE SCR-QIDD   TO CCU-QIDD.
           MOVE SCR-LIDD   TO CCU-LIDD.
           MOVE CCU-CMMA   TO SYS-CMMA.
           MOVE SYS-LINK   TO SYS-CMND.
           MOVE 'LDCPSCCM' TO SYS-PROG.
           MOVE CCU-TCMA   TO SYS-TCMA.
           PERFORM GNS-PRO-SYS.
           MOVE SYS-CMMA TO CCU-CMMA.
           MOVE CCU-MSFL TO FIO-MSFL.

      *    IF CCU-NUM-MENS < 99
      *       MOVE '1'          TO FRM-COD-RESP IN LSM-FLD
      *       MOVE CCU-COD-MENS TO FRM-CIC-RESP IN LSM-FLD
      *    ELSE
      *       MOVE '0'          TO FRM-COD-RESP IN LSM-FLD
      *       MOVE SPACES       TO FRM-CIC-RESP IN LSM-FLD.
           PERFORM RED-TS-RUTMEN.

       FIN-CAR-MOV-LSM.
           EXIT.

       OBT-DAT-TS SECTION.
       INI-OBT-DAT-TS.
      *    EXEC CICS HANDLE CONDITION QIDERR(CON-OBT-DAT-TS)
      *                              ITEMERR(CON-OBT-DAT-TS)
      *    END-EXEC.
      *<<<<
           MOVE LSM-NOM-TSLSM       TO QUE-COLA.
           MOVE QUE-DEL             TO QUE-CMND.
           PERFORM GNS-PRO-QUE.

           MOVE RUTMEN-NOM-TSRUTMEN TO QUE-COLA.
           PERFORM GNS-PRO-QUE.


      *>>>>
       CON-OBT-DAT-TS.

           PERFORM CAR-MOV-LSM.
       FIN-OBT-DAT-TS.
           EXIT.

       PUT-TAB-LSM SECTION.
       INI-PUT-TAB-LSM.
           PERFORM RED-TS.
           PERFORM LLE-DAT-PNT VARYING LSM-I FROM 1 BY 1
                   UNTIL LSM-I > LSM-IMAX.

           MOVE LSM-GLS-TOTA(1) TO LSM-LINEA.



           MOVE LSM-LINEA(4:3) TO LSM-VAR-FORM.

           MOVE SPACES TO LSM-LINEA.
           PERFORM CARGAR-FORMULARIO.
           PERFORM LLE-DAT-FOR VARYING LSM-I FROM 1 BY 1
                   UNTIL LSM-I > LSM-IMAX.
       FIN-PUT-TAB-SCL.
           EXIT.


       LLE-DAT-FOR SECTION.
       INI-LLE-DAT-FOR.
           MOVE LSM-NUM-NLIN(LSM-I) TO FRM-NUM-NLIN IN LSM-FLD(LSM-I).
           MOVE LSM-GLS-DMSG(LSM-I) TO FRM-GLS-DMSG(LSM-I).
       FIN-LLE-DAT-FOR.
           EXIT.

       LLE-DAT-PNT SECTION.
       INI-LLE-DAT-PNT.

      *    MOVE LSM-CIC-IOPC(LSM-I) TO WSS-CIC-IOPC.
      *    MOVE LSM-GLS-DMSG(LSM-I) TO WSS-GLS-DMSG.
      *    MOVE WSS-TMP             TO FRM-GLS-DMSG(LSM-I).

           MOVE LSM-GLS-TOTA(LSM-I) TO LSM-VAR-IN-DATA(LSM-I).

      *    IF LSM-LINEA(4:3) NOT = '006'
      *       MOVE LSM-GLS-TOTA(LSM-I) TO FRM-GLS-DMSG(LSM-I)
      *       MOVE LSM-NUM-NLIN(LSM-I) TO FRM-NUM-NLIN IN LSM-FLD(LSM-I)
      *       GO TO FIN-LLE-DAT-PNT.




       FIN-LLE-DAT-PNT.
           EXIT.

       RED-TS SECTION.
       INI-RED-TS.

      *    EXEC CICS HANDLE CONDITION QIDERR(FIN-RED-TS)
      *                              ITEMERR(FIN-RED-TS)
      *    END-EXEC.
      *<<<<
           MOVE LSM-NOM-TSLSM      TO QUE-COLA.
           MOVE LSM-TS             TO QUE-ITEM.
           MOVE LSM-LEN-TSLSM      TO QUE-LITM.
           MOVE SCR-I              TO QUE-NITM.
           MOVE QUE-GET            TO QUE-CMND.
           PERFORM GNS-PRO-QUE.
           IF QUE-STAT = QUE-STAT-OKS
              MOVE QUE-ITEM          TO LSM-TS.

      *>>>>
       FIN-RED-TS.
           EXIT.

       RED-TS-RUTMEN SECTION.
       INI-RED-TS-RUTMEN.
      *    EXEC CICS HANDLE CONDITION QIDERR(FIN-RED-TS-RUTMEN)
      *                              ITEMERR(FIN-RED-TS-RUTMEN)
      *    END-EXEC.
      *<<<<
           MOVE ZEROES TO QUE-NITM.
       LUP-RED-TS-RUTMEN.
           ADD 1 TO QUE-NITM.
           PERFORM LEE-TS-MMS.

           IF QUE-STAT = QUE-STAT-OKS
              MOVE QUE-ITEM TO RUTMEN-TS
              PERFORM WRT-TS
              GO TO LUP-RED-TS-RUTMEN.

      *>>>>
       FIN-RED-TS-RUTMEN.
           EXIT.


       WRT-TS SECTION.
       INI-WRT-TS.
           ADD 1 TO SCR-IMAX.

           IF NOT SCR-OFRM-SRV
           MOVE RUTMEN-TS TO RUTMEN-ARRE-TS
           PERFORM CLR-VEC-TS VARYING LSM-I FROM 1 BY 1 UNTIL
                   LSM-I > LSM-IMAX.


           IF SCR-OFRM-SRV
              PERFORM PUT-TAB-LSM-2.


           MOVE LSM-NOM-TSLSM  TO QUE-COLA.
           MOVE LSM-TS         TO QUE-ITEM.
           MOVE LSM-LEN-TSLSM  TO QUE-LITM.
           MOVE QUE-PUT        TO QUE-CMND.
           PERFORM GNS-PRO-QUE.

       FIN-WRT-TS.
           EXIT.

       CLR-VEC-TS SECTION.
       INI-CLR-VEC-TS.

           MOVE LSM-I                   TO LSM-NUM-NLIN(LSM-I).
           MOVE RUTMEN-GLS-DMSG(LSM-I)  TO LSM-GLS-TOTA(LSM-I).

       FIN-CLR-VEC-TS.
           EXIT.



      *>>>> EOF






       CARGAR-FORMULARIO SECTION.
       INI-CARGAR-FORMULARIO.
           PERFORM LIMPIA-FORM.
           MOVE 1 TO LSM-I-LINEA.
           MOVE 1 TO LSM-POS-GLS.

           PERFORM CARGA-DATOS.
           IF 'N' = LSM-FLG-EXIT
              PERFORM SIN-FORMATO.

           MOVE LSM-VAR-FORM TO LSM-FOR-NFO.
           MOVE '000'        TO LSM-FOR-NCA.
           MOVE '00'         TO LSM-FOR-COP.

           PERFORM CARGA-NXT-COMPONENTE.
           IF 'E' = LSM-FLG-EXIT
              PERFORM SIN-FORMATO
           ELSE
              MOVE LSM-LINEA TO LSM-GLS-DMSG(LSM-I-LINEA).

       FIN-CARGAR-FORMULARIO.
           EXIT.
      *-----------------------------------------------------------------
      *-----------------------------------------------------------------
      *-----------------------------------------------------------------
       CARGA-DATOS SECTION.
       INI-CARGA-DATOS.
           MOVE 100          TO LSM-I-MAX-DAT.
           MOVE 'S'          TO LSM-FLG-EXIT
           MOVE LSM-VAR-FORM TO LSM-FOR-NFO.
           MOVE '001'        TO LSM-FOR-NCA.
           MOVE '00'         TO LSM-FOR-COP.
           MOVE 1            TO LSM-I.
           MOVE 73           TO LSM-POS-DATA.

           MOVE 'DEU'        TO TAB-COD-SIST.
           MOVE 'DEU'        TO FIO-SIST.
           MOVE 'FVI'        TO TAB-COD-TTAB.
           MOVE LSM-FOR-CTAB TO TAB-COD-CTAB.
           MOVE FIO-GET-NLS  TO FIO-CMND.
       LUP-CARGA-DATOS.
           PERFORM GNS-FIO-TAB.
           MOVE TAB-COD-CTAB TO LSM-FOR-CTAB.
           IF NOT FIO-STAT-OKS OR
              LSM-VAR-FORM NOT = LSM-FOR-NFO
              MOVE LSM-I TO LSM-I-MAX-DAT
              SUBTRACT 1 FROM LSM-I-MAX-DAT
              GO TO FIN-CARGA-DATOS.

           IF TAB-IND-VIGE IN TAB NOT = 'S'
              GO TO NXT-CARGA-DATOS.

           MOVE TAB-GLS-ABRV IN TAB TO LSM-VAR-LEN(LSM-I).
           MOVE TAB-GLS-DCOR IN TAB TO LSM-VAR-ETQ(LSM-I).
           MOVE SPACES              TO LSM-VAR-GLS(LSM-I).

           MOVE TAB-GLS-ABRV IN TAB TO LSM-TMP-LEN.

           MOVE LSM-VARI-IN(LSM-POS-DATA:LSM-TMP-LIN) TO
                LSM-VAR-GLS(LSM-I).

           ADD LSM-TMP-LIN TO LSM-POS-DATA.

           ADD 1 TO LSM-I.
           IF LSM-I > LSM-I-MAX-DAT
DEBUG * MENSAJE DE ERROR DE LARGO MAXIMO DE DATOS.

              MOVE 'N'       TO LSM-FLG-EXIT
              GO TO FIN-CARGA-DATOS.

       NXT-CARGA-DATOS.
           MOVE FIO-GET-NXT  TO FIO-CMND.
           GO TO LUP-CARGA-DATOS.

       FIN-CARGA-DATOS.
           EXIT.
      *-----------------------------------------------------------------
      *-----------------------------------------------------------------
      *-----------------------------------------------------------------
       CARGA-NXT-COMPONENTE SECTION.
       INI-CARGA-NXT-COMPONENTE.
           MOVE 'S'          TO LSM-FLG-EXIT


           MOVE 'DEU'           TO TAB-COD-SIST FIO-SIST
           MOVE 'VSN'           TO TAB-COD-TTAB IN TAB
           MOVE 'LSMSERVICIO '  TO TAB-COD-CTAB IN TAB
           MOVE FIO-GET-KEY TO FIO-CMND
           PERFORM GNS-FIO-TAB
           IF FIO-STAT-OKS AND TAB-IND-VIGE IN TAB = 'S'
              IF SCR-OFRM-SRV
                 MOVE 'E'    TO LSM-FLG-EXIT
                 GO TO FIN-CARGA-NXT-COMPONENTE.


           MOVE 'DEU'        TO TAB-COD-SIST.
           MOVE 'DEU'        TO FIO-SIST.
           MOVE 'LSM'        TO TAB-COD-TTAB.
           MOVE LSM-FOR-CTAB TO TAB-COD-CTAB.
           MOVE FIO-GET-NLS  TO FIO-CMND.

       LUP-CARGA-NXT-COMPONENTE.
           PERFORM GNS-FIO-TAB.
           MOVE TAB-COD-CTAB TO LSM-FOR-CTAB.
           IF NOT FIO-STAT-OKS OR
              LSM-VAR-FORM  NOT = LSM-FOR-NFO
              IF LSM-FOR-NCA   = '000' AND
                 LSM-VAR-FORM  = LSM-FOR-NFO
                 MOVE 'E'    TO LSM-FLG-EXIT
                 GO TO FIN-CARGA-NXT-COMPONENTE
              ELSE
                 MOVE 'S'    TO LSM-FLG-EXIT
                 GO TO FIN-CARGA-NXT-COMPONENTE.

           IF TAB-IND-VIGE IN TAB NOT = 'S'
              IF LSM-FOR-NCA = '000'
                 MOVE 'E'    TO LSM-FLG-EXIT
                 GO TO FIN-CARGA-NXT-COMPONENTE
              ELSE
                 GO TO NXT-CARGA-NXT-COMPONENTE.


           MOVE TAB-GLS-ABRV IN TAB TO LSM-LEN-MSG.
           MOVE TAB-GLS-DCOR IN TAB TO LSM-ETQ-MSG.
           MOVE TAB-GLS-DATA IN TAB TO LSM-GLS-MSG.

           IF LSM-FOR-NCA = '000' AND
              LSM-LEN-MSG = '00073'
             MOVE LSM-VAR-IN-DATA(LSM-I-LINEA) TO
                  LSM-GLS-DMSG(LSM-I-LINEA)
             ADD 1 TO LSM-I-LINEA
             GO TO NXT-CARGA-NXT-COMPONENTE.

           IF LSM-ETQ-MSG NOT = 'MSG         '
              PERFORM RCP-VALOR-VARIABLE.

           PERFORM CONCATENA-MENSAJE.
       NXT-CARGA-NXT-COMPONENTE.
           MOVE FIO-GET-NXT TO FIO-CMND.
           GO TO LUP-CARGA-NXT-COMPONENTE.


       FIN-CARGA-NXT-COMPONENTE.
           EXIT.

       RCP-VALOR-VARIABLE SECTION.
       INI-RCP-VALOR-VARIABLE.
           MOVE 1            TO LSM-I.

       LUP-RCP-VALOR-VARIABLE.
           IF LSM-VAR-ETQ(LSM-I) NOT = LSM-ETQ-MSG
              GO TO NXT-RCP-VALOR-VARIABLE.

           MOVE LSM-VAR-GLS(LSM-I) TO LSM-GLS-MSG.
           GO TO FIN-RCP-VALOR-VARIABLE.

       NXT-RCP-VALOR-VARIABLE.
           ADD 1 TO LSM-I.
           IF LSM-I > LSM-I-MAX-DAT
              MOVE 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
              TO LSM-GLS-MSG
              GO TO FIN-RCP-VALOR-VARIABLE.

           GO TO LUP-RCP-VALOR-VARIABLE.

       FIN-RCP-VALOR-VARIABLE.
           EXIT.


       CONCATENA-MENSAJE SECTION.
       INI-CONCATENA-MENSAJE.

           MOVE LSM-GLS-MSG(1:LSM-LIN-MSG) TO
                LSM-LINEA(LSM-POS-GLS:LSM-LIN-MSG).

           ADD LSM-LIN-MSG TO LSM-POS-GLS.
           IF LSM-POS-GLS > 73
              MOVE LSM-LINEA TO LSM-GLS-DMSG(LSM-I-LINEA)
              MOVE SPACES TO LSM-LINEA
              MOVE 1      TO LSM-POS-GLS
              ADD  1      TO LSM-I-LINEA.

           IF LSM-I-LINEA > LSM-I-MAX-LINEA
DEBUG * MENSAJE LA CANTIDAD DE LINEAS DEL MENSAJE SUPERA LAS 16 LINEAS
              GO TO FIN-CARGAR-FORMULARIO.

       FIN-CONCATENA-MENSAJE.
           EXIT.


       SIN-FORMATO SECTION.
       INI-SIN-FORMATO.
           MOVE 1 TO LSM-I.
       LUP-SIN-FORMATO.
           MOVE LSM-VAR-IN-DATA(LSM-I) TO LSM-GLS-DMSG(LSM-I)

           ADD 1 TO LSM-I.
           IF LSM-I > LSM-I-MAX-LINEA
              GO TO FIN-SIN-FORMATO.

           GO TO LUP-SIN-FORMATO.

       FIN-SIN-FORMATO.
           EXIT.

       LIMPIA-FORM SECTION.
       INI-LIMPIA-FORM.
           MOVE 1 TO LSM-I.
       LUP-LIMPIA-FORM.
           MOVE SPACES TO LSM-GLS-DMSG(LSM-I).

           ADD 1 TO LSM-I.
           IF LSM-I > LSM-I-MAX-LINEA
              GO TO FIN-LIMPIA-FORM.

           GO TO LUP-LIMPIA-FORM.
       FIN-LIMPIA-FORM.
           EXIT.


       PUT-TAB-LSM-2 SECTION.
       INI-PUT-TAB-LSM-2.

           MOVE RUTMEN-TS          TO LSM-VARI-IN
           MOVE LSM-VAR-IN-DATA(1) TO LSM-LINEA.
           MOVE LSM-LINEA(4:3)     TO LSM-VAR-FORM.
           MOVE SPACES             TO LSM-LINEA.

           PERFORM CARGAR-FORMULARIO.

           PERFORM LLE-DAT-FOR-2 VARYING LSM-I FROM 1 BY 1
                   UNTIL LSM-I > LSM-IMAX.


       FIN-PUT-TAB-SCL-2.
           EXIT.


       LLE-DAT-FOR-2 SECTION.
       INI-LLE-DAT-FOR.

           MOVE LSM-I                   TO LSM-NUM-NLIN(LSM-I).
           MOVE LSM-GLS-DMSG(LSM-I)     TO LSM-GLS-TOTA(LSM-I).

       FIN-LLE-DAT-FOR-2.
           EXIT.
*% END
