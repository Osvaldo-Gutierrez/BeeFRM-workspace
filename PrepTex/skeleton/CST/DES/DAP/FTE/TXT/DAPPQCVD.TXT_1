*% IF SETTAG
*% FNCPQ = "DAPNVA"
*% VSNPQ = "07.08.24"
*% END
*%! mapa
*%!************
*%!File GNS$DSKUSR:[CST.ISILVA.CHIBCI.CIM.DAP.DIRCVD]DAPACVD.MAP;2
*%!    4   * 21-Mar-05 01:17 PM
*%!    5   *
*%!******
*%!File GNS$DSKUSR:[CST.ISILVA.CHIBCI.CIM.DAP.DIRCVD]DAPACVD.SL;1
*%!    4   * 26-Jan-05 10:35 AM
*%!    5   *
*%!************
*%!************
*%!File GNS$DSKUSR:[CST.ISILVA.CHIBCI.CIM.DAP.DIRCVD]DAPACVD.MAP;2
*%!   84   FECFVEN  DFHMDF POS=(13,12),ATTRB=(ASKIP,NORM,BRT,FSET),LENGTH=08
*%!   85   VALTOTA  DFHMDF POS=(13,21),ATTRB=(ASKIP,BRT,FSET,FSET),LENGTH=19
*%!******
*%!File GNS$DSKUSR:[CST.ISILVA.CHIBCI.CIM.DAP.DIRCVD]DAPACVD.SL;1
*%!   84   FECFVEN  DFHMDF POS=(13,12),ATTRB=(ASKIP,BRT,FSET),LENGTH=08
*%!   85   VALTOTA  DFHMDF POS=(13,21),ATTRB=(ASKIP,BRT,FSET,FSET),LENGTH=19
*%!************
*%!************
*%!File GNS$DSKUSR:[CST.ISILVA.CHIBCI.CIM.DAP.DIRCVD]DAPACVD.MAP;2
*%!  100   FECF718  DFHMDF POS=(16,12),ATTRB=(ASKIP,NORM,BRT,FSET),LENGTH=08
*%!  101   VALT720  DFHMDF POS=(16,21),ATTRB=(ASKIP,BRT,FSET,FSET),LENGTH=19
*%!******
*%!File GNS$DSKUSR:[CST.ISILVA.CHIBCI.CIM.DAP.DIRCVD]DAPACVD.SL;1
*%!  100   FECF718  DFHMDF POS=(16,12),ATTRB=(ASKIP,BRT,FSET),LENGTH=08
*%!  101   VALT720  DFHMDF POS=(16,21),ATTRB=(ASKIP,BRT,FSET,FSET),LENGTH=19
*%!************
*%!************
*%!File GNS$DSKUSR:[CST.ISILVA.CHIBCI.CIM.DAP.DIRCVD]DAPACVD.MAP;2
*%!  116   FECF719  DFHMDF POS=(19,12),ATTRB=(ASKIP,NORM,BRT,FSET),LENGTH=08
*%!  117   VALT721  DFHMDF POS=(19,21),ATTRB=(ASKIP,BRT,FSET,FSET),LENGTH=19
*%!******
*%!File GNS$DSKUSR:[CST.ISILVA.CHIBCI.CIM.DAP.DIRCVD]DAPACVD.SL;1
*%!  116   FECF719  DFHMDF POS=(19,12),ATTRB=(ASKIP,BRT,FSET),LENGTH=08
*%!  117   VALT721  DFHMDF POS=(19,21),ATTRB=(ASKIP,BRT,FSET,FSET),LENGTH=19
*%!************
*%!
*%!Number of difference sections found: 4
*%!Number of difference records found: 4
*%!
*%!DIFFERENCES /IGNORE=()/MERGED=1/OUTPUT=GNS$DSKUSR:[CST.ISILVA.CHIBCI.CIM.DAP.DIRCVD]A.B;2-
*%!    GNS$DSKUSR:[CST.ISILVA.CHIBCI.CIM.DAP.DIRCVD]DAPACVD.MAP;2-
*%!    GNS$DSKUSR:[CST.ISILVA.CHIBCI.CIM.DAP.DIRCVD]DAPACVD.SL;1
*%!
*%!
*%!
*%!
*%!
*%! registro imagen
*%!************
*%!File GNS$DSKUSR:[CST.ISILVA.CHIBCI.CIM.DAP.DIRCVD]DAPWICVD.AIU;2
*%!    4    * 21-Mar-05 01:17 PM
*%!    5    *
*%!******
*%!File GNS$DSKUSR:[CST.ISILVA.CHIBCI.CIM.DAP.DIRCVD]DAPWICVD.SL;1
*%!    4    * 25-Jan-05 09:17 PM
*%!    5    *
*%!************
*%!************
*%!File GNS$DSKUSR:[CST.ISILVA.CHIBCI.CIM.DAP.DIRCVD]DAPWICVD.AIU;2
*%!  406    05 FRM-VAL-SCAP-EDT PIC --.---.---.--9,9999.
*%!  407    05 FRM-VAL-INTC-EDT PIC --.---.---.--9,9999.
*%!  408    05 FRM-SGV-KOPD-EDT PIC --.---.---.--9,9999.
*%!  409    05 FRM-SGV-IACU-EDT PIC --.---.---.--9,9999.
*%!  410    05 FRM-SGV-RTOT-EDT PIC --.---.---.--9,9999.
*%!******
*%!File GNS$DSKUSR:[CST.ISILVA.CHIBCI.CIM.DAP.DIRCVD]DAPWICVD.SL;1
*%!  398    * 05 FRM-VAL-SCAP-EDT PIC --.---.---.--9,9999.
*%!  399    05 FRM-VAL-SCAP-EDT PIC --.---.---.---,----.
*%!  401    * 05 FRM-VAL-INTC-EDT PIC --.---.---.--9,9999.
*%!  402    05 FRM-VAL-INTC-EDT PIC --.---.---.---,----.
*%!  404    05 FRM-SGV-KOPD-EDT PIC --.---.---.--9,9999.
*%!  406    * 05 FRM-SGV-IACU-EDT PIC --.---.---.--9,9999.
*%!  407    05 FRM-SGV-IACU-EDT PIC --.---.---.---,----.
*%!  409    05 FRM-SGV-RTOT-EDT PIC --.---.---.--9,9999.
*%!************
*%!
*%!Number of difference sections found: 7
*%!Number of difference records found: 21
*%!
*%!DIFFERENCES /IGNORE=(SPACING,TRAILING_SPACES,BLANK_LINES)/MERGED=1/OUTPUT=GNS$DSKUSR:[CST.ISILVA.CHIBCI.CIM.DAP.DIRCVD]A.B;4-
*%!    GNS$DSKUSR:[CST.ISILVA.CHIBCI.CIM.DAP.DIRCVD]DAPWICVD.AIU;2-
*%!    GNS$DSKUSR:[CST.ISILVA.CHIBCI.CIM.DAP.DIRCVD]DAPWICVD.SL;1
*%!
*%!
*%!
*%!
*%!
*%! modulo de mannejo
*%!
*%!
*%!
*%!
*%!************
*%!File GNS$DSKUSR:[CST.ISILVA.CHIBCI.CIM.DAP.DIRCVD]DAPBQCVD.SRCAIU;2
*%!    4    * 21-Mar-05 01:17 PM
*%!    5    *
*%!******
*%!File GNS$DSKUSR:[CST.ISILVA.CHIBCI.CIM.DAP.DIRCVD]DAPBQCVD.SL;1
*%!    4    * 25-Jan-05 09:17 PM
*%!    5    *
*%!************
*%!************
*%!File GNS$DSKUSR:[CST.ISILVA.CHIBCI.CIM.DAP.DIRCVD]DAPBQCVD.SRCAIU;2
*%!  153    MOVE ZEROES TO FRM-NUM-IVCT IN CVD-FLD(1).
*%!******
*%!File GNS$DSKUSR:[CST.ISILVA.CHIBCI.CIM.DAP.DIRCVD]DAPBQCVD.SL;1
*%!  153    *<<<< INI_CLR_FLD_CVD
*%!  154    EXT-CLR-FLD-CVD.
*%!  155    *>>>> INI_CLR_FLD_CVD
*%!  156    MOVE ZEROES TO FRM-NUM-IVCT IN CVD-FLD(1).
*%!************
*%!
*%!Number of difference sections found: 2
*%!Number of difference records found: 4
*%!
*%!DIFFERENCES /IGNORE=(SPACING,TRAILING_SPACES,BLANK_LINES)/MERGED=1/OUTPUT=GNS$DSKUSR:[CST.ISILVA.CHIBCI.CIM.DAP.DIRCVD]A.B;5-
*%!    GNS$DSKUSR:[CST.ISILVA.CHIBCI.CIM.DAP.DIRCVD]DAPBQCVD.SRCAIU;2-
*%!    GNS$DSKUSR:[CST.ISILVA.CHIBCI.CIM.DAP.DIRCVD]DAPBQCVD.SL;1
*%!
*%!
*% PFSQUECOPY = "DAPWXCVD"
*% LARGO_MI_COMMAREA = 0
*% PFSQUEMAXPAN= "3"
*% PFSQUEENT = "CVD"
*% PFSQUEPRV = "PF5"
*% PFSQUENXT = "PF6"
*% PFSQUESIS = "DAP"
*% PFSVARIPQ = "GAB"
*% INCLUDE 'GNSSRC:PFSCONQUE.SRC'
*% PGM_PTC = TRUE
*% IF WSS
      *<<<< WSS
       01  WSS-VARI.
           03 WSS-IND-EMLT     VALUE SPACES        PIC X(01).
           03 WSS-CIC-ICLI                         PIC X(12).
       01  WSS-FRM-GLS-PROD VALUE SPACES.                               
           03  WSS-FRM-GLS-TOPD                    PIC X(16).           
           03  FILLER                              PIC X(01).           
           03  WSS-FRM-GLS-AOPD                    PIC X(16).           
           03  FILLER                              PIC X(01).           
           03  WSS-FRM-GLS-VCAM                    PIC X(06).           

       COPY SGCBRDBC.
       COPY DAPBRVEN.
       COPY DAPBRRCC.
       COPY DAPBRCAD.
       COPY DAPBRLIQ.
       COPY TABBRCAM.
       COPY GNSWGCPT.
       COPY GNSWGSTR.
       COPY GNSWGPES.
       COPY GNSWGINT.
       COPY DAPWGVEN.
       01  WSS-PGM-STAT.
              05 PGM-STAT-RCC.
                 88 PGM-STAT-RCC-NUL    VALUE '  '.
                 07 PGM-STT1-RCC        VALUE '2' PIC X(01).
                    88 PGM-STAT-RCC-OKS VALUE '0'.
                 07 PGM-STT2-RCC        VALUE '3' PIC X(01).
      
              05 PGM-STAT-DBC.
                 88 PGM-STAT-DBC-NUL    VALUE '  '.
                 07 PGM-STT1-DBC        VALUE '2' PIC X(01).
                    88 PGM-STAT-DBC-OKS VALUE '0'.
                 07 PGM-STT2-DBC        VALUE '3' PIC X(01).
      *>>>> WSS
*% END
*% IF WSS_DTC
      *<<<< WSS_DTC
       COPY GNSWGRQA REPLACING ==ADR-REQA== BY ==ADR-DBC-REQA==.
       COPY GNSWGRQA REPLACING ==ADR-REQA== BY ==ADR-VEN-REQA==.
       COPY GNSWGRQA REPLACING ==ADR-REQA== BY ==ADR-RCC-REQA==.
       COPY GNSWGRQA REPLACING ==ADR-REQA== BY ==ADR-CAD-REQA==.
       COPY GNSWGRQA REPLACING ==ADR-REQA== BY ==ADR-LIQ-REQA==.
       COPY GNSWGRQA REPLACING ==ADR-REQA== BY ==ADR-CAM-REQA==.
      *>>>> WSS_DTC
*% END
*% IF INI_FIO
      *<<<< INI_FIO

      *>>>>
*% END
*% IF FIN_FND_KEY
      *<<<< IF FIN_FND_KEY
      *     IF FIO-STAT-OKS
      *         MOVE OPD-SGV-TCAS IN OPD TO FRM-SGV-TCAS IN CVD-FLD.
      *>>>>
*% END
*% IF EOF
      *<<<< EOF
      * INI CODIGO PROGRAMADOR PARA PFS

       CVD-PUT-SCR SECTION.
       INI-CVD-PUT-SCR.
      *    MOVE 'CVDPUT1' TO QUE-COLA.
      *    MOVE +100 TO QUE-LITM.
      *    MOVE SPACES TO QUE-ITEM.
      *    MOVE QUE-PUT TO QUE-CMND.
      *    PERFORM GNS-PRO-QUE.
      
      *    IF PGM-STAT-OPD-OKS
      *         MOVE 'CVDPUT2' TO QUE-COLA
      *         MOVE +100 TO QUE-LITM
      *         MOVE SPACES TO QUE-ITEM
      *         MOVE QUE-PUT TO QUE-CMND
      *         PERFORM GNS-PRO-QUE
      
               PERFORM GET-RCC.
       FIN-CVD-PUT-SCR.
           EXIT.

       CVD-ANL-KEY SECTION.
       INI-CVD-ANL-KEY.
           MOVE CVD-NOM-TSCVD  TO QUE-COLA.
           MOVE QUE-DEL TO QUE-CMND.
           PERFORM GNS-PRO-QUE.

           PERFORM KEY-ALL-CVD.

           MOVE FIO-GET-KEY TO FIO-CMND.
           PERFORM DAP-FIO-OPD.
           IF FIO-STAT-OKS
      *        MOVE 100 TO OPD-SGV-MPRE IN OPD
               MOVE OPD-STP-ITRN IN OPD TO SCR-UMOD.
           MOVE FIO-STAT TO PGM-STAT-OPD.
           IF NOT FIO-STAT-OKS
               GO TO FIN-CVD-ANL-KEY.
           IF OPD-COD-MORE IN OPD NOT = 'PI'
               MOVE 'CVDSOLOPI' TO MSG-COD-MENS
               MOVE 'DAP' TO MSG-COD-SIST
               PERFORM GET-MSG
               MOVE MSG-GLS-DESC TO FRM-MENS
               MOVE FIO-STAT-NEX TO FIO-STAT
               GO TO FIN-CVD-ANL-KEY.
           IF FIO-STAT-OKS
              PERFORM EXP-VEN
              MOVE PGM-STAT-OPD TO FIO-STAT
              IF MSG-COD-MENS > SPACES
                  MOVE MSG-GLS-DESC TO FRM-MENS.
       FIN-CVD-ANL-KEY.
           EXIT.

       EXP-VEN SECTION.
       INI-EXP-VEN.
           MOVE SPACES TO MSG-COD-MENS.
           PERFORM GET-COD-CIC-OPD.
           IF MSG-COD-MENS > SPACES
               GO TO FIN-EXP-VEN.
      
           MOVE FIO-GET-FST TO FIO-CMND.
       CIC-EXP-VEN.
           MOVE SPACES TO CVD-ITEM.
           MOVE ZEROES TO
                   CVD-FRM-NUM-IVCT
                   CVD-FRM-FEC-FVEN
                   CVD-FRM-VAL-INTC
                   CVD-FRM-VAL-SCAP
                   CVD-FRM-VAL-TOTA
                   CVD-FRM-SGV-KOPD
                   CVD-FRM-SGV-IACU
                   CVD-FRM-SGV-RTOT
                   CVD-FRM-SGV-TCAX
                   CVD-FRM-SGV-TREX
                   CVD-FRM-SGV-CAST
                   CVD-FRM-SGV-LIQU
                   CVD-FRM-SGV-RENT.

           PERFORM GEN-PRX-RTR.
           IF MSG-COD-MENS > SPACES
               GO TO FIN-EXP-VEN.
           IF DAP-VEN-STAT-OKS
      *        PERFORM CAL-CAST
      *        PERFORM CAL-RENT
              PERFORM PUT-TSN-ALF
              MOVE FIO-GET-NXT TO FIO-CMND
              GO TO CIC-EXP-VEN.
      
       FIN-EXP-VEN.
           EXIT.

      * FIN CODIGO PROGRAMADOR PARA PFS

       CVD-MOV-TS-FRM-ELM SECTION.
       INI-CVD-MOV-TS-FRM-ELM.
           MOVE CVD-FRM-NUM-IVCT TO
                    FRM-NUM-IVCT IN CVD-FLD(WSS-IND-PANT).
           MOVE CVD-FRM-IND-LIQU TO
                    FRM-IND-LIQU IN CVD-FLD(WSS-IND-PANT).
           MOVE CVD-FRM-FEC-FVEN TO
                    FRM-FEC-FVEN IN CVD-FLD(WSS-IND-PANT).
           MOVE CVD-FRM-VAL-INTC TO
                    FRM-VAL-INTC IN CVD-FLD(WSS-IND-PANT).
           MOVE CVD-FRM-VAL-SCAP TO
                    FRM-VAL-SCAP IN CVD-FLD(WSS-IND-PANT).
           MOVE CVD-FRM-VAL-TOTA TO
                    FRM-VAL-TOTA IN CVD-FLD(WSS-IND-PANT).
           MOVE CVD-FRM-SGV-KOPD TO
                    FRM-SGV-KOPD IN CVD-FLD(WSS-IND-PANT).
           MOVE CVD-FRM-SGV-IACU TO
                    FRM-SGV-IACU IN CVD-FLD(WSS-IND-PANT).
           MOVE CVD-FRM-SGV-RTOT TO
                    FRM-SGV-RTOT IN CVD-FLD(WSS-IND-PANT).
           MOVE CVD-FRM-SGV-TCAX TO
                    FRM-SGV-TCAX IN CVD-FLD(WSS-IND-PANT).
           MOVE CVD-FRM-SGV-TREX TO
                    FRM-SGV-TREX IN CVD-FLD(WSS-IND-PANT).
           MOVE CVD-FRM-SGV-CAST TO
                    FRM-SGV-CAST IN CVD-FLD(WSS-IND-PANT).
           MOVE CVD-FRM-SGV-LIQU TO
                    FRM-SGV-LIQU IN CVD-FLD(WSS-IND-PANT).
           MOVE CVD-FRM-SGV-RENT TO
                    FRM-SGV-RENT IN CVD-FLD(WSS-IND-PANT).
       FIN-CVD-MOV-TS-FRM-ELM.
           EXIT.
      

       PUT-TSN-ALF SECTION.
       INI-PUT-TSN-ALF.
      
               ADD 1 TO SCR-TOT-OCCU.
      *DBG        MOVE 6 TO SCR-TOT-OCCU
      
      *DBG     MOVE 1 TO CVD-FRM-NUM-IVCT IN CVD-ITEM.
      *DBG     MOVE 'A' TO CVD-FRM-IND-LIQU IN CVD-ITEM.
      *DBG     MOVE '11112004' TO CVD-FRM-FEC-FVEN IN CVD-ITEM.
      *DBG     MOVE ZEROES TO CVD-FRM-VAL-INTC IN CVD-ITEM.
      *DBG     MOVE ZEROES TO CVD-FRM-VAL-SCAP IN CVD-ITEM.
      *DBG     MOVE ZEROES TO CVD-FRM-VAL-TOTA IN CVD-ITEM.
      *DBG     MOVE ZEROES TO CVD-FRM-SGV-CAST IN CVD-ITEM.
      *DBG     MOVE ZEROES TO CVD-FRM-SGV-LIQU IN CVD-ITEM.
      
      *DBG     MOVE CVD-NOM-TSCVD  TO QUE-COLA.
      *DBG     MOVE CVD-LEN-TSCVD  TO QUE-LITM.
      *DBG     MOVE CVD-ITEM       TO QUE-ITEM.
      *DBG     MOVE QUE-PUT        TO QUE-CMND.
      *DBG     PERFORM GNS-PRO-QUE.
      
      *DBG     MOVE 2 TO CVD-FRM-NUM-IVCT IN CVD-ITEM.
      *DBG     MOVE 'B' TO CVD-FRM-IND-LIQU IN CVD-ITEM.
      *DBG     MOVE '11112004' TO CVD-FRM-FEC-FVEN IN CVD-ITEM.
      *DBG     MOVE ZEROES TO CVD-FRM-VAL-INTC IN CVD-ITEM.
      *DBG     MOVE ZEROES TO CVD-FRM-VAL-SCAP IN CVD-ITEM.
      *DBG     MOVE ZEROES TO CVD-FRM-VAL-TOTA IN CVD-ITEM.
      *DBG     MOVE ZEROES TO CVD-FRM-SGV-CAST IN CVD-ITEM.
      *DBG     MOVE ZEROES TO CVD-FRM-SGV-LIQU IN CVD-ITEM.
      
      *DBG     MOVE CVD-NOM-TSCVD  TO QUE-COLA.
      *DBG     MOVE CVD-LEN-TSCVD  TO QUE-LITM.
      *DBG     MOVE CVD-ITEM       TO QUE-ITEM.
      *DBG     MOVE QUE-PUT        TO QUE-CMND.
      *DBG     PERFORM GNS-PRO-QUE.
      
      *DBG     MOVE 3 TO CVD-FRM-NUM-IVCT IN CVD-ITEM.
      *DBG     MOVE 'C' TO CVD-FRM-IND-LIQU IN CVD-ITEM.
      *DBG     MOVE '11112004' TO CVD-FRM-FEC-FVEN IN CVD-ITEM.
      *DBG     MOVE ZEROES TO CVD-FRM-VAL-INTC IN CVD-ITEM.
      *DBG     MOVE ZEROES TO CVD-FRM-VAL-SCAP IN CVD-ITEM.
      *DBG     MOVE ZEROES TO CVD-FRM-VAL-TOTA IN CVD-ITEM.
      *DBG     MOVE ZEROES TO CVD-FRM-SGV-CAST IN CVD-ITEM.
      *DBG     MOVE ZEROES TO CVD-FRM-SGV-LIQU IN CVD-ITEM.
      
      *DBG     MOVE CVD-NOM-TSCVD  TO QUE-COLA.
      *DBG     MOVE CVD-LEN-TSCVD  TO QUE-LITM.
      *DBG     MOVE CVD-ITEM       TO QUE-ITEM.
      *DBG     MOVE QUE-PUT        TO QUE-CMND.
      *DBG     PERFORM GNS-PRO-QUE.
      
      *DBG     MOVE 4 TO CVD-FRM-NUM-IVCT IN CVD-ITEM.
      *DBG     MOVE 'D' TO CVD-FRM-IND-LIQU IN CVD-ITEM.
      *DBG     MOVE '11112004' TO CVD-FRM-FEC-FVEN IN CVD-ITEM.
      *DBG     MOVE ZEROES TO CVD-FRM-VAL-INTC IN CVD-ITEM.
      *DBG     MOVE ZEROES TO CVD-FRM-VAL-SCAP IN CVD-ITEM.
      *DBG     MOVE ZEROES TO CVD-FRM-VAL-TOTA IN CVD-ITEM.
      *DBG     MOVE ZEROES TO CVD-FRM-SGV-CAST IN CVD-ITEM.
      *DBG     MOVE ZEROES TO CVD-FRM-SGV-LIQU IN CVD-ITEM.
      
      *DBG     MOVE CVD-NOM-TSCVD  TO QUE-COLA.
      *DBG     MOVE CVD-LEN-TSCVD  TO QUE-LITM.
      *DBG     MOVE CVD-ITEM       TO QUE-ITEM.
      *DBG     MOVE QUE-PUT        TO QUE-CMND.
      *DBG     PERFORM GNS-PRO-QUE.
      
      *DBG     MOVE 5 TO CVD-FRM-NUM-IVCT IN CVD-ITEM.
      *DBG     MOVE 'E' TO CVD-FRM-IND-LIQU IN CVD-ITEM.
      *DBG     MOVE '11112004' TO CVD-FRM-FEC-FVEN IN CVD-ITEM.
      *DBG     MOVE ZEROES TO CVD-FRM-VAL-INTC IN CVD-ITEM.
      *DBG     MOVE ZEROES TO CVD-FRM-VAL-SCAP IN CVD-ITEM.
      *DBG     MOVE ZEROES TO CVD-FRM-VAL-TOTA IN CVD-ITEM.
      *DBG     MOVE ZEROES TO CVD-FRM-SGV-CAST IN CVD-ITEM.
      *DBG     MOVE ZEROES TO CVD-FRM-SGV-LIQU IN CVD-ITEM.
      
      *DBG     MOVE CVD-NOM-TSCVD  TO QUE-COLA.
      *DBG     MOVE CVD-LEN-TSCVD  TO QUE-LITM.
      *DBG     MOVE CVD-ITEM       TO QUE-ITEM.
      *DBG     MOVE QUE-PUT        TO QUE-CMND.
      *DBG     PERFORM GNS-PRO-QUE.
      
      *DBG     MOVE 6 TO CVD-FRM-NUM-IVCT IN CVD-ITEM.
      *DBG     MOVE 'F' TO CVD-FRM-IND-LIQU IN CVD-ITEM.
      *DBG     MOVE '11112004' TO CVD-FRM-FEC-FVEN IN CVD-ITEM.
      *DBG     MOVE ZEROES TO CVD-FRM-VAL-INTC IN CVD-ITEM.
      *DBG     MOVE ZEROES TO CVD-FRM-VAL-SCAP IN CVD-ITEM.
      *DBG     MOVE ZEROES TO CVD-FRM-VAL-TOTA IN CVD-ITEM.
      *DBG     MOVE ZEROES TO CVD-FRM-SGV-CAST IN CVD-ITEM.
      *DBG     MOVE ZEROES TO CVD-FRM-SGV-LIQU IN CVD-ITEM.
      
      
      *    MOVE 'VENPUT1' TO QUE-COLA.
      *    MOVE +100 TO QUE-LITM.
      *    MOVE SPACES TO QUE-ITEM.
      *    MOVE QUE-PUT TO QUE-CMND.
      *    PERFORM GNS-PRO-QUE.
      
           MOVE OPD-NUM-IVEN IN OPD TO CVD-FRM-NUM-IVCT IN CVD-ITEM.
           MOVE SPACES              TO CVD-FRM-IND-LIQU IN CVD-ITEM.
           MOVE VEN-NUM-DVEN IN VEN TO CVD-FRM-NUM-DVEN IN CVD-ITEM.
           MOVE VEN-NUM-MVEN IN VEN TO CVD-FRM-NUM-MVEN IN CVD-ITEM.
           MOVE VEN-NUM-SVEN IN VEN TO CVD-FRM-NUM-SVEN IN CVD-ITEM.
           MOVE VEN-NUM-AVEN IN VEN TO CVD-FRM-NUM-AVEN IN CVD-ITEM.
      
      
      *    MOVE 'VENPUT2' TO QUE-COLA.
      *    MOVE +100 TO QUE-LITM.
      *    MOVE SPACES TO QUE-ITEM.
      *    MOVE QUE-PUT TO QUE-CMND.
      *    PERFORM GNS-PRO-QUE.
      
           IF VEN-VAL-CAPI IN VEN NOT NUMERIC
               MOVE ZEROES TO VEN-VAL-CAPI IN VEN.
           MOVE VEN-VAL-CAPI IN VEN TO CVD-FRM-VAL-SCAP IN CVD-ITEM.
      * ZEROES
            MOVE ZEROES TO CVD-FRM-VAL-SCAP IN CVD-ITEM.
      * ZEROES
      
      *    MOVE 'VENPUT3' TO QUE-COLA.
      *    MOVE +100 TO QUE-LITM.
      *    MOVE SPACES TO QUE-ITEM.
      *    MOVE QUE-PUT TO QUE-CMND.
      *    PERFORM GNS-PRO-QUE.
      
           IF VEN-VAL-FINA IN VEN NOT NUMERIC
               MOVE ZEROES TO VEN-VAL-FINA IN VEN.
           MOVE VEN-VAL-FINA IN VEN TO CVD-FRM-VAL-TOTA IN CVD-ITEM.
      
      *    MOVE 'VENPUT4' TO QUE-COLA.
      *    MOVE +100 TO QUE-LITM.
      *    MOVE SPACES TO QUE-ITEM.
      *    MOVE QUE-PUT TO QUE-CMND.
      *    PERFORM GNS-PRO-QUE.
      
           COMPUTE CVD-FRM-VAL-INTC IN CVD-ITEM =
              VEN-VAL-FINA IN VEN -
              VEN-VAL-CAPI IN VEN.
      
           MOVE OPD-VAL-SCAP IN OPD TO CVD-FRM-SGV-KOPD.
           
           MOVE WSS-SGV-TAJUS-DSP TO CVD-FRM-SGV-TCAX.
           
           MOVE WSS-SGV-TEFEC-DSP TO CVD-FRM-SGV-TREX.
           
           MOVE WSS-SGV-IACU TO CVD-FRM-SGV-IACU.
           
           IF OPD-SGV-MPRE IN OPD = 100
           COMPUTE CVD-FRM-SGV-RTOT = CVD-FRM-VAL-INTC +
                                      CVD-FRM-SGV-IACU
           ELSE
           COMPUTE CVD-FRM-SGV-RTOT = DAP-WSS-SGV-INTE-0 +
                                      CVD-FRM-SGV-IACU.
      
      * ZEROES
           MOVE ZEROES TO CVD-FRM-SGV-IACU.
      * ZEROES
      * ZEROES
           MOVE ZEROES TO CVD-FRM-VAL-INTC.
      * ZEROES

           MOVE DAP-MTO-CAST TO CVD-FRM-SGV-CAST.

           MOVE DAP-MTO-LIQU TO CVD-FRM-SGV-LIQU.

           MOVE WSS-RENT-REAL-ACUM TO CVD-FRM-SGV-RENT.

      *    MOVE 'VENPUT5' TO QUE-COLA.
      *    MOVE +100 TO QUE-LITM.
      *    MOVE SPACES TO QUE-ITEM.
      *    MOVE QUE-PUT TO QUE-CMND.
      *    PERFORM GNS-PRO-QUE.
      
           IF SCR-OFRM-SRV
      
               MOVE CVD-FRM-VAL-INTC     TO     FRM-VAL-INTC-EDT
               MOVE     FRM-VAL-INTC-EDT TO CVD-FRM-VAL-INTC-ALF
      
               MOVE CVD-FRM-VAL-SCAP     TO     FRM-VAL-SCAP-EDT
               MOVE     FRM-VAL-SCAP-EDT TO CVD-FRM-VAL-SCAP-ALF
      
               MOVE CVD-FRM-VAL-TOTA     TO     FRM-VAL-TOTA-EDT
               MOVE     FRM-VAL-TOTA-EDT TO CVD-FRM-VAL-TOTA-ALF
      
               MOVE CVD-FRM-SGV-KOPD     TO     FRM-SGV-KOPD-EDT
               MOVE     FRM-SGV-KOPD-EDT TO CVD-FRM-SGV-KOPD-ALF
      
               MOVE CVD-FRM-SGV-IACU     TO     FRM-SGV-IACU-EDT
               MOVE     FRM-SGV-IACU-EDT TO CVD-FRM-SGV-IACU-ALF
      
               MOVE CVD-FRM-SGV-RTOT     TO     FRM-SGV-RTOT-EDT
               MOVE     FRM-SGV-RTOT-EDT TO CVD-FRM-SGV-RTOT-ALF
      
               MOVE CVD-FRM-SGV-TCAX     TO     FRM-SGV-TCAX-EDT
               MOVE     FRM-SGV-TCAX-EDT TO CVD-FRM-SGV-TCAX-ALF
      
               MOVE CVD-FRM-SGV-TREX     TO     FRM-SGV-TREX-EDT
               MOVE     FRM-SGV-TREX-EDT TO CVD-FRM-SGV-TREX-ALF
      
               MOVE CVD-FRM-SGV-CAST     TO     FRM-SGV-CAST-EDT
               MOVE     FRM-SGV-CAST-EDT TO CVD-FRM-SGV-CAST-ALF
      
               MOVE CVD-FRM-SGV-LIQU     TO     FRM-SGV-LIQU-EDT
               MOVE     FRM-SGV-LIQU-EDT TO CVD-FRM-SGV-LIQU-ALF

               MOVE CVD-FRM-SGV-RENT     TO     FRM-SGV-RENT-EDT
               MOVE     FRM-SGV-RENT-EDT TO CVD-FRM-SGV-RENT-ALF.

      *    MOVE ZEROES TO CVD-FRM-SGV-CAST IN CVD-ITEM.
      *    MOVE ZEROES TO CVD-FRM-SGV-LIQU IN CVD-ITEM.
      
           MOVE CVD-NOM-TSCVD  TO QUE-COLA.
           MOVE CVD-LEN-TSCVD  TO QUE-LITM.
           MOVE CVD-ITEM       TO QUE-ITEM.
      *     DISPLAY 'DAPPQCVD GRABA COLA ' QUE-COLA '-' QUE-ITEM.
           MOVE QUE-PUT        TO QUE-CMND.
           PERFORM GNS-PRO-QUE.

       FIN-PUT-TSN-ALF.
           EXIT.

       COPY SGCBFDBC.
       COPY DAPBFVEN.
       COPY DAPBFRCC.
       COPY DAPBFCAD.
       COPY DAPBFLIQ.

       COPY GNSBGCPT.
       COPY GNSBGSTR.
       COPY GNSBBMSC.
       COPY GNSBPFEC.

       GNX-PRO-QUE SECTION.
       INI-GNX-PRO-QUE.
      *      PERFORM GNS-PRO-QUE.
       FIN-GNX-PRO-QUE.
           EXIT.

      * PGM-EBR-ALL SECTION.
      * INI-PGM-EBR-ALL.
      *     MOVE FIO-EBR-ALL TO FIO-CMND.
      *     PERFORM DAP-FIO-DAP.
      * FIN-PGM-EBR-ALL.
      *     EXIT.

       GET-RCC SECTION.
       INI-GET-RCC.
           MOVE 'CVDPUT3' TO QUE-COLA.
           MOVE +100 TO QUE-LITM.
           MOVE SPACES TO QUE-ITEM.
           MOVE QUE-PUT TO QUE-CMND.
           PERFORM GNS-PRO-QUE.
      
           PERFORM GET-CUR-RCC.
           IF FIO-STAT-OKS
               PERFORM GET-NXT-RCC.
       FIN-GET-RCC.
           EXIT.
      
       GET-CUR-RCC SECTION.
       INI-GET-CUR-RCC.
           MOVE OPD-CIC-IOPD IN OPD TO RCC-CIC-IOPD IN RCC.
           MOVE 'RCC-KEY-IOPD' TO FIO-AKEY.
           MOVE FIO-GET-NLS TO FIO-CMND.
           PERFORM DAP-FIO-RCC.
           IF NOT (FIO-STAT-OKS AND
                OPD-CIC-IOPD IN OPD = RCC-CIC-IOPD IN RCC)
      *           MOVE 'CLINEX' TO QUE-COLA
      *           MOVE +100 TO QUE-LITM
      *           MOVE SPACES TO QUE-ITEM
      *           MOVE QUE-PUT TO QUE-CMND
      *           PERFORM GNS-PRO-QUE
      
               MOVE SPACES TO FRM-GLS-CTE1
               MOVE ZEROES TO FRM-NUM-CLT1
               MOVE SPACES TO FRM-VRF-CLT1
               MOVE SPACES TO FRM-IND-CLT1
               MOVE SPACES TO FRM-GLS-CLT1
               MOVE '23' TO FIO-STAT
           ELSE
               MOVE RCC-CIC-ICLI IN RCC TO DBC-CIC-ICLI IN DBC
               MOVE FIO-GET-KEY TO FIO-CMND
               PERFORM SGC-FIO-DBC
               IF FIO-STAT-OKS
                   MOVE DBC-CIC-ICLI IN DBC TO WSS-CIC-ICLI
                   MOVE DBC-GLS-NOMC IN DBC TO CPT-STRN
                   PERFORM CPT-BLKS
                   MOVE CPT-STRN            TO DBC-GLS-NOMC IN DBC
                   MOVE DBC-GLS-NOMC IN DBC TO FRM-GLS-CTE1
      *           MOVE 'CLIEXI' TO QUE-COLA
      *           MOVE +100 TO QUE-LITM
      *           MOVE FRM-GLS-CTE1 TO QUE-ITEM
      *           MOVE QUE-PUT TO QUE-CMND
      *           PERFORM GNS-PRO-QUE
      
               MOVE DBC-NUM-ICLI IN DBC TO FRM-NUM-CLT1
               MOVE DBC-VRF-ICLI IN DBC TO FRM-VRF-CLT1
               MOVE DBC-IND-ICLI IN DBC TO FRM-IND-CLT1
               MOVE DBC-GLS-ICLI IN DBC TO FRM-GLS-CLT1.
      
           MOVE FIO-STAT TO PGM-STAT-RCC.
       FIN-GET-CUR-RCC.
           EXIT.
      
       GET-NXT-RCC SECTION.
       INI-GET-NXT-RCC.
           MOVE 'RCC-KEY-IOPD' TO FIO-AKEY.
           MOVE FIO-GET-NXT TO FIO-CMND.
           PERFORM DAP-FIO-RCC.
           IF FIO-STAT-OKS AND
              OPD-CIC-IOPD IN OPD = RCC-CIC-IOPD IN RCC
               MOVE RCC-CIC-ICLI IN RCC TO DBC-CIC-ICLI IN DBC
               MOVE FIO-GET-KEY TO FIO-CMND
               PERFORM SGC-FIO-DBC
               IF FIO-STAT-OKS
      
                MOVE DBC-GLS-NOMC IN DBC TO CPT-STRN
                PERFORM CPT-BLKS
                MOVE CPT-STRN            TO DBC-GLS-NOMC IN DBC
                MOVE DBC-GLS-NOMC IN DBC TO FRM-GLS-CTE2
                MOVE DBC-NUM-ICLI IN DBC TO FRM-NUM-CLT2
                MOVE DBC-VRF-ICLI IN DBC TO FRM-VRF-CLT2
                MOVE DBC-IND-ICLI IN DBC TO FRM-IND-CLT2
                MOVE DBC-GLS-ICLI IN DBC TO FRM-GLS-CLT2
                MOVE '00' TO PGM-STAT-DBC
           ELSE
               MOVE SPACES TO FRM-GLS-CTE2
               MOVE ZEROES TO FRM-NUM-CLT2
               MOVE SPACES TO FRM-VRF-CLT2
               MOVE SPACES TO FRM-IND-CLT2
               MOVE SPACES TO FRM-GLS-CLT2.
       FIN-GET-NXT-RCC.
           EXIT.
       COPY DAPBGVEN.
       COPY GNSBGPES.
       COPY TABBFCAM.
       COPY GNSBVTAB.
       COPY GNSBGINT.
      *DBG>*Tasa Interes             : INT-TIPT
      *DBG>*Valor Tasa Informada     : INT-TINT
      *DBG>*Valor de Cambio          : INT-VCAM
      *DBG>*Fecha Colocacion         : INT-FCOL
      *DBG>*Fecha Inicial Periodo    : INT-FUNO
      *DBG>*Fecha Final   Periodo    : INT-FDOS
      *DBG>*Fecha Basa Tasa Variable : INT-FBTV ( opcional )
      *DBG>*Fecha de Proceso         : INT-FPRO ( la rutina la obtiene)
      *DBG>*
      *DBG>*devuelve:
      *DBG>*INT-TIPE                 : Tasa calculada para el periodo
      *DBG>*INT-CMSG, INT-MENS       : Codigo y mensaje
      *DBG>*INT-IETB                 : Indicador de existencia de tasa base
      *DBG> GNS-CAL-INT SECTION.
      *DBG> INI-GNS-CAL-INT.
      *DBG>     MOVE SPACES TO INT-CMSG INT-MENS INT-IETB.
      *DBG>*Para sumar o multiplicar tasas segun sea simple o compuesta
      *DBG>     IF INT-SPBT = 'S'
      *DBG>         MOVE 0 TO INT-TIPA
      *DBG>     ELSE
      *DBG>         MOVE 1 TO INT-TIPA.
      *DBG>*Obtiene fecha de hoy para el chequeo de tasa variable
      *DBG>     IF INT-CVTI > SPACES
      *DBG>         PERFORM GET-FHOY
      *DBG>         MOVE HOY-DHOY TO INT-DPRO
      *DBG>         MOVE HOY-MHOY TO INT-MPRO
      *DBG>         MOVE HOY-SHOY TO INT-SPRO
      *DBG>         MOVE HOY-AHOY TO INT-APRO
      *DBG>         MOVE HOY-HHHY TO INT-HHPR
      *DBG>         MOVE HOY-MMHY TO INT-MMPR
      *DBG>         MOVE HOY-SSHY TO INT-SSPR.
      *DBG>*
      *DBG>     IF NOT ( INT-PREP > ZEROES AND INT-TFPR = 'C' )
      *DBG>     
      *DBG>          MOVE  'Q11' TO QUE-COLA
      *DBG>               MOVE +12 TO QUE-LITM
      *DBG>               MOVE INT-FUNO TO QUE-ITEM
      *DBG>               MOVE QUE-PUT TO QUE-CMND
      *DBG>               PERFORM GNS-PRO-QUE
      *DBG>     
      *DBG>               MOVE  'Q12' TO QUE-COLA
      *DBG>               MOVE +12 TO QUE-LITM
      *DBG>               MOVE INT-FDOS TO QUE-ITEM
      *DBG>               MOVE QUE-PUT TO QUE-CMND
      *DBG>               PERFORM GNS-PRO-QUE
      *DBG>     
      *DBG>         MOVE INT-DUNO TO FEC-DEC1
      *DBG>         MOVE INT-MUNO TO FEC-MEC1
      *DBG>         MOVE INT-SUNO TO FEC-SEC1
      *DBG>         MOVE INT-AUNO TO FEC-AEC1
      *DBG>         MOVE INT-DDOS TO FEC-DEC2
      *DBG>         MOVE INT-MDOS TO FEC-MEC2
      *DBG>         MOVE INT-SDOS TO FEC-SEC2
      *DBG>         MOVE INT-ADOS TO FEC-AEC2
      *DBG>         MOVE FEC-FORM-FEC TO FEC-FORM
      *DBG>         MOVE FEC-DIF-DIA  TO FEC-CMND
      *DBG>*Para GENESIS version 3.1
      *DBG>*        PERFORM PRO-FEC
      *DBG>         PERFORM CAL-FEC
      *DBG>         IF NOT FEC-STAT-OKS
      *DBG>             MOVE 'IN1FEC1FEC2-' TO INT-CMSG
      *DBG>             GO TO FIN-GNS-CAL-INT
      *DBG>         ELSE
      *DBG>             MOVE FEC-NDIA TO INT-SEPD
      *DBG>             MOVE INT-DUNO TO INT-DDMA
      *DBG>             MOVE INT-MUNO TO INT-MDMA
      *DBG>             MOVE INT-SUNO TO INT-SDMA
      *DBG>             MOVE INT-AUNO TO INT-ADMA
      *DBG>             PERFORM GNS-CAL-TPE
      *DBG>             GO TO FIN-GNS-CAL-INT.
      *DBG>     MOVE INT-DCOL TO FEC-ITM1 INT-DDMA.
      *DBG>     MOVE INT-MCOL TO FEC-ITM2 INT-MDMA.
      *DBG>     MOVE INT-SCOL TO FEC-ITM3 INT-SDMA.
      *DBG>     MOVE INT-ACOL TO FEC-ITM4 INT-ADMA.
      *DBG>     IF INT-SPR2 > 0
      *DBG>         MOVE INT-TINT TO INT-TINC
      *DBG>         MOVE INT-SPR2 TO INT-TINT
      *DBG>         MOVE INT-TINC TO INT-SPR2
      *DBG>     ELSE
      *DBG>         MOVE INT-TINT TO INT-SPR2.
      *DBG> SUM-GNS-CAL-INT.
      *DBG>     IF INT-UTPR = 'D'
      *DBG>         MOVE INT-PREP    TO FEC-NDIA
      *DBG>         MOVE FEC-SUM-DIA TO FEC-CMND
      *DBG>     ELSE
      *DBG>     IF INT-UTPR = 'M'
      *DBG>         MOVE INT-PREP    TO FEC-NMES
      *DBG>         MOVE FEC-SUM-MES TO FEC-CMND
      *DBG>     ELSE
      *DBG>         MOVE INT-PREP    TO FEC-NANO
      *DBG>         MOVE FEC-SUM-ANO TO FEC-CMND.
      *DBG>     MOVE FEC-FORM-FEC TO FEC-FORM.
      *DBG>*Para GENESIS version 3.1
      *DBG>*    PERFORM PRO-FEC.
      *DBG>     PERFORM CAL-FEC.
      *DBG>     IF NOT FEC-STAT-OKS
      *DBG>         MOVE 'INTFCOLPREP+' TO INT-CMSG
      *DBG>         GO TO FIN-GNS-CAL-INT.
      *DBG>     MOVE FEC-ITM1 TO INT-DAU1.
      *DBG>     MOVE FEC-ITM2 TO INT-MAU1.
      *DBG>     MOVE FEC-ITM3 TO INT-SAU1.
      *DBG>     MOVE FEC-ITM4 TO INT-AAU1.
      *DBG>     MOVE INT-DUNO TO INT-DAU2.
      *DBG>     MOVE INT-MUNO TO INT-MAU2.
      *DBG>     MOVE INT-SUNO TO INT-SAU2.
      *DBG>     MOVE INT-AUNO TO INT-AAU2.
      *DBG>     IF INT-FAU1 < INT-FAU2
      *DBG>         MOVE FEC-ITM1 TO INT-DDMA
      *DBG>         MOVE FEC-ITM2 TO INT-MDMA
      *DBG>         MOVE FEC-ITM3 TO INT-SDMA
      *DBG>         MOVE FEC-ITM4 TO INT-ADMA
      *DBG>         GO TO SUM-GNS-CAL-INT
      *DBG>     ELSE
      *DBG>     IF INT-FAU1 = INT-FAU2
      *DBG>         MOVE FEC-ITM1 TO INT-DDMA
      *DBG>         MOVE FEC-ITM2 TO INT-MDMA
      *DBG>         MOVE FEC-ITM3 TO INT-SDMA
      *DBG>         MOVE FEC-ITM4 TO INT-ADMA.
      *DBG>**********************************
      *DBG>*Obtener interes entre INT-DUNO y MIN(FECH,FDOS)
      *DBG>     MOVE INT-DUNO TO FEC-DEC1.
      *DBG>     MOVE INT-MUNO TO FEC-MEC1.
      *DBG>     MOVE INT-SUNO TO FEC-SEC1.
      *DBG>     MOVE INT-AUNO TO FEC-AEC1.
      *DBG> CON-GNS-CAL-INT.
      *DBG>     MOVE FEC-ITM1 TO INT-DAU1.
      *DBG>     MOVE FEC-ITM2 TO INT-MAU1.
      *DBG>     MOVE FEC-ITM3 TO INT-SAU1.
      *DBG>     MOVE FEC-ITM4 TO INT-AAU1.
      *DBG>     MOVE INT-DDOS TO INT-DAU2.
      *DBG>     MOVE INT-MDOS TO INT-MAU2.
      *DBG>     MOVE INT-SDOS TO INT-SAU2.
      *DBG>     MOVE INT-ADOS TO INT-AAU2.
      *DBG>     IF INT-FAU1 < INT-FAU2
      *DBG>         MOVE INT-DAU1 TO FEC-DEC2
      *DBG>         MOVE INT-MAU1 TO FEC-MEC2
      *DBG>         MOVE INT-SAU1 TO FEC-SEC2
      *DBG>         MOVE INT-AAU1 TO FEC-AEC2
      *DBG>     ELSE
      *DBG>         MOVE INT-DAU2 TO FEC-DEC2
      *DBG>         MOVE INT-MAU2 TO FEC-MEC2
      *DBG>         MOVE INT-SAU2 TO FEC-SEC2
      *DBG>         MOVE INT-AAU2 TO FEC-AEC2.
      *DBG>     MOVE FEC-DIF-DIA TO FEC-CMND.
      *DBG>     
      *DBG>     
      *DBG>*              MOVE  'Q21' TO QUE-COLA
      *DBG>*              MOVE +12 TO QUE-LITM
      *DBG>*              MOVE INT-FUNO TO QUE-ITEM
      *DBG>*              MOVE QUE-PUT TO QUE-CMND
      *DBG>*              PERFORM GNS-PRO-QUE
      *DBG>           
      *DBG>           
      *DBG>           
      *DBG>*              MOVE  'Q22' TO QUE-COLA
      *DBG>*              MOVE +12 TO QUE-LITM
      *DBG>*              MOVE INT-FDOS TO QUE-ITEM
      *DBG>*              MOVE QUE-PUT TO QUE-CMND
      *DBG>*              PERFORM GNS-PRO-QUE
      *DBG>           
      *DBG>           
      *DBG>           
      *DBG>*Para GENESIS version 3.1
      *DBG>*    PERFORM PRO-FEC.
      *DBG>     PERFORM CAL-FEC.
      *DBG>     IF NOT FEC-STAT-OKS
      *DBG>         MOVE 'IN2FEC1FEC2-' TO INT-CMSG
      *DBG>         GO TO FIN-GNS-CAL-INT.
      *DBG>     MOVE FEC-NDIA TO INT-SEPD.
      *DBG>     PERFORM GNS-CAL-TPE.
      *DBG>     IF INT-CMSG > SPACES
      *DBG>*         DISPLAY 'INT-CMSG : ' INT-CMSG
      *DBG>*         DISPLAY 'INT-MENS : ' INT-MENS
      *DBG>         GO TO FIN-GNS-CAL-INT.
      *DBG>*     DISPLAY 'FEC-FEC1 - FEC-FEC2 : ' FEC-FEC1 ' - ' FEC-FEC2.
      *DBG>*     DISPLAY 'FEC-NDIA            : ' FEC-NDIA.
      *DBG>*     DISPLAY 'INT-TIPE            : ' INT-TIPE WITH CONVERSION.
      *DBG>*     DISPLAY '------------------------------------------------'.
      *DBG>     MOVE INT-SPR2 TO INT-TINT.
      *DBG>*Se suma o se multiplica segun sea simple o compuesta
      *DBG>     IF INT-SPBT = 'S'
      *DBG>         ADD INT-TIPE TO INT-TIPA
      *DBG>     ELSE
      *DBG>         ADD 1 TO INT-TIPE
      *DBG>         MULTIPLY INT-TIPE BY INT-TIPA GIVING INT-TIPA.
      *DBG>*
      *DBG>*Se termina si la fecha sumada es mayor que la fecha Dos
      *DBG>     IF ( INT-FAU1 NOT < INT-FAU2 )
      *DBG>         IF INT-SPBT = 'S'
      *DBG>             MOVE INT-TIPA TO INT-TIPE
      *DBG>             GO TO FIN-GNS-CAL-INT
      *DBG>         ELSE
      *DBG>             SUBTRACT 1 FROM INT-TIPA GIVING INT-TIPE
      *DBG>             GO TO FIN-GNS-CAL-INT.
      *DBG>     MOVE INT-DAU1 TO FEC-ITM1.
      *DBG>     MOVE INT-MAU1 TO FEC-ITM2.
      *DBG>     MOVE INT-SAU1 TO FEC-ITM3.
      *DBG>     MOVE INT-AAU1 TO FEC-ITM4.
      *DBG>     IF INT-UTPR = 'D'
      *DBG>         MOVE INT-PREP    TO FEC-NDIA
      *DBG>         MOVE FEC-SUM-DIA TO FEC-CMND
      *DBG>     ELSE
      *DBG>     IF INT-UTPR = 'M'
      *DBG>         MOVE INT-PREP    TO FEC-NMES
      *DBG>         MOVE FEC-SUM-MES TO FEC-CMND
      *DBG>     ELSE
      *DBG>         MOVE INT-PREP    TO FEC-NANO
      *DBG>         MOVE FEC-SUM-ANO TO FEC-CMND.
      *DBG>     MOVE FEC-FORM-FEC TO FEC-FORM.
      *DBG>*Para GENESIS version 3.1
      *DBG>*    PERFORM PRO-FEC.
      *DBG>     PERFORM CAL-FEC.
      *DBG>     IF NOT FEC-STAT-OKS
      *DBG>         MOVE 'INTFCOLPREP+' TO INT-CMSG
      *DBG>         GO TO FIN-GNS-CAL-INT.
      *DBG>     MOVE INT-DAU1 TO FEC-DEC1 INT-DDMA.
      *DBG>     MOVE INT-MAU1 TO FEC-MEC1 INT-MDMA.
      *DBG>     MOVE INT-SAU1 TO FEC-SEC1 INT-SDMA.
      *DBG>     MOVE INT-AAU1 TO FEC-AEC1 INT-ADMA.
      *DBG>     GO TO CON-GNS-CAL-INT.
      *DBG> FIN-GNS-CAL-INT.
      *DBG>     MOVE ZEROES TO INT-FBTV.
      *DBG>     MOVE 0      TO INT-SPR2.
      *DBG> EXT-GNS-CAL-INT.
      *DBG>     EXIT.
      *DBG>           
      *DBG>*Transforma INT-SEPA segun Tipo de Periodo INT-IPER
      *DBG>* 07-MAY-1990 14:55
      *DBG> PRO-IPER SECTION.
      *DBG> INI-PRO-IPER.
      *DBG>*Busca el CIC de INT-IPER en MSC IPER de sistema TAB
      *DBG>     MOVE SPACES TO INT-CMSG INT-MENS.
      *DBG>     MOVE 'TAB'    TO MSC-COD-SIST FIO-SIST.
      *DBG>     MOVE 'IPER'   TO MSC-COD-TMSC IN MSC.
      *DBG>     MOVE INT-IPER TO MSC-COD-CMSC IN MSC.
      *DBG>     MOVE FIO-GET-KEY TO FIO-CMND.
      *DBG>     PERFORM GNS-FIO-MSC.
      *DBG>     IF FIO-STAT-OKS
      *DBG>         MOVE MSC-CIC-CMSC IN MSC TO INT-IPER
      *DBG>     ELSE
      *DBG>         MOVE 'CICIPERNEX' TO INT-CMSG.
      *DBG> FIN-PRO-IPER.
      *DBG>     EXIT.
      *DBG>           
      *DBG>*Obtiene tasa de interes dado un periodo, un tipo de tasa y
      *DBG>*un valor de tasa
      *DBG> OBT-VTIN SECTION.
      *DBG> INI-OBT-VTIN.
      *DBG>*Obtiene fecha de hoy para el chequeo de tasa variable
      *DBG>     IF INT-CVTI > SPACES
      *DBG>         PERFORM GET-FHOY
      *DBG>         MOVE HOY-DHOY TO INT-DPRO
      *DBG>         MOVE HOY-MHOY TO INT-MPRO
      *DBG>         MOVE HOY-SHOY TO INT-SPRO
      *DBG>         MOVE HOY-AHOY TO INT-APRO
      *DBG>         MOVE HOY-HHHY TO INT-HHPR
      *DBG>         MOVE HOY-MMHY TO INT-MMPR
      *DBG>         MOVE HOY-SSHY TO INT-SSPR.
      *DBG>     PERFORM GNS-CAL-TPE.
      *DBG> FIN-OBT-VTIN.
      *DBG>     EXIT.
      *DBG>     
      *DBG>GNS-CAL-TPE SECTION.
      *DBG> INI-GNS-CAL-TPE.
      *DBG>     PERFORM OBT-SEPA.
      *DBG>     IF INT-CMSG > SPACES
      *DBG>         GO TO FIN-GNS-CAL-TPE.
      *DBG>     PERFORM OBT-TINT.
      *DBG>     IF INT-CMSG > SPACES
      *DBG>         GO TO FIN-GNS-CAL-TPE.
      *DBG>     PERFORM OBT-TIPE.
      *DBG>     IF INT-CMSG > SPACES
      *DBG>         GO TO FIN-GNS-CAL-TPE.
      *DBG> FIN-GNS-CAL-TPE.
      *DBG>     EXIT.
      *DBG>     
      *DBG>*    Descripcion     : Separacion Periodo Interes
      *DBG>*    Observaciones   :
      *DBG>*      - Ampliar otros casos Periodo Base ( futuro ? )
      *DBG> OBT-SEPA SECTION.
      *DBG> INI-OBT-SEPA.
      *DBG>     MOVE SPACES TO INT-CMSG INT-MENS.
      *DBG>     IF INT-PBTI = 'D'
      *DBG>*JSS     MOVE 0 TO INT-S30D , INT-SMES , INT-S360 , INT-SANO
      *DBG>         MOVE 0 TO INT-S30D , INT-S360
      *DBG>         MOVE INT-SEPD TO INT-SDIA
      *DBG>     ELSE
      *DBG>     IF INT-PBTI = 'T' OR 'M'
      *DBG>*JSS     MOVE 0 TO INT-SANO , INT-SMES , INT-S360
      *DBG>         MOVE 0 TO INT-S360
      *DBG>         DIVIDE 30 INTO INT-SEPD GIVING INT-S30D
      *DBG>             REMAINDER INT-SDIA
      *DBG>     ELSE
      *DBG>     IF INT-PBTI = 'X' OR 'A'
      *DBG>*JSS     MOVE 0 TO INT-S30D , INT-SMES , INT-SANO
      *DBG>         MOVE 0 TO INT-S30D
      *DBG>         DIVIDE 360 INTO INT-SEPD GIVING INT-S360
      *DBG>             REMAINDER INT-SDIA
      *DBG>     ELSE
      *DBG>         MOVE 'INTPBTIINV' TO INT-CMSG.
      *DBG> FIN-OBT-SEPA.
      *DBG>     EXIT.
      *DBG>     
      *DBG>*    Descripcion     : Preparacion Tasas Formula Unica
      *DBG>*    Observaciones   :
      *DBG>*
      *DBG> OBT-TINT SECTION.
      *DBG> INI-OBT-TINT.
      *DBG>     MOVE SPACES TO INT-CMSG INT-MENS.
      *DBG>     IF INT-PBTI = 'D'
      *DBG>         MOVE INT-SPBT TO INT-MCTI
      *DBG>     ELSE
      *DBG>     IF INT-PBTI = 'T' OR 'M'
      *DBG>         IF INT-SEPD > 30
      *DBG>             MOVE INT-SPBT TO INT-MCTI
      *DBG>         ELSE
      *DBG>             MOVE INT-BPBT TO INT-MCTI
      *DBG>     ELSE
      *DBG>     IF INT-PBTI = 'X' OR 'A'
      *DBG>         IF INT-SEPD > 360
      *DBG>             MOVE INT-SPBT TO INT-MCTI
      *DBG>         ELSE
      *DBG>             MOVE INT-BPBT TO INT-MCTI
      *DBG>     ELSE
      *DBG>         MOVE 'INTPBTIINV' TO INT-CMSG
      *DBG>         GO TO FIN-OBT-TINT.
      *DBG>     MOVE INT-TINT TO INT-TINC.
      *DBG>     
      *DBG>*Si es tasa variable
      *DBG>*      IF ( INT-CVTI > SPACES ) AND
      *DBG>*         ( INT-IBTV NOT = INT-IBTV-NADA-MAS )
      *DBG>     IF ( INT-CVTI > SPACES )
      *DBG>          MOVE INT-FINT TO CAM-FEC-FCAM IN CAM(1)
      *DBG>          MOVE INT-FINT TO CAM-FEC-FCAM IN CAM(2)
      *DBG>     
      *DBG>          MOVE 'I'      TO CAM-MSC-TVAL IN CAM(1)
      *DBG>          MOVE INT-CVTI TO CAM-COD-CVAL IN CAM(1)
      *DBG>          MOVE INT-PBTI TO CAM-COD-TCAM IN CAM(1)
      *DBG>     
      *DBG>          MOVE INT-VCAM TO CAM-COD-VCAM IN CAM(2)
      *DBG>      
      *DBG>          MOVE FIO-GET-KEY TO FIO-CMND
      *DBG>          PERFORM TAB-FIO-CAM
      *DBG>     
      *DBG>          IF ( NOT FIO-STAT-OKS ) OR
      *DBG>             ( CAM-MSC-STAT IN CAM NOT = 'S' )
      *DBG>              PERFORM GNS-CHK-BTV
      *DBG>              IF INT-CMSG > SPACES
      *DBG>                  GO TO FIN-OBT-TINT
      *DBG>              ELSE
      *DBG>                  ADD CAM-SGV-VCAM IN CAM TO INT-TINC
      *DBG>          ELSE
      *DBG>              ADD CAM-SGV-VCAM IN CAM TO INT-TINC.
      *DBG>*     IF INT-CVTI > SPACES AND INT-IBTV = INT-IBTV-UNA-VEZ
      *DBG>*         ADD CAM-SGV-VCAM IN CAM TO INT-TINT
      *DBG>*         MOVE INT-IBTV-NADA-MAS TO INT-IBTV.
      *DBG>     
      *DBG>     IF INT-BCTI = 'A'
      *DBG>         COMPUTE INT-TINC ROUNDED =
      *DBG>             ( INT-TINC * 100 ) / ( 100 - INT-TINC ).
      *DBG>     
      *DBG>     IF INT-PBTI = 'D'
      *DBG>         COMPUTE INT-TDIA = INT-TINC / 100
      *DBG>         COMPUTE INT-T30D = INT-TINC * 30 / 100
      *DBG>         COMPUTE INT-T360 = INT-TINC * 360 / 100
      *DBG>     ELSE
      *DBG>     IF INT-PBTI = 'T' OR 'M'
      *DBG>         COMPUTE INT-T30D = INT-TINC / 100
      *DBG>         COMPUTE INT-T360 = INT-TINC * 12 / 100
      *DBG>         IF INT-MCTI = 'D'
      *DBG>             COMPUTE INT-TDIA =
      *DBG>                 ( 1 + ( INT-TINC / 100 ) )**( 1 / 30 ) - 1
      *DBG>         ELSE
      *DBG>             COMPUTE INT-TDIA = INT-TINC / 3000
      *DBG>     ELSE
      *DBG>     IF INT-PBTI = 'X' OR 'A'
      *DBG>         COMPUTE INT-T30D = INT-TINC / 1200
      *DBG>         COMPUTE INT-T360 = INT-TINC / 100
      *DBG>         IF INT-MCTI = 'D'
      *DBG>             COMPUTE INT-TDIA =
      *DBG>                 ( 1 + ( INT-TINC / 100 ) )**( 1 / 360 ) - 1
      *DBG>         ELSE
      *DBG>             COMPUTE INT-TDIA = INT-TINC / 36000
      *DBG>     ELSE
      *DBG>         MOVE 'INTPBTIINV' TO INT-CMSG.
      *DBG> FIN-OBT-TINT.
      *DBG>     EXIT.
      *DBG>     
      *DBG> GNS-CHK-BTV SECTION.
      *DBG> INI-GNS-CHK-BTV.
      *DBG>     MOVE 'N' TO INT-IETB.
      *DBG>     IF NOT FIO-STAT-OKS
      *DBG>         MOVE 'CAMBTSANXABT'      TO INT-CMSG
      *DBG>         MOVE CAM-KEY-CAMB IN CAM TO INT-MEN2
      *DBG>     ELSE
      *DBG>         MOVE 'CAMBTSANVABT'      TO INT-CMSG
      *DBG>         MOVE CAM-KEY-CAMB IN CAM TO INT-MEN2.
      *DBG>     IF ( CAM-FEC-FCAM IN CAM(1) < INT-FPRO ) OR
      *DBG>        ( CAM-FEC-FCAM IN CAM(1) = INT-FPRO AND
      *DBG>          INT-HPRO > '120000' )
      *DBG>         GO TO FIN-GNS-CHK-BTV.
      *DBG>     IF INT-FBTV NOT > ZEROES
      *DBG>         GO TO FIN-GNS-CHK-BTV.
      *DBG>*
      *DBG>     MOVE INT-DBTV TO CAM-NUM-DCAM IN CAM(1)
      *DBG>                      CAM-NUM-DCAM IN CAM(2).
      *DBG>     MOVE INT-MBTV TO CAM-NUM-MCAM IN CAM(1)
      *DBG>                      CAM-NUM-MCAM IN CAM(2).
      *DBG>     MOVE INT-SBTV TO CAM-NUM-SCAM IN CAM(1)
      *DBG>                      CAM-NUM-SCAM IN CAM(2).
      *DBG>     MOVE INT-ABTV TO CAM-NUM-ACAM IN CAM(1)
      *DBG>                      CAM-NUM-ACAM IN CAM(2).
      *DBG>     MOVE FIO-GET-KEY TO FIO-CMND.
      *DBG>     PERFORM TAB-FIO-CAM.
      *DBG>     IF NOT FIO-STAT-OKS
      *DBG>         MOVE 'CAMBTSANXABT'      TO INT-CMSG
      *DBG>         MOVE CAM-KEY-CAMB IN CAM TO INT-MEN2
      *DBG>     ELSE
      *DBG>     IF CAM-MSC-STAT IN CAM NOT = 'S'
      *DBG>         MOVE 'CAMBTSANVABT'      TO INT-CMSG
      *DBG>         MOVE CAM-KEY-CAMB IN CAM TO INT-MEN2
      *DBG>     ELSE
      *DBG>         MOVE SPACES              TO INT-CMSG
      *DBG>         MOVE SPACES              TO INT-MENS.
      *DBG> FIN-GNS-CHK-BTV.
      *DBG>     EXIT.
      *DBG>     
      *DBG>*    Descripcion     : Obtencion Tasa del Periodo
      *DBG>*    Observaciones   :
      *DBG>*      - Modificar el calculo para Interes Compuesto considerando
      *DBG>*        Base de Calculo para Bajo y Sobre Periodo Expresion Tasa
      *DBG> OBT-TIPE SECTION.
      *DBG> INI-OBT-TIPE.
      *DBG>     MOVE SPACES TO INT-CMSG INT-MENS.
      *DBG>     
      *DBG>     IF INT-MCTI = 'S'
      *DBG>         COMPUTE INT-TIPE ROUNDED =
      *DBG>             INT-TDIA * INT-SDIA + INT-T30D * INT-S30D +
      *DBG>             INT-T360 * INT-S360
      *DBG>     ELSE
      *DBG>     IF INT-MCTI = 'C'
      *DBG>         IF INT-PBTI = 'D'
      *DBG>             COMPUTE INT-TIPE ROUNDED =
      *DBG>                 ( INT-TDIA + 1 ) ** INT-SDIA - 1
      *DBG>         ELSE
      *DBG>         IF INT-PBTI = 'T' OR 'M'
      *DBG>             COMPUTE INT-TIPE ROUNDED =
      *DBG>                 ( INT-T30D + 1 ) ** INT-S30D *
      *DBG>                 ( INT-SDIA * INT-TDIA + 1 ) - 1
      *DBG>         ELSE
      *DBG>         IF INT-PBTI = 'X' OR 'A'
      *DBG>             COMPUTE INT-TIPE ROUNDED =
      *DBG>                 ( INT-T360 + 1 ) ** INT-S360 *
      *DBG>                 ( INT-SDIA * INT-TDIA + 1 ) - 1
      *DBG>         ELSE
      *DBG>             MOVE 'INTPBTIINV' TO INT-CMSG
      *DBG>             GO TO FIN-OBT-TIPE
      *DBG>     ELSE
      *DBG>     IF INT-MCTI = 'D'
      *DBG>         COMPUTE INT-TIPE ROUNDED =
      *DBG>             ( INT-TDIA + 1 ) ** INT-SEPD - 1
      *DBG>     ELSE
      *DBG>         MOVE 'INTMCTIINV' TO INT-CMSG
      *DBG>         GO TO FIN-OBT-TIPE.
      *DBG> FIN-OBT-TIPE.
      *DBG>     EXIT.
      
       COPY GNSBGVSM.
*% END
*% IF MANUAL_1
       DEL-QUE-CVD SECTION.                                             
       INI-DEL-QUE-CVD.                                                 
           MOVE CVD-NOM-TSCVD TO QUE-COLA.                              
      *     DISPLAY ' '.                                                
      *     DISPLAY' '.                                                 
      *     DISPLAY 'DAPQCVD ELIMINANDO COLA ' QUE-COLA                 
      *        ' ' SCR-NUM-PANT.                                        
           MOVE 1 TO SCR-NUM-PANT.                                      
           MOVE ZEROES TO SCR-TOT-OCCU.                                 
                                                                        
                                                                        
           MOVE QUE-DEL TO QUE-CMND.                                    
           PERFORM GNS-PRO-QUE.                                         

       FIN-DEL-QUE-CVD.                                                 
           EXIT.                                                        
                                                                        
*% END
