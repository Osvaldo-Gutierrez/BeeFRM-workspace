*%! Codigo adicional para archivo LDCPQLM
*% IF SETTAG
*% VSNPQ = "01-00"
*% FNCPQ = "1608_07"
*% VSNPU = "01-00"
*% FNCPU = "1608_07"
*% END
*% PGM_PTC = TRUE
*% LARGO_MI_COMMAREA = 33
*%! BLLCELLS_USR = TRUE
*%! IF PGM_DTC
*%! INCLUDE 'GNSSRC:MANEJO_VSI.SRC'
*%! END
*%! REG = 'CLF'
*% IF CMT_ID 
*% END
*% IF FIN_SCR_VARI
      *<<<< FIN_SCR_VARI
           03 SCR-DISP-RED REDEFINES
              SCR-DISP.
              05 SCR-IMAX   COMP     PIC S9(04).
              05 SCR-I      COMP     PIC S9(04).
ESTAS VARIABLES NO DEBEN SER COMP
              05 SCR-FRM-GLS-DISP    PIC X(15).
      *>>>> FIN_SCR_VARI
*% END
*% IF WSS
      *<<<< WSS
       COPY GNSWGHOY.
       COPY GNSWGRQA REPLACING ==ADR-REQA== BY ==ADR-RDC-REQA==.
       COPY GNSWGRQA REPLACING ==ADR-REQA== BY ==ADR-DBC-REQA==.
       COPY GNSWGRQA REPLACING ==ADR-REQA== BY ==ADR-CLF-REQA==.
       COPY SGCBRDBC.
       COPY COLBRRDC.
       COPY LDCBRCLF. 
       COPY GNSWGCPT.
       COPY LDCWGCCU.
       COPY LDCWGCEG.
       COPY LDCWGMSG.
       COPY LDCWXLSM.

      * CLAVE EMULACION
       01  WSS-KEY-EMUL.
      * IDENTIFICACION DE OPERACION
           03  WSS-KEY-EM01                        PIC 9(08).
      * CORRELATIVO ERROR
           03  WSS-KEY-EM02                        PIC 9(02).
      * CORRELATIVO DENTRO DEL ERROR ( LINEA OCURRENCIA )
           03  WSS-KEY-EM03                        PIC 9(02).

      * CLAVE EMULACION
       01  CMP-WSS-KEY-EMUL.
      * IDENTIFICACION DE OPERACION
           03  CMP-WSS-KEY-EM01                        PIC 9(08).
      * CORRELATIVO ERROR
           03  CMP-WSS-KEY-EM02                        PIC 9(02).
      * CORRELATIVO DENTRO DEL ERROR ( LINEA OCURRENCIA )
           03  CMP-WSS-KEY-EM03                        PIC 9(02).


       77  WSS-NUM-INDX    VALUE  ZEROES           PIC 9(03).

       01  WSS-TAB.
           03 WSS-TAB-GLS-DESC                     PIC X(40).
           03 WSS-TAB-GLS-DATA                     PIC X(60).

       01  WSS-LOG-QUE  VALUE 'N'                  PIC X(01).
       01  WSS-CTE-SI   VALUE 'S'                  PIC X(01).
           
      *>>>> WSS
*% END
*% IF INI_FIO
      *<<<< INI_FIO

           IF SCR-OFRM-SRV
              MOVE TSK-TERM-ALF TO LSM-COD-TERM
              MOVE TSK-TERM-ALF TO LSM-COD-TERM-MAS
           ELSE
              MOVE EIBTRMID     TO LSM-COD-TERM
              MOVE EIBTRMID     TO LSM-COD-TERM-MAS.

           MOVE TSK-TERM-ALF TO RUTMEN-COD-TERM.


      *>>>> INI_FIO
*% END
*% IF INI_FND_KEY
      *<<<< INI_FND_KEY

           MOVE SPACES TO FRM-MEN1.
           IF FRM-FFLD = FRM-FFLD-PF7
               MOVE PGM-SNUL TO PGM-STAT-DBC
               SUBTRACT 1 FROM SCR-I GIVING SCR-I
               IF SCR-I NOT > ZEROES
                   MOVE 'LSM RROPRV' TO MSG-COD-MENS
                   GO TO ERR-FND-KEY
               ELSE
                   GO TO CARGA-LSM
           ELSE
           IF FRM-FFLD = FRM-FFLD-PF8
               MOVE PGM-SNUL TO PGM-STAT-DBC
               ADD 1 SCR-I GIVING SCR-I
               IF SCR-I > SCR-IMAX
                   MOVE 'LSM RRONXT' TO MSG-COD-MENS
                   GO TO ERR-FND-KEY
               ELSE
                   GO TO CARGA-LSM.

           GO TO CON-FND-KEY.

      *>>>> INI_FND_KEY
*% END
*% IF FIN_FND_KEY
      *>>>> FIN_FND_KEY

       CON-FND-KEY.
      *
           MOVE ZEROES TO SCR-IMAX.
           MOVE 1      TO SCR-I.

           MOVE '00' TO FIO-STAT.

           PERFORM OBT-DAT-TS.
           IF MSG-COD-MENS > SPACES
              GO TO FIN-FND-KEY.

           MOVE 1 TO SCR-I.

       CARGA-LSM.

           MOVE SPACES TO MSG-COD-MENS.

           IF NOT SCR-OFRM-SRV
              PERFORM PUT-TAB-LSM.

           MOVE '00' TO FIO-STAT.
           GO TO FIN-FND-KEY.
      *
       ERR-FND-KEY.
           MOVE SCR-STAT-CON TO SCR-STAT.

           MOVE 'COL' TO MSG-COD-SIST.
           PERFORM GET-MSG.
           MOVE MSG-GLS-DESC TO FRM-MEN1.
           MOVE '00' TO FIO-STAT.
           GO TO FIN-FND-KEY.

      *>>>> FIN_FND_KEY
*% END
*% IF INI_SCR_DMSG
      *<<<< INI_SCR_DMSG
      * Con este codigo logramos que una vez terminada la consulta
      * las claves no se borren de la pantalla
           IF SCR-CMND = 'CON' AND
              SCR-INST = SCR-INST-GKY AND
              FRM-FFLD NOT = FRM-FFLD-RET
                  MOVE PGM-NO-LIMPIAR-NADA TO PGM-ICLR.
      *>>>> INI_SCR_DMSG
*% END
*% IF PFS_GET_CON OR PFS_GET_ACC OR PFS_SCR_GKEY
      *<<<< PFS_GET_CON OR PFS_GET_ACC OR PFS_SCR_GKEY
           IF NOT ( FRM-FFLD = FRM-FFLD-PF8 OR FRM-FFLD = FRM-FFLD-PF7 )
      *>>>>
*% END
*% IF PFS_SCR_ACC
      *<<<< PFS_SCR_ACC
           IF FRM-FFLD = FRM-FFLD-PF8 OR FRM-FFLD-PF7
               NEXT SENTENCE.
      *>>>>
*% END
*% IF FND_KEY
      *<<<<< FND_KEY
*% END
*% IF INI_HBL_KEY
      *<<<< INI_HBL_KEY
      *>>>> INI_HBL_KEY
*% END
*% IF EOF
      *<<<< EOF
       COPY GNSBGHOY.
       COPY SGCBGCLI.
       COPY SGCBFDBC.
       COPY COLBFRDC.
       COPY GNSBGCPT.
       COPY LDCBGCCU.
       COPY LDCBFCLF.
       COPY LDCBKCCU.
       COPY LDCBKCEG.



       CAR-MOV-LSM SECTION.
       INI-CAR-MOV-LSM.
           PERFORM GET-FHOY.

           MOVE SPACES          TO MSG-COD-MENS.

           MOVE 'TAB'           TO FIO-SIST.
           MOVE 'VLR'           TO TAB-CIC-TTAB IN TAB.
           MOVE '0999  '        TO TAB-CIC-CTAB IN TAB.
           MOVE 'TAB-CIC-TABL'  TO FIO-AKEY.
           MOVE FIO-GET-KEY     TO FIO-CMND.
           PERFORM GNS-FIO-TAB.
           IF NOT FIO-STAT-OKS
              MOVE 'TAB'          TO MSG-COD-SIST
              MOVE 'CIC0999  NEX' TO MSG-COD-MENS
              PERFORM GET-MSG
                 MOVE MSG-GLS-DESC TO FRM-MENS
                 MOVE 'S' TO SCR-IERR
                 GO TO FIN-CAR-MOV-LSM.

           MOVE TAB-COD-CTAB IN TAB TO CCU-COD-PESO IN CCU-VARI.

           MOVE DBC-NUM-ICLI IN LSM-FLD TO DBC-NUM-ICLI IN DBC
           MOVE DBC-IND-ICLI IN LSM-FLD TO DBC-IND-ICLI IN DBC
           MOVE DBC-GLS-ICLI IN LSM-FLD TO DBC-GLS-ICLI IN DBC
           MOVE 'DBC-IDC-ICLI' TO FIO-AKEY
           MOVE FIO-GET-KEY    TO FIO-CMND
           PERFORM GET-CLI
           IF MSG-COD-MENS > SPACES
              MOVE MSG-GLS-DESC TO FRM-MENS
              MOVE 'S' TO SCR-IERR
              GO TO FIN-CAR-MOV-LSM.

           MOVE DBC-CAI-ICLI IN DBC     TO CCU-CAI-ICLI.
           MOVE DBC-IIC-ICLI IN DBC     TO CCU-IIC-ICLI.

           IF OPC-IIC-IOPC IN LSM-FLD > ZEROES AND
              OPC-CAI-IOPC IN LSM-FLD > SPACES
              MOVE OPC-CAI-IOPC IN LSM-FLD TO OPC-CAI-IOPC IN OPC
              MOVE OPC-IIC-IOPC IN LSM-FLD TO OPC-IIC-IOPC IN OPC
              MOVE FIO-GET-KEY TO FIO-CMND
              PERFORM COL-FIO-OPC
              IF NOT FIO-STAT-OKS
                 MOVE FIO-STAT     TO PGM-STAT-OPC
                 MOVE 'COL'        TO MSG-COD-SIST
                 MOVE 'OPC    NEX' TO MSG-COD-MENS
                 PERFORM GET-MSG
                 MOVE MSG-GLS-DESC TO FRM-MENS
                 MOVE 'S' TO SCR-IERR
                 GO TO FIN-CAR-MOV-LSM
              ELSE
              IF OPC-MSC-STAT IN OPC = 'A'
                 MOVE FIO-STAT       TO PGM-STAT-OPC
                 MOVE 'COL'          TO MSG-COD-SIST
                 MOVE 'OPC    ACAYA' TO MSG-COD-MENS
                 PERFORM GET-MSG
                 MOVE MSG-GLS-DESC TO FRM-MENS
                 MOVE 'S' TO SCR-IERR
                 GO TO FIN-CAR-MOV-LSM
              ELSE
                MOVE OPC-CAI-IOPC IN LSM-FLD TO CCU-CAI-IOPC(1)
                MOVE OPC-IIC-IOPC IN LSM-FLD TO CCU-IIC-IOPC(1)
           ELSE
              MOVE SPACES                  TO CCU-CAI-IOPC(1)
              MOVE ZEROES                  TO CCU-IIC-IOPC(1).


           MOVE FIO-MSFL   TO CCU-MSFL.
           MOVE SCR-QIDD   TO CCU-QIDD.
           MOVE SCR-LIDD   TO CCU-LIDD.
           DISPLAY 'CCU-CMMA IN P: >'CCU-CMMA IN CCU-VARI'<'.
           MOVE CCU-CMMA   TO SYS-CMMA.
           MOVE SYS-LINK   TO SYS-CMND.
           MOVE 'LDCPSCCM' TO SYS-PROG.
           MOVE CCU-TCMA   TO SYS-TCMA.
           PERFORM GNS-PRO-SYS.
           MOVE SYS-CMMA TO CCU-CMMA.
           MOVE CCU-MSFL TO FIO-MSFL.

           IF CCU-NUM-MENS < 99
              MOVE '1'          TO FRM-COD-RESP IN LSM-FLD
              MOVE CCU-COD-MENS TO FRM-CIC-RESP IN LSM-FLD
           ELSE
              MOVE '0'          TO FRM-COD-RESP IN LSM-FLD
              MOVE SPACES       TO FRM-CIC-RESP IN LSM-FLD.

           DISPLAY 'TEST BERTTY'.

           PERFORM RED-TS-RUTMEN.

           DISPLAY 'TEST BERTTY 2'.

       FIN-CAR-MOV-LSM.
           EXIT.

       OBT-DAT-TS SECTION.
       INI-OBT-DAT-TS.
           DISPLAY 'TEST - OBT-DAT-TS'.
      *    EXEC CICS HANDLE CONDITION QIDERR(CON-OBT-DAT-TS)
      *                              ITEMERR(CON-OBT-DAT-TS)
      *    END-EXEC.
      *<<<<
           MOVE LSM-NOM-TSLSM       TO QUE-COLA.
           MOVE QUE-DEL             TO QUE-CMND.
           PERFORM GNS-PRO-QUE.

           MOVE RUTMEN-NOM-TSRUTMEN TO QUE-COLA.
           MOVE QUE-DEL             TO QUE-CMND.
           PERFORM GNS-PRO-QUE.


      *>>>>
       CON-OBT-DAT-TS.

           PERFORM CAR-MOV-LSM.
           DISPLAY 'TEST - POST CAR-MOV-LSM'.
       FIN-OBT-DAT-TS.
           EXIT.

       PUT-TAB-LSM SECTION.
       INI-PUT-TAB-LSM.
           PERFORM RED-TS.
           PERFORM LLE-DAT-PNT VARYING LSM-I FROM 1 BY 1
                   UNTIL LSM-I > LSM-IMAX.
       FIN-PUT-TAB-SCL.
           EXIT.

       LLE-DAT-PNT SECTION.
       INI-LLE-DAT-PNT.
           DISPLAY 'LSM-I: >'LSM-I.
           DISPLAY 'LSM-IMAX:>'LSM-IMAX.
           MOVE LSM-NUM-NLIN(LSM-I) TO FRM-NUM-NLIN IN LSM-FLD(LSM-I).
           MOVE LSM-CIC-IOPC(LSM-I) TO FRM-CIC-IOPC IN LSM-FLD(LSM-I).
           MOVE LSM-GLS-DMSG(LSM-I) TO FRM-GLS-DMSG IN LSM-FLD(LSM-I).
           DISPLAY 'FRM-NUM-NLIN('LSM-I') :>'FRM-NUM-NLIN(LSM-I)'<'.
           DISPLAY 'FRM-CIC-IOPC('LSM-I') :>'FRM-CIC-IOPC(LSM-I)'<'.
           DISPLAY 'FRM-GLS-DMSG('LSM-I') :>'FRM-GLS-DMSG(LSM-I)'<'.


       FIN-LLE-DAT-PNT.
           EXIT.

       RED-TS SECTION.
       INI-RED-TS.

      *    EXEC CICS HANDLE CONDITION QIDERR(FIN-RED-TS)
      *                              ITEMERR(FIN-RED-TS)
      *    END-EXEC.
      *<<<<
           MOVE LSM-NOM-TSLSM      TO QUE-COLA.
           MOVE LSM-TS             TO QUE-ITEM.
           MOVE LSM-LEN-TSLSM      TO QUE-LITM.
           MOVE SCR-I              TO QUE-NITM.
           MOVE QUE-GET            TO QUE-CMND.
           PERFORM GNS-PRO-QUE.
           IF QUE-STAT = QUE-STAT-OKS
              MOVE QUE-ITEM          TO LSM-TS
              DISPLAY 'RED-TS LSM-TS :>' LSM-TS'<'
           ELSE
              DISPLAY 'NO ENCONTRO DATOS RED-TS'.



      *>>>>
       FIN-RED-TS.
           EXIT.

       RED-TS-RUTMEN SECTION.
       INI-RED-TS-RUTMEN.

      *    EXEC CICS HANDLE CONDITION QIDERR(FIN-RED-TS-RUTMEN)
      *                              ITEMERR(FIN-RED-TS-RUTMEN)
      *    END-EXEC.
      *<<<<
           DISPLAY 'TEST - RED-TS-RUTMEN'.
           MOVE ZEROES TO QUE-NITM.
       LUP-RED-TS-RUTMEN.
           ADD 1 TO QUE-NITM.
           MOVE RUTMEN-LEN-TSRUTMEN TO QUE-LITM.
           MOVE RUTMEN-NOM-TSRUTMEN TO QUE-COLA.
           DISPLAY 'QUE-COLA: >'QUE-COLA'<'.
           MOVE QUE-GET             TO QUE-CMND.
           PERFORM GNS-PRO-QUE.
           DISPLAY 'TEST - POST GNS-PRO-QUE'.
           IF QUE-STAT = QUE-STAT-OKS
              DISPLAY 'RED-TS-RUTMEN QUE-ITEM :' QUE-ITEM
              MOVE QUE-ITEM TO RUTMEN-TS
              PERFORM WRT-TS
              GO TO LUP-RED-TS-RUTMEN
           ELSE
              DISPLAY 'NO ENCONTRO DATOS RED-TS-RUTMEN'.



           DISPLAY 'TEST - POST GNS-PRO-QUE'.

      *>>>>
       FIN-RED-TS-RUTMEN.
           EXIT.


       WRT-TS SECTION.
       INI-WRT-TS.
           DISPLAY 'GRABANDO TS'
           ADD 1 TO SCR-IMAX.

           MOVE RUTMEN-TS TO RUTMEN-ARRE-TS

           PERFORM CLR-VEC-TS VARYING LSM-I FROM 1 BY 1 UNTIL
                   LSM-I > LSM-IMAX.

           MOVE LSM-NOM-TSLSM  TO QUE-COLA.
           MOVE LSM-TS         TO QUE-ITEM.
           DISPLAY 'LSM-TS: >'LSM-TS'<'.
           MOVE LSM-LEN-TSLSM  TO QUE-LITM.
           MOVE QUE-PUT        TO QUE-CMND.
           PERFORM GNS-PRO-QUE.

       FIN-WRT-TS.
           EXIT.

       CLR-VEC-TS SECTION.
       INI-CLR-VEC-TS.

           MOVE LSM-I                   TO LSM-NUM-NLIN(LSM-I).
           MOVE RUTMEN-GLS-DMSG(LSM-I)  TO LSM-GLS-TOTA(LSM-I).
           DISPLAY 'RUTMEN-GLS-DMSG>'RUTMEN-GLS-DMSG(LSM-I)'<'LSM-I.
           DISPLAY 'LSM-GLS-TOTA   >'LSM-GLS-TOTA(LSM-I)'<'LSM-I.

       FIN-CLR-VEC-TS.
           EXIT.

      *>>>> EOF
*% END
