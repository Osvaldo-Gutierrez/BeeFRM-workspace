*%! Codigo adicional para archivo
*% LARGO_MI_COMMAREA = 79
*% IF FIN_SCR_VARI
      *<<<< FIN_SCR_VARI
       COPY SGCWGE2S.
      *>>>>
*% END
*% IF WSS
      *<<<< WSS
       COPY SGCWGE2W.
      * VARIABLE PARA DETERMINAR SI SE ENGANCHA DEPENDIENDO DEL VECTOR.
       01  WSS-PODE.
           03  WSS-NUM-PODE                         PIC 9(03).
       COPY GNSWGQUE. 
       COPY GNSBRRCE.
      *>>>>
*% END
*% IF INI_FIO
      *<<<< INI_FIO
           IF SCR-DESDE-CMN
      * MARCA QUE INGRESO POR 'EDP'
               MOVE 'EDP' TO SCR-IND-ING
               MOVE     1 TO SCR-IPRO
               GO TO FIN-INI-FIO.
           IF SCR-INST-EXT = WSS-INST-FTER-CIC
               MOVE WSS-INST-NULL TO SCR-INST-EXT
               PERFORM ING-FTER-CIC.
       FIN-INI-FIO.
      *>>>>
*% END
*% IF FIN_HBL_KEY
      *<<<< FIN_HBL_KEY
           IF  NOT (SCR-CMND = 'CON' AND SCR-CCPP = 'ACC')
                MOVE FRM-CPIM-AEY TO FRM-NUM-IMDR-ATR IN EDA-FLD
                MOVE FRM-CPIM-AEY TO FRM-VRF-IMDR-ATR IN EDA-FLD
                MOVE FRM-CPIM-AEY TO FRM-IND-IMDR-ATR IN EDA-FLD
                MOVE FRM-CPIM-AEY TO FRM-GLS-IMDR-ATR IN EDA-FLD
                MOVE FRM-CPIM-AEY TO FRM-GLS-NMDR-ATR IN EDA-FLD.
      *>>>>
*% END
*% IF EOF
      *<<<< EOF

       CPT-NOMC SECTION.
       INI-CPT-NOMC.
           MOVE DBC-GLS-NOMC IN DBC TO CPT-STRN.
           PERFORM CPT-BLKS.
           MOVE CPT-STRN TO DBC-GLS-NOMC IN EDA-FLD.
       FIN-CPT-NOMC.
           EXIT.

      *  MANEJO DE COLAS
       SET-QUE SECTION.
       INI-SET-QUE.
           PERFORM ERR-QUE.
           MOVE EIBTRMID TO QUE-TERM.
           COMPUTE QUE-LITM = 7 + 125.
           MOVE 'KEY' TO QUE-TYPE.
           MOVE 'ENT' TO QUE-IKEY.
           MOVE +125  TO QUE-LDAT.
           MOVE +0    TO QUE-PCUR.
           MOVE +1    TO QUE-NITM.
   
           MOVE 'CFP'                   TO KEY-COD-ENTI.
           MOVE DBC-GLS-NOMC IN EDA-FLD TO KEY-GLS-NOMC.
           MOVE DBC-NUM-ICLI IN EDA-FLD TO KEY-NUM-ICLI.
           MOVE DBC-VRF-ICLI IN EDA-FLD TO KEY-VRF-ICLI.
           MOVE DBC-IND-ICLI IN EDA-FLD TO KEY-IND-ICLI.
           MOVE DBC-GLS-ICLI IN EDA-FLD TO KEY-GLS-ICLI.
           MOVE SPACES                  TO KEY-CAI-IOPE.
           MOVE SPACES                  TO KEY-IIC-IOPE.
           MOVE ZEROES                  TO KEY-FEC-FENT.
           MOVE EDP-NUM-IEDP IN EDA-FLD TO KEY-NUM-IENT.
           MOVE SPACES                  TO KEY-COD-IENT.
           MOVE EDP-FEC-FINF IN EDA-FLD TO KEY-FEC-FCMT.
           MOVE ZEROES                  TO KEY-NUM-GCMT.
      *BUS-TAB busca glosa de codigo en tabla
           MOVE EDP-CIC-IMDT IN EDP TO EDS-CIC-ICLI IN EDS.
           MOVE FIO-GET-KEY TO FIO-CMND.
           PERFORM SGC-FIO-EDS.
           MOVE SPACES                  TO KEY-COD-USER.
           IF FIO-STAT-OKS
      *         MOVE EDS-COD-OFII IN EDS TO OFI-COD-OFIC IN OFI
      *         PERFORM BUS-OFI 
      *         MOVE 'TAB'               TO TAB-COD-SIST
      *         MOVE 'COM'               TO TAB-COD-TTAB IN TAB
      *         MOVE OFI-COD-COMU IN OFI TO TAB-COD-CTAB IN TAB
      *         PERFORM BUS-TAB
      *         MOVE TAB TO COM
      *         IF COM-COD-REGI IN COM > SPACES AND
      *            COM-COD-REGI IN COM = '13' 
               IF EDS-COD-ABGI IN EDS > SPACES
                   MOVE EDS-COD-ABGI IN EDS TO NUM-NUME
                   MOVE NUM-ZERO-S TO NUM-ZERO
                   MOVE NUM-SGNO-N TO NUM-SGNO
                   MOVE 12 TO NUM-NENT
                   MOVE 0  TO NUM-NDCM
                   CALL 'GNSPVNUM' USING NUM-VARI
                   IF NOT NUM-STAT-OKS
                       MOVE EDS-COD-ABGI IN EDS TO KEY-COD-USER.
           MOVE KEY-VARI TO QUE-DATA.
       FIN-SET-QUE.
           EXIT.

       CHK-QUEU SECTION.
       INI-CHK-QUEU.
           MOVE 1 TO QUE-NITM.
           MOVE QUE-GET TO QUE-CMND.
           PERFORM GNS-PRO-QUE.
       FIN-CHK-QUEU.
           EXIT.

       QUE-EOQ SECTION.
       INI-QUE-EOQ.
           MOVE QUE-STAT-EOQ TO QUE-STAT.
           GO TO FIN-GNS-PRO-QUE.
       FIN-QUE-EOQ.
           EXIT.

       QUE-NEX SECTION.
       INI-QUE-NEX.
           MOVE QUE-STAT-NEX TO QUE-STAT.
           GO TO FIN-GNS-PRO-QUE.
       FIN-QUE-NEX.
           EXIT.

      **************************************************************

       ERR-QUE SECTION.
       INI-ERR-QUE.
           EXEC CICS HANDLE CONDITION
                     QIDERR (QUE-NEX)
                     ITEMERR(QUE-EOQ)
           END-EXEC.
       FIN-ERR-QUE.
           EXIT.

       GNS-PRO-QUE SECTION.
       INI-GNS-PRO-QUE.
           IF QUE-CMND = QUE-PUT
               GO TO PUT-QUE
           ELSE
           IF QUE-CMND = QUE-GET
               GO TO GET-QUE
           ELSE
           IF QUE-CMND = QUE-MOD
               GO TO MOD-QUE
           ELSE
           IF QUE-CMND = QUE-DEL
               GO TO DEL-QUE.
           MOVE 'Comando invalido :' TO QUE-MEN1.
           MOVE QUE-CMND             TO QUE-MEN2.
           EXEC CICS XCTL
                     PROGRAM('GNSPPABT')
                     COMMAREA(QUE-MENS)
                     LENGTH(+79)
           END-EXEC.

       PUT-QUE.
           EXEC CICS WRITEQ TS
                     QUEUE(QUE-COLA)
                     FROM(QUE-ITEM)
                     LENGTH(QUE-LITM)
                     AUXILIARY
           END-EXEC.
       FIN-PUT-QUE.
           GO TO FIN-GNS-PRO-QUE.

       GET-QUE.
           EXEC CICS READQ TS
                     QUEUE(QUE-COLA)
                     INTO(QUE-ITEM)
                     LENGTH(QUE-LITM)
                     ITEM(QUE-NITM)
           END-EXEC.
       FIN-GET-QUE.
           GO TO FIN-GNS-PRO-QUE.

       MOD-QUE.
           EXEC CICS WRITEQ TS
                     QUEUE(QUE-COLA)
                     FROM(QUE-ITEM)
                     LENGTH(QUE-LITM)
                     ITEM(QUE-NITM)
                     REWRITE
           END-EXEC.
       FIN-MOD-QUE.
           GO TO FIN-GNS-PRO-QUE.

       DEL-QUE.
           EXEC CICS DELETEQ TS
                     QUEUE(QUE-COLA)
           END-EXEC.
       FIN-DEL-QUE.
           GO TO FIN-GNS-PRO-QUE.

       FIN-GNS-PRO-QUE.
           EXIT.

      *>>>>
*% END
*% IF EOF
      *<<<< EOF
      *  CODIGO ADICIONAL PARA ENGANCHE PROGRAMAS

       DET-ENG-FAC SECTION.
       INI-DET-ENG-FAC.
       FIN-DET-ENG-FAC.
           EXIT.

       ING-FTER-CIC SECTION.
       INI-ING-FTER-CIC.
           PERFORM ING-SETE.
           MOVE SCR-INST-GKY TO SCR-INST.
           PERFORM HBL-IKY.
           PERFORM SCR-CLRA-EDA.
           PERFORM EDT-KEY-EDA.
           PERFORM EDT-FLD-EDA.
           MOVE 'SGC' TO MSG-COD-SIST.
           MOVE SCR-EXT-MENS TO MSG-COD-MENS.
           PERFORM GET-MSG.
           MOVE MSG-GLS-DESC TO EDA-GLS-MENS.
           MOVE ZEROES TO SCR-NUM-ICOR.
           MOVE SPACES TO SCR-CIC-ICIC
                          SCR-VEC-ENG
                          SCR-VEC-FST
                          SCR-COD-AUX1
                          SCR-INST-EXT
                          SCR-EXT-MENS.
           PERFORM SCR-INIT.
           PERFORM SCR-EXIT.
       FIN-ING-FTER-CIC.
           EXIT.

       ING-SETE SECTION.
       INI-ING-SETE.
           PERFORM CRG-IDX-ENG.
           PERFORM CRG-TBL-ENG.
           MOVE WSS-NTRN(SCR-IPRO) TO SCR-NTRN.
           MOVE WSS-PROG(SCR-IPRO) TO SCR-PROG.
           MOVE WSS-NMAP(SCR-IPRO) TO SCR-NMAP.
           MOVE WSS-NLIB(SCR-IPRO) TO SCR-NLIB.
       FIN-ING-SETE.
           EXIT.

       EGR-FPEN-CIC SECTION.
       INI-EGR-FPEN-CIC.
           PERFORM CRG-TBL-ENG.
           ADD 1 TO SCR-IPRO.
           IF SCR-IND-ENG IN SCR-VEC-ENG(SCR-IPRO) = SPACES
               GO TO INI-EGR-FPEN-CIC.
           MOVE WSS-INST-FPEN-CIC TO SCR-INST-EXT.
           MOVE WSS-PROG(SCR-IPRO) TO SYS-PROG.
           MOVE SCR-VARI TO SYS-CMMA.
           MOVE SCR-TCMA TO SYS-TCMA.
           MOVE SYS-XCTL TO SYS-CMND.
           PERFORM GNS-PRO-SYS.
       FIN-EGR-FPEN-CIC.
           EXIT.

       SCR-INIT SECTION.
       INI-SCR-INIT.
           MOVE 3  TO FRM-PLIN.
           MOVE 19 TO FRM-NLIN.
           MOVE FRM-CLR-FRM TO FRM-CMND.
           PERFORM GNS-PRO-FRM.
           MOVE FRM-SINI-DBNF TO FRM-SINI.
           MOVE SCR-NMAP TO FRM-NAME.
           MOVE SCR-NLIB TO FRM-NLIB.
           MOVE EDA-FLD TO FRM-DFLD.
           MOVE FRM-INI TO FRM-CMND.
           PERFORM GNS-PRO-FRM.
       FIN-SCR-INIT.
           EXIT.
       COPY SGCBGE2C.
      *
      *>>>>
*% END
*%! RVM: 25-06-92 VSI NO MANEJA PFS DEPENDIENTES DE DTC
*% IF PGM_DTC
      *<<<< PGM_DTC
*% RA1 = "DBC"
*% RA2 = "EDP"
*% NRA = 2
*% FRM = "EDA"
*% INCLUDE 'PFSALLALL'
      *>>>>
*% END
*% IF WSS_DTC
      *<<<< WSS_DTC
       COPY GNSWGRQA REPLACING ==ADR-REQA== BY ==ADR-ADP-REQA==. 
       COPY GNSWGRQA REPLACING ==ADR-REQA== BY ==ADR-CCM-REQA==. 
       COPY GNSWGRQA REPLACING ==ADR-REQA== BY ==ADR-REC-REQA==. 
       COPY GNSWGRQA REPLACING ==ADR-REQA== BY ==ADR-DBC-REQA==. 
       COPY GNSWGRQA REPLACING ==ADR-REQA== BY ==ADR-OFI-REQA==. 
       COPY GNSWGRQA REPLACING ==ADR-REQA== BY ==ADR-USR-REQA==. 
       COPY GNSWGRQA REPLACING ==ADR-REQA== BY ==ADR-RCE-REQA==.
       COPY GNSWGRQA REPLACING ==ADR-REQA== BY ==ADR-EDS-REQA==.
      *>>>>
*% END
*% IF WSS_IBM
      *<<<< WSS_IBM
       COPY SGCBRADP.
       COPY SGCBRREC.
       COPY SGCBRCCM.
       COPY SGCBRDBC.
       COPY TABBROFI.
       COPY TABBRUSR.
       COPY TABBRCOM.
       COPY SGCBREDS.
       COPY GNSWGSTR.
       COPY GNSWGCPT.
       01  WSS-VARI.
           03  WSS-FEC-FEDP                               PIC X(08).
           03  WSS-VCT-PODE
               05  WSS-ELM-PODE      OCCURS 100           PIC X(01).
           03  WSS-COD-MENS.
               05  WSS-GLS-MENS                           PIC X(09).
               05  WSS-IND-RSTR                           PIC X(01).
               05  WSS-IND-CMTR                           PIC X(01).
           03  WSS-GLS-IENT.
               05  WSS-CAI-IMDT                           PIC X(04).
               05  WSS-IIC-IMDT                           PIC X(08).
               05  WSS-NUM-IEDP                           PIC 9(03).
               05  WSS-IND-PODE                           PIC X(01).
               05  WSS-FIL-IENT                           PIC X(14).
           03  WSS-IFAC                          VALUE 0  PIC 9(01).
               88 NO-EXISTE-FAC                  VALUE 0.
               88 EXISTE-FAC                     VALUE 1.
           03  WSS-ICOR                          VALUE 0  PIC 9(01).
               88 NO-ASIGNE-CORRELATIVO          VALUE 0.
           03  WSS-IMAX                          VALUE 55 PIC 9(02).
           03  WSS-I                                      PIC 9(02).
           03  WSS-CIC-ICLI                               PIC X(12).
           03  CLS-VARI.
               05  CLS-I                                  PIC 9(02).
               05  CLS-IIMX                 VALUE 10      PIC 9(02).
               05  CLS-IMAX                               PIC 9(02).
               05  CLS-RMAX                 VALUE 55      PIC 9(02).
               05  CLS-VEC-CLAP.
                   07  CLS-COD-CLAP OCCURS 10             PIC X(05).
           03  WSS-IND-PODR                               PIC X(01).
           03  WSS-IND-MPOD                               PIC X(01).
           03  WSS-COD-IPOD                               PIC X(03).
           03  WSS-VEC-PODE.
               05  VEC-IND-PODE    OCCURS 100             PIC X(01).

      *>>>>
*% END
*% IF INI_FND_KEY
      *<<<< INI_FND_KEY
           IF NOT (FRM-FFLD = FRM-FFLD-PF8 OR 
                   FRM-FFLD = FRM-FFLD-PF7 OR
                   FRM-FFLD = FRM-FFLD-PF6 OR
                   FRM-FFLD = FRM-FFLD-PF5 )
               IF SCR-CCPP = 'ING'
                   PERFORM BUS-CIC-CLI
                   IF NOT FIO-STAT-OKS
                       MOVE MSG-GLS-DESC TO FRM-MENS
                       MOVE '00' TO FIO-STAT
                       MOVE SCR-STAT-CON TO SCR-STAT
                       GO TO FIN-FND-KEY
                   ELSE
                       PERFORM BUS-COR-EDA
               ELSE
                   IF EDP-NUM-IEDP IN EDA-FLD NOT > ZEROES
                       PERFORM BUS-CIC-CLI
                       IF NOT FIO-STAT-OKS
                           MOVE MSG-GLS-DESC TO FRM-MENS
                           MOVE '00' TO FIO-STAT
                           MOVE SCR-STAT-CON TO SCR-STAT
                           GO TO FIN-FND-KEY
                       ELSE
                           PERFORM BUS-COR-EDA
                   ELSE
                       PERFORM BUS-CIC-CLI
                       IF NOT FIO-STAT-OKS
                           MOVE MSG-GLS-DESC TO FRM-MENS
                           MOVE '00' TO FIO-STAT
                           MOVE SCR-STAT-CON TO SCR-STAT
                           GO TO FIN-FND-KEY.
      *>>>>
*% END
*% IF FND_KEY
      *<<<< FND_KEY
*%! RVM: 25-06-92 VSI NO MANEJA PFS DEPENDIENTES DE DTC
*% IF PGM_DTC
      *<<<< PGM_DTC
           IF FRM-FFLD = FRM-FFLD-PF5 OR FRM-FFLD-PF6
               PERFORM LEE-NXT-PRV-POD
               IF MSG-COD-MENS = 'EDPSI'
                   PERFORM SCR-CLRA-EDA
                   GO TO BUS-ADP
               ELSE
                   MOVE SPACES TO PGM-STAT
                   IF FRM-FFLD = FRM-FFLD-PF5
                       MOVE 'SGC' TO MSG-COD-SIST
                       MOVE 'EDP    NOPRV' TO MSG-COD-MENS
                       PERFORM GET-MSG
                       MOVE MSG-GLS-DESC TO FRM-MENS
                       MOVE '00' TO FIO-STAT
                       MOVE SCR-STAT-CON TO SCR-STAT
                       GO TO FIN-FND-KEY
                   ELSE
                       MOVE 'SGC' TO MSG-COD-SIST
                       MOVE 'EDP    NONXT' TO MSG-COD-MENS
                       PERFORM GET-MSG
                       MOVE MSG-GLS-DESC TO FRM-MENS
                       MOVE '00' TO FIO-STAT
                       MOVE SCR-STAT-CON TO SCR-STAT
                       GO TO FIN-FND-KEY.

           IF FRM-FFLD = FRM-FFLD-PF7 OR FRM-FFLD-PF8
               PERFORM LEE-NXT-PRV
               IF FIO-STAT-OKS
                   PERFORM SCR-CLRA-EDA
                   GO TO BUS-ADP
               ELSE
                   MOVE SPACES TO PGM-STAT
                   IF FRM-FFLD = FRM-FFLD-PF7
                       MOVE 'SGC' TO MSG-COD-SIST
                       MOVE 'EDP    NOPRV' TO MSG-COD-MENS
                       PERFORM GET-MSG
                       MOVE MSG-GLS-DESC TO FRM-MENS
                       MOVE '00' TO FIO-STAT
                       MOVE SCR-STAT-CON TO SCR-STAT
                       GO TO FIN-FND-KEY
                   ELSE
                       MOVE 'SGC' TO MSG-COD-SIST
                       MOVE 'EDP    NONXT' TO MSG-COD-MENS
                       PERFORM GET-MSG
                       MOVE MSG-GLS-DESC TO FRM-MENS
                       MOVE '00' TO FIO-STAT
                       MOVE SCR-STAT-CON TO SCR-STAT
                       GO TO FIN-FND-KEY.
           IF SCR-STAT = SCR-STAT-CON
               MOVE 'F' TO EDP-IND-TINF IN EDP.
      *>>>>
*% END
       SIG-FND-KEY.
      *>>>>
*% END
*% IF FIN_FND_KEY
      *<<<< FIN_FND_KEY
           IF SCR-CCPP = 'ACT' AND NOT FIO-STAT-OKS
              IF NO-ASIGNE-CORRELATIVO
                  MOVE FIO-STAT-NEX TO FIO-STAT
                  GO TO FIN-FND-KEY.
           IF FIO-STAT-OKS AND
              SCR-STAT = SCR-STAT-CON AND
              EDP-IND-TINF IN EDP = 'F'
               IF ADP-CIC-IAPO IN ADP > SPACES
                   MOVE 1 TO WSS-IFAC IN WSS-VARI
               ELSE
                   MOVE 'P' TO  EDP-IND-TINF IN EDP
                   GO TO SIG-FND-KEY.
           IF ( NOT FIO-STAT-OKS) AND
              SCR-STAT = SCR-STAT-CON AND
              EDP-IND-TINF IN EDP = 'F'
               MOVE 'P' TO  EDP-IND-TINF IN EDP
                GO TO SIG-FND-KEY.
           IF NOT FIO-STAT-OKS
               GO TO FIN-FND-KEY.
*%! RVM: 25-06-92 VSI NO MANEJA PFS DEPENDIENTES DE DTC
*% IF PGM_DTC
      *<<<< PGM_DTC
           MOVE ADR-EDP-REQA TO SCR-EDP-REQA.
      *>>>>
*% END
       BUS-ADP.
           IF ADP-CIC-IAPO IN ADP >  SPACES AND
              SCR-STAT = SCR-STAT-CON AND EXISTE-FAC
               PERFORM MOV-IND-PODE
               IF FRM-SUAR = FRM-SUAR-MAL
                   MOVE '00' TO FIO-STAT
                   MOVE SCR-STAT-CON TO SCR-STAT
                   MOVE MSG-GLS-DESC TO FRM-MENS
                   GO TO FIN-FND-KEY
               ELSE
                   MOVE '00' TO FIO-STAT
                   MOVE FIO-STAT TO PGM-STAT-EDP
                   GO TO FIN-FND-KEY.
           MOVE SPACES TO ADP-KEY-IADP.
           MOVE EDP-CIC-IMDT IN EDP TO ADP-CIC-IMDT IN ADP.
           MOVE 'P' TO ADP-IND-TINF IN ADP.
           MOVE EDP-NUM-IEDP IN EDP TO ADP-NUM-IEDP IN ADP.
           MOVE FIO-GET-NLS TO FIO-CMND.
       LUP-ADP.
           PERFORM SGC-FIO-ADP.
           IF FIO-STAT-OKS AND
              EDP-CIC-IMDT IN EDP = ADP-CIC-IMDT IN ADP AND
              ADP-IND-TINF IN ADP = 'P' AND
              EDP-NUM-IEDP IN EDP = ADP-NUM-IEDP IN ADP
               MOVE FRM-SUAR-MAL TO FRM-SUAR
               PERFORM CHK-VEC-PODE VARYING FRM-IFLD FROM 1 BY 1
                  UNTIL FRM-IFLD > WSS-IMAX OR FRM-SUAR = FRM-SUAR-OKS
                   IF NOT FRM-SUAR = FRM-SUAR-OKS
                       MOVE FIO-GET-NXT TO FIO-CMND
                       GO TO LUP-ADP
                   ELSE
                       IF ADP-CIC-IAPO IN ADP > SPACES
                           MOVE ADP-CIC-IAPO IN ADP TO DBC-CIC-ICLI
                                                             IN DBC
                           MOVE FIO-GET-KEY TO FIO-CMND
                           PERFORM SGC-FIO-DBC
                           IF NOT FIO-STAT-OKS
                               MOVE 'SGC' TO MSG-COD-SIST
                               MOVE 'IAPO    NEX' TO MSG-COD-MENS
                               PERFORM GET-MSG
                               MOVE '00' TO FIO-STAT
                               MOVE SCR-STAT-CON TO SCR-STAT
                               MOVE MSG-GLS-DESC TO FRM-MENS
                               GO TO FIN-FND-KEY
                           ELSE
                               MOVE '00' TO PGM-STAT-ADP
                               
                               PERFORM CPT-NOMC
                               
                               MOVE DBC-NUM-ICLI IN DBC TO FRM-NUM-IMDR 
                                                             IN EDA-FLD
                               MOVE DBC-IND-ICLI IN DBC TO FRM-IND-IMDR
                                                             IN EDA-FLD
                               MOVE DBC-GLS-ICLI IN DBC TO FRM-GLS-IMDR
                                                             IN EDA-FLD
                               MOVE DBC-VRF-ICLI IN DBC TO FRM-VRF-IMDR
                                                             IN EDA-FLD
                               MOVE EDP-CIC-IMDT IN EDP TO DBC-CIC-ICLI
                                                                 IN DBC
                               MOVE FIO-GET-KEY TO FIO-CMND
                               PERFORM SGC-FIO-DBC
                       ELSE
                           MOVE '00' TO PGM-STAT-ADP.
           MOVE PGM-STAT-EDP TO FIO-STAT.
           
           IF FIO-STAT-OKS
                IF EDP-MSC-STAT IN EDP = 'A'
                    IF SCR-CMND NOT = 'DVF'
                        MOVE 'SGC' TO MSG-COD-SIST
                        MOVE 'EDP    YAACA' TO MSG-COD-MENS
                        PERFORM GET-MSG
                        MOVE MSG-GLS-DESC TO FRM-MENS
                        MOVE '00' TO FIO-STAT
                        MOVE SCR-STAT-CON TO SCR-STAT
                        GO TO FIN-FND-KEY
                    ELSE
                        NEXT SENTENCE
                ELSE
                    IF SCR-CMND = 'DVF'
                        MOVE 'SGC' TO MSG-COD-SIST
                        MOVE 'EDP    YADES' TO MSG-COD-MENS
                        PERFORM GET-MSG
                        MOVE MSG-GLS-DESC TO FRM-MENS
                        MOVE '00' TO FIO-STAT
                        MOVE SCR-STAT-CON TO SCR-STAT
                        GO TO FIN-FND-KEY.
           MOVE PGM-STAT-EDP TO FIO-STAT.
      *>>>>
*% END
*% IF CMN_ING OR INI_CMN_MOD OR INI_CMN_ELI
      *<<<< CMN_ING OR INI_CMN_MOD OR INI_CMN_ELI
           MOVE 'P' TO EDP-IND-TINF IN EDP.
      *>>>>
*% END
*% IF CMN_ING
      *<<<< CMN_ING
           MOVE SPACES TO EDP-MSC-TACC IN EDP.
           MOVE SPACES TO EDP-MSC-STAT IN EDP.
           MOVE SPACES TO EDP-COD-OTRN IN EDP.
           MOVE SPACES TO EDP-COD-ATRN IN EDP.
           MOVE SPACES TO EDP-COD-ABGI IN EDP.
           MOVE SPACES TO EDP-COD-OFII IN EDP.
           MOVE SPACES TO EDP-COD-TINS IN EDP.
           MOVE SPACES TO EDP-GLS-DISP IN EDP.
      *>>>>
*% END
*% IF CMN_ING OR CMN_MOD
      *<<<< CMN_ING OR CMN_MOD
           PERFORM GET-FHOY.
           MOVE HOY-DHOY IN HOY-VARI TO EDP-NUM-DTRN IN EDP.
           MOVE HOY-MHOY IN HOY-VARI TO EDP-NUM-MTRN IN EDP.
           MOVE HOY-AHOY IN HOY-VARI TO EDP-NUM-ATRN IN EDP.
           MOVE HOY-SHOY IN HOY-VARI TO EDP-NUM-STRN IN EDP.
           MOVE HOY-HHOY IN HOY-VARI TO EDP-HRA-HRTR IN EDP.
      *>>>>
*% END
*% IF FIN_CMN_ING
      *<<<< FIN_CMN_ING
           MOVE FIO-STAT TO PGM-STAT-ADP.
           PERFORM SET-QUE.
           MOVE QUE-MOD      TO QUE-CMND.
           PERFORM GNS-PRO-QUE.
           IF QUE-STAT NOT = QUE-STAT-OKS
               PERFORM SET-QUE
               MOVE QUE-PUT TO QUE-CMND
               PERFORM GNS-PRO-QUE.
           IF NOT PGM-STAT-ADP-OKS
      *        Error inconsistencia en el ingreso : informar
               MOVE FIO-MENS TO FRM-MENS
               GO TO FIN-CMN-ING.
           PERFORM KEY-ADP-EDA.
           PERFORM RET-ADP-EDA.
           MOVE EDP-CIC-IMDT IN EDP TO ADP-CIC-IMDT IN ADP.
           MOVE EDP-NUM-IEDP IN EDP TO ADP-NUM-IEDP IN ADP.
           MOVE 'P'    TO ADP-IND-TINF IN ADP.
           MOVE 1      TO ADP-NUM-IGRP IN ADP.
           MOVE ZEROES TO ADP-NUM-ICMP IN ADP.
           MOVE EDP-STP-ITRN IN EDP TO ADP-STP-ITRN IN ADP.
           MOVE SPACES TO ADP-MSC-TACC IN ADP.
           MOVE SPACES TO ADP-MSC-STAT IN ADP.
           MOVE SPACES TO ADP-COD-OTRN IN ADP.
           MOVE SPACES TO ADP-COD-ATRN IN ADP.
           MOVE SPACES TO ADP-IND-CONE IN ADP.
           MOVE SPACES TO ADP-GLS-DISP IN ADP.
           PERFORM PUT-ADP VARYING FRM-IFLD FROM 1 BY 1
                UNTIL FRM-IFLD > WSS-IMAX.
           MOVE '00' TO FIO-STAT.
      *>>>>
*% END
*% IF FIN_CMN_ING
      *<<<< FIN_CMN_ING
      *ISP ENGANCHE
           PERFORM CRG-IDX-ENG.
           PERFORM DET-ENG-FAC VARYING WSS-NUM-PODE FROM 1 BY 1 UNTIL
                                       WSS-NUM-PODE > WSS-IMAX OR
               ( EDP-IND-PODE IN EDP(WSS-NUM-PODE) NOT = SPACES AND
                 EDP-IND-PODE IN EDP(WSS-NUM-PODE) NOT = 'S'    AND
                 EDP-IND-PODE IN EDP(WSS-NUM-PODE) NOT = 'N' ).
           MOVE EDP-CAI-IMDT IN EDP TO SCR-CAI-ICIC.
           MOVE EDP-IIC-IMDT IN EDP TO SCR-IIC-ICIC.
           MOVE EDP-NUM-IEDP IN EDP TO SCR-NUM-IEDP.
           MOVE EDP-IND-PODE IN EDP(WSS-NUM-PODE) TO SCR-COD-APOD.
           MOVE ADP-COD-CLAP IN ADP TO SCR-COD-CLAP.
           MOVE 'EDP    INGOK' TO SCR-EXT-MENS.
           MOVE 1 TO SCR-NUM-ICOR.
           MOVE 'F10' TO SCR-COD-AUX2.
           IF ADP-COD-CLAP IN EDA-FLD > SPACES
               MOVE WSS-IDX-ICFP TO SCR-IPRO
      *ISP ES NECESARIO INICIALIZAR ESTA VARIABLE
      *    PARA EVITAR ASRA EN REC(APO)
               MOVE 1 TO SCR-NUM-IGRP
               MOVE 'S' TO SCR-IND-ENG IN SCR-VEC-ENG(WSS-IDX-IAPO)
               MOVE 'S' TO SCR-IND-FST IN SCR-VEC-FST(WSS-IDX-IAPO)
               PERFORM EGR-FPEN-CIC
           ELSE
               IF WSS-NUM-PODE NOT > WSS-IMAX
                   MOVE WSS-NUM-PODE        TO SCR-NUM-ICOR
                   MOVE 'F10' TO SCR-COD-AUX2
                   MOVE 'S' TO SCR-IND-ENG IN SCR-VEC-ENG(WSS-IDX-ICFP)
                   MOVE 'S' TO SCR-IND-FST IN SCR-VEC-FST(WSS-IDX-ICFP)
                   PERFORM EGR-FPEN-CIC.
       CFP-CMN-ING.
      *>>>>
*% END
*% IF FIN_CMN_MOD
      *<<<< FIN_CMN_MOD
           IF NOT FIO-STAT-OKS
      *        Error inconsistencia en el ingreso : informar
               MOVE FIO-MENS TO FRM-MENS
               GO TO FIN-CMN-MOD.
           PERFORM MOD-ADP.
           PERFORM KEY-ADP-EDA.
           PERFORM RET-ADP-EDA.
           MOVE EDP-CIC-IMDT IN EDP TO ADP-CIC-IMDT IN ADP.
           MOVE EDP-NUM-IEDP IN EDP TO ADP-NUM-IEDP IN ADP.
           MOVE 'P' TO ADP-IND-TINF IN ADP.
           MOVE 1   TO ADP-NUM-IGRP IN ADP.
           MOVE ZEROES TO ADP-NUM-ICMP IN ADP.
           MOVE EDP-STP-ITRN IN EDP TO ADP-STP-ITRN IN ADP.
           MOVE SPACES TO ADP-MSC-TACC IN ADP.
           MOVE SPACES TO ADP-MSC-STAT IN ADP.
           MOVE SPACES TO ADP-COD-OTRN IN ADP.
           MOVE SPACES TO ADP-COD-ATRN IN ADP.
           MOVE SPACES TO ADP-IND-CONE IN ADP.
           MOVE SPACES TO ADP-GLS-DISP IN ADP.
           PERFORM PUT-ADP VARYING FRM-IFLD FROM 1 BY 1
                UNTIL FRM-IFLD > WSS-IMAX.
           MOVE '00' TO FIO-STAT.
      *>>>>
*% END
*% IF FIN_CMN_ELI
      *<<<< FIN_CMN_ELI
           IF NOT FIO-STAT-OKS
      *        Error inconsistencia en la eliminacion : informar
               MOVE FIO-MENS TO FRM-MENS
               GO TO FIN-CMN-ELI.
           PERFORM DEL-ADP.
           IF NOT FIO-STAT-OKS
      *        Error inconsistencia en la eliminacion : hacer LOGTB e informar
               MOVE FIO-MENS TO FRM-MENS
               PERFORM BCK-OUT
               GO TO FIN-CMN-ELI.
      *>>>>
*% END
*% IF INI_CMN_ACC
      *<<<< INI_CMN_ACC
           IF NOT (SCR-CMND = 'VRF' OR
              SCR-CMND = 'DVF')
               MOVE 'GNS' TO MSG-COD-SIST
               MOVE 'CMDINV' TO MSG-COD-MENS
               PERFORM GET-MSG
               MOVE MSG-GLS-DESC TO FRM-MENS
               GO TO FIN-CMN-ACC.
           MOVE 'P' TO EDP-IND-TINF IN EDP.
      *>>>>
*% END
*% IF CMN_ACC
      *<<<< CMN_ACC
           IF SCR-CMND = 'VRF'
               MOVE 'EDP    ACAOK' TO MSG-COD-MENS
               MOVE 'A' TO EDP-MSC-STAT IN EDP.
           IF SCR-CMND = 'DVF'
               MOVE 'EDP    DESOK' TO MSG-COD-MENS
               MOVE SPACES TO EDP-MSC-STAT IN EDP.
           MOVE FIO-MOD TO FIO-CMND.
           PERFORM SGC-FIO-EDP.
           IF FIO-STAT-OKS
               MOVE 'SGC' TO MSG-COD-SIST
               PERFORM GET-MSG
               MOVE MSG-GLS-DESC TO FRM-MENS.
      *>>>>
*% END
*% IF EOF
      *<<<< EOF
       BCK-OUT SECTION.
       INI-BCK-OUT.
           MOVE FIO-BCK-OUT TO FIO-CMND.
           PERFORM SGC-FIO-ADP.
           IF FIO-STAT-OKS
      *        Para informar que el backout se realizo con exito
               MOVE '49' TO FIO-STAT.
       FIN-BCK-OUT.
           EXIT.
       CHK-VEC-PODE SECTION.
       INI-CHK-VEC-PODE.
           IF ADP-COD-IPOD IN ADP = EDP-IND-PODE IN EDP( FRM-IFLD ) AND
              ADP-NUM-IGRP IN ADP = 1 AND
              ADP-NUM-ICMP IN ADP = ZEROES
               MOVE FRM-SUAR-OKS TO FRM-SUAR.
       FIN-CHK-VEC-PODE.
           EXIT.
*%! RVM: 25-06-92 VSI NO MANEJA PFS DEPENDIENTES DE DTC
*% IF PGM_DTC
      *<<<< PGM_DTC
       LEE-NXT-PRV-POD SECTION.
       INI-LEE-NXT-PRV-POD.
           MOVE SPACES TO MSG-COD-MENS.
           IF SCR-EDP-REQA > SPACES
               PERFORM LEE-NXT-PRV-EDA
           ELSE
               MOVE 'EDPNO' TO MSG-COD-MENS.
       FIN-LEE-NXT-PRV-POD.
           EXIT.

       LEE-NXT-PRV SECTION.
       INI-LEE-NXT-PRV.
           IF SCR-DBC-REQA > SPACES
               PERFORM LEE-NXT-PRV-DBC
           ELSE
               PERFORM LEE-NXT-PRV-NOM.
       FIN-LEE-NXT-PRV.
           EXIT.

       LEE-NXT-PRV-DBC SECTION.
       INI-LEE-NXT-PRV-DBC.
           MOVE FIO-KDEF-S TO FIO-KDEF.
           MOVE SCR-DBC-REQA TO ADR-DBC-REQA.
           IF FRM-FFLD = FRM-FFLD-PF7
               MOVE FIO-GET-PRV TO FIO-CMND
           ELSE
               MOVE FIO-GET-NXT TO FIO-CMND.
       LUP-LEE-NXT-PRV-DBC.
           IF SCR-KEY-IDBC = 'NOM'
               MOVE 'DBC-GLS-NOMC'  TO FIO-AKEY
           ELSE
               MOVE 'DBC-IDC-ICLI'  TO FIO-AKEY.
           PERFORM SGC-FIO-DBC.
           MOVE FIO-STAT TO PGM-STAT-DBC.
           IF NOT FIO-STAT-OKS
               MOVE 'DBCNO' TO MSG-COD-MENS
               GO TO FIN-LEE-NXT-PRV-DBC.
           MOVE DBC-CIC-ICLI IN DBC TO EDP-CIC-IMDT IN EDP.
           MOVE 'P' TO EDP-IND-TINF IN EDP.
           MOVE ZEROES TO EDP-NUM-IEDP IN EDP.
           MOVE FIO-GET-NLS TO FIO-CMND.
           IF FRM-FFLD = FRM-FFLD-PF7
               MOVE 99 TO EDP-NUM-IEDP IN EDP
               MOVE FIO-GET-LEQ TO FIO-CMND.
           PERFORM SGC-FIO-EDP.
           IF FIO-STAT-OKS AND
              DBC-CIC-ICLI IN DBC = EDP-CIC-IMDT IN EDP AND
              EDP-IND-TINF IN EDP = 'P'
               MOVE '00' TO PGM-STAT-EDP
               MOVE ADR-EDP-REQA TO SCR-EDP-REQA
               MOVE ADR-DBC-REQA TO SCR-DBC-REQA
               MOVE 'DBCSI' TO MSG-COD-MENS
               GO TO FIN-LEE-NXT-PRV-DBC.
           IF FRM-FFLD = FRM-FFLD-PF7
               MOVE FIO-GET-PRV TO FIO-CMND
               GO TO LUP-LEE-NXT-PRV-DBC
           ELSE
               MOVE FIO-GET-NXT TO FIO-CMND
               GO TO LUP-LEE-NXT-PRV-DBC.
       FIN-LEE-NXT-PRV-DBC.
           EXIT.

       LEE-NXT-PRV-NOM SECTION.
       INI-LEE-NXT-PRV-NOM.
           MOVE 'NOM' TO SCR-KEY-IDBC.
           IF DBC-GLS-NOMC IN DBC > SPACES
               MOVE FIO-GET-KEY    TO FIO-CMND
               MOVE 'DBC-GLS-NOMC' TO FIO-AKEY
               PERFORM SGC-FIO-DBC
               IF FIO-STAT-OKS
                   IF FRM-FFLD = FRM-FFLD-PF7
                       MOVE FIO-GET-PRV TO FIO-CMND
                   ELSE
                       MOVE FIO-GET-NXT TO FIO-CMND
               ELSE
                   IF FRM-FFLD = FRM-FFLD-PF7
                       MOVE FIO-GET-LEQ TO FIO-CMND
                   ELSE
                       MOVE FIO-GET-NLS TO FIO-CMND
           ELSE
               IF FRM-FFLD = FRM-FFLD-PF7
                   MOVE FIO-GET-LEQ TO FIO-CMND
               ELSE
                   MOVE FIO-GET-NLS TO FIO-CMND.
       LUP-LEE-NXT-PRV-NOM.
           MOVE 'DBC-GLS-NOMC'  TO FIO-AKEY.
           PERFORM SGC-FIO-DBC.
           MOVE FIO-STAT TO PGM-STAT-DBC.
           IF NOT FIO-STAT-OKS
               MOVE 'DBCNO' TO MSG-COD-MENS
               GO TO FIN-LEE-NXT-PRV-NOM.
           MOVE DBC-CIC-ICLI IN DBC TO EDP-CIC-IMDT IN EDP.
           MOVE 'P' TO EDP-IND-TINF IN EDP.
           MOVE ZEROES TO EDP-NUM-IEDP IN EDP.
           MOVE FIO-GET-NLS TO FIO-CMND.
           IF FRM-FFLD = FRM-FFLD-PF7
               MOVE 99 TO EDP-NUM-IEDP IN EDP
               MOVE FIO-GET-LEQ TO FIO-CMND.
           PERFORM SGC-FIO-EDP.
           IF FIO-STAT-OKS AND
              DBC-CIC-ICLI IN DBC = EDP-CIC-IMDT IN EDP AND
              EDP-IND-TINF IN EDP = 'P'
               MOVE '00' TO PGM-STAT-EDP
               MOVE ADR-EDP-REQA TO SCR-EDP-REQA
               MOVE ADR-DBC-REQA TO SCR-DBC-REQA
               MOVE 'DBCSI' TO MSG-COD-MENS
               GO TO FIN-LEE-NXT-PRV-NOM.
           IF FRM-FFLD = FRM-FFLD-PF7
               MOVE FIO-GET-PRV TO FIO-CMND
               GO TO LUP-LEE-NXT-PRV-NOM
           ELSE
               MOVE FIO-GET-NXT TO FIO-CMND
               GO TO LUP-LEE-NXT-PRV-NOM.
       FIN-LEE-NXT-PRV-NOM.
           EXIT.

       LEE-NXT-PRV-EDA SECTION.
       INI-LEE-NXT-PRV-EDA.
           MOVE SCR-EDP-REQA TO ADR-EDP-REQA.
           MOVE ADR-VKEY IN ADR-EDP-REQA TO WSS-CIC-ICLI IN WSS-VARI.
           MOVE FIO-KDEF-S TO FIO-KDEF.
       LUP-NXT-PRV-EDA.
           IF FRM-FFLD = FRM-FFLD-PF5
               MOVE FIO-GET-PRV TO FIO-CMND
           ELSE
               MOVE FIO-GET-NXT TO FIO-CMND.
           PERFORM SGC-FIO-EDP.
           IF FIO-STAT-OKS AND
              EDP-CIC-IMDT IN EDP = WSS-CIC-ICLI IN WSS-VARI
               IF EDP-IND-TINF IN EDP = 'P'
                   MOVE '00' TO PGM-STAT-EDP
                   MOVE '00' TO PGM-STAT-DBC
                   MOVE ADR-EDP-REQA TO SCR-EDP-REQA
                   MOVE 'EDPSI' TO MSG-COD-MENS
                   GO TO FIN-LEE-NXT-PRV-EDA
               ELSE
                   GO TO LUP-NXT-PRV-EDA.
           MOVE 'EDPNO' TO MSG-COD-MENS.
       FIN-LEE-NXT-PRV-EDA.
           EXIT.
      *>>>>
*% END           
       BUS-COR-EDA SECTION.
       INI-BUS-COR-EDA.
           MOVE 0 TO WSS-IFAC IN WSS-VARI.
           IF SCR-STAT = SCR-STAT-CON
               PERFORM BUS-COR-FEPO
               IF FIO-STAT-OKS AND
                  EDP-CAI-IMDT IN EDA-FLD = EDP-CAI-IMDT IN EDP AND
                  EDP-IIC-IMDT IN EDA-FLD = EDP-IIC-IMDT IN EDP AND
                  EDP-IND-TINF IN EDP = 'F'
                   MOVE 1 TO WSS-IFAC IN WSS-VARI
                   GO TO FIN-BUS-COR-EDA.

           MOVE 0 TO EDP-NUM-IEDP IN EDA-FLD.
           MOVE EDP-CAI-IMDT IN EDA-FLD TO EDP-CAI-IMDT IN EDP.
           MOVE EDP-IIC-IMDT IN EDA-FLD TO EDP-IIC-IMDT IN EDP.
           MOVE 'P' TO EDP-IND-TINF IN EDP.
           MOVE 99 TO EDP-NUM-IEDP IN EDP.
           MOVE FIO-GET-LEQ TO FIO-CMND.
           PERFORM SGC-FIO-EDP.
           IF FIO-STAT-OKS AND
              EDP-CAI-IMDT IN EDA-FLD = EDP-CAI-IMDT IN EDP AND
              EDP-IIC-IMDT IN EDA-FLD = EDP-IIC-IMDT IN EDP AND
              EDP-IND-TINF IN EDP = 'P'
               MOVE EDP-NUM-IEDP IN EDP TO EDP-NUM-IEDP IN EDA-FLD.

      *     IF ( SCR-CCPP = 'ING' OR 'ACT' ) AND
           IF FIO-STAT-OKS
               MOVE FIO-END-BRW TO FIO-CMND
               PERFORM SGC-FIO-EDP.

           IF SCR-CCPP = 'ING' OR 'ACT'
               PERFORM BUS-COR-FEDP
               ADD 1 TO EDP-NUM-IEDP IN EDA-FLD.
           MOVE 1 TO WSS-ICOR.
       FIN-BUS-COR-EDA.
           EXIT.

       BUS-COR-FEDP SECTION.
       INI-BUS-COR-FEDP.
           MOVE EDP-CAI-IMDT IN EDA-FLD TO EDP-CAI-IMDT IN EDP.
           MOVE EDP-IIC-IMDT IN EDA-FLD TO EDP-IIC-IMDT IN EDP.
           MOVE 'F' TO EDP-IND-TINF IN EDP.
           MOVE 99 TO EDP-NUM-IEDP IN EDP.
           MOVE FIO-GET-LEQ TO FIO-CMND.
           PERFORM SGC-FIO-EDP.
           IF FIO-STAT-OKS AND
              EDP-CAI-IMDT IN EDA-FLD = EDP-CAI-IMDT IN EDP AND
              EDP-IIC-IMDT IN EDA-FLD = EDP-IIC-IMDT IN EDP AND
              EDP-IND-TINF IN EDP = 'F'
               IF EDP-NUM-IEDP IN EDP > EDP-NUM-IEDP IN EDA-FLD
                   MOVE EDP-NUM-IEDP IN EDP TO EDP-NUM-IEDP IN 
                                                        EDA-FLD.
           IF FIO-STAT-OKS
               MOVE FIO-END-BRW TO FIO-CMND
               PERFORM SGC-FIO-EDP.

       FIN-BUS-COR-FEDP.
           EXIT.

       BUS-COR-FEPO SECTION.
       INI-BUS-COR-FEPO.
           MOVE 0 TO EDP-NUM-IEDP IN EDA-FLD.
           MOVE EDP-CAI-IMDT IN EDA-FLD TO EDP-CAI-IMDT IN EDP.
           MOVE EDP-IIC-IMDT IN EDA-FLD TO EDP-IIC-IMDT IN EDP.
           MOVE 'F' TO EDP-IND-TINF IN EDP.
           MOVE 99 TO EDP-NUM-IEDP IN EDP.
           MOVE FIO-GET-LEQ TO FIO-CMND.
           PERFORM SGC-FIO-EDP.
           IF FIO-STAT-OKS AND
              EDP-CAI-IMDT IN EDA-FLD = EDP-CAI-IMDT IN EDP AND
              EDP-IIC-IMDT IN EDA-FLD = EDP-IIC-IMDT IN EDP AND
              EDP-IND-TINF IN EDP = 'F'
               MOVE EDP-NUM-IEDP IN EDP TO EDP-NUM-IEDP IN EDA-FLD.

           IF FIO-STAT-OKS
               MOVE FIO-END-BRW TO FIO-CMND
               PERFORM SGC-FIO-EDP.
              
           MOVE 1 TO WSS-ICOR.
       FIN-BUS-COR-FEPO.
           EXIT.


       BUS-CIC-CLI SECTION.
       INI-BUS-CIC-CLI.
           IF DBC-NUM-ICLI IN EDA-FLD > ZEROES
      *IDC-CLI Busca Cliente por medio de IdC
               MOVE DBC-NUM-ICLI IN EDA-FLD TO DBC-NUM-ICLI IN DBC
               MOVE DBC-IND-ICLI IN EDA-FLD TO DBC-IND-ICLI IN DBC
               MOVE DBC-GLS-ICLI IN EDA-FLD TO DBC-GLS-ICLI IN DBC
               MOVE 'DBC-IDC-ICLI'  TO FIO-AKEY
*%! RVM: 25-06-92 VSI NO MANEJA PFS DEPENDIENTES DE DTC
*% IF PGM_DTC
      *<<<< PGM_DTC
               MOVE 'IDC' TO SCR-KEY-IDBC
      *>>>>
*% END
               MOVE FIO-GET-KEY-ALT TO FIO-CMND
               PERFORM GET-CLI
               
               PERFORM CPT-NOMC
               
      *        MOVE DBC-GLS-NOMC IN DBC TO DBC-GLS-NOMC IN EDA-FLD
               IF MSG-COD-MENS > SPACES
                   MOVE FIO-STAT-NEX TO FIO-STAT
                   GO TO FIN-BUS-CIC-CLI
               ELSE
                   MOVE '00' TO PGM-STAT-DBC
*%! RVM: 25-06-92 VSI NO MANEJA PFS DEPENDIENTES DE DTC
*% IF PGM_DTC
      *<<<< PGM_DTC
                   MOVE ADR-DBC-REQA TO SCR-DBC-REQA
      *>>>>
*% END
                   MOVE DBC-CAI-ICLI IN DBC TO
                       EDP-CAI-IMDT IN EDA-FLD
                   MOVE DBC-IIC-ICLI IN DBC TO
                       EDP-IIC-IMDT IN EDA-FLD
           ELSE
           IF DBC-GLS-NOMC IN EDA-FLD > SPACES
               MOVE SPACES TO DBC-GLS-NOMC IN DBC
      *NOM-CLI Busca Cliente por medio del Nombre

               MOVE DBC-GLS-NOMC IN EDA-FLD TO STR-GLS-GSTR
               PERFORM STR-UNS
               MOVE STR-GLS-FUNS IN STR-VARI(1) TO DBC-GLS-APAT IN DBC
               MOVE STR-GLS-FUNS IN STR-VARI(2) TO DBC-GLS-AMAT IN DBC
               MOVE STR-GLS-FUNS IN STR-VARI(3) TO DBC-GLS-NOMB IN DBC

               MOVE 'DBC-GLS-NOMC'  TO FIO-AKEY
*%! RVM: 25-06-92 VSI NO MANEJA PFS DEPENDIENTES DE DTC
*% IF PGM_DTC
      *<<<< PGM_DTC
               MOVE 'NOM' TO SCR-KEY-IDBC
      *>>>>
*% END
               MOVE FIO-GET-NLS-ALT TO FIO-CMND
               PERFORM GET-CLI
               IF MSG-COD-MENS > SPACES
                   MOVE FIO-STAT-NEX TO FIO-STAT
                   GO TO FIN-BUS-CIC-CLI
               ELSE
                   MOVE '00' TO PGM-STAT-DBC
*%! RVM: 25-06-92 VSI NO MANEJA PFS DEPENDIENTES DE DTC
*% IF PGM_DTC
      *<<<< PGM_DTC
                   MOVE ADR-DBC-REQA TO SCR-DBC-REQA
      *>>>>
*% END                   
                   PERFORM CPT-NOMC
                   
                   MOVE DBC-NUM-ICLI IN DBC TO
                       DBC-NUM-ICLI IN EDA-FLD
                   MOVE DBC-VRF-ICLI IN DBC TO
                       DBC-VRF-ICLI IN EDA-FLD
                   MOVE DBC-IND-ICLI IN DBC TO
                       DBC-IND-ICLI IN EDA-FLD
                   MOVE DBC-GLS-ICLI IN DBC TO
                       DBC-GLS-ICLI IN EDA-FLD
                   MOVE DBC-CAI-ICLI IN DBC TO
                       EDP-CAI-IMDT IN EDA-FLD
                   MOVE DBC-IIC-ICLI IN DBC TO
                       EDP-IIC-IMDT IN EDA-FLD.
           MOVE 'P' TO EDP-IND-TINF IN EDP.
       FIN-BUS-CIC-CLI.
           EXIT.

       MOV-IND-PODE SECTION.
       INI-MOV-IND-PODE.
           MOVE FRM-SUAR-OKS TO FRM-SUAR.
           PERFORM BUS-CLS-APOD.
           IF FRM-SUAR = FRM-SUAR-MAL
               GO TO FIN-MOV-IND-PODE.
           PERFORM INI-COD-IPOD VARYING CLS-I FROM 1 BY 1
                UNTIL CLS-I > CLS-RMAX.
           MOVE EDP-CAI-IMDT IN EDA-FLD TO ADP-CAI-IMDT IN ADP.
           MOVE EDP-IIC-IMDT IN EDA-FLD TO ADP-IIC-IMDT IN ADP.
           MOVE 'P'                     TO ADP-IND-TINF IN ADP.
           MOVE EDP-NUM-IEDP IN EDA-FLD TO ADP-NUM-IEDP IN ADP.
           MOVE SPACES                  TO ADP-COD-IPOD IN ADP.
           MOVE ZEROES                  TO ADP-NUM-IGRP IN ADP.
           MOVE ZEROES                  TO ADP-NUM-ICMP IN ADP.
           MOVE FIO-GET-NLS TO FIO-CMND.
       LUP-MOV-IND-PODE.
           MOVE FRM-SUAR-OKS TO FRM-SUAR.
           PERFORM SGC-FIO-ADP.
           IF NOT ( FIO-STAT-OKS AND
              EDP-CAI-IMDT IN EDA-FLD = ADP-CAI-IMDT IN ADP AND
              EDP-IIC-IMDT IN EDA-FLD = ADP-IIC-IMDT IN ADP AND
              ADP-IND-TINF IN ADP     = 'P' )
               GO TO EXT-MOV-IND-PODE.
           IF ADP-NUM-IEDP IN ADP NOT = EDP-NUM-IEDP IN EDA-FLD
               MOVE FIO-GET-NXT TO FIO-CMND
               GO TO LUP-MOV-IND-PODE.
       CON-MOV-IND-PODE.
           MOVE ADP-COD-IPOD IN ADP TO WSS-COD-IPOD IN WSS-VARI.
           IF ADP-CAI-IAPO IN ADP = ADP-CAI-IAPO IN EDA-FLD AND
              ADP-IIC-IAPO IN ADP = ADP-IIC-IAPO IN EDA-FLD 
               MOVE 'Y' TO ADP-IND-CONE IN ADP
               GO TO NXT-MOV-IND-PODE.
           MOVE FRM-SUAR-MAL TO FRM-SUAR.
           PERFORM BUS-CLAS VARYING CLS-I FROM 1 BY 1 
                        UNTIL CLS-I > CLS-IMAX OR
                        FRM-SUAR = FRM-SUAR-OKS.
           IF FRM-SUAR = FRM-SUAR-MAL
               MOVE FIO-GET-NXT TO FIO-CMND
               GO TO LUP-MOV-IND-PODE.
           IF ADP-NUM-APAR IN ADP NOT = 1 
               MOVE 'Y' TO ADP-IND-CONE IN ADP.
       NXT-MOV-IND-PODE.
           IF ADP-IND-CONE IN ADP = 'Y'
               MOVE ADP-COD-IPOD TO WSS-IND-PODR IN WSS-VARI
               MOVE ADP-COD-IPOD TO WSS-IND-MPOD IN WSS-VARI
               PERFORM BUS-COD-IPOD VARYING CLS-I FROM 1 BY 1 
                       UNTIL CLS-I > CLS-RMAX
               GO TO STA-MOV-IND-PODE.
           MOVE FIO-GET-NXT TO FIO-CMND
           PERFORM SGC-FIO-ADP
           IF NOT FIO-STAT-OKS
               MOVE ADP-COD-IPOD TO WSS-IND-PODR IN WSS-VARI
               MOVE 'S'          TO WSS-IND-MPOD IN WSS-VARI
               PERFORM BUS-COD-IPOD VARYING CLS-I FROM 1 BY 1 
                       UNTIL CLS-I > CLS-RMAX
               GO TO EXT-MOV-IND-PODE.
           IF EDP-CAI-IMDT IN EDA-FLD = ADP-CAI-IMDT IN ADP AND
              EDP-IIC-IMDT IN EDA-FLD = ADP-IIC-IMDT IN ADP AND
              ADP-COD-IPOD IN ADP     = WSS-COD-IPOD IN WSS-VARI AND
              ADP-NUM-IEDP IN ADP     = EDP-NUM-IEDP IN EDA-FLD AND
              ADP-IND-TINF IN ADP     = 'P'
               IF ADP-IND-CONE IN ADP = 'Y'
                   MOVE ADP-COD-IPOD TO WSS-IND-PODR IN WSS-VARI
                   MOVE ADP-COD-IPOD TO WSS-IND-MPOD IN WSS-VARI
                   PERFORM BUS-COD-IPOD VARYING CLS-I FROM 1 BY 1 
                       UNTIL CLS-I > CLS-RMAX
                   GO TO STA-MOV-IND-PODE
               ELSE
                   MOVE ADP-COD-IPOD TO WSS-IND-PODR IN WSS-VARI
                   MOVE 'S'          TO WSS-IND-MPOD IN WSS-VARI
                   PERFORM BUS-COD-IPOD VARYING CLS-I FROM 1 BY 1 
                       UNTIL CLS-I > CLS-RMAX
                   GO TO STA-MOV-IND-PODE
           ELSE
               IF ADP-COD-IPOD IN ADP NOT = WSS-COD-IPOD IN WSS-VARI
                   MOVE WSS-COD-IPOD IN WSS-VARI TO 
                                        WSS-IND-PODR IN WSS-VARI
                   MOVE 'S'          TO WSS-IND-MPOD IN WSS-VARI
                   PERFORM BUS-COD-IPOD VARYING CLS-I FROM 1 BY 1 
                       UNTIL CLS-I > CLS-RMAX
                   GO TO CON-MOV-IND-PODE.
       STA-MOV-IND-PODE.
           IF FIO-STAT-OKS AND
              EDP-CAI-IMDT IN EDA-FLD = ADP-CAI-IMDT IN ADP AND
              EDP-IIC-IMDT IN EDA-FLD = ADP-IIC-IMDT IN ADP AND
              ADP-NUM-IEDP IN ADP     = EDP-NUM-IEDP IN EDA-FLD AND
              ADP-IND-TINF IN ADP     = 'P'
              IF ADP-COD-IPOD IN ADP = WSS-COD-IPOD IN WSS-VARI
                  MOVE FIO-GET-NXT TO FIO-CMND
                  PERFORM SGC-FIO-ADP
                  GO TO STA-MOV-IND-PODE
              ELSE
                  GO TO CON-MOV-IND-PODE.
       EXT-MOV-IND-PODE.
           MOVE WSS-VEC-PODE IN WSS-VARI TO EDP-VEC-PODE IN EDP.
           MOVE FRM-SUAR-OKS TO FRM-SUAR.
       FIN-MOV-IND-PODE.
           EXIT.

       BUS-COD-IPOD SECTION.
       INI-BUS-COD-IPOD.
           IF EDP-IND-PODE IN EDP(CLS-I) = WSS-IND-PODR IN WSS-VARI
               MOVE WSS-IND-MPOD IN WSS-VARI TO VEC-IND-PODE
                                                 IN WSS-VARI(CLS-I).
       FIN-BUS-COD-IPOD.
           EXIT.

       INI-COD-IPOD SECTION.
       INI-INI-COD-IPOD.
           MOVE 'N' TO VEC-IND-PODE IN WSS-VARI(CLS-I).
       FIN-INI-COD-IPOD.
           EXIT.
       BUS-CLS-APOD SECTION.
       INI-BUS-CLS-APOD.
           PERFORM CLR-CLS-CLAP VARYING CLS-I FROM 1 BY 1 UNTIL
                   CLS-I > CLS-IIMX.
           MOVE SPACES TO REC-KEY-IREC IN REC
           MOVE ZEROES TO CLS-IMAX IN CLS-VARI.
           MOVE ADP-CIC-IAPO IN ADP TO REC-CIC-ICLI IN REC
           MOVE REC-COD-APOD IN REC-VARI TO REC-COD-TREC IN REC
           MOVE FIO-GET-NLS TO FIO-CMND.
       LUP-BUS-CLS-APOD.
           PERFORM SGC-FIO-REC.
           IF NOT ( FIO-STAT-OKS AND
              ADP-CIC-IAPO IN ADP = REC-CIC-ICLI IN REC AND
              REC-COD-APOD IN REC-VARI = REC-COD-TREC IN REC)
               GO TO FIN-BUS-CLS-APOD.
           IF REC-NUM-TREC IN REC NOT = EDP-NUM-IEDP IN EDA-FLD OR
              REC-CAI-IREL IN REC NOT = EDP-CAI-IMDT IN EDA-FLD OR
              REC-IIC-IREL IN REC NOT = EDP-IIC-IMDT IN EDA-FLD OR
              REC-IND-VIGE IN REC     = 'N'
               MOVE FIO-GET-NXT TO FIO-CMND
               GO TO LUP-BUS-CLS-APOD.
           ADD 1 TO CLS-IMAX IN CLS-VARI.
           IF CLS-IMAX IN CLS-VARI > CLS-IIMX
               MOVE 'SGC' TO MSG-COD-SIST
               MOVE 'CLS    OVFLW' TO MSG-COD-MENS
               PERFORM GET-MSG
               MOVE MSG-GLS-DESC TO FRM-MENS
               MOVE FRM-SUAR-MAL TO FRM-SUAR
               GO TO FIN-BUS-CLS-APOD.
           MOVE REC-COD-AREC IN REC TO CLS-COD-CLAP IN
                                           CLS-VARI(CLS-IMAX).
           MOVE FIO-GET-NXT TO FIO-CMND.
           GO TO LUP-BUS-CLS-APOD.
       FIN-BUS-CLS-APOD.
           EXIT.
       CLR-CLS-CLAP SECTION.
       INI-CLR-CLS-CLAP.
           MOVE SPACES TO CLS-COD-CLAP IN CLS-VARI(CLS-I).
       FIN-CLR-CLS-CLAP.
           EXIT.
       BUS-CLAS SECTION.
       INI-BUS-CLAS.
           IF ADP-COD-CLAP IN ADP = CLS-COD-CLAP IN CLS-VARI(CLS-I)
               MOVE FRM-SUAR-OKS TO FRM-SUAR.
       FIN-BUS-CLAS.
           EXIT.

       COPY SGCBFADP.
       COPY SGCBFREC.
       COPY SGCBFCCM.
       COPY GNSBFRCE.
       COPY GNSBBTAB.
       COPY SGCBFDBC.
       COPY GNSBEGLS.
       COPY SGCBGCLI.
       COPY GNSBGSTR.
       COPY GNSBGCPT.
       COPY TABBFUSR.
       COPY SGCBFEDS.
       COPY TABBBUSR.
       COPY TABBVUSR.
       COPY TABBFOFI.
       COPY TABBBOFI.
       COPY TABBVOFI.
      *>>>>
*% END
*% IF EOF_PU
      *<<<< EOF_PU

       PUT-ADP SECTION.
       INI-PUT-ADP.
           IF EDP-IND-PODE IN EDP( FRM-IFLD ) = 'N' OR
              EDP-IND-PODE IN EDP( FRM-IFLD ) NOT > SPACES
               GO TO FIN-PUT-ADP.
           MOVE EDP-IND-PODE IN EDP( FRM-IFLD ) TO ADP-COD-IPOD IN ADP.
           MOVE FIO-PUT TO FIO-CMND.
           PERFORM SGC-FIO-ADP.
       FIN-PUT-ADP.
           EXIT.

       MOD-ADP SECTION.
       INI-MOD-ADP.
           MOVE EDP-CIC-IMDT IN EDP TO ADP-CIC-IMDT IN ADP.
           MOVE EDP-NUM-IEDP IN EDP TO ADP-NUM-IEDP IN ADP.
           MOVE 'P'                 TO ADP-IND-TINF IN ADP.
           MOVE FIO-GET-NLS TO FIO-CMND.
           PERFORM SGC-FIO-ADP.
           IF NOT (
                   FIO-STAT-OKS AND
                   ADP-CIC-IMDT IN ADP = EDP-CIC-IMDT IN EDP AND
                   ADP-NUM-IEDP IN ADP = EDP-NUM-IEDP IN EDP AND
                   ADP-IND-TINF IN ADP = 'P' 
                   )
               IF FIO-STAT-OKS 
                   GO TO BRW-MOD-ADP
               ELSE
                   GO TO FIN-MOD-ADP.
       LUP-MOD-ADP.
           IF NOT ( ADP-NUM-IGRP IN ADP = 1 AND
              ADP-NUM-ICMP IN ADP = ZEROES )
               MOVE FIO-GET-NXT TO FIO-CMND
               PERFORM SGC-FIO-ADP
               IF FIO-STAT-OKS AND
                  ADP-CIC-IMDT IN ADP = EDP-CIC-IMDT IN EDP AND
                  ADP-NUM-IEDP IN ADP = EDP-NUM-IEDP IN EDP AND
                  ADP-IND-TINF IN ADP = 'P' 
                   GO TO LUP-MOD-ADP
               ELSE
                   GO TO BRW-MOD-ADP.

           MOVE FRM-SUAR-MAL TO FRM-SUAR.
           PERFORM CHK-VEC-PODE VARYING FRM-IFLD FROM 1 BY 1
                    UNTIL FRM-IFLD > WSS-IMAX
                            OR FRM-SUAR = FRM-SUAR-OKS.

           MOVE FIO-END-BRW TO FIO-CMND.
           PERFORM SGC-FIO-ADP.
           MOVE FIO-GET-KEY-UPD TO FIO-CMND.
           PERFORM SGC-FIO-ADP.
           IF FRM-SUAR = FRM-SUAR-OKS
               PERFORM RET-ADP-EDA
               PERFORM KEY-ADP-EDA
               MOVE FIO-MOD TO FIO-CMND
               PERFORM SGC-FIO-ADP
               MOVE FIO-GET-NLS TO FIO-CMND
               PERFORM SGC-FIO-ADP
               MOVE FIO-GET-NXT TO FIO-CMND
               PERFORM SGC-FIO-ADP
           ELSE
               MOVE FIO-DEL TO FIO-CMND
               PERFORM SGC-FIO-ADP
               MOVE FIO-GET-NLS TO FIO-CMND
               PERFORM SGC-FIO-ADP.

           IF FIO-STAT-OKS AND
              ADP-CIC-IMDT IN ADP = EDP-CIC-IMDT IN EDP AND
              ADP-NUM-IEDP IN ADP = EDP-NUM-IEDP IN EDP AND
              ADP-IND-TINF IN ADP = 'P' 
               GO TO LUP-MOD-ADP.

           IF NOT FIO-STAT-OKS 
               GO TO FIN-MOD-ADP.
       BRW-MOD-ADP.
           MOVE FIO-END-BRW TO FIO-CMND.
           PERFORM SGC-FIO-ADP.
       FIN-MOD-ADP.
           EXIT.

       DEL-ADP SECTION.
       INI-DEL-ADP.
           MOVE EDP-CIC-IMDT IN EDP TO ADP-CIC-IMDT IN ADP.
           MOVE EDP-NUM-IEDP IN EDP TO ADP-NUM-IEDP IN ADP.
           MOVE 'P'                 TO ADP-IND-TINF IN ADP.
           MOVE FIO-GET-NLS TO FIO-CMND.
           PERFORM SGC-FIO-ADP.
           IF NOT (
                   FIO-STAT-OKS AND
                   ADP-CIC-IMDT IN ADP = EDP-CIC-IMDT IN EDP AND
                   ADP-NUM-IEDP IN ADP = EDP-NUM-IEDP IN EDP AND
                   ADP-IND-TINF IN ADP = 'P' 
                   )
               IF FIO-STAT-OKS 
                   GO TO BRW-DEL-ADP
               ELSE
                   GO TO FIN-DEL-ADP.
       LUP-DEL-ADP.
           MOVE FIO-END-BRW TO FIO-CMND.
           PERFORM SGC-FIO-ADP.
           MOVE FIO-GET-KEY-UPD TO FIO-CMND.
           PERFORM SGC-FIO-ADP.
           MOVE FIO-DEL TO FIO-CMND.
           PERFORM SGC-FIO-ADP.
           IF NOT FIO-STAT-OKS
               GO TO FIN-DEL-ADP.

           MOVE FIO-GET-NLS TO FIO-CMND.
           PERFORM SGC-FIO-ADP.
           IF FIO-STAT-OKS AND
              ADP-CIC-IMDT IN ADP = EDP-CIC-IMDT IN EDP AND
              ADP-NUM-IEDP IN ADP = EDP-NUM-IEDP IN EDP AND
              ADP-IND-TINF IN ADP = 'P' 
               GO TO LUP-DEL-ADP.
           IF NOT FIO-STAT-OKS 
               GO TO FIN-DEL-ADP.

       BRW-DEL-ADP.
           MOVE FIO-END-BRW TO FIO-CMND.
           PERFORM SGC-FIO-ADP.
       FIN-DEL-ADP.
           EXIT.
       
      *>>>>
*% END
