050

100

 !!! PARA AUMENTAR CONCEPTOS BUSCAR :
 !!! "==>> DT2_TOT_EST"


 !!!
 !!! MATRIZ QUE GUARDA TOTALES
 !!! DE CAMPOS POR CADA RQA_MATR_EST
 !!! ==>> 
	DECLARE INTEGER	 REG_MATR_TOC(50)
 !!!
 !!! MATRIZ QUE GUARDA TOTALES
 !!! DE CONCEPTOS GUARDADOS EN RQA_MATR_EST
 !!! ==>> DT2_TOT_EST
	DECLARE INTEGER	 RQA_MATR_TOC(50,12)
 !!! INDICE PARA BUSCAR UNA RQA ESPECIFICA
	DECLARE INTEGER	 RQA_MATR_IDN_IDX 
 !!! PUNTERO QUE INDICA POSICION DE RQA DESPUES DE BUSCAR CON RQA_MATR_IDN_IDX 
	DECLARE INTEGER	 RQA_PTR_RQA 
	DECLARE INTEGER	 JJ
	DECLARE INTEGER	 SGTE_POS
	DECLARE INTEGER	 RQ_NUM_COMAN
	DECLARE INTEGER	 RQ_NUM_COL
	DECLARE INTEGER	 RQ_NUM_KEY
	DECLARE INTEGER	 RQ_NUM_ERR
	DECLARE INTEGER	 RQ_NUM_RES1
	DECLARE INTEGER	 RQ_NUM_DBID
	DECLARE INTEGER	 RQ_NUM_RECID
	DECLARE INTEGER	 RQ_NUM_RES2
	DECLARE INTEGER	 RQ_NUM_FILL
	DECLARE INTEGER	 RQ_NUM_SEC
	DECLARE INTEGER	 RQ_NUM_ELM
	DECLARE INTEGER	 DT2_PTR_REG_REG
	DECLARE INTEGER	 DT2_PTR_REG_FLD
	DECLARE INTEGER	 IDX_ADD_OCC
	DECLARE INTEGER	 IDX_ADD_RQA
	DECLARE INTEGER	 RQA_IDX_RQA
	DECLARE INTEGER	 RQA_IDX_EST
	DECLARE INTEGER	 RQA_IDX_OCC
	DECLARE INTEGER	 DT2_IDX_BUS_CMND_DTC
	DECLARE INTEGER	 RQA_PRT_01
	DECLARE INTEGER	 RQA_PRT_02
	DECLARE INTEGER	 RQA_PRT_03
	DECLARE INTEGER	 IDX_BUSQ_01
	DECLARE INTEGER	 IDX_BUSQ_02
	DECLARE INTEGER	 LARGO
	DECLARE INTEGER	 SICLO
	DECLARE INTEGER	 BLANCOS 
	DECLARE INTEGER	 BBI
	DECLARE INTEGER	 NUMTOKEN
	DECLARE INTEGER	 NUM_FLD
	DECLARE INTEGER	 VAR_SORT
	DECLARE INTEGER	 SC_NUMTOKEN
	DECLARE INTEGER	 SZTOKEN
	DECLARE INTEGER	 SC_SZTOKEN
	DECLARE INTEGER	 TOKEN
	DECLARE INTEGER	 SC_TOKEN
	DECLARE INTEGER	 P_P
	DECLARE INTEGER	 P_CALL
	DECLARE INTEGER	 SC_P_P
	DECLARE INTEGER	 P_Q
	DECLARE INTEGER	 SC_P_Q
	DECLARE INTEGER	 P_R
	DECLARE INTEGER	 SZ_I_B
	DECLARE INTEGER	 LL
	DECLARE INTEGER	 BB
	DECLARE INTEGER	 FIL_HST
	DECLARE INTEGER	 COL_HST
	DECLARE INTEGER	 FIL_CAM
	DECLARE INTEGER	 COL_CAM
	DECLARE INTEGER	 FIL_NCF
	DECLARE INTEGER	 FIL_LRG
	DECLARE INTEGER	 FIL_IDX
	DECLARE INTEGER	 TPG_TOT_LEI
	DECLARE INTEGER	 TPG_POS_REQ
	DECLARE INTEGER	 UBI_SRV_TP
	DECLARE INTEGER	 NUM_TRN
	DECLARE INTEGER	 FIO_STAT
	DECLARE INTEGER	 FIO_ACCI
	DECLARE INTEGER	 FIO_RLEN
	DECLARE INTEGER	 C_FILE_MTX
	DECLARE INTEGER	 C_FILE_FMT
	DECLARE INTEGER	 C_FILE_DC1
	DECLARE INTEGER	 C_FILE_PGO
	DECLARE INTEGER	 C_FILE_DCG
	DECLARE INTEGER	 C_FILE_WS1
	DECLARE INTEGER	 C_FILE_WS3
	DECLARE INTEGER	 C_FILE_PI1
	DECLARE INTEGER	 C_FILE_WS2
	DECLARE INTEGER	 C_FILE_DFI
	DECLARE INTEGER	 C_FILE_DFO
	DECLARE INTEGER	 C_FILE_VBC
	DECLARE INTEGER	 INICIA_IDX_PT
	DECLARE INTEGER	 INICIA_IDX_TX
	DECLARE INTEGER	 INICIA_IDX_TP
	DECLARE INTEGER	 INICIA_IDX_XT
	DECLARE INTEGER	 RE
	DECLARE INTEGER	 ACCION
	DECLARE INTEGER	 FST_WSS
	DECLARE INTEGER	 TPG_HDR_SND_CPT_NUM
	DECLARE INTEGER	 AUX
	DECLARE INTEGER	 CAMP
	DECLARE INTEGER	 LINEA
	DECLARE INTEGER	 QQ
	DECLARE INTEGER	 PP_CPT_NUM
	DECLARE INTEGER	 ANT1_CPT_NUM
	DECLARE INTEGER	 ANT2_CPT_NUM
	DECLARE INTEGER	 CAMP_CPT_NUM
	DECLARE INTEGER	 COL_CPT_NUM
	DECLARE INTEGER	 CONT_SRV_CPT_NUM
	DECLARE INTEGER	 CON_NIV_CPT_NUM
	DECLARE INTEGER	 CON_NIV1_CPT_NUM
	DECLARE INTEGER	 CON_NIV2_CPT_NUM
	DECLARE INTEGER	 CON_NIVV_CPT_NUM
	DECLARE INTEGER	 CON_NIV_ANT_CPT_NUM
	DECLARE INTEGER	 MM_CPT_NUM
	DECLARE INTEGER	 COR_HST_CPT_NUM
	DECLARE INTEGER	 COR_PGM_CPT_NUM
	DECLARE INTEGER	 DD_CPT_NUM
	DECLARE INTEGER	 ENC_CPT_NUM
	DECLARE INTEGER	 FIRST_CPT_NUM
	DECLARE INTEGER	 FUNC_CPT_NUM
	DECLARE INTEGER	 GEN_I_CPT_NUM
	DECLARE INTEGER	 GEN_J_CPT_NUM
	DECLARE INTEGER	 GG_CPT_NUM
	DECLARE INTEGER	 HH_CPT_NUM
	DECLARE INTEGER	 HST_CPT_NUM
	DECLARE INTEGER	 I_CPT_NUM
	DECLARE INTEGER	 IDX_CPT_NUM
	DECLARE INTEGER	 IDX_ERR_CPT_NUM
	DECLARE INTEGER	 II_CPT_NUM
	DECLARE INTEGER	 INDEX_CPT_NUM
	DECLARE INTEGER	 J_CPT_NUM
	DECLARE INTEGER	 JJ_CPT_NUM
	DECLARE INTEGER	 K_CPT_NUM
	DECLARE INTEGER	 LARGO_STR_CPT_NUM
	DECLARE INTEGER	 LL_CPT_NUM
	DECLARE INTEGER	 LRG_PT_TX_CPT_NUM
	DECLARE INTEGER	 LRG_XT_TP_CPT_NUM
	DECLARE INTEGER	 LZ_CPT_NUM
	DECLARE INTEGER	 L_REG_CPT_NUM
	DECLARE INTEGER	 L_RELL_CPT_NUM
	DECLARE INTEGER	 MOV_OKS_CPT_NUM
	DECLARE INTEGER	 MULT_CPT_NUM
	DECLARE INTEGER	 MULT1_CPT_NUM
	DECLARE INTEGER	 MULT2_CPT_NUM
	DECLARE INTEGER	 MUL_NIV_DOS_CPT_NUM
	DECLARE INTEGER	 MUL_NIV_TRE_CPT_NUM
	DECLARE INTEGER	 MUL_NIV_UNO_CPT_NUM
	DECLARE INTEGER	 NIV_ESC_CPT_NUM
	DECLARE INTEGER	 NIV_MOV_PT_MOV_CPT_NUM
	DECLARE INTEGER	 NIV_MOV_TP_MOV_CPT_NUM
	DECLARE INTEGER	 NIV_MOV_TX_MOV_CPT_NUM
	DECLARE INTEGER	 NIV_MOV_XT_MOV_CPT_NUM
	DECLARE INTEGER	 NN_CPT_NUM
	DECLARE INTEGER	 NNN_IDX_CPT_NUM
	DECLARE INTEGER	 NN_IDX_CPT_NUM
	DECLARE INTEGER	 N_IDX_CPT_NUM
	DECLARE INTEGER	 O_CPT_NUM
	DECLARE INTEGER	 OCCUR1_CPT_NUM
	DECLARE INTEGER	 OCCUR2_CPT_NUM
	DECLARE INTEGER	 OCC_SRV_CPT_NUM
	DECLARE INTEGER	 POS_1ER_FLD_IDX_CPT_NUM
	DECLARE INTEGER	 POS_IDX_CPT_NUM
	DECLARE INTEGER	 POS_ULT_FLD_IDX_CPT_NUM
	DECLARE INTEGER	 REPT1_CPT_NUM
	DECLARE INTEGER	 SEGR_CPL_CPT_NUM
	DECLARE INTEGER	 SEGR_NUM_CPT_NUM
	DECLARE INTEGER	 SEGS_CPL_CPT_NUM
	DECLARE INTEGER	 SEGS_NUM_CPT_NUM
	DECLARE INTEGER	 SEP_CPT_NUM
	DECLARE INTEGER	 SEP_ANT_CPT_NUM
	DECLARE INTEGER	 SRV_CPT_NUM
	DECLARE INTEGER	 SRV_TX_CPT_NUM
	DECLARE INTEGER	 SS_CPT_NUM
	DECLARE INTEGER	 TOT_OCURRENCIAS_CAMPOS_CPT_NUM
	DECLARE INTEGER	 TOT_PGM_CPT_NUM
	DECLARE INTEGER	 TPG_HDR_DAT_CPT_NUM
	DECLARE INTEGER	 TPG_TOT_SIST_CPT_NUM
	DECLARE INTEGER	 TT_CPT_NUM
	DECLARE INTEGER	 TY_CPT_NUM
	DECLARE INTEGER	 UU_CPT_NUM
	DECLARE INTEGER	 VAR_IDX1_CPT_NUM
	DECLARE INTEGER	 VAR_IDX2_CPT_NUM
	DECLARE INTEGER	 VV_CPT_NUM
	DECLARE INTEGER	 V_L_CPT_NUM
	DECLARE INTEGER	 AA_CPT_NUM
	DECLARE INTEGER	 ZZ_CPT_NUM
	DECLARE INTEGER	 LRG_ESTR_CPT_NUM
	DECLARE INTEGER	 SRV_ACT_CPT_NUM
	DECLARE INTEGER	 AUX_POS


 !!!
 !!! MATRIZ QUE GUARDA EL TOTAL DE CAMPOS
 !!! POR CADA REGISTRO O RQA
	DECLARE INTEGER	 RQA_MATR_TDCXREG(50)


 !!! TOTAL DE STATUS DTC ALMACENADOS EN VECTOR DTC_VEC_STAT_NUM
	DECLARE INTEGER	 DTC_TOT_STAT
 !!! TOTAL DE COMANDOS DTC Y DB2
	DECLARE INTEGER	 DT2_TOT_CMND
	DECLARE INTEGER	 RQA_TOT_ELEM

 !!! TOTAL DE RQA ULTIMO ELEMENTO DE VECTOR RQA_MATR_IDN(nn)        
	DECLARE INTEGER	 RQA_TOT_RQAS

	DECLARE INTEGER	 NIV_MRG(9)
	DECLARE INTEGER	 TPG_VEC_NUM_TRN(100)


 !!! INDICE FIJO PARA APUNTAR A NOMBRE CAMPO DTC O PROGRAMA
	DECLARE INTEGER	CONSTANT          DT2_CTE_FLD_DTC          = 1
 !!! INDICE FIJO PARA APUNTAR A NOMBRE CAMPO REGISTRO(BEE)
	DECLARE INTEGER	CONSTANT          DT2_CTE_FLD_FIO          = 2
	DECLARE INTEGER	CONSTANT          RQ_COL_GLS               = 1
 !!! CONSTANTES PARA ALMACENAR COMANDOS,
 !!! DB_ID, STATUS ,,,,QUE
 !!! USA CADA UNA DE LAS RQA
 !!! TOTAL DE ELEMENTOS DENTRO DE LA (EST)RUCTURA RQA
 !!! ==>> DT2_TOT_EST
	DECLARE INTEGER	CONSTANT          DT2_TOT_EST              = 12
	DECLARE INTEGER	CONSTANT          RQA_CMND              =  1
	DECLARE INTEGER	CONSTANT          RQA_TABL              =  2
	DECLARE INTEGER	CONSTANT          RQA_IKEY              =  3
	DECLARE INTEGER	CONSTANT          RQA_FKEY              =  4
	DECLARE INTEGER	CONSTANT          RQA_STAT              =  5
	DECLARE INTEGER	CONSTANT          RQA_RSV1              =  6
	DECLARE INTEGER	CONSTANT          RQA_DBID              =  7
	DECLARE INTEGER	CONSTANT          RQA_SIST              =  8
	DECLARE INTEGER	CONSTANT          RQA_RCID              =  9
	DECLARE INTEGER	CONSTANT          RQA_RSV2              = 10
	DECLARE INTEGER	CONSTANT          RQA_ELIS              = 11
	DECLARE INTEGER	CONSTANT          RQA_BUFF              = 12
	DECLARE INTEGER	CONSTANT          ELM_COL_GLOSA            = 1
	DECLARE INTEGER	CONSTANT          ELM_FIL_NAME             = 1
	DECLARE INTEGER	CONSTANT          ELM_FIL_CODE             = 2
	DECLARE INTEGER	CONSTANT          ELM_FIL_FILL             = 3
	DECLARE INTEGER	CONSTANT          FIO_STAT_OKS            = 0
	DECLARE INTEGER	CONSTANT          NO_INICIA_IDX_PT        = 0
	DECLARE INTEGER	CONSTANT          SI_INICIA_IDX_PT        = 1
	DECLARE INTEGER	CONSTANT          NO_INICIA_IDX_TP        = 0
	DECLARE INTEGER	CONSTANT          SI_INICIA_IDX_TP        = 1
	DECLARE INTEGER	CONSTANT          NO_INICIA_IDX_XT        = 0
	DECLARE INTEGER	CONSTANT          SI_INICIA_IDX_XT        = 1
	DECLARE INTEGER	CONSTANT          NO_INICIA_IDX_TX        = 0
	DECLARE INTEGER	CONSTANT          SI_INICIA_IDX_TX        = 1
	DECLARE INTEGER	CONSTANT          INITOK = 1
	DECLARE INTEGER	CONSTANT          IDNTOK = 2
	DECLARE INTEGER	CONSTANT          NUMTOK = 3
	DECLARE INTEGER	CONSTANT          STRTOK = 4
	DECLARE INTEGER	CONSTANT          CHRTOK = 5
	DECLARE INTEGER	CONSTANT          EOLTOK = 6
	DECLARE INTEGER	CONSTANT          ETXTOK = 7
	DECLARE INTEGER	CONSTANT          HTAB   = 9
	DECLARE INTEGER	CONSTANT          TPGTOK = 10
	DECLARE INTEGER	CONSTANT          CTE_IDX_TCF = 1
	DECLARE INTEGER	CONSTANT          CTE_IDX_TSF = 2
	DECLARE INTEGER	CONSTANT          CTE_IDX_NOM = 1
	DECLARE INTEGER	CONSTANT          CTE_IDX_SIS = 2
	DECLARE INTEGER	CONSTANT          CTE_IDX_SIM = 3
	DECLARE INTEGER	CONSTANT          MG_0  = 1
	DECLARE INTEGER	CONSTANT          MG_7  = 2
	DECLARE INTEGER	CONSTANT          MG_8  = 3
	DECLARE INTEGER	CONSTANT          MG_12 = 4
	DECLARE INTEGER	CONSTANT          MG_16 = 5
	DECLARE INTEGER	CONSTANT          MG_20 = 6
	DECLARE INTEGER	CONSTANT          MG_24 = 7
	DECLARE INTEGER	CONSTANT          MG_28 = 8
	DECLARE INTEGER	CONSTANT          NIV_00 = MG_0
	DECLARE INTEGER	CONSTANT          NIV_01 = MG_8
	DECLARE INTEGER	CONSTANT          NIV_03 = MG_12
	DECLARE INTEGER	CONSTANT          NIV_05 = MG_16
	DECLARE INTEGER	CONSTANT          NIV_07 = MG_20
	DECLARE INTEGER	CONSTANT          NIV_09 = MG_24
	DECLARE INTEGER	CONSTANT          NIV_11 = MG_28
	DECLARE INTEGER	CONSTANT          ZI          = 1
	DECLARE INTEGER	CONSTANT          NO          = 0
	DECLARE INTEGER	CONSTANT          NEXT_PAGE = 2
	DECLARE INTEGER	CONSTANT          VALO_FOUT = 60
	DECLARE INTEGER	CONSTANT          LINE_USED = 1


 !!! ==>> IDENTIFICA SISTEMA PARA BUSQUEDA DE REGISTROS 
	DECLARE STRING	 ID_SIST


 !!! ==>> indica si es priemra lectura para no escribir
 !!! ==>> linea en blanco en archivo de salida
	DECLARE STRING	 PRIMERA_LECTURA

 !!! ==>> IDENTIFICACION DE TABLA
	DECLARE STRING	 ID_TABL

 !!! ==>> IDENTIFICACION LLAVE DTC
	DECLARE STRING	 I_KEY

 !!! ==>> IDENTIFICACION LLAVE FIO
	DECLARE STRING	 F_KEY

 !!! VECTOR DE DOCUMENTACION DE TITULOS PARA OCURRENCIAS
 !!! ==>> DT2_TOT_EST
	DECLARE STRING	 DC1_VEC_DOC(12)

 !!! VECTOR DE VALORES DE STATUS DE RETORNO
	DECLARE STRING	 DTC_VEC_STAT_NUM(50)

 !!! VECTOR DE VARIABLES DE STATUS DE RETORNO
	DECLARE STRING	 DTC_VEC_STAT_ALF(50)

 !!! VECTOR CON ID BASE DTC ( 115, 118 ...)
	DECLARE STRING	 DT2_ID_BASE_DTC(100)

 !!! VECTOR CON ID SISTEMAS SEGUN BASE DTC ( COL = 115, SGC = 118 ...)
	DECLARE STRING	 DT2_ID_BASE_SIS(100)

 !!! 
	DECLARE STRING	 DT2_ELEM_LIST(100)

 !!!
 !!! VECTOR QUE GUARDA LAS RQA QUE USA EL PROGRAMA
	DECLARE STRING	 RQA_MATR_IDN(50)

 !!!
 !!! MATRIZ QUE GUARDA IDENTIFICADORES DE ESTRUCTURA
 !!! DE LAS RQA QUE USA EL PROGRAMA
 !!! HASTA 50 RQA 
 !!! HASTA  10 CONCEPTOS DB_ID, TABLA, COMANDO
 !!! ==>> DT2_TOT_EST
	DECLARE STRING	 RQA_MATR_EST(50,12)

 !!!
 !!! MATRIZ QUE GUARDA OCURRENCIAS
 !!! DE CONCEPTOS GUARDADOS EN RQA_MATR_EST
 !!! ==>> ASUME QUE EXISTEN A LO MAS 50 RQAS Y REGISTROS POR PROGRAMA
	DECLARE STRING	 RQA_MATR_OCC(50,12,15)


 !!!
 !!! MATRIZ QUE GUARDA LAS EQUIVALENCIAS
 !!! ENTRE NOMBRE DE CAMPOS EN PROGRAMA
 !!! Y NOMBRE DE CAMPOS EN REGISTROS
 !!! ==>> DT2_TOT_RQAS 50 RQAS, 80 CAMPOS POR CADA RQA
	DECLARE STRING	 REG_MATR_OCC(50,60,2)

 !!!
	DECLARE STRING	 MAT_ELEM_LIS(100,5,15)

 !!! VECTOR CON COMANDOS FIO
	DECLARE STRING	 DT2_CMND_FIO(100)

 !!! VECTOR CON COMANDOS DTC
	DECLARE STRING	 DT2_CMND_DTC(100)

 !!! 
 !!! "INDICADOR PARA PONER SOLO UN CMT EN"
 !!! "INSTRUCCIONES CON MAS DE 1 LINEA"
	DECLARE STRING	 PONER_CMT_CONTEXTO

 !!! 
 !!! "GUARDA IDENTIFICACION DE LEMENT LIST"
	DECLARE STRING	 ELEM_STR

 !!! 
 !!! TOTAL DE COURRENCIAS STRING
	DECLARE STRING	 TOT_OCC_STR



 !!! INDICA SI ESTA WSS PARA AGRGAR REGISTROS Y VARIABLES
	DECLARE STRING	 MODO_WORKING_STORAGE_SECTION

 !!! INDICA SI ESTA EN MODE CMND-DTC TO DMND-FIO
	DECLARE STRING	 MODO_MOVE_CMND

 !!! INDICA SI GRABA WSS DESPUES DE LINEA WSS Y COMENTARIOS SGTES
	DECLARE STRING	 MODO_ESCRIBA_WSS

 !!! INDICA SI ESTA PROCESANDO STATUS
	DECLARE STRING	 MODO_IF_STATUS

 !!! INDICA SI ESTA EN MODO ENTRY PARA REEMPLAZAR INSTRUCCION
	DECLARE STRING	 MODO_ENTRY_DBMSCBL

 !!! INDICA SI ESTA DENTRO DE "CALL DBNTRY USING"
	DECLARE STRING	 MODO_CALL_DBNTRY
 !!! INDICA SI ESTA DENTRO DE PROCEDURE DIVISION
	DECLARE STRING	 MODO_PROCEDURE_DIVISION
 !!! INDICA SI HACE MOVE PARA BASE DE DATOS
	DECLARE STRING	 MODO_MOVE_DBID
 !!! INDICA SI HACE MOVE PARA TABLA
	DECLARE STRING	 MODO_MOVE_TABLA
 !!! 1INDICA PASO DE EJECUCION DON O GEN
	DECLARE STRING	 PASO_EJEC
 !!! VALOR PENULTIMO TOKEN
	DECLARE STRING	 VALTOKEN_1
 !!! VALOR ANTE-PENULTIMO TOKEN
	DECLARE STRING	 VALTOKEN_2
 !!! 
	DECLARE STRING	 VALTOKEN_3
 !!! 
	DECLARE STRING	 VALTOKEN_4
 !!! 
	DECLARE STRING	 VALTOKEN_AUX
 !!! 
	DECLARE STRING	 PRT_DC1_RQA
 !!! 
	DECLARE STRING	 PRT_DC1_ELM
 !!! 
	DECLARE STRING	 PRT_DC1_OCC
 !!! 
	DECLARE STRING	 PRT_DC1_OCC_AUX
 !!! 
	DECLARE STRING	 HAY_REQA
 !!! 
	DECLARE STRING	 MOVE_01
 !!! 
	DECLARE STRING	 MOVE_02
 !!! 
	DECLARE STRING	 MOVE_03
 !!! 
	DECLARE STRING	 ELM_EST_ENC
 !!! 
	DECLARE STRING	 ELM_OCC_ENC 
 !!! 
	DECLARE STRING	 RQA_STR_ADD_OCC
 !!! VARIABLE AUXILIAR QUE INDICA SI EN VECTOR YA ESTA RQA
	DECLARE STRING	 LIST_A_BUS
	DECLARE STRING	 REQ_A_BUS
	DECLARE STRING	 DT2_HAY_RQA
	DECLARE STRING	 ESTA_EN_OCC
	DECLARE STRING	 DT2_HAY_ELEM
	DECLARE STRING	 LIN_LEI
	DECLARE STRING	 LIN_ESCR
	DECLARE STRING	 NUM_BLAN
	DECLARE STRING	 ANAL_BLCO
	DECLARE STRING	 RESTO
	DECLARE STRING	  WSS_USN
	DECLARE STRING	  BIP
	DECLARE STRING	  GNS_PATH
	DECLARE STRING	  TPGMATTPFMT          
	DECLARE STRING	  TPGMATNAMEFLDSRV
	DECLARE STRING	  O_B_IZQ
	DECLARE STRING	  O_B_DER
	DECLARE STRING	  O_B_STR
	DECLARE STRING	  O_B_CAPSULA
	DECLARE STRING	  I_B_STR
	DECLARE STRING	  WRT_O_B_STR
 !!! INDICA SI ESCRIBE LINEA ORIGINAL COMO COMENTARIO
	DECLARE STRING	  WRT_LIN_ORIG_COMO_COMENT
	DECLARE STRING	  LINEA_COMENTARIADA
	DECLARE STRING	  PRI_IF
	DECLARE STRING	  SEG_IF
	DECLARE STRING	  FIO_BUF0
	DECLARE STRING	  C_X
	DECLARE STRING	  C_Q
	DECLARE STRING	  SC_C_Q
	DECLARE STRING	  VALTOKEN
	DECLARE STRING	  SC_VALTOKEN
	DECLARE STRING	  STRTOKEN
	DECLARE STRING	  ULT_SEC
	DECLARE STRING	  ANTERIOR
	DECLARE STRING	  ANTE
	DECLARE STRING	  GLS_ERR
	DECLARE STRING	  WSS_DLP
	DECLARE STRING	  WSS_DPP
	DECLARE STRING	  WSS_DFI
	DECLARE STRING	  WSS_GENDFO
	DECLARE STRING	  WSS_DSP00
	DECLARE STRING	  WSS_DSP01
	DECLARE STRING	  WSS_DSP04
	DECLARE STRING	  FILE_FMT
	DECLARE STRING	  FILE_MTX
	DECLARE STRING	  FILE_DC1
	DECLARE STRING	  FILE_PGO
	DECLARE STRING	  FILE_DCG
	DECLARE STRING	  FILE_WS1
	DECLARE STRING	  FILE_WS3
	DECLARE STRING	  FILE_PI1
	DECLARE STRING	  FILE_WS2
	DECLARE STRING	  FILE_DFI
	DECLARE STRING	  FILE_DFO
	DECLARE STRING	  FILE_VBC
	DECLARE STRING	  FILE_RN
	DECLARE STRING	  O_L
	DECLARE STRING	  IDEN_CLI 
	DECLARE STRING	  EXTERNO
	DECLARE STRING	  VARI_ABPA
	DECLARE STRING	  VARI_CIPA
	DECLARE STRING	  BUFOUT
	DECLARE STRING	  RPT_GLS_PRY
	DECLARE STRING	  MAP_GLS_CMP
	DECLARE STRING	  RPT_GLS_SRT
	DECLARE STRING	  RPT_GLS_FOR
	DECLARE STRING	  MAP_GLS_IDEN
	DECLARE STRING	  RPT_GLS_PAI
	DECLARE STRING	  RPT_GLS_CLI
	DECLARE STRING	  VARI
	DECLARE STRING	  TPGMATTPFRM_CPT_ALF
	DECLARE STRING	  SWICH_CPT_ALF
	DECLARE STRING	 SWITCH_GEN_PGO
	DECLARE STRING	  AA_CPT_ALF
	DECLARE STRING	  ABPAPT_CPT_ALF
	DECLARE STRING	  ABPATP_CPT_ALF
	DECLARE STRING	  ABPATX_CPT_ALF
	DECLARE STRING	  ABPAXT_CPT_ALF
	DECLARE STRING	  ANO_CPT_ALF
	DECLARE STRING	  ANTB_CPT_ALF
	DECLARE STRING	  ANTE_CPT_ALF
	DECLARE STRING	  ARCH_IDEN_CPT_ALF
	DECLARE STRING	  ARCH_SPA_CPT_ALF
	DECLARE STRING	  AUX_FNC_CPT_ALF
	DECLARE STRING	  AUX_CMN_CPT_ALF
	DECLARE STRING	  AUX_CNF_CPT_ALF
	DECLARE STRING	  AUX_CPP_CPT_ALF
	DECLARE STRING	  AUX_PGM_CPT_ALF
	DECLARE STRING	  AUX_SPP_CPT_ALF
	DECLARE STRING	  AUX_SUB_CPT_ALF
	DECLARE STRING	  BB_CPT_ALF
	DECLARE STRING	  BUF_CPT_ALF
	DECLARE STRING	  CAM_VAL_CPT_ALF
	DECLARE STRING	  CIPAPT_CPT_ALF
	DECLARE STRING	  CIPATP_CPT_ALF
	DECLARE STRING	  CIPATX_CPT_ALF
	DECLARE STRING	  CIPAXT_CPT_ALF
	DECLARE STRING	  CL_CPT_ALF
	DECLARE STRING	  COD_CTAB_CPT_ALF
	DECLARE STRING	  COD_TABL_CPT_ALF
	DECLARE STRING	  COMAPT_CPT_ALF
	DECLARE STRING	  COMATP_CPT_ALF
	DECLARE STRING	  COMATX_CPT_ALF
	DECLARE STRING	  COMAXT_CPT_ALF
	DECLARE STRING	  CON_NIV_CPT_ALF
	DECLARE STRING	  CORR_FLD_CPT_ALF
	DECLARE STRING	  DER_CPT_ALF
	DECLARE STRING	  DIA_CPT_ALF
	DECLARE STRING	  DPS_IDX_TX_CPT_ALF
	DECLARE STRING	  DSP_IDX_TX_CPT_ALF
	DECLARE STRING	  DSP_IDX_XT_CPT_ALF
	DECLARE STRING	  DT_CPT_ALF
	DECLARE STRING	  ENC_CPT_ALF
	DECLARE STRING	  ENC_PGM_CPT_ALF
	DECLARE STRING	  ESCR_CPT_ALF
	DECLARE STRING	  ES_FTB_CPT_ALF
	DECLARE STRING	  ES_VAL_CPT_ALF
	DECLARE STRING	  EX_CTAB_CPT_ALF
	DECLARE STRING	  EX_TABL_CPT_ALF
	DECLARE STRING	  FINP_CPT_ALF
	DECLARE STRING	  FIRST_CPT_ALF
	DECLARE STRING	  FLD_VBC_CPT_ALF
	DECLARE STRING	  FOUT_CPT_ALF
	DECLARE STRING	  FRS_LRG_XT_CPT_ALF
	DECLARE STRING	  FUNC_CPT_ALF
	DECLARE STRING	  GLS_1_CPT_ALF
	DECLARE STRING	  HORA_CPT_ALF
	DECLARE STRING	  HRS_CPT_ALF
	DECLARE STRING	  IDX_PT_CPT_ALF
	DECLARE STRING	  IDX_TP_CPT_ALF
	DECLARE STRING	  IDX_TX_CPT_ALF
	DECLARE STRING	  IDX_XT_CPT_ALF
	DECLARE STRING	  IZQ_CPT_ALF
	DECLARE STRING	  LL_CPT_ALF
	DECLARE STRING	  LR_CPT_ALF
	DECLARE STRING	  LRG_PT_TX_CPT_ALF
	DECLARE STRING	  LRG_XT_TP_CPT_ALF
	DECLARE STRING	  MAP_GLS_VBC_CPT_ALF
	DECLARE STRING	  MES_CPT_ALF
	DECLARE STRING	  MNT_CPT_ALF
	DECLARE STRING	  MNU_COD_CMND_CPT_ALF        
	DECLARE STRING	  MNU_COD_FRET_CPT_ALF        
	DECLARE STRING	  MNU_COD_IMEN_CPT_ALF        
	DECLARE STRING	  MNU_COD_INST_CPT_ALF        
	DECLARE STRING	  MNU_COD_NEMO_CPT_ALF        
	DECLARE STRING	  MNU_COD_OPCI_CPT_ALF        
	DECLARE STRING	  MNU_COD_TCTL_CPT_ALF        
	DECLARE STRING	  MNU_COD_TFUN_CPT_ALF        
	DECLARE STRING	  MNU_COD_TINF_CPT_ALF        
	DECLARE STRING	  MNU_GLS_FMEN_CPT_ALF        
	DECLARE STRING	  MNU_GLS_FPRO_CPT_ALF        
	DECLARE STRING	  MNU_GLS_LFRM_CPT_ALF        
	DECLARE STRING	  MNU_GLS_NFRM_CPT_ALF        
	DECLARE STRING	  MNU_GLS_PROG_CPT_ALF        
	DECLARE STRING	  MNU_GLS_TRAN_CPT_ALF        
	DECLARE STRING	  MNU_NUM_COLU_CPT_ALF        
	DECLARE STRING	  MNU_NUM_FILA_CPT_ALF        
	DECLARE STRING	  NEX_CPT_ALF                 
	DECLARE STRING	  NOMB_ARCH_CPT_ALF           
	DECLARE STRING	  NUEVE_CPT_ALF               
	DECLARE STRING	  OCCUR1_CPT_ALF              
	DECLARE STRING	  OCCUR2_CPT_ALF              
	DECLARE STRING	  OLD_IDX_CPT_ALF             
	DECLARE STRING	  PUT_HDR_CPT_ALF             
	DECLARE STRING	  PUT_PTHDR_CPT_ALF           
	DECLARE STRING	  REGMNU_CPT_ALF              
	DECLARE STRING	  REGMNU_1_CPT_ALF            
	DECLARE STRING	  REGMNU_2_CPT_ALF            
	DECLARE STRING	  REG_1_CPT_ALF               
	DECLARE STRING	  REG_2_CPT_ALF               
	DECLARE STRING	  REG_TAB_CPT_ALF             
	DECLARE STRING	  RELL_CPT_ALF                
	DECLARE STRING	  REPT_CPT_ALF                
	DECLARE STRING	  RPF_COD_STPP_CPT_ALF        
	DECLARE STRING	  RPF_COD_CCPP_CPT_ALF        
	DECLARE STRING	  RPF_COD_CMND_CPT_ALF        
	DECLARE STRING	  RPF_COD_CONF_CPT_ALF        
	DECLARE STRING	  RPF_COD_CORR_CPT_ALF        
	DECLARE STRING	  RPF_COD_DARC_CPT_ALF        
	DECLARE STRING	  RPF_COD_DATA_CPT_ALF        
	DECLARE STRING	  RPF_COD_DPRO_CPT_ALF        
	DECLARE STRING	  RPF_COD_TREG_CPT_ALF        
	DECLARE STRING	  RPF_COD_UARC_CPT_ALF        
	DECLARE STRING	  RPF_GLS_DAT1_CPT_ALF        
	DECLARE STRING	  RPF_GLS_DAT2_CPT_ALF        
	DECLARE STRING	  RR_CPT_ALF                  
	DECLARE STRING	  SEC_PT_HDR_CPT_ALF          
	DECLARE STRING	  SEGR_CPT_ALF                
	DECLARE STRING	  SEGR_CPL_CPT_ALF            
	DECLARE STRING	  SEGS_CPT_ALF                
	DECLARE STRING	  SEGS_CPL_CPT_ALF            
	DECLARE STRING	  SGTE_CPT_ALF                
	DECLARE STRING	  SIETE_CPT_ALF               
	DECLARE STRING	  SIS_PAN_CPT_ALF             
	DECLARE STRING	  SIS_PAN_ANT_CPT_ALF         
	DECLARE STRING	  TAB_GLS_DESC_CPT_ALF        
	DECLARE STRING	  TIME_STP_CPT_ALF            
	DECLARE STRING	  TPG_GLS_FRM_CPT_ALF         
	DECLARE STRING	  TPG_GLS_FRQ_CPT_ALF         
	DECLARE STRING	  TPG_GLS_SIM_CPT_ALF         
	DECLARE STRING	  TPG_GLS_SIS_CPT_ALF         
	DECLARE STRING	  VAR_AUX_CPT_ALF             
	DECLARE STRING	  VSN_CPT_ALF                 
	DECLARE STRING	  VV_CPT_ALF                  
	DECLARE STRING	  WRI_CPT_ALF                 
	DECLARE STRING	  XX_CPT_ALF                  
	DECLARE STRING	  YY_CPT_ALF                  
	DECLARE STRING	  GLDIRARCH                   

	DECLARE STRING	                 TPG_VEC_REQ(100)            
	DECLARE STRING	                 TAB_GLS_DESC(10)           
	DECLARE STRING	                 V_MES(12,2)                
	DECLARE STRING	                 TPG_VEC_SIST(30)           
	DECLARE STRING	                 V_M(9)                    
	DECLARE STRING	                 NIV_PIC(9)          
	DECLARE STRING	                 NIV_SEP(14)            

200

      DEF STRING FNC_PRINT(STRING MENS)
	PRINT MENS
      END DEF

      DEF INTEGER FNC_SYSVAL(STRING VAR_STRING)
	FNC_SYSVAL = VAL%(VAR_STRING)
      END DEF

      DEF INTEGER FNC_SYSINTEGER(LONG  VALOR)
		FNC_SYSINTEGER = INTEGER(VALOR)
      END DEF

      DEF STRING FNC_SYS_LIB_GET_SYMBOL(STRING GET_SYMBOL)
          CALL LIB$GET_SYMBOL(GET_SYMBOL,AUX_FNC_CPT_ALF)
          FNC_SYS_LIB_GET_SYMBOL = AUX_FNC_CPT_ALF
      END DEF

      DEF INTEGER FNC_SYSPOS(STRING LINEA,STRING ARGBUSQ,INTEGER POSINIC)
          FNC_SYSPOS = POS(LINEA,ARGBUSQ,POSINIC)
      END DEF


      DEF STRING FNC_SYSFORMAT(INTEGER VALFMT,STRING TOTFMT)

		IF TOTFMT = "#" THEN
			FNC_SYSFORMAT = FORMAT$(VALFMT,"#")
		ELSE
		IF TOTFMT = "##" THEN
			FNC_SYSFORMAT = FORMAT$(VALFMT,"##")
		ELSE
		IF TOTFMT = "###" THEN
			FNC_SYSFORMAT = FORMAT$(VALFMT,"###")
		ELSE
		IF TOTFMT = "####" THEN
			FNC_SYSFORMAT = FORMAT$(VALFMT,"####")
		ELSE
		IF TOTFMT = "#####" THEN
			FNC_SYSFORMAT = FORMAT$(VALFMT,"#####")
		ELSE
		IF TOTFMT = "######" THEN
			FNC_SYSFORMAT = FORMAT$(VALFMT,"######")
		END IF
		END IF
		END IF
		END IF
		END IF
		END IF
   END DEF

   DEF STRING FNC_SYSCHR(INTEGER CHA)
	FNC_SYSCHR = CHR$(CHA)
   END DEF

   DEF STRING EMIT_BIP
	PRINT FNC_SYSCHR(7)
   END DEF

   DEF STRING GET_COM1
	GET_COM1 = FNC_SYSCHR(39)
   END DEF

   DEF STRING GET_COM2
	GET_COM2 = FNC_SYSCHR(34)
   END DEF

   DEF STRING FNC_SYSRIGHT(STRING DER,INTEGER DESDE)
	FNC_SYSRIGHT = RIGHT$(DER,DESDE)
   END DEF

   DEF STRING FNC_SYSLEFT(STRING IZQ,INTEGER HASTA)
	FNC_SYSLEFT = LEFT$(IZQ,HASTA)
   END DEF

   DEF STRING FNC_SYSSTR(INTEGER NUME)
	FNC_SYSSTR = STR$(NUME)
   END DEF

   DEF STRING FNC_SYSMID(STRING CADENA,INTEGER DESDE,INTEGER CUANTOS)
	FNC_SYSMID = MID$(CADENA,DESDE,CUANTOS)
   END DEF

   DEF INTEGER FNC_SYSLEN(STRING CADENA)
	FNC_SYSLEN = LEN(CADENA)
   END DEF

   DEF STRING FNC_SYSTIME(INTEGER PARAM)
	FNC_SYSTIME = TIME$(PARAM)
   END DEF

   DEF STRING FNC_SYSDATE(INTEGER PARAM)
	FNC_SYSDATE = DATE$(PARAM)
   END DEF

   DEF STRING FNC_SYSSTRING(INTEGER PARAM1,INTEGER PARAM2)
	FNC_SYSSTRING = STRING$(PARAM1,PARAM2)
   END DEF

   DEF STRING FNC_SYSEDIT(STRING PARAM1,INTEGER PARAM2)
	FNC_SYSEDIT = EDIT$(PARAM1,PARAM2)
   END DEF

   DEF STRING FG_BAS_Padding (STRING LCStringIn , INTEGER liLargo , STRING LCRelo , STRING LCJustificacion )

    Declare integer LIBlancos
    Declare string  LCString 

    If FNC_SYSLEN(LCStringIn) = liLargo Then
       FG_BAS_Padding = LCStringIn
        GO TO LABE_CHAO
    End If

    LIBLANCOS = liLargo - FNC_SYSLEN(LCStringIn)

    If LIBlancos < 0 Then
       FG_BAS_Padding = LCStringIn
        GO TO LABE_CHAO
    End If

    LCString = LCStringIn

    If LCJustificacion = "D" Then
		FOR II =1 TO LIBLANCOS
			LCString = LCString  + LCRELO
		NEXT II
    Else
		FOR II =1 TO LIBLANCOS
			LCString = LCRELO  + LCString 
		NEXT II
    End If

    FG_BAS_Padding = LCString
 LABE_CHAO:

   END DEF





   DEF STRING GENRPTREP (STRING ESTR_INGS,STRING CRTR_ORIG,STRING CRTR_REEM)
        DECLARE STRING VAR_AUXI_CPT_ALF

 !!!  REEMPLAZA EN ESTR_INGS EL CRTR_ORIG(CARACTER ORIGINAL)
 !!!  POR CRTR_REEM(CARATER(ES) DE REEMPLAZO)

 !!!  EJEMPLO DE LLAMADA DE ESTA SUBRUTINA:
 !!!      PICT_FILD = 999999,999
 !!!     CALL GENRPTREP(PICT_FILD,",","V")
 !!!  ESTA SUBRUTINA DEVUELVE EN PICT_FILD EL VALOR 999999V999

   LARGO_STR_CPT_NUM = FNC_SYSLEN(ESTR_INGS)
   VAR_AUXI_CPT_ALF = ""
   FOR I_CPT_NUM = 1 TO LARGO_STR_CPT_NUM
      IF FNC_SYSMID(ESTR_INGS,I_CPT_NUM,1) = CRTR_ORIG THEN
         VAR_AUXI_CPT_ALF = VAR_AUXI_CPT_ALF + CRTR_REEM
      ELSE
         VAR_AUXI_CPT_ALF = VAR_AUXI_CPT_ALF + FNC_SYSMID(ESTR_INGS,I_CPT_NUM,1)
      END IF
   NEXT I_CPT_NUM
   ESTR_INGS = VAR_AUXI_CPT_ALF
   GENRPTREP = VAR_AUXI_CPT_ALF
   END DEF

   DEF STRING GENMTXL72 (STRING P1,STRING P2,INTEGER P3)

 !!!  ENTREGA UNA LINEA COBOL DE LARGO 72 CARACTERES
 !!!  INCORPORANDO UN RELLENO ENTRE LOS DOS
 !!!  PARAMETROS INGRESADOS DE INPUT
 !!!  LA RESPUESTA LA ENTREGA EN EL PRIMER PARAMETRO
        DECLARE STRING RELL2_CPT_ALF 
        DECLARE STRING V_M2(9)
        DECLARE INTEGER CONSTANT MG_0 = 1
        DECLARE INTEGER CONSTANT MG_7  = 2
        DECLARE INTEGER CONSTANT MG_8  = 3
        DECLARE INTEGER CONSTANT MG_12 = 4
        DECLARE INTEGER CONSTANT MG_16 = 5
        DECLARE INTEGER CONSTANT MG_20 = 6
        DECLARE INTEGER CONSTANT MG_24 = 7
        DECLARE INTEGER CONSTANT MG_28 = 8
        V_M2(MG_0)  = ""
        V_M2(MG_7)  = "      *"
        V_M2(MG_8)  = "       "
        V_M2(MG_12) = "           "
        V_M2(MG_16) = "               "
        V_M2(MG_20) = "                   "
        V_M2(MG_24) = "                       "
        V_M2(MG_28) = "                           "
        L_REG_CPT_NUM = FNC_SYSLEN(V_M2(P3)) + FNC_SYSLEN(P1) + FNC_SYSLEN(P2)
        RELL2_CPT_ALF = ""
        IF L_REG_CPT_NUM < 72 THEN
                L_RELL2_CPT_NUM = 72 - L_REG_CPT_NUM
                FOR RELL2_CPT_NUM = 1 TO L_RELL2_CPT_NUM
                        RELL2_CPT_ALF = RELL2_CPT_ALF + " "
                NEXT RELL2_CPT_NUM
        END IF
        GENMTXL72 = P1 + RELL2_CPT_ALF + P2
   END DEF

   DEF STRING NUM5 (STRING P1)
        IF FNC_SYSLEN(P1) = 1 THEN
                P1 = "0000" + P1
        ELSE
        IF FNC_SYSLEN(P1) = 2 THEN
                P1 = "000" + P1
        ELSE
        IF FNC_SYSLEN(P1) = 3 THEN
                P1 = "00" + P1
        ELSE
        IF FNC_SYSLEN(P1) = 4 THEN
                P1 = "0" + P1
        END IF
        END IF
        END IF
        END IF
        NUM5 = P1
   END DEF



  DEF STRING COMPACT(STRING LIN_LEIDA)
         LIN_LEI = LIN_LEIDA
         LIN_ESCR = ""
         LARGO = 0
         SICLO = 0
         BLANCOS = 0
         LIN_ESCR = ""
         LARGO = FNC_SYSLEN(LIN_LEI)
         WHILE SICLO <= LARGO 
                 IF FNC_SYSLEN(LIN_LEI) > 2 THEN
                          RESTO = FNC_SYSRIGHT(LIN_LEI,2)
                 ELSE
                          RESTO = FNC_SYSRIGHT(LIN_LEI,1)
                 END IF
                ANAL_BLCO = FNC_SYSLEFT(LIN_LEI,1)
                 IF ANAL_BLCO = " " THEN
                        BLANCOS = BLANCOS + 1
                 ELSE
                        IF BLANCOS <> 0 THEN
                                IF BLANCOS > 3 THEN
                                        NUM_BLAN = FNC_SYSSTR(BLANCOS)
                                        LIN_ESCR = LIN_ESCR + "@" + NUM_BLAN + "@" + ANAL_BLCO
                                        BLANCOS = 0
                                ELSE
                                         FOR BBI = 0 TO BLANCOS
                                                LIN_ESCR = LIN_ESCR + " "
                                         NEXT BBI
                                        BLANCOS = 0
                                        LIN_ESCR = LIN_ESCR + ANAL_BLCO
                                END IF
                        ELSE
                                LIN_ESCR = LIN_ESCR + ANAL_BLCO
                        END IF
                 END IF
                 LIN_LEI = RESTO
                 SICLO = SICLO + 1
         NEXT
         COMPACT = "      * " + LIN_ESCR + LIN_LEI
   END DEF

 !!!===========================================
 !!! DECLARACION DE FUNCIONES I/O             =
 !!!                 (INI)                  =
 !!!===========================================



   DEF INTEGER FIO_WS1_CLO

        ON ERROR GO TO ERR_FIO_WS1_CLO

        CLOSE #C_FILE_WS1

        GO TO OK_FIO_WS1_CLO

 ERR_FIO_WS1_CLO:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_WS1 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_WS1 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_WS1 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_WS1 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_WS1_CLO:

   END DEF


   DEF INTEGER FIO_WS1_OUT

        ON ERROR GO TO ERR_FIO_WS1_OUT

        OPEN FILE_WS1 FOR OUTPUT AS FILE #C_FILE_WS1, ORGANIZATION SEQUENTIAL VARIABLE , RECORDSIZE 255, RECORDTYPE ANY

        GO TO OK_FIO_WS1_OUT
 ERR_FIO_WS1_OUT:
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_WS1 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_WS1 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_WS1 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_WS1 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_WS1_OUT:

   END DEF


   DEF INTEGER FIO_WS1_PUT(INTEGER FIO_STAT, STRING BUF0)

        ON ERROR GO TO ERR_FIO_WS1_PUT

        PRINT #C_FILE_WS1, BUF0

        GO TO OK_FIO_WS1_PUT
 ERR_FIO_WS1_PUT:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_WS1 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_WS1 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_WS1 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_WS1 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        FIO_STAT = 23

        RESUME

 OK_FIO_WS1_PUT:

        FIO_STAT = 0

   END DEF



   DEF INTEGER FIO_WS2_CLO

        ON ERROR GO TO ERR_FIO_WS2_CLO

        CLOSE #C_FILE_WS2

        GO TO OK_FIO_WS2_CLO

 ERR_FIO_WS2_CLO:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_WS2 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_WS2 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_WS2 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_WS2 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_WS2_CLO:

   END DEF


   DEF INTEGER FIO_WS2_OUT

        ON ERROR GO TO ERR_FIO_WS2_OUT

        OPEN FILE_WS2 FOR OUTPUT AS FILE #C_FILE_WS2, ORGANIZATION SEQUENTIAL VARIABLE , RECORDSIZE 255, RECORDTYPE ANY

        GO TO OK_FIO_WS2_OUT
 ERR_FIO_WS2_OUT:
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_WS2 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_WS2 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_WS2 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_WS2 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_WS2_OUT:

   END DEF


   DEF INTEGER FIO_WS2_PUT(INTEGER FIO_STAT, STRING BUF0)

        ON ERROR GO TO ERR_FIO_WS2_PUT

        PRINT #C_FILE_WS2, BUF0

        GO TO OK_FIO_WS2_PUT
 ERR_FIO_WS2_PUT:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_WS2 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_WS2 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_WS2 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_WS2 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        FIO_STAT = 23

        RESUME

 OK_FIO_WS2_PUT:

        FIO_STAT = 0

   END DEF



   DEF INTEGER FIO_WS3_CLO

        ON ERROR GO TO ERR_FIO_WS3_CLO

        CLOSE #C_FILE_WS3

        GO TO OK_FIO_WS3_CLO

 ERR_FIO_WS3_CLO:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_WS3 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_WS3 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_WS3 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_WS3 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_WS3_CLO:

   END DEF


   DEF INTEGER FIO_WS3_OUT

        ON ERROR GO TO ERR_FIO_WS3_OUT

        OPEN FILE_WS3 FOR OUTPUT AS FILE #C_FILE_WS3, ORGANIZATION SEQUENTIAL VARIABLE , RECORDSIZE 255, RECORDTYPE ANY

        GO TO OK_FIO_WS3_OUT
 ERR_FIO_WS3_OUT:
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_WS3 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_WS3 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_WS3 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_WS3 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_WS3_OUT:

   END DEF


   DEF INTEGER FIO_WS3_PUT(INTEGER FIO_STAT, STRING BUF0)

        ON ERROR GO TO ERR_FIO_WS3_PUT

        PRINT #C_FILE_WS3, BUF0

        GO TO OK_FIO_WS3_PUT
 ERR_FIO_WS3_PUT:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_WS3 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_WS3 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_WS3 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_WS3 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        FIO_STAT = 23

        RESUME

 OK_FIO_WS3_PUT:

        FIO_STAT = 0

   END DEF



   DEF INTEGER FIO_PGO_CLO

        ON ERROR GO TO ERR_FIO_PGO_CLO

        CLOSE #C_FILE_PGO

        GO TO OK_FIO_PGO_CLO

 ERR_FIO_PGO_CLO:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_PGO + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_PGO + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_PGO + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_PGO + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_PGO_CLO:

   END DEF


   DEF INTEGER FIO_PGO_OUT

        ON ERROR GO TO ERR_FIO_PGO_OUT

        OPEN FILE_PGO FOR OUTPUT AS FILE #C_FILE_PGO, ORGANIZATION SEQUENTIAL VARIABLE , RECORDSIZE 255, RECORDTYPE ANY

        GO TO OK_FIO_PGO_OUT
 ERR_FIO_PGO_OUT:
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_PGO + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_PGO + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_PGO + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_PGO + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_PGO_OUT:

   END DEF


   DEF INTEGER FIO_PGO_PUT(INTEGER FIO_STAT, STRING BUF0)

        ON ERROR GO TO ERR_FIO_PGO_PUT

        PRINT #C_FILE_PGO, BUF0

        GO TO OK_FIO_PGO_PUT
 ERR_FIO_PGO_PUT:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_PGO + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_PGO + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_PGO + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_PGO + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        FIO_STAT = 23

        RESUME

 OK_FIO_PGO_PUT:

        FIO_STAT = 0

   END DEF



   DEF INTEGER FIO_DC1_CLO

        ON ERROR GO TO ERR_FIO_DC1_CLO

        CLOSE #C_FILE_DC1

        GO TO OK_FIO_DC1_CLO

 ERR_FIO_DC1_CLO:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_DC1 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_DC1 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_DC1 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_DC1 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_DC1_CLO:

   END DEF


   DEF INTEGER FIO_DC1_OUT

        ON ERROR GO TO ERR_FIO_DC1_OUT

        OPEN FILE_DC1 FOR OUTPUT AS FILE #C_FILE_DC1, ORGANIZATION SEQUENTIAL VARIABLE , RECORDSIZE 255, RECORDTYPE ANY

        GO TO OK_FIO_DC1_OUT
 ERR_FIO_DC1_OUT:
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_DC1 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_DC1 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_DC1 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_DC1 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_DC1_OUT:

   END DEF


   DEF INTEGER FIO_DC1_PUT(INTEGER FIO_STAT, STRING BUF0)

        ON ERROR GO TO ERR_FIO_DC1_PUT

        PRINT #C_FILE_DC1, BUF0

        GO TO OK_FIO_DC1_PUT
 ERR_FIO_DC1_PUT:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_DC1 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_DC1 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_DC1 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_DC1 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        FIO_STAT = 23

        RESUME

 OK_FIO_DC1_PUT:

        FIO_STAT = 0

   END DEF



   DEF INTEGER FIO_PI1_CLO

        ON ERROR GO TO ERR_FIO_PI1_CLO

        CLOSE #C_FILE_PI1

        GO TO OK_FIO_PI1_CLO

 ERR_FIO_PI1_CLO:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_PI1 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_PI1 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_PI1 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_PI1 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_PI1_CLO:

   END DEF


   DEF INTEGER FIO_PI1_OUT

        ON ERROR GO TO ERR_FIO_PI1_OUT

        OPEN FILE_PI1 FOR OUTPUT AS FILE #C_FILE_PI1, ORGANIZATION SEQUENTIAL VARIABLE , RECORDSIZE 255, RECORDTYPE ANY

        GO TO OK_FIO_PI1_OUT
 ERR_FIO_PI1_OUT:
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_PI1 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_PI1 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_PI1 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_PI1 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_PI1_OUT:

   END DEF


   DEF INTEGER FIO_PI1_PUT(INTEGER FIO_STAT, STRING BUF0)

        ON ERROR GO TO ERR_FIO_PI1_PUT

        PRINT #C_FILE_PI1, BUF0

        GO TO OK_FIO_PI1_PUT
 ERR_FIO_PI1_PUT:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_PI1 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_PI1 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_PI1 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_PI1 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        FIO_STAT = 23

        RESUME

 OK_FIO_PI1_PUT:

        FIO_STAT = 0

   END DEF



   DEF INTEGER FIO_DFI_CLO

        ON ERROR GO TO ERR_FIO_DFI_CLO

        CLOSE #C_FILE_DFI

        GO TO OK_FIO_DFI_CLO

 ERR_FIO_DFI_CLO:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_DFI + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_DFI + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_DFI + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_DFI + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_DFI_CLO:

   END DEF


   DEF INTEGER FIO_DFI_OUT

        ON ERROR GO TO ERR_FIO_DFI_OUT

        OPEN FILE_DFI FOR OUTPUT AS FILE #C_FILE_DFI, ORGANIZATION SEQUENTIAL VARIABLE , RECORDSIZE 255, RECORDTYPE ANY

        GO TO OK_FIO_DFI_OUT
 ERR_FIO_DFI_OUT:
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_DFI + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_DFI + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_DFI + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_DFI + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_DFI_OUT:

   END DEF


   DEF INTEGER FIO_DFI_PUT(INTEGER FIO_STAT, STRING BUF0)

        ON ERROR GO TO ERR_FIO_DFI_PUT

        PRINT #C_FILE_DFI, BUF0

        GO TO OK_FIO_DFI_PUT
 ERR_FIO_DFI_PUT:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_DFI + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_DFI + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_DFI + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_DFI + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        FIO_STAT = 23

        RESUME

 OK_FIO_DFI_PUT:

        FIO_STAT = 0

   END DEF



   DEF INTEGER FIO_DFO_CLO

        ON ERROR GO TO ERR_FIO_DFO_CLO

        CLOSE #C_FILE_DFO

        GO TO OK_FIO_DFO_CLO

 ERR_FIO_DFO_CLO:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_DFO + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_DFO + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_DFO + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_DFO + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_DFO_CLO:

   END DEF


   DEF INTEGER FIO_DFO_OUT

        ON ERROR GO TO ERR_FIO_DFO_OUT

        OPEN FILE_DFO FOR OUTPUT AS FILE #C_FILE_DFO, ORGANIZATION SEQUENTIAL VARIABLE , RECORDSIZE 255, RECORDTYPE ANY

        GO TO OK_FIO_DFO_OUT
 ERR_FIO_DFO_OUT:
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_DFO + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_DFO + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_DFO + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_DFO + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_DFO_OUT:

   END DEF


   DEF INTEGER FIO_DFO_PUT(INTEGER FIO_STAT, STRING BUF0)

        ON ERROR GO TO ERR_FIO_DFO_PUT

        PRINT #C_FILE_DFO, BUF0

        GO TO OK_FIO_DFO_PUT
 ERR_FIO_DFO_PUT:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_DFO + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_DFO + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_DFO + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_DFO + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        FIO_STAT = 23

        RESUME

 OK_FIO_DFO_PUT:

        FIO_STAT = 0

   END DEF



   DEF INTEGER FIO_FMT_CLO

        ON ERROR GO TO ERR_FIO_FMT_CLO

        CLOSE #C_FILE_FMT

        GO TO OK_FIO_FMT_CLO

 ERR_FIO_FMT_CLO:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_FMT + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_FMT + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_FMT + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_FMT + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_FMT_CLO:

   END DEF


   DEF INTEGER FIO_FMT_OUT

        ON ERROR GO TO ERR_FIO_FMT_OUT

        OPEN FILE_FMT FOR OUTPUT AS FILE #C_FILE_FMT, ORGANIZATION SEQUENTIAL VARIABLE , RECORDSIZE 255, RECORDTYPE ANY

        GO TO OK_FIO_FMT_OUT
 ERR_FIO_FMT_OUT:
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_FMT + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_FMT + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_FMT + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_FMT + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_FMT_OUT:

   END DEF


   DEF INTEGER FIO_FMT_PUT(INTEGER FIO_STAT, STRING BUF0)

        ON ERROR GO TO ERR_FIO_FMT_PUT

        PRINT #C_FILE_FMT, BUF0

        GO TO OK_FIO_FMT_PUT
 ERR_FIO_FMT_PUT:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_FMT + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_FMT + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_FMT + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_FMT + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        FIO_STAT = 23

        RESUME

 OK_FIO_FMT_PUT:

        FIO_STAT = 0

   END DEF





   DEF INTEGER FIO_MTX_CLO

        ON ERROR GO TO ERR_FIO_MTX_CLO

        CLOSE #C_FILE_MTX

        GO TO OK_FIO_MTX_CLO

 ERR_FIO_MTX_CLO:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_MTX + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_MTX + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_MTX + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_MTX + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_MTX_CLO:

   END DEF


   DEF INTEGER FIO_MTX_INP

        ON ERROR GO TO ERR_FIO_MTX_INP

        OPEN FILE_MTX FOR INPUT AS FILE #C_FILE_MTX ,RECORDSIZE 255,  ORGANIZATION SEQUENTIAL VARIABLE, RECORDTYPE ANY

        GO TO OK_FIO_MTX_INP

 ERR_FIO_MTX_INP:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_MTX + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_MTX + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_MTX + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_MTX + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_MTX_INP:

   END DEF

   DEF STRING FIO_MTX_GETNXT

        ON ERROR GO TO ERR_FIO_MTX_GETNXT

        GET #C_FILE_MTX
        FIO_RLEN = RECOUNT
        MOVE FROM #C_FILE_MTX,FIO_BUF0 = FIO_RLEN

        FIO_MTX_GETNXT = FIO_BUF0

 !!!        PASS$ = COMPACT(FIO_BUF0)
 !!!	FIO_ACCI = FIO_FMT_PUT(FIO_STAT,PASS$)

        GO TO OK_FIO_MTX_GETNXT

 ERR_FIO_MTX_GETNXT:

        IF ERR = 11 THEN
                FIO_STAT = 10
        ELSE
                BUFOUT = FNC_PRINT(FILE_MTX + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_MTX + "MENSAJE : " + ERT$(ERR) )
        END IF

        RESUME 500

 OK_FIO_MTX_GETNXT:
        FIO_STAT = 0
500
   END DEF



   DEF INTEGER FIO_DCG_CLO

        ON ERROR GO TO ERR_FIO_DCG_CLO

        CLOSE #C_FILE_DCG

        GO TO OK_FIO_DCG_CLO

 ERR_FIO_DCG_CLO:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_DCG + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_DCG + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_DCG + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_DCG + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_DCG_CLO:

   END DEF


   DEF INTEGER FIO_DCG_INP

        ON ERROR GO TO ERR_FIO_DCG_INP

        OPEN FILE_DCG FOR INPUT AS FILE #C_FILE_DCG ,RECORDSIZE 255,  ORGANIZATION SEQUENTIAL VARIABLE, RECORDTYPE ANY

        GO TO OK_FIO_DCG_INP

 ERR_FIO_DCG_INP:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_DCG + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_DCG + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_DCG + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_DCG + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_DCG_INP:

   END DEF

   DEF STRING FIO_DCG_GETNXT

        ON ERROR GO TO ERR_FIO_DCG_GETNXT

        GET #C_FILE_DCG
        FIO_RLEN = RECOUNT
        MOVE FROM #C_FILE_DCG,FIO_BUF0 = FIO_RLEN

        FIO_DCG_GETNXT = FIO_BUF0

 !!!        PASS$ = COMPACT(FIO_BUF0)
 !!!	FIO_ACCI = FIO_FMT_PUT(FIO_STAT,PASS$)

        GO TO OK_FIO_DCG_GETNXT

 ERR_FIO_DCG_GETNXT:

        IF ERR = 11 THEN
                FIO_STAT = 10
        ELSE
                BUFOUT = FNC_PRINT(FILE_DCG + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_DCG + "MENSAJE : " + ERT$(ERR) )
        END IF

        RESUME 510

 OK_FIO_DCG_GETNXT:
        FIO_STAT = 0
510
   END DEF





   DEF INTEGER FIO_DC1_INP

        ON ERROR GO TO ERR_FIO_DC1_INP

        OPEN FILE_DC1 FOR INPUT AS FILE #C_FILE_DC1 ,RECORDSIZE 255,  ORGANIZATION SEQUENTIAL VARIABLE, RECORDTYPE ANY

        GO TO OK_FIO_DC1_INP

 ERR_FIO_DC1_INP:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_DC1 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_DC1 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_DC1 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_DC1 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_DC1_INP:

   END DEF

   DEF STRING FIO_DC1_GETNXT

        ON ERROR GO TO ERR_FIO_DC1_GETNXT

        GET #C_FILE_DC1
        FIO_RLEN = RECOUNT
        MOVE FROM #C_FILE_DC1,FIO_BUF0 = FIO_RLEN

        FIO_DC1_GETNXT = FIO_BUF0

 !!!        PASS$ = COMPACT(FIO_BUF0)
 !!!	FIO_ACCI = FIO_FMT_PUT(FIO_STAT,PASS$)

        GO TO OK_FIO_DC1_GETNXT

 ERR_FIO_DC1_GETNXT:

        IF ERR = 11 THEN
                FIO_STAT = 10
        ELSE
                BUFOUT = FNC_PRINT(FILE_DC1 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_DC1 + "MENSAJE : " + ERT$(ERR) )
        END IF

        RESUME 520

 OK_FIO_DC1_GETNXT:
        FIO_STAT = 0
520
   END DEF




    DEF STRING ESCR_DC1 (INTEGER MARGEN,STRING BUFOUT)
      REG_1_CPT_ALF = ""
      REG_2_CPT_ALF = ""
      BUFOUT = V_M(MARGEN) + BUFOUT
      IF FNC_SYSLEN(BUFOUT) > 72 THEN
         GEN_I_CPT_NUM = 1
         GEN_J_CPT_NUM = 3
         WHILE FNC_SYSMID(BUFOUT,GEN_I_CPT_NUM,4) <> " TO " AND GEN_I_CPT_NUM < FNC_SYSLEN(BUFOUT)
                      GEN_I_CPT_NUM = GEN_I_CPT_NUM + 1
         NEXT
         IF GEN_I_CPT_NUM > 72 THEN
            GEN_I_CPT_NUM = 71
                GEN_J_CPT_NUM = 0
                WHILE FNC_SYSMID(BUFOUT,GEN_I_CPT_NUM,1) <> " "
                    GEN_I_CPT_NUM = GEN_I_CPT_NUM - 1
                NEXT
          END IF
          REG_1_CPT_ALF = FNC_SYSLEFT(BUFOUT,GEN_I_CPT_NUM + GEN_J_CPT_NUM)
          REG_2_CPT_ALF = V_M(MG_16) + " " + FNC_SYSRIGHT(BUFOUT,GEN_I_CPT_NUM + 1 + GEN_J_CPT_NUM)
      ELSE
          REG_1_CPT_ALF = BUFOUT
      END IF

      REG_1_CPT_ALF = FNC_SYSEDIT(REG_1_CPT_ALF,128)
      FIO_ACCI = FIO_DC1_PUT(FIO_STAT,REG_1_CPT_ALF)
      IF REG_2_CPT_ALF > "" THEN
         REG_2_CPT_ALF = FNC_SYSEDIT(REG_2_CPT_ALF,128)
         FIO_ACCI = FIO_DC1_PUT(FIO_STAT,REG_2_CPT_ALF)
      END IF
   END DEF

    DEF INTEGER ESCR_PGO (INTEGER FIO_STAT,STRING BUFOUT)
      IF PRIMERA_LECTURA = "SI" THEN
           PRIMERA_LECTURA = "NO"
           GO TO FIN_ESCR_PGO
      END IF
      REG_1_CPT_ALF = ""
      REG_2_CPT_ALF = ""
      IF FNC_SYSLEN(BUFOUT) > 72 THEN
         GEN_I_CPT_NUM = 1
         GEN_J_CPT_NUM = 3
         WHILE FNC_SYSMID(BUFOUT,GEN_I_CPT_NUM,4) <> " TO " AND GEN_I_CPT_NUM < FNC_SYSLEN(BUFOUT)
               GEN_I_CPT_NUM = GEN_I_CPT_NUM + 1
         NEXT         
         IF GEN_I_CPT_NUM > 72 THEN
            GEN_I_CPT_NUM = 71
            GEN_J_CPT_NUM = 0
            WHILE FNC_SYSMID(BUFOUT,GEN_I_CPT_NUM,1) <> " "
                  GEN_I_CPT_NUM = GEN_I_CPT_NUM - 1
            NEXT
         END IF
         REG_1_CPT_ALF = FNC_SYSLEFT(BUFOUT,GEN_I_CPT_NUM + GEN_J_CPT_NUM)
         REG_2_CPT_ALF = V_M(MG_16) + " " + FNC_SYSRIGHT(BUFOUT,GEN_I_CPT_NUM + 1 + GEN_J_CPT_NUM)
      ELSE
         REG_1_CPT_ALF = BUFOUT
      END IF

      REG_1_CPT_ALF = FNC_SYSEDIT(REG_1_CPT_ALF,128)
      FIO_ACCI = FIO_PGO_PUT(FIO_STAT,REG_1_CPT_ALF)
      IF REG_2_CPT_ALF > "" THEN
         REG_2_CPT_ALF = FNC_SYSEDIT(REG_2_CPT_ALF,128)
         FIO_ACCI = FIO_PGO_PUT(FIO_STAT,REG_2_CPT_ALF)
      END IF
 FIN_ESCR_PGO:
   END DEF

    DEF STRING ESCR_WS1 (INTEGER MARGEN,STRING BUFOUT)
      IF FNC_SYSLEN(BUFOUT) > 0 THEN
         LL_CPT_ALF = FNC_SYSLEFT(BUFOUT,1)
         IF LL_CPT_ALF = "P" THEN
            RR_CPT_ALF = FNC_SYSRIGHT(BUFOUT,7)
            BUFOUT = "      " + RR_CPT_ALF
         END IF
      END IF
      FIO_ACCI = FIO_WS1_PUT(FIO_STAT,V_M(MARGEN) + BUFOUT)
   END DEF

    DEF STRING ESCR_WS2 (INTEGER MARGEN,STRING BUFOUT)
      IF FNC_SYSLEN(BUFOUT) > 0 THEN
         LL_CPT_ALF = FNC_SYSLEFT(BUFOUT,1)
         IF LL_CPT_ALF = "P" THEN
            RR_CPT_ALF = FNC_SYSRIGHT(BUFOUT,7)
            BUFOUT = "      " + RR_CPT_ALF
         END IF
       END IF
       FIO_ACCI = FIO_WS2_PUT(FIO_STAT,V_M(MARGEN) + BUFOUT)
   END DEF

    DEF STRING ESCR_WS3 (INTEGER MARGEN,STRING BUFOUT)
       IF FNC_SYSLEN(BUFOUT) > 0 THEN
          LL_CPT_ALF = FNC_SYSLEFT(BUFOUT,1)
          IF LL_CPT_ALF = "P" THEN
             RR_CPT_ALF = FNC_SYSRIGHT(BUFOUT,7)
             BUFOUT = "      " + RR_CPT_ALF
          END IF
       END IF
       FIO_ACCI = FIO_WS3_PUT(FIO_STAT,V_M(MARGEN) + BUFOUT)
   END DEF

 !!!    DEF STRING ESCR_DFI (INTEGER MARGEN,STRING BUFOUT)
 !!!      FIO_ACCI = FIO_DFI_PUT(FIO_STAT,V_M(MARGEN) + BUFOUT)
 !!!     IF WRI_CPT_ALF = "NO" THEN
 !!!        WRI_CPT_ALF = "SI"
 !!!     END IF
 !!!    END DEF

 !!!    DEF STRING ESCR_DFO (INTEGER MARGEN,STRING BUFOUT)
 !!!      FIO_ACCI = FIO_DFO_PUT(FIO_STAT,V_M(MARGEN) + BUFOUT)
 !!!     IF WRI_CPT_ALF = "NO" THEN
 !!!        WRI_CPT_ALF = "SI"
 !!!     END IF
 !!!    END DEF
     DEF STRING ESCR_VBC (INTEGER MARGEN,STRING BUFOUT)
 !!! FIO_ACCI = FIO_VBC_PUT(FIO_STAT,V_M(MARGEN) + BUFOUT)
     IF WRI_CPT_ALF = "NO" THEN
        WRI_CPT_ALF = "SI"
     END IF
   END DEF
    DEF STRING ESCR_PI1 (INTEGER MARGEN,STRING BUFOUT)
      FIO_ACCI = FIO_PI1_PUT(FIO_STAT,V_M(MARGEN) + BUFOUT)
   END DEF

    DEF INTEGER FNC_BUS_CMND_FIO
                  ELM_EST_ENC = "NO"
 !!!                  BUFOUT = FNC_PRINT("COMANDO BUSCANDO " + VALTOKEN )
                  FOR RQA_IDX_RQA = 1 TO RQA_TOT_RQAS 
                       IF RQA_MATR_EST(RQA_IDX_RQA,RQA_CMND) = VALTOKEN THEN
                           ELM_EST_ENC = "SI"
 !!!                           BUFOUT = FNC_PRINT("COMANDO ENCONTRADO " + VALTOKEN )
                           IDX_ENC_01 = RQA_IDX_RQA
                           RQA_IDX_RQA = RQA_IDX_RQA + 1
                       END IF
                  NEXT RQA_IDX_RQA
                  IF ELM_EST_ENC = "SI" THEN
                           MODO_MOVE_CMND = "NO"
                           VALTOKEN_AUX = "PGM-" + RQA_MATR_OCC(IDX_ENC_01 , RQA_SIST , 1 ) + "-" + RQA_MATR_OCC(IDX_ENC_01 , RQA_TABL , 1 ) + "-CMND"
                           O_B_IZQ = FNC_SYSLEFT (O_B_STR,16)
                           O_B_DER = FNC_SYSRIGHT(O_B_STR,17)
                           O_B_DER = FNC_SYSEDIT(O_B_DER,16)
                           O_B_STR = O_B_IZQ + O_B_DER
                  END IF
   END DEF


    DEF INTEGER FNC_BUS_STAT
                  ELM_EST_ENC = "NO"
                  FOR RQA_IDX_RQA = 1 TO RQA_TOT_RQAS 
                       IF RQA_MATR_EST(RQA_IDX_RQA,RQA_STAT) = VALTOKEN THEN
                           ELM_EST_ENC = "SI"
 !!!                         BUFOUT = FNC_PRINT("STATUS ENCONTRADO " + VALTOKEN )
                           IDX_ENC_01 = RQA_IDX_RQA
                           RQA_IDX_RQA = RQA_IDX_RQA + 1
                           WRT_LIN_ORIG_COMO_COMENT = "SI"
                           MODO_IF_STATUS = "SI"
                       END IF
                  NEXT RQA_IDX_RQA
                  IF ELM_EST_ENC = "SI" THEN
                       IF MODO_PROCEDURE_DIVISION = "SI" THEN
                           VALTOKEN_AUX = "PGM-" + RQA_MATR_OCC(IDX_ENC_01 , RQA_SIST , 1 ) + "-" + RQA_MATR_OCC(IDX_ENC_01 , RQA_TABL , 1 ) + "-STAT"
                        ELSE
                           WRT_O_B_STR = "NO"
                       END IF
                  ELSE
                       MODO_IF_STATUS = "NO"
                       FOR DT2_PTR_REG_REG = 1 TO RQA_TOT_RQAS 
                       FOR DT2_PTR_REG_FLD = 1 TO  REG_MATR_TOC( DT2_PTR_REG_REG ) 
                         IF VALTOKEN = REG_MATR_OCC( DT2_PTR_REG_REG, DT2_PTR_REG_FLD, DT2_CTE_FLD_DTC ) THEN
 !!!                             BUFOUT = FNC_PRINT("REGISTRO ENCONTRADO PARA REEMPLAZAR " + REG_MATR_OCC( DT2_PTR_REG_REG, DT2_PTR_REG_FLD, DT2_CTE_FLD_DTC ) + "<" )
                             VALTOKEN_AUX = REG_MATR_OCC( DT2_PTR_REG_REG, DT2_PTR_REG_FLD, DT2_CTE_FLD_FIO )
                             WRT_LIN_ORIG_COMO_COMENT = "SI"
                             DT2_PTR_REG_FLD = REG_MATR_TOC( DT2_PTR_REG_REG ) + 1
                             DT2_PTR_REG_REG = RQA_TOT_RQAS + 1
                         END IF
                        NEXT DT2_PTR_REG_FLD
                        NEXT DT2_PTR_REG_REG

                  END IF
   END DEF

    DEF INTEGER FNC_BUS_IKEY
                  FOR RQA_IDX_RQA = 1 TO RQA_TOT_RQAS 
 !!!                BUFOUT = FNC_PRINT("COMPARANDO RQA " + RQA_MATR_EST(RQA_IDX_RQA,RQA_IKEY) + " CON " + VALTOKEN )
                       IF RQA_MATR_EST(RQA_IDX_RQA,RQA_IKEY) = VALTOKEN THEN
                           ELM_EST_ENC = "SI"
 !!!                            BUFOUT = FNC_PRINT("IKEY ENCONTRADO " + VALTOKEN )
                           IDX_ENC_01 = RQA_IDX_RQA
                           RQA_IDX_RQA = RQA_IDX_RQA + 1
                           WRT_LIN_ORIG_COMO_COMENT = "SI"
                       END IF
                  NEXT RQA_IDX_RQA

                  IF ELM_EST_ENC = "SI" AND VALTOKEN_3 = "MOVE" THEN
                       IF MODO_PROCEDURE_DIVISION = "SI" THEN
                           VALTOKEN_AUX = "PGM-" + RQA_MATR_OCC(IDX_ENC_01 , RQA_SIST , 1 ) + "-" + RQA_MATR_OCC(IDX_ENC_01 , RQA_TABL , 1 ) + "-AKEY"
                           FOR RQA_IDX_OCC = 1 TO RQA_MATR_TOC(IDX_ENC_01 , RQA_IKEY )
 !!!                             BUFOUT = FNC_PRINT("COMPARANDO RQA " + RQA_MATR_OCC(IDX_ENC_01,RQA_IKEY , RQA_IDX_OCC ) + " CON " + VALTOKEN_2 )
                             IF RQA_MATR_OCC(IDX_ENC_01, RQA_IKEY , RQA_IDX_OCC ) = VALTOKEN_2 THEN
 !!!                                 BUFOUT = FNC_PRINT("IKEY DTC ENCONTRADO " + VALTOKEN_2 )
                                 O_B_STR = FNC_SYSLEFT(O_B_STR, PINI_TOKEN_2) + RQA_MATR_OCC(IDX_ENC_01 , RQA_FKEY , RQA_IDX_OCC) + "' TO "
                                 RQA_IDX_OCC = RQA_IDX_OCC + 1
                                 WRT_LIN_ORIG_COMO_COMENT = "SI"
                             END IF
                         NEXT RQA_IDX_OCC

                        ELSE
                           WRT_O_B_STR = "NO"
                       END IF
                  END IF
   END DEF

    DEF INTEGER NEXTTOKEN
 !!! RESPALDA TOKEN ANTERIOR

        VALTOKEN_4 = VALTOKEN_3
        PINI_TOKEN_4 = PINI_TOKEN_3
        SIZE_TOKEN_4 = SIZE_TOKEN_3

        VALTOKEN_3 = VALTOKEN_2
        PINI_TOKEN_3 = PINI_TOKEN_2
        SIZE_TOKEN_3 = SIZE_TOKEN_2

        VALTOKEN_2 = VALTOKEN_1
        PINI_TOKEN_2 = PINI_TOKEN_1
        SIZE_TOKEN_2 = SIZE_TOKEN_1


        IF TOKEN = STRTOK THEN
            VALTOKEN_1 = STRTOKEN
        ELSE
            VALTOKEN_1 = VALTOKEN
        END IF
        PINI_TOKEN_1 = PINI_TOKEN_0
        SIZE_TOKEN_1 = SIZE_TOKEN_0

        VALTOKEN_AUX = ""
        VALTOKEN     = ""
        IF TOKEN = ETXTOK THEN
                NEXTTOKEN = ETXTOK
                GO TO LABE_ASIG
        END IF
        P_P = P_Q 
 LABE_SIGA:
        WHILE (FNC_SYSMID(I_B_STR,P_P,1) = " " OR FNC_SYSMID(I_B_STR,P_P,1) = "	" OR P_P < 7 OR P_P > 72 ) AND P_P <= SZ_I_B
                IF SWITCH_GEN_PGO = "SI" THEN
                    O_B_STR = O_B_STR + FNC_SYSMID(I_B_STR,P_P,1)
                END IF
                P_P = P_P + 1
        NEXT
        P_Q = P_P 
        IF P_P > SZ_I_B OR I_B_STR = "" OR FNC_SYSMID(I_B_STR,7,1) = "*" THEN
                IF SWITCH_GEN_PGO = "SI" THEN
                    IF WRT_LIN_ORIG_COMO_COMENT = "SI" THEN
                        WRT_LIN_ORIG_COMO_COMENT = "NO"
                        IF PONER_CMT_CONTEXTO = "SI" THEN
 !!!                             BUFOUT =              FNC_PRINT( "G1" + MAP_GLS_IDEN  +  " ==>> CONVERSION DTC TO DB2 " )
                            FIO_ACCI = ESCR_PGO(FIO_STAT,        MAP_GLS_IDEN  +  " ==>> CONVERSION DTC TO DB2 " )
                            IF MODO_CALL_DBNTRY = "SI" THEN
                                PONER_CMT_CONTEXTO = "NO"
                            END IF
                        END IF
                        LINEA_COMENTARIADA = FNC_SYSLEFT(LINEA_COMENTARIADA,6 ) + "*" + FNC_SYSRIGHT(LINEA_COMENTARIADA,8) 
 !!!                         BUFOUT =              FNC_PRINT( "G1" + LINEA_COMENTARIADA )
                        FIO_ACCI = ESCR_PGO(FIO_STAT,        LINEA_COMENTARIADA )
                    END IF
                    IF FNC_SYSMID(I_B_STR,7,1) = "*" THEN
                        O_B_STR = I_B_STR
                    END IF
                    IF MODO_CALL_DBNTRY <> "SI" AND WRT_O_B_STR = "SI" THEN
 !!!                         BUFOUT =             FNC_PRINT(  "G2" + O_B_STR )
                        FIO_ACCI = ESCR_PGO(FIO_STAT,        O_B_STR )
                        O_B_STR = ""
                    END IF
                    IF WRT_O_B_STR = "NO" THEN
                         WRT_O_B_STR = "SI"
                    END IF
                    IF MODO_WORKING_STORAGE_SECTION = "SI" THEN
                        MODO_WORKING_STORAGE_SECTION = "NO"
                        MODO_ESCRIBA_WSS = "SI"
                    END IF
                END IF
                TPG_TOT_LEI = TPG_TOT_LEI + 1
                I_B_STR = FIO_MTX_GETNXT
                SZ_I_B = FIO_RLEN
                IF FIO_STAT  <> FIO_STAT_OKS THEN
                        NEXTTOKEN = ETXTOK
                        GO TO LABE_ASIG
                END IF

                IF SWITCH_GEN_PGO = "SI" THEN
                IF FNC_SYSLEFT(I_B_STR,4) = "DT2I" THEN
                    I_B_STR = FNC_SYSLEFT(I_B_STR,6) + " " + FNC_SYSRIGHT(I_B_STR,8)
                    PONER_CMT_CONTEXTO = "SI"
                ELSE
                IF FNC_SYSLEFT(I_B_STR,4) = "DT2E" THEN
                     PONER_CMT_CONTEXTO = "SI"
                     WRT_LIN_ORIG_COMO_COMENT = "SI"
                     WRT_O_B_STR = "NO" 
                END IF
                END IF
                END IF

                O_B_STR = ""
                P_P  = 1
                P_Q  = 1
                LINEA_COMENTARIADA = I_B_STR
                IF WSS_DLP = "S" THEN
                        BUFOUT = FNC_PRINT("PROC REG" + FNC_SYSSTR(TPG_TOT_LEI))
                END IF
                GO TO LABE_SIGA
        END IF
        IF SWITCH_GEN_PGO = "SI" THEN
        IF MODO_ESCRIBA_WSS = "SI" THEN
               MODO_ESCRIBA_WSS = "NO"
               FIO_ACCI = ESCR_PGO(FIO_STAT, MAP_GLS_IDEN  +  " ==>> CONVERSION DTC TO DB2 - INI CAPSULAS " )
               FIO_ACCI = ESCR_PGO(FIO_STAT," ")
               FIO_ACCI = ESCR_PGO(FIO_STAT,"       COPY GNSWGRQA." )
               FIO_ACCI = ESCR_PGO(FIO_STAT,"       COPY GNSWGUIB." )
               FIO_ACCI = ESCR_PGO(FIO_STAT,"       COPY GNSWGELS." )
               FOR RQA_PRT_01 = 1 TO RQA_TOT_RQAS
                   FIO_ACCI = ESCR_PGO(FIO_STAT,"       77 PGM-" + RQA_MATR_OCC(RQA_PRT_01, RQA_SIST , 1 ) + "-" + RQA_MATR_OCC(RQA_PRT_01, RQA_TABL , 1 ) +  "-AKEY     PIC X(32)." )
               NEXT RQA_PRT_01
               FOR RQA_PRT_01 = 1 TO RQA_TOT_RQAS
                   FIO_ACCI = ESCR_PGO(FIO_STAT,"       77 PGM-" + RQA_MATR_OCC(RQA_PRT_01, RQA_SIST , 1 ) + "-" + RQA_MATR_OCC(RQA_PRT_01, RQA_TABL , 1 ) +  "-CMND     PIC 9(05)." )
               NEXT RQA_PRT_01
               FOR RQA_PRT_01 = 1 TO RQA_TOT_RQAS
                   FIO_ACCI = ESCR_PGO(FIO_STAT,"       COPY GNSWGRQA REPLACING ==ADR-REQA== BY ==ADR-" + RQA_MATR_OCC(RQA_PRT_01, RQA_TABL , 1 ) +  "-REQA==.") 
               NEXT RQA_PRT_01
               FIO_ACCI = ESCR_PGO(FIO_STAT, MAP_GLS_IDEN  +  " ==>> CONVERSION DTC TO DB2 - FIN CAPSULAS " )
        END IF
        END IF
        C_Q = FNC_SYSMID(I_B_STR,P_Q,1)
        IF (C_Q >= "A" AND C_Q <= "Z") OR (C_Q >= "A" AND C_Q <= "Z") THEN
            SWICH_CPT_ALF = "S"
            WHILE (SWICH_CPT_ALF = "S")
              C_X = FNC_SYSMID(I_B_STR,P_P,1)
              IF (C_X >= "A" AND C_X <= "Z") OR (C_X  = "-") OR (C_X >= "A" AND  C_X <= "Z") OR (C_X >= "0" AND C_X <= "9") THEN
                   P_P = P_P + 1
              ELSE
                 SWICH_CPT_ALF = "N"
              END IF
            NEXT

             SZTOKEN = P_P - P_Q
             NEXTTOKEN = IDNTOK
             VALTOKEN = FNC_SYSMID(I_B_STR,P_Q,SZTOKEN)
             IF VALTOKEN = "CALL" THEN
                  P_CALL = P_Q - 1
 !!!                   BUFOUT = FNC_PRINT("DETECTO CALL EN COLUMNA>> "  + FNC_SYSSTR(P_CALL))
             END IF

             IF SWITCH_GEN_PGO = "SI" THEN
                 IF VALTOKEN_1 = "WORKING-STORAGE" AND VALTOKEN = "SECTION" THEN
                        MODO_WORKING_STORAGE_SECTION = "SI"
                 ELSE
                    IF VALTOKEN <> "TO" AND MODO_MOVE_CMND = "SI" THEN
                        ACCION = FNC_BUS_CMND_FIO
                    END IF
                    ACCION = FNC_BUS_STAT
                    IF ELM_EST_ENC = "NO" THEN
                        ACCION = FNC_BUS_IKEY
                    END IF
                 END IF
             END IF

        ELSE
        IF C_Q >= "0" AND C_Q <= "9" THEN
             WHILE FNC_SYSMID(I_B_STR,P_P,1) >= "0" AND FNC_SYSMID(I_B_STR,P_P,1) <= "9"
                 P_P = P_P + 1
             NEXT
             SZTOKEN = P_P - P_Q
             NEXTTOKEN = NUMTOK
             VALTOKEN = FNC_SYSMID(I_B_STR,P_Q,SZTOKEN)
             NUMTOKEN  = VAL(VALTOKEN)
        ELSE
        IF C_Q = GET_COM2 OR C_Q = "'" THEN
             P_P = P_P + 1
             WHILE FNC_SYSMID(I_B_STR,P_P,1) <> C_Q
                  P_P = P_P + 1
             NEXT
             SZTOKEN = P_P - (P_Q + 1)
             NEXTTOKEN = STRTOK
             STRTOKEN = FNC_SYSMID(I_B_STR,P_Q + 1,SZTOKEN)
             VALTOKEN = C_Q + STRTOKEN + C_Q
             P_P = P_P + 1
             IF SWITCH_GEN_PGO = "SI" THEN
                    IF MODO_IF_STATUS = "SI" THEN
                        MODO_IF_STATUS = "NO"
                        FOR DTC_IDX_STAT = 1 TO DTC_TOT_STAT
                             IF STRTOKEN = DTC_VEC_STAT_NUM(DTC_IDX_STAT) THEN
                                  VALTOKEN_AUX = DTC_VEC_STAT_ALF(DTC_IDX_STAT)
                                  DTC_IDX_STAT = DTC_IDX_STAT + 1
                             END IF
                        NEXT DTC_IDX_STAT 
                    END IF
                    IF VALTOKEN_1 = "ENTRY" AND STRTOKEN = "DBMSCBL" THEN
                        MODO_ENTRY_DBMSCBL = "SI"
                        WRT_LIN_ORIG_COMO_COMENT = "SI"
 !!!                         BUFOUT = FNC_PRINT("NEXTT DETECTO CALL DBNTRY>> " + I_B_STR )
                    ELSE
                    IF VALTOKEN_1 = "CALL" AND STRTOKEN = "DBNTRY" THEN
                        MODO_CALL_DBNTRY = "SI"
                        WRT_LIN_ORIG_COMO_COMENT = "SI"
 !!!                         BUFOUT = FNC_PRINT("NEXTT DETECTO CALL DBNTRY>> " + I_B_STR )
                    ELSE
                    IF VALTOKEN_1 = "MOVE" THEN
                        FOR DT2_IDX_BUS_CMND_DTC = 1 TO DT2_TOT_CMND
                           IF STRTOKEN = DT2_CMND_DTC(DT2_IDX_BUS_CMND_DTC) THEN
                               MODO_MOVE_CMND = "SI"
                               WRT_LIN_ORIG_COMO_COMENT = "SI"
                               VALTOKEN_AUX = DT2_CMND_FIO(DT2_IDX_BUS_CMND_DTC)
                               DT2_IDX_BUS_CMND_DTC = DT2_TOT_CMND + 1
                           END IF
                        NEXT DT2_IDX_BUS_CMND_DTC 
                    END IF
                    END IF
                    END IF

                END IF

        ELSE
                NEXTTOKEN = CHRTOK
                VALTOKEN = FNC_SYSMID(I_B_STR,P_P,1)
                P_P = P_P + 1
                SZTOKEN = 1
        END IF
        END IF
        END IF

 LABE_ASIG:
        IF SWITCH_GEN_PGO = "SI" THEN
           IF MODO_ENTRY_DBMSCBL = "SI" THEN
               MODO_ENTRY_DBMSCBL = "NO"
               O_B_STR = "       COPY GNSBGEIB"
           ELSE
           IF VALTOKEN_AUX > "" THEN
               O_B_STR = O_B_STR + VALTOKEN_AUX
           ELSE
               O_B_STR = O_B_STR + VALTOKEN
           END IF
           END IF
        END IF

        PINI_TOKEN_0 = P_Q
        SIZE_TOKEN_0 = SZTOKEN

        P_R = P_Q
        P_Q = P_P
800
   END DEF

    DEF INTEGER FNC_ADD_OCC_MOVE

        ELM_EST_ENC = "NO"
        FOR RQA_IDX_RQA = 1 TO RQA_TOT_RQAS 
            FOR RQA_IDX_EST = 1 TO DT2_TOT_EST
 !!!                BUFOUT = FNC_PRINT("COMPARANDO " + RQA_MATR_EST(RQA_IDX_RQA,RQA_IDX_EST) + " CON " +  RQA_STR_ADD_OCC )
                IF RQA_MATR_EST(RQA_IDX_RQA,RQA_IDX_EST) = RQA_STR_ADD_OCC THEN
                        ELM_EST_ENC = "SI"
 !!!                        BUFOUT = FNC_PRINT("ELEMENTO ENCONTRADO " + RQA_MATR_IDN (RQA_IDX_RQA) + " EN INDICE ->  " RQA_STR_ADD_OCC )
                        IDX_ENC_01 = RQA_IDX_RQA
                        IDX_ENC_02 = RQA_IDX_EST

                        RQA_IDX_EST = 9
                        RQA_IDX_RQA = RQA_TOT_RQAS + 1
                END IF
            NEXT RQA_IDX_EST 
        NEXT RQA_IDX_RQA

        IF ELM_EST_ENC = "SI" THEN
               ELM_OCC_ENC = "NO"
               FOR RQA_IDX_OCC = 1 TO RQA_MATR_TOC(IDX_ENC_01,IDX_ENC_02)
                   IF RQA_MATR_OCC(IDX_ENC_01,IDX_ENC_02,RQA_IDX_OCC) = MOVE_01 THEN
                     ELM_OCC_ENC = "SI"
                     RQA_IDX_OCC = RQA_MATR_TOC(IDX_ENC_01,IDX_ENC_02) + 1
                   END IF
               NEXT RQA_IDX_OCC 
               IF ELM_OCC_ENC = "NO" THEN
                     RQA_MATR_TOC(IDX_ENC_01,IDX_ENC_02) = RQA_MATR_TOC(IDX_ENC_01,IDX_ENC_02) + 1
                     RQA_MATR_OCC(IDX_ENC_01,IDX_ENC_02, RQA_MATR_TOC(IDX_ENC_01,IDX_ENC_02)  ) = MOVE_01
 !!!                     BUFOUT = FNC_PRINT("OCURRENCIA AGREGADA " + MOVE_01 + FNC_SYSSTR(IDX_ENC_01) + FNC_SYSSTR(IDX_ENC_02) )
               END IF
        END IF

   END DEF

     DEF INTEGER FNC_ADD_OCC_VALUE
            RQA_MATR_TOC(IDX_ENC_01,IDX_ENC_02) = 1
            RQA_MATR_OCC(IDX_ENC_01,IDX_ENC_02,1) = RQA_STR_ADD_OCC
 !!!            BUFOUT = FNC_PRINT("PUSO EN OCC VALUE> " + FNC_SYSSTR(IDX_ENC_01) + "-" + FNC_SYSSTR(IDX_ENC_02) + "-" + RQA_MATR_IDN(IDX_ENC_01) + "+" + RQA_STR_ADD_OCC + "+" )

   END DEF


     DEF STRING FNC_ANL_LIN_RQA_WSS
 !!! 	BUFOUT = FNC_PRINT("ENTRO A ANAL_LIN CON TOKEN " + VALTOKEN )
                WHILE VALTOKEN <> "."
                        TOKEN = NEXTTOKEN
 !!!                <<< GUARDO INFORMACION INESPERADA >>>
                NEXT
 !!!        BUFOUT = FNC_PRINT("EN ANAL_LIN DETECTO PUNTO " + VALTOKEN )

 !!!        ==>> NIVEL ( NUMERO )
                TOKEN = NEXTTOKEN
 !!!        ==>> COMANDO
                TOKEN = NEXTTOKEN
                RQA_MATR_EST(IDX_ENC_01,RQA_CMND) = VALTOKEN
                TOKEN = NEXTTOKEN
                WHILE VALTOKEN <> "."
                        TOKEN = NEXTTOKEN
                        IF VALTOKEN = "VALUE" OR VALTOKEN = "VALUES" THEN
                                TOKEN = NEXTTOKEN
                                IF TOKEN = STRTOK THEN
                                    IF VALTOKEN > " " THEN

                                        RQA_STR_ADD_OCC = STRTOKEN
                                        IDX_ENC_02 = RQA_CMND
                                        ACCION = FNC_ADD_OCC_VALUE

                                    END IF                                    
                                END IF                                    
                        END IF
                 NEXT

 !!!        ==>> NIVEL ( NUMERO )
                TOKEN = NEXTTOKEN
 !!!        ==>> TABLA
                TOKEN = NEXTTOKEN
                RQA_MATR_EST(IDX_ENC_01,RQA_TABL) = VALTOKEN
                TOKEN = NEXTTOKEN
                WHILE VALTOKEN <> "."
                        TOKEN = NEXTTOKEN
                        IF VALTOKEN = "VALUE" OR VALTOKEN = "VALUES" THEN
                                TOKEN = NEXTTOKEN
                                IF TOKEN = STRTOK THEN
                                    IF VALTOKEN > " " THEN

                                        RQA_STR_ADD_OCC = STRTOKEN
                                        IDX_ENC_02 = RQA_TABL
                                        ACCION = FNC_ADD_OCC_VALUE

                                    END IF                                    
                                END IF                                    
                        END IF
                 NEXT


 !!!        ==>> NIVEL ( NUMERO )
		TOKEN = NEXTTOKEN
 !!!        ==>> IDENTIFICACION DE LLAVE
		TOKEN = NEXTTOKEN
		RQA_MATR_EST(IDX_ENC_01,RQA_IKEY) = VALTOKEN
		TOKEN = NEXTTOKEN
                WHILE VALTOKEN <> "."
                        TOKEN = NEXTTOKEN
                        IF VALTOKEN = "VALUE" OR VALTOKEN = "VALUES" THEN
                                TOKEN = NEXTTOKEN
                                IF TOKEN = STRTOK THEN
                                    IF VALTOKEN > " " THEN

                                        RQA_STR_ADD_OCC = STRTOKEN
                                        IDX_ENC_02 = RQA_IKEY
                                        ACCION = FNC_ADD_OCC_VALUE

                                    END IF                                    
                                END IF                                    
                        END IF
                 NEXT

 !!!        ==>> NIVEL ( NUMERO )
		TOKEN = NEXTTOKEN
 !!!        ==>> STATUS
		TOKEN = NEXTTOKEN
		RQA_MATR_EST(IDX_ENC_01,RQA_STAT) = VALTOKEN
		TOKEN = NEXTTOKEN
                WHILE VALTOKEN <> "."
                        TOKEN = NEXTTOKEN
                        IF VALTOKEN = "VALUE" OR VALTOKEN = "VALUES" THEN
                                TOKEN = NEXTTOKEN
                                IF TOKEN = STRTOK THEN
                                    IF VALTOKEN > " " THEN

                                        RQA_STR_ADD_OCC = STRTOKEN
                                        IDX_ENC_02 = RQA_STAT
                                        ACCION = FNC_ADD_OCC_VALUE

                                    END IF                                    
                                END IF                                    
                        END IF
                 NEXT


 !!!        ==>> NIVEL ( NUMERO )
		TOKEN = NEXTTOKEN
 !!!        ==>> RESERVADO 1
		TOKEN = NEXTTOKEN
		RQA_MATR_EST(IDX_ENC_01,RQA_RSV1) = VALTOKEN
		TOKEN = NEXTTOKEN
                WHILE VALTOKEN <> "."
                        TOKEN = NEXTTOKEN
                        IF VALTOKEN = "VALUE" OR VALTOKEN = "VALUES" THEN
                                TOKEN = NEXTTOKEN
                                IF TOKEN = STRTOK THEN
                                    IF VALTOKEN > " " THEN

                                        RQA_STR_ADD_OCC = STRTOKEN
                                        IDX_ENC_02 = RQA_RSV1
                                        ACCION = FNC_ADD_OCC_VALUE

                                    END IF                                    
                                END IF                                    
                        END IF
                 NEXT


 !!!        ==>> NIVEL ( NUMERO )
		TOKEN = NEXTTOKEN
 !!!        ==>> ID BASE DE DATOS
		TOKEN = NEXTTOKEN
		RQA_MATR_EST(IDX_ENC_01,RQA_DBID) = VALTOKEN
		TOKEN = NEXTTOKEN
                WHILE VALTOKEN <> "."
                        TOKEN = NEXTTOKEN
                        IF VALTOKEN = "VALUE" OR VALTOKEN = "VALUES" THEN
                                TOKEN = NEXTTOKEN
                                IF TOKEN = CHRTOK THEN
                                        TOKEN = NEXTTOKEN
                                END IF

                                IF TOKEN = NUMTOK THEN
                                        RQA_STR_ADD_OCC = VALTOKEN
                                        IDX_ENC_02 = RQA_DBID
                                        ACCION = FNC_ADD_OCC_VALUE

                                END IF                                    
                        END IF
                 NEXT

 !!!        ==>> NIVEL ( NUMERO )
		TOKEN = NEXTTOKEN
 !!!        ==>> RCID
		TOKEN = NEXTTOKEN
                RQA_MATR_EST(IDX_ENC_01,RQA_RCID) = VALTOKEN
		TOKEN = NEXTTOKEN
                WHILE VALTOKEN <> "."
                        TOKEN = NEXTTOKEN
                        IF VALTOKEN = "VALUE" OR VALTOKEN = "VALUES" THEN
                                TOKEN = NEXTTOKEN
                                IF TOKEN = STRTOK THEN
                                    IF VALTOKEN > " " THEN

                                        RQA_STR_ADD_OCC = STRTOKEN
                                        IDX_ENC_02 = RQA_RCID
                                        ACCION = FNC_ADD_OCC_VALUE

                                    END IF                                    
                                END IF                                    
                        END IF
                 NEXT

 !!!        ==>> NIVEL ( NUMERO )
		TOKEN = NEXTTOKEN
 !!!        ==>> RSV2
		TOKEN = NEXTTOKEN
		RQA_MATR_EST(IDX_ENC_01,RQA_RSV2) = VALTOKEN
		TOKEN = NEXTTOKEN
                WHILE VALTOKEN <> "."
                        TOKEN = NEXTTOKEN
                        IF VALTOKEN = "VALUE" OR VALTOKEN = "VALUES" THEN
                                TOKEN = NEXTTOKEN
                                IF TOKEN = STRTOK THEN
                                    IF VALTOKEN > " " THEN

                                        RQA_STR_ADD_OCC = STRTOKEN
                                        IDX_ENC_02 = RQA_RSV2
                                        ACCION = FNC_ADD_OCC_VALUE

                                    END IF                                    
                                END IF                                    
                        END IF
                 NEXT

   END DEF
     DEF STRING FNC_ANAL_LIST

 !!!		BUFOUT = FNC_PRINT("EN ANAL_LIST")
 !!!                WHILE TOKEN <> NUMTOKEN
                WHILE VALTOKEN <> "."
                        TOKEN = NEXTTOKEN
 !!!                <<< GUARDO INFORMACION INESPERADA >>>
                NEXT

                      TOKEN = NEXTTOKEN
 !!!                      BUFOUT = FNC_PRINT("TOKEN NUMERO " + VALTOKEN)
                      TOKEN = NEXTTOKEN
 !!!                      BUFOUT = FNC_PRINT("ELM-NAME  GLOSA " + VALTOKEN)
                      MAT_ELEM_LIS(IDX_BUSQ_01,ELM_FIL_NAME,ELM_COL_GLOSA) = VALTOKEN
 !!!	        BUFOUT = FNC_PRINT("guardo bien la glosa   ======>>>>>>>>>  " + MAT_ELEM_LIS(IDX_BUSQ_01,ELM_GLOSA,RQ_COL_GLS))
		i% = IDX_BUSQ_01
 !!!	        BUFOUT = FNC_PRINT("ELM-NAME  en i% " + FNC_SYSSTR(I%))
		j% = ELM_GLOSA
 !!!	        BUFOUT = FNC_PRINT("ELM-NAME  en j% " + FNC_SYSSTR(j%))
		k% = rq_col_gls
 !!!	        BUFOUT = FNC_PRINT("ELM-NAME  en k% " + FNC_SYSSTR(k%))
 !!!	        BUFOUT = FNC_PRINT("   ")

                TOKEN = NEXTTOKEN
                WHILE VALTOKEN <> "."
                        IF VALTOKEN = "VALUE" THEN
                                TOKEN = NEXTTOKEN
                                IF VALTOKEN <> "SPACES" THEN
					FOR JJ =  2 TO 8
						IF MAT_ELEM_LIS(IDX_BUSQ_01,ELM_FIL_NAME,JJ) = "" THEN 
							SGTE_POS = JJ
							JJ = 8
						END IF
					NEXT JJ
                                        RQ_NUM_ELM = SGTE_POS
 !!!                                <<< GUARDO VALOR DE COMANDO >>>
                                        MAT_ELEM_LIS(IDX_BUSQ_01,ELM_FIL_NAME,RQ_NUM_ELM) = STRTOKEN
                                END IF
                        END IF
                        TOKEN = NEXTTOKEN
                 NEXT
                
                TOKEN = NEXTTOKEN
 !!!	        BUFOUT = FNC_PRINT("TOKEN NUMERO " + VALTOKEN)
                TOKEN = NEXTTOKEN
 !!!	        BUFOUT = FNC_PRINT("SEC CODE  GLOSA " + VALTOKEN)
		MAT_ELEM_LIS(IDX_BUSQ_01,ELM_FIL_CODE,ELM_COL_GLOSA) = VALTOKEN
		TOKEN = NEXTTOKEN
                WHILE VALTOKEN <> "."
                        IF VALTOKEN = "VALUE" THEN
                                TOKEN = NEXTTOKEN
                                IF VALTOKEN <> "SPACES" THEN
 !!!                                <<< GUARDO VALOR DE FILE EJEC >>>
					FOR JJ =  2 TO 8
						IF MAT_ELEM_LIS(IDX_BUSQ_01,ELM_FIL_CODE,JJ) = "" THEN 
							SGTE_POS = JJ
							JJ = 8
						END IF
					NEXT JJ
                                        RQ_NUM_SEC = SGTE_POS
                                        MAT_ELEM_LIS(IDX_BUSQ_01,ELM_FIL_CODE,RQ_NUM_SEC) = VALTOKEN
                                END IF
                        END IF
                        TOKEN = NEXTTOKEN
                NEXT


                TOKEN = NEXTTOKEN
 !!!	        BUFOUT = FNC_PRINT("TOKEN NUMERO " + VALTOKEN)
                TOKEN = NEXTTOKEN
 !!!	        BUFOUT = FNC_PRINT("FILLER  GLOSA " + VALTOKEN)
		MAT_ELEM_LIS(IDX_BUSQ_01,ELM_FIL_FILL,ELM_COL_GLOSA) = VALTOKEN
		TOKEN = NEXTTOKEN
                WHILE VALTOKEN <> "."
                        IF VALTOKEN = "VALUE" THEN
                                TOKEN = NEXTTOKEN
                                IF VALTOKEN <> "SPACES" THEN
 !!!                                <<< GUARDO VALOR DE FILE EJEC >>>
					FOR JJ =  2 TO 8
						IF MAT_ELEM_LIS(IDX_BUSQ_01,ELM_FIL_FILL,JJ) = "" THEN 
							SGTE_POS = JJ
							JJ = 8
						END IF
				        NEXT JJ
                                        RQ_NUM_FILL = SGTE_POS
                                        MAT_ELEM_LIS(IDX_BUSQ_01,ELM_FIL_FILL,RQ_NUN_FILL) = VALTOKEN
                                END IF
                        END IF
                        TOKEN = NEXTTOKEN
                NEXT
   END DEF

     DEF STRING FNC_GEN_PGO

        SWITCH_GEN_PGO = "SI"

	TOKEN = INITOK
        WHILE TOKEN <> ETXTOK
           TOKEN = NEXTTOKEN
           IF VALTOKEN = "DIVISION" AND VALTOKEN_1 = "PROCEDURE" THEN
               MODO_PROCEDURE_DIVISION = "SI"
           END IF
           IF MODO_CALL_DBNTRY = "SI" THEN
               WRT_LIN_ORIG_COMO_COMENT = "SI"
               TOKEN = NEXTTOKEN
 !!!               BUFOUT = FNC_PRINT("1 INVOCANDO DTC CON " + VALTOKEN + " MODO_CALL_DBNTRY>" + MODO_CALL_DBNTRY )

               WRT_LIN_ORIG_COMO_COMENT = "SI"
               TOKEN = NEXTTOKEN
 !!!               BUFOUT = FNC_PRINT("2 INVOCANDO DTC CON " + VALTOKEN + " MODO_CALL_DBNTRY>" + MODO_CALL_DBNTRY )

               WRT_LIN_ORIG_COMO_COMENT = "SI"
               TOKEN = NEXTTOKEN
 !!!               BUFOUT = FNC_PRINT("3 INVOCANDO DTC CON " + VALTOKEN + " MODO_CALL_DBNTRY>" + MODO_CALL_DBNTRY )

               ELM_EST_ENC = "NO"
 !!!                BUFOUT = FNC_PRINT("COMPARA VALTOKEN >> " + VALTOKEN )
               FOR RQA_IDX_RQA = 1 TO RQA_TOT_RQAS 
 !!!                     BUFOUT = FNC_PRINT("COMPARANDO VALTOKEN ==> " + VALTOKEN  + " CON " + RQA_MATR_IDN(RQA_IDX_RQA) )
                    IF RQA_MATR_IDN(RQA_IDX_RQA) = VALTOKEN THEN
                        ELM_EST_ENC = "SI"
 !!!                        BUFOUT = FNC_PRINT("ELEMENTO ENCONTRADO " + RQA_MATR_IDN (RQA_IDX_RQA) + " EN OCC = " + FNC_SYSSTR(RQA_IDX_RQA))
 !!!                         BUFOUT = FNC_PRINT("1 GENERA O_B_STR " + O_B_STR )
                        O_B_STR = FNC_SYSLEFT(O_B_STR ,P_CALL)
 !!!                         BUFOUT = FNC_PRINT("2 GENERA O_B_STR " + O_B_STR )
                        O_B_STR = O_B_STR + "PERFORM PGM-" + RQA_MATR_OCC(RQA_IDX_RQA, RQA_SIST , 1 ) + "-FIO-" + RQA_MATR_OCC(RQA_IDX_RQA, RQA_TABL , 1 ) 
                        O_B_CAPSULA = O_B_STR
                        RQA_IDX_RQA = RQA_TOT_RQAS + 1
                     END IF
               NEXT RQA_IDX_RQA

               WRT_LIN_ORIG_COMO_COMENT = "SI"
               TOKEN = NEXTTOKEN
               IF VALTOKEN = "." THEN
                    O_B_CAPSULA = O_B_CAPSULA + "."
                    WRT_LIN_ORIG_COMO_COMENT = "SI"
                    TOKEN = NEXTTOKEN
               ELSE
 !!!               BUFOUT = FNC_PRINT("4 INVOCANDO DTC CON " + VALTOKEN + " MODO_CALL_DBNTRY>" + MODO_CALL_DBNTRY )

               WRT_LIN_ORIG_COMO_COMENT = "SI"
               TOKEN = NEXTTOKEN
               IF VALTOKEN = "." THEN
                    O_B_CAPSULA = O_B_CAPSULA + "."
                    WRT_LIN_ORIG_COMO_COMENT = "SI"
                    TOKEN = NEXTTOKEN
               ELSE
 !!!                BUFOUT = FNC_PRINT("5 INVOCANDO DTC CON " + VALTOKEN + " MODO_CALL_DBNTRY>" + MODO_CALL_DBNTRY )

               TOKEN = NEXTTOKEN
 !!!                BUFOUT = FNC_PRINT("6 INVOCANDO DTC CON " + VALTOKEN + " MODO_CALL_DBNTRY>" + MODO_CALL_DBNTRY )
               IF VALTOKEN = "." THEN
                    O_B_CAPSULA = O_B_CAPSULA + "."
                    WRT_LIN_ORIG_COMO_COMENT = "SI"
                    TOKEN = NEXTTOKEN
               END IF
               END IF
               END IF
 
 !!!               BUFOUT = FNC_PRINT("PONE MODO_CALL_DBNTRY ==> NO CON VALTOKEN = " + VALTOKEN )

               MODO_CALL_DBNTRY = "NO"
 !!!                BUFOUT =            FNC_PRINT(   "G3" + O_B_CAPSULA )
               FIO_ACCI = ESCR_PGO(FIO_STAT,        O_B_CAPSULA )
               O_B_CAPSULA = ""
               PONER_CMT_CONTEXTO = "SI"

           END IF
           IF TOKEN = IDNTOK AND VALTOKEN_3 = "MOVE" AND VALTOKEN_1 = "TO" THEN
 !!!                BUFOUT = FNC_PRINT("ENTRA A BUSCAR EN MOVE TABLA O     B.D.D ")
 !!! BUSCA SI IDENTIFICADOR ES MOVE A VARIABLE DE TABLA O DBID
 !!! PARA INHIBIR LA LINEA
 !!!                  ELM_EST_ENC = "NO"
                 FOR RQA_IDX_RQA = 1 TO RQA_TOT_RQAS 
                       IF RQA_MATR_EST(RQA_IDX_RQA,RQA_TABL) = VALTOKEN OR RQA_MATR_EST(RQA_IDX_RQA,RQA_DBID) = VALTOKEN THEN
 !!!                            BUFOUT = FNC_PRINT("ENCONTRO MOVE TABLA O     B.D.D==>>> " + VALTOKEN )
 !!!                           ELM_EST_ENC = "SI"
                           RQA_IDX_RQA = RQA_TOT_RQAS + 1
                           WRT_LIN_ORIG_COMO_COMENT = "SI"
                           WRT_O_B_STR = "NO"
                        END IF
                 NEXT RQA_IDX_RQA
           ELSE
           IF TOKEN = IDNTOK AND VALTOKEN_4 = "MOVE" AND VALTOKEN_3 = "+" AND VALTOKEN_1 = "TO" THEN
 !!!               BUFOUT = FNC_PRINT("ENTRA A BUSCAR EN MOVE TABLA O     B.D.D ")
 !!! BUSCA SI IDENTIFICADOR ES MOVE A VARIABLE DE TABLA O DBID
 !!! PARA INHIBIR LA LINEA
 !!!                  ELM_EST_ENC = "NO"
                  FOR RQA_IDX_RQA = 1 TO RQA_TOT_RQAS 
                       IF RQA_MATR_EST(RQA_IDX_RQA,RQA_DBID) = VALTOKEN THEN
 !!!                           BUFOUT = FNC_PRINT("ENCONTRO MOVE A B.D.D==>>> " + VALTOKEN )
 !!!                           ELM_EST_ENC = "SI"
                           RQA_IDX_RQA = RQA_TOT_RQAS + 1
                           WRT_LIN_ORIG_COMO_COMENT = "SI"
                           WRT_O_B_STR = "NO"
                        END IF
                 NEXT RQA_IDX_RQA
           END IF
           END IF
        NEXT

   END DEF

     DEF STRING FNC_ANL_RQA

 !!! PROCESA SOLO WSS ( ES DECIR SOLO HASTA INCIO PROCEDURE DIVISION )

 !!! BUFOUT = FNC_PRINT("FUNCION IDEN_REQ BUSCANDO PROCEDURE DIVISION")
             WHILE TOKEN <> ETXTOK
                  TOKEN = NEXTTOKEN
                  IF VALTOKEN = "PROCEDURE" THEN
                      TOKEN = NEXTTOKEN
                      IF VALTOKEN = "DIVISION" THEN
                          TOKEN = NEXTTOKEN
                          IF VALTOKEN = "." THEN
                              TOKEN = ETXTOK
                          END IF
                      END IF
                  END IF

 !!! HACE BUSQUEDA SOLO PARA IDENTIFICADORES
                 IF TOKEN = IDNTOK THEN
                     HAY_REQA = "NO"
                     FOR IDX_BUSQ_01 = 1 TO RQA_TOT_RQAS
                       IF RQA_MATR_IDN(IDX_BUSQ_01) = VALTOKEN THEN
                           IDX_ENC_01 = IDX_BUSQ_01
                           IDX_BUSQ_01 = RQA_TOT_RQAS + 1
                           HAY_REQA = "SI"
                       END IF
                     NEXT IDX_BUSQ_01

                     IF HAY_REQA = "SI" THEN
                         BUFOUT = FNC_ANL_LIN_RQA_WSS
                     END IF
                 END IF
             NEXT

 !!! BUFOUT = FNC_PRINT("TERMINO ANALISIS WSS AHO ANALIZA PROCEDURE ")
             TOKEN = INITOK
             WHILE TOKEN <> ETXTOK
                  TOKEN = NEXTTOKEN
                  IF VALTOKEN = "MOVE" THEN
 !!!                      BUFOUT = FNC_PRINT("DETECTO MOVE ")
                      MOVE_01 = ""
                      MOVE_02 = ""
                      MOVE_03 = ""
                      TOKEN = NEXTTOKEN

                      IF VALTOKEN = "+" THEN
                          TOKEN = NEXTTOKEN
                          MOVE_01 = VALTOKEN
                      ELSE
                          IF TOKEN = STRTOK THEN
                               MOVE_01 = STRTOKEN
                          ELSE
                               MOVE_01 = VALTOKEN
                          END IF
                      END IF
 !!!                      BUFOUT = FNC_PRINT("MOVE_01 " + VALTOKEN )

                      TOKEN = NEXTTOKEN
                      IF VALTOKEN = "TO" THEN
                           TOKEN = NEXTTOKEN
                           RQA_STR_ADD_OCC = VALTOKEN
 !!!                           BUFOUT = FNC_PRINT("RQA_STR_ADD_OCC " + VALTOKEN )
                           ACCION = FNC_ADD_OCC_MOVE
                           IF ELM_EST_ENC = "SI" THEN
                               ACCION = PUT_OCC
                           END IF
                      END IF
                          
                      END IF
             NEXT
   END DEF


   DEF INTEGER INIC_IALI

        PRIMERA_LECTURA = "SI"
        MODO_WORKING_STORAGE_SECTION = "NO"
        MODO_ENTRY_DBMSCBL = "NO"
        DTC_VEC_STAT_NUM(01) = "00"
        DTC_VEC_STAT_NUM(02) = "  "
        DTC_VEC_STAT_NUM(03) = "10"
        DTC_VEC_STAT_NUM(04) = "14"

        DTC_VEC_STAT_ALF(01) = "FIO-STAT-OKS"
        DTC_VEC_STAT_ALF(02) = "FIO-STAT-OKS"
        DTC_VEC_STAT_ALF(03) = "FIO-STAT-CDK"
        DTC_VEC_STAT_ALF(04) = "FIO-STAT-RFN"
        DTC_TOT_STAT = 4

        MODO_PROCEDURE_DIVISION = "NO"
        WRT_O_B_STR = "SI"
        PONER_CMT_CONTEXTO = "SI"
 !!! ==>> DT2_TOT_EST
 !!! INIALIZA VECTOR PARA DOCUMENTACION
        DC1_VEC_DOC(RQA_CMND) = " CMND "
        DC1_VEC_DOC(RQA_TABL) = " TABL "
        DC1_VEC_DOC(RQA_IKEY) = " IKEY "
        DC1_VEC_DOC(RQA_FKEY) = " FKEY "
        DC1_VEC_DOC(RQA_STAT) = " STAT "
        DC1_VEC_DOC(RQA_RSV1) = " RSV1 "
        DC1_VEC_DOC(RQA_DBID) = " DBID "
        DC1_VEC_DOC(RQA_SIST) = " SIST "
        DC1_VEC_DOC(RQA_RCID) = " RCID "
        DC1_VEC_DOC(RQA_RSV2) = " RSV2 "
        DC1_VEC_DOC(RQA_ELIS) = " ELIS "
        DC1_VEC_DOC(RQA_BUFF) = " BUFF "

 !!! INIALIZA VECTOR CON COMANDOS FIO
        DT2_CMND_FIO(001) = "FIO-GET-KEY"
        DT2_CMND_FIO(002) = "FIO-GET-KEY"
        DT2_CMND_FIO(003) = "FIO-GET-NXT"
        DT2_CMND_FIO(004) = "FIO-GET-NLS"
        DT2_CMND_FIO(005) = "FIO-PUT"
        DT2_CMND_FIO(006) = "FIO-DEL"
        DT2_CMND_FIO(007) = "FIO-GETIT"
        DT2_CMND_FIO(008) = "FIO-GSETL"
        DT2_CMND_FIO(009) = "FIO-LOCX"
        DT2_CMND_FIO(010) = "FIO-RDUKG"
        DT2_CMND_FIO(011) = "FIO-GET-KEY-UPD"
        DT2_CMND_FIO(012) = "FIO-GET-KEY-UPD"
        DT2_CMND_FIO(013) = "FIO-REDKG"
        DT2_CMND_FIO(014) = "FIO-ULK-REG"
        DT2_CMND_FIO(015) = "FIO-MOD"

 !!! INIALIZA VECTOR CON COMANDOS DTC
        DT2_CMND_DTC(001) = "REDKY"
        DT2_CMND_DTC(002) = "REDKX"
        DT2_CMND_DTC(003) = "GETNX"
        DT2_CMND_DTC(004) = "XXXX"
        DT2_CMND_DTC(005) = "ADDIT"
        DT2_CMND_DTC(006) = "DELET"
        DT2_CMND_DTC(007) = "GETIT"
        DT2_CMND_DTC(008) = "GSETL"
        DT2_CMND_DTC(009) = "LOCKX"
        DT2_CMND_DTC(010) = "RDUKG"
        DT2_CMND_DTC(011) = "RDUKY"
        DT2_CMND_DTC(012) = "RDUKX"
        DT2_CMND_DTC(013) = "REDKG"
        DT2_CMND_DTC(014) = "RELES"
        DT2_CMND_DTC(015) = "UPDAT"
 
        DT2_TOT_CMND = 15

        VSN_CPT_ALF = " VERSION 1.1.0 Noviembre 2001"
        NIV_PIC(NIV_01) = "01  "
        NIV_PIC(NIV_03) = "03  "
        NIV_PIC(NIV_05) = "05  "
        NIV_PIC(NIV_07) = "07  "
        NIV_PIC(NIV_09) = "09  "
        NIV_PIC(NIV_11) = "11  "

        NIV_SEP(NIV_01) = "           "
        NIV_SEP(NIV_03) = "               "
        NIV_SEP(NIV_05) = "            "
        NIV_SEP(NIV_07) = "         "
        NIV_SEP(NIV_09) = "      "
        NIV_SEP(10)     = "     "
        NIV_SEP(11)     = "         "
        NIV_SEP(12)     = "             "
        NIV_SEP(13)     = "                 "
        NIV_SEP(14)     = "                     "

        NIV_MRG(NIV_00) = MG_0
        NIV_MRG(NIV_01) = MG_8
        NIV_MRG(NIV_03) = MG_12
        NIV_MRG(NIV_05) = MG_16
        NIV_MRG(NIV_07) = MG_20
        NIV_MRG(NIV_09) = MG_24
        NIV_MRG(NIV_11) = MG_28

        C_FILE_MTX = 1
        C_FILE_DC1 = 2
        C_FILE_PGO = 3
        C_FILE_DCG = 4
        C_FILE_WS1 = 5
        C_FILE_WS2 = 6
        C_FILE_WS3 = 7
        C_FILE_PI1 = 8
        C_FILE_DFI = 9
        C_FILE_DFO = 10
        C_FILE_VBC = 11
        C_FILE_FMT = 12
        FST_WSS = NO
        V_M(MG_0)  = ""
        V_M(MG_7)  = "      *"
        V_M(MG_8)  = "       "
        V_M(MG_12) = "           "
        V_M(MG_16) = "               "
        V_M(MG_20) = "                   "
        V_M(MG_24) = "                       "
        V_M(MG_28) = "                           "
        O_L  = FNC_SYSCHR(13) + FNC_SYSCHR(10)
        P_P = 1
        P_Q = 1
	RQ_NUM_COL = 1
        
 !!!    ($ MTX$DLP = "S") ==> DESPLIEGA LINEAS LEIDAS DE {FIL}.MTX
         WSS_DLP = FNC_SYS_LIB_GET_SYMBOL("DT2$DLP")
         WSS_USN = FNC_SYS_LIB_GET_SYMBOL("GNS$USN")
 !!!    ($ MTX$DPP = "S") ==> DESPLIEGA PASOS DE GENERACION   
        WSS_DPP= FNC_SYS_LIB_GET_SYMBOL("MTX$DPP")

 !!!    ($ MTX$DFI = "S") ==> GENERA ARCHIVO DFI
        WSS_DFI = FNC_SYS_LIB_GET_SYMBOL("MTX$DFI")

 !!!    ($ MTX$DFO = "S") ==> GENERA ARCHIVO DFO
        WSS_GENDFO = FNC_SYS_LIB_GET_SYMBOL("MTX$DFO")

         RPT_GLS_PRY = FNC_SYS_LIB_GET_SYMBOL("GNS$PRY")
         EXTERNO = FNC_SYS_LIB_GET_SYMBOL("GNS$FIL")
         GNS_PATH = FNC_SYS_LIB_GET_SYMBOL("GNS$PTH")

         FILE_MTX = FNC_SYS_LIB_GET_SYMBOL("PTH")
         RPT_GLS_FOR = FNC_SYS_LIB_GET_SYMBOL("GNS$SOP")
         RPT_GLS_PAI = FNC_SYS_LIB_GET_SYMBOL("GNS$PAI")
         RPT_GLS_CLI = FNC_SYS_LIB_GET_SYMBOL("GNS$CLI")

        MAP_GLS_IDEN = FNC_SYSDATE(0%) + " " + FNC_SYSTIME(0%)
        MAP_GLS_IDEN = "      *    " + FNC_SYSEDIT(MAP_GLS_IDEN, 32)
        MAP_GLS_VBC_CPT_ALF = "      '    " + FNC_SYSEDIT(MAP_GLS_IDEN, 32)

         PASO_EJEC = FNC_SYS_LIB_GET_SYMBOL("PASO_EJEC")

 !!!        BUFOUT = FNC_PRINT("ABRIRA ARCHIVO INP" )
        FIO_ACCI = FIO_MTX_INP
 !!!        BUFOUT = FNC_PRINT("ABRIO  ARCHIVO INP" )

        FILE_FMT = EXTERNO + "MX" + "FMT.AIU"
 !!!        FIO_ACCI = FIO_FMT_PUT(FIO_STAT, MAP_GLS_IDEN)
                GNS_PATH =  "      *    " + GNS_PATH
 !!!        FIO_ACCI = FIO_FMT_PUT(FIO_STAT, GNS_PATH)
                GNS_USER$ =  "      *     USUARIO = " + WSS_USN 
 !!!        FIO_ACCI = FIO_FMT_PUT(FIO_STAT, GNS_USER$)
 !!!        FIO_ACCI = FIO_FMT_PUT(FIO_STAT, ARCH_SPA_CPT_ALF)
                ARCH_IDEN_CPT_ALF = "      *    " + FILE_FMT 
 !!!        FIO_ACCI = FIO_FMT_PUT(FIO_STAT, ARCH_IDEN_CPT_ALF + VSN_CPT_ALF)
 !!!        FIO_ACCI = FIO_FMT_PUT(FIO_STAT, ARCH_SPA_CPT_ALF)
        TPG_TOT_LEI = TPG_TOT_LEI + 1
               I_B_STR = FIO_MTX_GETNXT
        SZ_I_B = FIO_RLEN
        IF FIO_STAT <> FIO_STAT_OKS THEN
                 BUFOUT = FNC_PRINT("ARCHIVO VACIO " +  FNC_SYSSTR(FIO_STAT))
        END IF
        IF WSS_DLP = "S" THEN
                 BUFOUT = FNC_PRINT("PROC REG " + FNC_SYSSTR(TPG_TOT_LEI) + " #" + I_B_STR)
        END IF

        FILE_DC1 = EXTERNO + ".DC1"
        FILE_PGO = EXTERNO + ".PGO"
        FILE_DCG = "DTCTODB2.DCG"
        FILE_FMT = EXTERNO + ".FMT"
        FILE_WS1 = EXTERNO + ".WS1"
        FILE_WS2 = EXTERNO + ".WS2"
        FILE_WS3 = EXTERNO + ".WS3"
        FILE_PI1 = EXTERNO + ".PI1"

        FILE_VBC = EXTERNO + ".VBC"

        FILE_RN = RPT_GLS_PRY + ".AIU"
        ARCH_SPA_CPT_ALF = "      *    " 

        IF PASO_EJEC = "GEN" THEN
            FIO_ACCI = FIO_PGO_OUT
 !!!            FIO_ACCI = ESCR_PGO(FIO_STAT,MAP_GLS_IDEN)
 !!!            FIO_ACCI = ESCR_PGO(FIO_STAT,ARCH_SPA_CPT_ALF)
 !!!            FIO_ACCI = ESCR_PGO(FIO_STAT,ARCH_IDEN_CPT_ALF + VSN_CPT_ALF)
 !!!            FIO_ACCI = ESCR_PGO(FIO_STAT,ARCH_SPA_CPT_ALF)
        END IF


 !!!         FIO_ACCI = FIO_WS1_OUT
 !!!        FIO_ACCI = FIO_WS1_PUT(FIO_STAT,MAP_GLS_IDEN)
 !!!        FIO_ACCI = FIO_WS1_PUT(FIO_STAT,GNS_PATH)
 !!!        FIO_ACCI = FIO_WS1_PUT(FIO_STAT,GNS_USER$)
 !!!        FIO_ACCI = FIO_WS1_PUT(FIO_STAT,ARCH_SPA_CPT_ALF)
 !!!         ARCH_IDEN_CPT_ALF = "      *    " + FILE_WS1 
 !!!        FIO_ACCI = FIO_WS1_PUT(FIO_STAT,ARCH_IDEN_CPT_ALF + VSN_CPT_ALF)
 !!!        FIO_ACCI = FIO_WS1_PUT(FIO_STAT,ARCH_SPA_CPT_ALF)
 
 !!!        FIO_ACCI = FIO_WS3_OUT
 !!!        FIO_ACCI = FIO_WS3_PUT(FIO_STAT,MAP_GLS_IDEN)
 !!!        FIO_ACCI = FIO_WS3_PUT(FIO_STAT,GNS_PATH)
 !!!        FIO_ACCI = FIO_WS3_PUT(FIO_STAT,GNS_USER$)
 !!!        FIO_ACCI = FIO_WS3_PUT(FIO_STAT,ARCH_SPA_CPT_ALF )
 !!!         ARCH_IDEN_CPT_ALF = "      *    " + FILE_WS3 
 !!!        FIO_ACCI = FIO_WS3_PUT(FIO_STAT,ARCH_IDEN_CPT_ALF + VSN_CPT_ALF)
 !!!        FIO_ACCI = FIO_WS3_PUT(FIO_STAT,ARCH_SPA_CPT_ALF )

 !!!         FIO_ACCI = FIO_WS2_OUT
 !!!        FIO_ACCI = FIO_WS2_PUT(FIO_STAT,MAP_GLS_IDEN)
 !!!        FIO_ACCI = FIO_WS2_PUT(FIO_STAT,GNS_PATH)
 !!!        FIO_ACCI = FIO_WS2_PUT(FIO_STAT,GNS_USER$)
 !!!        FIO_ACCI = FIO_WS2_PUT(FIO_STAT,ARCH_SPA_CPT_ALF )
 !!!         ARCH_IDEN_CPT_ALF = "      *    " + FILE_WS2 
 !!!        FIO_ACCI = FIO_WS2_PUT(FIO_STAT,ARCH_IDEN_CPT_ALF + VSN_CPT_ALF )
 !!!        FIO_ACCI = FIO_WS2_PUT(FIO_STAT,ARCH_SPA_CPT_ALF )

 !!!         FIO_ACCI = FIO_PI1_OUT
 !!!        FIO_ACCI = FIO_PI1_PUT(FIO_STAT,MAP_GLS_IDEN)
 !!!        FIO_ACCI = FIO_PI1_PUT(FIO_STAT,GNS_PATH)
 !!!        FIO_ACCI = FIO_PI1_PUT(FIO_STAT,GNS_USER$)
 !!!        FIO_ACCI = FIO_PI1_PUT(FIO_STAT,ARCH_SPA_CPT_ALF)
 !!!         ARCH_IDEN_CPT_ALF = "      *    " + FILE_PI1
 !!!        FIO_ACCI = FIO_PI1_PUT(FIO_STAT,ARCH_IDEN_CPT_ALF + VSN_CPT_ALF)
 !!!        FIO_ACCI = FIO_PI1_PUT(FIO_STAT,ARCH_SPA_CPT_ALF)

 !!!        FIO_ACCI = FIO_VBC_OUT
        BB = 1
        LL = 1

        DT_CPT_ALF  = FNC_SYSDATE(0%)
        HRS_CPT_ALF = FNC_SYSTIME(32%)

        MNT_CPT_ALF = FNC_SYSMID(HRS_CPT_ALF,4,2)
        HRS_CPT_ALF = FNC_SYSMID(HRS_CPT_ALF,1,2)
        HORA_CPT_ALF = HRS_CPT_ALF + MNT_CPT_ALF + "00"
        DIA_CPT_ALF = FNC_SYSMID(DT_CPT_ALF,1,2)
        MES_CPT_ALF = FNC_SYSMID(DT_CPT_ALF,4,3)
        ANO_CPT_ALF = FNC_SYSMID(DT_CPT_ALF,8,4)

        MES_CPT_ALF = FNC_SYSEDIT(MES_CPT_ALF,CTE32_PORC)

        FOR O_CPT_NUM = 1 TO 12
                IF V_MES(O_CPT_NUM,1) = MES_CPT_ALF THEN
                        MES_CPT_ALF = V_MES(O_CPT_NUM,2)
                        O_CPT_NUM = 13
                END IF
        NEXT O_CPT_NUM 
        TIME_STP_CPT_ALF = "19" + ANO_CPT_ALF + MES_CPT_ALF + DIA_CPT_ALF + HORA_CPT_ALF

   END DEF

 !!! IDENTIFICA LAS REQUEST AREA INVOLUCRADAS
 !!! 
   DEF INTEGER FNC_ADD_RQA

   DT2_HAY_RQA = "NO" 

   FOR RQA_MATR_IDN_IDX = 1 TO RQA_TOT_RQAS
      IF VALTOKEN = RQA_MATR_IDN(RQA_MATR_IDN_IDX) THEN
          DT2_HAY_RQA = "SI"
          RQA_PTR_RQA = RQA_MATR_IDN_IDX 
      END IF
   NEXT RQA_MATR_IDN_IDX

   IF DT2_HAY_RQA = "NO" THEN
        RQA_TOT_RQAS = RQA_TOT_RQAS + 1
        RQA_PTR_RQA = RQA_TOT_RQAS 
        RQA_MATR_IDN(RQA_PTR_RQA) = VALTOKEN
   END IF

   END DEF

   DEF INTEGER ADD_ELEM

	DT2_HAY_ELEM = "NO" 

	FOR DT2_ELEM_LIS_IDX = 1 TO RQA_TOT_ELEM
             IF VALTOKEN = DT2_ELEM_LIST(DT2_ELEM_LIS_IDX) THEN
                  DT2_HAY_ELEM = "SI"
              END IF
        NEXT DT2_ELEM_LIS_IDX
	
	IF DT2_HAY_ELEM = "NO" THEN
		RQA_TOT_ELEM= RQA_TOT_ELEM + 1
	        DT2_ELEM_LIST(RQA_TOT_ELEM) = VALTOKEN
	END IF

 !!! PONE EN LA RQA CORRESPONDIENTE QUE ELEMENT ASOCIADO USA EN EL CALL

               ELM_OCC_ENC = "NO"
               FOR RQA_IDX_OCC = 1 TO RQA_MATR_TOC(RQA_PTR_RQA  , RQA_ELIS)
                   IF RQA_MATR_OCC(RQA_PTR_RQA  , RQA_ELIS , RQA_IDX_OCC) = ELEM_STR THEN
 !!!                      BUFOUT = FNC_PRINT("ENCONTRO ELEMENTO " + RQA_MATR_OCC(RQA_PTR_RQA  , RQA_ELIS , RQA_IDX_OCC) + "*" + ELEM_STR )
 !!!                      BUFOUT = FNC_PRINT("EN OCURRENCIA " + FNC_SYSSTR(RQA_IDX_OCC ) )
                     ELM_OCC_ENC = "SI"
                     RQA_IDX_OCC = RQA_MATR_TOC(RQA_PTR_RQA  ,RQA_ELIS) + 1
                   END IF
               NEXT RQA_IDX_OCC 
               IF ELM_OCC_ENC = "NO" THEN
                     RQA_MATR_TOC(RQA_PTR_RQA  ,RQA_ELIS) = RQA_MATR_TOC(RQA_PTR_RQA  , RQA_ELIS) + 1
                     RQA_MATR_OCC(RQA_PTR_RQA  ,RQA_ELIS, RQA_MATR_TOC(RQA_PTR_RQA  , RQA_ELIS)  ) = ELEM_STR
               END IF

   END DEF

 !!! IDENTIFICA LAS BUFFER DE REGISTROS INVOLUCRADOS
 !!! 
   DEF INTEGER FNC_ADD_BDR

 !!! PONE EN LA RQA CORRESPONDIENTE QUE BDR ASOCIADO USA EN EL CALL

               ELM_OCC_ENC = "NO"
               FOR RQA_IDX_OCC = 1 TO RQA_MATR_TOC(RQA_PTR_RQA  , RQA_BUFF)
                   IF RQA_MATR_OCC(RQA_PTR_RQA  , RQA_BUFF , RQA_IDX_OCC) = VALTOKEN THEN
 !!!                        BUFOUT = FNC_PRINT("ENCONTRO ELEMENTO " + RQA_MATR_OCC(RQA_PTR_RQA  , RQA_BUFF , RQA_IDX_OCC) + "*" + ELEM_STR )
 !!!                        BUFOUT = FNC_PRINT("EN OCURRENCIA " + FNC_SYSSTR(RQA_IDX_OCC ) )
                       ELM_OCC_ENC = "SI"
                       RQA_IDX_OCC = RQA_MATR_TOC(RQA_PTR_RQA  ,RQA_BUFF) + 1
                   END IF
               NEXT RQA_IDX_OCC 
               IF ELM_OCC_ENC = "NO" THEN
                     RQA_MATR_TOC(RQA_PTR_RQA  ,RQA_BUFF) = RQA_MATR_TOC(RQA_PTR_RQA  , RQA_BUFF) + 1
                     RQA_MATR_OCC(RQA_PTR_RQA  ,RQA_BUFF, RQA_MATR_TOC(RQA_PTR_RQA  , RQA_BUFF)  ) = VALTOKEN
               END IF
   END DEF

    DEF INTEGER FNC_LEE_DCG

 !!!        BUFOUT = FNC_PRINT("ABRIRA ARCHIVO DCG ")
        FIO_ACCI = FIO_DCG_INP
 !!!        BUFOUT = FNC_PRINT("ABRIO ARCHIVO DCG ")
 CIC_DCG:
 !!!         BUFOUT = FNC_PRINT("LEERA ARCHIVO DCG")
        I_B_STR = FIO_DCG_GETNXT
 !!!         BUFOUT = FNC_PRINT("LEYO DCG")
        IF FIO_STAT <> FIO_STAT_OKS THEN
             GO TO FIN_DCG
        END IF
        
        IF FNC_SYSMID(I_B_STR,1,1) = "!" THEN
             GO TO CIC_DCG
        END IF
        IF FNC_SYSMID(I_B_STR,1,7) = "ID_BASE" THEN
            TOT_ID_BASE = TOT_ID_BASE + 1
            DT2_ID_BASE_DTC(TOT_ID_BASE) = FNC_SYSMID(I_B_STR,09,3)
            DT2_ID_BASE_SIS(TOT_ID_BASE) = FNC_SYSMID(I_B_STR,17,3)

                FOR RQA_PRT_01 = 1 TO RQA_TOT_RQAS
                  FOR RQA_PRT_03 = 1 TO RQA_MATR_TOC(RQA_PRT_01, RQA_DBID)
                       IF DT2_ID_BASE_DTC(TOT_ID_BASE) = RQA_MATR_OCC(RQA_PRT_01, RQA_DBID, RQA_PRT_03 ) THEN
                                     RQA_MATR_TOC(RQA_PRT_01, RQA_SIST) = RQA_MATR_TOC(RQA_PRT_01, RQA_SIST) + 1
                                     RQA_MATR_OCC(RQA_PRT_01, RQA_SIST, RQA_PRT_03 ) = DT2_ID_BASE_SIS(TOT_ID_BASE)
                                     RQA_PRT_03 = RQA_MATR_TOC(RQA_PRT_01, RQA_DBID) + 1
                       END IF
                  NEXT RQA_PRT_03
                NEXT RQA_PRT_01 

        END IF
        IF FNC_SYSMID(I_B_STR,1,7) = "ID_TABL" THEN
            ID_TABL = FNC_SYSMID(I_B_STR,11,3)
            
            I_B_STR = FIO_DCG_GETNXT
            IF FNC_SYSMID(I_B_STR,1,8) = "FIN_TABL" THEN
                GO TO CIC_DCG
            END IF
            IF FNC_SYSMID(I_B_STR,1,6) = "ID_KEY" THEN
                I_KEY = FNC_SYSMID(I_B_STR,8,5)
                F_KEY = FNC_SYSRIGHT(I_B_STR,16)
 !!!                BUFOUT = FNC_PRINT("llave dtc " + I_KEY )
 !!!                BUFOUT = FNC_PRINT("llave FIO " + F_KEY )
                FOR RQA_PRT_01 = 1 TO RQA_TOT_RQAS
 !!!                  BUFOUT = FNC_PRINT("llave FIO REVISANDO RQA " + FNC_SYSSTR(RQA_PRT_01) )
 !!!                  BUFOUT = FNC_PRINT("llave FIO HAY TOT ELEMENTOS DE LLAVE " + FNC_SYSSTR(RQA_MATR_TOC(RQA_PRT_01, RQA_IKEY)) )
                  FOR RQA_PRT_03 = 1 TO RQA_MATR_TOC(RQA_PRT_01, RQA_IKEY)
 !!!                       BUFOUT = FNC_PRINT("llave FIO COMPARANDO-1 " + I_KEY + "+" + RQA_MATR_OCC(RQA_PRT_01, RQA_IKEY, RQA_PRT_03 ) )
 !!!                       BUFOUT = FNC_PRINT("llave FIO COMPARANDO-2 " + ID_TABL + "+" + RQA_MATR_OCC(RQA_PRT_01, RQA_TABL, RQA_PRT_03 ) )
                       IF I_KEY = RQA_MATR_OCC(RQA_PRT_01, RQA_IKEY, RQA_PRT_03 ) AND ID_TABL = RQA_MATR_OCC(RQA_PRT_01, RQA_TABL, RQA_PRT_03 ) THEN
 !!!                                     BUFOUT = FNC_PRINT("llave FIO ASIGNANDO " + F_KEY )
                                     RQA_MATR_OCC(RQA_PRT_01, RQA_FKEY, RQA_PRT_03 ) = F_KEY
                                     RQA_MATR_TOC(RQA_PRT_01, RQA_FKEY) = RQA_MATR_TOC(RQA_PRT_01, RQA_FKEY) + 1
                                     RQA_PRT_03 = RQA_MATR_TOC(RQA_PRT_01, RQA_IKEY) + 1
                       END IF
                  NEXT RQA_PRT_03
                NEXT RQA_PRT_01 
            END IF
        END IF

        GO TO CIC_DCG
 FIN_DCG:
        FIO_ACCI = FIO_DCG_CLO

   END DEF

 !!! LEE ARCHIVO DCG PARA RECUPERAR EQUIVALENCIA DE REGISTROS
    DEF INTEGER FNC_LEE_REG

 !!!        BUFOUT = FNC_PRINT("ABRIRA ARCHIVO DCG LEE REG ")
        FIO_ACCI = FIO_DCG_INP
 !!!        BUFOUT = FNC_PRINT("ABRIO ARCHIVO DCG LEE REG")
 CIC_LEE_REG:
 !!!        BUFOUT = FNC_PRINT("LEERA ARCHIVO DCG LEE_REG")
        I_B_STR = FIO_DCG_GETNXT
 !!!        BUFOUT = FNC_PRINT("LEYO DCG LEE_REG")
        IF FIO_STAT <> FIO_STAT_OKS THEN
             GO TO FIN_LEE_REG
        END IF
        
        IF FNC_SYSMID(I_B_STR,1,1) = "!" THEN
             GO TO CIC_LEE_REG
        END IF
        IF FNC_SYSMID(I_B_STR,1,7) = "ID_BASE" THEN
            ELM_OCC_ENC = "NO"
            ID_SIST = FNC_SYSMID(I_B_STR,17,3)
        END IF
        IF FNC_SYSMID(I_B_STR,1,7) = "ID_TABL" THEN
            ID_TABL = FNC_SYSMID(I_B_STR,11,3)
            DT2_PTR_REG_FLD = 0

 !!!            BUFOUT = FNC_PRINT("ARGUMENTO BUSQUEDA ID_REG PARA SIS-TAB+" + ID_SIST + "+" + ID_TABL + ">>" + FNC_SYSSTR(RQA_TOT_RQAS ))
            ELM_OCC_ENC = "NO"
            FOR RQA_PRT_01 = 1 TO RQA_TOT_RQAS
 !!!                  BUFOUT = FNC_PRINT("TOTAL ELEMENTOS A COMPARAR " + FNC_SYSSTR (RQA_MATR_TOC(RQA_PRT_01, RQA_TABL) ) )
                  FOR RQA_PRT_03 = 1 TO RQA_MATR_TOC(RQA_PRT_01, RQA_TABL)
 !!!                      BUFOUT = FNC_PRINT("COMPARANDO CON " + RQA_MATR_OCC(RQA_PRT_01, RQA_SIST, RQA_PRT_03 ) + "+" + RQA_MATR_OCC(RQA_PRT_01, RQA_TABL, RQA_PRT_03 ) + "+" )
                       IF ID_SIST = RQA_MATR_OCC(RQA_PRT_01, RQA_SIST, RQA_PRT_03 ) AND ID_TABL = RQA_MATR_OCC(RQA_PRT_01, RQA_TABL, RQA_PRT_03 ) THEN
                             ELM_OCC_ENC = "SI"
                             DT2_PTR_REG_REG = RQA_PRT_01 
 !!!                             BUFOUT = FNC_PRINT("ENCONTRO SIS-TAB EN CORR " + FNC_SYSSTR(DT2_PTR_REG_REG ) )
                             RQA_PRT_01 = RQA_TOT_RQAS + 1
                       END IF
                  NEXT RQA_PRT_03
            NEXT RQA_PRT_01 
        END IF

        IF FNC_SYSMID(I_B_STR,1,6) = "ID_REG"  THEN
 !!!            BUFOUT = FNC_PRINT( "ENCONTRO ID_REG " )
            IF ELM_OCC_ENC = "SI" THEN
                DT2_PTR_REG_FLD = DT2_PTR_REG_FLD + 1
                REG_MATR_TOC( DT2_PTR_REG_REG ) = DT2_PTR_REG_FLD
                REG_MATR_OCC( DT2_PTR_REG_REG, DT2_PTR_REG_FLD, DT2_CTE_FLD_DTC ) = FNC_SYSMID(I_B_STR,8,36)
                REG_MATR_OCC( DT2_PTR_REG_REG, DT2_PTR_REG_FLD, DT2_CTE_FLD_DTC ) = FNC_SYSEDIT( REG_MATR_OCC( DT2_PTR_REG_REG, DT2_PTR_REG_FLD, DT2_CTE_FLD_DTC ) , 2 )
 !!!                BUFOUT = FNC_PRINT("CAMPO RQA COR >" + RQA_MATR_IDN( DT2_PTR_REG_REG ) + "RQA COR>> " + FNC_SYSSTR(DT2_PTR_REG_REG ) + " CAMPO COR " + FNC_SYSSTR(  DT2_PTR_REG_FLD ) + "<" )
 !!!                BUFOUT = FNC_PRINT("CAMPO DTC>" + REG_MATR_OCC( DT2_PTR_REG_REG, DT2_PTR_REG_FLD, DT2_CTE_FLD_DTC ) + "<" )

                REG_MATR_OCC( DT2_PTR_REG_REG, DT2_PTR_REG_FLD, DT2_CTE_FLD_FIO ) = FNC_SYSRIGHT(I_B_STR,46)
                REG_MATR_OCC( DT2_PTR_REG_REG, DT2_PTR_REG_FLD, DT2_CTE_FLD_FIO ) = FNC_SYSEDIT( REG_MATR_OCC( DT2_PTR_REG_REG, DT2_PTR_REG_FLD, DT2_CTE_FLD_FIO ) , 2  )
 !!!                BUFOUT = FNC_PRINT("CAMPO FIO>" + REG_MATR_OCC( DT2_PTR_REG_REG, DT2_PTR_REG_FLD, DT2_CTE_FLD_FIO ) + "<" )
            ELSE
 !!!                    BUFOUT = FNC_PRINT("NO BUSCA POR REG NO APARECE EN PROGEMA >" + FNC_SYSMID(I_B_STR,8,36)+ "<" )
            END IF
        END IF

        IF FNC_SYSMID(I_B_STR,1,7) = "FIN_REG"  THEN
 !!!            BUFOUT = FNC_PRINT( "ENCONTRO FIN_REG " )
                RQA_MATR_TDCXREG( DT2_PTR_REG_REG ) = DT2_PTR_REG_FLD
                DT2_PTR_REG_FLD = 0
        END IF

        GO TO CIC_LEE_REG
 FIN_LEE_REG:
        FIO_ACCI = FIO_DCG_CLO

   END DEF


    DEF INTEGER FNC_GEN_DC1
             WHILE TOKEN <> ETXTOK
                    TOKEN = NEXTTOKEN

 !!! CALL 'DBNTRY' USING UIB REQUEST-AREA-DCP E-DCP-01  ELEMENT-LIST-DCP.
                 IF VALTOKEN = "CALL" THEN
 !!!            BUFOUT = FNC_PRINT("DETECTO CALL")
 !!!            BUFOUT = FNC_PRINT("POSIBLE DBNTRY " + VALTOKEN )
                    TOKEN = NEXTTOKEN
                    IF TOKEN = STRTOK AND STRTOKEN = "DBNTRY" THEN
 !!!                 BUFOUT = FNC_PRINT(" POSIBLE USING")
                         TOKEN = NEXTTOKEN
                         IF VALTOKEN = "USING" THEN
 !!!                        BUFOUT = FNC_PRINT("POSIBLE UIB")
                                TOKEN = NEXTTOKEN
 !!!                        BUFOUT = FNC_PRINT("POSIBLE RQA ")
                                TOKEN = NEXTTOKEN
 !!!                        BUFOUT = FNC_PRINT("REQA " + VALTOKEN)
                                ACCION = FNC_ADD_RQA
 !!! EN RQA_PTR_RQA  QUEDA EL INDICE DONDE PUSO LA RQA
 !!!                        BUFOUT = FNC_PRINT("POSIBLE REGISTRO")
                                TOKEN = NEXTTOKEN
                                IF VALTOKEN <> "." THEN
                                     ACCION = FNC_ADD_BDR

                                     TOKEN = NEXTTOKEN
 !!!                                 BUFOUT = FNC_PRINT("ELEM ==>> " + VALTOKEN)
                                     ELEM_STR = VALTOKEN
                                     ACCION = ADD_ELEM
                               END IF
                            END IF
                     END IF
                 END IF
             NEXT
 !!!              BUFOUT = FNC_PRINT("CERRARA MTX 1 ")
              FIO_ACCI = FIO_MTX_CLOSE
 !!!              BUFOUT = FNC_PRINT("CERRO MTX 1")
              FIO_ACCI = FIO_MTX_INP
 !!!              BUFOUT = FNC_PRINT("ABRIO MTX NUEVAMENTE 2")

              TOKEN = INITOK
              BUFOUT = FNC_ANL_RQA
 !!!              BUFOUT = FNC_PRINT("CERRARA MTX 2 ")
              FIO_ACCI = FIO_MTX_CLOSE
 !!!              BUFOUT = FNC_PRINT("CERRO MTX 2")

             ACCION = FNC_LEE_DCG

            FIO_ACCI = FIO_DC1_OUT

            FIO_ACCI = FIO_DC1_PUT(FIO_STAT,MAP_GLS_IDEN)
            FIO_ACCI = FIO_DC1_PUT(FIO_STAT,GNS_PATH)
            FIO_ACCI = FIO_DC1_PUT(FIO_STAT,GNS_USER$)
            FIO_ACCI = FIO_DC1_PUT(FIO_STAT,ARCH_SPA_CPT_ALF)
            ARCH_IDEN_CPT_ALF = "      *    " + FILE_DC1
            FIO_ACCI = FIO_DC1_PUT(FIO_STAT,ARCH_IDEN_CPT_ALF + VSN_CPT_ALF)
            FIO_ACCI = FIO_DC1_PUT(FIO_STAT,ARCH_SPA_CPT_ALF)


 !!! BUFOUT = FNC_PRINT("TOTAL DE RQAS ==>> " + FNC_SYSSTR(RQA_TOT_RQAS) )
             FOR RQA_PRT_01 = 1 TO RQA_TOT_RQAS
                PRT_DC1_RQA = "ID_RQA = " + RQA_MATR_IDN(RQA_PRT_01)
                FIO_ACCI = FIO_DC1_PUT(FIO_STAT,PRT_DC1_RQA)

 !!!        BUFOUT = FNC_PRINT("  RQA ==>> " + FNC_SYSSTR(RQA_PRT_01) + " " + RQA_MATR_IDN(RQA_PRT_01) )
 !!!        BUFOUT = FNC_PRINT("  RQA ==>> " + " CON IDENTIFICADORES " )

                FOR RQA_PRT_02 = 1 TO DT2_TOT_EST
                     PRT_DC1_ELM = "ID_ELM = " + DC1_VEC_DOC(RQA_PRT_02) + " " +  FNC_SYSFORMAT(RQA_MATR_TOC(RQA_PRT_01, RQA_PRT_02),"##") + " " + FG_BAS_PADDING(RQA_MATR_EST(RQA_PRT_01,RQA_PRT_02) , 24, " ", "D")
                     PRT_DC1_OCC = ""
 !!!             BUFOUT = FNC_PRINT("    ELEMENTO ==>> " + FNC_SYSSTR(RQA_PRT_02) + "  " + RQA_MATR_EST(RQA_PRT_01, RQA_PRT_02 ) )
                     FOR RQA_PRT_03 = 1 TO RQA_MATR_TOC(RQA_PRT_01, RQA_PRT_02)
 !!!                 BUFOUT = FNC_PRINT("      OCURRENCIA ==>> " + FNC_SYSSTR(RQA_PRT_03) + "  " + RQA_MATR_OCC(RQA_PRT_01, RQA_PRT_02, RQA_PRT_03 ) )
                         PRT_DC1_OCC_AUX = RQA_MATR_OCC(RQA_PRT_01, RQA_PRT_02, RQA_PRT_03 ) 
                         PRT_DC1_OCC_AUX = FG_BAS_PADDING(PRT_DC1_OCC_AUX , 24, " ", "D")

                         PRT_DC1_OCC = PRT_DC1_OCC + PRT_DC1_OCC_AUX
                    
                     NEXT RQA_PRT_03
                     PRT_DC1_ELM = PRT_DC1_ELM + PRT_DC1_OCC
                     FIO_ACCI = FIO_DC1_PUT(FIO_STAT,PRT_DC1_ELM)
                NEXT RQA_PRT_02

            NEXT RQA_PRT_01 
	
 !!!            BUFOUT = FNC_PRINT("CERRARA DC1 1 ")
            FIO_ACCI = FIO_DC1_CLOSE
 !!!            BUFOUT = FNC_PRINT("CERRO DC1 1")
   END DEF

    DEF INTEGER FNC_LEE_DC1
             FIO_ACCI = FIO_DC1_INP

             RQA_TOT_RQAS = 0
             RQA_PRT_01 = 0
             RQA_PRT_02 = 1
             RQA_PRT_03 = 1
 CIC_LEE_DC1:
             I_B_STR = FIO_DC1_GETNXT
 !!!             BUFOUT = FNC_PRINT("DC1 LEIDO " + I_B_STR )

             IF FNC_SYSMID(I_B_STR , 7 , 1 ) = "*" THEN
                  GO TO CIC_LEE_DC1
             END IF
             IF FNC_SYSLEFT(I_B_STR , 8 ) = "ID_RQA =" THEN
                  RQA_TOT_RQAS = RQA_TOT_RQAS + 1
 !!!                  BUFOUT = FNC_PRINT("DC1 DETECTO RQA>> " + FNC_SYSSTR( RQA_TOT_RQAS ) )
                  RQA_PRT_01 = RQA_PRT_01 + 1
                  RQA_PRT_02 = 0
                  RQA_MATR_IDN(RQA_PRT_01) = FNC_SYSRIGHT(I_B_STR, 10) 
 !!!                  BUFOUT = FNC_PRINT("REQUEST AREA NO DEPURADA +" + RQA_MATR_IDN(RQA_PRT_01) + "+" )
                  RQA_MATR_IDN(RQA_PRT_01) = FNC_SYSEDIT(RQA_MATR_IDN(RQA_PRT_01) ,2)
 !!!                  BUFOUT = FNC_PRINT("REQUEST AREA    DEPURADA +" + RQA_MATR_IDN(RQA_PRT_01) + "+" )
                  GO TO CIC_LEE_DC1
             END IF

             IF FNC_SYSLEFT(I_B_STR , 8 ) = "ID_ELM =" THEN
                  RQA_PRT_02 = RQA_PRT_02 + 1

                  TOT_OCC_STR = FNC_SYSMID(I_B_STR, 17, 03 ) 
                  TOT_OCC_STR = FNC_SYSEDIT( TOT_OCC_STR , 2 ) 
 !!!                  BUFOUT = FNC_PRINT("TOTAL DE OCURRENCIAS +" + TOT_OCC_STR + "+" )
                  RQA_MATR_TOC(RQA_PRT_01, RQA_PRT_02) = FNC_SYSVAL( TOT_OCC_STR  ) 

                  RQA_MATR_EST(RQA_PRT_01,RQA_PRT_02) = FNC_SYSMID(I_B_STR, 20, 20 ) 
                  RQA_MATR_EST(RQA_PRT_01,RQA_PRT_02) = FNC_SYSEDIT( RQA_MATR_EST(RQA_PRT_01,RQA_PRT_02)  , 2)

                  FOR RQA_PRT_03 = 1 TO RQA_MATR_TOC(RQA_PRT_01, RQA_PRT_02)
                      RQA_MATR_OCC(RQA_PRT_01, RQA_PRT_02, RQA_PRT_03 ) = FNC_SYSMID(I_B_STR, 44 + ( RQA_PRT_03 - 1) * 24 , 24 ) 
 !!!                      BUFOUT = FNC_PRINT("APARICION SIN DEPURAR +" + RQA_MATR_OCC(RQA_PRT_01, RQA_PRT_02, RQA_PRT_03)  + "+" )
                      RQA_MATR_OCC(RQA_PRT_01, RQA_PRT_02, RQA_PRT_03 ) = FNC_SYSEDIT( RQA_MATR_OCC(RQA_PRT_01, RQA_PRT_02, RQA_PRT_03) , 2 )
 !!!                      BUFOUT = FNC_PRINT("APARICION     DEPURAD +" + RQA_MATR_OCC(RQA_PRT_01, RQA_PRT_02, RQA_PRT_03)  + "+" )
                  NEXT RQA_PRT_03

                  GO TO CIC_LEE_DC1
             END IF
             FIO_ACCI = FIO_DC1_CLOSE
   END DEF

   DEF INTEGER DSP_ERR

        AA_CPT_ALF = ""
        P_R = P_R - 1
        FOR ZZ_CPT_NUM = 1 TO P_R 
                AA_CPT_ALF = AA_CPT_ALF + " "
        NEXT ZZ_CPT_NUM
        BB_CPT_ALF = AA_CPT_ALF + "^"
        AA_CPT_ALF = AA_CPT_ALF + "|"
        BUFOUT = FNC_PRINT("ERROR DE ABORTO EN LINEA NRO: " + FNC_SYSSTR(TPG_TOT_LEI))
        BUFOUT = FNC_PRINT("EN COLUMNA                  : " + FNC_SYSSTR(P_Q))
        BUFOUT = FNC_PRINT(I_B_STR)
        BUFOUT = FNC_PRINT(BB_CPT_ALF)
        BUFOUT = FNC_PRINT(AA_CPT_ALF)
        BUFOUT = FNC_PRINT(AA_CPT_ALF)
        BUFOUT = FNC_PRINT(GLS_ERR)
        BUFOUT = FNC_PRINT("")
   END DEF



     DEF STRING FNC_SCAN_MTX

 !!! DETECTA LAS RQAS USADAS POR PROCEDURE DIVISION
        IF PASO_EJEC = "DOC" THEN
             ACCION = FNC_GEN_DC1
        ELSE
             ACCION = FNC_LEE_DC1
             ACCION = FNC_LEE_REG

 !!! esta demas              FOR RQA_PRT_01 = 1 TO RQA_TOT_RQAS
 !!! esta demas                 PRT_DC1_RQA = "ID_RQA = " + RQA_MATR_IDN(RQA_PRT_01)
 !!! esta demas                 FIO_ACCI = FIO_DC1_PUT(FIO_STAT,PRT_DC1_RQA)
 !!! esta demas 
 !!! esta demas                 FOR RQA_PRT_02 = 1 TO DT2_TOT_EST
 !!! esta demas                      PRT_DC1_ELM = "ID_ELM = " +  DC1_VEC_DOC(RQA_PRT_02) + " " + FG_BAS_PADDING(RQA_MATR_EST(RQA_PRT_01,RQA_PRT_02) , 24, " ", "D")
 !!! esta demas                      PRT_DC1_OCC = ""
 !!! esta demas              BUFOUT = FNC_PRINT("    ELEMENTO ==>> " + FNC_SYSSTR(RQA_PRT_02) + "  " + RQA_MATR_EST(RQA_PRT_01, RQA_PRT_02 ) )
 !!! esta demas                      FOR RQA_PRT_03 = 1 TO RQA_MATR_TOC(RQA_PRT_01, RQA_PRT_02)
 !!! esta demas                          BUFOUT = FNC_PRINT("      OCURRENCIA ==>> " + FNC_SYSSTR(RQA_PRT_03) + "  " + RQA_MATR_OCC(RQA_PRT_01, RQA_PRT_02, RQA_PRT_03 ) )
 !!! esta demas                          PRT_DC1_OCC_AUX = RQA_MATR_OCC(RQA_PRT_01, RQA_PRT_02, RQA_PRT_03 ) 
 !!! esta demas                          PRT_DC1_OCC_AUX = FG_BAS_PADDING(PRT_DC1_OCC_AUX , 24, " ", "D")
 !!! esta demas 
 !!! esta demas                          PRT_DC1_OCC = PRT_DC1_OCC + PRT_DC1_OCC_AUX
 !!! esta demas                     
 !!! esta demas                      NEXT RQA_PRT_03
 !!! esta demas                      PRT_DC1_ELM = PRT_DC1_ELM + PRT_DC1_OCC
 !!! esta demas                      FIO_ACCI = FIO_DC1_PUT(FIO_STAT,PRT_DC1_ELM)
 !!! esta demas                 NEXT RQA_PRT_02
 !!! esta demas 
 !!! esta demas             NEXT RQA_PRT_01 
 !!! esta demas 

            FIO_ACCI = FIO_MTX_INP

 !!!            BUFOUT = FNC_PRINT("ABRIO NUEVAMENTE 3======================================================================")

            BUFOUT = FNC_GEN_PGO

            FIO_ACCI = ESCR_PGO(FIO_STAT, MAP_GLS_IDEN  +  " ==>> CONVERSION DTC TO DB2 - INI CAPSULAS " )
            FOR RQA_PRT_01 = 1 TO RQA_TOT_RQAS
                FIO_ACCI = ESCR_PGO(FIO_STAT," ")
                FIO_ACCI = ESCR_PGO(FIO_STAT,"       PGM-" + RQA_MATR_OCC(RQA_PRT_01, RQA_SIST , 1 ) + "-FIO-" + RQA_MATR_OCC(RQA_PRT_01, RQA_TABL , 1 ) +  " SECTION." )
                FIO_ACCI = ESCR_PGO(FIO_STAT,"       INI-PGM-" + RQA_MATR_OCC(RQA_PRT_01, RQA_SIST , 1 ) + "-FIO-" + RQA_MATR_OCC(RQA_PRT_01, RQA_TABL , 1 ) +  "." )
                FIO_ACCI = ESCR_PGO(FIO_STAT,"           MOVE " + "PGM-" + RQA_MATR_OCC(RQA_PRT_01, RQA_SIST , 1 ) + "-" + RQA_MATR_OCC(RQA_PRT_01, RQA_TABL , 1 ) + "-CMND TO FIO-CMND.")
                FIO_ACCI = ESCR_PGO(FIO_STAT,"           PERFORM " + RQA_MATR_OCC(RQA_PRT_01, RQA_SIST , 1 ) + "-FIO-" + RQA_MATR_OCC(RQA_PRT_01, RQA_TABL , 1 ) +  "." )
                FIO_ACCI = ESCR_PGO(FIO_STAT,"           MOVE FIO-STAT TO PGM-" + RQA_MATR_OCC(RQA_PRT_01 , RQA_SIST , 1 ) + "-" + RQA_MATR_OCC(RQA_PRT_01 , RQA_TABL , 1 ) + "-STAT.")
                FIO_ACCI = ESCR_PGO(FIO_STAT,"       FIN-PGM-" + RQA_MATR_OCC(RQA_PRT_01, RQA_SIST , 1 ) + "-FIO-" + RQA_MATR_OCC(RQA_PRT_01, RQA_TABL , 1 ) +  "." )
                FIO_ACCI = ESCR_PGO(FIO_STAT,"           EXIT.")
                FIO_ACCI = ESCR_PGO(FIO_STAT,"       COPY " + RQA_MATR_OCC(RQA_PRT_01, RQA_SIST , 1 ) + "BF" + RQA_MATR_OCC(RQA_PRT_01, RQA_TABL , 1 ) +  "." )
            NEXT RQA_PRT_01
            FIO_ACCI = ESCR_PGO(FIO_STAT,"       COPY GNSBGDTC.")
            FIO_ACCI = ESCR_PGO(FIO_STAT, MAP_GLS_IDEN  +  " ==>> CONVERSION DTC TO DB2 - FIN CAPSULAS " )

 !!!            BUFOUT = FNC_PRINT("CERRARA MTX 3 ")
            FIO_ACCI = FIO_MTX_CLOSE
            FIO_ACCI = FIO_DCG_CLOSE
            FIO_ACCI = FIO_PGO_CLOSE
        END IF

   END DEF



 !!!------------------------------------------------------------------
 !!!              MODULO PRINCIPAL
 !!!__________________________________________________________________
        ON ERROR GO TO  LABE_BADD

            BUFOUT = FNC_PRINT(" INICIO DE PROCESO " + FNC_SYSTIME(0%) )

            ACCION = INIC_IALI

 !!!            BUFOUT = FNC_PRINT(" ANTES DE SCAN POR PRIEMRA VEZ ")
            BUFOUT = FNC_SCAN_MTX
 !!!            BUFOUT = FNC_PRINT(" DESPUES DE SCAN POR PRIEMRA VEZ ")
            BUFOUT = FNC_PRINT(" FIN    DE PROCESO " + FNC_SYSTIME(0%) )
            BUFOUT = FNC_PRINT(" # REG PROCESADOS  " + FNC_SYSSTR(TPG_TOT_LEI) )

        GO TO LABE_ATRA
 LABE_BADD:
        RESUME 999
  999
 LABE_ATRA:

 END
