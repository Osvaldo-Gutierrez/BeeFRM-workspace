 050
 !!!    TPG_TOT_HST                        NUMERO DE HST ESPECIFICADOS
 !!!	TPG_MAT_HST_NUM(I% , CTE_IDX_TCF)  TOTAL DE CAMPOS PARA HST I%
 !!!	TPG_MAT_HST_NUM(I% , CTE_IDX_TSF)  TOTAL DE SRV PARA HST I%
 !!!	TPG_MAT_NAMEFLDHST(I% , J%)        NOMBRE DEL CAMPO J% DENTRO DEL HST I%
 !!!	TPG_MAT_IDENFLDHST(I% , J%)        IDENTIFICACION(COMENTARIO) DEL CAMPO J% DENTRO DEL HST I%
 !!!					  para identificar  (ss as control en v.b.)
 !!!	TPG_MAT_XTSPR(70,30)
 !!!
 !!!	TPG_MAT_PTFRM(70,30) 		Indica los nombre de los "FRM" para cada "REQ"
 !!!					maximo 30 "FRM" y 70 "REQ"
 !!!
 !!!	TPG_MAT_INIIDXPT(70,30) 	Indica si el "FRM" j inicia un grupo de indexacion
 !!!			( i,j )		para el "REQ" i, para que no refunda bajo un solo
 !!!					grupo indexado dos o mas indexaciones con el mismo
 !!!					numero de ocurrencias y las maneje en forma
 !!!					independiente
 !!!
 !!!	TPG_MAT_INIIDXTX(70,30) 	Indica si el "FRM" j inicia un grupo de indexacion
 !!!			( i,j )		para el "REQ" i, para que no refunda bajo un solo
 !!!					grupo indexado dos o mas indexaciones con el mismo
 !!!					numero de ocurrencias y las maneje en forma

100
	DECLARE REAL	NUMTOKEN
	DECLARE INTEGER SZTOKEN	, 	SC_SZTOKEN	,&
			TOKEN	,	SC_TOKEN 	,&
			P_P	,	SC_P_P		,&
			P_Q	,	SC_P_Q 		,&
			P_R				,&
			SZ_I_B  ,       KK              ,&
			LL      ,       bb              ,&
			PONRT   ,       SEMSUM          ,&
			SM	,	DL		,&
			FIL_HST ,       COL_HST		,&
			FIL_CAM ,       COL_CAM		,&
			FIL_NCF ,	COL_NCF		,&
			FIL_LRG ,	COL_LRG  	,&
			FIL_IDX ,	TPG_TOT_LEI     ,&
			TPG_POS_REQ ,   NUM_TRN  

	DECLARE	STRING	C_Q	,	SC_C_Q		,&
			VALTOKEN,	SC_VALTOKEN	,&
			STRTOKEN,        ULT_SEC        ,&
			ANTERIOR,        NEW_PAG 	,&
			ANTE	,	 GLS_ERR	,&
			WSS_DLP,	WSS_DPP     ,&
			WSS_DFI,     WSS_GENDFO      ,&
			WSS_DSP00			,&
			WSS_DSP01			,&
			WSS_DSP04			


	DECLARE INTEGER	CONSTANT &
			KEYTOK = 1,	IDNTOK = 2	,&
			NUMTOK = 3,	STRTOK = 4	,&
			CHRTOK = 5,	EOLTOK = 6	,&
			ETXTOK = 7,	HTAB   = 9	,&
			TPGTOK = 10,	CTE_IDX_TCF = 1 ,&
			CTE_IDX_TSF = 2			,&
			CTE_IDX_NOM = 1			,&
			CTE_IDX_SIS = 2			,&
			CTE_IDX_SIM = 3			,&
			CTE_TRN_FRM = 1 ,&
			CTE_TRN_CMN = 2, CTE_TRN_CPP = 3 ,&
			CTE_TRN_SPP = 4, CTE_TRN_PGM = 5 ,&
			CTE_TRN_SUB = 6 , CTE_TRN_INS =  7 ,&
			CTE_TRN_INM = 8 , CTE_TRN_FIN =  9 ,&
			CTE_TRN_FOU = 10 , CTE_TRN_CMT = 11 ,&
			CTE_TRN_IDX = 12 , CTE_TRN_CNF = 13 ,&
			MG_0  = 1	,&
			MG_7  = 2	,&
			MG_8  = 3	,&
			MG_12 = 4	,&
			MG_16 = 5	,&
			MG_20 = 6	,&
			MG_24 = 7	,&
			MG_28 = 8	,&
			NIV_00 = MG_0	,&
			NIV_01 = MG_8	,&
			NIV_03 = MG_12	,&
			NIV_05 = MG_16	,&
			NIV_07 = MG_20	,&
			NIV_09 = MG_24	,&
			NIV_11 = MG_28	,&
			TOT_PASOS = 8   ,&
			IND_FIL = 1     ,&
			IND_COL = 2     ,&
			IND_TIP = 3     ,&
			IND_CAM = 4     ,&
			IND_DO = 5      ,&
			IND_VAD = 6     ,&
			IND_TEX = 7	,&
			IND_PIC = 8	,&
			IND_SEG = 9	,&
			IND_KEY = 10	,&
			IND_NUM_IDX = 11	,&
			IND_OCC = 12	,&
			IND_NUM_CHA = 1 ,&
			IND_LAR = 2


200
	DECLARE INTEGER C_FILE_STX,	C_FILE_PD1	,&
			C_FILE_PD2,	C_FILE_PD3	,&
			C_FILE_FLG,	C_FILE_WS3	,&
			C_FILE_PI1,	C_FILE_WS2	,&
			C_FILE_DFO,	C_FILE_DFI	,&
			C_FILE_DBC,	C_FILE_RN	,&
			INICIA_IDX_PT, INICIA_IDX_TX    ,&
			INICIA_IDX_TP, INICIA_IDX_XT


	DECLARE INTEGER  RE


	DECLARE INTEGER ACCION		,&
			FST_WSS				,&
			TPG_TOT_HST,    TPG_TOT_REQ ,&
			TPG_TOT_TRN, TPG_CON_TRN  ,&
			NIV_MRG(9)

	DECLARE INTEGER	TPG_MAT_HST_NUM(25,2)
	
	DECLARE INTEGER TPG_MAT_NIV_IDPT(70,20,2) , TPG_MAT_NIV_IDXT(70,20,2) 
			
	DECLARE INTEGER SEM           , AUX           ,&
			CAMP          ,&
			LINEA         ,&
			QQ          

	DECLARE STRING	FILE_STX,	FILE_PD1	,&
			FILE_PD2,	FILE_PD3	,&
			FILE_FLG,	FILE_WS3	,&
			FILE_PI1,	FILE_WS2	,&
			FILE_DFI,	FILE_DFO	,&
			FILE_VBC,	FILE_RN	,&
			FILE_OPE			,&
			NIV_PIC(9),	NIV_SEP(14)	,&
			TPG_MAT_IDENFLDHST(25 , 175 )   ,&
			REC_MAT_MAP(300,15)		,&
			REC_MAT_LARG(300,2)             ,&
			MAT_CAMP_IDX(30,1)

	COM STRING 	TPG_MAT_TPFRM(70,30) , TPG_MAT_PTFMT(70,30) ,&
			TPG_MAT_TRN(70,20,13) 
                         

	DECLARE	STRING  O_L		,&
			EXTERNO,&
			VARI_ABPA,	VARI_CIPA	,&
			BUFOUT		,&
			RPT_GLS_PRY	,&
			MAP_GLS_CMP,&
			V_M(9)	,&
			RPT_GLS_SRT,	RPT_GLS_FOR	,&
			MAP_GLS_IDEN,	RPT_GLS_PAI	,&
			RPT_GLS_CLI  ,  VARI            ,&
			TPG_MAT_HST_ALF(25,3) ,&
			TPG_MAT_SRV_ALF(25,30) 


	DECLARE INTEGER	CONSTANT &
			ZI	  = 1,	NO	  =  0	,&
			NEXT_PAGE = 2,	VALO_FOUT = 60	,&
			LINE_USED = 1   

 !==========================================================================


    DEF STRING ESCR_PD1 (INTEGER MARGEN,STRING BUFOUT)
         REG_1$ = ""
         REG_2$ = ""
 	BUFOUT = V_M(MARGEN) + BUFOUT
         IF LEN(BUFOUT) > 72 THEN
             GEN_I% = 1
             GEN_J% = 3
             WHILE MID$(BUFOUT,GEN_I%,4) <> " TO " AND &
                   GEN_I% < LEN(BUFOUT) 
                      GEN_I% = GEN_I% + 1
             NEXT
             IF GEN_I% > 72 THEN
                 GEN_I% = 71
                 GEN_J% = 0
                 WHILE MID$(BUFOUT,GEN_I%,1) <> " "
                      GEN_I% = GEN_I% - 1
                 NEXT
             END IF
             REG_1$ = LEFT$(BUFOUT,GEN_I% + GEN_J%)
             REG_2$ = V_M(MG_16) + " " + RIGHT$(BUFOUT,GEN_I% + 1 + GEN_J%)
         ELSE
            REG_1$ = BUFOUT
         END IF

	REG_1$ = EDIT$(REG_1$, 128%)
 	PRINT #C_FILE_PD1, REG_1$
	IF REG_2$ > "" THEN
		REG_2$ = EDIT$(REG_2$, 128%)
	 	PRINT #C_FILE_PD1, REG_2$
	END IF
    END DEF

 !==========================================================================

    DEF STRING ESCR_PD2 (INTEGER MARGEN,STRING BUFOUT)
         REG_1$ = ""
         REG_2$ = ""
 	BUFOUT = V_M(MARGEN) + BUFOUT
         IF LEN(BUFOUT) > 72 THEN
             GEN_I% = 1
             GEN_J% = 3
             WHILE MID$(BUFOUT,GEN_I%,4) <> " TO " AND &
                   GEN_I% < LEN(BUFOUT) 
                      GEN_I% = GEN_I% + 1
             NEXT
             IF GEN_I% > 72 THEN
                 GEN_I% = 71
                 GEN_J% = 0
                 WHILE MID$(BUFOUT,GEN_I%,1) <> " "
                      GEN_I% = GEN_I% - 1
                 NEXT
             END IF
             REG_1$ = LEFT$(BUFOUT,GEN_I% + GEN_J%)
             REG_2$ = V_M(MG_16) + " " + RIGHT$(BUFOUT,GEN_I% + 1 + GEN_J%)
         ELSE
            REG_1$ = BUFOUT
         END IF

	REG_1$ = EDIT$(REG_1$, 128%)
 	PRINT #C_FILE_PD2, REG_1$
	IF REG_2$ > "" THEN
		REG_2$ = EDIT$(REG_2$, 128%)
	 	PRINT #C_FILE_PD2, REG_2$
	END IF
    END DEF

 !==========================================================================

    DEF STRING ESCR_PD3 (INTEGER MARGEN,STRING BUFOUT)
         REG_1$ = ""
         REG_2$ = ""
 	BUFOUT = V_M(MARGEN) + BUFOUT
         IF LEN(BUFOUT) > 72 THEN
             GEN_I% = 1
             GEN_J% = 3
             WHILE MID$(BUFOUT,GEN_I%,4) <> " TO " AND &
                   GEN_I% < LEN(BUFOUT) 
                      GEN_I% = GEN_I% + 1
             NEXT
             IF GEN_I% > 72 THEN
                 GEN_I% = 71
                 GEN_J% = 0
                 WHILE MID$(BUFOUT,GEN_I%,1) <> " "
                      GEN_I% = GEN_I% - 1
                 NEXT
             END IF
             REG_1$ = LEFT$(BUFOUT,GEN_I% + GEN_J%)
             REG_2$ = V_M(MG_16) + " " + RIGHT$(BUFOUT,GEN_I% + 1 + GEN_J%)
         ELSE
            REG_1$ = BUFOUT
         END IF

	REG_1$ = EDIT$(REG_1$, 128%)
 	PRINT #C_FILE_PD3, REG_1$
	IF REG_2$ > "" THEN
		REG_2$ = EDIT$(REG_2$, 128%)
	 	PRINT #C_FILE_PD3, REG_2$
	END IF
    END DEF

 !==========================================================================

    DEF STRING ESCR_WS1 (INTEGER MARGEN, STRING BUFOUT)
 	RR$ = RIGHT(BUFOUT,7)
 	LL$ =  LEFT$(BUFOUT,1)
 	IF LL$ = "P" THEN
 		BUFOUT = "      " + RR$ 
 	END IF
 	PRINT #C_FILE_FLG, V_M(MARGEN) + BUFOUT
    END DEF

    DEF STRING ESCR_WS2 (INTEGER MARGEN, STRING BUFOUT)
 	RR$ = RIGHT(BUFOUT,7)
 	LL$ =  LEFT$(BUFOUT,1)
 	IF LL$ = "P" THEN
 		BUFOUT = "      " + RR$ 
 	END IF
 	PRINT #C_FILE_WS2, V_M(MARGEN) + BUFOUT
    END DEF

    DEF STRING ESCR_WS3 (INTEGER MARGEN, STRING BUFOUT)
 	RR$ = RIGHT(BUFOUT,7)
 	LL$ =  LEFT$(BUFOUT,1)
 	IF LL$ = "P" THEN
 		BUFOUT = "      " + RR$ 
 	END IF
 	PRINT #C_FILE_WS3, V_M(MARGEN) + BUFOUT
    END DEF

    DEF STRING ESCR_DFI (INTEGER MARGEN, STRING BUFOUT)
	IF WSS_DFI = "S" THEN
	 	PRINT #C_FILE_DFI, V_M(MARGEN) + BUFOUT
	END IF
    END DEF

    DEF STRING ESCR_DFO (INTEGER MARGEN, STRING BUFOUT)
	IF WSS_GENDFO = "S" THEN
	 	PRINT #C_FILE_DFO, V_M(MARGEN) + BUFOUT
	END IF
    END DEF

    DEF STRING ESCR_VBC (INTEGER MARGEN, STRING BUFOUT)
	 	PRINT #C_FILE_VBC, V_M(MARGEN) + BUFOUT
    END DEF

 !==========================================================================

    DEF STRING ESCR_PI1 (INTEGER MARGEN, STRING BUFOUT)
 	PRINT #C_FILE_PI1, V_M(MARGEN) + BUFOUT
    END DEF

 !=====================================================================

   DEF INTEGER AGR_FTB_VAL

	    NOMB_ARCH$ = MID$(VALTOKEN,5,3)
	    ES_VAL$ = "NO"
	    IF NOMB_ARCH$ = "VAL" THEN
	        ES_VAL$ = "SI"
 	        IZQ$ = LEFT$(VALTOKEN,4)
 !!! 		PRINT " IZQ$  " ; IZQ$ 
 	        DER$ = RIGHT$(VALTOKEN,5)
 !!!		PRINT "DER$  " ; DER$  
                CAM_VAL$ = IZQ$ + "FTB-" + DER$
 !!!		PRINT " CAM_VAL$   " , CAM_VAL$ 
	     END IF
   END DEF


    DEF INTEGER NEXTTOKEN
	ON ERROR GO TO LABE_ERRO
	IF TOKEN = ETXTOK THEN
		NEXTTOKEN = ETXTOK
		GO TO LABE_ASIG
	END IF
        P_P = P_Q 
 LABE_SIGA:
	WHILE (MID$(I_B$,P_P,1) = " " OR MID$(I_B$,P_P,1) = "	") AND &
			P_P <= SZ_I_B
		P_P = P_P + 1
	NEXT
	P_Q = P_P 

 	IF P_P > SZ_I_B OR I_B$ = "" OR MID$(I_B$,P_P,1) = "!" OR MID$(I_B$,P_P,1) = "*" THEN
 !!! 		IF MID$(I_B$,P_P,1) = "*" THEN
 !!!			PRINT " ENCONTRE ***********  " ; I_B$
 !!!		END IF 
		TPG_TOT_LEI = TPG_TOT_LEI + 1
		GET #C_FILE_STX
		SZ_I_B = RECOUNT
	     	MOVE FROM #C_FILE_STX , I_B$ = SZ_I_B
 !!! PARA LECTURA DE NU
    		NU_NEW$ = "SI"

 !!! PARA LECTURA DE WI
 !!!DTECTO COMP. NO ES FECHA DOS LINEAS MAS ABAJO ESTA EL NOMBRE DEL CAMPO Y SU LARGO
 !!! SI ES FECHA LEO DE ESTA LINEA EL NOMBRE Y PICTURE ES FIJO
 !!! EXI_COMP$, LUEGO QUE EXISTE UN COMP DOS LINEAS DESPUES SE LEEN LOS DATOS
		IF POS(I_B$,"COMP",1) <> 0 AND MID$(I_B$,P_P,1) <> "*"  THEN
	 		IF POS(I_B$,"-FEC-",1) <> 0 THEN
				LIN_FECH$ = "SI"
				ESCAN_FEC$ = "SI"
			ELSE
				LIN_FECH$ = "NO"
			END IF
			EXI_COMP$ = "SI"
			CONT% = 1
		ELSE
			IF EXI_COMP$ = "SI" THEN
				CONT% = CONT% + 1
			END IF
		END IF
		IF CONT% = 3 AND LIN_FECH$ = "NO" THEN
			EXI_COMP$ = "NO"
			CONT% = 0
			NEW$ = "SI"
		END IF
		P_P, P_Q  = 1
 !!! PARA LECTURA DE MAPA
		IF MID$(I_B$,1,1) <> " " THEN
			OK$ = "SI"
		ELSE
			OK$ = "NO"
		END IF

		IF WSS_DLP = 'S' THEN
			PRINT "PROC REG " ; TPG_TOT_LEI ; " #"; I_B$
		END IF
		GO TO LABE_SIGA
	END IF
	C_Q = MID$(I_B$,P_Q,1)
	IF (C_Q >= "A" AND C_Q <= "Z") OR (C_Q >= "a" AND C_Q <= "z") THEN
	         WHILE ( ( MID$(I_B$,P_P,1) >= "A" AND &
			   MID$(I_B$,P_P,1) <= "Z" &
			 ) &
	            OR   ( MID$(I_B$,P_P,1)  = "-" 	  &
			 ) &
		    OR   ( MID$(I_B$,P_P,1) >= "a" AND &
		          MID$(I_B$,P_P,1) <= "z"  &
			 ) &
		    OR   ( MID$(I_B$,P_P,1) >= "0" AND &
		          MID$(I_B$,P_P,1) <= "9" &
			 ) &
		       )
	            			P_P = P_P + 1
		 NEXT
	         SZTOKEN = P_P - P_Q
		 NEXTTOKEN = IDNTOK
	   	 VALTOKEN = MID$(I_B$,P_Q,SZTOKEN)
	ELSE
	IF C_Q >= "0" AND C_Q <= "9" THEN
	          WHILE MID$(I_B$,P_P,1) >= "0" AND MID$(I_B$,P_P,1) <= "9"
		             P_P = P_P + 1
	          NEXT
	          SZTOKEN = P_P - P_Q
		  NEXTTOKEN = NUMTOK
		  VALTOKEN = MID$(I_B$,P_Q,SZTOKEN)
	          NUMTOKEN  = VAL(VALTOKEN)
	ELSE
	IF C_Q = '"'  OR C_Q = "'" THEN
		STRTOKEN = ""
	        SZTOKENAUX = 0
		P_P = P_P + 1
 EN_OTRA_LINEA:
	        WHILE ( MID$(I_B$,P_P,1) <> C_Q AND&
		P_P < SZ_I_B )
  	              P_P = P_P + 1
 !!!			PRINT "PRINT " ; MID$(I_B$,P_P,1) ; " P_P " ; P_P ;&
 !!!				" SZ_I_B " ; SZ_I_B
	        NEXT
		IF MID$(I_B$,P_P,1) = "X" THEN
		        SZTOKENAUX = SZTOKENAUX + P_P - (P_Q + 1)
		        P_P = P_P + 1
			NEXTTOKEN = STRTOK
			STRTOKEN = STRTOKEN + MID$(I_B$,P_Q + 1,SZTOKENAUX )
			TPG_TOT_LEI = TPG_TOT_LEI + 1
			GET #C_FILE_STX
			SZ_I_B = RECOUNT
		     	MOVE FROM #C_FILE_STX , I_B$ = SZ_I_B
			P_Q = 0
			P_P = 1
			GO TO EN_OTRA_LINEA
		END IF
	        SZTOKEN = SZTOKENAUX + P_P - (P_Q + 1)
	        P_P = P_P + 1
		NEXTTOKEN = STRTOK
		STRTOKEN = STRTOKEN + MID$(I_B$,P_Q + 1,SZTOKEN)
		VALTOKEN = C_Q + STRTOKEN + C_Q

	ELSE
		IF C_Q = '$'  AND MID$(I_B$,P_P + 1 ,1) = "_" THEN
  			 P_P = P_P + 2
		         WHILE (MID$(I_B$,P_P,1) >= "A" AND MID$(I_B$,P_P,1) <= "Z" &
		            OR  MID$(I_B$,P_P,1)  = "_" 	  &
			    OR  MID$(I_B$,P_P,1) >= "a" AND &
			        MID$(I_B$,P_P,1) <= "z")
		            			P_P = P_P + 1
			 NEXT
		         SZTOKEN = P_P - P_Q
			 NEXTTOKEN = TPGTOK
		   	 VALTOKEN = MID$(I_B$,P_Q,SZTOKEN)

		ELSE
			NEXTTOKEN = CHRTOK
			VALTOKEN = MID$(I_B$,P_P,1)
			P_P = P_P + 1
			SZTOKEN = 1
		END IF
	END IF
	END IF
        END IF


	GO TO LABE_ASIG
 LABE_ERRO:
	IF ERR = 11 THEN
		NEXTTOKEN = ETXTOK
	ELSE
		PRINT "ERROR(";ERR;") ";ERT$(ERR);" en linea ";erl;", MODULO ";ern$
	END IF
	RESUME 800
 LABE_ASIG:
        P_R = P_Q
	P_Q = P_P
800
	END DEF

 !==========================================================================

 !=================================================================

 DEF INTEGER INI_MATR2

	PASO% = PASO% + 1
	IF WSS_DPP = 'S' THEN
		PRINT " INICIO           PASO " ; PASO% ; "/" ; TOT_PASOS ; " INICIALIZANDO"
	END IF
	WSS_DSP00 = 'N'
	WSS_DSP01 = 'N'
	WSS_DSP04 = 'N'			
	FOR I% = 1 TO 70
		FOR J% = 1 TO 20
			TPG_MAT_TRN(I%,J%, CTE_TRN_FRM) = '   '
			TPG_MAT_TRN(I%,J%, CTE_TRN_CMN) = '   '
			TPG_MAT_TRN(I%,J%, CTE_TRN_CPP) = '   '
			TPG_MAT_TRN(I%,J%, CTE_TRN_SPP) = ' '
			TPG_MAT_TRN(I%,J%, CTE_TRN_PGM) = '        '
			TPG_MAT_TRN(I%,J%, CTE_TRN_SUB) = '        '
			TPG_MAT_TRN(I%,J%, CTE_TRN_INS) = '   '
			TPG_MAT_TRN(I%,J%, CTE_TRN_INM) = '   '
			TPG_MAT_TRN(I%,J%, CTE_TRN_FIN) = '   '
			TPG_MAT_TRN(I%,J%, CTE_TRN_FOU) = '   '
			TPG_MAT_TRN(I%,J%, CTE_TRN_CMT) = ''
			TPG_MAT_TRN(I%,J%, CTE_TRN_IDX) = ''
			TPG_MAT_TRN(I%,J%, CTE_TRN_CNF) = '                         '
		NEXT J%
	NEXT I%
 	FOR I% = 1 TO 25
    		FOR j% = 1 TO 175
  			TPG_MAT_IDENFLDHST(I% , J%) = ""
  		NEXT J%
  	NEXT I%
  	FOR I% = 1 TO 20
  		FOR J% = 1 TO 30
  			FOR K% = 1 TO 175
  				TPG_MAT_TOTOCCFLDSRV(I%, J%, K% ) = 1
  			NEXT K%
  		NEXT J%
  	NEXT I%
	IF WSS_DPP = 'S' THEN
	 	PRINT " FIN              PASO " ; PASO% ; "/" ; TOT_PASOS ; " INICIALIZANDO"
	END IF
 
 END DEF

 !==================================================================

   DEF INTEGER INIC_IALI

	VSN$ = " Version 1.0.1 "
	NIV_PIC(NIV_01) = "01  "
	NIV_PIC(NIV_03) = "03  "
	NIV_PIC(NIV_05) = "05  "
	NIV_PIC(NIV_07) = "07  "
	NIV_PIC(NIV_09) = "09  "
	NIV_PIC(NIV_11) = "11  "
	
	NIV_SEP(NIV_01) = "    	      "
	NIV_SEP(NIV_03) = "               "
	NIV_SEP(NIV_05) = "            "
	NIV_SEP(NIV_07) = "         "
 	NIV_SEP(NIV_09) = "      "
	NIV_SEP(10)     = "    "
	NIV_SEP(11)     = ""
	NIV_SEP(12)     = "             "
	NIV_SEP(13)     = "                 "
	NIV_SEP(14)     = "                     "

	NIV_MRG(NIV_00) = MG_0
	NIV_MRG(NIV_01) = MG_8
	NIV_MRG(NIV_03) = MG_12
	NIV_MRG(NIV_05) = MG_16
	NIV_MRG(NIV_07) = MG_20
	NIV_MRG(NIV_09) = MG_24
	NIV_MRG(NIV_11) = MG_28

	C_FILE_STX = 1
	C_FILE_PD1 = 2
	C_FILE_PD2 = 3
	C_FILE_PD3 = 4
	C_FILE_FLG = 5
	C_FILE_WS2 = 6
	C_FILE_WS3 = 7
	C_FILE_PI1 = 8
	C_FILE_DFI = 9
	C_FILE_DFO = 10
	C_FILE_VBC = 11
	C_FILE_RN = 12
	FST_WSS = NO
	V_M(MG_0)  = ""
	V_M(MG_7)  = "      *"
	V_M(MG_8)  = "       "
	V_M(MG_12) = "           "
	V_M(MG_16) = "               "
	V_M(MG_20) = "                   "
	V_M(MG_24) = "                       "
	V_M(MG_28) = "                           "
	O_L  = CHR$(13) + CHR$(10)
	P_P,P_Q = 1
	
 !!!    ( $ MTX$DLP = "S" ) ==> DESPLIEGA LINEAS LEIDAS DE {fil}.MTX
 	CALL LIB$GET_SYMBOL("MTX$DLP",WSS_DLP)
 !!!    
 !!!    ( $ MTX$DPP = "S" ) ==> DESPLIEGA PASOS DE GENERACION   
	CALL LIB$GET_SYMBOL("MTX$DPP",WSS_DPP)
 !!!    
 !!!    ( $ MTX$DFI = "S" ) ==> GENERA ARCHIVO DFI
	CALL LIB$GET_SYMBOL("MTX$DFI",WSS_DFI)
 !!!    
 !!!    ( $ MTX$DFO = "S" ) ==> GENERA ARCHIVO DFO
	CALL LIB$GET_SYMBOL("MTX$DFO",WSS_GENDFO)

 	CALL LIB$GET_SYMBOL("GNS$PRY",RPT_GLS_PRY)
 	CALL LIB$GET_SYMBOL("GNS$FIL",EXTERNO)

 	CALL LIB$GET_SYMBOL("P1",P1$)
 	CALL LIB$GET_SYMBOL("P2",P2$)
	FILE_STX = P1$ + "A" + P2$ + ".MAP"
 	CALL LIB$GET_SYMBOL("GNS$SOP",RPT_GLS_FOR)
 	CALL LIB$GET_SYMBOL("GNS$PAI",RPT_GLS_PAI)
 	CALL LIB$GET_SYMBOL("GNS$CLI",RPT_GLS_CLI)

	MAP_GLS_IDEN = DATE$(0%) + " " + TIME$(0%) + "     ,PAI=" + RPT_GLS_PAI + " ,CLI=" + RPT_GLS_CLI + " ,SOP=" + RPT_GLS_FOR
	MAP_GLS_IDEN = "      *    " + EDIT$(MAP_GLS_IDEN,32)
	MAP_GLS_VBC$ = "      '    " + EDIT$(MAP_GLS_IDEN,32)

        FILE_OPE = FILE_STX
	OPEN FILE_STX FOR INPUT AS FILE #C_FILE_STX ,RECORDSIZE 255,	&
		ORGANIZATION SEQUENTIAL VARIABLE    ,RECORDTYPE ANY

	TPG_TOT_LEI = TPG_TOT_LEI + 1
	GET #C_FILE_STX
	SZ_I_B  = RECOUNT
	MOVE FROM #C_FILE_STX , I_B$ = SZ_I_B
	IF WSS_DLP = 'S' THEN
		PRINT "PROC REG " ; TPG_TOT_LEI ; " #"; I_B$
	END IF

	FILE_PD1 = EXTERNO + "MX" + "PD1.REC"
	FILE_PD2 = EXTERNO + "MX" + "PD2.REC"
	FILE_PD3 = EXTERNO + "MX" + "PD3.REC"

	FILE_FLG = P1$ + P2$ + ".FLG"

	FILE_WS2 = EXTERNO + "MX" + "WS2.REC"
	FILE_WS3 = EXTERNO + "MX" + "WS3.REC"
	FILE_PI1 = EXTERNO + "MX" + "PI1.REC"

 	FILE_DFI = EXTERNO + "MX" + "DFI.REC"
	FILE_DFO = EXTERNO + "MX" + "DFO.REC"

	FILE_VBC = EXTERNO + "MX" + "VBC.REC"

	FILE_RN = RPT_GLS_PRY + "RN" + EXTERNO + ".REC"
	ARCH_SPA$ = "      *    " 

 !!!        FILE_OPE = FILE_PD1
 !!!	OPEN FILE_PD1 FOR OUTPUT AS FILE #C_FILE_PD1, RECORDTYPE ANY,	&
 !!!	     ORGANIZATION    SEQUENTIAL	    VARIABLE, RECORDSIZE 255
 !!!	PRINT #C_FILE_PD1,MAP_GLS_IDEN
 !!!	PRINT #C_FILE_PD1,ARCH_SPA$ 
 !!!	ARCH_IDEN$ = "      *    " + FILE_PD1
 !!!	PRINT #C_FILE_PD1,ARCH_IDEN$ + VSN$
 !!!	PRINT #C_FILE_PD1,ARCH_SPA$ 


 !!!       FILE_OPE = FILE_PD2
 !!!	OPEN FILE_PD2 FOR OUTPUT AS FILE #C_FILE_PD2, RECORDTYPE ANY,	&
 !!!	     ORGANIZATION    SEQUENTIAL	    VARIABLE, RECORDSIZE 255
 !!!	PRINT #C_FILE_PD2,MAP_GLS_IDEN
 !!!	PRINT #C_FILE_PD2,ARCH_SPA$ 
 !!!	ARCH_IDEN$ = "      *    " + FILE_PD2
 !!!	PRINT #C_FILE_PD2,ARCH_IDEN$ + VSN$
 !!!	PRINT #C_FILE_PD2,ARCH_SPA$ 

 !!!	        FILE_OPE = FILE_PD3
 !!! 		OPEN FILE_PD3 FOR OUTPUT AS FILE #C_FILE_PD3, RECORDTYPE ANY,&
 !!!		ORGANIZATION    SEQUENTIAL	    VARIABLE, RECORDSIZE 255
 !!!		PRINT #C_FILE_PD3,MAP_GLS_IDEN
 !!!		PRINT #C_FILE_PD3,ARCH_SPA$ 
 !!!		ARCH_IDEN$ = "      *    " + FILE_PD3
 !!!		PRINT #C_FILE_PD3,ARCH_IDEN$ + VSN$
 !!!		PRINT #C_FILE_PD3,ARCH_SPA$ 
 !!!
 !!! 		OPEN FILE_RD FOR OUTPUT AS FILE #C_FILE_RD, RECORDTYPE ANY,&
 !!! 		ORGANIZATION    SEQUENTIAL	    VARIABLE, RECORDSIZE 255
 !!! 		PRINT #C_FILE_RD,MAP_GLS_IDEN

	IF WSS_GENDFO = "S" THEN
	        FILE_OPE = FILE_DFO
  		OPEN FILE_DFO FOR OUTPUT AS FILE #C_FILE_DFO, RECORDTYPE ANY,&
  		ORGANIZATION    SEQUENTIAL	    VARIABLE, RECORDSIZE 255
  		PRINT #C_FILE_DFO,ARCH_IDEN$ + VSN$
	END IF

	IF WSS_DFI = "S" THEN
	        FILE_OPE = FILE_DFI
	 	OPEN FILE_DFI FOR OUTPUT AS FILE #C_FILE_DFI, RECORDTYPE ANY,	&
 		     ORGANIZATION    SEQUENTIAL	    VARIABLE, RECORDSIZE 255
 	 	PRINT #C_FILE_DFI,MAP_GLS_IDEN
	END IF
 
        FILE_OPE = FILE_FLG
	OPEN FILE_FLG FOR OUTPUT AS FILE #C_FILE_FLG, RECORDTYPE ANY,	&
	     ORGANIZATION    SEQUENTIAL	    VARIABLE, RECORDSIZE 255
 !!! 	PRINT #C_FILE_FLG,MAP_GLS_IDEN
 !!!	PRINT #C_FILE_FLG,ARCH_SPA$ 
 !!!	ARCH_IDEN$ = "      *    " + FILE_FLG 
 !!!	PRINT #C_FILE_FLG,ARCH_IDEN$ + VSN$
 !!!	PRINT #C_FILE_FLG,ARCH_SPA$ 

 !!!       FILE_OPE = FILE_WS3
 !!!	OPEN FILE_WS3 FOR OUTPUT AS FILE #C_FILE_WS3, RECORDTYPE ANY,	&
 !!!	     ORGANIZATION    SEQUENTIAL	    VARIABLE, RECORDSIZE 255
 !!!	PRINT #C_FILE_WS3,MAP_GLS_IDEN
 !!!	PRINT #C_FILE_WS3,ARCH_SPA$ 
 !!!	ARCH_IDEN$ = "      *    " + FILE_WS3 
 !!!	PRINT #C_FILE_WS3,ARCH_IDEN$ + VSN$
 !!!	PRINT #C_FILE_WS3,ARCH_SPA$ 


 !!!       FILE_OPE = FILE_WS2
 !!!	OPEN FILE_WS2 FOR OUTPUT AS FILE #C_FILE_WS2, RECORDTYPE ANY,	&
 !!!	     ORGANIZATION    SEQUENTIAL	    VARIABLE, RECORDSIZE 255
 !!!	PRINT #C_FILE_WS2,MAP_GLS_IDEN
 !!!	PRINT #C_FILE_WS2,ARCH_SPA$ 
 !!!	ARCH_IDEN$ = "      *    " + FILE_WS2 
 !!!	PRINT #C_FILE_WS2,ARCH_IDEN$ + VSN$
 !!!	PRINT #C_FILE_WS2,ARCH_SPA$ 


 !!!       FILE_OPE = FILE_PI1
 !!!	OPEN FILE_PI1 FOR OUTPUT AS FILE #C_FILE_PI1, RECORDTYPE ANY,	&
 !!!	     ORGANIZATION    SEQUENTIAL	    VARIABLE, RECORDSIZE 255
 !!!	PRINT #C_FILE_PI1,MAP_GLS_IDEN
 !!!	PRINT #C_FILE_PI1,ARCH_SPA$ 
 !!!	ARCH_IDEN$ = "      *    " + FILE_PI1
 !!!	PRINT #C_FILE_PI1,ARCH_IDEN$ + VSN$
 !!!	PRINT #C_FILE_PI1,ARCH_SPA$ 

 !!!        FILE_OPE = FILE_VBC
 !!!	OPEN FILE_VBC FOR OUTPUT AS FILE #C_FILE_VBC, RECORDTYPE ANY,	&
 !!!	     ORGANIZATION    SEQUENTIAL	    VARIABLE, RECORDSIZE 255
 !!!	PRINT #C_FILE_VBC,MAP_GLS_VBC$ 

 !!! 	OPEN FILE_RN FOR OUTPUT AS FILE #C_FILE_RN, RECORDTYPE ANY,	&
 !!! 	     ORGANIZATION    SEQUENTIAL	    VARIABLE, RECORDSIZE 255
 !!!  	PRINT #C_FILE_RN,MAP_GLS_IDEN
   END DEF

 !==================================================================

 ! ------------------------------------------------------------------
 !               MODULO PRINCIPAL
 ! __________________________________________________________________
	ON ERROR GO TO  LABE_BADD
 	ACCION = INIC_IALI
	SEMSUM = 0
	PS = 1
	PONRT = 0
	SM = 1
	DL = 0
        KK = 0
	BB = 1
	LL = 1
	NEW_PAG = ""
 !!!  codigo para generador para plataforma grafica
	TPG_TOT_HST  = 0
	TPG_TOT_TRN = 0
	COL_SRV = 0
	COL_NCF = 0
        FIL_IND = 0 
	COL_LRG = 0
	GLS_MSJ$ = P2$ + "_GLS_MENS" 
 !!!	ACCION = INI_MATR2
        TOKEN = NEXTTOKEN
 !!! 	WHILE TOKEN <> TPGTOK
 !!!	  TOKEN = NEXTTOKEN
 !!!       NEXT
	I% = 0
	WHILE TOKEN <> ETXTOK
		TOK_ANT$ = VALTOKEN
	 	TOKEN = NEXTTOKEN
	 	IF  VALTOKEN = "DFHMDF" THEN
			IF OK$ = "SI" THEN
				I% = I% + 1
				REC_MAT_MAP(I%,IND_TIP) = "C"
				CALL GENRPTREP(TOK_ANT$,"-","_") 
				REC_MAT_MAP(I%,IND_CAM) = TOK_ANT$ 
				IF DI_ON$ = "S" THEN
					DI_ON$ = "N"
					REC_MAT_MAP(I%,IND_DO) = "S"
				ELSE
					REC_MAT_MAP(I%,IND_DO) = "N"
				END IF
				IF SE_GE$ = "S" THEN
					REC_MAT_MAP(I% - 1,IND_SEG) = "S"
					REC_MAT_MAP(I%,IND_SEG) = "S"
				END IF
				TOKEN = NEXTTOKEN
				TOKEN = NEXTTOKEN
				TOKEN = NEXTTOKEN
				TOKEN = NEXTTOKEN
				FIL% = NUMTOKEN
				REC_MAT_MAP(I%,IND_FIL) = STR$(NUMTOKEN)
				TOKEN = NEXTTOKEN
				TOKEN = NEXTTOKEN
				COL% = NUMTOKEN + 1
				REC_MAT_MAP(I%,IND_COL) = STR$(COL%) 
 !!!				PRINT "NOM_CAMPO  "; TOK_ANT$
 !!!				PRINT "FIL%2 222  "; REC_MAT_MAP(I%,IND_FIL) 
 !!!				PRINT "COL%3 222  "; REC_MAT_MAP(I%,IND_COL) 
 !!!				PRINT "VAL DEFA "; GLOSA$
 !!!				IF TOK_ANT$ = "SCRMENS" THEN
 !!!					REC_MAT_MAP(I%,IND_FIL) = ""
 !!!					REC_MAT_MAP(I%,IND_COL) = ""
 !!!					REC_MAT_MAP(I%,IND_CAM) = ""
 !!!				END IF 
			END IF
		END IF

		IF VALTOKEN = "POS" THEN
			TOKEN = NEXTTOKEN
			TOKEN = NEXTTOKEN
			TOKEN = NEXTTOKEN
			FIL% = NUMTOKEN
			TOKEN = NEXTTOKEN
			TOKEN = NEXTTOKEN
			COL% = NUMTOKEN
		END IF

		IF VALTOKEN = "INITIAL" THEN
			TOKEN = NEXTTOKEN
 !!!=			print " primer valtoken despues de initial " ; valtoken
			TOKEN = NEXTTOKEN
 !!!=			print " segundo valtoken despues de initial " ; valtoken
			IF VALTOKEN <> "'<'" AND VALTOKEN <> "'>'" AND VALTOKEN <> "'{'" AND&
				 VALTOKEN <> "'}'" AND VALTOKEN <> "'-'" THEN
 !!!=				print " en glosa guardo valtoken despues de initial " ; valtoken
				 GLOSA$ = VALTOKEN
				 IF OK$ = "NO" THEN
					I% = I% + 1
					REC_MAT_MAP(I%,IND_FIL) = STR$(FIL%)
					REC_MAT_MAP(I%,IND_COL) = STR$(COL% + 1)
					REC_MAT_MAP(I%,IND_TIP) = "T"
					PRINT " GUARDO GLOSA " ; GLOSA$
					REC_MAT_MAP(I%,IND_TEX) = GLOSA$
				 END IF
			ELSE
				IF VALTOKEN = "'<'" OR VALTOKEN = "'{'"  THEN
					DI_ON$ = "S"
				ELSE
					DI_ON$ = "N"	
				END IF
				IF VALTOKEN = "'-'"  THEN
					SE_GE$ = "S"
				ELSE	
					SE_GE$ = "N"
				END IF
			END IF
		END IF
	NEXT


	PRINT " ***   Escaneo de registro imagen WI   ***"
	CLOSE #C_FILE_STX

	FILE_STX = P1$ + "WI" + P2$ + ".AIU"

	OPEN FILE_STX FOR INPUT AS FILE #C_FILE_STX ,RECORDSIZE 255,	&
		ORGANIZATION SEQUENTIAL VARIABLE    ,RECORDTYPE ANY

	TPG_TOT_LEI = TPG_TOT_LEI + 1
	GET #C_FILE_STX
	SZ_I_B  = RECOUNT
	MOVE FROM #C_FILE_STX , I_B$ = SZ_I_B
	P_P = 1
	P_Q = 1
		IF POS(I_B$,"COMP",1) <> 0  THEN
	 		IF POS(I_B$,"-FEC-",1) <> 0 THEN
				LIN_FECH$ = "SI"
			ELSE
				LIN_FECH$ = "NO"
			END IF
			EXI_COMP$ = "SI"
			CONT% = 1
		ELSE
			IF EXI_COMP$ = "SI" THEN
				CONT% = CONT% + 1
			END IF
		END IF
		IF CONT% = 3 AND LIN_FECH$ = "NO" THEN
			EXI_COMP$ = "NO"
			CONT% = 0
			NEW$ = "SI"
		END IF

	TOKEN = 0
 !!! BUSCO LA POSICION DEL PRIMER CAMPO
	I% = 1
	FOR I% = 1 TO 300
		IF REC_MAT_MAP(I%,IND_TIP) = "C" THEN
			IN% = I%
			I% = 300
		END IF
	NEXT I%
	
	WHILE TOKEN <> ETXTOK
		ANT_TOK$ = VALTOKEN
		TOKEN = NEXTTOKEN
		IF CONT% = 1 AND ESCAN_FEC$ = "SI" THEN
			ESCAN_FEC$ = "NO"
			TOKEN = NEXTTOKEN
 			T% = POS(VALTOKEN,"-LEN",1)
 			CAMPO$ = LEFT$(VALTOKEN,(T% - 1))
			CALL GENRPTREP(CAMPO$,"-","_") 
			REC_MAT_MAP(IN%,IND_CAM) = CAMPO$
			REC_MAT_LARG(IN%,IND_NUM_CHA) = "FEC" 
			REC_MAT_LARG(IN%,IND_LAR) = "99-99-999"
 !!! BUSCO LA POSICION DEL SIGUIENTE CAMPO
			K% = IN% + 1
			FOR I% = K% TO 300
				IF REC_MAT_MAP(I%,IND_TIP) = "C" THEN
					IN% = I%
					I% = 300
				END IF
			NEXT I%
		END IF 
		IF NEW$ = "SI" THEN
			NEW$ = "NO"
			TOKEN = NEXTTOKEN
			IF POS(VALTOKEN,"-ALF",1) <> 0 THEN
 				T% = POS(VALTOKEN,"-ALF",1)
 				CAMPO$ = LEFT$(VALTOKEN,(T% - 1))
			ELSE
 				CAMPO$ = VALTOKEN
			END IF
 			CALL GENRPTREP(CAMPO$,"-","_") 
 			REC_MAT_MAP(IN%,IND_CAM) = CAMPO$
			TOKEN = NEXTTOKEN
			TOKEN = NEXTTOKEN
			IF VALTOKEN =  "S" THEN
				TOKEN = NEXTTOKEN
			END IF
			IF VALTOKEN =  "X" THEN
				REC_MAT_LARG(IN%,IND_NUM_CHA) = "X"
				TOKEN = NEXTTOKEN
				IF VALTOKEN =  "(" THEN
					TOKEN = NEXTTOKEN
					REC_MAT_LARG(IN%,IND_LAR) = VALTOKEN 
				ELSE
					REC_MAT_LARG(IN%,IND_LAR) = "1"
				END IF 
			ELSE
				REC_MAT_LARG(IN%,IND_NUM_CHA) = "9"
				REC_MAT_LARG(IN%,IND_LAR) = VALTOKEN 
			END IF 
 !!! BUSCO LA POSICION DEL SIGUIENTE CAMPO
			K% = IN% + 1
			FOR I% = K% TO 300
				IF REC_MAT_MAP(I%,IND_TIP) = "C" THEN
					IN% = I%
					I% = 300
				END IF
			NEXT I%
		END IF
	NEXT

	PRINT " ***   Escaneo de archivo temporal  NU   ***"

	CLOSE #C_FILE_STX

	FILE_STX = P1$ + "NU" + P2$ + ".SER"

	C_FILE_STX = 2
	OPEN FILE_STX FOR INPUT AS FILE #C_FILE_STX ,RECORDSIZE 255,	&
		ORGANIZATION SEQUENTIAL VARIABLE    ,RECORDTYPE ANY

	TPG_TOT_LEI = TPG_TOT_LEI + 1
        ON ERROR GO TO ERR_1
	GET #C_FILE_STX
	SZ_I_B  = RECOUNT
	MOVE FROM #C_FILE_STX , I_B$ = SZ_I_B
	P_P = 1
	P_Q = 1
	TOKEN = 0
 !=============
 ERR_1:
	IF ERR = 2 THEN
		PRINT FILE_OPE, " : NOMBRE DE ARCHIVO ILEGAL"
	ELSE 
	IF ERR = 5 THEN
		PRINT FILE_OPE, " ARCHIVO INEXISTENTE       "
	ELSE
	IF ERR = 11 THEN
		PRINT "en err_1 detecto fin de archivo"
		TOKEN = ETXTOK
	ELSE 
		PRINT "CODIGO : ",ERR
		PRINT "MENSAJE :",ERT$(ERR)
	END IF
	END IF
	END IF
 	RESUME 999
  999
 !=============
	WHILE TOKEN <> ETXTOK
		TOKEN = NEXTTOKEN
 		IF POS(I_B$,"-EDT",1) <> 0 THEN
			NU_NEW$ = "NO"
 			T% = POS(VALTOKEN,"-EDT",1)
 			CAMPO$ = LEFT$(VALTOKEN,(T% - 1))
			CALL GENRPTREP(CAMPO$,"-","_") 
			NUM% = 1
			WHILE REC_MAT_MAP(NUM%,IND_CAM)  <> CAMPO$ AND  REC_MAT_MAP(NUM%,IND_FIL) <> " "
				NUM% = NUM% + 1
			NEXT
			TOKEN = NEXTTOKEN
			TOKEN = NEXTTOKEN
			PICT$ = ""
			WHILE NU_NEW$ = "NO" AND TOKEN <> ETXTOK
				IF VALTOKEN = '.' OR VALTOKEN = ',' THEN
					PICT$ = PICT$ + VALTOKEN
				ELSE
					UNID$ = VALTOKEN
					CALL GENRPTREP(UNID$,"Z","9")
					CALL GENRPTREP(UNID$,"-","N")
					PICT$ = PICT$ + UNID$
				END IF
				TOKEN = NEXTTOKEN
			NEXT
			TAM% = LEN(PICT$)
	 	        IZQ$ = LEFT$(PICT$,(TAM% - 1))
			REC_MAT_LARG(NUM%,IND_LAR) = IZQ$ 
			REC_MAT_LARG(NUM%,IND_NUM_CHA) = "9"  
		END IF
	NEXT

	FOR J%=1 TO 300
		IF  REC_MAT_LARG(J%,IND_NUM_CHA) = "X"  THEN
			REC_MAT_MAP(J%,IND_PIC) =  REC_MAT_LARG(J%,IND_LAR) + "'" +  REC_MAT_LARG(J%,IND_NUM_CHA) + "'"
		ELSE
			REC_MAT_MAP(J%,IND_PIC) =  "'" + REC_MAT_LARG(J%,IND_LAR) + "'"
		END IF
	NEXT J%
		
	REV$ = "NO"
	FOR I% = 1 TO 300
		IF REC_MAT_MAP(I%,IND_SEG) = "S" THEN
			REV$ = "SI"
		END IF
		NUM% = 0
		IND% = 0
		GLS% = 0
		VRF% = 0
		NUM_POS% = 0
		IND_POS% = 0
		GLS_POS% = 0
		VRF_POS% = 0
		IF REV$ = "SI"THEN
			REV$ = "NO"
			FOR J% = 0 TO 3
				CAMP$ = REC_MAT_MAP(I% + J%,IND_CAM) 
		 		IF POS(CAMP$,"_NUM_",1) <> 0  AND REC_MAT_MAP(I% + J%,IND_SEG) = "S" THEN 
					NUM% = NUM% + 1
					NUM_POS% = I% + J%
				ELSE
				IF POS(CAMP$,"_VRF_",1) <> 0  AND REC_MAT_MAP(I% + J%,IND_SEG) = "S"  THEN
					VRF% = VRF% + 1
					VRF_POS% = I% + J%
				ELSE
				IF POS(CAMP$,"_IND_",1) <> 0  AND REC_MAT_MAP(I% + J%,IND_SEG) = "S"  THEN
					IND% = IND% + 1
					IND_POS% = I% + J%
				ELSE
				IF POS(CAMP$,"_GLS_",1) <> 0  AND REC_MAT_MAP(I% + J%,IND_SEG) = "S" THEN
					GLS% = GLS% + 1
					GLS_POS% = I% + J%
				END IF
				END IF
				END IF
				END IF
			NEXT J%
			IF NUM% = 1 AND VRF% = 1 THEN
				REC_MAT_MAP(NUM_POS%,IND_PIC) =  "'XXXXXXXX-X'"
				REC_MAT_MAP(VRF_POS%,IND_FIL) =  ""
				REC_MAT_MAP(VRF_POS%,IND_COL) =  ""
			END IF
			IF IND% = 1 AND GLS% = 1 THEN
				REC_MAT_MAP(IND_POS%,IND_PIC) =  "'X-XXX'"
				REC_MAT_MAP(GLS_POS%,IND_FIL) =  ""
				REC_MAT_MAP(GLS_POS%,IND_COL) =  ""
			END IF
			I% = I% + 3
		END IF
	NEXT I%

	PRINT " ***   Escaneo de archivo  BQ   ***"

	CLOSE #C_FILE_STX

	FILE_STX = P1$ + "BQ" + P2$ + ".AIU"

 !!!	PRINT "ABRIRA ARCHIVO " ; FILE_STX

	C_FILE_STX = 7
	OPEN FILE_STX FOR INPUT AS FILE #C_FILE_STX ,RECORDSIZE 255,	&
		ORGANIZATION SEQUENTIAL VARIABLE    ,RECORDTYPE ANY

 !!!	PRINT "ABRIO ARCHIVO " ; FILE_STX
	TPG_TOT_LEI = TPG_TOT_LEI + 1
        RESUME 1100
1100
	ON ERROR GO TO ERR_2
	GET #C_FILE_STX
	SZ_I_B  = RECOUNT
	MOVE FROM #C_FILE_STX , I_B$ = SZ_I_B
	P_P = 1
	P_Q = 1
	TOKEN = 0
	GO TO OK_2
 !=============
 ERR_2:
	IF ERR = 2 THEN
		PRINT FILE_OPE, " : NOMBRE DE ARCHIVO ILEGAL"
	ELSE 
	IF ERR = 5 THEN
		PRINT FILE_OPE, " ARCHIVO INEXISTENTE       "
	ELSE
	IF ERR = 11 THEN
		PRINT "DETECTO FIN DE ARCHIVO BQ"
		TOKEN = ETXTOK
	ELSE 
		PRINT "CODIGO : ",ERR
		PRINT "MENSAJE :",ERT$(ERR)
	END IF
	END IF
	END IF
 	RESUME 1150
 1150
 !=============
 OK_2:
 !!! BUSCO LA POSICION DEL PRIMER CAMPO
	WHILE TOKEN <> ETXTOK
		TOKEN = NEXTTOKEN
		SECT_INI$ = "INI-PRO-IKY-" + P2$
		SECT_FIN$ = "FIN-PRO-IKY-" + P2$
 		IF (POS(I_B$,SECT_INI$,1)) <> 0 THEN
			WHILE VALTOKEN <> SECT_FIN$
		 		IF (POS(VALTOKEN,"-ATR",1)) <> 0 THEN
	 				T% = POS(VALTOKEN,"-ATR",1)
		 			CAMPO$ = LEFT$(VALTOKEN,(T% - 1))
					NUM% = 1
					WHILE REC_MAT_MAP(NUM%,IND_CAM) <> CAMPO$ AND  REC_MAT_MAP(NUM%,IND_FIL) <> " "
						NUM% = NUM% + 1
					NEXT
			 	        IZQ$ = LEFT$(REC_MAT_MAP(NUM%,IND_CAM),4)
 				        DER$ = RIGHT$(REC_MAT_MAP(NUM%,IND_CAM),5)
 			                NOMB_CAM$ = IZQ$ + "IKY_" + DER$
					REC_MAT_MAP(NUM%,IND_KEY) = "IKY"  
					REC_MAT_MAP(NUM%,IND_CAM) = NOMB_CAM$ 
				END IF
				TOKEN = NEXTTOKEN
			NEXT
		END IF

		SECT_INI$ = "INI-PRO-MKY-" + P2$
		SECT_FIN$ = "FIN-PRO-MKY-" + P2$
 		IF (POS(I_B$,SECT_INI$,1)) <> 0 THEN
			WHILE VALTOKEN <> SECT_FIN$
		 		IF (POS(VALTOKEN,"-ATR",1) <> 0)  THEN
 					T% = POS(VALTOKEN,"-ATR",1)
		 			CAMPO$ = LEFT$(VALTOKEN,(T% - 1))
					NUM% = 1
					WHILE REC_MAT_MAP(NUM%,IND_CAM) <> CAMPO$ AND  REC_MAT_MAP(NUM%,IND_FIL) <> " "
						NUM% = NUM% + 1
					NEXT
			 	        IZQ$ = LEFT$(REC_MAT_MAP(NUM%,IND_CAM),4)
 				        DER$ = RIGHT$(REC_MAT_MAP(NUM%,IND_CAM),5)
 			                NOMB_CAM$ = IZQ$ + "MKY_" + DER$
					REC_MAT_MAP(NUM%,IND_KEY) = "MKY"  
					REC_MAT_MAP(NUM%,IND_CAM) = NOMB_CAM$ 
				END IF
				TOKEN = NEXTTOKEN
			NEXT
		END IF

		SECT_INI$ = "INI-PRO-AKY-" + P2$
		SECT_FIN$ = "FIN-PRO-AKY-" + P2$
 		IF (POS(I_B$,SECT_INI$,1)) <> 0  THEN
			WHILE VALTOKEN <> SECT_FIN$
		 		IF (POS(VALTOKEN,"-ATR",1) <> 0)  THEN
	 				T% = POS(VALTOKEN,"-ATR",1)
		 			CAMPO$ = LEFT$(VALTOKEN,(T% - 1))
					NUM% = 1
					WHILE REC_MAT_MAP(NUM%,IND_CAM) <> CAMPO$ AND  REC_MAT_MAP(NUM%,IND_FIL) <> " "
						NUM% = NUM% + 1
					NEXT
			 	        IZQ$ = LEFT$(REC_MAT_MAP(NUM%,IND_CAM),4)
 				        DER$ = RIGHT$(REC_MAT_MAP(NUM%,IND_CAM),5)
 			                NOMB_CAM$ = IZQ$ + "AKY_" + DER$
					REC_MAT_MAP(NUM%,IND_KEY) = "AKY"  
					REC_MAT_MAP(NUM%,IND_CAM) = NOMB_CAM$ 
				END IF
				TOKEN = NEXTTOKEN
			NEXT
		END IF
	NEXT

	PRINT "  ***   Escaneo busqueda de indexacion   ***"

	CLOSE #C_FILE_STX
	C_FILE_STX = 8

	FILE_STX = P1$ + "WI" + P2$ + ".AIU"

	OPEN FILE_STX FOR INPUT AS FILE #C_FILE_STX ,RECORDSIZE 255,	&
		ORGANIZATION SEQUENTIAL VARIABLE    ,RECORDTYPE ANY

	TPG_TOT_LEI = TPG_TOT_LEI + 1
        RESUME 1155
1155
	ON ERROR GO TO ERR_3
	GET #C_FILE_STX
	SZ_I_B  = RECOUNT
	MOVE FROM #C_FILE_STX , I_B$ = SZ_I_B
	P_P = 1
	P_Q = 1
	TOKEN = 0
        NUM_CAM% = 0
	NEW$ = "NO"
	TOP$ = ""
	NUM_CAM% = 0
        GO TO OK_3
 !=============
 ERR_3:
	IF ERR = 2 THEN
		PRINT FILE_OPE, " : KKK   NOMBRE DE ARCHIVO ILEGAL"
	ELSE 
	IF ERR = 5 THEN
		PRINT FILE_OPE, " KKK   ARCHIVO INEXISTENTE       "
	ELSE
	IF ERR = 11 THEN
		PRINT " KKK   DETECTO FIN DE ARCHIVO BQ"
		TOKEN = ETXTOK
	ELSE 
		PRINT "KKK   CODIGO : ",ERR
		PRINT "MENSAJE :",ERT$(ERR)
	END IF
	END IF
	END IF
 	RESUME 1160
1160
 !=============
 OK_3:
 !!! BUSCO LA POSICION DEL PRIMER CAMPO
 !!! FRM-COD-CCMN-IDX  OCCURS 10 TIMES.
  	WHILE VALTOKEN <> TOP$ AND TOKEN <> ETXTOK
 !!!	WHILE TOKEN <> ETXTOK
		TOKEN = NEXTTOKEN
 !!! 		IF (POS(I_B$,"-IDX",1)) <> 0  AND  (POS(I_B$,"OCCURS",1)) <> 0  THEN
 		IF (POS(I_B$,"OCCURS",1)) <> 0  THEN
			TOP$ = VALTOKEN
			TOKEN = NEXTTOKEN
			TOKEN = NEXTTOKEN
			TOKEN = NEXTTOKEN
			OCC$ = VALTOKEN

			WHILE (VALTOKEN <> TOP$)
				IF (POS(VALTOKEN,"-LEN",1)) <> 0   THEN
					NUM_CAM% = NUM_CAM% + 1
		 			T% = POS(VALTOKEN,"-LEN",1)
		 			CAMPO$ = LEFT$(VALTOKEN,(T% - 1))
					CALL GENRPTREP(CAMPO$,"-","_") 
					MAT_CAMP_IDX(NUM_CAM%,1) = CAMPO$
				END IF
				TOKEN = NEXTTOKEN
			NEXT
		END IF
	NEXT

	J%=1
	FOR K%=1 TO 300
		IF REC_MAT_MAP(K%,IND_CAM) = MAT_CAMP_IDX(J%,1)  THEN
			J% = J% + 1
			REC_MAT_MAP(K%,IND_NUM_IDX) =  STR$(NUM_CAM%)
			REC_MAT_MAP(K%,IND_OCC) =  OCC$
			IF MAT_CAMP_IDX(J%,1)  =  "" THEN
				K% = 300
			END IF
		END IF
	NEXT K%

	FOR J%=1 TO 300
		IF REC_MAT_MAP(J%,IND_TIP) = "C" AND  REC_MAT_MAP(J%,IND_FIL) <> ""  AND REC_MAT_MAP(J%,IND_FIL) <>  "24" AND&
		     REC_MAT_MAP(J%,IND_PIC) <> "''" THEN 
		     IF REC_MAT_MAP(J%,IND_OCC) <> " " THEN
			NUMCAM% = VAL(REC_MAT_MAP(J%,IND_NUM_IDX)) 
			OCC% = VAL(REC_MAT_MAP(J%,IND_OCC)) 
 !!! UBICO DONDE COMIENZAN LOS NOMBRES DE LOS CAMPOS NO INDEXADOS
			J% = J% + NUMCAM%
 !!! UBICO DONDE COMIENZAN LOS CAMPOS QUE NO TIENEN NOMBRE
			JJ% = (J% +(NUMCAM% *(OCC% -1)))
			WHILE REC_MAT_MAP(JJ%,IND_CAM) <> GLS_MSJ$ AND REC_MAT_MAP(JJ%,IND_FIL) <>  "24" AND  REC_MAT_MAP(JJ%,IND_FIL) <> ""  
				IF REC_MAT_MAP(JJ%,IND_TIP) = "C" THEN
				      REC_MAT_MAP(JJ%,IND_CAM) = REC_MAT_MAP(J%,IND_CAM)
				      REC_MAT_MAP(JJ%,IND_PIC) = REC_MAT_MAP(J%,IND_PIC)
				      REC_MAT_MAP(JJ%,5) = "YYY"
				      J% = J% + 1 
				END IF
				JJ% = JJ% + 1
			NEXT
			J% = 300
		     END IF
		END IF
	NEXT J%

 !!! YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY
 !!!   	FOR J%=1 TO 300
 !!!		PRINT " FIL " ; REC_MAT_MAP(J%,1) ; " COL " ; REC_MAT_MAP(J%,2) ; " TIP " ; REC_MAT_MAP(J%,3) ;&
 !!!		      " CAM " ; REC_MAT_MAP(J%,4) ; " D.O. " ; REC_MAT_MAP(J%,5) ; " V.DEF " ; REC_MAT_MAP(J%,6) ;&
 !!!			" TEX " ; REC_MAT_MAP(J%,7) ; " PIC " ; REC_MAT_MAP(J%,8) ; " SE GE " ; REC_MAT_MAP(J%,9) ;&
 !!!			 " NUM CAM IDX "  ; REC_MAT_MAP(J%,IND_NUM_IDX) ; " OCCUR " ; REC_MAT_MAP(J%,IND_OCC)
 !!!		PRINT 	" LLAVE ==> " ; REC_MAT_MAP(J%,10)
 !!!		PRINT "NUM / CHA " ;	REC_MAT_LARG(J%,IND_NUM_CHA)
 !!!		PRINT " LARGO    " ;	REC_MAT_LARG(J%,IND_LAR) 
 !!!		IF REC_MAT_MAP(J%,IND_FIL) = " " THEN
 !!!			J% = 300
 !!!		END IF
 !!!	NEXT J%


	PAS_OC$ = "NO"
             REGMNU$ =   " !      FMS Form Description Application Aid  "
             BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)
             REGMNU$ =   " !                Version V2.4  "
             BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)

             REGMNU$ =   " FORM NAME='" + P2$ + "'"
             BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)
             REGMNU$ =   "     HELP_FORM='HELP'"
             BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)
             REGMNU$ =   "     AREA_TO_CLEAR=1:23"
             BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)
             REGMNU$ =   "     WIDTH=CURRENT"
             BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)
             REGMNU$ =   "     BACKGROUND=CURRENT"
             BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)
             REGMNU$ =   "    ;"
             BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)
             REGMNU$ =   ""
             BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)
             REGMNU$ =   ""
             BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)

	FOR J%=1 TO 300
		IF REC_MAT_MAP(J%,IND_TIP) = "T"  AND REC_MAT_MAP(J%,IND_FIL) <>  "24"  THEN 

	             REGMNU$ = " TEXT (" + REC_MAT_MAP(J%,IND_FIL)  + "," + REC_MAT_MAP(J%,IND_COL) + ")  " +&
				REC_MAT_MAP(J%,IND_TEX) 
		     IF LEN(REGMNU$) > 72 THEN
			PRINT " STRING COMPLETO " ; REGMNU$ 
		             REG_1$ = REGMNU$ 
			     BUFOUT = LEFT$(REGMNU$,60) + "'"
				PRINT " LADO DERECHO 60  " ; BUFOUT
		             BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),BUFOUT)
		             REGMNU$  = REG_1$
		             REGMNU$  = RIGHT$(REGMNU$,61)
				PRINT " LADO IZQ DESDE 61 " ; REGMNU$
				IF (POS(REGMNU$,"'",1)) <> 0   THEN
				     PP% = POS(REGMNU$,"'",1)
				     BUFOUT = "        &'" +  LEFT$(REGMNU$,PP%)
				ELSE
					PRINT " ENTRO A SIN COMILAS"
				     BUFOUT = "        &'" +  LEFT$(REGMNU$,26) + "'"
				END IF
			        BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),BUFOUT)
		     ELSE
		             BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)
		     END IF
	             REGMNU$ = "    " +  ";"
	             BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)
		END IF
	NEXT J%

             REGMNU$ =   "ATTRIBUTE_DEFAULTS FIELD"
             BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)
             REGMNU$ =  "    " + "CLEAR_CHARACTER=' '"
             BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)
             REGMNU$ =  "    " + "NOAUTOTAB BLANK_FILL NOBLINKING NOBOLD NOREVERSE"
             BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)
             REGMNU$ =  "    " + "NOUNDERLINE NODISPLAY_ONLY ECHO NOFIXED_DECIMAL"
             BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)
             REGMNU$ =  "    " + "LEFT_JUSTIFIED NOSUPERVISOR_ONLY NOSUPPRESS NOUPPERCASE"
             BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)
             REGMNU$ =  "    " +  ";"
             BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)
             REGMNU$ =   ""
             BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)

	FOR J%=1 TO 300
		IF REC_MAT_MAP(J%,IND_OCC) = " " AND PAS_OC$ = "SI" THEN
			PAS_OC$ = "NO" 
			J% = ((J% + (NUMCAM% * (OCC%))))
		END IF
		IF REC_MAT_MAP(J%,IND_TIP) = "C" AND  REC_MAT_MAP(J%,IND_FIL) <> ""  AND REC_MAT_MAP(J%,IND_FIL) <>  "24" AND&
		     REC_MAT_MAP(J%,IND_PIC) <> "''" THEN 
 !!! EL SIGUIENTE IF ES PARA QUE NO ESCRIBA EL {}-GLS-MENS
		     IF REC_MAT_MAP(J%,IND_CAM) <> GLS_MSJ$  THEN
				REGMNU$ = "FIELD NAME='" + REC_MAT_MAP(J%,IND_CAM)  + "'    (" + REC_MAT_MAP(J%,IND_FIL) +&
					"," +   REC_MAT_MAP(J%,IND_COL) +  ")  " 
				BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)
				REGMNU$ = "    " + "PICTURE=" + REC_MAT_MAP(J%,IND_PIC) 
				BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)
		     END IF
 !!!    INDEX=(13,2):(14,2):(15,2):(16,2):(17,2):(18,2):(19,2):(20,2):(21,2)
		     IF REC_MAT_MAP(J%,IND_OCC) <> " " THEN
			NUMCAM% = VAL(REC_MAT_MAP(J%,IND_NUM_IDX)) 
			OCC% = VAL(REC_MAT_MAP(J%,IND_OCC)) - 1
			REGMNU$ = "    " + "INDEX= "
			DOS_PUN$ = ""
			PAS_OC$ = "SI"
			FOR N% = 1 TO OCC%
				CAM% = (J% + (NUMCAM% * N%))
				REGMNU$ = REGMNU$ + DOS_PUN$ +  "(" + REC_MAT_MAP(CAM%,IND_FIL) + "," +&
					  REC_MAT_MAP(CAM%,IND_COL) + ")"
				DOS_PUN$ = ":"
				IF LEN(REGMNU$) > 65 THEN
					BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)
					REGMNU$ = "            "
				END IF
			NEXT N%
			BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)
		     END IF
		     IF REC_MAT_MAP(J%,IND_CAM) <> GLS_MSJ$  THEN
			IF REC_MAT_MAP(J%,IND_DO) <> "S"  THEN
				REGMNU$ = "    " + "REVERSE"
		             	BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)
			ELSE
		             	REGMNU$ = "    DISPLAY_ONLY " + "REVERSE"
		             	BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)
			END IF
			REGMNU$ = "    " +  ";"
	             	BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)
		     END IF
		END IF
	NEXT J%

	REGMNU$ = "ORDER BEGIN_WITH = 1" 
	BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)
	FOR J%=1 TO 300
		IF REC_MAT_MAP(J%,IND_TIP) = "C" AND  REC_MAT_MAP(J%,IND_FIL) <> ""  AND REC_MAT_MAP(J%,IND_FIL) <>  "24" AND&
			REC_MAT_MAP(J%,IND_PIC) <> "''" AND REC_MAT_MAP(J%,5) <> "YYY"THEN 
		     IF REC_MAT_MAP(J%,IND_OCC) = " " AND REC_MAT_MAP(J%,IND_CAM) <> GLS_MSJ$ THEN
		              REGMNU$ = "    " +  "NAME='" + REC_MAT_MAP(J%,IND_CAM) + "'"
		              BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)
		     END IF
		END IF
	NEXT J%
	FOR J%=1 TO 300
	     IF REC_MAT_MAP(J%,IND_OCC) <> " " THEN
		  OCC% = VAL(REC_MAT_MAP(J%,IND_OCC))
		  J% = 300
	     END IF
	NEXT J%
	IDX$ = "NO"
	FOR N% = 1 TO OCC%
		FOR J%=1 TO 30
			IF MAT_CAMP_IDX(J%,1) <> "" THEN
				IDX$ = "SI"
				REGMNU$ = "    " +  "NAME='" + MAT_CAMP_IDX(J%,1) + "(" + STR$(N%) + ")'"
			  	BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)
			ELSE
				J% = 30
		     	END IF
		NEXT J%
	NEXT N%
        REGMNU$ =   "    ;"
        BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)
        REGMNU$ =   ""
        BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)
	IF  IDX$ = 'SI' THEN
	        REGMNU$ =   "NAMED_DATA INDEX=1 NAME='MESSAGE_KEY'"
	        BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)
	        REGMNU$ =  "    " +  "DATA='GA04' ;"
	        BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)
	        REGMNU$ =   ""
	        BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)
	END IF
        REGMNU$ =   "END_OF_FORM NAME='" + P2$ + "' ;"
        BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)


	GO TO LABE_ATRA
	
 LABE_BADD:
	IF ERR = 2 THEN
		PRINT FILE_OPE, " : NOMBRE DE ARCHIVO ILEGAL"
	ELSE 
	IF ERR = 5 THEN
		PRINT FILE_OPE, " ARCHIVO INEXISTENTE       "
	ELSE
		PRINT "CODIGO : ",ERR
		PRINT "MENSAJE :",ERT$(ERR)
	END IF
	END IF
	RESUME 1200
1200
 LABE_ATRA:

 END

1300   SUB GENRPTREP (STRING ESTR_INGS BY DESC, STRING CRTR_ORIG BY DESC,&
          STRING CRTR_REEM BY DESC)

 !   Reemplaza en ESTR_INGS el CRTR_ORIG(caracter original)
 !   por CRTR_REEM(carater(es) de reemplazo)
 !
 !   Ejemplo de llamada de esta subrutina:
 !       PICT_FILD = 999999,999
 !      CALL GENRPTREP(PICT_FILD,",","V")
 !   Esta subrutina devuelve en PICT_FILD el valor 999999V999

   LARGO_STR% = LEN(ESTR_INGS) 
   VAR_AUX$ = ""
   FOR I% = 1 TO LARGO_STR%
      IF MID$(ESTR_INGS,I%,1) = CRTR_ORIG THEN
         VAR_AUX$ = VAR_AUX$ + CRTR_REEM
      ELSE
         VAR_AUX$ = VAR_AUX$ + MID$(ESTR_INGS,I%,1)
      END IF
   NEXT I%
   ESTR_INGS = VAR_AUX$
   END SUB

1400   SUB GENMTXL72 (STRING P1 BY DESC, STRING P2 BY DESC,INTEGER P3 )

 !   Entrega una lina COBOL de largo 72 caracteres
 !   incorporando un relleno entre los dos
 !   parametros ingresados de input
 !   la respuesta la entrega en el primer parametro
      DECLARE STRING V_M(9)
      DECLARE INTEGER CONSTANT	&
	MG_0  = 1	,&
	MG_7  = 2	,&
	MG_8  = 3	,&
	MG_12 = 4	,&
	MG_16 = 5	,&
	MG_20 = 6	,&
	MG_24 = 7	,&
	MG_28 = 8

	V_M(MG_0)  = ""
	V_M(MG_7)  = "      *"
	V_M(MG_8)  = "       "
	V_M(MG_12) = "           "
	V_M(MG_16) = "               "
	V_M(MG_20) = "                   "
	V_M(MG_24) = "                       "
	V_M(MG_28) = "                           "
	L_REG% = LEN(V_M(P3)) + LEN(P1) + LEN(P2)
	RELL$ = ""
	IF L_REG% < 72 THEN
		L_RELL% = 72 - L_REG%
		FOR RELL% = 1 TO L_RELL%
			RELL$ = RELL$ + " "
		NEXT RELL%
	END IF
	P1 = P1 + RELL$ + P2
   END SUB

1500   SUB NUM5 (STRING P1 BY DESC)

	IF LEN(P1) = 1 THEN
		P1 = "0000" + P1
	ELSE
	IF LEN(P1) = 2 THEN
		P1 = "000" + P1
	ELSE
	IF LEN(P1) = 3 THEN
		P1 = "00" + P1
	ELSE
	IF LEN(P1) = 4 THEN
		P1 = "0" + P1
	END IF
	END IF
	END IF
	END IF
   END SUB
