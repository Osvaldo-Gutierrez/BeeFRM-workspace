100
 !!!===========================================
 !!! Definiciones                             = 
 !!!                 ( INI )                  =
 !!!===========================================

        DECLARE INTEGER CONSTANT FIO_STAT_OKS = 0
        DECLARE INTEGER FIO_STAT
        DECLARE INTEGER FIO_ACCI
        DECLARE INTEGER FIO_RLEN
        DECLARE INTEGER C_FILE_PGI
        DECLARE INTEGER C_FILE_PGO
        DECLARE INTEGER POS_EXEC
        DECLARE INTEGER POS_SQL
        DECLARE INTEGER POS_END_EXEC
        DECLARE INTEGER POS_AST
 !!! matriz de prueba NUMERICA
        DECLARE INTEGER TPG_MAT_HST_NUM(25,25) 
        DECLARE INTEGER I_X
        DECLARE INTEGER I_Y

        DECLARE STRING FIO_BUF0
        DECLARE STRING CPY_B
        DECLARE STRING PASO
        DECLARE STRING IZQ
        DECLARE STRING COPY
        DECLARE STRING BIP
        DECLARE STRING FILE_PGI
        DECLARE STRING FILE_PGO
        DECLARE STRING AUXI_PATH
        DECLARE STRING AUXI_FILE
        DECLARE STRING AUXI_EXTE
 !!! matriz de prueba STRING
        DECLARE STRING TPG_MAT_HST_ALF(25,25) 
 !!!===========================================
 !!! Definiciones                             = 
 !!!                 ( FIN )                  =
 !!!===========================================

 !!!===========================================
 !!! Declaracion de funciones STANDAR VAX-VB  =
 !!!                 ( INI )                  =
 !!!===========================================

    DEF STRING FNC_SYS_LIB_GET_SYMBOL(STRING GET_SYMBOL)
        CALL LIB$GET_SYMBOL(GET_SYMBOL,AUXI$)
        FNC_SYS_LIB_GET_SYMBOL = AUXI$
    END DEF

    DEF INTEGER FNC_SYSPOS(STRING LINEA,STRING ARGBUSQ , INTEGER POSINIC)
        FNC_SYSPOS = POS(LINEA, ARGBUSQ, POSINIC)
    END DEF

    DEF STRING FNC_SYSFORMAT(INTEGER VALFMT, STRING TOTFMT)

        IF TOTFMT = "#" THEN
             FNC_SYSFORMAT = FORMAT$(VALFMT,"#")
        ELSE
        IF TOTFMT = "##" THEN
             FNC_SYSFORMAT = FORMAT$(VALFMT,"##")
        ELSE
        IF TOTFMT = "###" THEN
             FNC_SYSFORMAT = FORMAT$(VALFMT,"###")
        ELSE
        IF TOTFMT = "####" THEN
             FNC_SYSFORMAT = FORMAT$(VALFMT,"####")
        ELSE
        IF TOTFMT = "#####" THEN
             FNC_SYSFORMAT = FORMAT$(VALFMT,"#####")
        ELSE
        IF TOTFMT = "######" THEN
             FNC_SYSFORMAT = FORMAT$(VALFMT,"######")
        END IF
        END IF
        END IF
        END IF
        END IF
        END IF
   END DEF
                          
   DEF STRING FNC_SYSCHR(INTEGER CHA)
        FNC_SYSCHR = CHR$(CHA)
   END DEF

   DEF STRING EMIT_BIP
        PRINT FNC_SYSCHR(7)
   END DEF

   DEF STRING GET_COM1
        GET_COM1 = FNC_SYSCHR(39)
   END DEF

   DEF STRING GET_COM2
        GET_COM2 = FNC_SYSCHR(34)
   END DEF

   DEF STRING FNC_SYSRIGHT(STRING DER, INTEGER DESDE)
        FNC_SYSRIGHT = RIGHT$(DER,DESDE)
   END DEF

   DEF STRING FNC_SYSLEFT(STRING IZQ, INTEGER HASTA)
        FNC_SYSLEFT = LEFT$(IZQ,HASTA)
   END DEF

   DEF STRING FNC_SYSSTR(INTEGER NUME)
        FNC_SYSSTR = STR$(NUME)
   END DEF

   DEF STRING FNC_SYSMID(STRING CADENA, INTEGER DESDE, INTEGER CUANTOS)
        FNC_SYSMID = MID$(CADENA,DESDE,CUANTOS)
   END DEF

   DEF INTEGER FNC_SYSLEN(STRING CADENA)
        FNC_SYSLEN = LEN(CADENA)
   END DEF

   DEF STRING FNC_SYSTIME(INTEGER PARAM)
        FNC_SYSTIME = TIME$(PARAM)
   END DEF

   DEF STRING FNC_SYSDATE(INTEGER PARAM)
        FNC_SYSDATE = DATE$(PARAM)
   END DEF

   DEF STRING FNC_SYSSTRING(INTEGER PARAM1, INTEGER PARAM2)
        FNC_SYSSTRING = STRING$(PARAM1,PARAM2)
   END DEF

   DEF STRING FNC_SYSEDIT(STRING PARAM1, INTEGER PARAM2)
        FNC_SYSEDIT = EDIT$(PARAM1,PARAM2)
   END DEF
 !!!===========================================
 !!! Declaracion de funciones STANDAR VAX-VB  =
 !!!                 ( FIN )                  =
 !!!===========================================

 !!!===========================================
 !!! Declaracion de funciones I/O             =
 !!!                 ( INI )                  =
 !!!===========================================

   DEF INTEGER FIO_PGO_OUT

        ON ERROR GO TO ERR_FIO_PGO_OUT

        OPEN FILE_PGO FOR OUTPUT AS FILE #C_FILE_PGO, ORGANIZATION SEQUENTIAL VARIABLE , RECORDSIZE 255, RECORDTYPE ANY

        GO TO OK_FIO_PGO_OUT
 ERR_FIO_PGO_OUT:
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                PRINT FILE_PGO ," : NOMBRE DE ARCHIVO ILEGAL"
        ELSE 
        IF ERR = 5 THEN
                PRINT FILE_PGO ," ARCHIVO INEXISTENTE"        
        ELSE
                PRINT "CODIGO : ",ERR
                PRINT "MENSAJE :",ERT$(ERR)
        END IF
        END IF

        RESUME 200
 OK_FIO_PGO_OUT:

200

   END DEF


   DEF INTEGER FIO_PGO_PUT(INTEGER FIO_STAT, STRING BUF0)

        ON ERROR GO TO ERR_FIO_PGO_PUT

        PRINT #C_FILE_PGO, BUF0

        GO TO OK_FIO_PGO_PUT
 ERR_FIO_PGO_PUT:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                PRINT FILE_PGO ," : NOMBRE DE ARCHIVO ILEGAL"
        ELSE 
        IF ERR = 5 THEN
                PRINT FILE_PGO ," ARCHIVO INEXISTENTE"        
        ELSE
                PRINT "CODIGO : ",ERR
                PRINT "MENSAJE :",ERT$(ERR)
        END IF
        END IF

        FIO_STAT = 23

        RESUME 300

 OK_FIO_PGO_PUT:

        FIO_STAT = 0
300
   END DEF

   DEF INTEGER FIO_PGI_INP

        ON ERROR GO TO ERR_FIO_PGI_INP

        OPEN FILE_PGI FOR INPUT AS FILE #C_FILE_PGI ,  ORGANIZATION SEQUENTIAL , RECORDTYPE ANY

        GO TO OK_FIO_PGI_INP

 ERR_FIO_PGI_INP:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                PRINT FILE_PGI ," : NOMBRE DE ARCHIVO ILEGAL "
                PRINT " "
        ELSE 
        IF ERR = 5 THEN
                PRINT FILE_PGI ," ARCHIVO INEXISTENTE "        
                PRINT " "        
        ELSE
                PRINT "CODIGO : ",ERR
                PRINT "MENSAJE :",ERT$(ERR)
                PRINT " "
        END IF
        END IF

        FIO_STAT = 23

        RESUME 499
 OK_FIO_PGI_INP:
        FIO_STAT = 0
499

   END DEF

   DEF STRING FIO_PGI_GETNXT

        ON ERROR GO TO ERR_FIO_PGI_GETNXT

        GET #C_FILE_PGI
        FIO_RLEN = RECOUNT
        MOVE FROM #C_FILE_PGI,FIO_BUF0 = FIO_RLEN

        FIO_PGI_GETNXT = FIO_BUF0

        GO TO OK_FIO_PGI_GETNXT

 ERR_FIO_PGI_GETNXT:

        IF ERR = 11 THEN
                FIO_STAT = 10
        ELSE
                PRINT "ERROR(";ERR;") ";ERT$(ERR);" en linea ";erl;", MODULO ";ern$
        END IF

        RESUME 500

 OK_FIO_PGI_GETNXT:
        FIO_STAT = 0
500
   END DEF

 !!!===========================================
 !!! Declaracion de funciones I/O             =
 !!!                 ( FIN )                  =
 !!!===========================================

 !!!===========================================
 !!! Modulo Principal                         =
 !!!                 ( INI )                  =
 !!!===========================================
                         
 !!!	PRINT "INICIO DE SECTION DE PRUEBA DE FUNCIONES"'
 !!!	PRINT "========================================"

 !!! 	I_X = 3
 !!!	I_Y = 4
 !!!        TPG_MAT_HST_NUM(I_X,I_Y) = 34
 !!!        TPG_MAT_HST_ALF(I_X,I_Y) = "IYYYYYYYYYYYYYYYYYYYYYYYYYYF"
 !!!	PRINT "TPG_MAT_HST_NUM(I_X,I_Y) :" + CHR$( TPG_MAT_HST_NUM(I_X,I_Y) )
 !!!	PRINT "TPG_MAT_HST_ALF(I_X,I_Y) :" +       TPG_MAT_HST_ALF(I_X,I_Y)
 !!!        IF TPG_MAT_HST_NUM(I_X,I_Y) = 34 THEN
 !!!            PRINT "DETECTO MATRIZ CON 34"
 !!!	ELSE
 !!!            PRINT "DETECTO MATRIZ CON VALOR DISTINTO A 34"
 !!!	END IF
 !!!	PRINT "FNC_SYS_LIB_GET_SYMBOL(GNS$PTH) :" +  FNC_SYS_LIB_GET_SYMBOL("GNS$PTH") + ":"
 !!!	PRINT "FNC_SYSPOS(ABCDEFGHIJKLM,GH,2) :" ;  FNC_SYSPOS("ABCDEFGHIJKLM","GH",2) ; ":"
 !!!	PRINT "FNC_SYSFORMAT(45,#####) :" + FNC_SYSFORMAT(45,"#####") + ":"
 !!!	PRINT "FNC_SYSCHR(39) :" + FNC_SYSCHR(39) + ":"
 !!!	PRINT "EMIT_BIP :" + EMIT_BIP + ":"
 !!!	PRINT "GET_COM1 :" + GET_COM1 + ":"
 !!!	PRINT "GET_COM2 :" + GET_COM2 + ":"
 !!!	PRINT "FNC_SYSRIGHT(ABCDEFGHIJKLM,4) :" + FNC_SYSRIGHT("ABCDEFGHIJKLM",4) + ":"
 !!!	PRINT "FNC_SYSLEFT(ABCDEFGHIJKLM,4) :"  + FNC_SYSLEFT("ABCDEFGHIJKLM",4) + ":"
 !!!	PRINT "FNC_SYSSTR(45) :"  + FNC_SYSSTR(45) + ":"
 !!!	PRINT "FNC_SYSMID(ABCDEFGHIJKLM,5,4) :"  + FNC_SYSMID("ABCDEFGHIJKLM",5,4) + ":"
 !!!	PRINT "FNC_SYSLEN(ABCDEFGHIJKLM) :"  ; FNC_SYSLEN("ABCDEFGHIJKLM") ; ":"
 !!!	PRINT "FNC_SYSTIME(0) :"  + FNC_SYSTIME(0) + ":"
 !!!	PRINT "FNC_SYSDATE(0) :"  + FNC_SYSDATE(0) + ":"
 !!!	PRINT "FNC_SYSSTRING(33,39) :"  + FNC_SYSSTRING(33,39) + ":"
 !!!	PRINT "FNC_SYSEDIT(abcdEFGhijKLLmno,32) :"  + FNC_SYSEDIT("abcdEFGhijKLLmno",32) + ":"


	AUXI_PATH = FNC_SYS_LIB_GET_SYMBOL("GNS$PTH")

        AUXI_FILE = FNC_SYS_LIB_GET_SYMBOL("GNS$FIL")
        C_FILE_PGI = 1
        C_FILE_PGO = 2

        FILE_PGI = AUXI_PATH
        FILE_PGO = AUXI_FILE + ".VSM"
 !!! 	PRINT "ISP: FILE FILE " ; AUXI_FILE
 !!!	PRINT "ISP: FILE PATH " ; AUXI_PATH
 !!!
 !!! Abre archivos
 !!!
        FIO_ACCI = FIO_PGO_OUT

        FIO_ACCI = FIO_PGI_INP

	IF FIO_STAT <> FIO_STAT_OKS THEN
		GO TO FIN_PGM
	END IF

 CIC_LEE_FILINP:

        CPY_B = FIO_PGI_GETNXT

	IF FIO_STAT  <> FIO_STAT_OKS THEN
		GO TO PUT_PGO_LAST
	END IF

        POS_EXEC     = FNC_SYSPOS(CPY_B,"EXEC",1)
        POS_SQL      = FNC_SYSPOS(CPY_B,"SQL",1)
        POS_INCLUDE  = FNC_SYSPOS(CPY_B,"INCLUDE",1)
        POS_END_EXEC = FNC_SYSPOS(CPY_B,"END-EXEC",1)
        POS_AST      = FNC_SYSPOS(CPY_B,"*",1)

        IF POS_EXEC <> 0 AND POS_SQL <> 0 AND POS_END_EXEC <> 0 AND POS_INCLUDE <> 0 AND POS_AST = 0 THEN 
                PASO = CPY_B
                IZQ = FNC_SYSRIGHT(CPY_B,8)

                CPY_B = "      */SQL/" + IZQ

		FIO_ACCI = FIO_PGO_PUT(FIO_STAT, CPY_B)

                CPY_B = PASO
                COPY = FNC_SYSMID(CPY_B,POS_INCLUDE+8,8)
                CPY_B = "       COPY " + COPY + "."
        END IF

	FIO_ACCI = FIO_PGO_PUT(FIO_STAT, CPY_B)
        GO TO CIC_LEE_FILINP

 PUT_PGO_LAST:

 EOF_BNDCPY:
 FIN_PGM:
600
 END

 !!!===========================================
 !!! Modulo Principal                         =
 !!!                 ( FIN )                  =
 !!!===========================================
