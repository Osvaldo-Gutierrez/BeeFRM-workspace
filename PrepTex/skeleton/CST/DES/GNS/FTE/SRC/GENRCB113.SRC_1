100
        DECLARE INTEGER NUMTOKEN,       SC_NUMTOKEN     ,&
                        SZTOKEN ,       SC_SZTOKEN      ,&
                        TOKEN   ,       SC_TOKEN        ,&
                        P_P     ,       SC_P_P          ,&
                        P_Q     ,       SC_P_Q          ,&
                        SZ_I_B  ,       KK              ,&
                        LL      ,       bb              ,&
                        PONRT   ,       SEMSUM          ,&
                        SM      ,       DL

        DECLARE STRING  C_Q     ,       SC_C_Q          ,&
                        VALTOKEN,       SC_VALTOKEN     ,&
                        STRTOKEN,        ULT_SEC        ,&
                        ANTERIOR,        NEW_PAG        ,&
                        ANTE

        DECLARE INTEGER CONSTANT &
                        KEYTOK = 1,     IDNTOK = 2      ,&
                        NUMTOK = 3,     STRTOK = 4      ,&
                        CHRTOK = 5,     EOLTOK = 6      ,&
                        ETXTOK = 7,     HTAB   = 9

200
        DECLARE INTEGER C_FILE_FLG,     C_FILE_RT       ,&
                        C_FILE_RS,      C_FILE_RF       ,&
                        C_FILE_RR,      C_FILE_RM       ,&
                        C_FILE_RW,      C_FILE_RD       ,&
                        C_FILE_RC,      C_FILE_RE       ,&
                        C_FILE_RO,      C_FILE_RN

        DECLARE INTEGER INDI_LINE,      INDI_COLU       ,&
                        INDI_CORR,      PRIO_SORT       ,&
                        FIRS_DETA,      FIRS_HEAD       ,&
                        MAXI_SORT,      SEM_VAC

        DECLARE INTEGER TOTA_MOVE                       ,&
                        TOTA_CF,        TOTA_IDXS       ,&
                        TOTA_RNP ,      RE


        DECLARE INTEGER CMPO_SUMA,      ESTA_SORT       ,&
                        ZERO_SUPP,      S_SORT          ,&
                        CMPO_WKSS,      HAY_SECC        ,&
                        SW_PF,          ES_NUME         ,&
                        CMPO_NC,        ES_KEY          ,&
                        ES_NP,          CMPO_PCOU

        DECLARE INTEGER INDI_SZTX,      LAST_LINE       ,&
                        LAST_PAHE,      ACCION          ,&
                        CONT_LINE,      RSTO_SZTX       ,&
                        PF_USED,        PF_BLAN         ,&
                        PF_REST,        PF_LINE         ,&
                        PTR_Q,                          &
                        FST_WSS                         ,&
                        DEF_IND_RIGT,   UND_TOT_UND     ,&
                        MAP_TOT_CMPO,   MAP_VEC_UNDE(10)

        DECLARE INTEGER LINE_IDXS(300)   , COLU_IDXS(300) ,&
                        MATR_VALI(300,2) , V_RNP(20,2)    ,&
                        MA_POS(24,50)    , MA_LEN(24,50)  ,&
                        VER_COR(24)      ,   FIL_OCUP(24) ,&
                        BUF_DEST_MOV(300,2)


        DECLARE INTEGER PRI_FILA_OCUP , ULT_FILA_OCUP ,&
                        SEM           , AUX           ,&
                        ULT_CAMPO     , CAMP          ,&
                        INDI_LIN_ANT  , AUX2          ,&
                        CORRE         , IN_CO_RELL(40)        ,&
                        IN_LI_RELL(40)         , RELL          ,&
                        RELL_ACUM     , AUX3          ,&
                        LINEA         , SEM_COD       ,&
                        QQ            , LINEA_TRW     ,&
                        CONT_MOV      , DEST          ,&
                        SEMCONT       , LINUNI

        DECLARE STRING  FILE_FLG,       FILE_RT ,&
                        FILE_RS,        FILE_RF ,&
                        FILE_RR,        FILE_RM ,&
                        FILE_RW,        FILE_RD ,&
                        FILE_RE,        FILE_RC ,&
                        FILE_RO,        FILE_RN

        DECLARE STRING  SIZE_STRI,      CONT_STRI       ,&
                        PRIN_NREG,      PRIN_NORD       ,&
                        PRIN_AUXI,                      &
                        PRIN_LINE,      PRIN_COLU       ,&
                        PRIN_CORR,      STRG_LINP       ,&
                        INTERNO,        O_L             ,&
                        EXTERNO,        CONTINUACION_RPT ,&
                        COLU_STRI,      GRUP_INDI       ,&
                        VARI_ABPA,      VARI_CIPA       ,&
                        VARI_LIMP,      BUFOUT          ,&
                        POS1,           POS2            ,&
                        VARBUF   ,      BUFPREF(300)    ,&
                        VABLE      ,    BUFMOV(300,3)   ,&
                        COMPAR(300,2)  , CMPO_CT_NC(300) ,&
                        ULT_BUF  ,      BUFOUT2         ,&
                        NAME_FILD,      RPT_GLS_PRY     ,&
                        MAP_GLS_CMP,    NAME_FILD_REGI  ,&
                        MAP_VEC_REGI(100)               ,&
                        MAP_GLS_NOMB,   COD_COD(20,300) ,&
                        NAME_SECCION,   BUF_SUM(50,5)   ,&
                        NAME_DECL,      VARI_LARG       ,&
                        NAME_DECL_NEW ,&
                        VARI_TIPO,      SWIT_SECC       ,&
                        RESP_PICT,      RESP_SOUR       ,&
                        VARI_HELP,      VARI_POST       ,&
                        V_M(5),         CMPO_CTRL(300)  ,&
                        CMPO_CTRL_FLD(300)              ,&
                        CMPO_CTRL_CCHH(300)             ,&
                        CMPO_CTRL_CCFF(300)             ,&
                        CMPO_KEY(300),  MOVE_SORT(300)  ,&
                        MOVE_REGI(300)                  ,&
                        VECT_NOSO(300),  RSTO_STRI      ,&
                        DEF_GLS_DEFA                    ,&
                        WSS_UARH,       COD_SECC(30)    ,&
                        V_SECCION(300), INCLU_1         ,&
                        INCLU_2,        PICT_WSS        ,&
                        VARI_SUM,       VARI_OAOD       ,&
                        RPT_GLS_SRT,    RPT_GLS_FOR     ,&
                        MAP_GLS_IDEN,   RPT_GLS_PAI     ,&
                        RPT_GLS_CLI  ,  VARI            ,&
                        SEM5(2)      , VAR_TIE_LIN(50)  ,&
                        T_SECCION(200) , FIL_REV(900)   ,&
                        PAGE_LIMIT     ,  dl_sec(100)   ,&
                        ES_SUM



        DECLARE INTEGER CONSTANT &
                        ZI        = 1,  NO        =  0  ,&
                        NEXT_PAGE = 2,  VALO_FOUT = 60  ,&
                        LINE_USED = 1

 !==========================================================================

    DEF INTEGER RPT_FNC_FFC
        !!! PRINT "       ====================RPT_FNC_FFC  1"
        PRIN_LINE = FORMAT$(INDI_LINE,"##")
        PRIN_COLU = FORMAT$(INDI_COLU,"###")
        PRIN_CORR = FORMAT$(INDI_CORR,"####")
        RPT_GLS_SRT = PRIN_LINE + PRIN_COLU + PRIN_CORR
        INDI_CORR = INDI_CORR + 1
    END DEF

 !==========================================================================

    DEF STRING ESCR_DAT (INTEGER TIPO_CANA,INTEGER MARGEN,STRING BUFOUT)
        !!! PRINT "                 ==========ESCR_DAT 2"
        ACCION = RPT_FNC_FFC
        PRINT #C_FILE_RT,RPT_GLS_SRT + V_M(MARGEN) + BUFOUT
    END DEF

 !==========================================================================

    DEF STRING ESCR_GEN (INTEGER TIPO_CANA,INTEGER MARGEN,STRING BUFOUT)
        !!! PRINT "               ===========ESCR_GEN 3"
        IF TIPO_CANA = 9 THEN
                VARBUF = EDIT$(EDIT$(EDIT$(BUFOUT,8%),128%),16%)
                VARBUF = VARBUF + " "
                Y% = 1
                L% = 1
                YY% = 0
                WHILE (L% <> 0 AND Y% <> YY%)
                        L% = POS(VARBUF," ",Y%)
                        IF ((L% - Y%) > 30) THEN
                                PRINT "  !BUFFER POSEE STRING MAYOR QUE 30 CARACTERES ¡"
                                PRINT VARBUF
                                L% = 0
                        END IF
                YY% = Y%
                Y% = L% + 1
                NEXT
        END IF
        BUFOUT = V_M(MARGEN) + BUFOUT
        PRINT #TIPO_CANA,BUFOUT
    END DEF

 !==========================================================================

    DEF STRING ESCR_REGS (INTEGER TIPO_CANA,INTEGER NREG, INTEGER NORD, INTEGER MARGEN,STRING BUFOUT)
        !!! PRINT "                 ======ESCR_REG 4"
        PRIN_NREG = FORMAT$(NREG,"##")
        PRIN_NORD = FORMAT$(NORD,"###")
        PRIN_AUXI = FORMAT$(AUXI,"####")
        RPT_GLS_SRT = PRIN_NREG + PRIN_NORD + PRIN_AUXI + V_M(MARGEN) + BUFOUT
        AUXI = AUXI + 1
        PRINT #TIPO_CANA, RPT_GLS_SRT
    END DEF

 !=====================================================================

    DEF INTEGER NEXTTOKEN
        !!! PRINT "                        =============NEXTTOKEN 5"
        ON ERROR GO TO LABE_ERRO
        IF TOKEN = ETXTOK THEN
                PRINT "TIPO TOKEN EOF "
                NEXTTOKEN = ETXTOK
                GO TO LABE_ASIG
        END IF
        P_P = P_Q
 LABE_SIGA:
        WHILE (MID$(I_B$,P_P,1) = " " OR ASCII(MID$(I_B$,P_P,1)) = HTAB) AND &
                        P_P <= SZ_I_B
                P_P = P_P + 1
        NEXT
        P_Q = P_P
        IF P_P > SZ_I_B OR I_B$ = "" THEN
                GET #C_FILE_FLG
                SZ_I_B = RECOUNT
                MOVE FROM #C_FILE_FLG , I_B$ = SZ_I_B
                P_P, P_Q  = 1
                GO TO LABE_SIGA
        END IF
        C_Q = MID$(I_B$,P_Q,1)
        IF (C_Q >= "A" AND C_Q <= "Z") OR (C_Q >= "a" AND C_Q <= "z") THEN
                 WHILE (MID$(I_B$,P_P,1) >= "A" AND MID$(I_B$,P_P,1) <= "Z" &
                    OR  MID$(I_B$,P_P,1)  = "_"           &
                    OR  MID$(I_B$,P_P,1) >= "a" AND &
                        MID$(I_B$,P_P,1) <= "z")
                                        P_P = P_P + 1
                 NEXT
                 SZTOKEN = P_P - P_Q
                 NEXTTOKEN = IDNTOK
                 VALTOKEN = MID$(I_B$,P_Q,SZTOKEN)
        ELSE
        IF C_Q >= "0" AND C_Q <= "9" THEN
                  WHILE MID$(I_B$,P_P,1) >= "0" AND MID$(I_B$,P_P,1) <= "9"
                             P_P = P_P + 1
                  NEXT
                  SZTOKEN = P_P - P_Q
                  NEXTTOKEN = NUMTOK
                  VALTOKEN = MID$(I_B$,P_Q,SZTOKEN)
                  NUMTOKEN  = VAL(VALTOKEN)
        ELSE
        IF C_Q = '"'  OR C_Q = "'" THEN
                P_P = P_P + 1
                WHILE MID$(I_B$,P_P,1) <> C_Q
                      P_P = P_P + 1
                NEXT
                SZTOKEN = P_P - (P_Q + 1)
                P_P = P_P + 1
                NEXTTOKEN = STRTOK
                STRTOKEN = MID$(I_B$,P_Q + 1,SZTOKEN)
                VALTOKEN = C_Q + STRTOKEN + C_Q
        ELSE
                NEXTTOKEN = CHRTOK
                VALTOKEN = MID$(I_B$,P_P,1)
                P_P = P_P + 1
                SZTOKEN = 1
        END IF
        END IF
        END IF

        GO TO LABE_ASIG
 LABE_ERRO:
        IF ERR = 11 THEN
                NEXTTOKEN = ETXTOK
        ELSE
                PRINT "ERROR(";ERR;") ";ERT$(ERR);" en linea ";erl;", MODULO ";ern$
        END IF
        RESUME 800
 LABE_ASIG:
        P_Q = P_P
800
        END DEF

 !==========================================================================

    DEF INTEGER NEXTSCANN
        !!! PRINT "                       ========NEXTSCAN 6"
        SC_P_P = SC_P_Q
        WHILE MID$(SC_I_B$,SC_P_P,1) = " " OR &
        ASCII(MID$(SC_I_B$,SC_P_P,1)) = HTAB
                SC_P_P = SC_P_P + 1
        NEXT
        IF MID$(SC_I_B$,SC_P_P,1) = "'" THEN
                NEXTSCANN= ETXTOK
                SC_VALTOKEN = ""
                GO TO SC_LABE_ASIG
        ELSE
                SC_P_Q = SC_P_P
        END IF
        PTR_Q = SC_P_Q
        SC_C_Q = MID$(SC_I_B$,SC_P_Q,1)
        IF (SC_C_Q >= "A" AND SC_C_Q <= "Z") OR &
           (SC_C_Q >= "a" AND SC_C_Q <= "z")  THEN
                WHILE ( MID$(SC_I_B$,SC_P_P,1) >= "A" AND &
                        MID$(SC_I_B$,SC_P_P,1) <= "Z"   )       OR  &
                        MID$(SC_I_B$,SC_P_P,1)  = "-"           OR  &
                      ( MID$(SC_I_B$,SC_P_P,1) >= "0" AND &
                        MID$(SC_I_B$,SC_P_P,1) <= "9"   )       OR  &
                      ( MID$(SC_I_B$,SC_P_P,1) >= "a" AND &
                        MID$(SC_I_B$,SC_P_P,1) <= "z"   )
                                SC_P_P = SC_P_P + 1
                NEXT
                SC_SZTOKEN = SC_P_P - SC_P_Q
                NEXTSCANN = IDNTOK
                SC_VALTOKEN = MID$(SC_I_B$,SC_P_Q,SC_SZTOKEN)
        ELSE
        IF SC_C_Q >= "0" AND SC_C_Q <= "9" THEN
                WHILE   MID$(SC_I_B$,SC_P_P,1) >= "0" AND &
                        MID$(SC_I_B$,SC_P_P,1) <= "9"
                                SC_P_P = SC_P_P + 1
                NEXT
                SC_SZTOKEN      = SC_P_P - SC_P_Q
                NEXTSCANN       = NUMTOK
                SC_VALTOKEN     = MID$(SC_I_B$,SC_P_Q,SC_SZTOKEN)
                SC_NUMTOKEN     = VAL(SC_VALTOKEN)

        ELSE
                NEXTSCANN       = CHRTOK
                SC_VALTOKEN     = MID$(SC_I_B$,SC_P_P,1)
                SC_P_P          = SC_P_P + 1
                SC_SZTOKEN      = 1
        END IF
        END IF
 SC_LABE_ASIG:
        SC_P_Q = SC_P_P
   END DEF

 !=================================================================

 DEF INTEGER INI_MATR
        !!! PRINT "                  ================INI_MATR  7"
        FOR I% = 1 TO 24 STEP 1
                VER_COR(I%) = 0
        NEXT I%
 END DEF

 !==================================================================

   DEF INTEGER INIC_IALI
        !!! PRINT "                        ============INIC_IALI 8"
        CONTINUACION_RPT = "NO"
        PAGE_LIMIT = "RPT-PAGE-LIMIT"
        MAXI_SORT = 0
        C_FILE_FLG = 1
        C_FILE_RT = 2
        C_FILE_RS = 3
        C_FILE_RF = 4
        C_FILE_RR = 5
        C_FILE_RM = 6
        C_FILE_RW = 7
        C_FILE_RD = 8
        C_FILE_RE = 9
        C_FILE_RC = 10
        C_FILE_RO = 11
        C_FILE_RN = 12
        GRUP_INDI = ""
        FST_WSS = NO
        S_SORT = NO
        V_M(1) = "       "
        V_M(2) = "           "
        V_M(3) = "              "
        V_M(4) = "                 "
        V_M(5) = ""
        O_L  = CHR$(13) + CHR$(10)
        P_P,P_Q,INDI_LINE = 1
        FOR I% = 1 TO 30 STEP 1
                CMPO_KEY(I%) = ""
        NEXT I%

        FOR I% = 1 TO 50
                BUF_SUM(I%,1) = ""
                BUF_SUM(I%,2) = ""
                BUF_SUM(I%,3) = ""
                BUF_SUM(I%,4) = ""
                BUF_SUM(I%,5) = ""
        NEXT I%

        FOR I% = 1 TO 300 STEP 1
                BUFMOV(I%,1) = ""
                BUFMOV(I%,2) = ""
                BUFPREF(I%) = ""
                V_SECCION(I%) = ""
                CMPO_CT_NC(I%) = ""
                MATR_VALI(I%,1) = NO
                MATR_VALI(I%,2) = NO
        NEXT I%

        FOR I% = 1 TO 900
                FIL_REV(I%) = ""
        NEXT I%

        WSS_UARH = "SPACES."

        CALL LIB$GET_SYMBOL("GNS$PRY",RPT_GLS_PRY)

        CALL LIB$GET_SYMBOL("PTH",FILE_FLG)
        CALL LIB$GET_SYMBOL("GNS$SOP",RPT_GLS_FOR)
        CALL LIB$GET_SYMBOL("GNS$PAI",RPT_GLS_PAI)
        CALL LIB$GET_SYMBOL("GNS$CLI",RPT_GLS_CLI)
        MAP_GLS_IDEN = DATE$(0%) + " " + TIME$(0%) + "     ,PAI=" + RPT_GLS_PAI + " ,CLI=" + RPT_GLS_CLI + " ,SOP=" + RPT_GLS_FOR
        MAP_GLS_IDEN = "      *    " + EDIT$(MAP_GLS_IDEN,32) + "  V 1.1.3 "


        OPEN FILE_FLG FOR INPUT AS FILE #C_FILE_FLG ,RECORDSIZE 255,    &
                ORGANIZATION SEQUENTIAL VARIABLE    ,RECORDTYPE ANY

        GET #C_FILE_FLG
        SZ_I_B  = RECOUNT
        MOVE FROM #C_FILE_FLG , I_B$ = SZ_I_B

   END DEF

 !================================================================

 !!! LLENA MATRICES MA_POS "INDICA CAMPO DE LA LINEA DONDE COMIENZA EL STRING"
 !!! MA_LEN "INDICA LARGO DE STRING",  VER_COR "INDICA LA CANTIDAD DE CAMPOS
 !!! ACUPADOS DE CADA LINEA"

   DEF INTEGER LLEN_MATR_UBIC
        !!! PRINT "             ===================LLEN_MATR_UBIC 9"

        VER_COR(IN_LI_RELL(II%)) = VER_COR(IN_LI_RELL(II%)) + 1
        MA_LEN(IN_LI_RELL(II%),VER_COR(IN_LI_RELL(II%))) = AUX2
        MA_POS(IN_LI_RELL(II%),VER_COR(IN_LI_RELL(II%))) = IN_CO_RELL(II%)

   END DEF

 !=================================================================


    DEF INTEGER FILA_COLU
        !!! PRINT "                     ========FILA COLU  10"
        TOTA_IDXS = TOTA_IDXS + 1
        TOKEN = NEXTTOKEN
        TOKEN = NEXTTOKEN
        MATR_VALI(NUMTOKEN,LINE_USED) = ZI
        LINE_IDXS(TOTA_IDXS) = NUMTOKEN
        IN_LI_RELL(TOTA_IDXS) = NUMTOKEN
        BUF_DEST_MOV(DEST,1) = NUMTOKEN
        TOKEN = NEXTTOKEN
        TOKEN = NEXTTOKEN
        COLU_IDXS(TOTA_IDXS) = NUMTOKEN
        IN_CO_RELL(TOTA_IDXS) = NUMTOKEN
        BUF_DEST_MOV(DEST,2) = NUMTOKEN
        DEST = DEST + 1
        TOKEN = NEXTTOKEN
    END DEF

 !====================== DETECTA NUMERO POR SU PICTURE ==============

   DEF INTEGER MAP_FNC_DNUM
        !!! PRINT "                 =================MAP_FNC_DNUM 11"
        ES_NUME = ZI
        FOR I_NUM% = 1 TO LEN(STRTOKEN)
            C_NUM$ = MID$(STRTOKEN,I_NUM%,1)
            IF C_NUM$ <> '9' AND C_NUM$ <> '.' AND C_NUM$ <> ','&
                             AND C_NUM$ <> 'N' THEN
                ES_NUME = NO
            ELSE
            END IF
        NEXT I_NUM%
   END DEF
 !==================================================================
   DEF INTEGER PICTURE_COB
        !!! PRINT "                      ========PICTURE 12"
        VARI_TIPO = ""
        DEF_GLS_DEFA = "VALUE  SPACES."
        TOKEN = NEXTTOKEN
        TOKEN = NEXTTOKEN
        IF TOKEN = NUMTOK THEN
                VARI_LARG = VALTOKEN
                AUX2 = VAL(VARI_LARG)
                VARI_ABPA = "("
                VARI_CIPA = ")"
                TOKEN = NEXTTOKEN
                IF STRTOKEN = "C" THEN
                        STRTOKEN = "X"
                END IF
                VARI_TIPO = STRTOKEN
                PICSUM$ = VARI_TIPO + VARI_ABPA + VARI_LARG + VARI_CIPA
        ELSE
                VARI_LARG = ""
                VARI_ABPA = ""
                VARI_CIPA = ""
                ACCION = MAP_FNC_DNUM
                CALL GENRPTREP(STRTOKEN,"C","X")
                VARI_TIPO = STRTOKEN
                PICSUM$ = VARI_TIPO
                CALL GENRPTMAN(STRTOKEN,"ANX9")
                CALL GENRPTREP(STRTOKEN,"N","9")
                I% = 1
                WHILE I% <= LEN(STRTOKEN)
                        IF MID$(STRTOKEN,1,1) <> MID$(STRTOKEN,I%,1) THEN
                                VARI_TIPO = "X"
                                VARI_LARG = STR$(LEN(STRTOKEN))
                                VARI_ABPA = "("
                                VARI_CIPA = ")"
                                I% = LEN(STRTOKEN)
                        END IF
                        I% = I% + 1
                NEXT
        END IF
        ES_NUME = NO
        IF MID$(VARI_TIPO,1,1) = "N" OR MID$(VARI_TIPO,1,1) = "9" THEN
                DEF_GLS_DEFA = "VALUE ZEROES."
                ES_NUME = ZI
        END IF
        TOKEN = NEXTTOKEN
   END DEF

 !==================================================================

   DEF INTEGER PRIORIDAD
        !!! PRINT "             ===============PRIORIDAD  13"

        PRIO_SORT = SC_NUMTOKEN
        IF PRIO_SORT > 30 THEN
                PRIO_SORT = 30
        END IF
        SCANN = NEXTSCANN
        IF SC_VALTOKEN = "D" THEN
                VARI_OAOD = "    ON DESCENDING KEY "
                SCANN = NEXTSCANN
        ELSE
        IF SC_VALTOKEN = "A" THEN
                SCANN = NEXTSCANN
        END IF
        END IF
   END DEF

 !==================================================================

   DEF INTEGER PUT_OAOD
        !!! PRINT "                  ===============PUT_OAOD 14"

        IF CMPO_KEY(PRIO_SORT) <> "" THEN
                CMPO_KEY(PRIO_SORT) = CMPO_KEY(PRIO_SORT) + O_L + V_M(1)
        END IF
        CMPO_KEY(PRIO_SORT) = CMPO_KEY(PRIO_SORT) + VARI_OAOD +&
                                NAME_FILD + " IN SRT"
   END DEF

 !==================================================================

   DEF INTEGER PUT_CTRL
        !!! PRINT "                     =============PUT_CTRL 15"

        IF CMPO_CTRL(PRIO_SORT) <> '' THEN
                CMPO_CTRL(PRIO_SORT) = CMPO_CTRL(PRIO_SORT) + O_L + V_M(1)
        END IF
        CMPO_CTRL(PRIO_SORT) = CMPO_CTRL(PRIO_SORT) + NAME_FILD + " IN SRT"
        CMPO_CTRL_FLD(PRIO_SORT) = NAME_FILD
        CMPO_CTRL_CCHH(PRIO_SORT) = FLD_ES_CCHH$
        CMPO_CTRL_CCFF(PRIO_SORT) = FLD_ES_CCFF$
        IF PRIO_SORT > MAXI_SORT THEN
                MAXI_SORT = PRIO_SORT
        END IF

   END DEF

 !==================================================================


   DEF INTEGER TEXT
        !!! PRINT "                  ================TEXT 16"
        TOKEN = NEXTTOKEN
        TOKEN = NEXTTOKEN
 !!! solo marca line used si el texto no es BLINK
        L_U% = NUMTOKEN
        INDI_LINE = NUMTOKEN
        IN_LI_RELL(1) = INDI_LINE
        TOKEN = NEXTTOKEN
        TOKEN = NEXTTOKEN
        INDI_COLU = NUMTOKEN
        IN_CO_RELL(1) = INDI_COLU
        INDI_CORR = 10
        TOKEN = NEXTTOKEN
        TOKEN = NEXTTOKEN
        INDI_SZTX = SZTOKEN
        CONT_STRI = STRTOKEN
        TOKEN = NEXTTOKEN
        BUFOUT = "05 FILLER"
        IF VALTOKEN = "&" THEN
                TOKEN = NEXTTOKEN
                CONT_STRI = CONT_STRI + STRTOKEN
                INDI_SZTX = INDI_SZTX + SZTOKEN
                TOKEN = NEXTTOKEN
        END IF
 INI_CIC_TEXT:
        IF VALTOKEN = "BLINK" THEN
                GO TO TEX_LAB_FIN
        ELSE

        IF VALTOKEN = ";" THEN
                GO TO FIN_CIC_TEXT
        ELSE
                TOKEN = NEXTTOKEN
                GO TO INI_CIC_TEXT
        END IF
        END IF
 FIN_CIC_TEXT:
        MATR_VALI(L_U%,LINE_USED) = ZI
        BUFOUT = ESCR_DAT(C_FILE_RT,3,BUFOUT )

        CALL GENRPTALL(CONT_STRI)
 LOOP_TEXT:
        IF LEN(CONT_STRI) > 40 THEN
                RSTO_STRI = "'" + MID$(CONT_STRI,41,LEN(CONT_STRI) - 39)
                CONT_STRI = MID$(CONT_STRI,1,40)
                RSTO_SZTX = INDI_SZTX - 39
                INDI_SZTX = 39
                SIZE_STRI = STR$(INDI_SZTX)
                AUX2 = VAL(SIZE_STRI)
                II% = 1
                CORRE = LLEN_MATR_UBIC
                BUFOUT = "PIC X(" + SIZE_STRI + ")"
                BUFOUT = ESCR_DAT(C_FILE_RT,4,BUFOUT)
                BUFOUT = "VALUE " + CONT_STRI + "'."
                BUFOUT = ESCR_DAT(C_FILE_RT,4,BUFOUT)
                IF RSTO_SZTX > 0 THEN
                        INDI_SZTX = RSTO_SZTX
                        CONT_STRI = RSTO_STRI
                        INDI_COLU = INDI_COLU + 39
                        IN_CO_RELL(1) = INDI_COLU
                        COLU_STRI = STR$(INDI_COLU)
                        BUFOUT = "05 FILLER"
                        BUFOUT = ESCR_DAT(C_FILE_RT,3,BUFOUT)
                        GO TO LOOP_TEXT
                END IF
        ELSE
                SIZE_STRI = STR$(INDI_SZTX)
                AUX2 = VAL(SIZE_STRI)
                II% = 1
                CORRE = LLEN_MATR_UBIC
                BUFOUT = "PIC X(" + SIZE_STRI + ")"
                BUFOUT = ESCR_DAT(C_FILE_RT,4,BUFOUT)
                BUFOUT = "VALUE " + CONT_STRI + "."
                BUFOUT = ESCR_DAT(C_FILE_RT,4,BUFOUT)
        END IF
 TEX_LAB_FIN:
   END DEF

 !==================================================================

   DEF INTEGER ESCR_DECL
        !!! PRINT "              =========ESCR_DECL 17"
        INCLU_1 = NAME_DECL
        CALL GENRPTREP(INCLU_1,"-","_")
        INCLU_2 = "*% INCLUDE " + INCLU_1 + " OF ^gen^"
        INCLU_1 = "*% INCLUDE " + INCLU_1 + " OF ^txt^"
        BUFOUT = ESCR_GEN(C_FILE_RD,1,"D-" + NAME_DECL + " SECTION.")
        BUFOUT = ESCR_GEN(C_FILE_RD,2,"USE BEFORE REPORTING " + NAME_DECL_NEW + ".")
        BUFOUT = ESCR_GEN(C_FILE_RD,1,"INI-" + NAME_DECL + ".")
        PRINT #C_FILE_RD,INCLU_1
        IF SW_INCLU_2 = ZI THEN
                PRINT #C_FILE_RD,INCLU_2
        END IF
        BUFOUT = ESCR_GEN(C_FILE_RD,1,"FIN-" + NAME_DECL + ".")
        BUFOUT = ESCR_GEN(C_FILE_RD,2,       "EXIT.")
        SW_INCLU_2 = NO
   END DEF

 !--------------------------------------------------------------------

   DEF INTEGER ESCR_DECL_NEW
        !!! PRINT "                 =============ESCR_DECL_NEW  18"
        INCLU_1 = NAME_DECL_NEW
        CALL GENRPTREP(INCLU_1,"-","_")
        INCLU_2 = "*% INCLUDE " + INCLU_1 + " OF ^gen^"
        INCLU_1 = "*% INCLUDE " + INCLU_1 + " OF ^txt^"
        BUFOUT = ESCR_GEN(C_FILE_RC,1,"D-" + NAME_DECL_NEW + " SECTION.")
        BUFOUT = ESCR_GEN(C_FILE_RC,1,"INI-" + NAME_DECL_NEW + ".")
        PRINT #C_FILE_RC,INCLU_1
        IF SW_INCLU_2 = ZI THEN
                PRINT #C_FILE_RC,INCLU_2
        END IF
        BUFOUT = ESCR_GEN(C_FILE_RC,1,"FIN-" + NAME_DECL_NEW + ".")
        BUFOUT = ESCR_GEN(C_FILE_RC,2,       "EXIT.")
        SW_INCLU_2 = NO
   END DEF


 !==================================================================
   DEF INTEGER ANAL_CCHH
        !!! PRINT "            =============ANAL_CCHH  19%%%%%%%%%%%%%%%%%"
        ES_NP = NO
        SWIT_SECC = "CH-"  + INTERNO + "-" + NAME_FILD
        SCANN = NEXTSCANN
        IF SCANN <> NUMTOK THEN
                GO TO FIN_CCHH
        END IF
        INDI_COLU = 0
        INDI_LINE = SC_NUMTOKEN
        SCANN = NEXTSCANN
        SCANN = NEXTSCANN
        LAST_LINE = SC_NUMTOKEN
        SCANN = NEXTSCANN
        IF SC_VALTOKEN = "NP" THEN
                ES_NP = ZI
                kk = kk + 1
                cod_secc(kk) = NAME_FILD
                TOTA_RNP = TOTA_RNP + 1
                V_RNP(TOTA_RNP,1) = INDI_LINE
                V_RNP(TOTA_RNP,2) = LAST_LINE
                SCANN = NEXTSCANN
        END IF
        FOR I% = INDI_LINE TO LAST_LINE STEP 1
                IF V_SECCION(I%) <> "" THEN
                        PRINT "ERROR: LINEA " ; I% ; " DOBLEMENTE ASIGNADA "
                        PRINT V_SECCION(I%) ; " Y "
                        PRINT SWIT_SECC
                        PRINT ""
                END IF
                V_SECCION(I%) = SWIT_SECC
        NEXT I%
        CONT_LINE = 0
        T_SECCION(BB) = SWIT_SECC
        BB = BB + 1
        I% = LAST_LINE
        WHILE I% > INDI_LINE AND I% > 0
                IF MATR_VALI(I%,LINE_USED) = NO THEN
                        MATR_VALI(I%,LINE_USED) = 2
                        CONT_LINE = CONT_LINE + 1
                ELSE
                        I% = INDI_LINE
                END IF
                I% = I% - 1
        NEXT
 !!!
 !!! Escribe la declarativa para el campo CONTROL HEADING
 !!!
        FLD_ES_CCHH$ = "SI"
        NAME_DECL_NEW = "CH-" + INTERNO + "-" + NAME_FILD
        NAME_DECL = "OLD-CH-" + INTERNO + "-" + NAME_FILD
        SW_INCLU_2 = ZI
        ACCION = ESCR_DECL
        SW_INCLU_2 = ZI
        ACCION = ESCR_DECL_NEW
        I_M% = 1
        BUFOUT = "01  " + NAME_DECL_NEW + "."
        BUFOUT = ESCR_DAT(C_FILE_RT,1,BUFOUT)
        INDI_CORR = INDI_CORR - 1




 FIN_CCHH:
   END DEF
 !==================================================================
   DEF INTEGER ANAL_CCFF
        !!! PRINT "                 ================ANAL_CCFF 20¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡"
        ES_NP = NO
        SWIT_SECC = "CF-" + INTERNO + "-" +  NAME_FILD
        SCANN = NEXTSCANN
        IF SCANN <> NUMTOK THEN
                GO TO FIN_CCFF
        END IF
        INDI_COLU = 0
        INDI_LINE = SC_NUMTOKEN
        SCANN = NEXTSCANN
        SCANN = NEXTSCANN
        LAST_LINE = SC_NUMTOKEN
        SCANN = NEXTSCANN
        IF SC_VALTOKEN = "NP" THEN
                ES_NP = ZI
                kk = kk + 1
                cod_secc(kk) = name_fild

        END IF
        FOR I% = INDI_LINE TO LAST_LINE STEP 1
                IF V_SECCION(I%) <> "" THEN
                        PRINT "ERROR: LINEA " ; I% ; " DOBLEMENTE ASIGNADA "
                        PRINT V_SECCION(I%) ; " Y "
                        PRINT SWIT_SECC
                        PRINT ""
                END IF
                V_SECCION(I%) = SWIT_SECC
        NEXT I%
        T_SECCION(BB) = SWIT_SECC
        BB = BB + 1
        CONT_LINE = 0
        I% = LAST_LINE
        WHILE I% > INDI_LINE AND I% > 0
                IF MATR_VALI(I%,LINE_USED) = NO THEN
                        MATR_VALI(I%,LINE_USED) = 2
                        CONT_LINE = CONT_LINE + 1
                ELSE
                        I% = INDI_LINE
                END IF
                I% = I% - 1
        NEXT
 !!!
 !!! Escribe la declarativa para el campo CONTROL FOOTING
 !!!
        FLD_ES_CCFF$ = "SI"
        NAME_DECL = "OLD-CF-" + INTERNO + "-" + NAME_FILD
        NAME_DECL_NEW = "CF-" + INTERNO + "-" + NAME_FILD
        SW_INCLU_2 = ZI
        ACCION = ESCR_DECL
        SW_INCLU_2 = ZI
        ACCION = ESCR_DECL_NEW
        BUFOUT = "01  " + NAME_DECL_NEW + "."
        BUFOUT = ESCR_DAT(C_FILE_RT,1,BUFOUT)
        I_M% = 2
        BUFOUT = "       " + NAME_FILD
        IF ESTA_SORT = ZI THEN
        END IF
        IF ES_NP = ZI THEN
                I_M% = 2
 !!!            BUFOUT = "   NEXT GROUP NEXT PAGE"
        ELSE
                IF CONT_LINE > 0 THEN
                        I_M% = 2
 !!!                    BUFOUT = "   NEXT GROUP PLUS " + STR$(CONT_LINE)
                        CONT_LINE = 0
                END IF
        END IF
   FIN_CCFF:
   END DEF

 !==================================================================

   DEF INTEGER MAP_FNC_UND
   !!! PRINT "                         ========MAP_FNC_UND 21"
   MAP_GLS_CMP = STRTOKEN
   CALL GENRPTREP(MAP_GLS_CMP,"_","-")
   AUX_REG$ = ""
 UND_LAB_BCI:
   UND_TOT_UND = 0
   FOR I% = 1 TO LEN(MAP_GLS_CMP)
      IF MID$(MAP_GLS_CMP,I%,1) = "$" THEN
         UND_TOT_UND = UND_TOT_UND + 1
         MAP_VEC_UNDE(UND_TOT_UND) = I%
      END IF
   NEXT I%
   IF UND_TOT_UND > 0 THEN
        AUX_REG$ = LEFT$(MAP_GLS_CMP,MAP_VEC_UNDE(1) - 1)
        MAP_GLS_CMP = RIGHT$(MAP_GLS_CMP,MAP_VEC_UNDE(2) + 1 )
   END IF
   NAME_FILD_REGI = MAP_GLS_CMP

 UND_LAB_CIC:
   UND_TOT_UND = 0
   FOR I% = 1 TO LEN(MAP_GLS_CMP)
      IF MID$(MAP_GLS_CMP,I%,1) = "-" THEN
         UND_TOT_UND = UND_TOT_UND + 1
         MAP_VEC_UNDE(UND_TOT_UND) = I%
      END IF
   NEXT I%

   IF AUX_REG$ = "" THEN
        AUX_REG$ = LEFT$(MAP_GLS_CMP,MAP_VEC_UNDE(1) - 1)
   END IF

   MAP_GLS_NOMB = RIGHT$(MAP_GLS_CMP,MAP_VEC_UNDE(1) + 1)
   NAME_FILD = AUX_REG$ + "-" + MAP_GLS_NOMB

   END DEF
 !==================================================================
   DEF INTEGER ANAL_NAME
        !!! PRINT "             ==============ANAL_NAME 22"
        TOKEN = NEXTTOKEN
        TOKEN = NEXTTOKEN
        var1$ = valtoken
        IF STRTOKEN = "PAGE_COUNTER" THEN
                STRTOKEN = "RPT_" + INTERNO + "_PAGE_COUNTER"
        END IF
        IF STRTOKEN = "LINE_COUNTER" THEN
                STRTOKEN = "RPT_" + INTERNO + "_LINE_COUNTER"
        END IF

        ACCION = MAP_FNC_UND
        IF NAME_FILD = "RPT-" + INTERNO + "-PAGE-COUNTER" THEN
                CMPO_PCOU = ZI
        END IF
        IF MID$(NAME_FILD,1,3) = "SRT" THEN
                CMPO_SRT = ZI
        ELSE
                CMPO_SRT = NO
        END IF
        IF MID$(NAME_FILD,1,3) = "SUM" THEN
                CMPO_SUMA = ZI
                ESTA_SORT = NO
        ELSE
                CMPO_SUMA = NO
                ESTA_SORT = ZI
        END IF
        IF MID$(NAME_FILD,1,2) = "WS" THEN
                CMPO_WKSS = ZI
        ELSE
                CMPO_WKSS = NO
        END IF
        ACCION = FILA_COLU
        TOKEN = NEXTTOKEN
   END DEF

 !==================================================================

   DEF INTEGER CALC_PF
        !!! PRINT "                  =========CALC_PF 23"
        IF (VALO_FOUT + PF_BLAN + PF_USED > PAGE_LIMI) THEN
                PF_REST = PF_BLAN - (VALO_FOUT  + PF_BLAN + PF_USED - PAGE_LIMI)
                IF PF_REST <= 0 THEN
                        PF_LINE = VALO_FOUT + 1
                ELSE
                        PF_LINE = VALO_FOUT + 1 + PF_REST
                END IF
        ELSE
                PF_LINE = VALO_FOUT + 1 + PF_BLAN
        END IF
        IF (VABLE <> NAME_DECL_NEW) THEN
          VAR_TIE_LIN(VATILI) = NAME_DECL_NEW
          VATILI = VATILI + 1
          VABLE = NAME_DECL_NEW
        END IF
        BUFOUT = "03 " + NAME_DECL_NEW + "-L" + STR$(LINEA)
        LL = LL + 1
        LINEA = LINEA + 1
        SW_PF = ZI
   END DEF

 !==================================================================

   DEF INTEGER ANAL_HELP
        !!! PRINT "                  ========ANAL_HELP 24"
        IF SC_VALTOKEN = "NS" THEN
                ESTA_SORT = NO
                SCANN = NEXTSCANN
        ELSE
        IF SC_VALTOKEN = "GI" THEN
                GRUP_INDI = "GROUP INDICATE"
                SCANN = NEXTSCANN
        ELSE
        IF SC_VALTOKEN = "NC" THEN
                CMPO_NC = ZI
                SCANN = NEXTSCANN
        ELSE
        IF SCANN = NUMTOK THEN
                ACCION = PRIORIDAD
        ELSE
        IF SC_VALTOKEN = "CH"  THEN
                ACCION = ANAL_CCHH
        ELSE
        IF SC_VALTOKEN = "CF"  THEN
                ACCION = ANAL_CCFF
        ELSE
        ES_SUM = "NO"
        IF SC_VALTOKEN = "SUM" THEN
                ESTA_SORT = NO
                SCANN = NEXTSCANN
                IF SCANN = IDNTOK THEN
                        ES_SUM = "ZI"
                        BUF_SUM (SM,1) = "RT-" + SC_VALTOKEN
                        BUF_SUM (SM,2) = "WSS-SUM-" + SC_VALTOKEN
                        SCANN = NEXTSCANN
                        IF SCANN = IDNTOK THEN
 !!!                            SCANN = NEXTSCANN
                                IF SC_VALTOKEN = "IN" THEN
                                        SCANN = NEXTSCANN
                                        IF SCANN =IDNTOK THEN
                                                BUF_SUM (SM,3) = SC_VALTOKEN
 !!!                                            SM = SM + 1
                                        END IF
                                END IF
                        END IF
                END IF
                SEMSUM = 1
                VARI_SUM = MID$(SC_I_B$,PTR_Q,LEN(SC_I_B$) - PTR_Q )
                SCANN = NEXTSCANN
                TOKEN = NEXTTOKEN
                IF VALTOKEN = "&" THEN
                    TOKEN = NEXTTOKEN
                    VARI_SUM = VARI_SUM + STRTOKEN
                END IF
                SCANN = ETXTOK
        ELSE
                VARI_SUM = ""
                SCANN = NEXTSCANN

        END IF
        END IF
        END IF
        END IF
        END IF
        END IF
        END IF
   END DEF

 !==================================================================

   DEF INTEGER PROC_SECC
        !!! PRINT "                  ============PROC_SECC 25%%%%%%%%%%%%%%%%"
        BUFOUT = "01  " + NAME_DECL_NEW
        FOR I% = INDI_LINE TO LAST_LINE STEP 1
                IF V_SECCION(I%) <> "" THEN
                        PRINT "ERROR: LINEA " ; I% ; " DOBLEMENTE ASIGNADA "
                        PRINT V_SECCION(I%) ; " Y "
                        PRINT SWIT_SECC
                        PRINT ""
                END IF
                V_SECCION(I%) = NAME_DECL_NEW
                DL = DL + 1
                DL_SEC (DL) =  NAME_DECL_NEW
        NEXT I%
        T_SECCION(BB) = SWIT_SECC
        BB = BB + 1
        CONT_LINE = 0
        I% = LAST_LINE
        WHILE I% > INDI_LINE AND I% > 0
                IF MATR_VALI(I%,LINE_USED) = NO THEN
                        MATR_VALI(I%,LINE_USED) = 2
                        CONT_LINE = CONT_LINE + 1
                ELSE
                        I% = INDI_LINE - 1
                END IF
                I% = I% - 1
        NEXT
        IF SWIT_SECC = "PH" THEN
                LAST_PAHE = LAST_LINE
        ELSE
        IF SWIT_SECC = "PF" THEN
                J% = INDI_LINE
                WHILE J% <= LAST_LINE
                        IF MATR_VALI(J%,LINE_USED) = NO THEN
                                PF_BLAN = PF_BLAN + 1
                                J% = J% + 1
                        ELSE
                                J% = LAST_LINE + 1
                        END IF
                NEXT
                J% = INDI_LINE + PF_BLAN
                WHILE J% <= LAST_LINE
                        IF MATR_VALI(J%,LINE_USED) = ZI THEN
                                PF_USED = PF_USED + 1
                                J% = J% + 1
                        ELSE
                                J% = LAST_LINE + 1
                        END IF
                NEXT
        ELSE
        IF SWIT_SECC = "FH" THEN
        ELSE
        IF SWIT_SECC = "FF" THEN
        ELSE
                BUFOUT = "01  " + NAME_DECL_NEW
                IF SC_VALTOKEN = "NP" THEN
                        CONT_LINE = 0
                END IF

        END IF
        END IF
        END IF
        END IF

        IF SWIT_SECC <> "NL" THEN
                I_M% = 1
                IF CONT_LINE > 0 THEN
                        BUFOUT = ESCR_DAT(C_FILE_RT,I_M%,BUFOUT + ".")
                        I_M% = 2
 !!!                    BUFOUT = "   NEXT GROUP PLUS " + STR$(CONT_LINE)
                        CONT_LINE = 0
                END IF
                IF BUFOUT <> "" THEN
                        BUFOUT = ESCR_DAT(C_FILE_RT,I_M%,BUFOUT + "." )
                END IF

        ELSE
                CONT_LINE = 0
        END IF

 !!! se escriben
 !!! su tipo y sus declarativas

        IF RPT_GLS_FOR = "VMS" THEN
                IF SWIT_SECC <> "PH" THEN
                        ACCION = ESCR_DECL
                        ACCION = ESCR_DECL_NEW
                END IF
        ELSE
                IF SWIT_SECC <> "DL" AND SWIT_SECC <> "NL" THEN
                        ACCION = ESCR_DECL
                        ACCION = ESCR_DECL_NEW
                END IF
        END IF

   END DEF

 !==================================================================
   DEF INTEGER SECCION
        !!! PRINT "                =======SECCION  26"
 !!!
 !!! Detecta una de las siguientes  SECCIONES ( PH o PF o FH o FF o DL o PL )
 !!!
        SCANN = NEXTSCANN
        IF SC_VALTOKEN = "PAGE" THEN
                SCANN = NEXTSCANN
                IF SC_VALTOKEN = "HEADING" THEN
                        SWIT_SECC = "PH" + "-" + INTERNO
                ELSE
                IF SC_VALTOKEN = "FOOTING" THEN
                        SWIT_SECC = "PF" + "-" + INTERNO
                ELSE
                IF SC_VALTOKEN = "LIMIT" THEN
                        SWIT_SECC = "PL" + "-" + INTERNO
                ELSE
                        HAY_SECC = NO
                END IF
                END IF
                END IF
        ELSE
        IF SC_VALTOKEN = "FINAL" THEN
                SCANN = NEXTSCANN
                IF SC_VALTOKEN = "HEADING" THEN
                        SWIT_SECC = "FH" + "-" + INTERNO
                ELSE
                IF SC_VALTOKEN = "FOOTING" THEN
                        SWIT_SECC = "FF" + "-" + INTERNO
                ELSE
                        HAY_SECC = NO
                END IF
                END IF
        ELSE
        IF SC_VALTOKEN = "DETAIL" THEN
                SCANN = NEXTSCANN
                IF SC_VALTOKEN = "LINES" THEN
                        SWIT_SECC = "DL" + "-" + INTERNO
                ELSE
                        HAY_SECC = NO
                END IF
        ELSE
        IF SC_VALTOKEN = "NULL" THEN
                SWIT_SECC = "NL" + "-" + INTERNO
        ELSE
                HAY_SECC =  NO
        END IF
        END IF
        END IF
        END IF
   END DEF

 !==================================================================

   DEF INTEGER NAMED_DATA
        !!! PRINT "                  ============NAMED_DATA 27"
        WHILE VALTOKEN <> "NAME"
                TOKEN = NEXTTOKEN
        NEXT
        TOKEN = NEXTTOKEN
        TOKEN = NEXTTOKEN
        HAY_SECC = ZI
        IF TOKEN = STRTOK THEN
                SC_I_B$ = STRTOKEN + "'"
                SC_P_Q = 1
                ACCION = SECCION
        END IF
        IF HAY_SECC = NO THEN
                GO TO FIN_DATA
        END IF
        TOKEN = NEXTTOKEN
        TOKEN = NEXTTOKEN
        TOKEN = NEXTTOKEN
        SC_I_B$  = STRTOKEN + "'"
        SC_P_Q = 1
        SCANN = NEXTSCANN
        IF SWIT_SECC = ( "PL" + "-" + INTERNO ) THEN
                IF SCANN = NUMTOK THEN
                        PAGE_LIMIT = STR$(SC_NUMTOKEN)
                END IF
                GO TO FIN_DATA
        ELSE
 !!!    IF SWIT_SECC = "DL" THEN
 !!!       ELSE
        IF SWIT_SECC = ( "PH-" + INTERNO ) THEN
                IF SCANN = NUMTOK THEN
                        FIRS_HEAD = SC_NUMTOKEN
                        INDI_LINE = SC_NUMTOKEN
                        SCANN = NEXTSCANN
                        SCANN = NEXTSCANN
                        IF SCANN = NUMTOK THEN
                                FIRS_DETA = SC_NUMTOKEN + 1
                                LAST_LINE = SC_NUMTOKEN
                        END IF
                END IF
        END IF
        END IF
 !!!    END IF
        IF SCANN = IDNTOK THEN
                NAME_DECL = "OLD-" + SC_VALTOKEN
                NAME_DECL_NEW = SC_VALTOKEN
                SCANN = NEXTSCANN
        ELSE
                NAME_DECL = "OLD-" + SWIT_SECC
                NAME_DECL_NEW = SWIT_SECC

        END IF
        IF SWIT_SECC <> ("PH-" + INTERNO ) THEN
                IF SCANN = NUMTOK THEN
                        INDI_LINE = SC_NUMTOKEN
                ELSE
                        HAY_SECC  = NO
                END IF
        END IF
        INDI_COLU = 0
        SCANN = NEXTSCANN

        SCANN = NEXTSCANN
        IF SWIT_SECC = ("PH-" + INTERNO) THEN
                ACCION = PROC_SECC
        ELSE
                IF HAY_SECC = ZI AND SCANN = NUMTOK THEN
                        LAST_LINE = SC_NUMTOKEN
                        ACCION = PROC_SECC
                END IF
        END IF
 FIN_DATA:
   END DEF
 !==================================================================


   DEF INTEGER MOSTR_MATR_LLEN
        !!! PRINT "                   =======MOSTR_MATR_LLEN  28"

        FOR PRI_FILA_OCUP = 1 TO 23
        IF MATR_VALI(PRI_FILA_OCUP,LINE_USED) = ZI THEN
                ULT_CAMPO = VER_COR(PRI_FILA_OCUP)
                        PRINT "ULT_CAMP"; ULT_CAMPO
                        FOR CAMP = 1  TO  ULT_CAMPO

                        PRINT "POCICION   " ;MA_POS(PRI_FILA_OCUP,CAMP)
                        PRINT " _________________________  "
                        PRINT "MATR_LARGO " ;MA_LEN(PRI_FILA_OCUP,CAMP)
                        PRINT " ______________"
                        PRINT "******************************  "
                        NEXT CAMP
        END IF
        NEXT PRI_FILA_OCUP
   END DEF

 !========================================================================

 !!! ORDENA MATRICES QUE CONTIENE LOS CAMPOS OCUPADOS POR CADA LINEA  Y
 !!! EL LARGO DE CADA STRING A PARTIR DEL CAMPO ANTES SEÑALADO
 !!! TOMA DE VER_COR LA CANTIDAD DE CAMPOS OCUPADOS POR LINEA

 DEF INTEGER SORT_MATR_UBIC
        !!! PRINT "                  ========SORT_MATR_UBIC 29"

        FOR  PRI_FILA_OCUP = 1 TO 23
        SEM = 1
        IF MATR_VALI(PRI_FILA_OCUP,LINE_USED) = ZI THEN !!!linea usada
                ULT_CAMPO = VER_COR(PRI_FILA_OCUP) !!!cant. campos usados
                WHILE SEM = 1
                SEM = 0
                IF ULT_CAMPO > 1 THEN
                FOR CAMP=1 TO (ULT_CAMPO - 1)
                        IF MA_POS(PRI_FILA_OCUP,CAMP) > MA_POS(PRI_FILA_OCUP,CAMP+1) THEN
                        SEM = 1

                        AUX = MA_POS(PRI_FILA_OCUP,CAMP)
                        MA_POS(PRI_FILA_OCUP,CAMP) = MA_POS(PRI_FILA_OCUP,CAMP+1)
                        MA_POS(PRI_FILA_OCUP,CAMP+1) = AUX

                        AUX = MA_LEN(PRI_FILA_OCUP,CAMP)
                        MA_LEN(PRI_FILA_OCUP,CAMP) = MA_LEN(PRI_FILA_OCUP,CAMP+1)
                        MA_LEN(PRI_FILA_OCUP,CAMP+1) = AUX

                        END IF
                NEXT CAMP
                END IF
                NEXT
        END IF
        NEXT PRI_FILA_OCUP
   END DEF


 !==============================================================

 !!! SE CALCULA  RELLENO Y SE LLENA REGISTRO PARA ORDENAMIENTO

 DEF INTEGER CAL_RELL_FILA
        !!! PRINT "                         ======CAL_RELL_FILA 30"

    FOR  PRI_FILA_OCUP = 1 TO 23
    RELL_ACUM = 0
      IF MATR_VALI(PRI_FILA_OCUP,LINE_USED) = ZI THEN   !!!si linea es ocupada
         ULT_CAMPO = VER_COR(PRI_FILA_OCUP)        !!!cant de campos de linea
         FOR CAMP=1 TO (ULT_CAMPO)
             RELL = MA_POS(PRI_FILA_OCUP,CAMP) - RELL_ACUM - 1
             RELL_ACUM = RELL_ACUM + RELL + MA_LEN(PRI_FILA_OCUP,CAMP)
             IF ((RELL > 0) AND (RELL_ACUM)<133) THEN !!!acota rell de fila
                 INDI_LINE = PRI_FILA_OCUP
                 IF (MA_POS(PRI_FILA_OCUP,CAMP)<2) THEN !!!si es primer campo
                    INDI_COLU = MA_POS(PRI_FILA_OCUP,CAMP)
                  ELSE
                    INDI_COLU = MA_POS(PRI_FILA_OCUP,CAMP) - 1
                 END IF
                 BUFOUT = "05 FILLER PIC X(" +STR$(RELL)+ ")"
                 BUFOUT = ESCR_DAT(C_FILE_RT,3,BUFOUT)
                 BUFOUT = "VALUE SPACES."
                 BUFOUT = ESCR_DAT(C_FILE_RT,3,BUFOUT)
             END IF
          NEXT CAMP
        END IF
        NEXT PRI_FILA_OCUP
     END DEF




 !==================================================================

 ! ------------------------------------------------------------------
 !               MODULO PRINCIPAL
 ! __________________________________________________________________

        ON ERROR GO TO  LABE_BADD
        ACCION = INIC_IALI
        CONT_MOV = 1
        SEMSUM = 0
        DEST = 1
        PS = 1
        PONRT = 0
        SM = 1
        DL = 0
        KK = 0
        BB = 1
        LL = 1
        NEW_PAG = ""
        VABLE = ""
        ACCION = INI_MATR
        WHILE VALTOKEN <> "FORM"
                TOKEN = NEXTTOKEN
        NEXT
        TOKEN = NEXTTOKEN
        TOKEN = NEXTTOKEN
        TOKEN = NEXTTOKEN
        EXTERNO = STRTOKEN
        FILE_RT = RPT_GLS_PRY + "RT" + EXTERNO + ".SRT"
        FILE_RS = RPT_GLS_PRY + "RS" + EXTERNO + ".SOP"
        FILE_RF = RPT_GLS_PRY + "RF" + EXTERNO + ".SOP"
        FILE_RD = RPT_GLS_PRY + "RD" + EXTERNO + ".SOP"
        FILE_RC = RPT_GLS_PRY + "RC" + EXTERNO + ".SOP"
        FILE_RR = RPT_GLS_PRY + "RR" + EXTERNO + ".SRT"
        FILE_RE = RPT_GLS_PRY + "RE" + EXTERNO + ".SOP"
        FILE_RM = RPT_GLS_PRY + "RM" + EXTERNO + ".SOP"
        FILE_RW = RPT_GLS_PRY + "RW" + EXTERNO + ".SRT"
        FILE_RO = RPT_GLS_PRY + "RO" + EXTERNO + ".SRT"
        FILE_RN = RPT_GLS_PRY + "RN" + EXTERNO + ".SRT"

        INTERNO = EXTERNO
        WHILE VALTOKEN <> ";" AND VALTOKEN <> "HELP_FORM"
                TOKEN = NEXTTOKEN
        NEXT
        TOKEN = NEXTTOKEN
        TOKEN = NEXTTOKEN
        IF LEFT$(STRTOKEN,5) = "CONT_" THEN
                INTERNO = RIGHT$(STRTOKEN,6)
                CONTINUACION_RPT = "SI"
        END IF

        WHILE VALTOKEN <> ";" AND VALTOKEN <> "PRE_HELP_ACTION_ROUTINE"
                TOKEN = NEXTTOKEN
        NEXT

        IF VALTOKEN = "PRE_HELP_ACTION_ROUTINE" THEN
                TOKEN = NEXTTOKEN
                TOKEN = NEXTTOKEN
                WSS_UARH  = "'" + STRTOKEN + "'."
        END IF

        OPEN FILE_RT FOR OUTPUT AS FILE #C_FILE_RT, RECORDTYPE ANY,     &
             ORGANIZATION    SEQUENTIAL     VARIABLE, RECORDSIZE 255
        BUFOUT = MAP_GLS_IDEN
        BUFOUT = ESCR_DAT(C_FILE_RT,5,BUFOUT + "4")


        OPEN FILE_RS FOR OUTPUT AS FILE #C_FILE_RS, RECORDTYPE ANY,     &
             ORGANIZATION    SEQUENTIAL     VARIABLE, RECORDSIZE 255
        PRINT #C_FILE_RS,MAP_GLS_IDEN


 !!!    IF CONTINUACION_RPT = "NO" THEN
                OPEN FILE_RF FOR OUTPUT AS FILE #C_FILE_RF, RECORDTYPE ANY,&
                ORGANIZATION    SEQUENTIAL          VARIABLE, RECORDSIZE 255
                PRINT #C_FILE_RF,MAP_GLS_IDEN

 !!!            OPEN FILE_RD FOR OUTPUT AS FILE #C_FILE_RD, RECORDTYPE ANY,&
 !!!            ORGANIZATION    SEQUENTIAL          VARIABLE, RECORDSIZE 255

 !!!    END IF
                OPEN FILE_RD FOR OUTPUT AS FILE #C_FILE_RD, RECORDTYPE ANY,&
                ORGANIZATION    SEQUENTIAL          VARIABLE, RECORDSIZE 255
                PRINT #C_FILE_RD,MAP_GLS_IDEN

                OPEN FILE_RC FOR OUTPUT AS FILE #C_FILE_RC, RECORDTYPE ANY,&
                ORGANIZATION    SEQUENTIAL          VARIABLE, RECORDSIZE 255
                PRINT #C_FILE_RC,MAP_GLS_IDEN

        OPEN FILE_RR FOR OUTPUT AS FILE #C_FILE_RR, RECORDTYPE ANY,     &
             ORGANIZATION    SEQUENTIAL     VARIABLE, RECORDSIZE 255
        PRINT #C_FILE_RR,"         "
        PRINT #C_FILE_RR,"        0"+MAP_GLS_IDEN

        OPEN FILE_RE FOR OUTPUT AS FILE #C_FILE_RE, RECORDTYPE ANY,     &
             ORGANIZATION    SEQUENTIAL     VARIABLE, RECORDSIZE 255
                PRINT #C_FILE_RE,MAP_GLS_IDEN

        OPEN FILE_RM FOR OUTPUT AS FILE #C_FILE_RM, RECORDTYPE ANY,     &
             ORGANIZATION    SEQUENTIAL     VARIABLE, RECORDSIZE 255
        PRINT #C_FILE_RM,MAP_GLS_IDEN

        OPEN FILE_RW FOR OUTPUT AS FILE #C_FILE_RW, RECORDTYPE ANY,     &
             ORGANIZATION    SEQUENTIAL     VARIABLE, RECORDSIZE 255
        BUFOUT = ESCR_REGS(C_FILE_RW,0,1,5,MAP_GLS_IDEN)

        OPEN FILE_RO FOR OUTPUT AS FILE #C_FILE_RO, RECORDTYPE ANY,     &
             ORGANIZATION    SEQUENTIAL     VARIABLE, RECORDSIZE 255
        BUFOUT = ESCR_REGS(C_FILE_RO,0,1,5,MAP_GLS_IDEN)

        OPEN FILE_RN FOR OUTPUT AS FILE #C_FILE_RN, RECORDTYPE ANY,     &
             ORGANIZATION    SEQUENTIAL     VARIABLE, RECORDSIZE 255
        BUFOUT = ESCR_REGS(C_FILE_RN,0,1,5,MAP_GLS_IDEN)

        WHILE TOKEN <> ETXTOK
                IF VALTOKEN <> "TEXT" AND &
                        VALTOKEN <> "FIELD" AND &
                        VALTOKEN <> "NAMED_DATA" THEN
                        TOKEN = NEXTTOKEN
                END IF

 LABE_TEXT:
        IF VALTOKEN = "TEXT" THEN
                ACCION = TEXT
        END IF

 LABE_FILD:
        IF VALTOKEN = "FIELD" THEN
                CMPO_PCOU = NO
                DEF_IND_RIGT = NO
                TOKEN = NEXTTOKEN
                IF VALTOKEN <> "NAME" THEN
                        TOKEN = NEXTTOKEN
                        GO TO LABE_NOFI
                END IF
                VARI_SUM = ""
                GRUP_INDI = ""
                VARI_OAOD = "    ON ASCENDING KEY "
                CMPO_NC = NO
                PRIO_SORT = 0
                ACCION = ANAL_NAME
                IF VALTOKEN = "PICTURE" THEN
                        ACCION = PICTURE_COB
                END IF



 LABE_INDX:
                IF VALTOKEN <> "INDEX" THEN
                        GOTO LABE_HELP
                ELSE
                        TOKEN = NEXTTOKEN
                        IF VALTOKEN <> "=" THEN
                                GO TO LABE_HELP
                        END IF
 LABE_NWIX:
                        INDI_CORR = 10
                        INDI_ACCC = FILA_COLU
                        TOKEN = NEXTTOKEN
                        IF VALTOKEN = ":" THEN
                                GOTO LABE_NWIX
                        END IF
                END IF
 LABE_HELP:
                IF VALTOKEN = "HELP" THEN
                        FLD_ES_CCHH$ = "NO"
                        FLD_ES_CCFF$ = "NO"
                        TOKEN = NEXTTOKEN
                        TOKEN = NEXTTOKEN
                        VARI_HELP = STRTOKEN
                        SC_P_Q = 1
                        SC_I_B$  = STRTOKEN + "'"
                        SCANN = NEXTSCANN

                        WHILE SCANN <> ETXTOK
                                ACCION = ANAL_HELP
                                IF PRIO_SORT <> 0 AND ESTA_SORT = ZI THEN
                                        ES_KEY = ZI
                                ELSE
                                        ES_KEY = NO
                                END IF
                        NEXT
                        IF VARI_SUM = "" THEN
                                TOKEN = NEXTTOKEN
                        END IF
                END IF
                IF ESTA_SORT = ZI AND CMPO_SRT = NO THEN
                        TOTA_MOVE = TOTA_MOVE + 1
                        MOVE_SORT(TOTA_MOVE) = NAME_FILD
                        MOVE_REGI(TOTA_MOVE) = NAME_FILD_REGI
                        MAP_VEC_REGI(TOTA_MOVE) = AUX_REG$
                END IF
                IF ES_KEY = ZI THEN
                        ACCION = PUT_OAOD
                END IF
                IF PRIO_SORT <> 0 THEN
                        ACCION = PUT_CTRL
                END IF
                IF VALTOKEN = "DEFAULT" THEN
                        TOKEN = NEXTTOKEN
                        TOKEN = NEXTTOKEN
                        IF MID$(VARI_TIPO,1,1) = "X" OR &
                           MID$(VARI_TIPO,1,1) = "A" THEN
                                DEFAULT$ = "VALUE '" + STRTOKEN + "'."
                        ELSE
                                DEFAULT$ = 'VALUE ' + STRTOKEN + '.'
                        END IF
                END IF
                ZERO_SUPP = NO
                FIXED_DECIMAL = NO
                WHILE VALTOKEN <> ";"
                        IF VALTOKEN = "SUPPRESS" THEN
                                ZERO_SUPP = ZI
                        ELSE
                        IF VALTOKEN = "FIXED_DECIMAL" THEN
                                FIXED_DECIMAL = ZI
                        ELSE
                        IF VALTOKEN = "AUTOTAB" THEN
                                DEF_GLS_DEFA = DEFAULT$
                        ELSE
                        IF VALTOKEN = "RIGHT_JUSTIFIED" THEN
                                DEF_IND_RIGT = ZI
                        END IF
                        END IF
                        END IF
                        END IF
                        TOKEN = NEXTTOKEN
                NEXT
 !!!    PICT_WSS = PICSUM$
                PICT_WSS = VARI_TIPO
                CALL GENRPTMAN(PICT_WSS,"ANX9,")
                IF ES_SUM = "ZI" THEN
 !!!   mod rel  17-FEB-1997
                        CALL GENRPTREP(PICT_WSS,",","V")
 !!! mmoddddddddd
                        CALL GENRPTREP(VARI_LIMP,"9","Z")
 !!! mmoddddddddd
 !!!   mod rel  17-FEB-1997
                        BUF_SUM(SM,5) = PICT_WSS
                        ES_SUM = "NO"
                END IF


                IF ES_NUME = ZI THEN
                        CALL GENRPTREP(PICT_WSS,",","V")
                ELSE
                        CALL GENRPTREP(PICT_WSS,",","")
                END IF

                IF MID$(PICT_WSS,1,1) = "N" THEN
                        PICT_WSS = "S" + MID$(PICT_WSS,2,LEN(PICT_WSS) - 1)
                END IF
                VARI_LIMP = VARI_TIPO
                CALL GENRPTREP(PICT_WSS,"N","9")
                WSS$ = PICT_WSS
                PICT_WSS = " PIC " + PICT_WSS + VARI_ABPA + VARI_LARG +&
                                     VARI_CIPA
                IF LEN(WSS$) = 1 THEN
                      BUF_SUM(SM,5) = WSS$ + VARI_ABPA + VARI_LARG +&
                                     VARI_CIPA
                END IF
                IF DEF_IND_RIGT = ZI AND ES_NUME = NO THEN
                        PICT_WSS = PICT_WSS + " JUSTIFIED RIGHT"
                END IF
                IF DEF_IND_RIGT = ZI AND ES_NUME = NO THEN
                        VARI_TIPO = VARI_TIPO + O_L + V_M(3) +&
                        "JUSTIFIED RIGHT"
                END IF
                CALL GENRPTMAN(VARI_LIMP,"ANX9,.B")
 !!! CARACTERES DE INSERCION COBOL
                CALL GENRPTREP(VARI_LIMP,"N","9")
                IF ZERO_SUPP = ZI THEN
                        ZERO_SUPP = NO
                        IF MID$(VARI_LIMP,1,1) = "9" THEN
                                FOR J% = 1 TO VAL(VARI_LARG) - 1
                                        VARI_LIMP = VARI_LIMP + "9"
                                NEXT J%
                                VARI_LARG = ""
                                VARI_ABPA = ""
                                VARI_CIPA = ""
                        END IF
                        Y% = INSTR(1%,VARI_LIMP,",")
                        IF Y% = 0 THEN
                                Y% = LEN(VARI_LIMP) - 1
                        ELSE
                                Y% = Y% - 2
                        END IF
                        VARI_POST = MID$(VARI_LIMP, Y% + 1 ,LEN(VARI_LIMP) - Y%)
                        VARI_LIMP = MID$(VARI_LIMP , 1 , Y%)
                        IF FIXED_DECIMAL = NO THEN
                                VARI_LIMP = VARI_LIMP + VARI_POST
                                VARI_POST = ""
                        END IF
                        IF MID$(VARI_TIPO,1,1) = "N" THEN
                                CALL GENRPTREP(VARI_LIMP,"9","-")
                        ELSE
                                CALL GENRPTREP(VARI_LIMP,"9","Z")
                        END IF
                        VARI_LIMP = VARI_LIMP + VARI_POST
                END IF
                IF CMPO_NC = ZI THEN
                        VARI_LIMP = "X"
                END IF
                IF SEMSUM = 1 THEN
 !!!                        RESP_PICT = "2PIC " + PICSUM$
                        RESP_PICT = "PIC " + VARI_LIMP + VARI_ABPA + &
                                    VARI_LARG + VARI_CIPA
                ELSE
                        IF CMPO_NC <> ZI THEN
                                RESP_PICT = "PIC " + VARI_LIMP + VARI_ABPA + &
                                        VARI_LARG + VARI_CIPA
 !!!                                    VARI_LARG + VARI_CIPA + "."
                        ELSE
                                RESP_PICT = "PIC " + VARI_LIMP + VARI_ABPA + &
                                        VARI_LARG + VARI_CIPA
                        END IF
                END IF
                IF VARI_ABPA = "(" THEN
                        AUX2 = VAL(VARI_LARG)
                ELSE
                        AUX2 = LEN(VARI_LIMP)
                END IF

                FOR II% = 1 TO TOTA_IDXS
                        ACCION = LLEN_MATR_UBIC
                NEXT II%

                IF CMPO_WKSS = ZI THEN
                   IF FST_WSS = NO THEN
                        IF CONTINUACION_RPT = "NO" THEN
                                BUFOUT = ESCR_REGS(C_FILE_RW,5,1,1,'01  WSS-' + INTERNO + '.')
                        END IF
                        FST_WSS = ZI
                   END IF
                BUFOUT = ESCR_REGS(C_FILE_RW,5,1,2,"05 " + NAME_FILD + PICT_WSS )
                BUFOUT = ESCR_REGS(C_FILE_RW,5,1,2,"   " + DEF_GLS_DEFA)
                END IF
                IF CMPO_SUMA = ZI THEN
                        RESP_SOUR = VARI_SUM
                ELSE
                        IF ESTA_SORT = ZI THEN    !!! mov1
                                PONRT = 1
                                RESP_SOUR = "05 RT-" + NAME_FILD
                                FOR II% = 1 TO TOTA_IDXS
                                IF CMPO_NC = ZI THEN
                                        CMPO_CT_NC(CONT_MOV) = "SI"
                                        NEW_PAG = SI
                                END IF
                                        BUFMOV(CONT_MOV,1) = NAME_FILD
                                        BUFMOV(CONT_MOV,2) = "SRT"
                                        IF PONRT = 1 THEN
                                                BUFPREF(CONT_MOV) = "RT-"
                                                PONRT = 0
                                        END IF

                                        CONT_MOV = CONT_MOV + 1
                                NEXT II%
                                IF S_SORT = NO THEN
                                        IF CONTINUACION_RPT = "NO" THEN

                                                BUFOUT = ""
                                                BUFOUT = ESCR_REGS(C_FILE_RO,1,1,1,BUFOUT)
                                                SRTOLD$ = "SRT-OLD-" + INTERNO
                                                BUFOUT = "01  "+ SRTOLD$ + "."
                                                BUFOUT = ESCR_REGS(C_FILE_RO,1,1,1,BUFOUT)
                                                BUFOUT = ""
                                                BUFOUT = ESCR_REGS(C_FILE_RN,2,1,1,BUFOUT)
                                                SRTCUR$ = "SRT-CUR-" + INTERNO
                                                BUFOUT = "01  " + SRTCUR$ + "."
                                                BUFOUT = ESCR_REGS(C_FILE_RN,2,1,1,BUFOUT)
                                                BUFOUT = ""
                                                BUFOUT = ESCR_REGS(C_FILE_RR,3,1,1,BUFOUT)
                                                BUFOUT = "01  SRT."
                                                BUFOUT = ESCR_REGS(C_FILE_RR,3,1,1,BUFOUT)
                                        END IF
                                        S_SORT = ZI
                                END IF

                                BUFOUT = "05 " + NAME_FILD + "-OLD" + PICT_WSS + "."
                                BUFOUT = ESCR_REGS(C_FILE_RO,1,1,2,BUFOUT)

                                BUFOUT = "05 " + NAME_FILD + "-CUR" + PICT_WSS + "."
                                BUFOUT = ESCR_REGS(C_FILE_RN,2,1,2,BUFOUT)

                                BUFOUT = "05 " + NAME_FILD + PICT_WSS + "."
                                BUFOUT = ESCR_REGS(C_FILE_RR,3,1,2,BUFOUT)

                        ELSE
                                IF CMPO_WKSS = NO THEN  !!!mov2
                                        IF CMPO_PCOU = ZI THEN
                                                RESP_SOUR = "05 RT-" +&
                                                            NAME_FILD
                                                FOR II% = 1 TO TOTA_IDXS
                                                        IF CMPO_NC = ZI THEN
                                                                CMPO_CT_NC(CONT_MOV) = "SI"
                                                                NEW_PAG = SI
                                                        END IF
                                                        BUFMOV(CONT_MOV,1) = NAME_FILD
                                                        BUFMOV(CONT_MOV,2) = "RPT-VARI-" + INTERNO
                                                        IF PONRT = 1 THEN
                                                                BUFPREF(CONT_MOV) = "RT-"
                                                                PONRT = 0
                                                        END IF

                                                        CONT_MOV = CONT_MOV + 1
                                                NEXT II%

                                        ELSE
 !!!JSS-INI 9-OCT-1993                          RESP_SOUR = "05 RT-" +&
 !!!                                            NAME_FILD + "."
                                                IF AUX_REG$ = "RPT" THEN
                                                        RESP_SOUR = "05 RT-" + NAME_FILD
                                                        FOR II% = 1 TO TOTA_IDXS
                                                                IF CMPO_NC = ZI THEN
                                                                        CMPO_CT_NC(CONT_MOV) = "SI"
                                                                        NEW_PAG = SI
                                                                END IF
                                                                BUFMOV(CONT_MOV,1) = NAME_FILD
                                                                BUFMOV(CONT_MOV,2) = "RPT-VARI"
                                                                IF PONRT = 1 THEN
                                                                        BUFPREF(CONT_MOV) = "RT-"
                                                                        PONRT = 0
                                                                END IF
                                                                CONT_MOV = CONT_MOV + 1
                                                        NEXT II%

                                                ELSE
                                                        RESP_SOUR = "05 RT-" + NAME_FILD
                                                        FOR II% = 1 TO TOTA_IDXS
                                                                IF CMPO_NC = ZI THEN
                                                                        CMPO_CT_NC(CONT_MOV) = "SI"
                                                                        NEW_PAG = SI
                                                                END IF
                                                                BUFMOV(CONT_MOV,1) = NAME_FILD
                                                                BUFMOV(CONT_MOV,2) = AUX_REG$
                                                                IF PONRT = 1 THEN
                                                                        BUFPREF(CONT_MOV) = "RT-"
                                                                        PONRT = 0
                                                                END IF
                                                                CONT_MOV = CONT_MOV + 1
                                                        NEXT II%

                                                END IF
 !!!JSS-FIN 9-OCT-1993
                                        END IF
                                ELSE
                                        PONRT = 1
                                        RESP_SOUR = "05 RT-" + NAME_FILD
                                        FOR II% = 1 TO TOTA_IDXS
                                                IF CMPO_NC = ZI THEN
                                                        CMPO_CT_NC(CONT_MOV) = "SI"
                                                        NEW_PAG = SI
                                                END IF
                                                BUFMOV(CONT_MOV,1) = NAME_FILD
                                                BUFMOV(CONT_MOV,2) = "WSS-" + INTERNO
                                                IF PONRT = 1 THEN
                                                        BUFPREF(CONT_MOV) = "RT-"
                                                        PONRT = 0
                                                END IF
                                                CONT_MOV = CONT_MOV + 1
                                        NEXT II%
                                END IF
                        END IF
                END IF

                FOR I% = 1 TO TOTA_IDXS
                        INDI_CORR = 1
                        INDI_LINE = LINE_IDXS(I%)
                        INDI_COLU = COLU_IDXS(I%)
                        IF CMPO_NC = ZI THEN
                                COLU_STRI = ""
                        ELSE
                                COLU_STRI = " FILLER"
                        END IF
                        INDI_CORR = 700
                        IF CMPO_SUMA = NO THEN
                                BUFOUT = "05 " +  COLU_STRI
                        ELSE
                                BUFOUT = "05 " + NAME_FILD + COLU_STRI
                        END IF

                        IF (NEW_PAG = SI) THEN
 !!!                            BUFOUT = ESCR_DAT(C_FILE_RT,4,RESP_PICT + "." )
                                BUFOUT = ESCR_DAT(C_FILE_RT,4,RESP_PICT )
                                BUFOUT = "VALUE SPACES"
                                BUFOUT = ESCR_DAT(C_FILE_RT,3,BUFOUT + ".")
                                NEW_PAG = ""
                        ELSE
                                BUFOUT = ESCR_DAT(C_FILE_RT,4,RESP_PICT + "." )

                        END IF
                        IF GRUP_INDI <> "" THEN
                                GRUP_INDI = ESCR_DAT(C_FILE_RT,4,GRUP_INDI )

                        END IF
        !!!0002
                        INDI_CORR = INDI_CORR - 3
                        IF SEMSUM = 1 THEN

                                IF SEMSUM = 1 THEN
                                BUF_SUM(SM,4) =  NAME_FILD
 !!!                                    BUF_PICSUM(PS) = PICSUM$
 !!!                                    PS = PS + 1
                                        SM = SM + 1
                                END IF
                                UA% = SM - 1
                                SEMSUM = 0
 !!! 1405
                                RESP_SOUR = "05 RT-" +  BUF_SUM (UA%,4)
                                BUFOUT = ESCR_DAT(C_FILE_RT,3,RESP_SOUR )
                                BUFMOV(CONT_MOV,1) = BUF_SUM (UA%,4)
                                BUFMOV(CONT_MOV,2) = "SRT"
                                CONT_MOV = CONT_MOV + 1
                        ELSE
                                BUFOUT = ESCR_DAT(C_FILE_RT,3,RESP_SOUR )
                        END IF

                NEXT I%
                TOTA_IDXS = 0
        END IF
850
 LABE_DATA:
 !!!
 !!! NAMED_DATA INDEX=n NAME='PH o PF o FH o FF o DL'
 !!!     DATA='{rango asociado a la SECCION}'
 !!!
        IF VALTOKEN = "NAMED_DATA" THEN
                ACCION = NAMED_DATA
        END IF

 LABE_NOFI:
        NEXT

        FOR J% = 1 TO TOTA_RNP
                PUT_NP = NO
                FOR I% = V_RNP(J%,1) TO V_RNP(J%,2) STEP 1
                        IF MATR_VALI(I%,LINE_USED) = ZI AND PUT_NP = NO THEN
                                MATR_VALI(I%,NEXT_PAGE) = ZI
                                PUT_NP = ZI
                        END IF
                NEXT I%
        NEXT J%

        INDI_CORR = 800
        INDI_COLU = 0
        LINEA_TRW = 1
        IN% = 0
 !!! 0001



 !!! 1  implica que se tomaran solo las lineas 01 que tengan definicion
 !!! de lineas ie 02
 !!! 2  , solo cuando se produce cambio de sector (ph,dl,etc), se resetea
 !!! el numero de linea a 1
 !!! 3 el motivo de este while, es que el cambio de line se producia entre
 !!! una linea desocupada (x) y una ocupada(i), en este caso el fin de wrt
 !!! se asocia al nombre de sector mas proximo anteriormente, tal que este
 !!! tenga lineas asociadas ie (MATR_VALI)
 !!! 4 para no iniciar wrt lineas vacias
 !!! 5 este ultimo bufout se debe el cierre del ultimo sector, ya que el
 !!! el while no lo contempla

 !!!EXP_1
        ANTERIOR = ""
        FOR I% = 1 TO 300
                IF V_SECCION(I%) <> "" THEN
                        IF ((V_SECCION(I%) <> ANTERIOR)) THEN
                                LINEA = 1
                        END IF
                        INDI_LINE = I%
                        INDI_COLU = 0
                        BUFOUT = "03 " + V_SECCION(I%) + "-L" + STR$(LINEA)
                        BUFOUT = ESCR_DAT(C_FILE_RT,2,BUFOUT + ".")
                        IF MATR_VALI(I%,LINE_USED) <> ZI THEN
                                BUFOUT = "   05 FILLER PIC X(132)"
                                BUFOUT = ESCR_DAT(C_FILE_RT,2,BUFOUT)
                                BUFOUT = "   VALUE SPACES."
                                BUFOUT = ESCR_DAT(C_FILE_RT,2,BUFOUT)
                        END IF
                        LINEA = LINEA + 1
                END IF
                ANTERIOR = V_SECCION(I%)
        NEXT I%

 !!!EXP_2
        OK2% = 1
        OK3% = 1
        OK4% = 0
        OK% = 0
        IF MATR_VALI(1,LINE_USED) = ZI THEN
                OK% = 1
        END IF
        ANTERIOR = ""
        FOR I% = 1 TO 300
                IF V_SECCION(I%) <> "" THEN
                        IF V_SECCION(I%) <> ANTERIOR THEN
                                        IF ANTERIOR <> "" THEN
                                                BUFOUT = "F-" + "WRT-SEC-" + ANTERIOR + "."
                                                BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
                                                BUFOUT = "EXIT."
                                                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                                                BUFOUT = ""
                                                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                                                OK% = 0
                                                SEC$ = "PF-" + INTERNO
                                                IF ANTERIOR = SEC$ THEN
                                                        LINEA_PF% = LINEA - 1
                                                END IF
                                        END IF
                                        LINEA = 1
                                        BUFOUT = "WRT-SEC-" + V_SECCION(I%) + " SECTION."
                                        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
                                        BUFOUT = "I-" + "WRT-SEC-" + V_SECCION(I%) + "."
                                        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
                                        IF V_SECCION(I%) <> "" THEN
                                                IF V_SECCION(I%) <> ANTERIOR THEN
                                                        FOR L% = I% TO 300
                                                                IF MATR_VALI(L%,LINE_USED) = ZI THEN
                                                                        OK% = 1
                                                                END IF
                                                        NEXT L%
                                                END IF
                                        END IF
                        END IF
                                IF OK% <> 0 THEN
                                        BUFOUT = "MOVE " + V_SECCION(I%) +"-L" +&
                                                STR$(LINEA) + " TO GRC-LINEA-" + INTERNO + "."
                                        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                                        SECC$ = "PF-" + INTERNO
                                        IF V_SECCION(I%) = SECC$ AND OK3% = 1 THEN
                                                BUFOUT = "PERFORM " + INTERNO + "-WRT-RLL-YPF."
                                                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                                                OK3% = 0
                                        ELSE
                                        SECC$ = "PH-" + INTERNO
                                        IF V_SECCION(I%) = SECC$ AND OK2% = 1 THEN
                                                BUFOUT = "PERFORM " + INTERNO + "-WRT-RLL-NWP."
                                                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                                                OK2% = 0
                                        ELSE
                                                BUFOUT = "PERFORM " + INTERNO + "-WRT-LIN-REP."
                                                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                                        END IF
                                        END IF
                                        LINEA = LINEA + 1
                                END IF
                                ANTERIOR = V_SECCION(I%)
                END IF
        NEXT I%
        BUFOUT = "F-" + "WRT-SEC-" + ANTERIOR + "."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
        BUFOUT = "EXIT."
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
        BUFOUT = ""
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
 !!!
 !!! Escribe la RD
 !!!

        IF CONTINUACION_RPT = "NO" THEN
            BUFOUT = ESCR_GEN(C_FILE_RF,1,"RD  RPT-" + INTERNO)
 !!!        BUFOUT = ESCR_GEN(C_FILE_RF,2,"PAGE LIMIT IS " + STR$(PAGE_LIMIT) +&
 !!!                                   " LINE")
            BUFOUT = ESCR_GEN(C_FILE_RF,2,"PAGE LIMIT IS " + PAGE_LIMIT +&
                                       " LINE")
            BUFOUT = ESCR_GEN(C_FILE_RF,2,"HEADING " + STR$(FIRS_HEAD))
            BUFOUT = ESCR_GEN(C_FILE_RF,2,"FIRST DETAIL " + STR$(FIRS_DETA))
 !!!        BUFOUT = ESCR_GEN(C_FILE_RF,2,"FOOTING " + STR$(PAGE_LIMIT - 6))
            BUFOUT = ESCR_GEN(C_FILE_RF,2,"CONTROLS ARE FINAL ")
        END IF
 !!!
 !!! Escribe el SORT priorizado de acuerdo a los subindices del vector
 !!!

        FOR I% = 1 TO 30
                IF CMPO_KEY(I%) <> '' THEN
                        BUFOUT = ESCR_GEN(C_FILE_RS,3,CMPO_KEY(I%))
                END IF
                IF CMPO_CTRL(I%) <> '' THEN
                                BUFOUT = ESCR_GEN(C_FILE_RF,3,CMPO_CTRL(I%))
                END IF
        NEXT I%
 !!!
 !!! Escribe LAS SECTION DE EOF
 !!!

 !!!EXP_3
        PUTCTL$ = "N"
        FOR I% = 1 TO 30

                IF CMPO_CTRL(I%) <> '' THEN
                        IF PUTCTL$ = "N" THEN
                                WSSCTL$ = "WSS-CTL-" + INTERNO
                                BUFOUT = "01  " + WSSCTL$ + "."
                                BUFOUT = ESCR_REGS(C_FILE_RW,1,1,1,BUFOUT)
                                PUTCTL$ = "S"
                        END IF
                        BUFOUT = "05 WSS-CTL-" + CMPO_CTRL_FLD(I%) + " PIC X(01) VALUE SPACES."
                        BUFOUT = ESCR_REGS(C_FILE_RW,1,1,2,BUFOUT)
                        BUFOUT = "   88 SI-CTL-" + CMPO_CTRL_FLD(I%) + " VALUE 'S'."
                        BUFOUT = ESCR_REGS(C_FILE_RW,1,1,2,BUFOUT)
                        BUFOUT = "   88 NO-CTL-" + CMPO_CTRL_FLD(I%) + " VALUE 'N'."
                        BUFOUT = ESCR_REGS(C_FILE_RW,1,1,2,BUFOUT)

                END IF
        NEXT I%



 !!!EXP_4
        PUTCTL$ = "N"
        FOR I% = 1 TO 30

                IF CMPO_CTRL(I%) <> '' THEN
                        IF PUTCTL$ = "N" THEN
                                WSSCF$ = "WSS-CF-" + INTERNO
                                BUFOUT = "01  " + WSSCF$ + "."
                                                BUFOUT = ESCR_REGS(C_FILE_RW,1,1,1,BUFOUT)
                                PUTCTL$ = "S"
                        END IF
                        BUFOUT = "05 WSS-NP-CF-" + CMPO_CTRL_FLD(I%) + " PIC X(01) VALUE SPACES."
                        BUFOUT = ESCR_REGS(C_FILE_RW,1,1,2,BUFOUT)
                        BUFOUT = "   88 SI-NP-CF-" + CMPO_CTRL_FLD(I%) + " VALUE 'S'."
                        BUFOUT = ESCR_REGS(C_FILE_RW,1,1,2,BUFOUT)
                        BUFOUT = "   88 NO-NP-CF-" + CMPO_CTRL_FLD(I%) + " VALUE 'N'."
                        BUFOUT = ESCR_REGS(C_FILE_RW,1,1,2,BUFOUT)
                END IF
        NEXT I%

 !!!EXP_5
        PUTCTL$ = "N"
        FOR I% = 1 TO 30

                IF CMPO_CTRL(I%) <> '' THEN
                        IF PUTCTL$ = "N" THEN
                                WSSCH$ = "WSS-CH-" + INTERNO
                                BUFOUT = "01  " + WSSCH$ + "."
                                                        BUFOUT = ESCR_REGS(C_FILE_RW,1,1,1,BUFOUT)
                                PUTCTL$ = "S"
                        END IF
                        BUFOUT = "05 WSS-NP-CH-" + CMPO_CTRL_FLD(I%) + " PIC X(01) VALUE SPACES."
                        BUFOUT = ESCR_REGS(C_FILE_RW,1,1,2,BUFOUT)
                        BUFOUT = "   88 SI-NP-CH-" + CMPO_CTRL_FLD(I%) + " VALUE 'S'."
                        BUFOUT = ESCR_REGS(C_FILE_RW,1,1,2,BUFOUT)
                        BUFOUT = "   88 NO-NP-CH-" + CMPO_CTRL_FLD(I%) + " VALUE 'N'."
                        BUFOUT = ESCR_REGS(C_FILE_RW,1,1,2,BUFOUT)
                END IF
        NEXT I%




  !!!EXP_6
        WSSNCAE$ = "WSS-NCAE-" + INTERNO
        BUFOUT = "01  " + WSSNCAE$ + "."
        BUFOUT = ESCR_REGS(C_FILE_RW,1,1,1,BUFOUT)
        BUFOUT = "05 WSS-" + INTERNO + "-NO-CABE "  + " PIC X(01) VALUE SPACES."
        BUFOUT = ESCR_REGS(C_FILE_RW,1,1,2,BUFOUT)
        BUFOUT = "   88 SI-" + INTERNO + "-NO-CABE "  + " VALUE 'S'."
        BUFOUT = ESCR_REGS(C_FILE_RW,1,1,2,BUFOUT)
        BUFOUT = "   88 NO-" + INTERNO + "-NO-CABE " +  " VALUE 'N'."
        BUFOUT = ESCR_REGS(C_FILE_RW,1,1,2,BUFOUT)

 !!! AQUI    ESTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
 !!!EXP_7
        FOR I% = 1 TO 50
                IF BUF_SUM(I%,4) <> "" THEN
                        WSSSUM$ = "WSS-SUM-" + INTERNO
                        BUFOUT = "01  " + WSSSUM$ + "."
                        BUFOUT = ESCR_REGS(C_FILE_RW,1,1,1,BUFOUT)
                        I% = 51
                END IF
        NEXT I%
        FOR I% = 1 TO 50
                IF BUF_SUM(I%,4) <> "" THEN
 !!!            BUFOUT = "05 " + BUF_SUM(I%,2) + " PIC X(01) VALUE SPACES."
 !!!            BUFOUT = "05 " + BUF_SUM(I%,2) + " " + RESP_PICT
                BUFOUT = "05 " + BUF_SUM(I%,4)
                BUFOUT = ESCR_REGS(C_FILE_RW,1,1,3,BUFOUT)
                BUFOUT = "PIC   " + BUF_SUM(I%,5)
                BUFOUT = ESCR_REGS(C_FILE_RW,1,1,3,BUFOUT)
                BUFOUT = "VALUE ZEROES."
                BUFOUT = ESCR_REGS(C_FILE_RW,1,1,3,BUFOUT)
                END IF
        NEXT I%

 !!!EXP_7

        WSSSEM$ = "WSS-SEM-" + INTERNO
        BUFOUT = "01  " + WSSSEM$ + "."
        BUFOUT = ESCR_REGS(C_FILE_RW,1,1,1,BUFOUT)
        BUFOUT = "05 WSS-" + INTERNO + "-SEM-NP "  + " PIC X(01) VALUE SPACES."
        BUFOUT = ESCR_REGS(C_FILE_RW,1,1,2,BUFOUT)
        BUFOUT = "   88 SI-" + INTERNO + "-SEM-NP "  + " VALUE 'S'."
        BUFOUT = ESCR_REGS(C_FILE_RW,1,1,2,BUFOUT)
        BUFOUT = "   88 NO-" + INTERNO + "-SEM-NP " +  " VALUE 'N'."
        BUFOUT = ESCR_REGS(C_FILE_RW,1,1,2,BUFOUT)



  !!!EXP_8
        BUFOUT = "05 WSS-SEM-DIB "  + " PIC X(01) VALUE SPACES."
        BUFOUT = ESCR_REGS(C_FILE_RW,1,1,2,BUFOUT)
        BUFOUT = "   88 SI-SEM-DIB "  + " VALUE 'S'."
        BUFOUT = ESCR_REGS(C_FILE_RW,1,1,2,BUFOUT)
        BUFOUT = "   88 NO-SEM-DIB " +  " VALUE 'N'."
        BUFOUT = ESCR_REGS(C_FILE_RW,1,1,2,BUFOUT)

 !!!EXP_9
        BUFOUT = INTERNO + "-CLR-VAR-CTL" +  " SECTION."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
        BUFOUT = "I-"+ INTERNO + "-CLR-VAR-CTL" +  "."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)

        FOR I% = 1 TO 30
                IF CMPO_CTRL(I%) <> '' THEN
                        BUFOUT = "MOVE 'N' TO WSS-CTL-" + CMPO_CTRL_FLD(I%) + " IN " + WSSCTL$  + "."
                        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                END IF
        NEXT I%


        BUFOUT = "F-" + INTERNO + "-CLR-VAR-CTL."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
        BUFOUT = "EXIT."
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
        BUFOUT = ""
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)





        BUFOUT = INTERNO + "-FST-PRO-CTL" + " SECTION."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
        BUFOUT = "I-" + INTERNO + "-FST-PRO-CTL" +  "."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)


        BUFOUT = "PERFORM D-PH-" + INTERNO + "."
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
        FOR I% = 1 TO 30
                IF CMPO_CTRL_CCHH(I%) = "SI" THEN
                        BUFOUT = "PERFORM D-CH-" + INTERNO + "-" + CMPO_CTRL_FLD(I%) + "."
                        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                END IF
        NEXT I%

        BUFOUT = "PERFORM M-PH-" + INTERNO +  "."
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
        BUFOUT = "PERFORM WRT-SEC-PH-" + INTERNO + "."
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
        FOR I% = 1 TO 30
                IF CMPO_CTRL_CCHH(I%) = "SI" THEN
                        BUFOUT = "PERFORM M-CH-" + INTERNO +  "-" +&
                                 CMPO_CTRL_FLD(i%) + "."
                        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                        BUFOUT = "PERFORM " + "WRT-SEC-CH-" + INTERNO + "-" +&
                                 CMPO_CTRL_FLD(I%) + "."
                        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                END IF
        NEXT I%

        BUFOUT = "F-" + INTERNO + "-FST-PRO-CTL."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
        BUFOUT = "EXIT."
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
        BUFOUT = ""
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)




        BUFOUT = INTERNO + "-PRO-RLL-TAM-CF" + " SECTION."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
        BUFOUT = "I-" + INTERNO + "-PRO-RLL-TAM-CF."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)

                        BUFOUT = "PERFORM " + INTERNO + "-CLR-SEM-NWP."
                        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                        BUFOUT = "PERFORM " + INTERNO + "-CLR-CTL-SIZ."
                        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                        BUFOUT = "PERFORM " + INTERNO + "-SUM-SIZ-CTL-CF."
                        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                        BUFOUT = "PERFORM " + INTERNO + "-CHK-SIZ-DIS."
                        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                        BUFOUT = "PERFORM " + INTERNO + "-SET-SMF-NWP-CF."
                        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)

                        BUFOUT = "IF WSS-" + INTERNO + "-NO-CABE = 'S'"
                        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                        BUFOUT = "PERFORM " + INTERNO + "-WRT-RLL-YPH."
                        BUFOUT = ESCR_GEN(C_FILE_RE,3,BUFOUT)

        BUFOUT = "F-" + INTERNO +"-PRO-RLL-TAM-CF."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
        BUFOUT = "EXIT."
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
        BUFOUT = ""
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)




        BUFOUT = INTERNO + "-WRT-RLL-YPH" + " SECTION."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
        BUFOUT = "I-" + INTERNO + "-WRT-RLL-YPH."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)

 !!!            BUFOUT = "MOVE SPACES TO GRC-LINEA-" + INTERNO + "."
 !!!            BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
 !!!            BUFOUT = "PERFORM " + INTERNO + "-WRT-RLL-NWP."
 !!!            BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                BUFOUT = "PERFORM " + INTERNO + "-WRT-PH-SRE."
                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                BUFOUT = "PERFORM " + INTERNO + "-CLR-CTL-SIZ."
                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)



        BUFOUT = "F-" + INTERNO + "-WRT-RLL-YPH."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
        BUFOUT = "EXIT."
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
        BUFOUT = ""
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)


        BUFOUT = INTERNO + "-WRT-PH-SRE" + " SECTION."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
        BUFOUT = "I-" + INTERNO + "-WRT-PH-SRE."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)


                SECC$ = "PF-" + INTERNO
                FOR I% = I TO 300
                        IF V_SECCION(I%) = SECC$  THEN
                                BUFOUT = "PERFORM D-PF-" + INTERNO + "."
                                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                                BUFOUT = "PERFORM M-PF-" + INTERNO + "."
                                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                                BUFOUT = "PERFORM WRT-SEC-PF-" + INTERNO + "."
                                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                                I% = 300
                        END IF
                NEXT I%

                BUFOUT = "MOVE RPT-" + INTERNO +"-PAGE-LIMIT TO " + "RPT-" + INTERNO + "-TOT-LDIS."
                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                BUFOUT = "MOVE  ZEROES TO RPT-" + INTERNO +"-LINE-COUNTER."
                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                BUFOUT = "ADD 1 TO RPT-" + INTERNO + "-PAGE-COUNTER IN RPT-VARI-" + INTERNO + "."
                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)

                BUFOUT = "PERFORM D-PH-" + INTERNO + "."
                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                BUFOUT = "PERFORM M-PH-" + INTERNO + "."
                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                BUFOUT = "PERFORM " + "WRT-SEC-PH-" + INTERNO + "."
                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)

                BUFOUT = "MOVE 'N' TO WSS-" + INTERNO + "-SEM-NP IN "  + WSSSEM$ + "."
                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)


        BUFOUT = "F-" + INTERNO + "-WRT-PH-SRE."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
        BUFOUT = "EXIT."
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
        BUFOUT = ""
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)




        BUFOUT = "INITIATE-RPT" + INTERNO + " SECTION."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
        BUFOUT = "I-INITIATE-RPT" + INTERNO + "."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)


                BUFOUT = "MOVE " + PAGE_LIMIT + " TO RPT-" + INTERNO +"-PAGE-LIMIT."
                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)

                SEC$ = "PF-" + INTERNO
                FOR I% = 1 TO 300
                        IF V_SECCION(I%) = SEC$ THEN
                                BUFOUT = "COMPUTE RPT-" + INTERNO + "-PAGE-LIMIT = "
                                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                                BUFOUT = "     RPT-" + INTERNO + "-PAGE-LIMIT - WSS-SIZ-PF-" + INTERNO + "."
                                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                                I% = 300
                        END IF
                NEXT I%



        BUFOUT = "F-INITIATE-RPT" + INTERNO + "."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
        BUFOUT = "EXIT."
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
        BUFOUT = ""
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)



        BUFOUT = "TERMINATE-RPT" + INTERNO + " SECTION."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
        BUFOUT = "I-TERMINATE-RPT" + INTERNO + "."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)


        FOR I% = 1 TO 30
                IF CMPO_CTRL(I%) <> '' THEN
                        BUFOUT = "MOVE 'S' TO WSS-CTL-" + CMPO_CTRL_FLD(I%) + " IN " + WSSCTL$  + "."
                        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                END IF
        NEXT I%

                        BUFOUT = "PERFORM " + INTERNO + "-CLR-CTL-SIZ."
                        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                        BUFOUT = "PERFORM " + INTERNO + "-CLR-SEM-NWP."
                        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                        BUFOUT = "PERFORM " + INTERNO + "-SUM-SIZ-CTL-CF."
                        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                        BUFOUT = "PERFORM " + INTERNO + "-CHK-SIZ-DIS."
                        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                        BUFOUT = "PERFORM " + INTERNO + "-SET-SMF-NWP-CF."
                        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                        BUFOUT = "IF WSS-" + INTERNO + "-NO-CABE = 'S'"
                        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                        BUFOUT = "PERFORM " + INTERNO + "-WRT-RLL-YPH."
                        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                        BUFOUT = "PERFORM " + INTERNO + "-PRO-VAR-CTL-CF."
                        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)



 !!!        RE = 300
 !!!       WHILE (RE > 0)

 !!!               IF CMPO_CTRL_CCFF(RE) = "SI" THEN
 !!!                       BUFOUT = "   PERFORM D-CF-" + INTERNO + "-" + CMPO_CTRL_FLD(RE) + "."
 !!!                       ANTERIOR = "CF-" + INTERNO + "-" + CMPO_CTRL_FLD(RE)
 !!!                       J% = 1
 !!!                       WHILE (ANTERIOR <> V_SECCION(J%) AND J% < 300)
 !!!                              J% = J% + 1
 !!!                       NEXT
 !!!                       BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT )

 !!!               FF$ = "SI"
 !!!              WHILE FF$ = "SI"
 !!!               IF MATR_VALI(J%,LINE_USED) = ZI THEN
 !!!                       FF$ = "NO"
 !!!                       BUFOUT = "   PERFORM M-CF-"  + INTERNO + "-" +&
 !!!                                CMPO_CTRL_FLD(RE) + "."
 !!!                      BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)


 !!!                       BUFOUT = "   PERFORM " + "WRT-SEC-CF-" + INTERNO + "-" +&
 !!!                                CMPO_CTRL_FLD(RE) + "."
 !!!                       BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
 !!!               ELSE
 !!!                       IF (ANTERIOR = V_SECCION(J%) AND J% < 300)  THEN
 !!!                               J% = J% + 1
 !!!                       ELSE
 !!!                               FF$ = "NO"
 !!!               END IF
 !!!               END IF
 !!!               NEXT
 !!!               END IF
 !!!               RE = RE - 1
 !!!       NEXT


 !!!        SECC$ = "PF-" + INTERNO
 !!!       FOR I% = I TO 300
 !!!               IF V_SECCION(I%) = SECC$  THEN
 !!!                       BUFOUT = "COMPUTE RPT-" + INTERNO + "-TOT-LDIS = "
 !!!                       BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
 !!!                        BUFOUT = "     RPT-" + INTERNO + "-PAGE-LIMIT - RPT-" + INTERNO + "-LINE-COUNTER."
 !!!                       BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)

 !!!                        BUFOUT = "PERFORM D-PF-" + INTERNO + "."
 !!!                       BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
 !!!                       BUFOUT = "PERFORM M-PF-" + INTERNO + "."
 !!!                       BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
 !!!                       BUFOUT = "PERFORM WRT-SEC-PF-" + INTERNO + "."
 !!!                       BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
 !!!                       I% = 300
 !!!               END IF
 !!!       NEXT I%

        BUFOUT = "F-TERMINATE-RPT" + INTERNO + "."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
        BUFOUT = "EXIT."
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
        BUFOUT = ""
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)


860
 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!




        BUFOUT = INTERNO + "-WRT-LIN-REP" + " SECTION."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
        BUFOUT = "I-" + INTERNO + "-WRT-LIN-REP."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)

                BUFOUT = "WRITE GRC-LINEA-" + INTERNO + "."
                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                BUFOUT = "ADD 1 TO RPT-" + INTERNO + "-LINE-COUNTER."
                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)


        BUFOUT = "F-" + INTERNO + "-WRT-LIN-REP."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
        BUFOUT = "EXIT."
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
        BUFOUT = ""
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)




        BUFOUT = INTERNO + "-WRT-RLL-NWP" + " SECTION."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
        BUFOUT = "I-" + INTERNO + "-WRT-RLL-NWP."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)

                BUFOUT = "IF GRC-1WRT = 'S'"
                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                BUFOUT = "WRITE GRC-LINEA-" +  INTERNO
                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                BUFOUT = "MOVE 'N' TO GRC-1WRT "
                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                BUFOUT = "ELSE"
                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
 !!!            BUFOUT = "WRITE GRC-LINEA-" +  INTERNO + " AFTER PAGE."
                BUFOUT = "WRITE GRC-LINEA-" +  INTERNO + " AFTER SALTO."
                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                BUFOUT = "ADD 1 TO RPT-" + INTERNO + "-LINE-COUNTER."
                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)


        BUFOUT = "F-" + INTERNO + "-WRT-RLL-NWP."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
        BUFOUT = "EXIT."
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
        BUFOUT = ""
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)




        BUFOUT = INTERNO + "-WRT-RLL-YPF" + " SECTION."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
        BUFOUT = "I-" + INTERNO + "-WRT-RLL-YPF."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)

                BUFOUT = "ADD 1 TO RPT-" + INTERNO + "-TOT-LDIS."
                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                BUFOUT = "WRITE GRC-LINEA-" +  INTERNO + " AFTER RPT-" + INTERNO + "-TOT-LDIS."
                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                BUFOUT = "ADD 1 TO RPT-" + INTERNO + "-LINE-COUNTER."
                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)


        BUFOUT = "F-" + INTERNO + "-WRT-RLL-YPF."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
        BUFOUT = "EXIT."
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
        BUFOUT = ""
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)





        BUFOUT = INTERNO + "-CHK-VAR-CTL" + " SECTION."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
        BUFOUT = "I-" + INTERNO + "-CHK-VAR-CTL."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)

        FOR I% = 1 TO 30
                IF CMPO_CTRL(I%) <> '' THEN

                BUFOUT = "IF " + CMPO_CTRL_FLD(I%) + "     IN SRT NOT ="
                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                BUFOUT = "   " + CMPO_CTRL_FLD(I%) + "-OLD IN " + SRTOLD$
                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                        FOR J% = I% TO 30
                                IF CMPO_CTRL(J%) <> '' THEN
                                        BUFOUT = "MOVE 'S' TO WSS-CTL-" + CMPO_CTRL_FLD(J%) + " IN " + WSSCTL$
                                        IF J% = MAXI_SORT THEN
                                                BUFOUT = BUFOUT + "."
                                        END IF
                                        BUFOUT = ESCR_GEN(C_FILE_RE,4,BUFOUT)
                                END IF
                        NEXT J%
                END IF
        NEXT I%

        BUFOUT = "F-" + INTERNO + "-CHK-VAR-CTL."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
        BUFOUT = "EXIT."
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
        BUFOUT = ""
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)



        BUFOUT = INTERNO + "-SET-NWP-DIB-CH" + " SECTION."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
        BUFOUT = "I-" + INTERNO + "-SET-NWP-DIB-CH."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
880
 !!!    V% = 1
        I% = 30
        WHILE (I% > 0)
                FOR V% = 1 TO 20
                IF  (CMPO_CTRL_CCHH(I%) = "SI") AND (CMPO_CTRL_FLD(I%) = COD_SECC(V%)) AND  (COD_SECC(V%) <> "") THEN

                        BUFOUT = "IF SI-CTL-" + CMPO_CTRL_FLD(I%)
                        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)

                        BUFOUT = "MOVE 'S' TO WSS-" + INTERNO + "-SEM-NP IN " + WSSSEM$ + "."
                        BUFOUT = ESCR_GEN(C_FILE_RE,3,BUFOUT)

                        V% = 20
                        I% = 0
                END IF
                NEXT V%
        I% = I% - 1
        NEXT


        BUFOUT = "F-" + INTERNO + "-SET-NWP-DIB-CH."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
        BUFOUT = "EXIT."
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
        BUFOUT = ""
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
        BUFOUT = ""
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)




        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
        BUFOUT = INTERNO + "-SET-SMF-NWP-CF" + " SECTION."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
        BUFOUT = "I-" + INTERNO + "-SET-SMF-NWP-CF."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)


        FOR I% = 1 TO 30

                IF CMPO_CTRL(I%) <> '' THEN

                FOR V% = 1 TO 20
                        IF (CMPO_CTRL_CCFF(I%) = "SI" AND (CMPO_CTRL_FLD(I%) = COD_SECC(V%)) AND  (COD_SECC(V%) <> "")) THEN

 !!!                            BUFOUT = "IF SI-CTL-"  + CMPO_CTRL_FLD(I%) +  " AND SI-NP-CF-" + CMPO_CTRL_FLD(I%)
                                BUFOUT = "IF SI-CTL-"  + CMPO_CTRL_FLD(I%)
                                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)

                                BUFOUT = "    MOVE 'S' TO WSS-" + INTERNO + "-SEM-NP IN " + WSSSEM$ + "."
                                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)

                        END IF
                NEXT V%
                END IF
        NEXT I%

        BUFOUT = "F-" + INTERNO + "-SET-SMF-NWP-CF."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
        BUFOUT = "EXIT."
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
        BUFOUT = ""
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
        BUFOUT = ""
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)


        VAR$ = "PH-" + INTERNO
        VAR1$ = "PF-" + INTERNO
        ANTERIOR = ""
        FOR I% = 1 TO DL
        IF ((ANTERIOR <> DL_SEC(I%)) AND (VAR$ <> DL_SEC(I%)) AND (VAR1$ <> DL_SEC(I%))) THEN
        ANTERIOR = DL_SEC(I%)
        BUFOUT = INTERNO + "-CHK-SIZ-" + DL_SEC(I%) + " SECTION."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
        BUFOUT = "I-" + INTERNO + "-CHK-SIZ-" + DL_SEC(I%) + "."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)

                BUFOUT = "COMPUTE RPT-" + INTERNO + "-TOT-LDIS = "
                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)

                BUFOUT = "     RPT-" + INTERNO + "-PAGE-LIMIT - RPT-" + INTERNO + "-LINE-COUNTER."
                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)

                BUFOUT = "IF RPT-" + INTERNO + "-TOT-LDIS < WSS-SIZ-" + DL_SEC(I%)
                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)

                BUFOUT = " MOVE 'S' TO WSS-" + INTERNO + "-NO-CABE IN " + WSSNCAE$ + "."
                BUFOUT = ESCR_GEN(C_FILE_RE,3,BUFOUT)


        BUFOUT = "F-" + INTERNO + "-CHK-SIZ-" + DL_SEC(I%) + "."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
        BUFOUT = "EXIT."
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
        BUFOUT = ""
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
        BUFOUT = ""
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
        END IF
        NEXT I%




        VAR$ = "PH-" + INTERNO
        VAR1$ = "PF-" + INTERNO
        ANTERIOR = ""
        FOR I% = 1 TO DL
        IF ((ANTERIOR <> DL_SEC(I%)) AND (VAR$ <> DL_SEC(I%)) AND (VAR1$ <> DL_SEC(I%))) THEN
        ANTERIOR = DL_SEC(I%)
        BUFOUT = "PRO-" + DL_SEC(I%) + " SECTION."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
        BUFOUT = "I-" + "PRO-" + DL_SEC(I%) + "."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)

                BUFOUT = "PERFORM " + INTERNO + "-CHK-SIZ-" + DL_SEC(I%) + "."
                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)

                BUFOUT = "IF SI-" + INTERNO + "-SEM-NP OR SI-" + INTERNO + "-NO-CABE"
                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                BUFOUT = "PERFORM " + INTERNO + "-WRT-RLL-YPH."
                BUFOUT = ESCR_GEN(C_FILE_RE,3,BUFOUT)


                BUFOUT = "PERFORM D-" + DL_SEC(I%) + "."
                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                BUFOUT = "PERFORM M-" + DL_SEC(I%)  + "."
                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                BUFOUT = "IF GRC-PRLD = GRC-PRLD-NOT"
                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                BUFOUT = "MOVE GRC-PRLD-YES TO GRC-PRLD"
                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                BUFOUT = "GO TO F-" + "PRO-" + DL_SEC(I%) + "."
                BUFOUT = ESCR_GEN(C_FILE_RE,3,BUFOUT)
                BUFOUT = "PERFORM " + "WRT-SEC-" + DL_SEC(I%)+ "."
                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)

        BUFOUT = "F-" + "PRO-" + DL_SEC(I%) + "."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
        BUFOUT = "EXIT."
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
        BUFOUT = ""
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
        BUFOUT = ""
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
        END IF
        NEXT I%



        BUFOUT = INTERNO + "-CLR-CTL-SIZ" + " SECTION."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
        BUFOUT = "I-" + INTERNO + "-CLR-CTL-SIZ."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)

                BUFOUT = "MOVE 'N' TO WSS-" + INTERNO  + "-NO-CABE IN " + WSSNCAE$ + "."
                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)

                BUFOUT = "MOVE ZEROES TO RPT-" + INTERNO + "-TOT-LCTL."
                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)


        BUFOUT = "F-" + INTERNO + "-CLR-CTL-SIZ."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
        BUFOUT = "EXIT."
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
        BUFOUT = ""
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
        BUFOUT = ""
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)




        BUFOUT = INTERNO + "-CLR-SEM-NWP" + " SECTION."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
        BUFOUT = "I-" + INTERNO + "-CLR-SEM-NWP."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)


                BUFOUT = "MOVE 'N' TO WSS-" + INTERNO + "-SEM-NP IN "  + WSSSEM$ + "."
                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)


        BUFOUT = "F-" + INTERNO + "-CLR-SEM-NWP."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
        BUFOUT = "EXIT."
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
        BUFOUT = ""
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
        BUFOUT = ""
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)




        BUFOUT = INTERNO + "-PRO-VAR-CTL-CF" + " SECTION."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
        BUFOUT = "I-" + INTERNO + "-PRO-VAR-CTL-CF."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)

        RE = 300
        BUFOUT = "PERFORM " + INTERNO + "-PRO-RLL-TAM-CF."
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
        WHILE (RE > 0)

                IF CMPO_CTRL_CCFF(RE) = "SI" THEN
                        BUFOUT = "IF SI-CTL-" + CMPO_CTRL_FLD(RE)
                        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                        BUFOUT = "   PERFORM D-CF-" + INTERNO + "-" + CMPO_CTRL_FLD(RE) 
                        ANTERIOR = "CF-" + INTERNO + "-" + CMPO_CTRL_FLD(RE)
                        J% = 1
                        WHILE (ANTERIOR <> V_SECCION(J%) AND J% < 300)
                                J% = J% + 1
                        NEXT
                        IF MATR_VALI(J%,LINE_USED) <> ZI THEN
                                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT + ".")
                        ELSE
                                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT )
                        END IF

                FF$ = "SI"
                WHILE FF$ = "SI"
                IF MATR_VALI(J%,LINE_USED) = ZI THEN
                        FF$ = "NO"
                        BUFOUT = "   PERFORM M-CF-"  + INTERNO + "-" +&
                                 CMPO_CTRL_FLD(RE) 
                        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)


                        BUFOUT = "   PERFORM " + "WRT-SEC-CF-" + INTERNO + "-" +&
                                 CMPO_CTRL_FLD(RE) + "."
                        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                ELSE
                        IF (ANTERIOR = V_SECCION(J%) AND J% < 300)  THEN
                                J% = J% + 1
                        ELSE
                                FF$ = "NO"
                END IF
                END IF
                NEXT
                END IF
                RE = RE - 1
        NEXT

        BUFOUT = "F-" + INTERNO + "-PRO-VAR-CTL-CF."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
        BUFOUT = "EXIT."
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
        BUFOUT = ""
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
        BUFOUT = ""
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)



        BUFOUT = INTERNO + "-SUM-SIZ-CTL-CF" + " SECTION."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
        BUFOUT = "I-" + INTERNO + "-SUM-SIZ-CTL-CF."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)


        RE = 30
        WHILE (RE > 0)
                IF CMPO_CTRL_CCFF(RE) = "SI"  THEN

                        BUFOUT = "IF SI-CTL-" + CMPO_CTRL_FLD(RE)
                        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
 !!!                        O% = RE
 !!!                       WHILE (O% > 0)
 !!!                               IF CMPO_CTRL_CCFF(O%) = "SI"  THEN
                         		BUFOUT = "ADD WSS-SIZ-CF-" + INTERNO + "-" +  CMPO_CTRL_FLD(RE) + " TO RPT-" +&
				 	INTERNO + "-TOT-LCTL." 
                                        BUFOUT = ESCR_GEN(C_FILE_RE,3,BUFOUT)
 !!!                               END IF
 !!!                               O% = O% - 1
 !!!                       NEXT
 !!!                       BUFOUT = "GO TO F-" + INTERNO + "-SUM-SIZ-CTL-CF."
 !!!                       BUFOUT = ESCR_GEN(C_FILE_RE,3,BUFOUT)
                END IF
                RE = RE - 1
        NEXT

        BUFOUT = "F-" + INTERNO + "-SUM-SIZ-CTL-CF."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
        BUFOUT = "EXIT."
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
        BUFOUT = ""
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)


        BUFOUT = INTERNO + "-SUM-SIZ-CTL-CH" + " SECTION."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
        BUFOUT = "I-" + INTERNO + "-SUM-SIZ-CTL-CH."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)

        RE = 1
        WHILE (RE < 30)
                IF CMPO_CTRL_CCHH(RE) = "SI" THEN
                        BUFOUT = "IF SI-CTL-" + CMPO_CTRL_FLD(RE)
                        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                        J% = RE
                        WHILE (J% < 30)
                                IF CMPO_CTRL_CCHH(J%) = "SI" THEN
                                        BUFOUT = "ADD WSS-SIZ-CH-" + INTERNO + "-" + CMPO_CTRL_FLD(J%) + " TO RPT-" + INTERNO + "-TOT-LCTL"
                                        BUFOUT = ESCR_GEN(C_FILE_RE,3,BUFOUT)
                                END IF
                                J% = J% + 1
                        NEXT
                        BUFOUT = "GO TO F-" + INTERNO + "-SUM-SIZ-CTL-CH."
                        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                END IF
                RE = RE + 1
        NEXT

        BUFOUT = "F-" + INTERNO + "-SUM-SIZ-CTL-CH."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
        BUFOUT = "EXIT."
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
        BUFOUT = ""
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)





        BUFOUT = INTERNO + "-PRO-RLL-NWP-CH" + " SECTION."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
        BUFOUT = "I-" + INTERNO + "-PRO-RLL-NWP-CH."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)

                        BUFOUT = "IF SI-" + INTERNO + "-SEM-NP "
                        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                        BUFOUT = "GO TO CAM-PAG."
                        BUFOUT = ESCR_GEN(C_FILE_RE,3,BUFOUT)

                        BUFOUT = "PERFORM " + INTERNO + "-CLR-SEM-NWP."
                        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                        BUFOUT = "PERFORM " + INTERNO + "-SUM-SIZ-CTL-CH."
                        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                        BUFOUT = "PERFORM " + INTERNO + "-CHK-SIZ-DIS."
                        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                        BUFOUT = "IF SI-" + INTERNO + "-SEM-NP "
                        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                        BUFOUT = "GO TO CAM-PAG."
                        BUFOUT = ESCR_GEN(C_FILE_RE,3,BUFOUT)



                        BUFOUT = "PERFORM " + INTERNO + "-SET-NWP-DIB-CH."
                        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)

                        BUFOUT = "IF SI-" + INTERNO + "-SEM-NP "
                        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                        BUFOUT = "GO TO CAM-PAG."
                        BUFOUT = ESCR_GEN(C_FILE_RE,3,BUFOUT)
                        BUFOUT = "CAM-PAG."
                        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
 !!!                    BUFOUT = "IF SI-" + INTERNO + "-SEM-NP"
 !!!                    BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
 !!!                    BUFOUT = "PERFORM W-RLL-" + INTERNO + "."
 !!!                    BUFOUT = ESCR_GEN(C_FILE_RE,3,BUFOUT)


        BUFOUT = "F-" + INTERNO + "-PRO-RLL-NWP-CH."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
        BUFOUT = "EXIT."
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
        BUFOUT = ""
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)



        BUFOUT = INTERNO + "-CHK-SIZ-DIS" + " SECTION."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
        BUFOUT = "I-" + INTERNO + "-CHK-SIZ-DIS."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)

                BUFOUT = "COMPUTE RPT-" + INTERNO + "-TOT-LDIS ="
                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)

                BUFOUT = "    RPT-" + INTERNO + "-PAGE-LIMIT - RPT-" + INTERNO + "-LINE-COUNTER."
                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)

                BUFOUT = "IF RPT-" + INTERNO + "-TOT-LDIS = ZEROES"
                BUFOUT = ESCR_GEN(C_FILE_RE,3,BUFOUT)

                BUFOUT = "PERFORM " + INTERNO + "-WRT-PH-SRE."
                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)


                BUFOUT = "IF RPT-" + INTERNO + "-TOT-LDIS < RPT-" + INTERNO + "-TOT-LCTL"
                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)

                BUFOUT = " MOVE 'S' TO WSS-" + INTERNO + "-SEM-NP IN " + WSSSEM$
                BUFOUT = ESCR_GEN(C_FILE_RE,3,BUFOUT)

                BUFOUT = " MOVE 'S' TO WSS-" + INTERNO  + "-NO-CABE IN " + WSSNCAE$ + "."
                BUFOUT = ESCR_GEN(C_FILE_RE,3,BUFOUT)

 !!!            BUFOUT = " IF RPT-" + INTERNO + "-TOT-LDIS = 1 "
 !!!            BUFOUT = ESCR_GEN(C_FILE_RE,3,BUFOUT)

 !!!            BUFOUT = "PERFORM " + INTERNO + "-WRT-RLL-YPH."
 !!!            BUFOUT = ESCR_GEN(C_FILE_RE,3,BUFOUT)

                BUFOUT = "MOVE ZEROES TO RPT-" + INTERNO + "-TOT-LCTL."
                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)


        BUFOUT = "F-" + INTERNO + "-CHK-SIZ-DIS."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
        BUFOUT = "EXIT."
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
        BUFOUT = ""
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
        BUFOUT = ""
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)




        BUFOUT = INTERNO + "-PRO-VAR-CTL-CH" + " SECTION."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
        BUFOUT = "I-" + INTERNO + "-PRO-VAR-CTL-CH."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)

        BUFOUT = "PERFORM " + INTERNO + "-PRO-RLL-NWP-CH."
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
        FOR I% = 1 TO 30
                IF CMPO_CTRL_CCHH(I%) = "SI" THEN

                        BUFOUT = "IF SI-CTL-" + CMPO_CTRL_FLD(I%)
                        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                        BUFOUT = "PERFORM D-CH-" + INTERNO + "-" + CMPO_CTRL_FLD(I%) + "."
                        BUFOUT = ESCR_GEN(C_FILE_RE,3,BUFOUT)
                END IF
        NEXT I%
        BUFOUT = "IF SI-" + INTERNO + "-SEM-NP"
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
        BUFOUT = "PERFORM " + INTERNO + "-WRT-RLL-YPH."
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)

        FOR I% = 1 TO 30
                IF CMPO_CTRL_CCHH(I%) = "SI" THEN

                        BUFOUT = "IF SI-CTL-" + CMPO_CTRL_FLD(I%)
                        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                        BUFOUT = "PERFORM M-CH-" + INTERNO +  "-" +&
                                 CMPO_CTRL_FLD(i%)
                        BUFOUT = ESCR_GEN(C_FILE_RE,3,BUFOUT)
                        BUFOUT = "PERFORM " + "WRT-SEC-CH-" + INTERNO + "-" +&
                                 CMPO_CTRL_FLD(I%) + "."
                        BUFOUT = ESCR_GEN(C_FILE_RE,3,BUFOUT)
                END IF
        NEXT I%

        BUFOUT = "F-" + INTERNO + "-PRO-VAR-CTL-CH."
        BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
        BUFOUT = "EXIT."
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
        BUFOUT = ""
        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)

 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


            BUFOUT = "M-" + V_SECCION(1) + " SECTION."
            BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
            BUFOUT = "I-M-" + V_SECCION(1) + "."
            BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
            ULT_SEC = V_SECCION(1)
            EST_MOV_SEC$ = V_SECCION(1)
            I% = 1
            B% = 1
            ES% = 1
            WHILE ES% <> 0
            WHILE  BUFMOV(I%,1) <> ""
                T% = BUF_DEST_MOV(I%,1)
                IF V_SECCION(T%) = "" THEN
                        i% = i% + 1
                        GO TO   SEC_NUL
                END IF
                E% = 1
                WHILE FIL_REV(E%) <> ""
                        IF FIL_REV(E%) = V_SECCION(T%) THEN
                                I% = I% + 1
                                GO TO   SEC_NUL
                        END IF
                        E% = E% + 1
                NEXT
                IF EST_MOV_SEC$ = V_SECCION(T%) THEN
                        OO% = 0
                        HJ% = 1
                        VARRT$ =  BUFMOV(I%,1)
                        WHILE (BUF_SUM(HJ%,1) <> "" )
                                IF BUF_SUM(HJ%,4) = VARRT$ THEN
                                        BUFOUT = "MOVE " +  BUFMOV(I%,1) + " TO "
                                        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                                        OO% = 1
                                END IF
                        HJ% = HJ% + 1
                        NEXT
                        IF  OO% = 0 AND CMPO_CT_NC(I%) <> "SI" THEN
                                BUFOUT = "MOVE " +  BUFMOV(I%,1) + " IN " + BUFMOV(I%,2) +&
                                        " TO "
                                BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                        ELSE
                                IF  OO% = 0 AND CMPO_CT_NC(I%) = "SI" THEN
                                        BUFOUT = "MOVE SPACES  TO "
                                        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                                END IF
                        END IF
                        BUFOUT = "     RT-" + BUFMOV(I%,1)  + " IN " + V_SECCION(T%) + "."
                        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                        ZX% = 1
                        VARRT$ = "RT-" + BUFMOV(I%,1)
                        WHILE (BUF_SUM(ZX%,1) <> "" )
                                IF BUF_SUM(ZX%,1) = VARRT$ THEN
                                        BUFOUT = "ADD " +  BUFMOV(I%,1) + " IN " + BUF_SUM(ZX%,3) +&
                                                 " TO " + BUF_SUM(ZX%,4) + "."
                                        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                                        END IF

                        ZX% = ZX% + 1
                        NEXT
                        XZ% = 1
                        QQ% = 1
                        WHILE (BUF_SUM(XZ%,4) <> "" AND QQ% = 1 )
                                IF BUF_SUM(XZ%,4) = BUFMOV(I%,1) THEN
                                        BUFOUT = "MOVE ZEROES TO  " +  BUFMOV(I%,1) + "."
                                        BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                                        QQ% = 0
                                END IF
                        XZ% = XZ% + 1
                        NEXT
                END IF
                I% = I% + 1
                NEXT
           ES% = 0
           FIL_REV(B%) = EST_MOV_SEC$
           U% = 1
           WHILE FIL_REV(U%) <> ""
                   U% = U% + 1
           NEXT
           B% = B% + 1
           SIRVE% = 1
           FOR D% = 1 TO 200
                   FOR J% = 1 TO 100
                        IF V_SECCION(D%) = FIL_REV(J%)  THEN
                                 SIRVE% = 0
                                 J% = 100
                        ELSE
                                IF V_SECCION(D%) <> "" THEN
                                        SIRVE% = 1
                                END IF
                        END IF
                   NEXT J%
                   IF SIRVE% = 1 THEN
                        ES% = D%
                        D% = 200
                   END IF
           NEXT D%
           IF ES% <> 0 THEN
                   BUFOUT = "F-M-" +  EST_MOV_SEC$  + "."
                   BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
                   BUFOUT = "EXIT."
                   BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)
                   BUFOUT = "   "
                   BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
                   EST_MOV_SEC$ = V_SECCION(ES%)
                   BUFOUT = "M-" + V_SECCION(ES%) + " SECTION."
                   BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
                   BUFOUT = "I-M-" + V_SECCION(ES%) + "."
                   BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
                   I% = 0
          END IF
          I% = I% + 1
  SEC_NUL:
        NEXT
         BUFOUT = "F-M-" +  EST_MOV_SEC$  + "."
         BUFOUT = ESCR_GEN(C_FILE_RE,1,BUFOUT)
         BUFOUT = "EXIT."
         BUFOUT = ESCR_GEN(C_FILE_RE,2,BUFOUT)



 !!!    FOR I% = 1 TO 200
 !!!            PRINT " I% "; I%
 !!!            PRINT "V_SECCION i% "; V_SECCION(I%)
 !!!            PRINT "BUF_MOV 1  "; BUFMOV (I%,1)
 !!!            PRINT "BUF_MOV 2  "; BUFMOV (I%,2)
 !!!            T% = BUF_DEST_MOV(I%,1)
 !!!            PRINT "BUF_DEST_MOV  "; BUF_DEST_MOV(T%,1)
 !!!            PRINT "V_SECCION T% "; V_SECCION(T%)
 !!!            PRINT "  "
 !!!            PRINT "  "
 !!!    NEXT I%

 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


        PUTSIZ$ = "N"
        CONT% = 0
        I% = 1
        FOR V% = 1 TO 300
        IF CMPO_CTRL_FLD(V%) <> "" THEN
          POS1 = "CH-" + INTERNO + "-" + CMPO_CTRL_FLD(V%)
          POS2 = "CF-" + INTERNO + "-" + CMPO_CTRL_FLD(V%)
          I% = 1
          WHILE (I% < 300)
                WHILE (V_SECCION(I%) = POS1 OR V_SECCION(I%) = POS2 )
                        IF PUTSIZ$ = "N" THEN
                                WSSSIZ$ = "WSS-SIZ-" + INTERNO
                                BUFOUT = "01  " + WSSSIZ$ + "."
                                BUFOUT = ESCR_REGS(C_FILE_RW,1,1,1,BUFOUT)
                                PUTSIZ$ = "S"
                        END IF
                        CONT% = CONT% + 1
                        ANTERIOR = V_SECCION(I%)
                        I% =  I% + 1
                        WHILE (V_SECCION(I%) = ANTERIOR)
                                CONT% = CONT% + 1
                                ANTERIOR = V_SECCION(I%)
                                I% =  I% + 1
                        NEXT
                        L% = I% - 1
                        IF MATR_VALI(L%,LINE_USED) = ZI THEN
                                BUFOUT = "05 WSS-SIZ-" + ANTERIOR + " VALUE " + STR$(CONT%) +" PIC 9(04) " + "."
                                BUFOUT = ESCR_REGS(C_FILE_RW,1,1,2,BUFOUT)
                        ELSE
                                BUFOUT = "05 WSS-SIZ-" + ANTERIOR + " VALUE 0  PIC 9(04) " + "."
                                BUFOUT = ESCR_REGS(C_FILE_RW,1,1,2,BUFOUT)
                        END IF
                        CONT% = 0
                NEXT
                I% = I% + 1
        NEXT
        END IF
        NEXT V%

        CONTA% = 1
        FOR H% = 1 TO 300
                IF CMPO_CTRL_FLD(H%) <> "" THEN
                COMPAR(CONTA%,1) = "CH-" + INTERNO + "-" + CMPO_CTRL_FLD(H%)
                COMPAR(CONTA%,2) = "CF-" + INTERNO + "-" + CMPO_CTRL_FLD(H%)
                CONTA% = CONTA% + 1
                END IF
        NEXT H%

        SEMCONT = 0
        CONT% = 0
        I% = 1
          WHILE (I% < 300)
                FLAC% = 0
                FOR P% = 1 TO 300
                IF V_SECCION(I%) <> "" AND (V_SECCION(I%) = COMPAR(P%,1) OR V_SECCION(I%) = COMPAR(P%,2)) THEN
                        FLAC% = 1
                END IF
                NEXT P%
                IF V_SECCION(I%) <> ""  AND FLAC% = 0 THEN
                        CONT% = CONT% + 1
                        ANTERIOR = V_SECCION(I%)
                                IF MATR_VALI(I%,LINE_USED) = ZI THEN
                                        SEMCONT = 1
                                END IF
                        I% =  I% + 1
                        WHILE (V_SECCION(I%) = ANTERIOR)
                                CONT% = CONT% + 1
                                IF MATR_VALI(I%,LINE_USED) = ZI THEN
                                        SEMCONT = 1
                                END IF
                                ANTERIOR = V_SECCION(I%)
                                I% =  I% + 1
                        NEXT
                        I% = I% - 1
                        IF SEMCONT = 1 THEN
                                BUFOUT = "05 WSS-SIZ-" + ANTERIOR + " VALUE " + STR$(CONT%) +" PIC 9(04) " + "."
                                BUFOUT = ESCR_REGS(C_FILE_RW,1,1,2,BUFOUT)
                        ELSE
                                BUFOUT = "05 WSS-SIZ-" + ANTERIOR + " VALUE 0  PIC 9(04) " + "."
                                BUFOUT = ESCR_REGS(C_FILE_RW,1,1,2,BUFOUT)
                        END IF
                        CONT% = 0
                        SEMCONT = 0
                END IF
                I% = I% + 1
        NEXT



                WSSSIZ$ = "RPT-VARI-" + INTERNO
                BUFOUT = "01  " + WSSSIZ$ + "."
                BUFOUT = ESCR_REGS(C_FILE_RW,1,1,1,BUFOUT)
                BUFOUT = "05 RPT-" + INTERNO  + "-TOT-LCTL VALUE ZEROES PIC 9(08) " + "."
                BUFOUT = ESCR_REGS(C_FILE_RW,1,1,2,BUFOUT)
                BUFOUT = "05 RPT-" + INTERNO  + "-TOT-LDIS VALUE ZEROES PIC S9(08) " + "."
                BUFOUT = ESCR_REGS(C_FILE_RW,1,1,2,BUFOUT)
                BUFOUT = "05 RPT-" + INTERNO  + "-PAGE-LIMIT VALUE ZEROES PIC 9(08) " + "."
                BUFOUT = ESCR_REGS(C_FILE_RW,1,1,2,BUFOUT)
                BUFOUT = "05 RPT-" + INTERNO  + "-LINE-COUNTER VALUE ZEROES PIC 9(08) " + "."
                BUFOUT = ESCR_REGS(C_FILE_RW,1,1,2,BUFOUT)
                BUFOUT = "05 RPT-" + INTERNO  + "-PAGE-COUNTER VALUE 1 PIC 9(08) " + "."
                BUFOUT = ESCR_REGS(C_FILE_RW,1,1,2,BUFOUT)





 !!!0004

 !!!
 !!! Escribe los MOVES al archivo de SORT desde WSS o REG
 !!!

        FOR I% = 1 TO TOTA_MOVE
                BUFOUT = "MOVE " + MOVE_REGI(I%) + " IN "
                IF MID$(MOVE_SORT(I%),1,2) = "WS" THEN
                        BUFOUT = BUFOUT + "WSS-" + INTERNO
                ELSE
                        BUFOUT = BUFOUT + MAP_VEC_REGI(I%)
                END IF
                BUFOUT = BUFOUT + " TO "  + MOVE_SORT(I%) + " IN SRT" + "."
                BUFOUT = ESCR_GEN(C_FILE_RM,2,BUFOUT)
        NEXT I%

        ACCION = SORT_MATR_UBIC
        ACCION = CAL_RELL_FILA

        CALL LIB$DO_COMMAND("$ EDTRCB " + EXTERNO)

        GO TO LABE_ATRA

 LABE_BADD:
        IF ERR = 2 THEN
                PRINT FILE_FLG,FILE_RT,FILE_RS, " : NOMBRE DE ARCHIVO ILEGAL"
        ELSE
        IF ERR = 5 THEN
                PRINT FILE_FLG,FILE_RT,FILE_RS, " ARCHIVO INEXISTENTE       "
        ELSE
                PRINT "CODIGO : ",ERR
                PRINT "MENSAJE :",ERT$(ERR)
        END IF
        END IF
        RESUME 999
999
 LABE_ATRA:
 END
1100    SUB GENRPTALL (STRING ESTR_INGS BY DESC)

        DECLARE         INTEGER         LARG_STRG
        DECLARE         STRING          VARI_MIDD
        DECLARE         STRING          VARI_COMP

        COMP_REOK = 1
        LARG_STRG = LEN(ESTR_INGS)
        VARI_COMP = MID$(ESTR_INGS,1,1)
        FOR I% = 1 TO LARG_STRG
                IF MID$(ESTR_INGS,I%,1) <> VARI_COMP THEN
                        COMP_REOK = 0
                        I% = LARG_STRG + 1
                END IF
        NEXT I%
        IF COMP_REOK = 1 THEN
                ESTR_INGS = "ALL '" + VARI_COMP + "'"
        ELSE
                ESTR_INGS = "'" + ESTR_INGS + "'"
        END IF
        END SUB
