100
	DECLARE INTEGER NUMTOKEN,	SC_NUMTOKEN	,&
			SZTOKEN	, 	SC_SZTOKEN	,&
			TOKEN	,	SC_TOKEN 	,&
			P_P	,	SC_P_P		,&
			P_Q	,	SC_P_Q 		,&
			SZ_I_B

	DECLARE	STRING	C_Q	,	SC_C_Q		,&
			VALTOKEN,	SC_VALTOKEN	,&
			STRTOKEN

	DECLARE INTEGER	CONSTANT &
			KEYTOK = 1,	IDNTOK = 2	,&
			NUMTOK = 3,	STRTOK = 4	,&
			CHRTOK = 5,	EOLTOK = 6	,&
			ETXTOK = 7,	HTAB   = 9

200
	DECLARE INTEGER INDI_LINE,	VARI_LARG	,&
			C_FILE_FLG,	C_FILE_WSS	,&
			C_FILE_MOV,	INX_LLAVE	,&
			C_FILE_IFS,	C_FILE_CPY	,&
			C_FILE_VAL,	ESMAY_UNO	,&
			C_FILE_FLD,	C_FILE_KEY	,&
			I_N,		TIPO_LINE	,&
			TIPO_DATO,	TIPO_CORR	,&
			T_CMPO,		T_REGI		,&
			UNDER_COR(10)			,&
			INI_SCROLL,	FIN_SCROLL	,&
			RNG_SCROLL(25)			,&
			NEW_CMPO,	V_KEYS(40)	,&
			C_FILE_EDT			,&
			SW_RFLD,	SW_RKEY		,&
			SW_PFLD,	SW_PKEY		,&
			INDI_SCRS,	V_ATRB(2,40)	,&
			ANT_INDEX,	TMP_INDEX	,&
			T_INDEX,	SW_INDEX	,&
			NIV_INDEX,	V_TIDX(40)
						

	DECLARE	STRING	ASCI_BELL,	FILE_FLG	,&
			FILE_WSS,	PROY		,&
			FILE_MOV,  	O_L		,&
			DAT_REG,	DAT_SIS		,&
			PARIZQ, 	PARDER		,&
			V_M(5),		RETC_IF		,&
			PUTC_IF,	BUFOUT		,&
			PRIN_LINE,	NFLD_PTXT	,&
			PRIN_COLU,	PRIN_CORR	,&
			VARI_TIPO,	FILE_IFS	,&
			FILE_VAL,	NAME_REGI	,&
			NAME_TIPO,	NAME_NAME	,&
			INTERNO,	PRE_RETC	,&
			PRE_PUTC,	PRE_KEYC	,&
			FMS_RETC,	FMS_PUTC	,&
			FMS_KEYC,	V_REGI(40)	,&
			V_CMPO(40),	V_RECA(40)	,&
			AUXI_CMPO,	V_TIPO(40)	,&
			VARI_COMP,	V_SCROLL(25)	,&
			PRIN_DATO			,&
			VARI_UARV,	STRG_SCRS	,&
			V_NOMBRES(40),	RETALL		,&
			PUTALL,		KEYALL		,&
			FILE_CPY,	SISTEMA		,&
			FILE_EDT,	POST_NAME	,&
			VARI_FIND,	NIVEL		,&
			KEYC_IF,	V_SIS_REG(25)	,&
			SGN_LEAD,	FILE_FLD	,&
			FILE_KEY,	FLD_PFLD	,&
			FLD_UFLD,	FLD_PKEY	,&
			FLD_UKEY,	IDX_IDX		,&
			IDX_PFLD_KEY,	IDX_UFLD_KEY	,&
			IDX_PFLD_FLD,	IDX_UFLD_FLD

	DECLARE INTEGER	CONSTANT &
			ZI 	  =  1,	NO 	  =  0		,&
			ASCI_NWLN = 10, ASCI_CRRT = 13		,&
			ES_NUME	  =  1,	DISP_ONLY	= 2

 !==========================================================================

    DEF STRING ESCR_GENE (INTEGER TIPO_CANA,INTEGER I_N,STRING BUFOUT)
	BUFOUT = V_M(I_N) + BUFOUT
	PRINT #TIPO_CANA,BUFOUT
    END DEF

 !==========================================================================

    DEF STRING ESCR_WSS (INTEGER TIPO_CANA,INTEGER I_N,STRING BUFOUT)
	PRIN_DATO = FORMAT$(TIPO_DATO,"##")
	PRIN_LINE = FORMAT$(TIPO_LINE,"##")
	PRIN_CORR = FORMAT$(TIPO_CORR,"#####")
	BUFOUT = PRIN_DATO + PRIN_LINE + PRIN_CORR + V_M(I_N) + BUFOUT
	TIPO_CORR = TIPO_CORR + 1
	PRINT #C_FILE_WSS,BUFOUT
    END DEF

 !==========================================================================

    DEF INTEGER NEXTTOKEN
	ON ERROR GO TO LABE_ERRO
	IF TOKEN = ETXTOK THEN
		NEXTTOKEN = ETXTOK
		GO TO LABE_ASIG
	END IF
        P_P = P_Q 
 LABE_SIGA:
	WHILE (MID$(I_B$,P_P,1) = " " OR ASCII(MID$(I_B$,P_P,1)) = HTAB) AND &
			P_P <= SZ_I_B
		P_P = P_P + 1
	NEXT
	P_Q = P_P 
	IF P_P > SZ_I_B OR I_B$ = "" THEN
		GET #C_FILE_FLG
		SZ_I_B = RECOUNT
	     	MOVE FROM #C_FILE_FLG , I_B$ = SZ_I_B
		P_P, P_Q  = 1
		GO TO LABE_SIGA
	END IF
	C_Q = MID$(I_B$,P_Q,1)
	IF (C_Q >= "A" AND C_Q <= "Z") OR (C_Q >= "a" AND C_Q <= "z") THEN
	         WHILE (MID$(I_B$,P_P,1) >= "A" AND MID$(I_B$,P_P,1) <= "Z" &
	            OR  MID$(I_B$,P_P,1)  = "_" 	  &
		    OR  MID$(I_B$,P_P,1) >= "a" AND &
		        MID$(I_B$,P_P,1) <= "z")
	            			P_P = P_P + 1
		 NEXT
	         SZTOKEN = P_P - P_Q
		 NEXTTOKEN = IDNTOK
	   	 VALTOKEN = MID$(I_B$,P_Q,SZTOKEN)
	ELSE
	IF C_Q >= "0" AND C_Q <= "9" THEN
	          WHILE MID$(I_B$,P_P,1) >= "0" AND MID$(I_B$,P_P,1) <= "9"
		             P_P = P_P + 1
	          NEXT
	          SZTOKEN = P_P - P_Q
		  NEXTTOKEN = NUMTOK
		  VALTOKEN = MID$(I_B$,P_Q,SZTOKEN)
	          NUMTOKEN  = VAL(VALTOKEN)
	ELSE
	IF C_Q = '"'  OR C_Q = "'" THEN
		P_P = P_P + 1
	        WHILE MID$(I_B$,P_P,1) <> C_Q
  	              P_P = P_P + 1
	        NEXT
	        SZTOKEN = P_P - (P_Q + 1)
	        P_P = P_P + 1
		NEXTTOKEN = STRTOK
		STRTOKEN = MID$(I_B$,P_Q + 1,SZTOKEN)
		VALTOKEN = C_Q + STRTOKEN + C_Q
	ELSE
		NEXTTOKEN = CHRTOK
		VALTOKEN = MID$(I_B$,P_P,1)
		P_P = P_P + 1
		SZTOKEN = 1
	END IF
	END IF
	END IF
	GO TO LABE_ASIG
 LABE_ERRO:
	CLOSE #C_FILE_FLG
	IF ERR = 11 THEN
		NEXTTOKEN = ETXTOK
	ELSE
		PRINT "ERROR(";ERR;") ";ERT$(ERR);" en linea ";erl;", MODULO ";ern$
	END IF
	RESUME 800
 LABE_ASIG:
	P_Q = P_P
800
	END DEF
 !==========================================================================
   DEF INTEGER INIC_IALI
	ASCI_BELL = CHR$(07)
	C_FILE_FLG = 1	
	C_FILE_WSS = 2
	C_FILE_MOV = 3
	C_FILE_EDT = 4
	C_FILE_CPY = 5
	C_FILE_IFS = 6
	C_FILE_VAL = 7
	C_FILE_FLD = 8
	C_FILE_KEY = 9
	ESMAY_UNO = NO
	V_M(1) = ""
	V_M(2) = "	"
	V_M(3) = "		"
	V_M(4) = "			"
	V_M(5) = "				"
	FOR I% = 1 TO 25
		V_SCROLL(I%) = ""
		V_SIS_REG(I%) = "^sis^"
		RNG_SCROLL(I%) = NO
	NEXT I%
	FOR I% = 1 TO 40
		V_TIDX(I%)   = NO
		V_KEYS(I%)   = NO
		V_ATRB(1,I%) = NO
		V_ATRB(2,I%) = NO
	NEXT I%
	O_L = CHR$(ASCI_CRRT) + CHR$(ASCI_NWLN)
	CALL LIB$GET_SYMBOL("DES$PRY",PROY)
	P_P,P_Q = 1

	CALL LIB$GET_SYMBOL("PTH",FILE_FLG)

	OPEN FILE_FLG FOR INPUT AS FILE #C_FILE_FLG,RECORDTYPE ANY,	&
		ORGANIZATION SEQUENTIAL VARIABLE,   RECORDSIZE 255
	GET #C_FILE_FLG
	SZ_I_B = RECOUNT
	MOVE FROM #C_FILE_FLG , I_B$ = SZ_I_B

   END DEF
 !==================================================================

   DEF INTEGER PICTURE
	VARI_TIPO = ""
	TOKEN = NEXTTOKEN
	TOKEN = NEXTTOKEN
	IF TOKEN = NUMTOK THEN
		VARI_LARG = NUMTOKEN
		TOKEN = NEXTTOKEN
		IF STRTOKEN = "C" THEN
			STRTOKEN = "X"
		END IF
		VARI_TIPO = STRTOKEN + "(" + STR$(VARI_LARG) + ")"
	ELSE
		CALL GENRPTMAN(STRTOKEN,"ACNX9,")
		CALL REEMPLAZO(STRTOKEN,"C","X")
		VARI_TIPO = STRTOKEN
		CALL REEMPLAZO(STRTOKEN,"N","9")
		I% = 1
		WHILE I% <= LEN(STRTOKEN)
			IF MID$(STRTOKEN,1,1) <> MID$(STRTOKEN,I%,1) &
			   AND "," <> MID$(STRTOKEN,I%,1) THEN
				CALL REEMPLAZO(STRTOKEN,",","")
				VARI_TIPO = "X(" + STR$(LEN(STRTOKEN)) + ")"
				I% = LEN(STRTOKEN)
			END IF
			I% = I% + 1
		NEXT				
	END IF
	SGN_LEAD = ""
	IF MID$(VARI_TIPO,1,1) = "N" THEN
		VARI_TIPO = "S" + MID$(VARI_TIPO,2,LEN(VARI_TIPO) - 1)
		SGN_LEAD = " SIGN LEADING SEPARATE"
	END IF
	CALL REEMPLAZO(VARI_TIPO,"N","9")
	VARI_TIPO = VARI_TIPO + SGN_LEAD
 
   END DEF
 !==================================================================

   DEF INTEGER INDEX
	TOKEN = NEXTTOKEN
	IF VALTOKEN <> "=" THEN
		GO TO F_INDEX
	END IF
 L_INDEX:
	TMP_INDEX = TMP_INDEX + 1
	TOKEN = NEXTTOKEN
	TOKEN = NEXTTOKEN
	TOKEN = NEXTTOKEN
	TOKEN = NEXTTOKEN
	TOKEN = NEXTTOKEN
	TOKEN = NEXTTOKEN
	IF VALTOKEN = ":" THEN
		GO TO L_INDEX
	END IF
	IF ANT_INDEX = NO THEN
		NIV_INDEX = 5
	ELSE
		IF TMP_INDEX = T_INDEX THEN
			NIV_INDEX = 7
		ELSE
			NIV_INDEX = 5
		END IF
	END IF
 F_INDEX:
	ANT_INDEX = ZI
	T_INDEX = TMP_INDEX
	V_TIDX(T_CMPO) = T_INDEX
   END DEF

 !==================================================================

   DEF INTEGER ATRB_CMPO
	SW_INDEX = NO
	TOKEN = NEXTTOKEN
	WHILE VALTOKEN <> ";"
		IF VALTOKEN = "FIXED_DECIMAL" THEN
			V_ATRB(ES_NUME,T_CMPO) = ZI
			TOKEN = NEXTTOKEN
		ELSE
		IF VALTOKEN = "DISPLAY_ONLY" THEN
			V_ATRB(DISP_ONLY,T_CMPO) = ZI
			TOKEN = NEXTTOKEN
		ELSE
		IF VALTOKEN = "INDEX" THEN
			TMP_INDEX = 1
			SW_INDEX = ZI
			ACCION = INDEX
		ELSE
			TOKEN = NEXTTOKEN
		END IF
		END IF
		END IF
	NEXT
   END DEF

 !==================================================================
   DEF INTEGER ANAL_NAME
	J% = 0
	FOR I% = 1 TO LEN(STRTOKEN)
		IF MID$(STRTOKEN,I%,1) = "_" THEN
			J% = J% + 1
			UNDER_COR(J%) = I%
		END IF
	NEXT I%
	NAME_REGI = MID$(STRTOKEN,1,UNDER_COR(1) - 1)
	NAME_TIPO = MID$(STRTOKEN,UNDER_COR(1) + 1,UNDER_COR(2) - (UNDER_COR(1) + 1))
	NAME_NAME = MID$(STRTOKEN,UNDER_COR(2) + 1,LEN(STRTOKEN) - UNDER_COR(2) )
	NFLD_PTXT = NAME_NAME
	CALL REEMPLAZO(NAME_NAME,"_","-")
	AUXI_CMPO = STRTOKEN
	VARI_COMP = STRTOKEN
	CALL REEMPLAZO(AUXI_CMPO,"_","-")
 !!!
 !!!  Crea la lista de todos los registros que intervienen en la pantalla
 !!!
	ESTA_REGI = NO
	IF NAME_REGI <> "FRM" THEN
		FOR I% = 1 TO T_REGI
			IF NAME_REGI = V_REGI(I%) THEN
				ESTA_REGI = ZI
				INX_LLAVE = I%
				I% = T_REGI
			END IF
		NEXT I%
		IF ESTA_REGI = NO THEN
			T_REGI = T_REGI + 1
			INX_LLAVE = T_REGI
			V_REGI(T_REGI) = NAME_REGI
		END IF
	END IF
   END DEF

 !==================================================================

   DEF INTEGER CREA_CMPO

 !!!
 !!! Crea la lista de todos los campos que intervienen en la pantalla
 !!!
	ESTA_CMPO = NO
	FOR I% = 1 TO T_CMPO
		IF AUXI_CMPO = V_CMPO(I%) THEN
			ESTA_CMPO = ZI
		END IF
	NEXT I%
	NEW_CMPO = NO
	IF ESTA_CMPO = NO THEN
		NEW_CMPO = ZI
		T_CMPO = T_CMPO + 1
		V_CMPO(T_CMPO) = AUXI_CMPO
		V_RECA(T_CMPO) = NAME_REGI
		V_TIPO(T_CMPO) = NAME_TIPO
		V_NOMBRES(T_CMPO) = NAME_NAME
	END IF
   END DEF

 !==================================================================

   DEF INTEGER ANAL_FIEL
	TOKEN = NEXTTOKEN
	IF VALTOKEN <> "NAME" THEN
		GO TO LABE_NOFI
	END IF
	TOKEN = NEXTTOKEN
	TOKEN = NEXTTOKEN
	ACCION = ANAL_NAME
	TOKEN = NEXTTOKEN
	TOKEN = NEXTTOKEN
	INDI_LINE = NUMTOKEN
	IF RNG_SCROLL(INDI_LINE) = NO THEN
		IF NAME_TIPO = "KEY" THEN
			V_KEYS(INX_LLAVE) = ZI
		END IF
		ACCION = CREA_CMPO
	END IF
	IF V_SCROLL(INDI_LINE) <> "" THEN
		TIPO_DATO = 40
		BUFOUT = V_SCROLL(INDI_LINE)
		V_SCROLL(INDI_LINE) = ""
		TIPO_LINE = INDI_LINE
		BUFOUT = ESCR_WSS(C_FILE_WSS,2,BUFOUT)
	END IF
	TOKEN = NEXTTOKEN
	TOKEN = NEXTTOKEN
	TOKEN = NEXTTOKEN
	TOKEN = NEXTTOKEN
	IF VALTOKEN = "PICTURE" THEN
		ACCION = PICTURE
	END IF
	ACCION = ATRB_CMPO
 !!!
 !!! Escribe dato conteniendo el nombre del campo
 !!!
	TIPO_DATO = 20
	TIPO_LINE = 10
	BUFOUT = "05 " + INTERNO + "-NOM-" + NAME_NAME + &
		 V_M(4) + "PIC X(31) VALUE"
	BUFOUT = ESCR_WSS(C_FILE_WSS,3,BUFOUT)
	BUFOUT = V_M(3) + "'" + VARI_COMP + "'." + O_L
	BUFOUT = ESCR_WSS(C_FILE_WSS,3,BUFOUT)
 !!!
 !!! Escribe el dato con su PICTURE asociado
 !!!
	IF RNG_SCROLL(INDI_LINE) = ZI THEN
		TIPO_DATO = 40
		TIPO_LINE = INDI_LINE
	ELSE
		TIPO_DATO = 30
		TIPO_LINE = 10
	END IF
	IF V_ATRB(ES_NUME,T_CMPO) = ZI THEN
		CALL REEMPLAZO(VARI_TIPO,",","V")
	ELSE
		CALL REEMPLAZO(VARI_TIPO,",","")
	END IF
	IF SW_INDEX = ZI THEN
		ANT_INDEX = ZI
		IF NIV_INDEX = 5 THEN
			BUFOUT = "05 " + INTERNO + "-IDX-" + NAME_NAME +&
				 " OCCURS " + STR$(T_INDEX) + " TIMES."
			BUFOUT = ESCR_WSS(C_FILE_WSS,3,BUFOUT)
		END IF
		BUFOUT = "07 " + INTERNO + "-" + NAME_TIPO + "-" +&
			NAME_NAME + V_M(3) + "PIC " + VARI_TIPO + "."
	 	BUFOUT = ESCR_WSS(C_FILE_WSS,4,BUFOUT)
	ELSE
		ANT_INDEX = NO
		BUFOUT = "05 " + INTERNO + "-" + NAME_TIPO + "-" +&
			NAME_NAME + V_M(4) + "PIC " + VARI_TIPO + "."
	 	BUFOUT = ESCR_WSS(C_FILE_WSS,3,BUFOUT)
	END IF
 !!!
 !!! Escribe el parrafo de validacion del campo
 !!!
	BUFOUT = "	IF FRM-NFLD = " + INTERNO + "-NOM-" + NAME_NAME
	PRINT	 #C_FILE_IFS, BUFOUT
	BUFOUT = "		PERFORM " + "VAL-" + NAME_REGI + "-" +&
		 NAME_TIPO + "-" + NAME_NAME
	PRINT	 #C_FILE_IFS, BUFOUT
	BUFOUT = "		GO TO FIN-VAL-FLD."
	PRINT	 #C_FILE_IFS, BUFOUT
	IF ESMAY_UNO = ZI THEN
		BUFOUT = ""
		PRINT	 #C_FILE_VAL, BUFOUT
	ELSE
		ESMAY_UNO = ZI
	END IF
	BUFOUT = "VAL-" + NAME_REGI + "-" + NAME_TIPO + "-" + NAME_NAME +&
		 " SECTION."
	PRINT	 #C_FILE_VAL, BUFOUT
	BUFOUT = "INI-VAL-" + NAME_REGI + "-" + NAME_TIPO + "-" + NAME_NAME +"."
	PRINT	 #C_FILE_VAL, BUFOUT
	IF RNG_SCROLL(INDI_LINE) = NO THEN
		IF SW_INDEX = NO THEN
			BUFOUT = V_M(2) + "MOVE FRM-VFLD TO " + INTERNO +&
				 "-" + NAME_TIPO + "-" + NAME_NAME +&
				 " IN " + INTERNO + "-FLD."
		ELSE
			BUFOUT = V_M(2) + "MOVE FRM-VFLD TO " + INTERNO +&
				 "-" + NAME_TIPO + "-" + NAME_NAME +&
				 " IN " + INTERNO + "-FLD(FRM-IFLD)."
		END IF
		PRINT	 #C_FILE_VAL, BUFOUT
	END IF
	BUFOUT = "*% INCLUDE "+ NAME_REGI + "_"+ NAME_TIPO + "_" + NFLD_PTXT +&
		 " OF '^sis^FRM^frm^.TXT'"
	PRINT	 #C_FILE_VAL, BUFOUT
	BUFOUT = "*% INCLUDE "+ NAME_REGI + "_"+ NAME_TIPO + "_" + NFLD_PTXT +&
		 " OF '^sis^FRM^frm^.GEN'"
	PRINT	 #C_FILE_VAL, BUFOUT
	BUFOUT = "FIN-VAL-" + NAME_REGI + "-" + NAME_TIPO + "-" + NAME_NAME +"."
	PRINT	 #C_FILE_VAL, BUFOUT
	BUFOUT = "	EXIT."
	PRINT	 #C_FILE_VAL, BUFOUT
	
 LABE_NOFI:
 END DEF
 !==================================================================

   DEF INTEGER NAMED_DATA
	TOKEN = NEXTTOKEN
	TOKEN = NEXTTOKEN
	TOKEN = NEXTTOKEN
	TOKEN = NEXTTOKEN
	TOKEN = NEXTTOKEN
	TOKEN = NEXTTOKEN
	DAT_REG = STRTOKEN
	TOKEN = NEXTTOKEN
	TOKEN = NEXTTOKEN
	TOKEN = NEXTTOKEN
	DAT_SIS = STRTOKEN
	FOR I% = 1 TO T_REGI
		IF DAT_REG = V_REGI(I%) THEN
			V_SIS_REG(I%) = DAT_SIS
		END IF
	NEXT I%
   END DEF

 !==================================================================

   DEF INTEGER MOVE_SIDX
	FOR K% = 1 TO V_TIDX(J%)
	  FMS_PUTC = FMS_PUTC + V_M(2) + "MOVE " + V_CMPO(J%)	+&
	    " IN " + V_REGI(I%) + "(" + STR$(K%) + ") TO " +&
	    INTERNO + "-" + V_TIPO(J%) + "-" + V_NOMBRES(J%) +&
	    " IN " + INTERNO + "-FLD(" + STR$(K%) + ")." + O_L
	  FMS_RETC = FMS_RETC + V_M(2) + "MOVE " + INTERNO	+&
	    "-" + V_TIPO(J%) + "-" + V_NOMBRES(J%)		+&
	    " IN " + INTERNO + "-FLD(" + STR$(K%) + ") TO " 	+&
	    V_CMPO(J%) + " IN " + V_REGI(I%) + "("	+&
	    STR$(K%) + ")." + O_L
	IF V_TIPO(J%) = "KEY" THEN
		FMS_KEYC = FMS_KEYC + V_M(2) + "MOVE " + INTERNO +&
			   "-KEY-" + V_NOMBRES(J%) + " IN " + INTERNO +&
			   "-FLD(" + STR$(K%) + ") TO " + V_CMPO(J%) +&
			   " IN " + V_REGI(I%) + "(" + STR$(K%) + ")." + O_L
	END IF
	NEXT K%
   END DEF

 !==================================================================

   DEF INTEGER MOVE_NIDX
	FMS_PUTC = FMS_PUTC + V_M(2) + "MOVE " + V_CMPO(J%)	+&
	    " IN " + V_REGI(I%) + " TO " + INTERNO + "-"	+&
	    V_TIPO(J%) + "-" + V_NOMBRES(J%)			+&
	    " IN " + INTERNO + "-FLD." + O_L
	FMS_RETC = FMS_RETC + V_M(2) + "MOVE " + INTERNO	+&
	    "-" + V_TIPO(J%) + "-" + V_NOMBRES(J%)		+&
	    " IN " + INTERNO + "-FLD TO " + V_CMPO(J%)	+&
	    " IN " + V_REGI(I%) + "." + O_L
	IF V_TIPO(J%) = "KEY" THEN
		FMS_KEYC = FMS_KEYC + V_M(2) + "MOVE " + INTERNO + "-KEY-" +&
			   V_NOMBRES(J%) + " IN " + INTERNO + "-FLD TO " +&
			   V_CMPO(J%) + " IN " + V_REGI(I%) + "." + O_L
	END IF
   END DEF

 !==================================================================

   DEF INTEGER GEN_MOVE

   FOR I% = 1 TO T_REGI
 	PRE_RETC = "FMS-RETC-" + V_REGI(I%) 
	FMS_RETC = PRE_RETC + " SECTION." + O_L + "INI-" + PRE_RETC + "." + O_L

	PRE_PUTC = "FMS-PUTC-" + V_REGI(I%)
	FMS_PUTC = PRE_PUTC + " SECTION." + O_L + "INI-" + PRE_PUTC + "." + O_L
	IF V_KEYS(I%) = ZI THEN
		PRE_KEYC = "FMS-KEYC-" + V_REGI(I%)
		FMS_KEYC = PRE_KEYC + " SECTION."  + O_L + "INI-" +&
			   PRE_KEYC+ "."+ O_L
	END IF
	FOR J% = 1 TO T_CMPO
	     	IF V_REGI(I%) = V_RECA(J%) THEN
			IF V_TIDX(J%) <> 0 THEN
				ACCION = MOVE_SIDX
			ELSE
				ACCION = MOVE_NIDX
			END IF
		END IF
	NEXT J%
	FMS_RETC = FMS_RETC + "FIN-" + PRE_RETC + "." + O_L +&
		    V_M(2) + "EXIT." + O_L + O_L
	PRINT #C_FILE_MOV, FMS_RETC
	FMS_PUTC = FMS_PUTC + "	MOVE " + INTERNO + "-DFLD TO FRM-DFLD." +&
		    O_L + "FIN-" + PRE_PUTC + "." + O_L +&
		    V_M(2) + "EXIT." + O_L + O_L
	PRINT #C_FILE_MOV, FMS_PUTC
	IF V_KEYS(I%) = ZI THEN
		FMS_KEYC = FMS_KEYC + "FIN-" + PRE_KEYC + "." + O_L +&
			    V_M(2) + "EXIT." + O_L + O_L
		PRINT #C_FILE_MOV, FMS_KEYC
	END IF
	FMS_RETC, FMS_PUTC, FMS_KEYC = ""
   NEXT I%

   END DEF

 !==================================================================
 !!!
 !!! Genera RETALL
 !!!
  DEF INTEGER FMS_RETA
	PRINT #C_FILE_MOV, "FMS-RETA SECTION."
	PRINT #C_FILE_MOV, "INI-FMS-RETA."
	FOR I% = 1 TO T_REGI
		RETALL = V_M(2) + "PERFORM FMS-RETC-" + V_REGI(I%) + "."
		PRINT #C_FILE_MOV, RETALL
	NEXT I%
	PRINT #C_FILE_MOV, "FIN-FMS-RETA."
	PRINT #C_FILE_MOV, V_M(2) + "EXIT."
	PRINT #C_FILE_MOV, ""
   END DEF

 !==================================================================
 !!!
 !!! Genera PUTALL
 !!!
  DEF INTEGER FMS_PUTA
	PRINT #C_FILE_MOV, "FMS-PUTA SECTION."
	PRINT #C_FILE_MOV, "INI-FMS-PUTA."
	FOR I% = 1 TO T_REGI
		PUTALL = V_M(2) + "PERFORM FMS-PUTC-" + V_REGI(I%) + "."
		PRINT #C_FILE_MOV, PUTALL
	NEXT I%
	PRINT #C_FILE_MOV, "FIN-FMS-PUTA."
	PRINT #C_FILE_MOV, V_M(2) + "EXIT."
	PRINT #C_FILE_MOV, ""
   END DEF

 !==================================================================
 !!!
 !!! Genera KEYALL
 !!!
  DEF	INTEGER FMS_KEYA
	PRINT #C_FILE_MOV, "FMS-KEYA SECTION."
	PRINT #C_FILE_MOV, "INI-FMS-KEYA."
	FOR I% = 1 TO T_REGI
		IF V_KEYS(I%) = ZI THEN
			KEYALL = V_M(2) + "PERFORM FMS-KEYC-" + V_REGI(I%) + "."
			PRINT #C_FILE_MOV, KEYALL
		END IF
	NEXT I%
	PRINT #C_FILE_MOV, "FIN-FMS-KEYA."
	PRINT #C_FILE_MOV, V_M(2) + "EXIT."
	PRINT #C_FILE_MOV, ""
   END DEF

 !==================================================================
 !!!
 !!! Genera IF-RET
 !!!
  DEF INTEGER GEN_RETC
	PRINT #C_FILE_MOV, "FMS-RETC SECTION."
	PRINT #C_FILE_MOV, "INI-FMS-RETC."
	FOR I% = 1 TO T_REGI
		RETC_IF = V_M(2) + "IF FRM-NREG = '" + V_REGI(I%) + "'" +&
			  O_L + V_M(3) + "PERFORM FMS-RETC-" + V_REGI(I%)
		PRINT #C_FILE_MOV, RETC_IF
		PRINT #C_FILE_MOV, V_M(2) + "ELSE"
	NEXT I%
	PRINT #C_FILE_MOV, V_M(3) + "PERFORM FMS-MERR."
	PRINT #C_FILE_MOV, "FIN-FMS-RETC."
	PRINT #C_FILE_MOV, V_M(2) + "EXIT."
	PRINT #C_FILE_MOV, ""
   END DEF

 !==================================================================
 !!!
 !!! Genera IF-PUT
 !!!
  DEF INTEGER GEN_PUTC
	PRINT #C_FILE_MOV, "FMS-PUTC SECTION."
	PRINT #C_FILE_MOV, "INI-FMS-PUTC."
	FOR I% = 1 TO T_REGI
		PUTC_IF = V_M(2) + "IF FRM-NREG = '" + V_REGI(I%) + "'" +&
			  O_L + V_M(3) + "PERFORM FMS-PUTC-" + V_REGI(I%)
		PRINT #C_FILE_MOV, PUTC_IF
		PRINT #C_FILE_MOV, V_M(2) + "ELSE"
	NEXT I%
	PRINT #C_FILE_MOV, V_M(3) + "PERFORM FMS-MERR."
	PRINT #C_FILE_MOV, "FIN-FMS-PUTC."
	PRINT #C_FILE_MOV, V_M(2) + "EXIT."
	PRINT #C_FILE_MOV, ""
   END DEF

 !==================================================================
 !!!
 !!! Genera IF-KEY
 !!!
  DEF INTEGER GEN_KEYC
	PRINT #C_FILE_MOV, "FMS-KEYC SECTION."
	PRINT #C_FILE_MOV, "INI-FMS-KEYC."
	FOR I% = 1 TO T_REGI
		IF V_KEYS(I%) = ZI THEN		
			KEYC_IF = V_M(2) + "IF FRM-NREG = '" + V_REGI(I%) +&
				  "'" + O_L + V_M(3) + "PERFORM FMS-KEYC-" +&
				  V_REGI(I%)
			PRINT #C_FILE_MOV, KEYC_IF
			PRINT #C_FILE_MOV, V_M(2) + "ELSE"
		END IF
	NEXT I%
	PRINT #C_FILE_MOV, V_M(3) + "PERFORM FMS-MERR."
	PRINT #C_FILE_MOV, "FIN-FMS-KEYC."
	PRINT #C_FILE_MOV, V_M(2) + "EXIT."
	PRINT #C_FILE_MOV, ""
   END DEF
 !==================================================================
 !!!
 !!! 
 !!!
  DEF INTEGER W_FLD
  IF SW_RFLD = ZI THEN
	SW_RFLD = NO
	SW_PFLD = NO
	BUFOUT = ESCR_GENE(C_FILE_FLD,2,"MOVE " + FLD_PFLD+&
		" TO FRM-PFLD.")
	BUFOUT = ESCR_GENE(C_FILE_FLD,2,"MOVE " + IDX_PFLD_FLD +&
		 " TO FRM-PIND.")
	BUFOUT = ESCR_GENE(C_FILE_FLD,2,"MOVE " + FLD_UFLD+&
		" TO FRM-UFLD.")
	BUFOUT = ESCR_GENE(C_FILE_FLD,2,"MOVE " + IDX_UFLD_FLD +&
		 " TO FRM-UIND.")
	BUFOUT = ESCR_GENE(C_FILE_FLD,2,"CALL '" +&
		"DESPROFRM' USING FRM-GET-RNG.")
	BUFOUT = ESCR_GENE(C_FILE_FLD,2,"IF FRM-STAT-ABT")
	BUFOUT = ESCR_GENE(C_FILE_FLD,3,"MOVE SCR-STAT-ABT" +&
		 " TO SCR-STAT")
	BUFOUT = ESCR_GENE(C_FILE_FLD,3,"GO TO FIN-GET-FLD.")
   END IF
   END DEF
 !==================================================================
 !!!
 !!! 
 !!!
  DEF INTEGER W_KEY
  IF SW_RKEY = ZI THEN
	SW_RKEY = NO
	SW_PKEY = NO
	BUFOUT = ESCR_GENE(C_FILE_KEY,2,"MOVE " + FLD_PKEY +&
		" TO FRM-PFLD.")
	BUFOUT = ESCR_GENE(C_FILE_KEY,2,"MOVE " + IDX_PFLD_KEY +&
		 " TO FRM-PIND.")
	BUFOUT = ESCR_GENE(C_FILE_KEY,2,"MOVE " + FLD_UKEY +&
		" TO FRM-UFLD.")
	BUFOUT = ESCR_GENE(C_FILE_KEY,2,"MOVE " + IDX_UFLD_KEY +&
		 " TO FRM-UIND.")
	BUFOUT = ESCR_GENE(C_FILE_KEY,2,"CALL '" +&
		 "DESPROFRM' USING FRM-GET-RNG.")
	BUFOUT = ESCR_GENE(C_FILE_KEY,2,"IF FRM-STAT-ABT")
	BUFOUT = ESCR_GENE(C_FILE_KEY,3,"MOVE SCR-STAT-ABT" +&
		 " TO SCR-STAT")
	BUFOUT = ESCR_GENE(C_FILE_KEY,3,"GO TO FIN-GET-KEY.")
   END IF
   END DEF
 !==================================================================
 !!!
 !!! Detecta el orden de los campos
 !!!
  DEF INTEGER ORDER
	TOKEN = NEXTTOKEN
 C_ORDER:
	TOKEN = NEXTTOKEN
	TOKEN = NEXTTOKEN
	CALL REEMPLAZO(STRTOKEN,"_","-")
	J% = 0
	FOR I% = 1 TO LEN(STRTOKEN)
		IF MID$(STRTOKEN,I%,1) = "-" THEN
			J% = J% + 1
			UNDER_COR(J%) = I%
		END IF
	NEXT I%
	NAME_NAME = MID$(STRTOKEN,UNDER_COR(2) + 1,LEN(STRTOKEN) - UNDER_COR(2) )
	Y% = INSTR(1%,NAME_NAME,"(")
	IDX_IDX = ""
	IF Y% <> 0 THEN
		IDX_IDX = MID$(NAME_NAME,Y%+1,INSTR(1%,NAME_NAME,")")-(Y% + 1))
		NAME_NAME = MID$(NAME_NAME,1,Y%-1)
	END IF
	FOR I% = 1 TO T_CMPO
		IF STRTOKEN = V_CMPO(I%) THEN
			J% = I%
		END IF
	NEXT I%
	IF V_ATRB(DISP_ONLY,J%) <> NO THEN
		GO TO L_NODP
	END IF
	IF MID$(STRTOKEN,UNDER_COR(1) + 1,3) = "KEY" THEN
		SW_RKEY = ZI
		IF SW_PKEY = NO THEN
			IF IDX_IDX <> "" THEN
				IDX_PFLD_KEY = IDX_IDX
			ELSE
				IDX_PFLD_KEY = "0"
			END IF
			SW_PKEY = ZI
			FLD_PKEY = INTERNO + "-NOM-" + NAME_NAME
		END IF
		IF IDX_IDX <> "" THEN
			IDX_UFLD_KEY = IDX_IDX
		ELSE
			IDX_UFLD_KEY = "0"
		END IF
		FLD_UKEY = INTERNO + "-NOM-" + NAME_NAME
		ACCION = W_FLD
	ELSE
		SW_RFLD = ZI
		IF SW_PFLD = NO THEN
			IF IDX_IDX <> "" THEN
				IDX_PFLD_FLD = IDX_IDX
			ELSE
				IDX_PFLD_FLD = "0"
			END IF
			SW_PFLD = ZI
			FLD_PFLD = INTERNO + "-NOM-" + NAME_NAME
		END IF
		IF IDX_IDX <> "" THEN
			IDX_UFLD_FLD = IDX_IDX
		ELSE
			IDX_UFLD_FLD = "0"
		END IF
		FLD_UFLD = INTERNO + "-NOM-" + NAME_NAME
		ACCION = W_KEY
	END IF
 L_NODP:
	TOKEN = NEXTTOKEN
	IF VALTOKEN = "NAME" THEN
		GO TO C_ORDER
	ELSE
		ACCION = W_FLD
		ACCION = W_KEY
	END IF
   END DEF
 ! ------------------------------------------------------------------
 !               MODULO PRINCIPAL
 ! __________________________________________________________________

	ON ERROR GO TO LABE_BADD
	ACCION = INIC_IALI
	WHILE VALTOKEN <> "FORM"
		TOKEN = NEXTTOKEN
	NEXT
	TOKEN = NEXTTOKEN
	TOKEN = NEXTTOKEN
	TOKEN = NEXTTOKEN
	POST_NAME = MID$(STRTOKEN,1,SZTOKEN)
	INTERNO = STRTOKEN
	VARI_UARV = "'" + PROY + "FRM" + INTERNO + "'"
 !	VARI_UARV = "SPACES"
	WHILE VALTOKEN <> ";"
		TOKEN = NEXTTOKEN
 !		IF VALTOKEN = "FUNCTION_KEY_ACTION_ROUTINE" THEN
 !			TOKEN = NEXTTOKEN
 !			TOKEN = NEXTTOKEN
 !			VARI_UARV = "'" + STRTOKEN + "'"
 !		END IF
	
	NEXT
	TOKEN = NEXTTOKEN
 LABE_SCRS:
	IF VALTOKEN = "SCROLL" THEN
		TOKEN = NEXTTOKEN
		TOKEN = NEXTTOKEN
		TOKEN = NEXTTOKEN
		INI_SCROLL = NUMTOKEN
		TOKEN = NEXTTOKEN
		TOKEN = NEXTTOKEN
		TOKEN = NEXTTOKEN
		FIN_SCROLL = NUMTOKEN
		INDI_SCRS = FIN_SCROLL - INI_SCROLL + 1
		FOR I% = INI_SCROLL TO FIN_SCROLL
			RNG_SCROLL(I%) = ZI
		NEXT I%
		STRG_SCRS = STR$(INDI_SCRS)
		V_SCROLL(INI_SCROLL) = "03 " + INTERNO + "-SCR-" +&
				STR$(INI_SCROLL) + " OCCURS " + STRG_SCRS + "."
		TOKEN = NEXTTOKEN
		TOKEN = NEXTTOKEN
		GO TO LABE_SCRS
	END IF

	FILE_WSS = "FRMDAT" + INTERNO + ".SRT"
	OPEN FILE_WSS FOR OUTPUT AS FILE #C_FILE_WSS,			&
		ORGANIZATION SEQUENTIAL VARIABLE, RECORDSIZE 255,	&
		RECORDTYPE ANY

	FILE_MOV = "FRM" + INTERNO + ".MOV"
	OPEN FILE_MOV FOR OUTPUT AS FILE #C_FILE_MOV,			&
		ORGANIZATION SEQUENTIAL VARIABLE, RECORDSIZE 255,	&
		RECORDTYPE ANY

	FILE_CPY = "FRM" + INTERNO + ".CPY"
	OPEN FILE_CPY FOR OUTPUT AS FILE #C_FILE_CPY,			&
		ORGANIZATION SEQUENTIAL VARIABLE, RECORDSIZE 255,	&
		RECORDTYPE ANY

	FILE_IFS = "FRM" + INTERNO + ".IFS"
	OPEN FILE_IFS FOR OUTPUT AS FILE #C_FILE_IFS,			&
		ORGANIZATION SEQUENTIAL VARIABLE, RECORDSIZE 255,	&
		RECORDTYPE ANY

	FILE_VAL = "FRM" + INTERNO + ".VAL"
	OPEN FILE_VAL FOR OUTPUT AS FILE #C_FILE_VAL,			&
		ORGANIZATION SEQUENTIAL VARIABLE, RECORDSIZE 255,	&
		RECORDTYPE ANY

	FILE_FLD = "FRMFLD" + INTERNO + ".GEN"
	OPEN FILE_FLD FOR OUTPUT AS FILE #C_FILE_FLD,			&
		ORGANIZATION SEQUENTIAL VARIABLE, RECORDSIZE 255,	&
		RECORDTYPE ANY

	FILE_KEY = "FRMKEY" + INTERNO + ".GEN"
	OPEN FILE_KEY FOR OUTPUT AS FILE #C_FILE_KEY,			&
		ORGANIZATION SEQUENTIAL VARIABLE, RECORDSIZE 255,	&
		RECORDTYPE ANY

	FILE_EDT = "FRM" + INTERNO + ".EDT"
	OPEN FILE_EDT FOR OUTPUT AS FILE #C_FILE_EDT,			&
		ORGANIZATION SEQUENTIAL VARIABLE, RECORDSIZE 255,	&
		RECORDTYPE ANY

 !!!
 !!! Genera el archivo de edicion
 !!!
	
	PRINT #C_FILE_EDT, 'FIND "^cpy^"'
	PRINT #C_FILE_EDT, 'DELETE'
	PRINT #C_FILE_EDT, 'INC ' + FILE_CPY
	PRINT #C_FILE_EDT, 'FIND "^ifs^"'
	PRINT #C_FILE_EDT, 'DELETE'
	PRINT #C_FILE_EDT, 'INC ' + FILE_IFS
	PRINT #C_FILE_EDT, 'FIND "^mov^"'
	PRINT #C_FILE_EDT, 'DELETE'
	PRINT #C_FILE_EDT, 'INC ' + FILE_MOV
	PRINT #C_FILE_EDT, 'FIND "^val^"'
	PRINT #C_FILE_EDT, 'DELETE'
	PRINT #C_FILE_EDT, 'INC ' + FILE_VAL
	PRINT #C_FILE_EDT, 'S/^sis^/' + PROY + '/W/NOTYPE'
	PRINT #C_FILE_EDT, 'S/^frm^/' + POST_NAME + '/W/NOTYPE'
	PRINT #C_FILE_EDT, 'EXIT'

	TIPO_DATO = 10
	TIPO_LINE = 0
	TIPO_CORR = 0
 !!!
 !!! Escribe el encabezado del registro imagen
 !!!
	
	BUFOUT = ESCR_WSS(C_FILE_WSS,1,"01 " + INTERNO + "-FRM.")
	BUFOUT = ESCR_WSS(C_FILE_WSS,2,"03 " + INTERNO + "-NAME" + V_M(5) + "PIC X(31) VALUE")
	BUFOUT = ESCR_WSS(C_FILE_WSS,4,"'"   + INTERNO + "'.")
	BUFOUT = ESCR_WSS(C_FILE_WSS,2,"03 " + INTERNO + "-RWSP" + V_M(5) + "PIC X(12).")
	BUFOUT = ESCR_WSS(C_FILE_WSS,2,"03 " + INTERNO + "-UARV" + V_M(5) + "PIC X(39) VALUE" )
	BUFOUT = ESCR_WSS(C_FILE_WSS,4,VARI_UARV + ".")
		
	TIPO_DATO = 20
	TIPO_CORR = 0
	BUFOUT = ESCR_WSS(C_FILE_WSS,2,"03 " + INTERNO + "-NFLD.")
	
	TIPO_DATO = 30
	TIPO_CORR = 0
	BUFOUT = ESCR_WSS(C_FILE_WSS,1,"01 " + INTERNO + "-FLD	EXTERNAL.")
	BUFOUT = ESCR_WSS(C_FILE_WSS,2,"03 " + INTERNO + "-DFLD.")
	TOKEN = NEXTTOKEN
	TOKEN = NEXTTOKEN
	TOKEN = NEXTTOKEN
	WHILE TOKEN <> ETXTOK	 
		TOKEN = NEXTTOKEN
		IF VALTOKEN = "FIELD" THEN
			ACCION = ANAL_FIEL
		ELSE
		IF VALTOKEN = "NAMED_DATA" THEN
			ACCION = NAMED_DATA
		ELSE
		IF VALTOKEN = "ORDER" THEN
			TOKEN = NEXTTOKEN
			IF VALTOKEN = "BEGIN_WITH" THEN
				TOKEN = NEXTTOKEN
				TOKEN = NEXTTOKEN
				ACCION = ORDER
			END IF		
		END IF
		END IF
		END IF
	NEXT

	ACCION = FMS_RETA
	ACCION = FMS_PUTA
	ACCION = FMS_KEYA
	ACCION = GEN_RETC
	ACCION = GEN_PUTC
	ACCION = GEN_KEYC
	ACCION = GEN_MOVE
	FOR I% = 1 TO T_REGI
		BUFOUT = "COPY	'" + V_SIS_REG(I%) + "REG." + V_REGI(I%) +&
			"'	FROM DICTIONARY" + O_L +&
			"	REPLACING" +  O_L +&
			"	==" + V_REGI(I%) + "==	BY	==" +&
			V_REGI(I%) + " EXTERNAL==."
		PRINT #C_FILE_CPY, BUFOUT
	NEXT I%
	BUFOUT = "	PERFORM FMS-MERR."
	PRINT #C_FILE_IFS, BUFOUT
	ACCION = W_FLD
	ACCION = W_KEY
	CLOSE #C_FILE_FLD
	CLOSE #C_FILE_KEY
	CLOSE #C_FILE_IFS
	CLOSE #C_FILE_VAL
	CALL LIB$DO_COMMAND("$ EDTFRM " + INTERNO + " " + PROY)
	GO TO LABE_ATRA
	
 LABE_BADD:
	PRINT ASCI_BELL,ASCI_BELL,ASCI_BELL
	IF ERR = 2 THEN
		PRINT FILE_FLG,FILE_WSS,FILE_SOR, " : NOMBRE DE ARCHIVO ILEGAL"
	ELSE 
	IF ERR = 5 THEN
		PRINT FILE_FLG,FILE_WSS,FILE_SOR, " ARCHIVO INEXISTENTE       "
	ELSE
		PRINT "CODIGO : ",ERR
		PRINT "MENSAJE :",ERT$(ERR)
	END IF
	END IF
	RESUME 999
999
 LABE_ATRA:
 END
9999	SUB REEMPLAZO (STRING ESTR_INGS BY DESC, STRING CRTR_ORIG BY DESC,&
		 	STRING CRTR_REEM BY DESC)
	VAR_AUX$ = ""
	FOR I% = 1 TO LEN(ESTR_INGS)
		IF MID$(ESTR_INGS,I%,1) = CRTR_ORIG THEN
			VAR_AUX$ = VAR_AUX$ + CRTR_REEM
		ELSE
			VAR_AUX$ = VAR_AUX$ + MID$(ESTR_INGS,I%,1)
		END IF
	NEXT I%
	ESTR_INGS = VAR_AUX$
	END SUB
