100
	DECLARE INTEGER NUMTOKEN,	SC_NUMTOKEN	,&
			SZTOKEN	, 	SC_SZTOKEN	,&
			TOKEN	,	SC_TOKEN 	,&
			P_P	,	SC_P_P		,&
			P_Q	,	SC_P_Q 		,&
			SZ_I_B

	DECLARE	STRING	C_Q	,	SC_C_Q		,&
			VALTOKEN,	SC_VALTOKEN	,&
			STRTOKEN

	DECLARE INTEGER	CONSTANT &
			KEYTOK = 1,	IDNTOK = 2	,&
			NUMTOK = 3,	STRTOK = 4	,&
			CHRTOK = 5,	EOLTOK = 6	,&
			ETXTOK = 7,	HTAB   = 9

200
	DECLARE INTEGER C_FILE_FLG,	C_FILE_DAT	,&
			C_FILE_SOR,	C_FILE_RDS	,&
			C_FILE_REG,	C_FILE_MOV	,&
			C_FILE_WSS,	C_FILE_DEC

	DECLARE INTEGER INDI_LINE,	INDI_COLU	,&
			INDI_CORR,	PRIO_SORT	,&
			FIRS_DETA,	FIRS_HEAD

	DECLARE INTEGER TOTA_MOVE			,&
			TOTA_NPCF,	TOTA_IDXS	,&
			TOTA_RNP


	DECLARE INTEGER CMPO_SUMA,	ESTA_SORT	,&
			ZERO_SUPP,	S_SORT		,&
			CMPO_WKSS,	HAY_SECC	,&
			SW_PF,		ES_NUME		,&
			CMPO_NC,	ES_KEY		,&
			ES_NP,		CMPO_PCOU

	DECLARE INTEGER INDI_SZTX,	LAST_LINE	,&
			LAST_PAHE,	ACCION		,&
			CONT_LINE,	RSTO_SZTX	,&
			PF_USED,	PF_BLAN		,&
			PF_REST,	PF_LINE		,&
			PTR_Q,		PAGE_LIMIT	,&
			FST_WSS				,&
			DEF_IND_RIGT,	UND_TOT_UND	,&
			MAP_TOT_CMPO,	MAP_VEC_UNDE(10) 

	DECLARE INTEGER LINE_IDXS(300),	COLU_IDXS(300)	,&
			MATR_VALI(300,2),V_RNP(20,2)

	DECLARE STRING	FILE_FLG,	FILE_DAT	,&
			FILE_SOR,	FILE_RDS	,&
			FILE_REG,	FILE_MOV	,&
			FILE_WSS,	FILE_DEC

	DECLARE	STRING	SIZE_STRI,	CONT_STRI	,&
			PRIN_LINE,	PRIN_COLU	,&
			PRIN_CORR,	STRG_LINP	,&
			INTERNO,	O_L		,&
			EXTERNO,	CONTINUACION_RPT ,&
			COLU_STRI,	GRUP_INDI	,&
			VARI_ABPA,	VARI_CIPA	,&
			VARI_LIMP,	BUFOUT		,&
			NAME_FILD,	RPT_GLS_PRY	,&
			MAP_GLS_CMP,	NAME_FILD_REGI	,&
			MAP_VEC_REGI(100)		,&
			MAP_GLS_NOMB			,&
			NAME_DECL,	VARI_LARG	,&
			VARI_TIPO,	SWIT_SECC	,&
			RESP_PICT,	RESP_SOUR	,&
			VARI_HELP,	VARI_POST	,&
			V_M(5),		CMPO_CTRL(300)	,&
			CMPO_KEY(300),	MOVE_SORT(300)	,&
			MOVE_REGI(300)			,&
			VECT_NOSO(300),  RSTO_STRI	,&
			DEF_GLS_DEFA			,&
			WSS_UARH			,&
			V_SECCION(300),	INCLU_1		,&
			INCLU_2,	PICT_WSS	,&
			VARI_SUM,	VARI_OAOD	,&
			RPT_GLS_SRT,	RPT_GLS_FOR	,&
			MAP_GLS_IDEN


	DECLARE INTEGER	CONSTANT &
			ZI	  = 1,	NO	  =  0	,&
			NEXT_PAGE = 2,	VALO_FOUT = 60	,&
			LINE_USED = 1

 !==========================================================================

    DEF INTEGER RPT_FNC_FFC
	PRIN_LINE = FORMAT$(INDI_LINE,"##")
	PRIN_COLU = FORMAT$(INDI_COLU,"###")
	PRIN_CORR = FORMAT$(INDI_CORR,"####")
	RPT_GLS_SRT = PRIN_LINE + PRIN_COLU + PRIN_CORR
	INDI_CORR = INDI_CORR + 1
    END DEF

 !==========================================================================

    DEF STRING ESCR_DAT (INTEGER TIPO_CANA,INTEGER MARGEN,STRING BUFOUT)
	ACCION = RPT_FNC_FFC
	PRINT #C_FILE_DAT,RPT_GLS_SRT + V_M(MARGEN) + BUFOUT
    END DEF

 !==========================================================================

    DEF STRING ESCR_GEN (INTEGER TIPO_CANA,INTEGER MARGEN,STRING BUFOUT)
	BUFOUT = V_M(MARGEN) + BUFOUT
	PRINT #TIPO_CANA,BUFOUT
    END DEF

 !=====================================================================

    DEF INTEGER NEXTTOKEN
	ON ERROR GO TO LABE_ERRO
	IF TOKEN = ETXTOK THEN
		NEXTTOKEN = ETXTOK
		GO TO LABE_ASIG
	END IF
        P_P = P_Q 
 LABE_SIGA:
	WHILE (MID$(I_B$,P_P,1) = " " OR ASCII(MID$(I_B$,P_P,1)) = HTAB) AND &
			P_P <= SZ_I_B
		P_P = P_P + 1
	NEXT
	P_Q = P_P 
	IF P_P > SZ_I_B OR I_B$ = "" THEN
		GET #C_FILE_FLG
		SZ_I_B = RECOUNT
	     	MOVE FROM #C_FILE_FLG , I_B$ = SZ_I_B
		P_P, P_Q  = 1
		GO TO LABE_SIGA
	END IF
	C_Q = MID$(I_B$,P_Q,1)
	IF (C_Q >= "A" AND C_Q <= "Z") OR (C_Q >= "a" AND C_Q <= "z") THEN
	         WHILE (MID$(I_B$,P_P,1) >= "A" AND MID$(I_B$,P_P,1) <= "Z" &
	            OR  MID$(I_B$,P_P,1)  = "_" 	  &
		    OR  MID$(I_B$,P_P,1) >= "a" AND &
		        MID$(I_B$,P_P,1) <= "z")
	            			P_P = P_P + 1
		 NEXT
	         SZTOKEN = P_P - P_Q
		 NEXTTOKEN = IDNTOK
	   	 VALTOKEN = MID$(I_B$,P_Q,SZTOKEN)
	ELSE
	IF C_Q >= "0" AND C_Q <= "9" THEN
	          WHILE MID$(I_B$,P_P,1) >= "0" AND MID$(I_B$,P_P,1) <= "9"
		             P_P = P_P + 1
	          NEXT
	          SZTOKEN = P_P - P_Q
		  NEXTTOKEN = NUMTOK
		  VALTOKEN = MID$(I_B$,P_Q,SZTOKEN)
	          NUMTOKEN  = VAL(VALTOKEN)
	ELSE
	IF C_Q = '"'  OR C_Q = "'" THEN
		P_P = P_P + 1
	        WHILE MID$(I_B$,P_P,1) <> C_Q
  	              P_P = P_P + 1
	        NEXT
	        SZTOKEN = P_P - (P_Q + 1)
	        P_P = P_P + 1
		NEXTTOKEN = STRTOK
		STRTOKEN = MID$(I_B$,P_Q + 1,SZTOKEN)
		VALTOKEN = C_Q + STRTOKEN + C_Q
	ELSE
		NEXTTOKEN = CHRTOK
		VALTOKEN = MID$(I_B$,P_P,1)
		P_P = P_P + 1
		SZTOKEN = 1
	END IF
	END IF
	END IF
	GO TO LABE_ASIG
 LABE_ERRO:
	IF ERR = 11 THEN
		NEXTTOKEN = ETXTOK
	ELSE
		PRINT "ERROR(";ERR;") ";ERT$(ERR);" en linea ";erl;", MODULO ";ern$
	END IF
	RESUME 800
 LABE_ASIG:
	P_Q = P_P
800
	END DEF

 !==========================================================================

    DEF INTEGER NEXTSCANN 
        SC_P_P = SC_P_Q 
	WHILE MID$(SC_I_B$,SC_P_P,1) = " " OR &
	ASCII(MID$(SC_I_B$,SC_P_P,1)) = HTAB
		SC_P_P = SC_P_P + 1
	NEXT
	IF MID$(SC_I_B$,SC_P_P,1) = "'" THEN
		NEXTSCANN= ETXTOK
		SC_VALTOKEN = ""
		GO TO SC_LABE_ASIG
	ELSE
		SC_P_Q = SC_P_P 
	END IF
	PTR_Q = SC_P_Q
	SC_C_Q = MID$(SC_I_B$,SC_P_Q,1)
	IF (SC_C_Q >= "A" AND SC_C_Q <= "Z") OR &
           (SC_C_Q >= "a" AND SC_C_Q <= "z")  THEN
		WHILE (	MID$(SC_I_B$,SC_P_P,1) >= "A" AND &
			MID$(SC_I_B$,SC_P_P,1) <= "Z" 	)	OR  &
		      	MID$(SC_I_B$,SC_P_P,1)  = "-"		OR  &
		      ( MID$(SC_I_B$,SC_P_P,1) >= "0" AND &
			MID$(SC_I_B$,SC_P_P,1) <= "9"	)	OR  &
		      ( MID$(SC_I_B$,SC_P_P,1) >= "a" AND &
			MID$(SC_I_B$,SC_P_P,1) <= "z"	)
	              		SC_P_P = SC_P_P + 1
		NEXT
		SC_SZTOKEN = SC_P_P - SC_P_Q
		NEXTSCANN = IDNTOK
		SC_VALTOKEN = MID$(SC_I_B$,SC_P_Q,SC_SZTOKEN)
	ELSE
	IF SC_C_Q >= "0" AND SC_C_Q <= "9" THEN    
		WHILE	MID$(SC_I_B$,SC_P_P,1) >= "0" AND &
			MID$(SC_I_B$,SC_P_P,1) <= "9"
				SC_P_P = SC_P_P + 1
		NEXT
		SC_SZTOKEN	= SC_P_P - SC_P_Q
		NEXTSCANN	= NUMTOK
		SC_VALTOKEN	= MID$(SC_I_B$,SC_P_Q,SC_SZTOKEN)
		SC_NUMTOKEN	= VAL(SC_VALTOKEN)
	ELSE
		NEXTSCANN	= CHRTOK
		SC_VALTOKEN	= MID$(SC_I_B$,SC_P_P,1)
		SC_P_P		= SC_P_P + 1
		SC_SZTOKEN	= 1
	END IF
	END IF
 SC_LABE_ASIG:  
	SC_P_Q = SC_P_P
   END DEF

 !==================================================================

   DEF INTEGER INIC_IALI
	CONTINUACION_RPT = "NO"
	C_FILE_FLG = 1
	C_FILE_DAT = 2
	C_FILE_SOR = 3
	C_FILE_RDS = 4
	C_FILE_REG = 5
	C_FILE_MOV = 6
	C_FILE_WSS = 7
	C_FILE_DEC = 8
	GRUP_INDI = ""
	FST_WSS = NO
	S_SORT = NO
	V_M(1) = "       "
	V_M(2) = "           "
	V_M(3) = "              "
	V_M(4) = "                 "
	V_M(5) = ""
	O_L  = CHR$(13) + CHR$(10)
	PAGE_LIMIT = 66
	P_P,P_Q,INDI_LINE = 1
	FOR I% = 1 TO 30 STEP 1
		CMPO_KEY(I%) = ""
	NEXT I%
	FOR I% = 1 TO 300 STEP 1
		V_SECCION(I%) = ""
		MATR_VALI(I%,1) = NO
		MATR_VALI(I%,2) = NO
	NEXT I%
	WSS_UARH = "SPACES."

	CALL LIB$GET_SYMBOL("GNS$PRY",RPT_GLS_PRY)

	CALL LIB$GET_SYMBOL("PTH",FILE_FLG)
	CALL LIB$GET_SYMBOL("GNS$SOP",RPT_GLS_FOR)
	MAP_GLS_IDEN = DATE$(0%) + " " + TIME$(0%)
	MAP_GLS_IDEN = "      *    " + EDIT$(MAP_GLS_IDEN,32)

	OPEN FILE_FLG FOR INPUT AS FILE #C_FILE_FLG ,RECORDSIZE 255,	&
		ORGANIZATION SEQUENTIAL VARIABLE    ,RECORDTYPE ANY

	GET #C_FILE_FLG
	SZ_I_B  = RECOUNT
	MOVE FROM #C_FILE_FLG , I_B$ = SZ_I_B

   END DEF

 !==========================================================================

    DEF INTEGER FILA_COLU
	TOTA_IDXS = TOTA_IDXS + 1
	TOKEN = NEXTTOKEN
	TOKEN = NEXTTOKEN
	MATR_VALI(NUMTOKEN,LINE_USED) = ZI
	LINE_IDXS(TOTA_IDXS) = NUMTOKEN
	TOKEN = NEXTTOKEN
	TOKEN = NEXTTOKEN
	COLU_IDXS(TOTA_IDXS) = NUMTOKEN
	TOKEN = NEXTTOKEN
    END DEF

 !====================== DETECTA NUMERO POR SU PICTURE ==============

   DEF INTEGER MAP_FNC_DNUM
        ES_NUME = ZI
        FOR I_NUM% = 1 TO LEN(STRTOKEN)
            C_NUM$ = MID$(STRTOKEN,I_NUM%,1)
            IF C_NUM$ <> '9' AND C_NUM$ <> '.' AND C_NUM$ <> ','&
                             AND C_NUM$ <> 'N' THEN
                ES_NUME = NO
            ELSE
            END IF
        NEXT I_NUM%
   END DEF
 !==================================================================
   DEF INTEGER PICTURE
	VARI_TIPO = ""
	DEF_GLS_DEFA = "VALUE  SPACES."
	TOKEN = NEXTTOKEN
	TOKEN = NEXTTOKEN
	IF TOKEN = NUMTOK THEN
		VARI_LARG = VALTOKEN
		VARI_ABPA = "("
		VARI_CIPA = ")"
		TOKEN = NEXTTOKEN
		IF STRTOKEN = "C" THEN
			STRTOKEN = "X"
		END IF
		VARI_TIPO = STRTOKEN
	ELSE
		VARI_LARG = ""
		VARI_ABPA = ""
		VARI_CIPA = ""
                ACCION = MAP_FNC_DNUM
		CALL GENRPTREP(STRTOKEN,"C","X")
		VARI_TIPO = STRTOKEN
		CALL GENRPTMAN(STRTOKEN,"ANX9")
		CALL GENRPTREP(STRTOKEN,"N","9")
		I% = 1
		WHILE I% <= LEN(STRTOKEN)
			IF MID$(STRTOKEN,1,1) <> MID$(STRTOKEN,I%,1) THEN
				VARI_TIPO = "X" 
				VARI_LARG = STR$(LEN(STRTOKEN))
				VARI_ABPA = "("
				VARI_CIPA = ")"
				I% = LEN(STRTOKEN)
			END IF
			I% = I% + 1
		NEXT				
	END IF
	ES_NUME = NO
	IF MID$(VARI_TIPO,1,1) = "N" OR MID$(VARI_TIPO,1,1) = "9" THEN
		DEF_GLS_DEFA = "VALUE ZEROES."
		ES_NUME = ZI
	END IF
	TOKEN = NEXTTOKEN
   END DEF

 !==================================================================

   DEF INTEGER PRIORIDAD

	PRIO_SORT = SC_NUMTOKEN
	IF PRIO_SORT > 30 THEN
		PRIO_SORT = 30
	END IF
	SCANN = NEXTSCANN
	IF SC_VALTOKEN = "D" THEN
		VARI_OAOD = "ON DESCENDING KEY "
		SCANN = NEXTSCANN
 	ELSE
	IF SC_VALTOKEN = "A" THEN
		SCANN = NEXTSCANN
	END IF
	END IF
   END DEF

 !==================================================================

   DEF INTEGER PUT_OAOD

	IF CMPO_KEY(PRIO_SORT) <> "" THEN
		CMPO_KEY(PRIO_SORT) = CMPO_KEY(PRIO_SORT) + O_L + V_M(1)
	END IF
	CMPO_KEY(PRIO_SORT) = CMPO_KEY(PRIO_SORT) + VARI_OAOD +&
				NAME_FILD + " IN SRT"
   END DEF

 !==================================================================

   DEF INTEGER PUT_CTRL

	IF CMPO_CTRL(PRIO_SORT) <> '' THEN
		CMPO_CTRL(PRIO_SORT) = CMPO_CTRL(PRIO_+SORT) + O_L + V_M(1)
	END IF
	CMPO_CTRL(PRIO_SORT) = CMPO_CTRL(PRIO_SORT) + NAME_FILD + " IN SRT"

   END DEF

 !==================================================================

   DEF INTEGER TEXT
	TOKEN = NEXTTOKEN
	TOKEN = NEXTTOKEN
	MATR_VALI(NUMTOKEN,LINE_USED) = ZI
	INDI_LINE = NUMTOKEN
	TOKEN = NEXTTOKEN
	TOKEN = NEXTTOKEN
	INDI_COLU = NUMTOKEN
	INDI_CORR = 10
	TOKEN = NEXTTOKEN
	TOKEN = NEXTTOKEN
	INDI_SZTX = SZTOKEN
	CONT_STRI = STRTOKEN
	TOKEN = NEXTTOKEN
	BUFOUT = "03 COLUMN " + STR$(INDI_COLU)
	IF VALTOKEN = "&" THEN
		TOKEN = NEXTTOKEN
		CONT_STRI = CONT_STRI + STRTOKEN 
		INDI_SZTX = INDI_SZTX + SZTOKEN
		TOKEN = NEXTTOKEN
	END IF
 INI_CIC_TEXT:
	IF VALTOKEN = "BLINK" THEN
		GO TO TEX_LAB_FIN
	ELSE
	IF VALTOKEN = ";" THEN
		GO TO FIN_CIC_TEXT
	ELSE
		TOKEN = NEXTTOKEN
		GO TO INI_CIC_TEXT
	END IF
	END IF
 FIN_CIC_TEXT:
	BUFOUT = ESCR_DAT(C_FILE_DAT,3,BUFOUT)
	CALL GENRPTALL(CONT_STRI)
 LOOP_TEXT:
	IF LEN(CONT_STRI) > 40 THEN
		RSTO_STRI = "'" + MID$(CONT_STRI,41,LEN(CONT_STRI) - 39)
		CONT_STRI = MID$(CONT_STRI,1,40)
		RSTO_SZTX = INDI_SZTX - 39
		INDI_SZTX = 39
		SIZE_STRI = STR$(INDI_SZTX)
		BUFOUT = "PIC X(" + SIZE_STRI + ") "
		BUFOUT = ESCR_DAT(C_FILE_DAT,4,BUFOUT)
		BUFOUT = "VALUE " + CONT_STRI + "'."
		BUFOUT = ESCR_DAT(C_FILE_DAT,4,BUFOUT)
		IF RSTO_SZTX > 0 THEN
			INDI_SZTX = RSTO_SZTX
			CONT_STRI = RSTO_STRI
			INDI_COLU = INDI_COLU + 39
			COLU_STRI = STR$(INDI_COLU)
			BUFOUT = "03 COLUMN " + COLU_STRI
			BUFOUT = ESCR_DAT(C_FILE_DAT,3,BUFOUT)
			GO TO LOOP_TEXT
		END IF
	ELSE		
		SIZE_STRI = STR$(INDI_SZTX)
		BUFOUT = "PIC X(" + SIZE_STRI + ") "
		BUFOUT = ESCR_DAT(C_FILE_DAT,4,BUFOUT)
		BUFOUT = "VALUE " + CONT_STRI + "."
		BUFOUT = ESCR_DAT(C_FILE_DAT,4,BUFOUT)
	END IF
 TEX_LAB_FIN:
   END DEF

 !==================================================================

   DEF INTEGER ESCR_DECL
	INCLU_1 = NAME_DECL
	CALL GENRPTREP(INCLU_1,"-","_")
	INCLU_2 = "*% INCLUDE " + INCLU_1 + " OF ^gen^"
	INCLU_1 = "*% INCLUDE " + INCLU_1 + " OF ^txt^"
	BUFOUT = ESCR_GEN(C_FILE_DEC,1,"DEC-" + NAME_DECL + " SECTION.")
	BUFOUT = ESCR_GEN(C_FILE_DEC,2,"USE BEFORE REPORTING " + NAME_DECL+ ".")
	BUFOUT = ESCR_GEN(C_FILE_DEC,1,"INI-" + NAME_DECL + ".")
	PRINT #C_FILE_DEC,INCLU_1
	IF SW_INCLU_2 = ZI THEN
		PRINT #C_FILE_DEC,INCLU_2
	END IF
	BUFOUT = ESCR_GEN(C_FILE_DEC,1,"FIN-" + NAME_DECL + ".")
	BUFOUT = ESCR_GEN(C_FILE_DEC,2,       "EXIT.")
	SW_INCLU_2 = NO
   END DEF


 !==================================================================
   DEF INTEGER ANAL_CCHH
	ES_NP = NO
	SWIT_SECC = "CH" + NAME_FILD
	SCANN = NEXTSCANN
	IF SCANN <> NUMTOK THEN
		GO TO FIN_CCHH
	END IF
	INDI_COLU = 0
	INDI_LINE = SC_NUMTOKEN
	SCANN = NEXTSCANN
	SCANN = NEXTSCANN
	LAST_LINE = SC_NUMTOKEN
	SCANN = NEXTSCANN
	IF SC_VALTOKEN = "NP" THEN
		ES_NP = ZI
		TOTA_RNP = TOTA_RNP + 1
		V_RNP(TOTA_RNP,1) = INDI_LINE
		V_RNP(TOTA_RNP,2) = LAST_LINE
		SCANN = NEXTSCANN
	END IF
	FOR I% = INDI_LINE TO LAST_LINE STEP 1
		V_SECCION(I%) = SWIT_SECC
	NEXT I%
	CONT_LINE = 0
	I% = LAST_LINE
	WHILE I% > INDI_LINE AND I% > 0
		IF MATR_VALI(I%,LINE_USED) = NO THEN
			MATR_VALI(I%,LINE_USED) = 2
			CONT_LINE = CONT_LINE + 1
		ELSE
			I% = INDI_LINE
		END IF
		I% = I% - 1
	NEXT
 !!!
 !!! Escribe la declarativa para el campo CONTROL HEADING
 !!!
	NAME_DECL = "CH-" + INTERNO + "-" + NAME_FILD
	SW_INCLU_2 = ZI
	ACCION = ESCR_DECL
	I_M% = 1
	BUFOUT = "01  " + NAME_DECL + " TYPE IS CONTROL HEADING"
	BUFOUT = ESCR_DAT(C_FILE_DAT,1,BUFOUT)
	BUFOUT = "       " + NAME_FILD
	IF ESTA_SORT = ZI THEN
		BUFOUT =  BUFOUT + " IN SRT"
		I_M% = 2
	END IF
	IF ES_NP = ZI THEN
		IF RPT_GLS_FOR = "DOS" OR&
		   RPT_GLS_FOR = "VSE" THEN
			BUFOUT = BUFOUT + " LINE NEXT PAGE"
		ELSE
			BUFOUT = BUFOUT + " LINE " + STR$(INDI_LINE) +&
			" ON NEXT PAGE"
		END IF
	END IF
 !!!  	IF CONT_LINE > 0 AND ES_NP = NO THEN
 !!!		BUFOUT = ESCR_DAT(C_FILE_DAT,I_M%,BUFOUT)
 !!!		I_M% = 2
 !!!		BUFOUT = "   NEXT GROUP PLUS " + STR$(CONT_LINE)
 !!!		CONT_LINE = 0
 !!!	END IF
	INDI_CORR = INDI_CORR - 1
	BUFOUT = ESCR_DAT(C_FILE_DAT,I_M%,BUFOUT + ".")
 FIN_CCHH:
   END DEF
 !==================================================================
   DEF INTEGER ANAL_CCFF
	ES_NP = NO
	SWIT_SECC = "CF" + NAME_FILD
	SCANN = NEXTSCANN
	IF SCANN <> NUMTOK THEN
		GO TO FIN_CCFF
	END IF
	INDI_COLU = 0
	INDI_LINE = SC_NUMTOKEN
	SCANN = NEXTSCANN
	SCANN = NEXTSCANN
	LAST_LINE = SC_NUMTOKEN
	SCANN = NEXTSCANN
	IF SC_VALTOKEN = "NP" THEN
		ES_NP = ZI
	END IF
	FOR I% = INDI_LINE TO LAST_LINE STEP 1
		V_SECCION(I%) = SWIT_SECC
	NEXT I%
	CONT_LINE = 0
	I% = LAST_LINE
	WHILE I% > INDI_LINE AND I% > 0
		IF MATR_VALI(I%,LINE_USED) = NO THEN
			MATR_VALI(I%,LINE_USED) = 2
			CONT_LINE = CONT_LINE + 1
		ELSE
			I% = INDI_LINE
		END IF
		I% = I% - 1
	NEXT
 !!!
 !!! Escribe la declarativa para el campo CONTROL FOOTING
 !!!
	NAME_DECL = "CF-" + INTERNO + "-" + NAME_FILD
	SW_INCLU_2 = ZI
	ACCION = ESCR_DECL
	BUFOUT = "01  " + NAME_DECL + " TYPE IS CONTROL FOOTING"
	BUFOUT = ESCR_DAT(C_FILE_DAT,1,BUFOUT)
	I_M% = 2
	BUFOUT = "       " + NAME_FILD
	IF ESTA_SORT = ZI THEN
		BUFOUT = BUFOUT + " IN SRT"
	END IF
	IF ES_NP = ZI THEN
		BUFOUT = ESCR_DAT(C_FILE_DAT,I_M%,BUFOUT)
		I_M% = 2
		BUFOUT = "   NEXT GROUP NEXT PAGE"
	ELSE
		IF CONT_LINE > 0 THEN
			BUFOUT = ESCR_DAT(C_FILE_DAT,I_M%,BUFOUT)
			I_M% = 2
			BUFOUT = "   NEXT GROUP PLUS " + STR$(CONT_LINE)
			CONT_LINE = 0
		END IF
	END IF
	BUFOUT = ESCR_DAT(C_FILE_DAT,I_M%,BUFOUT + ".")
  FIN_CCFF:
   END DEF

 !==================================================================

   DEF INTEGER MAP_FNC_UND
   MAP_GLS_CMP = STRTOKEN
   CALL GENRPTREP(MAP_GLS_CMP,"_","-")
   AUX_REG$ = ""
 UND_LAB_BCI:
   UND_TOT_UND = 0
   FOR I% = 1 TO LEN(MAP_GLS_CMP)
      IF MID$(MAP_GLS_CMP,I%,1) = "$" THEN
         UND_TOT_UND = UND_TOT_UND + 1
         MAP_VEC_UNDE(UND_TOT_UND) = I%
      END IF
   NEXT I%
   IF UND_TOT_UND > 0 THEN
	AUX_REG$ = LEFT$(MAP_GLS_CMP,MAP_VEC_UNDE(1) - 1)
	MAP_GLS_CMP = RIGHT$(MAP_GLS_CMP,MAP_VEC_UNDE(2) + 1 )
   END IF
   NAME_FILD_REGI = MAP_GLS_CMP

 UND_LAB_CIC:
   UND_TOT_UND = 0
   FOR I% = 1 TO LEN(MAP_GLS_CMP)
      IF MID$(MAP_GLS_CMP,I%,1) = "-" THEN
         UND_TOT_UND = UND_TOT_UND + 1
         MAP_VEC_UNDE(UND_TOT_UND) = I%
      END IF
   NEXT I%

   IF AUX_REG$ = "" THEN
	AUX_REG$ = LEFT$(MAP_GLS_CMP,MAP_VEC_UNDE(1) - 1)
   END IF

   MAP_GLS_NOMB = RIGHT$(MAP_GLS_CMP,MAP_VEC_UNDE(1) + 1)
   NAME_FILD = AUX_REG$ + "-" + MAP_GLS_NOMB

   END DEF
 !==================================================================
   DEF INTEGER ANAL_NAME
	TOKEN = NEXTTOKEN
	TOKEN = NEXTTOKEN


	ACCION = MAP_FNC_UND
	IF NAME_FILD = "PAGE-COUNTER" THEN
		CMPO_PCOU = ZI
	END IF
	IF MID$(NAME_FILD,1,3) = "SRT" THEN
		CMPO_SRT = ZI
	ELSE
		CMPO_SRT = NO
	END IF
	IF MID$(NAME_FILD,1,3) = "SUM" THEN
		CMPO_SUMA = ZI				
		ESTA_SORT = NO
	ELSE
		CMPO_SUMA = NO
		ESTA_SORT = ZI
	END IF
	IF MID$(NAME_FILD,1,2) = "WS" THEN
		CMPO_WKSS = ZI
	ELSE
		CMPO_WKSS = NO
	END IF
	ACCION = FILA_COLU
	TOKEN = NEXTTOKEN
   END DEF

 !==================================================================

   DEF INTEGER CALC_PF
	IF (VALO_FOUT + PF_BLAN + PF_USED > PAGE_LIMI) THEN
		PF_REST = PF_BLAN - (VALO_FOUT  + PF_BLAN + PF_USED - PAGE_LIMI)
		IF PF_REST <= 0 THEN
			PF_LINE = VALO_FOUT + 1
		ELSE
			PF_LINE = VALO_FOUT + 1 + PF_REST
		END IF
	ELSE
		PF_LINE = VALO_FOUT + 1 + PF_BLAN
	END IF
	BUFOUT = "02 LINE " + STR$(PF_LINE)
	SW_PF = ZI
   END DEF

 !==================================================================

   DEF INTEGER ANAL_HELP
	IF SC_VALTOKEN = "NS" THEN
		ESTA_SORT = NO
		SCANN = NEXTSCANN
	ELSE
	IF SC_VALTOKEN = "GI" THEN
		GRUP_INDI = "GROUP INDICATE"
		SCANN = NEXTSCANN
	ELSE
	IF SC_VALTOKEN = "NC" THEN
		CMPO_NC = ZI
		SCANN = NEXTSCANN
	ELSE
	IF SCANN = NUMTOK THEN
		ACCION = PRIORIDAD
	ELSE
	IF SC_VALTOKEN = "CH" &
 !!!	   AND  CONTINUACION_RPT = "NO" &
                                   THEN
		ACCION = ANAL_CCHH
	ELSE
	IF SC_VALTOKEN = "CF" &
 !!!	   AND  CONTINUACION_RPT = "NO" &
                                   THEN
		ACCION = ANAL_CCFF
	ELSE
	IF SC_VALTOKEN = "SUM" THEN
		ESTA_SORT = NO
		VARI_SUM = MID$(SC_I_B$,PTR_Q,LEN(SC_I_B$) - PTR_Q )
		TOKEN = NEXTTOKEN
                IF VALTOKEN = "&" THEN
		    TOKEN = NEXTTOKEN
                    VARI_SUM = VARI_SUM + STRTOKEN
		END IF
		SCANN = ETXTOK
	ELSE
		VARI_SUM = ""
		SCANN = NEXTSCANN
	END IF					
	END IF					
	END IF					
	END IF					
	END IF					
	END IF					
	END IF					
   END DEF

 !==================================================================

   DEF INTEGER PROC_SECC
	BUFOUT = "01  " + NAME_DECL + " TYPE IS "
	FOR I% = INDI_LINE TO LAST_LINE STEP 1
		V_SECCION(I%) = SWIT_SECC
	NEXT I%
	CONT_LINE = 0
	I% = LAST_LINE
	WHILE I% > INDI_LINE AND I% > 0
		IF MATR_VALI(I%,LINE_USED) = NO THEN
			MATR_VALI(I%,LINE_USED) = 2
			CONT_LINE = CONT_LINE + 1
		ELSE
			I% = INDI_LINE - 1
		END IF
		I% = I% - 1
	NEXT
	IF SWIT_SECC = "PH" THEN
		LAST_PAHE = LAST_LINE
		BUFOUT = BUFOUT + "PAGE HEADING"
	ELSE
	IF SWIT_SECC = "PF" THEN
		BUFOUT = BUFOUT + "PAGE FOOTING"
		J% = INDI_LINE
		WHILE J% <= LAST_LINE
			IF MATR_VALI(J%,LINE_USED) = NO THEN
				PF_BLAN = PF_BLAN + 1
				J% = J% + 1
			ELSE
				J% = LAST_LINE + 1
			END IF
		NEXT
		J% = INDI_LINE + PF_BLAN
		WHILE J% <= LAST_LINE
			IF MATR_VALI(J%,LINE_USED) = ZI THEN
				PF_USED = PF_USED + 1
				J% = J% + 1
			ELSE
				J% = LAST_LINE + 1
			END IF
		NEXT
	ELSE
	IF SWIT_SECC = "FH" THEN
		BUFOUT = BUFOUT + "CONTROL HEADING FINAL"
	ELSE
	IF SWIT_SECC = "FF" THEN
		BUFOUT = BUFOUT + "CONTROL FOOTING FINAL"
	ELSE
		BUFOUT = "01  " + NAME_DECL + " TYPE DETAIL"
		SCANN = NEXTSCANN
		IF SC_VALTOKEN = "NP" THEN
			BUFOUT = BUFOUT + " NEXT GROUP NEXT PAGE"
			CONT_LINE = 0
		END IF
	END IF
	END IF
	END IF
	END IF

	IF SWIT_SECC <> "NL" THEN
		I_M% = 1
		IF CONT_LINE > 0 THEN
			BUFOUT = ESCR_DAT(C_FILE_DAT,I_M%,BUFOUT)
			I_M% = 2
			BUFOUT = "   NEXT GROUP PLUS " + STR$(CONT_LINE)
			CONT_LINE = 0
		END IF
		BUFOUT = ESCR_DAT(C_FILE_DAT,I_M%,BUFOUT + ".")
	ELSE
		CONT_LINE = 0
	END IF

 !!! se escriben 
 !!! su tipo y sus declarativas
 
	IF RPT_GLS_FOR = "VMS" THEN
	 	IF SWIT_SECC <> "PH" THEN
			ACCION = ESCR_DECL
		END IF
	ELSE
		IF SWIT_SECC <> "DL" AND SWIT_SECC <> "NL" THEN
			ACCION = ESCR_DECL
		END IF
 	END IF

   END DEF
 !==================================================================
   DEF INTEGER SECCION
 !!!
 !!! Detecta una de las siguientes  SECCIONES ( PH o PF o FH o FF o DL o PL )
 !!!
	SCANN = NEXTSCANN
	IF SC_VALTOKEN = "PAGE" THEN
		SCANN = NEXTSCANN
		IF SC_VALTOKEN = "HEADING" THEN
			SWIT_SECC = "PH"
		ELSE
		IF SC_VALTOKEN = "FOOTING" THEN
			SWIT_SECC = "PF"
		ELSE
		IF SC_VALTOKEN = "LIMIT" THEN
			SWIT_SECC = "PL"
		ELSE
			HAY_SECC = NO
		END IF
		END IF
		END IF
	ELSE
	IF SC_VALTOKEN = "FINAL" THEN
		SCANN = NEXTSCANN
		IF SC_VALTOKEN = "HEADING" THEN
			SWIT_SECC = "FH"
		ELSE
		IF SC_VALTOKEN = "FOOTING" THEN
			SWIT_SECC = "FF"
		ELSE
			HAY_SECC = NO
		END IF
		END IF
	ELSE
	IF SC_VALTOKEN = "DETAIL" THEN
		SCANN = NEXTSCANN
		IF SC_VALTOKEN = "LINES" THEN
			SWIT_SECC = "DL"
		ELSE
			HAY_SECC = NO
		END IF
	ELSE
	IF SC_VALTOKEN = "NULL" THEN
		SWIT_SECC = "NL"
	ELSE
		HAY_SECC =  NO
	END IF
	END IF
	END IF
	END IF
   END DEF

 !==================================================================

   DEF INTEGER NAMED_DATA
	WHILE VALTOKEN <> "NAME"
		TOKEN = NEXTTOKEN
	NEXT
	TOKEN = NEXTTOKEN
	TOKEN = NEXTTOKEN
	HAY_SECC = ZI
	IF TOKEN = STRTOK THEN
		SC_I_B$ = STRTOKEN + "'"
		SC_P_Q = 1
		ACCION = SECCION
	END IF
	IF HAY_SECC = NO THEN
		GO TO FIN_DATA
	END IF
	TOKEN = NEXTTOKEN
	TOKEN = NEXTTOKEN
	TOKEN = NEXTTOKEN
	SC_I_B$  = STRTOKEN + "'"
	SC_P_Q = 1
	SCANN = NEXTSCANN
	IF SWIT_SECC = "PL" THEN
		IF SCANN = NUMTOK THEN
			PAGE_LIMIT = SC_NUMTOKEN
		END IF
		GO TO FIN_DATA
	ELSE
	IF SWIT_SECC = "DL" THEN
 !!!		IF SCANN = NUMTOK THEN
 !!!			FIRS_DETA = SC_NUMTOKEN
 !!!		END IF
        ELSE
	IF SWIT_SECC = "PH" THEN
 		IF SCANN = NUMTOK THEN
 			FIRS_HEAD = SC_NUMTOKEN
			INDI_LINE = SC_NUMTOKEN
			SCANN = NEXTSCANN
			SCANN = NEXTSCANN
	 		IF SCANN = NUMTOK THEN
	 			FIRS_DETA = SC_NUMTOKEN + 1
				LAST_LINE = SC_NUMTOKEN
			END IF
 		END IF
	END IF
	END IF
	END IF
	IF SCANN = IDNTOK THEN
		NAME_DECL = SC_VALTOKEN
		SCANN = NEXTSCANN
	ELSE
		NAME_DECL = SWIT_SECC + "-" + INTERNO
	END IF
	IF SWIT_SECC <> "PH" THEN
		IF SCANN = NUMTOK THEN
			INDI_LINE = SC_NUMTOKEN
		ELSE
			HAY_SECC  = NO
		END IF
	END IF
	INDI_COLU = 0
	SCANN = NEXTSCANN

	SCANN = NEXTSCANN
	IF SWIT_SECC = "PH" THEN
		ACCION = PROC_SECC
	ELSE
		IF HAY_SECC = ZI AND SCANN = NUMTOK THEN
			LAST_LINE = SC_NUMTOKEN
			ACCION = PROC_SECC
		END IF
	END IF
 FIN_DATA:
   END DEF

 !==================================================================

 ! ------------------------------------------------------------------
 !               MODULO PRINCIPAL
 ! __________________________________________________________________

	ON ERROR GO TO  LABE_BADD
	ACCION = INIC_IALI
	WHILE VALTOKEN <> "FORM"
		TOKEN = NEXTTOKEN
	NEXT
	TOKEN = NEXTTOKEN
	TOKEN = NEXTTOKEN
	TOKEN = NEXTTOKEN
	EXTERNO = STRTOKEN
	INTERNO = EXTERNO
	WHILE VALTOKEN <> ";" AND VALTOKEN <> "HELP_FORM"
		TOKEN = NEXTTOKEN              
	NEXT
	TOKEN = NEXTTOKEN
	TOKEN = NEXTTOKEN
        IF LEFT$(STRTOKEN,5) = "CONT_" THEN
		INTERNO = RIGHT$(STRTOKEN,6)
		CONTINUACION_RPT = "SI"
	END IF

	WHILE VALTOKEN <> ";" AND VALTOKEN <> "PRE_HELP_ACTION_ROUTINE"
		TOKEN = NEXTTOKEN
	NEXT

	IF VALTOKEN = "PRE_HELP_ACTION_ROUTINE" THEN
		TOKEN = NEXTTOKEN
		TOKEN = NEXTTOKEN
		WSS_UARH  = "'" + STRTOKEN + "'."
	END IF

	FILE_DAT = RPT_GLS_PRY + "RT" + EXTERNO + ".SRT"
	OPEN FILE_DAT FOR OUTPUT AS FILE #C_FILE_DAT, RECORDTYPE ANY,	&
	     ORGANIZATION    SEQUENTIAL	    VARIABLE, RECORDSIZE 255
	BUFOUT = MAP_GLS_IDEN
	BUFOUT = ESCR_DAT(C_FILE_DAT,5,BUFOUT)

	FILE_SOR = RPT_GLS_PRY + "RS" + EXTERNO + ".SOP"
	OPEN FILE_SOR FOR OUTPUT AS FILE #C_FILE_SOR, RECORDTYPE ANY,	&
	     ORGANIZATION    SEQUENTIAL	    VARIABLE, RECORDSIZE 255
	PRINT #C_FILE_SOR,MAP_GLS_IDEN

	FILE_RDS = RPT_GLS_PRY + "RF" + EXTERNO + ".SOP"
	FILE_DEC = RPT_GLS_PRY + "RD" + EXTERNO + ".SOP"

 !!! 	IF CONTINUACION_RPT = "NO" THEN
		OPEN FILE_RDS FOR OUTPUT AS FILE #C_FILE_RDS, RECORDTYPE ANY,&
		ORGANIZATION    SEQUENTIAL	    VARIABLE, RECORDSIZE 255
		PRINT #C_FILE_RDS,MAP_GLS_IDEN

 !!!		OPEN FILE_DEC FOR OUTPUT AS FILE #C_FILE_DEC, RECORDTYPE ANY,&
 !!!		ORGANIZATION    SEQUENTIAL	    VARIABLE, RECORDSIZE 255

 !!! 	END IF
 		OPEN FILE_DEC FOR OUTPUT AS FILE #C_FILE_DEC, RECORDTYPE ANY,&
 		ORGANIZATION    SEQUENTIAL	    VARIABLE, RECORDSIZE 255

	FILE_REG = RPT_GLS_PRY + "RR" + EXTERNO + ".SOP"
	OPEN FILE_REG FOR OUTPUT AS FILE #C_FILE_REG, RECORDTYPE ANY,	&
	     ORGANIZATION    SEQUENTIAL	    VARIABLE, RECORDSIZE 255
	PRINT #C_FILE_REG,MAP_GLS_IDEN

	FILE_MOV = RPT_GLS_PRY + "RM" + EXTERNO + ".SOP"
	OPEN FILE_MOV FOR OUTPUT AS FILE #C_FILE_MOV, RECORDTYPE ANY,	&
	     ORGANIZATION    SEQUENTIAL	    VARIABLE, RECORDSIZE 255
	PRINT #C_FILE_MOV,MAP_GLS_IDEN

	FILE_WSS = RPT_GLS_PRY + "RW" + EXTERNO + ".SOP"
	OPEN FILE_WSS FOR OUTPUT AS FILE #C_FILE_WSS, RECORDTYPE ANY,	&
	     ORGANIZATION    SEQUENTIAL	    VARIABLE, RECORDSIZE 255
	PRINT #C_FILE_WSS,MAP_GLS_IDEN

	WHILE TOKEN <> ETXTOK	 
		IF VALTOKEN <> "TEXT" AND &
			VALTOKEN <> "FIELD" AND &
			VALTOKEN <> "NAMED_DATA" THEN
			TOKEN = NEXTTOKEN
		END IF

 LABE_TEXT:
	IF VALTOKEN = "TEXT" THEN
		ACCION = TEXT
	END IF

 LABE_FILD:
	IF VALTOKEN = "FIELD" THEN
		CMPO_PCOU = NO
		DEF_IND_RIGT = NO
		TOKEN = NEXTTOKEN
		IF VALTOKEN <> "NAME" THEN
			TOKEN = NEXTTOKEN
			GO TO LABE_NOFI
		END IF
		VARI_SUM = ""
		GRUP_INDI = ""
		VARI_OAOD = "ON ASCENDING KEY "
		CMPO_NC = NO
		PRIO_SORT = 0
		ACCION = ANAL_NAME
		IF VALTOKEN = "PICTURE" THEN
			ACCION = PICTURE
		END IF
 LABE_INDX:
		IF VALTOKEN <> "INDEX" THEN
			GOTO LABE_HELP
		ELSE
			TOKEN = NEXTTOKEN
			IF VALTOKEN <> "=" THEN
				GO TO LABE_HELP
			END IF
 LABE_NWIX:
			INDI_CORR = 10
			INDI_ACCC = FILA_COLU
			TOKEN = NEXTTOKEN
			IF VALTOKEN = ":" THEN
				GOTO LABE_NWIX
			END IF
		END IF
 LABE_HELP:
		IF VALTOKEN = "HELP" THEN
			TOKEN = NEXTTOKEN
			TOKEN = NEXTTOKEN
			VARI_HELP = STRTOKEN
			SC_P_Q = 1
			SC_I_B$  = STRTOKEN + "'"
			SCANN = NEXTSCANN

			WHILE SCANN <> ETXTOK
				ACCION = ANAL_HELP
				IF PRIO_SORT <> 0 AND ESTA_SORT = ZI THEN
					ES_KEY = ZI
				ELSE
					ES_KEY = NO
				END IF
			NEXT
			IF VARI_SUM = "" THEN
	 			TOKEN = NEXTTOKEN
			END IF
		END IF
		IF ESTA_SORT = ZI AND CMPO_SRT = NO THEN
			TOTA_MOVE = TOTA_MOVE + 1
			MOVE_SORT(TOTA_MOVE) = NAME_FILD
			MOVE_REGI(TOTA_MOVE) = NAME_FILD_REGI
			MAP_VEC_REGI(TOTA_MOVE) = AUX_REG$
		END IF
		IF ES_KEY = ZI THEN
			ACCION = PUT_OAOD
		END IF
		IF PRIO_SORT <> 0 THEN
			ACCION = PUT_CTRL
		END IF
		IF VALTOKEN = "DEFAULT" THEN
			TOKEN = NEXTTOKEN
			TOKEN = NEXTTOKEN
 			IF MID$(VARI_TIPO,1,1) = "X" OR &
 			   MID$(VARI_TIPO,1,1) = "A" THEN
 				DEFAULT$ = "VALUE '" + STRTOKEN + "'."
 			ELSE
 				DEFAULT$ = 'VALUE ' + STRTOKEN + '.'
 			END IF
		END IF
		ZERO_SUPP = NO
		FIXED_DECIMAL = NO
		WHILE VALTOKEN <> ";"
			IF VALTOKEN = "SUPPRESS" THEN
				ZERO_SUPP = ZI
			ELSE
			IF VALTOKEN = "FIXED_DECIMAL" THEN
		 		FIXED_DECIMAL = ZI
			ELSE
			IF VALTOKEN = "AUTOTAB" THEN
				DEF_GLS_DEFA = DEFAULT$
			ELSE
			IF VALTOKEN = "RIGHT_JUSTIFIED" THEN
				DEF_IND_RIGT = ZI
			END IF
			END IF
			END IF
			END IF
			TOKEN = NEXTTOKEN
		NEXT
		PICT_WSS = VARI_TIPO
		CALL GENRPTMAN(PICT_WSS,"ANX9,")
		IF ES_NUME = ZI THEN
			CALL GENRPTREP(PICT_WSS,",","V")
		ELSE
			CALL GENRPTREP(PICT_WSS,",","")
		END IF
		IF MID$(PICT_WSS,1,1) = "N" THEN
			PICT_WSS = "S" + MID$(PICT_WSS,2,LEN(PICT_WSS) - 1)
		END IF
		VARI_LIMP = VARI_TIPO 
		CALL GENRPTREP(PICT_WSS,"N","9")
		PICT_WSS = " PIC " + PICT_WSS + VARI_ABPA + VARI_LARG +&
				     VARI_CIPA
		IF DEF_IND_RIGT = ZI AND ES_NUME = NO THEN
			PICT_WSS = PICT_WSS + O_L + V_M(3) +&
			"JUSTIFIED RIGHT"
		END IF
		IF DEF_IND_RIGT = ZI AND ES_NUME = NO THEN
			VARI_TIPO = VARI_TIPO + O_L + V_M(3) +&
			"JUSTIFIED RIGHT"
		END IF
		CALL GENRPTMAN(VARI_LIMP,"ANX9,.B")
 !!! CARACTERES DE INSERCION COBOL
		CALL GENRPTREP(VARI_LIMP,"N","9")
		IF ZERO_SUPP = ZI THEN
			ZERO_SUPP = NO
			IF MID$(VARI_LIMP,1,1) = "9" THEN
				FOR J% = 1 TO VAL(VARI_LARG) - 1
					VARI_LIMP = VARI_LIMP + "9"
				NEXT J%
				VARI_LARG = ""
				VARI_ABPA = ""
				VARI_CIPA = ""
			END IF
			Y% = INSTR(1%,VARI_LIMP,",")
			IF Y% = 0 THEN
				Y% = LEN(VARI_LIMP) - 1
			ELSE
				Y% = Y% - 2
			END IF
			VARI_POST = MID$(VARI_LIMP, Y% + 1 ,LEN(VARI_LIMP) - Y%)
			VARI_LIMP = MID$(VARI_LIMP , 1 , Y%)
			IF FIXED_DECIMAL = NO THEN
				VARI_LIMP = VARI_LIMP + VARI_POST
				VARI_POST = ""
			END IF
			IF MID$(VARI_TIPO,1,1) = "N" THEN
				CALL GENRPTREP(VARI_LIMP,"9","-")
			ELSE
				CALL GENRPTREP(VARI_LIMP,"9","Z")
			END IF
			VARI_LIMP = VARI_LIMP + VARI_POST
		END IF
		RESP_PICT = "PIC " + VARI_LIMP + VARI_ABPA + &
				VARI_LARG + VARI_CIPA
		IF CMPO_WKSS = ZI THEN
		   IF FST_WSS = NO THEN
                        IF CONTINUACION_RPT = "NO" THEN
   			     PRINT #C_FILE_WSS, V_M(1) + '01  WSS-' +&
                                   INTERNO + '.'
                        END IF
			FST_WSS = ZI
		   END IF
		   PRINT #C_FILE_WSS,V_M(2) + "03 " + NAME_FILD + PICT_WSS
		   PRINT #C_FILE_WSS,V_M(2) + "   " + DEF_GLS_DEFA
		END IF
		IF CMPO_SUMA = ZI THEN
			RESP_SOUR = VARI_SUM
		ELSE
			IF ESTA_SORT = ZI THEN
				RESP_SOUR = "SOURCE " + NAME_FILD + " IN SRT."
				IF S_SORT = NO THEN
					BUFOUT = "01  SRT."
		                        IF CONTINUACION_RPT = "NO" THEN
						BUFOUT =&
						ESCR_GEN(C_FILE_REG,1,BUFOUT)
					END IF
					S_SORT = ZI
				END IF
				BUFOUT = "03 " + NAME_FILD + PICT_WSS + "."
				BUFOUT = ESCR_GEN(C_FILE_REG,2,BUFOUT)
			ELSE
				IF CMPO_WKSS = NO THEN
					IF CMPO_PCOU = ZI THEN
						RESP_SOUR = "SOURCE " +&
							    NAME_FILD +&
							    " IN RPT-" +&
							    INTERNO + "."
					ELSE
 !!!JSS-INI 9-OCT-1993				RESP_SOUR = "SOURCE " +&
 !!!						NAME_FILD + "."
						IF AUX_REG$ = "RPT" THEN
						    RESP_SOUR = "SOURCE " +&
						    NAME_FILD + "."
						ELSE
						    RESP_SOUR = "SOURCE " +&
						    NAME_FILD + " IN " +&
						    AUX_REG$ + "."
						END IF
 !!!JSS-FIN 9-OCT-1993
					END IF
				ELSE
					RESP_SOUR = "SOURCE " + NAME_FILD +&
						    " IN WSS-" + INTERNO + "."
				END IF
			END IF
		END IF

		FOR I% = 1 TO TOTA_IDXS
			INDI_CORR = 1
			INDI_LINE = LINE_IDXS(I%)
			INDI_COLU = COLU_IDXS(I%)
			IF CMPO_NC = ZI AND &
			   RPT_GLS_FOR <> "MCP" THEN
				COLU_STRI = ""
			ELSE
				COLU_STRI = " COLUMN " + STR$(INDI_COLU)
			END IF
			INDI_CORR = 700
			IF CMPO_SUMA = NO THEN
				BUFOUT = "03" +  COLU_STRI
			ELSE
				BUFOUT = "03 " + NAME_FILD + COLU_STRI
			END IF
			BUFOUT = ESCR_DAT(C_FILE_DAT,3,BUFOUT)

			BUFOUT = ESCR_DAT(C_FILE_DAT,4,RESP_PICT)
			IF GRUP_INDI <> "" THEN
				GRUP_INDI = ESCR_DAT(C_FILE_DAT,4,GRUP_INDI)
			END IF
			BUFOUT = ESCR_DAT(C_FILE_DAT,4,RESP_SOUR)
		NEXT I%
		TOTA_IDXS = 0
	END IF
 LABE_DATA:
 !!!
 !!! NAMED_DATA INDEX=n NAME='PH o PF o FH o FF o DL'
 !!!     DATA='{rango asociado a la SECCION}'
 !!!
	IF VALTOKEN = "NAMED_DATA" THEN
		ACCION = NAMED_DATA
	END IF

 LABE_NOFI:
	NEXT

	FOR J% = 1 TO TOTA_RNP
		PUT_NP = NO
		FOR I% = V_RNP(J%,1) TO V_RNP(J%,2) STEP 1
			IF MATR_VALI(I%,LINE_USED) = ZI AND PUT_NP = NO THEN
				MATR_VALI(I%,NEXT_PAGE) = ZI
				PUT_NP = ZI
			END IF
		NEXT I%
	NEXT J%

	INDI_CORR = 800
	INDI_COLU = 0
	FOR I% = 1 TO 23
	    INDI_LINE = I%
 	    IF V_SECCION(I%) <> "" THEN
		IF MATR_VALI(I%,LINE_USED) <> 2 THEN
			CONT_LINE = CONT_LINE + 1
		END IF

		IF MATR_VALI(I%,LINE_USED) = ZI THEN
		    IF MATR_VALI(I%,NEXT_PAGE) <> NO THEN
			IF RPT_GLS_FOR = "DOS" OR&
			   RPT_GLS_FOR = "VSE" THEN
                            IF LEFT$(V_SECCION(I%),2) <> "CH" THEN
                                     BUFOUT = "02 LINE " +&
				     STR$(CONT_LINE + LAST_PAHE) +&
				     " NEXT PAGE"
                            END IF
			END IF
		    ELSE
			    IF V_SECCION(I%) = "PF" AND SW_PF <> ZI THEN
				ACCION = CALC_PF
			    ELSE
		            IF V_SECCION(I%) = "PF" THEN
				 BUFOUT = "02 LINE " + STR$(CONT_LINE +&
							PF_LINE)
				 PF_LINE = PF_LINE + CONT_LINE
			     ELSE
				 BUFOUT = "02 LINE PLUS " +&
						 STR$(CONT_LINE)
				END IF
			    END IF
		    END IF
		    IF BUFOUT <> "" THEN
			BUFOUT = ESCR_DAT(C_FILE_DAT,2,BUFOUT + ".")
		    END IF
		    CONT_LINE = 0
		END IF
 	    END IF
 !!!		INDI_CORR = 200
	NEXT I%

 !!!
 !!! Escribe la RD
 !!!

 	IF CONTINUACION_RPT = "NO" THEN
	    BUFOUT = ESCR_GEN(C_FILE_RDS,1,"RD  RPT-" + INTERNO)
	    BUFOUT = ESCR_GEN(C_FILE_RDS,2,"PAGE LIMIT IS " + STR$(PAGE_LIMIT) +&
				       " LINE")
	    BUFOUT = ESCR_GEN(C_FILE_RDS,2,"HEADING " + STR$(FIRS_HEAD))
	    BUFOUT = ESCR_GEN(C_FILE_RDS,2,"FIRST DETAIL " + STR$(FIRS_DETA))
	    BUFOUT = ESCR_GEN(C_FILE_RDS,2,"FOOTING " + STR$(PAGE_LIMIT - 6))
	    BUFOUT = ESCR_GEN(C_FILE_RDS,2,"CONTROLS ARE FINAL ")
 	END IF
 !!!
 !!! Escribe el SORT priorizado de acuerdo a los subindices del vector
 !!!

	FOR I% = 1 TO 30
		IF CMPO_KEY(I%) <> '' THEN
			BUFOUT = ESCR_GEN(C_FILE_SOR,3,CMPO_KEY(I%))
		END IF
		IF CMPO_CTRL(I%) <> '' THEN
 !!!      			IF CONTINUACION_RPT = "NO" THEN
				BUFOUT = ESCR_GEN(C_FILE_RDS,3,CMPO_CTRL(I%))
 !!!			END IF
		END IF
	NEXT I%

 !!!
 !!! Escribe los MOVES al archivo de SORT desde WSS o REG
 !!!

	FOR I% = 1 TO TOTA_MOVE
		BUFOUT = "MOVE " + MOVE_REGI(I%) + " IN "
		IF MID$(MOVE_SORT(I%),1,2) = "WS" THEN
			BUFOUT = BUFOUT + "WSS-" + INTERNO
		ELSE
			BUFOUT = BUFOUT + MAP_VEC_REGI(I%)
		END IF
		BUFOUT = BUFOUT + " TO "  + MOVE_SORT(I%) + " IN SRT" + "."
		BUFOUT = ESCR_GEN(C_FILE_MOV,2,BUFOUT)
	NEXT I%

 !!!	PRINT #C_FILE_WSS,V_M(2) + '03 WSS-UARH PIC X(32) VALUE ' + WSS_UARH
	CALL LIB$DO_COMMAND("$ EDTRPT " + EXTERNO)

	GO TO LABE_ATRA
	
 LABE_BADD:
	IF ERR = 2 THEN
		PRINT FILE_FLG,FILE_DAT,FILE_SOR, " : NOMBRE DE ARCHIVO ILEGAL"
	ELSE 
	IF ERR = 5 THEN
		PRINT FILE_FLG,FILE_DAT,FILE_SOR, " ARCHIVO INEXISTENTE       "
	ELSE
		PRINT "CODIGO : ",ERR
		PRINT "MENSAJE :",ERT$(ERR)
	END IF
	END IF
	RESUME 999
999
 LABE_ATRA:
 END
1100	SUB GENRPTALL (STRING ESTR_INGS BY DESC)
 !
	DECLARE		INTEGER		LARG_STRG
	DECLARE		STRING		VARI_MIDD
	DECLARE		STRING		VARI_COMP
	
	COMP_REOK = 1
	LARG_STRG = LEN(ESTR_INGS) 
	VARI_COMP = MID$(ESTR_INGS,1,1)
	FOR I% = 1 TO LARG_STRG
		IF MID$(ESTR_INGS,I%,1) <> VARI_COMP THEN
			COMP_REOK = 0
			I% = LARG_STRG + 1
		END IF
	NEXT I%
	IF COMP_REOK = 1 THEN
		ESTR_INGS = "ALL '" + VARI_COMP + "'"
	ELSE
		ESTR_INGS = "'" + ESTR_INGS + "'"
	END IF
	END SUB
