% IF GEN_VAX
050
% END
% IF GEN_VAX
%     COMENT = " !!!"
%     TER_WHI = "NEXT"
%     PAREN = ""
%     TIPO = "INTEGER"
%     END_DEF = "END DEF"
%     GO_TO = "GO TO"
%     CTE0_PORC =  "0%"
%     CTE32_PORC = "32%"
% ELSE
%     COMENT = " '"
%     TER_WHI = "WEND"
%     PAREN = "()"
%     TIPO = "AS INTEGER"
%     END_DEF = "END FUNCTION"
%     GO_TO = "GOTO"
%     CTE0_PORC =  "0"
%     CTE32_PORC = "32"
% END

% IF GEN_VAX
100
% END

{COMENT} PARA AUMENTAR CONCEPTOS BUSCAR :
{COMENT} "==>> DT2_TOT_EST"

% DEFCOM = FALSE
% CONST = ""

{COMENT}
{COMENT} MATRIZ QUE GUARDA TOTALES
{COMENT} DE CAMPOS POR CADA RQA_MATR_EST
{COMENT} ==>> 
% NOMVAR = "REG_MATR_TOC(50)"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
{COMENT}
{COMENT} MATRIZ QUE GUARDA TOTALES
{COMENT} DE CONCEPTOS GUARDADOS EN RQA_MATR_EST
{COMENT} ==>> DT2_TOT_EST
% NOMVAR = "RQA_MATR_TOC(50,12)"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
{COMENT} INDICE PARA BUSCAR UNA RQA ESPECIFICA
% NOMVAR = "RQA_MATR_IDN_IDX "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
{COMENT} PUNTERO QUE INDICA POSICION DE RQA DESPUES DE BUSCAR CON RQA_MATR_IDN_IDX 
% NOMVAR = "RQA_PTR_RQA "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "JJ"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "SGTE_POS"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "RQ_NUM_COMAN"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "RQ_NUM_COL"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "RQ_NUM_KEY"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "RQ_NUM_ERR"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "RQ_NUM_RES1"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "RQ_NUM_DBID"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "RQ_NUM_RECID"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "RQ_NUM_RES2"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "RQ_NUM_FILL"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "RQ_NUM_SEC"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "RQ_NUM_ELM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "DT2_PTR_REG_REG"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "DT2_PTR_REG_FLD"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "IDX_ADD_OCC"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "IDX_ADD_RQA"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "RQA_IDX_RQA"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "RQA_IDX_EST"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "RQA_IDX_OCC"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "DT2_IDX_BUS_CMND_DTC"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "RQA_PRT_01"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "RQA_PRT_02"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "RQA_PRT_03"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "IDX_BUSQ_01"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "IDX_BUSQ_02"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "LARGO"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "SICLO"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "BLANCOS "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "BBI"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "NUMTOKEN"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "NUM_FLD"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "VAR_SORT"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "SC_NUMTOKEN"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "SZTOKEN"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "SC_SZTOKEN"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "TOKEN"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "SC_TOKEN"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "P_P"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "P_CALL"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "SC_P_P"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "P_Q"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "SC_P_Q"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "P_R"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "SZ_I_B"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "LL"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "BB"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "FIL_HST"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "COL_HST"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "FIL_CAM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "COL_CAM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "FIL_NCF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "FIL_LRG"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "FIL_IDX"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "TPG_TOT_LEI"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "TPG_POS_REQ"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "UBI_SRV_TP"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "NUM_TRN"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "FIO_STAT"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "FIO_ACCI"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "FIO_RLEN"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "C_FILE_MTX"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "C_FILE_FMT"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "C_FILE_DC1"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "C_FILE_PGO"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "C_FILE_DCG"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "C_FILE_WS1"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "C_FILE_WS3"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "C_FILE_PI1"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "C_FILE_WS2"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "C_FILE_DFI"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "C_FILE_DFO"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "C_FILE_VBC"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "INICIA_IDX_PT"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "INICIA_IDX_TX"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "INICIA_IDX_TP"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "INICIA_IDX_XT"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "RE"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "ACCION"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "FST_WSS"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "TPG_HDR_SND_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "AUX"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "CAMP"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "LINEA"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "QQ"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "PP_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "ANT1_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "ANT2_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "CAMP_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "COL_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "CONT_SRV_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "CON_NIV_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "CON_NIV1_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "CON_NIV2_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "CON_NIVV_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "CON_NIV_ANT_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "MM_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "COR_HST_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "COR_PGM_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "DD_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "ENC_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "FIRST_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "FUNC_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "GEN_I_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "GEN_J_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "GG_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "HH_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "HST_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "I_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "IDX_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "IDX_ERR_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "II_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "INDEX_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "J_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "JJ_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "K_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "LARGO_STR_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "LL_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "LRG_PT_TX_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "LRG_XT_TP_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "LZ_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "L_REG_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "L_RELL_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "MOV_OKS_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "MULT_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "MULT1_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "MULT2_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "MUL_NIV_DOS_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "MUL_NIV_TRE_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "MUL_NIV_UNO_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "NIV_ESC_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "NIV_MOV_PT_MOV_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "NIV_MOV_TP_MOV_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "NIV_MOV_TX_MOV_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "NIV_MOV_XT_MOV_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "NN_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "NNN_IDX_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "NN_IDX_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "N_IDX_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "O_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "OCCUR1_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "OCCUR2_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "OCC_SRV_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "POS_1ER_FLD_IDX_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "POS_IDX_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "POS_ULT_FLD_IDX_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "REPT1_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "SEGR_CPL_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "SEGR_NUM_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "SEGS_CPL_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "SEGS_NUM_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "SEP_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "SEP_ANT_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "SRV_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "SRV_TX_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "SS_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "TOT_OCURRENCIAS_CAMPOS_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "TOT_PGM_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "TPG_HDR_DAT_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "TPG_TOT_SIST_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "TT_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "TY_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "UU_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "VAR_IDX1_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "VAR_IDX2_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "VV_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "V_L_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "AA_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "ZZ_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "LRG_ESTR_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "SRV_ACT_CPT_NUM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "AUX_POS"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'

% IF GEN_VAX
% TIPO = "INTEGER"
% ELSE
% TIPO = ""
% END

{COMENT}
{COMENT} MATRIZ QUE GUARDA EL TOTAL DE CAMPOS
{COMENT} POR CADA REGISTRO O RQA
% NOMVAR = "RQA_MATR_TDCXREG(50)"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'


{COMENT} TOTAL DE STATUS DTC ALMACENADOS EN VECTOR DTC_VEC_STAT_NUM
% NOMVAR = "DTC_TOT_STAT"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
{COMENT} TOTAL DE COMANDOS DTC Y DB2
% NOMVAR = "DT2_TOT_CMND"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "RQA_TOT_ELEM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'

{COMENT} TOTAL DE RQA ULTIMO ELEMENTO DE VECTOR RQA_MATR_IDN(nn)        
% NOMVAR = "RQA_TOT_RQAS"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'

% NOMVAR = "NIV_MRG(9)"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "TPG_VEC_NUM_TRN(100)"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'

% IF GEN_VAX
% CONST  = "CONSTANT"
% TIPO = "INTEGER"
% ELSE
% CONST  = "CONST"
% TIPO = ""
% END

{COMENT} INDICE FIJO PARA APUNTAR A NOMBRE CAMPO DTC O PROGRAMA
% NOMVAR = "         DT2_CTE_FLD_DTC          = 1"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
{COMENT} INDICE FIJO PARA APUNTAR A NOMBRE CAMPO REGISTRO(BEE)
% NOMVAR = "         DT2_CTE_FLD_FIO          = 2"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         RQ_COL_GLS               = 1"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
{COMENT} CONSTANTES PARA ALMACENAR COMANDOS,
{COMENT} DB_ID, STATUS ,,,,QUE
{COMENT} USA CADA UNA DE LAS RQA
{COMENT} TOTAL DE ELEMENTOS DENTRO DE LA (EST)RUCTURA RQA
{COMENT} ==>> DT2_TOT_EST
% NOMVAR = "         DT2_TOT_EST              = 12"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         RQA_CMND              =  1"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         RQA_TABL              =  2"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         RQA_IKEY              =  3"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         RQA_FKEY              =  4"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         RQA_STAT              =  5"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         RQA_RSV1              =  6"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         RQA_DBID              =  7"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         RQA_SIST              =  8"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         RQA_RCID              =  9"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         RQA_RSV2              = 10"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         RQA_ELIS              = 11"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         RQA_BUFF              = 12"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         ELM_COL_GLOSA            = 1"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         ELM_FIL_NAME             = 1"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         ELM_FIL_CODE             = 2"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         ELM_FIL_FILL             = 3"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         FIO_STAT_OKS            = 0"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         NO_INICIA_IDX_PT        = 0"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         SI_INICIA_IDX_PT        = 1"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         NO_INICIA_IDX_TP        = 0"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         SI_INICIA_IDX_TP        = 1"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         NO_INICIA_IDX_XT        = 0"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         SI_INICIA_IDX_XT        = 1"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         NO_INICIA_IDX_TX        = 0"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         SI_INICIA_IDX_TX        = 1"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         INITOK = 1"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         IDNTOK = 2"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         NUMTOK = 3"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         STRTOK = 4"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         CHRTOK = 5"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         EOLTOK = 6"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         ETXTOK = 7"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         HTAB   = 9"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         TPGTOK = 10"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         CTE_IDX_TCF = 1"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         CTE_IDX_TSF = 2"        
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         CTE_IDX_NOM = 1"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         CTE_IDX_SIS = 2"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         CTE_IDX_SIM = 3"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         MG_0  = 1"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         MG_7  = 2"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         MG_8  = 3"         
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         MG_12 = 4"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         MG_16 = 5"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         MG_20 = 6"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         MG_24 = 7"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         MG_28 = 8"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         NIV_00 = MG_0"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         NIV_01 = MG_8"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         NIV_03 = MG_12"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         NIV_05 = MG_16"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         NIV_07 = MG_20"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         NIV_09 = MG_24"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         NIV_11 = MG_28"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         ZI          = 1"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         NO          = 0"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         NEXT_PAGE = 2"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         VALO_FOUT = 60"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "         LINE_USED = 1"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% CONST  = ""

% IF GEN_VAX
% TIPO = "STRING"
% ELSE
% TIPO = "AS STRING"
% END

{COMENT} ==>> IDENTIFICA SISTEMA PARA BUSQUEDA DE REGISTROS 
% NOMVAR = "ID_SIST"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'


{COMENT} ==>> indica si es priemra lectura para no escribir
{COMENT} ==>> linea en blanco en archivo de salida
% NOMVAR = "PRIMERA_LECTURA"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'

{COMENT} ==>> IDENTIFICACION DE TABLA
% NOMVAR = "ID_TABL"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'

{COMENT} ==>> IDENTIFICACION LLAVE DTC
% NOMVAR = "I_KEY"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'

{COMENT} ==>> IDENTIFICACION LLAVE FIO
% NOMVAR = "F_KEY"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'

{COMENT} VECTOR DE DOCUMENTACION DE TITULOS PARA OCURRENCIAS
{COMENT} ==>> DT2_TOT_EST
% NOMVAR = "DC1_VEC_DOC(12)"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'

{COMENT} VECTOR DE VALORES DE STATUS DE RETORNO
% NOMVAR = "DTC_VEC_STAT_NUM(50)"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'

{COMENT} VECTOR DE VARIABLES DE STATUS DE RETORNO
% NOMVAR = "DTC_VEC_STAT_ALF(50)"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'

{COMENT} VECTOR CON ID BASE DTC ( 115, 118 ...)
% NOMVAR = "DT2_ID_BASE_DTC(100)"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'

{COMENT} VECTOR CON ID SISTEMAS SEGUN BASE DTC ( COL = 115, SGC = 118 ...)
% NOMVAR = "DT2_ID_BASE_SIS(100)"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'

{COMENT} 
% NOMVAR = "DT2_ELEM_LIST(100)"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'

{COMENT}
{COMENT} VECTOR QUE GUARDA LAS RQA QUE USA EL PROGRAMA
% NOMVAR = "RQA_MATR_IDN(50)"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'

{COMENT}
{COMENT} MATRIZ QUE GUARDA IDENTIFICADORES DE ESTRUCTURA
{COMENT} DE LAS RQA QUE USA EL PROGRAMA
{COMENT} HASTA 50 RQA 
{COMENT} HASTA  10 CONCEPTOS DB_ID, TABLA, COMANDO
{COMENT} ==>> DT2_TOT_EST
% NOMVAR = "RQA_MATR_EST(50,12)"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'

{COMENT}
{COMENT} MATRIZ QUE GUARDA OCURRENCIAS
{COMENT} DE CONCEPTOS GUARDADOS EN RQA_MATR_EST
{COMENT} ==>> ASUME QUE EXISTEN A LO MAS 50 RQAS Y REGISTROS POR PROGRAMA
% NOMVAR = "RQA_MATR_OCC(50,12,15)"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'


{COMENT}
{COMENT} MATRIZ QUE GUARDA LAS EQUIVALENCIAS
{COMENT} ENTRE NOMBRE DE CAMPOS EN PROGRAMA
{COMENT} Y NOMBRE DE CAMPOS EN REGISTROS
{COMENT} ==>> DT2_TOT_RQAS 50 RQAS, 80 CAMPOS POR CADA RQA
% NOMVAR = "REG_MATR_OCC(50,60,2)"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'

{COMENT}
% NOMVAR = "MAT_ELEM_LIS(100,5,15)"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'

{COMENT} VECTOR CON COMANDOS FIO
% NOMVAR = "DT2_CMND_FIO(100)"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'

{COMENT} VECTOR CON COMANDOS DTC
% NOMVAR = "DT2_CMND_DTC(100)"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'

{COMENT} 
{COMENT} "INDICADOR PARA PONER SOLO UN CMT EN"
{COMENT} "INSTRUCCIONES CON MAS DE 1 LINEA"
% NOMVAR = "PONER_CMT_CONTEXTO"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'

{COMENT} 
{COMENT} "GUARDA IDENTIFICACION DE LEMENT LIST"
% NOMVAR = "ELEM_STR"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'

{COMENT} 
{COMENT} TOTAL DE COURRENCIAS STRING
% NOMVAR = "TOT_OCC_STR"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'



{COMENT} INDICA SI ESTA WSS PARA AGRGAR REGISTROS Y VARIABLES
% NOMVAR = "MODO_WORKING_STORAGE_SECTION"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'

{COMENT} INDICA SI ESTA EN MODE CMND-DTC TO DMND-FIO
% NOMVAR = "MODO_MOVE_CMND"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'

{COMENT} INDICA SI GRABA WSS DESPUES DE LINEA WSS Y COMENTARIOS SGTES
% NOMVAR = "MODO_ESCRIBA_WSS"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'

{COMENT} INDICA SI ESTA PROCESANDO STATUS
% NOMVAR = "MODO_IF_STATUS"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'

{COMENT} INDICA SI ESTA EN MODO ENTRY PARA REEMPLAZAR INSTRUCCION
% NOMVAR = "MODO_ENTRY_DBMSCBL"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'

{COMENT} INDICA SI ESTA DENTRO DE "CALL DBNTRY USING"
% NOMVAR = "MODO_CALL_DBNTRY"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
{COMENT} INDICA SI ESTA DENTRO DE PROCEDURE DIVISION
% NOMVAR = "MODO_PROCEDURE_DIVISION"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
{COMENT} INDICA SI HACE MOVE PARA BASE DE DATOS
% NOMVAR = "MODO_MOVE_DBID"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
{COMENT} INDICA SI HACE MOVE PARA TABLA
% NOMVAR = "MODO_MOVE_TABLA"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
{COMENT} 1INDICA PASO DE EJECUCION DON O GEN
% NOMVAR = "PASO_EJEC"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
{COMENT} VALOR PENULTIMO TOKEN
% NOMVAR = "VALTOKEN_1"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
{COMENT} VALOR ANTE-PENULTIMO TOKEN
% NOMVAR = "VALTOKEN_2"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
{COMENT} 
% NOMVAR = "VALTOKEN_3"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
{COMENT} 
% NOMVAR = "VALTOKEN_4"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
{COMENT} 
% NOMVAR = "VALTOKEN_AUX"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
{COMENT} 
% NOMVAR = "PRT_DC1_RQA"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
{COMENT} 
% NOMVAR = "PRT_DC1_ELM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
{COMENT} 
% NOMVAR = "PRT_DC1_OCC"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
{COMENT} 
% NOMVAR = "PRT_DC1_OCC_AUX"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
{COMENT} 
% NOMVAR = "HAY_REQA"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
{COMENT} 
% NOMVAR = "MOVE_01"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
{COMENT} 
% NOMVAR = "MOVE_02"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
{COMENT} 
% NOMVAR = "MOVE_03"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
{COMENT} 
% NOMVAR = "ELM_EST_ENC"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
{COMENT} 
% NOMVAR = "ELM_OCC_ENC "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
{COMENT} 
% NOMVAR = "RQA_STR_ADD_OCC"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
{COMENT} VARIABLE AUXILIAR QUE INDICA SI EN VECTOR YA ESTA RQA
% NOMVAR = "LIST_A_BUS"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "REQ_A_BUS"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "DT2_HAY_RQA"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "ESTA_EN_OCC"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "DT2_HAY_ELEM"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "LIN_LEI"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "LIN_ESCR"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "NUM_BLAN"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "ANAL_BLCO"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "RESTO"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " WSS_USN"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " BIP"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " GNS_PATH"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " TPGMATTPFMT          "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " TPGMATNAMEFLDSRV"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " O_B_IZQ"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " O_B_DER"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " O_B_STR"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " O_B_CAPSULA"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " I_B_STR"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " WRT_O_B_STR"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
{COMENT} INDICA SI ESCRIBE LINEA ORIGINAL COMO COMENTARIO
% NOMVAR = " WRT_LIN_ORIG_COMO_COMENT"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " LINEA_COMENTARIADA"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " PRI_IF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " SEG_IF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " FIO_BUF0"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " C_X"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " C_Q"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " SC_C_Q"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " VALTOKEN"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " SC_VALTOKEN"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " STRTOKEN"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " ULT_SEC"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " ANTERIOR"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " ANTE"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " GLS_ERR"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " WSS_DLP"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " WSS_DPP"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " WSS_DFI"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " WSS_GENDFO"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " WSS_DSP00"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " WSS_DSP01"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " WSS_DSP04"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " FILE_FMT"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " FILE_MTX"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " FILE_DC1"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " FILE_PGO"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " FILE_DCG"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " FILE_WS1"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " FILE_WS3"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " FILE_PI1"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " FILE_WS2"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " FILE_DFI"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " FILE_DFO"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " FILE_VBC"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " FILE_RN"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " O_L"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " IDEN_CLI "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " EXTERNO"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " VARI_ABPA"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " VARI_CIPA"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " BUFOUT"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " RPT_GLS_PRY"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " MAP_GLS_CMP"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " RPT_GLS_SRT"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " RPT_GLS_FOR"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " MAP_GLS_IDEN"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " RPT_GLS_PAI"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " RPT_GLS_CLI"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " VARI"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " TPGMATTPFRM_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " SWICH_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "SWITCH_GEN_PGO"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " AA_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " ABPAPT_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " ABPATP_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " ABPATX_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " ABPAXT_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " ANO_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " ANTB_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " ANTE_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " ARCH_IDEN_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " ARCH_SPA_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " AUX_FNC_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " AUX_CMN_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " AUX_CNF_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " AUX_CPP_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " AUX_PGM_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " AUX_SPP_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " AUX_SUB_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " BB_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " BUF_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " CAM_VAL_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " CIPAPT_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " CIPATP_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " CIPATX_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " CIPAXT_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " CL_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " COD_CTAB_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " COD_TABL_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " COMAPT_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " COMATP_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " COMATX_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " COMAXT_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " CON_NIV_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " CORR_FLD_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " DER_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " DIA_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " DPS_IDX_TX_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " DSP_IDX_TX_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " DSP_IDX_XT_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " DT_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " ENC_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " ENC_PGM_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " ESCR_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " ES_FTB_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " ES_VAL_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " EX_CTAB_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " EX_TABL_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " FINP_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " FIRST_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " FLD_VBC_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " FOUT_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " FRS_LRG_XT_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " FUNC_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " GLS_1_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " HORA_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " HRS_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " IDX_PT_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " IDX_TP_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " IDX_TX_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " IDX_XT_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " IZQ_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " LL_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " LR_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " LRG_PT_TX_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " LRG_XT_TP_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " MAP_GLS_VBC_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " MES_CPT_ALF"
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " MNT_CPT_ALF"                 
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " MNU_COD_CMND_CPT_ALF        "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " MNU_COD_FRET_CPT_ALF        "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " MNU_COD_IMEN_CPT_ALF        "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " MNU_COD_INST_CPT_ALF        "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " MNU_COD_NEMO_CPT_ALF        "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " MNU_COD_OPCI_CPT_ALF        "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " MNU_COD_TCTL_CPT_ALF        "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " MNU_COD_TFUN_CPT_ALF        "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " MNU_COD_TINF_CPT_ALF        "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " MNU_GLS_FMEN_CPT_ALF        "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " MNU_GLS_FPRO_CPT_ALF        "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " MNU_GLS_LFRM_CPT_ALF        "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " MNU_GLS_NFRM_CPT_ALF        "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " MNU_GLS_PROG_CPT_ALF        "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " MNU_GLS_TRAN_CPT_ALF        "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " MNU_NUM_COLU_CPT_ALF        "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " MNU_NUM_FILA_CPT_ALF        "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " NEX_CPT_ALF                 "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " NOMB_ARCH_CPT_ALF           "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " NUEVE_CPT_ALF               "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " OCCUR1_CPT_ALF              "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " OCCUR2_CPT_ALF              "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " OLD_IDX_CPT_ALF             "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " PUT_HDR_CPT_ALF             "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " PUT_PTHDR_CPT_ALF           "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " REGMNU_CPT_ALF              "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " REGMNU_1_CPT_ALF            "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " REGMNU_2_CPT_ALF            "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " REG_1_CPT_ALF               "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " REG_2_CPT_ALF               "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " REG_TAB_CPT_ALF             "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " RELL_CPT_ALF                "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " REPT_CPT_ALF                "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " RPF_COD_STPP_CPT_ALF        "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " RPF_COD_CCPP_CPT_ALF        "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " RPF_COD_CMND_CPT_ALF        "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " RPF_COD_CONF_CPT_ALF        "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " RPF_COD_CORR_CPT_ALF        "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " RPF_COD_DARC_CPT_ALF        "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " RPF_COD_DATA_CPT_ALF        "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " RPF_COD_DPRO_CPT_ALF        "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " RPF_COD_TREG_CPT_ALF        "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " RPF_COD_UARC_CPT_ALF        "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " RPF_GLS_DAT1_CPT_ALF        "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " RPF_GLS_DAT2_CPT_ALF        "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " RR_CPT_ALF                  "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " SEC_PT_HDR_CPT_ALF          "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " SEGR_CPT_ALF                "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " SEGR_CPL_CPT_ALF            "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " SEGS_CPT_ALF                "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " SEGS_CPL_CPT_ALF            "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " SGTE_CPT_ALF                "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " SIETE_CPT_ALF               "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " SIS_PAN_CPT_ALF             "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " SIS_PAN_ANT_CPT_ALF         "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " TAB_GLS_DESC_CPT_ALF        "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " TIME_STP_CPT_ALF            "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " TPG_GLS_FRM_CPT_ALF         "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " TPG_GLS_FRQ_CPT_ALF         "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " TPG_GLS_SIM_CPT_ALF         "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " TPG_GLS_SIS_CPT_ALF         "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " VAR_AUX_CPT_ALF             "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " VSN_CPT_ALF                 "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " VV_CPT_ALF                  "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " WRI_CPT_ALF                 "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " XX_CPT_ALF                  "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " YY_CPT_ALF                  "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = " GLDIRARCH                   "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'

% IF GEN_VAX
% TIPO = "STRING"
% ELSE
% TIPO = ""
% END
% DEFCOM = FALSE
% NOMVAR = "                TPG_VEC_REQ(100)            "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "                TAB_GLS_DESC(10)           "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "                V_MES(12,2)                "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "                TPG_VEC_SIST(30)           "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "                V_M(9)                    "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "                NIV_PIC(9)          "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
% NOMVAR = "                NIV_SEP(14)            "
% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'

% INCLUDE FUNGEN OF 'GNSSRC:GENMTX.SKL'

% IF GEN_VAX
   DEF STRING GENRPTREP (STRING ESTR_INGS,STRING CRTR_ORIG,STRING CRTR_REEM)
        DECLARE STRING VAR_AUXI_CPT_ALF
% ELSE
   FUNCTION GENRPTREP (ESTR_INGS AS STRING,CRTR_ORIG AS STRING,CRTR_REEM AS STRING) AS STRING
      DIM VAR_AUXI_CPT_ALF AS STRING
% END

{COMENT}  REEMPLAZA EN ESTR_INGS EL CRTR_ORIG(CARACTER ORIGINAL)
{COMENT}  POR CRTR_REEM(CARATER(ES) DE REEMPLAZO)

{COMENT}  EJEMPLO DE LLAMADA DE ESTA SUBRUTINA:
{COMENT}      PICT_FILD = 999999,999
{COMENT}     CALL GENRPTREP(PICT_FILD,",","V")
{COMENT}  ESTA SUBRUTINA DEVUELVE EN PICT_FILD EL VALOR 999999V999

   LARGO_STR_CPT_NUM = FNC_SYSLEN(ESTR_INGS)
   VAR_AUXI_CPT_ALF = ""
   FOR I_CPT_NUM = 1 TO LARGO_STR_CPT_NUM
      IF FNC_SYSMID(ESTR_INGS,I_CPT_NUM,1) = CRTR_ORIG THEN
         VAR_AUXI_CPT_ALF = VAR_AUXI_CPT_ALF + CRTR_REEM
      ELSE
         VAR_AUXI_CPT_ALF = VAR_AUXI_CPT_ALF + FNC_SYSMID(ESTR_INGS,I_CPT_NUM,1)
      END IF
   NEXT I_CPT_NUM
   ESTR_INGS = VAR_AUXI_CPT_ALF
   GENRPTREP = VAR_AUXI_CPT_ALF
   {END_DEF}

% IF GEN_VAX
   DEF STRING GENMTXL72 (STRING P1,STRING P2,INTEGER P3)
% ELSE
   FUNCTION GENMTXL72 (P1 AS STRING,P2 AS STRING,P3) AS STRING
% END

{COMENT}  ENTREGA UNA LINEA COBOL DE LARGO 72 CARACTERES
{COMENT}  INCORPORANDO UN RELLENO ENTRE LOS DOS
{COMENT}  PARAMETROS INGRESADOS DE INPUT
{COMENT}  LA RESPUESTA LA ENTREGA EN EL PRIMER PARAMETRO
% IF GEN_VAX
        DECLARE STRING RELL2_CPT_ALF 
        DECLARE STRING V_M2(9)
        DECLARE INTEGER CONSTANT MG_0 = 1
        DECLARE INTEGER CONSTANT MG_7  = 2
        DECLARE INTEGER CONSTANT MG_8  = 3
        DECLARE INTEGER CONSTANT MG_12 = 4
        DECLARE INTEGER CONSTANT MG_16 = 5
        DECLARE INTEGER CONSTANT MG_20 = 6
        DECLARE INTEGER CONSTANT MG_24 = 7
        DECLARE INTEGER CONSTANT MG_28 = 8
% ELSE
        DIM RELL2_CPT_ALF  AS STRING
        REDIM V_M2(9) AS STRING
        CONST MG_0 = 1
        CONST MG_7 = 2
        CONST MG_8 = 3
        CONST MG_12 = 4
        CONST MG_16 = 5
        CONST MG_20 = 6
        CONST  MG_24 = 7
        CONST MG_28 = 8
% END
        V_M2(MG_0)  = ""
        V_M2(MG_7)  = "      *"
        V_M2(MG_8)  = "       "
        V_M2(MG_12) = "           "
        V_M2(MG_16) = "               "
        V_M2(MG_20) = "                   "
        V_M2(MG_24) = "                       "
        V_M2(MG_28) = "                           "
        L_REG_CPT_NUM = FNC_SYSLEN(V_M2(P3)) + FNC_SYSLEN(P1) + FNC_SYSLEN(P2)
        RELL2_CPT_ALF = ""
        IF L_REG_CPT_NUM < 72 THEN
                L_RELL2_CPT_NUM = 72 - L_REG_CPT_NUM
                FOR RELL2_CPT_NUM = 1 TO L_RELL2_CPT_NUM
                        RELL2_CPT_ALF = RELL2_CPT_ALF + " "
                NEXT RELL2_CPT_NUM
        END IF
        GENMTXL72 = P1 + RELL2_CPT_ALF + P2
   {END_DEF}

% IF GEN_VAX
   DEF STRING NUM5 (STRING P1)
% ELSE
   FUNCTION NUM5 (P1 AS STRING) AS STRING
% END
        IF FNC_SYSLEN(P1) = 1 THEN
                P1 = "0000" + P1
        ELSE
        IF FNC_SYSLEN(P1) = 2 THEN
                P1 = "000" + P1
        ELSE
        IF FNC_SYSLEN(P1) = 3 THEN
                P1 = "00" + P1
        ELSE
        IF FNC_SYSLEN(P1) = 4 THEN
                P1 = "0" + P1
        END IF
        END IF
        END IF
        END IF
        NUM5 = P1
   {END_DEF}



% IF GEN_VAX
  DEF STRING COMPACT(STRING LIN_LEIDA)
% ELSE
  FUNCTION COMPACT (LIN_LEIDA AS STRING) AS STRING
% END
         LIN_LEI = LIN_LEIDA
         LIN_ESCR = ""
         LARGO = 0
         SICLO = 0
         BLANCOS = 0
         LIN_ESCR = ""
         LARGO = FNC_SYSLEN(LIN_LEI)
         WHILE SICLO <= LARGO 
                 IF FNC_SYSLEN(LIN_LEI) > 2 THEN
                          RESTO = FNC_SYSRIGHT(LIN_LEI,2)
                 ELSE
                          RESTO = FNC_SYSRIGHT(LIN_LEI,1)
                 END IF
                ANAL_BLCO = FNC_SYSLEFT(LIN_LEI,1)
                 IF ANAL_BLCO = " " THEN
                        BLANCOS = BLANCOS + 1
                 ELSE
                        IF BLANCOS <> 0 THEN
                                IF BLANCOS > 3 THEN
                                        NUM_BLAN = FNC_SYSSTR(BLANCOS)
                                        LIN_ESCR = LIN_ESCR + "@" + NUM_BLAN + "@" + ANAL_BLCO
                                        BLANCOS = 0
                                ELSE
                                         FOR BBI = 0 TO BLANCOS
                                                LIN_ESCR = LIN_ESCR + " "
                                         NEXT BBI
                                        BLANCOS = 0
                                        LIN_ESCR = LIN_ESCR + ANAL_BLCO
                                END IF
                        ELSE
                                LIN_ESCR = LIN_ESCR + ANAL_BLCO
                        END IF
                 END IF
                 LIN_LEI = RESTO
                 SICLO = SICLO + 1
         {TER_WHI}
         COMPACT = "      * " + LIN_ESCR + LIN_LEI
   {END_DEF}

{COMENT}===========================================
{COMENT} DECLARACION DE FUNCIONES I/O             =
{COMENT}                 (INI)                  =
{COMENT}===========================================

% FINP = FALSE

% ARCH = "WS1"
% INCLUDE  'GNSSRC:FUNC_IO.SKL'

% ARCH = "WS2"
% INCLUDE  'GNSSRC:FUNC_IO.SKL'

% ARCH = "WS3"
% INCLUDE  'GNSSRC:FUNC_IO.SKL'

% ARCH = "PGO"
% INCLUDE  'GNSSRC:FUNC_IO.SKL'

% ARCH = "DC1"
% INCLUDE  'GNSSRC:FUNC_IO.SKL'

% ARCH = "PI1"
% INCLUDE  'GNSSRC:FUNC_IO.SKL'

% ARCH = "DFI"
% INCLUDE  'GNSSRC:FUNC_IO.SKL'

% ARCH = "DFO"
% INCLUDE  'GNSSRC:FUNC_IO.SKL'

% ARCH = "FMT"
% INCLUDE  'GNSSRC:FUNC_IO.SKL'

% FINP = TRUE


% ARCH = "MTX"
% LBL_RESUME = "500"
% INCLUDE  'GNSSRC:FUNC_IO.SKL'

% ARCH = "DCG"
% LBL_RESUME = "510"
% INCLUDE  'GNSSRC:FUNC_IO.SKL'

% ARCH = "DC1"
% LBL_RESUME = "520"
% INHIBE_FIO_CLO = TRUE
% INCLUDE  'GNSSRC:FUNC_IO.SKL'



% IF GEN_VAX
    DEF STRING ESCR_DC1 (INTEGER MARGEN,STRING BUFOUT)
% ELSE
    FUNCTION ESCR_DC1 (MARGEN AS INTEGER,BUFOUT AS STRING) AS STRING
% END
      REG_1_CPT_ALF = ""
      REG_2_CPT_ALF = ""
      BUFOUT = V_M(MARGEN) + BUFOUT
      IF FNC_SYSLEN(BUFOUT) > 72 THEN
         GEN_I_CPT_NUM = 1
         GEN_J_CPT_NUM = 3
         WHILE FNC_SYSMID(BUFOUT,GEN_I_CPT_NUM,4) <> " TO " AND GEN_I_CPT_NUM < FNC_SYSLEN(BUFOUT)
                      GEN_I_CPT_NUM = GEN_I_CPT_NUM + 1
         {TER_WHI}
         IF GEN_I_CPT_NUM > 72 THEN
            GEN_I_CPT_NUM = 71
                GEN_J_CPT_NUM = 0
                WHILE FNC_SYSMID(BUFOUT,GEN_I_CPT_NUM,1) <> " "
                    GEN_I_CPT_NUM = GEN_I_CPT_NUM - 1
                {TER_WHI}
          END IF
          REG_1_CPT_ALF = FNC_SYSLEFT(BUFOUT,GEN_I_CPT_NUM + GEN_J_CPT_NUM)
          REG_2_CPT_ALF = V_M(MG_16) + " " + FNC_SYSRIGHT(BUFOUT,GEN_I_CPT_NUM + 1 + GEN_J_CPT_NUM)
      ELSE
          REG_1_CPT_ALF = BUFOUT
      END IF

      REG_1_CPT_ALF = FNC_SYSEDIT(REG_1_CPT_ALF,128)
      FIO_ACCI = FIO_DC1_PUT(FIO_STAT,REG_1_CPT_ALF)
      IF REG_2_CPT_ALF > "" THEN
         REG_2_CPT_ALF = FNC_SYSEDIT(REG_2_CPT_ALF,128)
         FIO_ACCI = FIO_DC1_PUT(FIO_STAT,REG_2_CPT_ALF)
      END IF
   {END_DEF}

% IF GEN_VAX
    DEF INTEGER ESCR_PGO (INTEGER FIO_STAT,STRING BUFOUT)
% ELSE
    FUNCTION ESCR_PGO (FIO_STAT AS INTEGER,BUFOUT AS STRING) AS INTEGER
% END
      IF PRIMERA_LECTURA = "SI" THEN
           PRIMERA_LECTURA = "NO"
           GO TO FIN_ESCR_PGO
      END IF
      REG_1_CPT_ALF = ""
      REG_2_CPT_ALF = ""
      IF FNC_SYSLEN(BUFOUT) > 72 THEN
         GEN_I_CPT_NUM = 1
         GEN_J_CPT_NUM = 3
         WHILE FNC_SYSMID(BUFOUT,GEN_I_CPT_NUM,4) <> " TO " AND GEN_I_CPT_NUM < FNC_SYSLEN(BUFOUT)
               GEN_I_CPT_NUM = GEN_I_CPT_NUM + 1
         {TER_WHI}         
         IF GEN_I_CPT_NUM > 72 THEN
            GEN_I_CPT_NUM = 71
            GEN_J_CPT_NUM = 0
            WHILE FNC_SYSMID(BUFOUT,GEN_I_CPT_NUM,1) <> " "
                  GEN_I_CPT_NUM = GEN_I_CPT_NUM - 1
            {TER_WHI}
         END IF
         REG_1_CPT_ALF = FNC_SYSLEFT(BUFOUT,GEN_I_CPT_NUM + GEN_J_CPT_NUM)
         REG_2_CPT_ALF = V_M(MG_16) + " " + FNC_SYSRIGHT(BUFOUT,GEN_I_CPT_NUM + 1 + GEN_J_CPT_NUM)
      ELSE
         REG_1_CPT_ALF = BUFOUT
      END IF

      REG_1_CPT_ALF = FNC_SYSEDIT(REG_1_CPT_ALF,128)
      FIO_ACCI = FIO_PGO_PUT(FIO_STAT,REG_1_CPT_ALF)
      IF REG_2_CPT_ALF > "" THEN
         REG_2_CPT_ALF = FNC_SYSEDIT(REG_2_CPT_ALF,128)
         FIO_ACCI = FIO_PGO_PUT(FIO_STAT,REG_2_CPT_ALF)
      END IF
 FIN_ESCR_PGO:
   {END_DEF}

% IF GEN_VAX
    DEF STRING ESCR_WS1 (INTEGER MARGEN,STRING BUFOUT)
% ELSE
    FUNCTION ESCR_WS1 (MARGEN ,BUFOUT AS STRING) AS STRING
% END
      IF FNC_SYSLEN(BUFOUT) > 0 THEN
         LL_CPT_ALF = FNC_SYSLEFT(BUFOUT,1)
         IF LL_CPT_ALF = "P" THEN
            RR_CPT_ALF = FNC_SYSRIGHT(BUFOUT,7)
            BUFOUT = "      " + RR_CPT_ALF
         END IF
      END IF
      FIO_ACCI = FIO_WS1_PUT(FIO_STAT,V_M(MARGEN) + BUFOUT)
   {END_DEF}

% IF GEN_VAX
    DEF STRING ESCR_WS2 (INTEGER MARGEN,STRING BUFOUT)
% ELSE
    FUNCTION ESCR_WS2 (MARGEN,BUFOUT AS STRING) AS STRING
% END
      IF FNC_SYSLEN(BUFOUT) > 0 THEN
         LL_CPT_ALF = FNC_SYSLEFT(BUFOUT,1)
         IF LL_CPT_ALF = "P" THEN
            RR_CPT_ALF = FNC_SYSRIGHT(BUFOUT,7)
            BUFOUT = "      " + RR_CPT_ALF
         END IF
       END IF
       FIO_ACCI = FIO_WS2_PUT(FIO_STAT,V_M(MARGEN) + BUFOUT)
   {END_DEF}

% IF GEN_VAX
    DEF STRING ESCR_WS3 (INTEGER MARGEN,STRING BUFOUT)
% ELSE
    FUNCTION ESCR_WS3 (MARGEN,BUFOUT AS STRING) AS STRING
% END
       IF FNC_SYSLEN(BUFOUT) > 0 THEN
          LL_CPT_ALF = FNC_SYSLEFT(BUFOUT,1)
          IF LL_CPT_ALF = "P" THEN
             RR_CPT_ALF = FNC_SYSRIGHT(BUFOUT,7)
             BUFOUT = "      " + RR_CPT_ALF
          END IF
       END IF
       FIO_ACCI = FIO_WS3_PUT(FIO_STAT,V_M(MARGEN) + BUFOUT)
   {END_DEF}

% IF GEN_VAX
{COMENT}    DEF STRING ESCR_DFI (INTEGER MARGEN,STRING BUFOUT)
% ELSE
{COMENT}    FUNCTION ESCR_DFI (MARGEN AS INTEGER,BUFOUT AS STRING) AS STRING
% END
{COMENT}      FIO_ACCI = FIO_DFI_PUT(FIO_STAT,V_M(MARGEN) + BUFOUT)
{COMENT}     IF WRI_CPT_ALF = "NO" THEN
{COMENT}        WRI_CPT_ALF = "SI"
{COMENT}     END IF
{COMENT}    {END_DEF}

% IF GEN_VAX
{COMENT}    DEF STRING ESCR_DFO (INTEGER MARGEN,STRING BUFOUT)
% ELSE
{COMENT}    FUNCTION ESCR_DFO (MARGEN AS INTEGER,BUFOUT AS STRING) AS STRING
% END
{COMENT}      FIO_ACCI = FIO_DFO_PUT(FIO_STAT,V_M(MARGEN) + BUFOUT)
{COMENT}     IF WRI_CPT_ALF = "NO" THEN
{COMENT}        WRI_CPT_ALF = "SI"
{COMENT}     END IF
{COMENT}    {END_DEF}
% IF GEN_VAX
     DEF STRING ESCR_VBC (INTEGER MARGEN,STRING BUFOUT)
% ELSE
     FUNCTION ESCR_VBC (MARGEN AS INTEGER,BUFOUT AS STRING) AS STRING
% END
{COMENT} FIO_ACCI = FIO_VBC_PUT(FIO_STAT,V_M(MARGEN) + BUFOUT)
     IF WRI_CPT_ALF = "NO" THEN
        WRI_CPT_ALF = "SI"
     END IF
   {END_DEF}
% IF GEN_VAX OR GEN_UYS
    DEF STRING ESCR_PI1 (INTEGER MARGEN,STRING BUFOUT)
% ELSE
    FUNCTION ESCR_PI1 (MARGEN AS INTEGER,BUFOUT AS STRING) AS STRING
% END
      FIO_ACCI = FIO_PI1_PUT(FIO_STAT,V_M(MARGEN) + BUFOUT)
   {END_DEF}

% IF GEN_VAX
    DEF INTEGER FNC_BUS_CMND_FIO
% ELSE
    FUNCTION FNC_BUS_CMND_FIO () AS INTEGER
% END
                  ELM_EST_ENC = "NO"
{COMENT}                  BUFOUT = FNC_PRINT("COMANDO BUSCANDO " + VALTOKEN )
                  FOR RQA_IDX_RQA = 1 TO RQA_TOT_RQAS 
                       IF RQA_MATR_EST(RQA_IDX_RQA,RQA_CMND) = VALTOKEN THEN
                           ELM_EST_ENC = "SI"
{COMENT}                           BUFOUT = FNC_PRINT("COMANDO ENCONTRADO " + VALTOKEN )
                           IDX_ENC_01 = RQA_IDX_RQA
                           RQA_IDX_RQA = RQA_IDX_RQA + 1
                       END IF
                  NEXT RQA_IDX_RQA
                  IF ELM_EST_ENC = "SI" THEN
                           MODO_MOVE_CMND = "NO"
                           VALTOKEN_AUX = "PGM-" + RQA_MATR_OCC(IDX_ENC_01 , RQA_SIST , 1 ) + "-" + RQA_MATR_OCC(IDX_ENC_01 , RQA_TABL , 1 ) + "-CMND"
                           O_B_IZQ = FNC_SYSLEFT (O_B_STR,16)
                           O_B_DER = FNC_SYSRIGHT(O_B_STR,17)
                           O_B_DER = FNC_SYSEDIT(O_B_DER,16)
                           O_B_STR = O_B_IZQ + O_B_DER
                  END IF
   {END_DEF}


% IF GEN_VAX
    DEF INTEGER FNC_BUS_STAT
% ELSE
    FUNCTION FNC_BUS_STAT () AS INTEGER
% END
                  ELM_EST_ENC = "NO"
                  FOR RQA_IDX_RQA = 1 TO RQA_TOT_RQAS 
                       IF RQA_MATR_EST(RQA_IDX_RQA,RQA_STAT) = VALTOKEN THEN
                           ELM_EST_ENC = "SI"
{COMENT}                         BUFOUT = FNC_PRINT("STATUS ENCONTRADO " + VALTOKEN )
                           IDX_ENC_01 = RQA_IDX_RQA
                           RQA_IDX_RQA = RQA_IDX_RQA + 1
                           WRT_LIN_ORIG_COMO_COMENT = "SI"
                           MODO_IF_STATUS = "SI"
                       END IF
                  NEXT RQA_IDX_RQA
                  IF ELM_EST_ENC = "SI" THEN
                       IF MODO_PROCEDURE_DIVISION = "SI" THEN
                           VALTOKEN_AUX = "PGM-" + RQA_MATR_OCC(IDX_ENC_01 , RQA_SIST , 1 ) + "-" + RQA_MATR_OCC(IDX_ENC_01 , RQA_TABL , 1 ) + "-STAT"
                        ELSE
                           WRT_O_B_STR = "NO"
                       END IF
                  ELSE
                       MODO_IF_STATUS = "NO"
                       FOR DT2_PTR_REG_REG = 1 TO RQA_TOT_RQAS 
                       FOR DT2_PTR_REG_FLD = 1 TO  REG_MATR_TOC( DT2_PTR_REG_REG ) 
                         IF VALTOKEN = REG_MATR_OCC( DT2_PTR_REG_REG, DT2_PTR_REG_FLD, DT2_CTE_FLD_DTC ) THEN
{COMENT}                             BUFOUT = FNC_PRINT("REGISTRO ENCONTRADO PARA REEMPLAZAR " + REG_MATR_OCC( DT2_PTR_REG_REG, DT2_PTR_REG_FLD, DT2_CTE_FLD_DTC ) + "<" )
                             VALTOKEN_AUX = REG_MATR_OCC( DT2_PTR_REG_REG, DT2_PTR_REG_FLD, DT2_CTE_FLD_FIO )
                             WRT_LIN_ORIG_COMO_COMENT = "SI"
                             DT2_PTR_REG_FLD = REG_MATR_TOC( DT2_PTR_REG_REG ) + 1
                             DT2_PTR_REG_REG = RQA_TOT_RQAS + 1
                         END IF
                        NEXT DT2_PTR_REG_FLD
                        NEXT DT2_PTR_REG_REG

                  END IF
   {END_DEF}

% IF GEN_VAX
    DEF INTEGER FNC_BUS_IKEY
% ELSE
    FUNCTION FNC_BUS_IKEY () AS INTEGER
% END
                  FOR RQA_IDX_RQA = 1 TO RQA_TOT_RQAS 
{COMENT}                BUFOUT = FNC_PRINT("COMPARANDO RQA " + RQA_MATR_EST(RQA_IDX_RQA,RQA_IKEY) + " CON " + VALTOKEN )
                       IF RQA_MATR_EST(RQA_IDX_RQA,RQA_IKEY) = VALTOKEN THEN
                           ELM_EST_ENC = "SI"
{COMENT}                            BUFOUT = FNC_PRINT("IKEY ENCONTRADO " + VALTOKEN )
                           IDX_ENC_01 = RQA_IDX_RQA
                           RQA_IDX_RQA = RQA_IDX_RQA + 1
                           WRT_LIN_ORIG_COMO_COMENT = "SI"
                       END IF
                  NEXT RQA_IDX_RQA

                  IF ELM_EST_ENC = "SI" AND VALTOKEN_3 = "MOVE" THEN
                       IF MODO_PROCEDURE_DIVISION = "SI" THEN
                           VALTOKEN_AUX = "PGM-" + RQA_MATR_OCC(IDX_ENC_01 , RQA_SIST , 1 ) + "-" + RQA_MATR_OCC(IDX_ENC_01 , RQA_TABL , 1 ) + "-AKEY"
                           FOR RQA_IDX_OCC = 1 TO RQA_MATR_TOC(IDX_ENC_01 , RQA_IKEY )
{COMENT}                             BUFOUT = FNC_PRINT("COMPARANDO RQA " + RQA_MATR_OCC(IDX_ENC_01,RQA_IKEY , RQA_IDX_OCC ) + " CON " + VALTOKEN_2 )
                             IF RQA_MATR_OCC(IDX_ENC_01, RQA_IKEY , RQA_IDX_OCC ) = VALTOKEN_2 THEN
{COMENT}                                 BUFOUT = FNC_PRINT("IKEY DTC ENCONTRADO " + VALTOKEN_2 )
                                 O_B_STR = FNC_SYSLEFT(O_B_STR, PINI_TOKEN_2) + RQA_MATR_OCC(IDX_ENC_01 , RQA_FKEY , RQA_IDX_OCC) + "' TO "
                                 RQA_IDX_OCC = RQA_IDX_OCC + 1
                                 WRT_LIN_ORIG_COMO_COMENT = "SI"
                             END IF
                         NEXT RQA_IDX_OCC

                        ELSE
                           WRT_O_B_STR = "NO"
                       END IF
                  END IF
   {END_DEF}

% IF GEN_VAX
    DEF INTEGER NEXTTOKEN
% ELSE
    FUNCTION NEXTTOKEN () AS INTEGER
% END
{COMENT} RESPALDA TOKEN ANTERIOR

        VALTOKEN_4 = VALTOKEN_3
        PINI_TOKEN_4 = PINI_TOKEN_3
        SIZE_TOKEN_4 = SIZE_TOKEN_3

        VALTOKEN_3 = VALTOKEN_2
        PINI_TOKEN_3 = PINI_TOKEN_2
        SIZE_TOKEN_3 = SIZE_TOKEN_2

        VALTOKEN_2 = VALTOKEN_1
        PINI_TOKEN_2 = PINI_TOKEN_1
        SIZE_TOKEN_2 = SIZE_TOKEN_1


        IF TOKEN = STRTOK THEN
            VALTOKEN_1 = STRTOKEN
        ELSE
            VALTOKEN_1 = VALTOKEN
        END IF
        PINI_TOKEN_1 = PINI_TOKEN_0
        SIZE_TOKEN_1 = SIZE_TOKEN_0

        VALTOKEN_AUX = ""
        VALTOKEN     = ""
        IF TOKEN = ETXTOK THEN
                NEXTTOKEN = ETXTOK
                {GO_TO} LABE_ASIG
        END IF
        P_P = P_Q 
 LABE_SIGA:
        WHILE (FNC_SYSMID(I_B_STR,P_P,1) = " " OR FNC_SYSMID(I_B_STR,P_P,1) = "	" OR P_P < 7 OR P_P > 72 ) AND P_P <= SZ_I_B
                IF SWITCH_GEN_PGO = "SI" THEN
                    O_B_STR = O_B_STR + FNC_SYSMID(I_B_STR,P_P,1)
                END IF
                P_P = P_P + 1
        {TER_WHI}
        P_Q = P_P 
        IF P_P > SZ_I_B OR I_B_STR = "" OR FNC_SYSMID(I_B_STR,7,1) = "*" THEN
                IF SWITCH_GEN_PGO = "SI" THEN
                    IF WRT_LIN_ORIG_COMO_COMENT = "SI" THEN
                        WRT_LIN_ORIG_COMO_COMENT = "NO"
                        IF PONER_CMT_CONTEXTO = "SI" THEN
{COMENT}                             BUFOUT =              FNC_PRINT( "G1" + MAP_GLS_IDEN  +  " ==>> CONVERSION DTC TO DB2 " )
                            FIO_ACCI = ESCR_PGO(FIO_STAT,        MAP_GLS_IDEN  +  " ==>> CONVERSION DTC TO DB2 " )
                            IF MODO_CALL_DBNTRY = "SI" THEN
                                PONER_CMT_CONTEXTO = "NO"
                            END IF
                        END IF
                        LINEA_COMENTARIADA = FNC_SYSLEFT(LINEA_COMENTARIADA,6 ) + "*" + FNC_SYSRIGHT(LINEA_COMENTARIADA,8) 
{COMENT}                         BUFOUT =              FNC_PRINT( "G1" + LINEA_COMENTARIADA )
                        FIO_ACCI = ESCR_PGO(FIO_STAT,        LINEA_COMENTARIADA )
                    END IF
                    IF FNC_SYSMID(I_B_STR,7,1) = "*" THEN
                        O_B_STR = I_B_STR
                    END IF
                    IF MODO_CALL_DBNTRY <> "SI" AND WRT_O_B_STR = "SI" THEN
{COMENT}                         BUFOUT =             FNC_PRINT(  "G2" + O_B_STR )
                        FIO_ACCI = ESCR_PGO(FIO_STAT,        O_B_STR )
                        O_B_STR = ""
                    END IF
                    IF WRT_O_B_STR = "NO" THEN
                         WRT_O_B_STR = "SI"
                    END IF
                    IF MODO_WORKING_STORAGE_SECTION = "SI" THEN
                        MODO_WORKING_STORAGE_SECTION = "NO"
                        MODO_ESCRIBA_WSS = "SI"
                    END IF
                END IF
                TPG_TOT_LEI = TPG_TOT_LEI + 1
                I_B_STR = FIO_MTX_GETNXT{PAREN}
                SZ_I_B = FIO_RLEN
                IF FIO_STAT  <> FIO_STAT_OKS THEN
                        NEXTTOKEN = ETXTOK
                        {GO_TO} LABE_ASIG
                END IF

                IF SWITCH_GEN_PGO = "SI" THEN
                IF FNC_SYSLEFT(I_B_STR,4) = "DT2I" THEN
                    I_B_STR = FNC_SYSLEFT(I_B_STR,6) + " " + FNC_SYSRIGHT(I_B_STR,8)
                    PONER_CMT_CONTEXTO = "SI"
                ELSE
                IF FNC_SYSLEFT(I_B_STR,4) = "DT2E" THEN
                     PONER_CMT_CONTEXTO = "SI"
                     WRT_LIN_ORIG_COMO_COMENT = "SI"
                     WRT_O_B_STR = "NO" 
                END IF
                END IF
                END IF

                O_B_STR = ""
                P_P  = 1
                P_Q  = 1
                LINEA_COMENTARIADA = I_B_STR
                IF WSS_DLP = "S" THEN
                        BUFOUT = FNC_PRINT("PROC REG" + FNC_SYSSTR(TPG_TOT_LEI))
                END IF
                {GO_TO} LABE_SIGA
        END IF
        IF SWITCH_GEN_PGO = "SI" THEN
        IF MODO_ESCRIBA_WSS = "SI" THEN
               MODO_ESCRIBA_WSS = "NO"
               FIO_ACCI = ESCR_PGO(FIO_STAT, MAP_GLS_IDEN  +  " ==>> CONVERSION DTC TO DB2 - INI CAPSULAS " )
               FIO_ACCI = ESCR_PGO(FIO_STAT," ")
               FIO_ACCI = ESCR_PGO(FIO_STAT,"       COPY GNSWGRQA." )
               FIO_ACCI = ESCR_PGO(FIO_STAT,"       COPY GNSWGUIB." )
               FIO_ACCI = ESCR_PGO(FIO_STAT,"       COPY GNSWGELS." )
               FOR RQA_PRT_01 = 1 TO RQA_TOT_RQAS
                   FIO_ACCI = ESCR_PGO(FIO_STAT,"       77 PGM-" + RQA_MATR_OCC(RQA_PRT_01, RQA_SIST , 1 ) + "-" + RQA_MATR_OCC(RQA_PRT_01, RQA_TABL , 1 ) +  "-AKEY     PIC X(32)." )
               NEXT RQA_PRT_01
               FOR RQA_PRT_01 = 1 TO RQA_TOT_RQAS
                   FIO_ACCI = ESCR_PGO(FIO_STAT,"       77 PGM-" + RQA_MATR_OCC(RQA_PRT_01, RQA_SIST , 1 ) + "-" + RQA_MATR_OCC(RQA_PRT_01, RQA_TABL , 1 ) +  "-CMND     PIC 9(05)." )
               NEXT RQA_PRT_01
               FOR RQA_PRT_01 = 1 TO RQA_TOT_RQAS
                   FIO_ACCI = ESCR_PGO(FIO_STAT,"       COPY GNSWGRQA REPLACING ==ADR-REQA== BY ==ADR-" + RQA_MATR_OCC(RQA_PRT_01, RQA_TABL , 1 ) +  "-REQA==.") 
               NEXT RQA_PRT_01
               FIO_ACCI = ESCR_PGO(FIO_STAT, MAP_GLS_IDEN  +  " ==>> CONVERSION DTC TO DB2 - FIN CAPSULAS " )
        END IF
        END IF
        C_Q = FNC_SYSMID(I_B_STR,P_Q,1)
        IF (C_Q >= "A" AND C_Q <= "Z") OR (C_Q >= "A" AND C_Q <= "Z") THEN
            SWICH_CPT_ALF = "S"
            WHILE (SWICH_CPT_ALF = "S")
              C_X = FNC_SYSMID(I_B_STR,P_P,1)
              IF (C_X >= "A" AND C_X <= "Z") OR (C_X  = "-") OR (C_X >= "A" AND  C_X <= "Z") OR (C_X >= "0" AND C_X <= "9") THEN
                   P_P = P_P + 1
              ELSE
                 SWICH_CPT_ALF = "N"
              END IF
            {TER_WHI}

             SZTOKEN = P_P - P_Q
             NEXTTOKEN = IDNTOK
             VALTOKEN = FNC_SYSMID(I_B_STR,P_Q,SZTOKEN)
             IF VALTOKEN = "CALL" THEN
                  P_CALL = P_Q - 1
{COMENT}                   BUFOUT = FNC_PRINT("DETECTO CALL EN COLUMNA>> "  + FNC_SYSSTR(P_CALL))
             END IF

             IF SWITCH_GEN_PGO = "SI" THEN
                 IF VALTOKEN_1 = "WORKING-STORAGE" AND VALTOKEN = "SECTION" THEN
                        MODO_WORKING_STORAGE_SECTION = "SI"
                 ELSE
                    IF VALTOKEN <> "TO" AND MODO_MOVE_CMND = "SI" THEN
                        ACCION = FNC_BUS_CMND_FIO
                    END IF
                    ACCION = FNC_BUS_STAT
                    IF ELM_EST_ENC = "NO" THEN
                        ACCION = FNC_BUS_IKEY
                    END IF
                 END IF
             END IF

        ELSE
        IF C_Q >= "0" AND C_Q <= "9" THEN
             WHILE FNC_SYSMID(I_B_STR,P_P,1) >= "0" AND FNC_SYSMID(I_B_STR,P_P,1) <= "9"
                 P_P = P_P + 1
             {TER_WHI}
             SZTOKEN = P_P - P_Q
             NEXTTOKEN = NUMTOK
             VALTOKEN = FNC_SYSMID(I_B_STR,P_Q,SZTOKEN)
             NUMTOKEN  = VAL(VALTOKEN)
        ELSE
        IF C_Q = GET_COM2{PAREN} OR C_Q = "'" THEN
             P_P = P_P + 1
             WHILE FNC_SYSMID(I_B_STR,P_P,1) <> C_Q
                  P_P = P_P + 1
             {TER_WHI}
             SZTOKEN = P_P - (P_Q + 1)
             NEXTTOKEN = STRTOK
             STRTOKEN = FNC_SYSMID(I_B_STR,P_Q + 1,SZTOKEN)
             VALTOKEN = C_Q + STRTOKEN + C_Q
             P_P = P_P + 1
             IF SWITCH_GEN_PGO = "SI" THEN
                    IF MODO_IF_STATUS = "SI" THEN
                        MODO_IF_STATUS = "NO"
                        FOR DTC_IDX_STAT = 1 TO DTC_TOT_STAT
                             IF STRTOKEN = DTC_VEC_STAT_NUM(DTC_IDX_STAT) THEN
                                  VALTOKEN_AUX = DTC_VEC_STAT_ALF(DTC_IDX_STAT)
                                  DTC_IDX_STAT = DTC_IDX_STAT + 1
                             END IF
                        NEXT DTC_IDX_STAT 
                    END IF
                    IF VALTOKEN_1 = "ENTRY" AND STRTOKEN = "DBMSCBL" THEN
                        MODO_ENTRY_DBMSCBL = "SI"
                        WRT_LIN_ORIG_COMO_COMENT = "SI"
{COMENT}                         BUFOUT = FNC_PRINT("NEXTT DETECTO CALL DBNTRY>> " + I_B_STR )
                    ELSE
                    IF VALTOKEN_1 = "CALL" AND STRTOKEN = "DBNTRY" THEN
                        MODO_CALL_DBNTRY = "SI"
                        WRT_LIN_ORIG_COMO_COMENT = "SI"
{COMENT}                         BUFOUT = FNC_PRINT("NEXTT DETECTO CALL DBNTRY>> " + I_B_STR )
                    ELSE
                    IF VALTOKEN_1 = "MOVE" THEN
                        FOR DT2_IDX_BUS_CMND_DTC = 1 TO DT2_TOT_CMND
                           IF STRTOKEN = DT2_CMND_DTC(DT2_IDX_BUS_CMND_DTC) THEN
                               MODO_MOVE_CMND = "SI"
                               WRT_LIN_ORIG_COMO_COMENT = "SI"
                               VALTOKEN_AUX = DT2_CMND_FIO(DT2_IDX_BUS_CMND_DTC)
                               DT2_IDX_BUS_CMND_DTC = DT2_TOT_CMND + 1
                           END IF
                        NEXT DT2_IDX_BUS_CMND_DTC 
                    END IF
                    END IF
                    END IF

                END IF

        ELSE
                NEXTTOKEN = CHRTOK
                VALTOKEN = FNC_SYSMID(I_B_STR,P_P,1)
                P_P = P_P + 1
                SZTOKEN = 1
        END IF
        END IF
        END IF

 LABE_ASIG:
        IF SWITCH_GEN_PGO = "SI" THEN
           IF MODO_ENTRY_DBMSCBL = "SI" THEN
               MODO_ENTRY_DBMSCBL = "NO"
               O_B_STR = "       COPY GNSBGEIB"
           ELSE
           IF VALTOKEN_AUX > "" THEN
               O_B_STR = O_B_STR + VALTOKEN_AUX
           ELSE
               O_B_STR = O_B_STR + VALTOKEN
           END IF
           END IF
        END IF

        PINI_TOKEN_0 = P_Q
        SIZE_TOKEN_0 = SZTOKEN

        P_R = P_Q
        P_Q = P_P
% IF GEN_VAX
800
% END
   {END_DEF}

% IF GEN_VAX
    DEF INTEGER FNC_ADD_OCC_MOVE
% ELSE
    FUNCTION FNC_ADD_OCC_MOVE () AS INTEGER
% END

        ELM_EST_ENC = "NO"
        FOR RQA_IDX_RQA = 1 TO RQA_TOT_RQAS 
            FOR RQA_IDX_EST = 1 TO DT2_TOT_EST
{COMENT}                BUFOUT = FNC_PRINT("COMPARANDO " + RQA_MATR_EST(RQA_IDX_RQA,RQA_IDX_EST) + " CON " +  RQA_STR_ADD_OCC )
                IF RQA_MATR_EST(RQA_IDX_RQA,RQA_IDX_EST) = RQA_STR_ADD_OCC THEN
                        ELM_EST_ENC = "SI"
{COMENT}                        BUFOUT = FNC_PRINT("ELEMENTO ENCONTRADO " + RQA_MATR_IDN (RQA_IDX_RQA) + " EN INDICE ->  " RQA_STR_ADD_OCC )
                        IDX_ENC_01 = RQA_IDX_RQA
                        IDX_ENC_02 = RQA_IDX_EST

                        RQA_IDX_EST = 9
                        RQA_IDX_RQA = RQA_TOT_RQAS + 1
                END IF
            NEXT RQA_IDX_EST 
        NEXT RQA_IDX_RQA

        IF ELM_EST_ENC = "SI" THEN
               ELM_OCC_ENC = "NO"
               FOR RQA_IDX_OCC = 1 TO RQA_MATR_TOC(IDX_ENC_01,IDX_ENC_02)
                   IF RQA_MATR_OCC(IDX_ENC_01,IDX_ENC_02,RQA_IDX_OCC) = MOVE_01 THEN
                     ELM_OCC_ENC = "SI"
                     RQA_IDX_OCC = RQA_MATR_TOC(IDX_ENC_01,IDX_ENC_02) + 1
                   END IF
               NEXT RQA_IDX_OCC 
               IF ELM_OCC_ENC = "NO" THEN
                     RQA_MATR_TOC(IDX_ENC_01,IDX_ENC_02) = RQA_MATR_TOC(IDX_ENC_01,IDX_ENC_02) + 1
                     RQA_MATR_OCC(IDX_ENC_01,IDX_ENC_02, RQA_MATR_TOC(IDX_ENC_01,IDX_ENC_02)  ) = MOVE_01
{COMENT}                     BUFOUT = FNC_PRINT("OCURRENCIA AGREGADA " + MOVE_01 + FNC_SYSSTR(IDX_ENC_01) + FNC_SYSSTR(IDX_ENC_02) )
               END IF
        END IF

   {END_DEF}

% IF GEN_VAX
     DEF INTEGER FNC_ADD_OCC_VALUE
% ELSE
     FUNCTION FNC_ADD_OCC_VALUE () AS INTEGER
% END
            RQA_MATR_TOC(IDX_ENC_01,IDX_ENC_02) = 1
            RQA_MATR_OCC(IDX_ENC_01,IDX_ENC_02,1) = RQA_STR_ADD_OCC
{COMENT}            BUFOUT = FNC_PRINT("PUSO EN OCC VALUE> " + FNC_SYSSTR(IDX_ENC_01) + "-" + FNC_SYSSTR(IDX_ENC_02) + "-" + RQA_MATR_IDN(IDX_ENC_01) + "+" + RQA_STR_ADD_OCC + "+" )

   {END_DEF}


% IF GEN_VAX
     DEF STRING FNC_ANL_LIN_RQA_WSS
% ELSE
     FUNCTION FNC_ANL_LIN_RQA_WSS () AS STRING
% END
{COMENT} 	BUFOUT = FNC_PRINT("ENTRO A ANAL_LIN CON TOKEN " + VALTOKEN )
                WHILE VALTOKEN <> "."
                        TOKEN = NEXTTOKEN{PAREN}
{COMENT}                <<< GUARDO INFORMACION INESPERADA >>>
                {TER_WHI}
{COMENT}        BUFOUT = FNC_PRINT("EN ANAL_LIN DETECTO PUNTO " + VALTOKEN )

{COMENT}        ==>> NIVEL ( NUMERO )
                TOKEN = NEXTTOKEN{PAREN}
{COMENT}        ==>> COMANDO
                TOKEN = NEXTTOKEN{PAREN}
                RQA_MATR_EST(IDX_ENC_01,RQA_CMND) = VALTOKEN
                TOKEN = NEXTTOKEN{PAREN}
                WHILE VALTOKEN <> "."
                        TOKEN = NEXTTOKEN{PAREN}
                        IF VALTOKEN = "VALUE" OR VALTOKEN = "VALUES" THEN
                                TOKEN = NEXTTOKEN{PAREN}
                                IF TOKEN = STRTOK THEN
                                    IF VALTOKEN > " " THEN

                                        RQA_STR_ADD_OCC = STRTOKEN
                                        IDX_ENC_02 = RQA_CMND
                                        ACCION = FNC_ADD_OCC_VALUE

                                    END IF                                    
                                END IF                                    
                        END IF
                 {TER_WHI}

{COMENT}        ==>> NIVEL ( NUMERO )
                TOKEN = NEXTTOKEN{PAREN}
{COMENT}        ==>> TABLA
                TOKEN = NEXTTOKEN{PAREN}
                RQA_MATR_EST(IDX_ENC_01,RQA_TABL) = VALTOKEN
                TOKEN = NEXTTOKEN{PAREN}
                WHILE VALTOKEN <> "."
                        TOKEN = NEXTTOKEN{PAREN}
                        IF VALTOKEN = "VALUE" OR VALTOKEN = "VALUES" THEN
                                TOKEN = NEXTTOKEN{PAREN}
                                IF TOKEN = STRTOK THEN
                                    IF VALTOKEN > " " THEN

                                        RQA_STR_ADD_OCC = STRTOKEN
                                        IDX_ENC_02 = RQA_TABL
                                        ACCION = FNC_ADD_OCC_VALUE

                                    END IF                                    
                                END IF                                    
                        END IF
                 {TER_WHI}


{COMENT}        ==>> NIVEL ( NUMERO )
		TOKEN = NEXTTOKEN{PAREN}
{COMENT}        ==>> IDENTIFICACION DE LLAVE
		TOKEN = NEXTTOKEN{PAREN}
		RQA_MATR_EST(IDX_ENC_01,RQA_IKEY) = VALTOKEN
		TOKEN = NEXTTOKEN{PAREN}
                WHILE VALTOKEN <> "."
                        TOKEN = NEXTTOKEN{PAREN}
                        IF VALTOKEN = "VALUE" OR VALTOKEN = "VALUES" THEN
                                TOKEN = NEXTTOKEN{PAREN}
                                IF TOKEN = STRTOK THEN
                                    IF VALTOKEN > " " THEN

                                        RQA_STR_ADD_OCC = STRTOKEN
                                        IDX_ENC_02 = RQA_IKEY
                                        ACCION = FNC_ADD_OCC_VALUE

                                    END IF                                    
                                END IF                                    
                        END IF
                 {TER_WHI}

{COMENT}        ==>> NIVEL ( NUMERO )
		TOKEN = NEXTTOKEN{PAREN}
{COMENT}        ==>> STATUS
		TOKEN = NEXTTOKEN{PAREN}
		RQA_MATR_EST(IDX_ENC_01,RQA_STAT) = VALTOKEN
		TOKEN = NEXTTOKEN{PAREN}
                WHILE VALTOKEN <> "."
                        TOKEN = NEXTTOKEN{PAREN}
                        IF VALTOKEN = "VALUE" OR VALTOKEN = "VALUES" THEN
                                TOKEN = NEXTTOKEN{PAREN}
                                IF TOKEN = STRTOK THEN
                                    IF VALTOKEN > " " THEN

                                        RQA_STR_ADD_OCC = STRTOKEN
                                        IDX_ENC_02 = RQA_STAT
                                        ACCION = FNC_ADD_OCC_VALUE

                                    END IF                                    
                                END IF                                    
                        END IF
                 {TER_WHI}


{COMENT}        ==>> NIVEL ( NUMERO )
		TOKEN = NEXTTOKEN{PAREN}
{COMENT}        ==>> RESERVADO 1
		TOKEN = NEXTTOKEN{PAREN}
		RQA_MATR_EST(IDX_ENC_01,RQA_RSV1) = VALTOKEN
		TOKEN = NEXTTOKEN{PAREN}
                WHILE VALTOKEN <> "."
                        TOKEN = NEXTTOKEN{PAREN}
                        IF VALTOKEN = "VALUE" OR VALTOKEN = "VALUES" THEN
                                TOKEN = NEXTTOKEN{PAREN}
                                IF TOKEN = STRTOK THEN
                                    IF VALTOKEN > " " THEN

                                        RQA_STR_ADD_OCC = STRTOKEN
                                        IDX_ENC_02 = RQA_RSV1
                                        ACCION = FNC_ADD_OCC_VALUE

                                    END IF                                    
                                END IF                                    
                        END IF
                 {TER_WHI}


{COMENT}        ==>> NIVEL ( NUMERO )
		TOKEN = NEXTTOKEN{PAREN}
{COMENT}        ==>> ID BASE DE DATOS
		TOKEN = NEXTTOKEN{PAREN}
		RQA_MATR_EST(IDX_ENC_01,RQA_DBID) = VALTOKEN
		TOKEN = NEXTTOKEN{PAREN}
                WHILE VALTOKEN <> "."
                        TOKEN = NEXTTOKEN{PAREN}
                        IF VALTOKEN = "VALUE" OR VALTOKEN = "VALUES" THEN
                                TOKEN = NEXTTOKEN{PAREN}
                                IF TOKEN = CHRTOK THEN
                                        TOKEN = NEXTTOKEN{PAREN}
                                END IF

                                IF TOKEN = NUMTOK THEN
                                        RQA_STR_ADD_OCC = VALTOKEN
                                        IDX_ENC_02 = RQA_DBID
                                        ACCION = FNC_ADD_OCC_VALUE

                                END IF                                    
                        END IF
                 {TER_WHI}

{COMENT}        ==>> NIVEL ( NUMERO )
		TOKEN = NEXTTOKEN{PAREN}
{COMENT}        ==>> RCID
		TOKEN = NEXTTOKEN{PAREN}
                RQA_MATR_EST(IDX_ENC_01,RQA_RCID) = VALTOKEN
		TOKEN = NEXTTOKEN{PAREN}
                WHILE VALTOKEN <> "."
                        TOKEN = NEXTTOKEN{PAREN}
                        IF VALTOKEN = "VALUE" OR VALTOKEN = "VALUES" THEN
                                TOKEN = NEXTTOKEN{PAREN}
                                IF TOKEN = STRTOK THEN
                                    IF VALTOKEN > " " THEN

                                        RQA_STR_ADD_OCC = STRTOKEN
                                        IDX_ENC_02 = RQA_RCID
                                        ACCION = FNC_ADD_OCC_VALUE

                                    END IF                                    
                                END IF                                    
                        END IF
                 {TER_WHI}

{COMENT}        ==>> NIVEL ( NUMERO )
		TOKEN = NEXTTOKEN{PAREN}
{COMENT}        ==>> RSV2
		TOKEN = NEXTTOKEN{PAREN}
		RQA_MATR_EST(IDX_ENC_01,RQA_RSV2) = VALTOKEN
		TOKEN = NEXTTOKEN{PAREN}
                WHILE VALTOKEN <> "."
                        TOKEN = NEXTTOKEN{PAREN}
                        IF VALTOKEN = "VALUE" OR VALTOKEN = "VALUES" THEN
                                TOKEN = NEXTTOKEN{PAREN}
                                IF TOKEN = STRTOK THEN
                                    IF VALTOKEN > " " THEN

                                        RQA_STR_ADD_OCC = STRTOKEN
                                        IDX_ENC_02 = RQA_RSV2
                                        ACCION = FNC_ADD_OCC_VALUE

                                    END IF                                    
                                END IF                                    
                        END IF
                 {TER_WHI}

   {END_DEF}
% IF GEN_VAX
     DEF STRING FNC_ANAL_LIST
% ELSE
     FUNCTION FNC_ANAL_LIST () AS STRING
% END

{COMENT}		BUFOUT = FNC_PRINT("EN ANAL_LIST")
 !!!                WHILE TOKEN <> NUMTOKEN
                WHILE VALTOKEN <> "."
                        TOKEN = NEXTTOKEN
 !!!                <<< GUARDO INFORMACION INESPERADA >>>
                NEXT

                      TOKEN = NEXTTOKEN
{COMENT}                      BUFOUT = FNC_PRINT("TOKEN NUMERO " + VALTOKEN)
                      TOKEN = NEXTTOKEN
{COMENT}                      BUFOUT = FNC_PRINT("ELM-NAME  GLOSA " + VALTOKEN)
                      MAT_ELEM_LIS(IDX_BUSQ_01,ELM_FIL_NAME,ELM_COL_GLOSA) = VALTOKEN
{COMENT}	        BUFOUT = FNC_PRINT("guardo bien la glosa   ======>>>>>>>>>  " + MAT_ELEM_LIS(IDX_BUSQ_01,ELM_GLOSA,RQ_COL_GLS))
		i% = IDX_BUSQ_01
{COMENT}	        BUFOUT = FNC_PRINT("ELM-NAME  en i% " + FNC_SYSSTR(I%))
		j% = ELM_GLOSA
{COMENT}	        BUFOUT = FNC_PRINT("ELM-NAME  en j% " + FNC_SYSSTR(j%))
		k% = rq_col_gls
{COMENT}	        BUFOUT = FNC_PRINT("ELM-NAME  en k% " + FNC_SYSSTR(k%))
{COMENT}	        BUFOUT = FNC_PRINT("   ")

                TOKEN = NEXTTOKEN
                WHILE VALTOKEN <> "."
                        IF VALTOKEN = "VALUE" THEN
                                TOKEN = NEXTTOKEN
                                IF VALTOKEN <> "SPACES" THEN
					FOR JJ =  2 TO 8
						IF MAT_ELEM_LIS(IDX_BUSQ_01,ELM_FIL_NAME,JJ) = "" THEN 
							SGTE_POS = JJ
							JJ = 8
						END IF
					NEXT JJ
                                        RQ_NUM_ELM = SGTE_POS
 !!!                                <<< GUARDO VALOR DE COMANDO >>>
                                        MAT_ELEM_LIS(IDX_BUSQ_01,ELM_FIL_NAME,RQ_NUM_ELM) = STRTOKEN
                                END IF
                        END IF
                        TOKEN = NEXTTOKEN
                 NEXT
                
                TOKEN = NEXTTOKEN
{COMENT}	        BUFOUT = FNC_PRINT("TOKEN NUMERO " + VALTOKEN)
                TOKEN = NEXTTOKEN
{COMENT}	        BUFOUT = FNC_PRINT("SEC CODE  GLOSA " + VALTOKEN)
		MAT_ELEM_LIS(IDX_BUSQ_01,ELM_FIL_CODE,ELM_COL_GLOSA) = VALTOKEN
		TOKEN = NEXTTOKEN
                WHILE VALTOKEN <> "."
                        IF VALTOKEN = "VALUE" THEN
                                TOKEN = NEXTTOKEN
                                IF VALTOKEN <> "SPACES" THEN
 !!!                                <<< GUARDO VALOR DE FILE EJEC >>>
					FOR JJ =  2 TO 8
						IF MAT_ELEM_LIS(IDX_BUSQ_01,ELM_FIL_CODE,JJ) = "" THEN 
							SGTE_POS = JJ
							JJ = 8
						END IF
					NEXT JJ
                                        RQ_NUM_SEC = SGTE_POS
                                        MAT_ELEM_LIS(IDX_BUSQ_01,ELM_FIL_CODE,RQ_NUM_SEC) = VALTOKEN
                                END IF
                        END IF
                        TOKEN = NEXTTOKEN
                NEXT


                TOKEN = NEXTTOKEN
{COMENT}	        BUFOUT = FNC_PRINT("TOKEN NUMERO " + VALTOKEN)
                TOKEN = NEXTTOKEN
{COMENT}	        BUFOUT = FNC_PRINT("FILLER  GLOSA " + VALTOKEN)
		MAT_ELEM_LIS(IDX_BUSQ_01,ELM_FIL_FILL,ELM_COL_GLOSA) = VALTOKEN
		TOKEN = NEXTTOKEN
                WHILE VALTOKEN <> "."
                        IF VALTOKEN = "VALUE" THEN
                                TOKEN = NEXTTOKEN
                                IF VALTOKEN <> "SPACES" THEN
 !!!                                <<< GUARDO VALOR DE FILE EJEC >>>
					FOR JJ =  2 TO 8
						IF MAT_ELEM_LIS(IDX_BUSQ_01,ELM_FIL_FILL,JJ) = "" THEN 
							SGTE_POS = JJ
							JJ = 8
						END IF
				        NEXT JJ
                                        RQ_NUM_FILL = SGTE_POS
                                        MAT_ELEM_LIS(IDX_BUSQ_01,ELM_FIL_FILL,RQ_NUN_FILL) = VALTOKEN
                                END IF
                        END IF
                        TOKEN = NEXTTOKEN
                {TER_WHI}
   {END_DEF}

% IF GEN_VAX
     DEF STRING FNC_GEN_PGO
% ELSE
     FUNCTION FNC_GEN_PGO () AS STRING
% END

        SWITCH_GEN_PGO = "SI"

	TOKEN = INITOK
        WHILE TOKEN <> ETXTOK
           TOKEN = NEXTTOKEN
           IF VALTOKEN = "DIVISION" AND VALTOKEN_1 = "PROCEDURE" THEN
               MODO_PROCEDURE_DIVISION = "SI"
           END IF
           IF MODO_CALL_DBNTRY = "SI" THEN
               WRT_LIN_ORIG_COMO_COMENT = "SI"
               TOKEN = NEXTTOKEN
{COMENT}               BUFOUT = FNC_PRINT("1 INVOCANDO DTC CON " + VALTOKEN + " MODO_CALL_DBNTRY>" + MODO_CALL_DBNTRY )

               WRT_LIN_ORIG_COMO_COMENT = "SI"
               TOKEN = NEXTTOKEN
{COMENT}               BUFOUT = FNC_PRINT("2 INVOCANDO DTC CON " + VALTOKEN + " MODO_CALL_DBNTRY>" + MODO_CALL_DBNTRY )

               WRT_LIN_ORIG_COMO_COMENT = "SI"
               TOKEN = NEXTTOKEN
{COMENT}               BUFOUT = FNC_PRINT("3 INVOCANDO DTC CON " + VALTOKEN + " MODO_CALL_DBNTRY>" + MODO_CALL_DBNTRY )

               ELM_EST_ENC = "NO"
{COMENT}                BUFOUT = FNC_PRINT("COMPARA VALTOKEN >> " + VALTOKEN )
               FOR RQA_IDX_RQA = 1 TO RQA_TOT_RQAS 
{COMENT}                     BUFOUT = FNC_PRINT("COMPARANDO VALTOKEN ==> " + VALTOKEN  + " CON " + RQA_MATR_IDN(RQA_IDX_RQA) )
                    IF RQA_MATR_IDN(RQA_IDX_RQA) = VALTOKEN THEN
                        ELM_EST_ENC = "SI"
{COMENT}                        BUFOUT = FNC_PRINT("ELEMENTO ENCONTRADO " + RQA_MATR_IDN (RQA_IDX_RQA) + " EN OCC = " + FNC_SYSSTR(RQA_IDX_RQA))
{COMENT}                         BUFOUT = FNC_PRINT("1 GENERA O_B_STR " + O_B_STR )
                        O_B_STR = FNC_SYSLEFT(O_B_STR ,P_CALL)
{COMENT}                         BUFOUT = FNC_PRINT("2 GENERA O_B_STR " + O_B_STR )
                        O_B_STR = O_B_STR + "PERFORM PGM-" + RQA_MATR_OCC(RQA_IDX_RQA, RQA_SIST , 1 ) + "-FIO-" + RQA_MATR_OCC(RQA_IDX_RQA, RQA_TABL , 1 ) 
                        O_B_CAPSULA = O_B_STR
                        RQA_IDX_RQA = RQA_TOT_RQAS + 1
                     END IF
               NEXT RQA_IDX_RQA

               WRT_LIN_ORIG_COMO_COMENT = "SI"
               TOKEN = NEXTTOKEN
               IF VALTOKEN = "." THEN
                    O_B_CAPSULA = O_B_CAPSULA + "."
                    WRT_LIN_ORIG_COMO_COMENT = "SI"
                    TOKEN = NEXTTOKEN
               ELSE
{COMENT}               BUFOUT = FNC_PRINT("4 INVOCANDO DTC CON " + VALTOKEN + " MODO_CALL_DBNTRY>" + MODO_CALL_DBNTRY )

               WRT_LIN_ORIG_COMO_COMENT = "SI"
               TOKEN = NEXTTOKEN
               IF VALTOKEN = "." THEN
                    O_B_CAPSULA = O_B_CAPSULA + "."
                    WRT_LIN_ORIG_COMO_COMENT = "SI"
                    TOKEN = NEXTTOKEN
               ELSE
{COMENT}                BUFOUT = FNC_PRINT("5 INVOCANDO DTC CON " + VALTOKEN + " MODO_CALL_DBNTRY>" + MODO_CALL_DBNTRY )

               TOKEN = NEXTTOKEN
{COMENT}                BUFOUT = FNC_PRINT("6 INVOCANDO DTC CON " + VALTOKEN + " MODO_CALL_DBNTRY>" + MODO_CALL_DBNTRY )
               IF VALTOKEN = "." THEN
                    O_B_CAPSULA = O_B_CAPSULA + "."
                    WRT_LIN_ORIG_COMO_COMENT = "SI"
                    TOKEN = NEXTTOKEN
               END IF
               END IF
               END IF
 
{COMENT}               BUFOUT = FNC_PRINT("PONE MODO_CALL_DBNTRY ==> NO CON VALTOKEN = " + VALTOKEN )

               MODO_CALL_DBNTRY = "NO"
{COMENT}                BUFOUT =            FNC_PRINT(   "G3" + O_B_CAPSULA )
               FIO_ACCI = ESCR_PGO(FIO_STAT,        O_B_CAPSULA )
               O_B_CAPSULA = ""
               PONER_CMT_CONTEXTO = "SI"

           END IF
           IF TOKEN = IDNTOK AND VALTOKEN_3 = "MOVE" AND VALTOKEN_1 = "TO" THEN
{COMENT}                BUFOUT = FNC_PRINT("ENTRA A BUSCAR EN MOVE TABLA O     B.D.D ")
{COMENT} BUSCA SI IDENTIFICADOR ES MOVE A VARIABLE DE TABLA O DBID
{COMENT} PARA INHIBIR LA LINEA
{COMENT}                  ELM_EST_ENC = "NO"
                 FOR RQA_IDX_RQA = 1 TO RQA_TOT_RQAS 
                       IF RQA_MATR_EST(RQA_IDX_RQA,RQA_TABL) = VALTOKEN OR RQA_MATR_EST(RQA_IDX_RQA,RQA_DBID) = VALTOKEN THEN
{COMENT}                            BUFOUT = FNC_PRINT("ENCONTRO MOVE TABLA O     B.D.D==>>> " + VALTOKEN )
{COMENT}                           ELM_EST_ENC = "SI"
                           RQA_IDX_RQA = RQA_TOT_RQAS + 1
                           WRT_LIN_ORIG_COMO_COMENT = "SI"
                           WRT_O_B_STR = "NO"
                        END IF
                 NEXT RQA_IDX_RQA
           ELSE
           IF TOKEN = IDNTOK AND VALTOKEN_4 = "MOVE" AND VALTOKEN_3 = "+" AND VALTOKEN_1 = "TO" THEN
{COMENT}               BUFOUT = FNC_PRINT("ENTRA A BUSCAR EN MOVE TABLA O     B.D.D ")
{COMENT} BUSCA SI IDENTIFICADOR ES MOVE A VARIABLE DE TABLA O DBID
{COMENT} PARA INHIBIR LA LINEA
{COMENT}                  ELM_EST_ENC = "NO"
                  FOR RQA_IDX_RQA = 1 TO RQA_TOT_RQAS 
                       IF RQA_MATR_EST(RQA_IDX_RQA,RQA_DBID) = VALTOKEN THEN
{COMENT}                           BUFOUT = FNC_PRINT("ENCONTRO MOVE A B.D.D==>>> " + VALTOKEN )
{COMENT}                           ELM_EST_ENC = "SI"
                           RQA_IDX_RQA = RQA_TOT_RQAS + 1
                           WRT_LIN_ORIG_COMO_COMENT = "SI"
                           WRT_O_B_STR = "NO"
                        END IF
                 NEXT RQA_IDX_RQA
           END IF
           END IF
        {TER_WHI}

   {END_DEF}

% IF GEN_VAX
     DEF STRING FNC_ANL_RQA
% ELSE
     FUNCTION FNC_ANL_RQA () AS STRING
% END

{COMENT} PROCESA SOLO WSS ( ES DECIR SOLO HASTA INCIO PROCEDURE DIVISION )

{COMENT} BUFOUT = FNC_PRINT("FUNCION IDEN_REQ BUSCANDO PROCEDURE DIVISION")
             WHILE TOKEN <> ETXTOK
                  TOKEN = NEXTTOKEN{PAREN}
                  IF VALTOKEN = "PROCEDURE" THEN
                      TOKEN = NEXTTOKEN{PAREN}
                      IF VALTOKEN = "DIVISION" THEN
                          TOKEN = NEXTTOKEN{PAREN}
                          IF VALTOKEN = "." THEN
                              TOKEN = ETXTOK
                          END IF
                      END IF
                  END IF

{COMENT} HACE BUSQUEDA SOLO PARA IDENTIFICADORES
                 IF TOKEN = IDNTOK THEN
                     HAY_REQA = "NO"
                     FOR IDX_BUSQ_01 = 1 TO RQA_TOT_RQAS
                       IF RQA_MATR_IDN(IDX_BUSQ_01) = VALTOKEN THEN
                           IDX_ENC_01 = IDX_BUSQ_01
                           IDX_BUSQ_01 = RQA_TOT_RQAS + 1
                           HAY_REQA = "SI"
                       END IF
                     NEXT IDX_BUSQ_01

                     IF HAY_REQA = "SI" THEN
                         BUFOUT = FNC_ANL_LIN_RQA_WSS{PAREN}
                     END IF
                 END IF
             {TER_WHI}

{COMENT} BUFOUT = FNC_PRINT("TERMINO ANALISIS WSS AHO ANALIZA PROCEDURE ")
             TOKEN = INITOK
             WHILE TOKEN <> ETXTOK
                  TOKEN = NEXTTOKEN{PAREN}
                  IF VALTOKEN = "MOVE" THEN
{COMENT}                      BUFOUT = FNC_PRINT("DETECTO MOVE ")
                      MOVE_01 = ""
                      MOVE_02 = ""
                      MOVE_03 = ""
                      TOKEN = NEXTTOKEN

                      IF VALTOKEN = "+" THEN
                          TOKEN = NEXTTOKEN
                          MOVE_01 = VALTOKEN
                      ELSE
                          IF TOKEN = STRTOK THEN
                               MOVE_01 = STRTOKEN
                          ELSE
                               MOVE_01 = VALTOKEN
                          END IF
                      END IF
{COMENT}                      BUFOUT = FNC_PRINT("MOVE_01 " + VALTOKEN )

                      TOKEN = NEXTTOKEN
                      IF VALTOKEN = "TO" THEN
                           TOKEN = NEXTTOKEN
                           RQA_STR_ADD_OCC = VALTOKEN
{COMENT}                           BUFOUT = FNC_PRINT("RQA_STR_ADD_OCC " + VALTOKEN )
                           ACCION = FNC_ADD_OCC_MOVE
                           IF ELM_EST_ENC = "SI" THEN
                               ACCION = PUT_OCC
                           END IF
                      END IF
                          
                      END IF
             {TER_WHI}
   {END_DEF}


% IF GEN_VAX
   DEF INTEGER INIC_IALI
% ELSE
   FUNCTION INIC_IALI () AS INTEGER
% END

        PRIMERA_LECTURA = "SI"
        MODO_WORKING_STORAGE_SECTION = "NO"
        MODO_ENTRY_DBMSCBL = "NO"
        DTC_VEC_STAT_NUM(01) = "00"
        DTC_VEC_STAT_NUM(02) = "  "
        DTC_VEC_STAT_NUM(03) = "10"
        DTC_VEC_STAT_NUM(04) = "14"

        DTC_VEC_STAT_ALF(01) = "FIO-STAT-OKS"
        DTC_VEC_STAT_ALF(02) = "FIO-STAT-OKS"
        DTC_VEC_STAT_ALF(03) = "FIO-STAT-CDK"
        DTC_VEC_STAT_ALF(04) = "FIO-STAT-RFN"
        DTC_TOT_STAT = 4

        MODO_PROCEDURE_DIVISION = "NO"
        WRT_O_B_STR = "SI"
        PONER_CMT_CONTEXTO = "SI"
{COMENT} ==>> DT2_TOT_EST
{COMENT} INIALIZA VECTOR PARA DOCUMENTACION
        DC1_VEC_DOC(RQA_CMND) = " CMND "
        DC1_VEC_DOC(RQA_TABL) = " TABL "
        DC1_VEC_DOC(RQA_IKEY) = " IKEY "
        DC1_VEC_DOC(RQA_FKEY) = " FKEY "
        DC1_VEC_DOC(RQA_STAT) = " STAT "
        DC1_VEC_DOC(RQA_RSV1) = " RSV1 "
        DC1_VEC_DOC(RQA_DBID) = " DBID "
        DC1_VEC_DOC(RQA_SIST) = " SIST "
        DC1_VEC_DOC(RQA_RCID) = " RCID "
        DC1_VEC_DOC(RQA_RSV2) = " RSV2 "
        DC1_VEC_DOC(RQA_ELIS) = " ELIS "
        DC1_VEC_DOC(RQA_BUFF) = " BUFF "

{COMENT} INIALIZA VECTOR CON COMANDOS FIO
        DT2_CMND_FIO(001) = "FIO-GET-KEY"
        DT2_CMND_FIO(002) = "FIO-GET-KEY"
        DT2_CMND_FIO(003) = "FIO-GET-NXT"
        DT2_CMND_FIO(004) = "FIO-GET-NLS"
        DT2_CMND_FIO(005) = "FIO-PUT"
        DT2_CMND_FIO(006) = "FIO-DEL"
        DT2_CMND_FIO(007) = "FIO-GETIT"
        DT2_CMND_FIO(008) = "FIO-GSETL"
        DT2_CMND_FIO(009) = "FIO-LOCX"
        DT2_CMND_FIO(010) = "FIO-RDUKG"
        DT2_CMND_FIO(011) = "FIO-GET-KEY-UPD"
        DT2_CMND_FIO(012) = "FIO-GET-KEY-UPD"
        DT2_CMND_FIO(013) = "FIO-REDKG"
        DT2_CMND_FIO(014) = "FIO-ULK-REG"
        DT2_CMND_FIO(015) = "FIO-MOD"

{COMENT} INIALIZA VECTOR CON COMANDOS DTC
        DT2_CMND_DTC(001) = "REDKY"
        DT2_CMND_DTC(002) = "REDKX"
        DT2_CMND_DTC(003) = "GETNX"
        DT2_CMND_DTC(004) = "XXXX"
        DT2_CMND_DTC(005) = "ADDIT"
        DT2_CMND_DTC(006) = "DELET"
        DT2_CMND_DTC(007) = "GETIT"
        DT2_CMND_DTC(008) = "GSETL"
        DT2_CMND_DTC(009) = "LOCKX"
        DT2_CMND_DTC(010) = "RDUKG"
        DT2_CMND_DTC(011) = "RDUKY"
        DT2_CMND_DTC(012) = "RDUKX"
        DT2_CMND_DTC(013) = "REDKG"
        DT2_CMND_DTC(014) = "RELES"
        DT2_CMND_DTC(015) = "UPDAT"
 
        DT2_TOT_CMND = 15

        VSN_CPT_ALF = " VERSION 1.1.0 Noviembre 2001"
        NIV_PIC(NIV_01) = "01  "
        NIV_PIC(NIV_03) = "03  "
        NIV_PIC(NIV_05) = "05  "
        NIV_PIC(NIV_07) = "07  "
        NIV_PIC(NIV_09) = "09  "
        NIV_PIC(NIV_11) = "11  "

        NIV_SEP(NIV_01) = "           "
        NIV_SEP(NIV_03) = "               "
        NIV_SEP(NIV_05) = "            "
        NIV_SEP(NIV_07) = "         "
        NIV_SEP(NIV_09) = "      "
        NIV_SEP(10)     = "     "
        NIV_SEP(11)     = "         "
        NIV_SEP(12)     = "             "
        NIV_SEP(13)     = "                 "
        NIV_SEP(14)     = "                     "

        NIV_MRG(NIV_00) = MG_0
        NIV_MRG(NIV_01) = MG_8
        NIV_MRG(NIV_03) = MG_12
        NIV_MRG(NIV_05) = MG_16
        NIV_MRG(NIV_07) = MG_20
        NIV_MRG(NIV_09) = MG_24
        NIV_MRG(NIV_11) = MG_28

        C_FILE_MTX = 1
        C_FILE_DC1 = 2
        C_FILE_PGO = 3
        C_FILE_DCG = 4
        C_FILE_WS1 = 5
        C_FILE_WS2 = 6
        C_FILE_WS3 = 7
        C_FILE_PI1 = 8
        C_FILE_DFI = 9
        C_FILE_DFO = 10
        C_FILE_VBC = 11
        C_FILE_FMT = 12
        FST_WSS = NO
        V_M(MG_0)  = ""
        V_M(MG_7)  = "      *"
        V_M(MG_8)  = "       "
        V_M(MG_12) = "           "
        V_M(MG_16) = "               "
        V_M(MG_20) = "                   "
        V_M(MG_24) = "                       "
        V_M(MG_28) = "                           "
        O_L  = FNC_SYSCHR(13) + FNC_SYSCHR(10)
        P_P = 1
        P_Q = 1
	RQ_NUM_COL = 1
        
{COMENT}    ($ MTX$DLP = "S") ==> DESPLIEGA LINEAS LEIDAS DE {FIL}.MTX
         WSS_DLP = FNC_SYS_LIB_GET_SYMBOL("DT2$DLP")
         WSS_USN = FNC_SYS_LIB_GET_SYMBOL("GNS$USN")
{COMENT}    ($ MTX$DPP = "S") ==> DESPLIEGA PASOS DE GENERACION   
        WSS_DPP= FNC_SYS_LIB_GET_SYMBOL("MTX$DPP")

{COMENT}    ($ MTX$DFI = "S") ==> GENERA ARCHIVO DFI
        WSS_DFI = FNC_SYS_LIB_GET_SYMBOL("MTX$DFI")

{COMENT}    ($ MTX$DFO = "S") ==> GENERA ARCHIVO DFO
        WSS_GENDFO = FNC_SYS_LIB_GET_SYMBOL("MTX$DFO")

         RPT_GLS_PRY = FNC_SYS_LIB_GET_SYMBOL("GNS$PRY")
         EXTERNO = FNC_SYS_LIB_GET_SYMBOL("GNS$FIL")
         GNS_PATH = FNC_SYS_LIB_GET_SYMBOL("GNS$PTH")

         FILE_MTX = FNC_SYS_LIB_GET_SYMBOL("PTH")
         RPT_GLS_FOR = FNC_SYS_LIB_GET_SYMBOL("GNS$SOP")
         RPT_GLS_PAI = FNC_SYS_LIB_GET_SYMBOL("GNS$PAI")
         RPT_GLS_CLI = FNC_SYS_LIB_GET_SYMBOL("GNS$CLI")

        MAP_GLS_IDEN = FNC_SYSDATE(0%) + " " + FNC_SYSTIME(0%)
        MAP_GLS_IDEN = "      *    " + FNC_SYSEDIT(MAP_GLS_IDEN, 32)
        MAP_GLS_VBC_CPT_ALF = "      '    " + FNC_SYSEDIT(MAP_GLS_IDEN, 32)

         PASO_EJEC = FNC_SYS_LIB_GET_SYMBOL("PASO_EJEC")

{COMENT}        BUFOUT = FNC_PRINT("ABRIRA ARCHIVO INP" )
        FIO_ACCI = FIO_MTX_INP{PAREN}
{COMENT}        BUFOUT = FNC_PRINT("ABRIO  ARCHIVO INP" )

        FILE_FMT = EXTERNO + "MX" + "FMT.AIU"
{COMENT}        FIO_ACCI = FIO_FMT_PUT(FIO_STAT, MAP_GLS_IDEN)
                GNS_PATH =  "      *    " + GNS_PATH
{COMENT}        FIO_ACCI = FIO_FMT_PUT(FIO_STAT, GNS_PATH)
                GNS_USER$ =  "      *     USUARIO = " + WSS_USN 
{COMENT}        FIO_ACCI = FIO_FMT_PUT(FIO_STAT, GNS_USER$)
{COMENT}        FIO_ACCI = FIO_FMT_PUT(FIO_STAT, ARCH_SPA_CPT_ALF)
                ARCH_IDEN_CPT_ALF = "      *    " + FILE_FMT 
{COMENT}        FIO_ACCI = FIO_FMT_PUT(FIO_STAT, ARCH_IDEN_CPT_ALF + VSN_CPT_ALF)
{COMENT}        FIO_ACCI = FIO_FMT_PUT(FIO_STAT, ARCH_SPA_CPT_ALF)
        TPG_TOT_LEI = TPG_TOT_LEI + 1
               I_B_STR = FIO_MTX_GETNXT{PAREN}
        SZ_I_B = FIO_RLEN
        IF FIO_STAT <> FIO_STAT_OKS THEN
                 BUFOUT = FNC_PRINT("ARCHIVO VACIO " +  FNC_SYSSTR(FIO_STAT))
        END IF
        IF WSS_DLP = "S" THEN
                 BUFOUT = FNC_PRINT("PROC REG " + FNC_SYSSTR(TPG_TOT_LEI) + " #" + I_B_STR)
        END IF

        FILE_DC1 = EXTERNO + ".DC1"
        FILE_PGO = EXTERNO + ".PGO"
        FILE_DCG = "DTCTODB2.DCG"
        FILE_FMT = EXTERNO + ".FMT"
        FILE_WS1 = EXTERNO + ".WS1"
        FILE_WS2 = EXTERNO + ".WS2"
        FILE_WS3 = EXTERNO + ".WS3"
        FILE_PI1 = EXTERNO + ".PI1"

        FILE_VBC = EXTERNO + ".VBC"

        FILE_RN = RPT_GLS_PRY + ".AIU"
        ARCH_SPA_CPT_ALF = "      *    " 

        IF PASO_EJEC = "GEN" THEN
            FIO_ACCI = FIO_PGO_OUT{PAREN}
{COMENT}            FIO_ACCI = ESCR_PGO(FIO_STAT,MAP_GLS_IDEN)
{COMENT}            FIO_ACCI = ESCR_PGO(FIO_STAT,ARCH_SPA_CPT_ALF)
{COMENT}            FIO_ACCI = ESCR_PGO(FIO_STAT,ARCH_IDEN_CPT_ALF + VSN_CPT_ALF)
{COMENT}            FIO_ACCI = ESCR_PGO(FIO_STAT,ARCH_SPA_CPT_ALF)
        END IF


{COMENT}         FIO_ACCI = FIO_WS1_OUT{PAREN}
{COMENT}        FIO_ACCI = FIO_WS1_PUT(FIO_STAT,MAP_GLS_IDEN)
{COMENT}        FIO_ACCI = FIO_WS1_PUT(FIO_STAT,GNS_PATH)
{COMENT}        FIO_ACCI = FIO_WS1_PUT(FIO_STAT,GNS_USER$)
{COMENT}        FIO_ACCI = FIO_WS1_PUT(FIO_STAT,ARCH_SPA_CPT_ALF)
{COMENT}         ARCH_IDEN_CPT_ALF = "      *    " + FILE_WS1 
{COMENT}        FIO_ACCI = FIO_WS1_PUT(FIO_STAT,ARCH_IDEN_CPT_ALF + VSN_CPT_ALF)
{COMENT}        FIO_ACCI = FIO_WS1_PUT(FIO_STAT,ARCH_SPA_CPT_ALF)
 
{COMENT}        FIO_ACCI = FIO_WS3_OUT{PAREN}
{COMENT}        FIO_ACCI = FIO_WS3_PUT(FIO_STAT,MAP_GLS_IDEN)
{COMENT}        FIO_ACCI = FIO_WS3_PUT(FIO_STAT,GNS_PATH)
{COMENT}        FIO_ACCI = FIO_WS3_PUT(FIO_STAT,GNS_USER$)
{COMENT}        FIO_ACCI = FIO_WS3_PUT(FIO_STAT,ARCH_SPA_CPT_ALF )
{COMENT}         ARCH_IDEN_CPT_ALF = "      *    " + FILE_WS3 
{COMENT}        FIO_ACCI = FIO_WS3_PUT(FIO_STAT,ARCH_IDEN_CPT_ALF + VSN_CPT_ALF)
{COMENT}        FIO_ACCI = FIO_WS3_PUT(FIO_STAT,ARCH_SPA_CPT_ALF )

{COMENT}         FIO_ACCI = FIO_WS2_OUT{PAREN}
{COMENT}        FIO_ACCI = FIO_WS2_PUT(FIO_STAT,MAP_GLS_IDEN)
{COMENT}        FIO_ACCI = FIO_WS2_PUT(FIO_STAT,GNS_PATH)
{COMENT}        FIO_ACCI = FIO_WS2_PUT(FIO_STAT,GNS_USER$)
{COMENT}        FIO_ACCI = FIO_WS2_PUT(FIO_STAT,ARCH_SPA_CPT_ALF )
{COMENT}         ARCH_IDEN_CPT_ALF = "      *    " + FILE_WS2 
{COMENT}        FIO_ACCI = FIO_WS2_PUT(FIO_STAT,ARCH_IDEN_CPT_ALF + VSN_CPT_ALF )
{COMENT}        FIO_ACCI = FIO_WS2_PUT(FIO_STAT,ARCH_SPA_CPT_ALF )

{COMENT}         FIO_ACCI = FIO_PI1_OUT{PAREN}
{COMENT}        FIO_ACCI = FIO_PI1_PUT(FIO_STAT,MAP_GLS_IDEN)
{COMENT}        FIO_ACCI = FIO_PI1_PUT(FIO_STAT,GNS_PATH)
{COMENT}        FIO_ACCI = FIO_PI1_PUT(FIO_STAT,GNS_USER$)
{COMENT}        FIO_ACCI = FIO_PI1_PUT(FIO_STAT,ARCH_SPA_CPT_ALF)
{COMENT}         ARCH_IDEN_CPT_ALF = "      *    " + FILE_PI1
{COMENT}        FIO_ACCI = FIO_PI1_PUT(FIO_STAT,ARCH_IDEN_CPT_ALF + VSN_CPT_ALF)
{COMENT}        FIO_ACCI = FIO_PI1_PUT(FIO_STAT,ARCH_SPA_CPT_ALF)

{COMENT}        FIO_ACCI = FIO_VBC_OUT{PAREN}
        BB = 1
        LL = 1

        DT_CPT_ALF  = FNC_SYSDATE({CTE0_PORC})
        HRS_CPT_ALF = FNC_SYSTIME({CTE32_PORC})

        MNT_CPT_ALF = FNC_SYSMID(HRS_CPT_ALF,4,2)
        HRS_CPT_ALF = FNC_SYSMID(HRS_CPT_ALF,1,2)
        HORA_CPT_ALF = HRS_CPT_ALF + MNT_CPT_ALF + "00"
        DIA_CPT_ALF = FNC_SYSMID(DT_CPT_ALF,1,2)
        MES_CPT_ALF = FNC_SYSMID(DT_CPT_ALF,4,3)
        ANO_CPT_ALF = FNC_SYSMID(DT_CPT_ALF,8,4)

        MES_CPT_ALF = FNC_SYSEDIT(MES_CPT_ALF,CTE32_PORC)

        FOR O_CPT_NUM = 1 TO 12
                IF V_MES(O_CPT_NUM,1) = MES_CPT_ALF THEN
                        MES_CPT_ALF = V_MES(O_CPT_NUM,2)
                        O_CPT_NUM = 13
                END IF
        NEXT O_CPT_NUM 
        TIME_STP_CPT_ALF = "19" + ANO_CPT_ALF + MES_CPT_ALF + DIA_CPT_ALF + HORA_CPT_ALF

   {END_DEF}

{COMENT} IDENTIFICA LAS REQUEST AREA INVOLUCRADAS
{COMENT} 
% IF GEN_VAX
   DEF INTEGER FNC_ADD_RQA
% ELSE
   FUNCTION FNC_ADD_RQA () AS INTEGER
% END

   DT2_HAY_RQA = "NO" 

   FOR RQA_MATR_IDN_IDX = 1 TO RQA_TOT_RQAS
      IF VALTOKEN = RQA_MATR_IDN(RQA_MATR_IDN_IDX) THEN
          DT2_HAY_RQA = "SI"
          RQA_PTR_RQA = RQA_MATR_IDN_IDX 
      END IF
   NEXT RQA_MATR_IDN_IDX

   IF DT2_HAY_RQA = "NO" THEN
        RQA_TOT_RQAS = RQA_TOT_RQAS + 1
        RQA_PTR_RQA = RQA_TOT_RQAS 
        RQA_MATR_IDN(RQA_PTR_RQA) = VALTOKEN
   END IF

   {END_DEF}

% IF GEN_VAX
   DEF INTEGER ADD_ELEM
% ELSE
   FUNCTION ADD_ELEM() AS INTEGER
% END

	DT2_HAY_ELEM = "NO" 

	FOR DT2_ELEM_LIS_IDX = 1 TO RQA_TOT_ELEM
             IF VALTOKEN = DT2_ELEM_LIST(DT2_ELEM_LIS_IDX) THEN
                  DT2_HAY_ELEM = "SI"
              END IF
        NEXT DT2_ELEM_LIS_IDX
	
	IF DT2_HAY_ELEM = "NO" THEN
		RQA_TOT_ELEM= RQA_TOT_ELEM + 1
	        DT2_ELEM_LIST(RQA_TOT_ELEM) = VALTOKEN
	END IF

{COMENT} PONE EN LA RQA CORRESPONDIENTE QUE ELEMENT ASOCIADO USA EN EL CALL

               ELM_OCC_ENC = "NO"
               FOR RQA_IDX_OCC = 1 TO RQA_MATR_TOC(RQA_PTR_RQA  , RQA_ELIS)
                   IF RQA_MATR_OCC(RQA_PTR_RQA  , RQA_ELIS , RQA_IDX_OCC) = ELEM_STR THEN
{COMENT}                      BUFOUT = FNC_PRINT("ENCONTRO ELEMENTO " + RQA_MATR_OCC(RQA_PTR_RQA  , RQA_ELIS , RQA_IDX_OCC) + "*" + ELEM_STR )
{COMENT}                      BUFOUT = FNC_PRINT("EN OCURRENCIA " + FNC_SYSSTR(RQA_IDX_OCC ) )
                     ELM_OCC_ENC = "SI"
                     RQA_IDX_OCC = RQA_MATR_TOC(RQA_PTR_RQA  ,RQA_ELIS) + 1
                   END IF
               NEXT RQA_IDX_OCC 
               IF ELM_OCC_ENC = "NO" THEN
                     RQA_MATR_TOC(RQA_PTR_RQA  ,RQA_ELIS) = RQA_MATR_TOC(RQA_PTR_RQA  , RQA_ELIS) + 1
                     RQA_MATR_OCC(RQA_PTR_RQA  ,RQA_ELIS, RQA_MATR_TOC(RQA_PTR_RQA  , RQA_ELIS)  ) = ELEM_STR
               END IF

   {END_DEF}

{COMENT} IDENTIFICA LAS BUFFER DE REGISTROS INVOLUCRADOS
{COMENT} 
% IF GEN_VAX
   DEF INTEGER FNC_ADD_BDR
% ELSE
   FUNCTION FNC_ADD_BDR () AS INTEGER
% END

{COMENT} PONE EN LA RQA CORRESPONDIENTE QUE BDR ASOCIADO USA EN EL CALL

               ELM_OCC_ENC = "NO"
               FOR RQA_IDX_OCC = 1 TO RQA_MATR_TOC(RQA_PTR_RQA  , RQA_BUFF)
                   IF RQA_MATR_OCC(RQA_PTR_RQA  , RQA_BUFF , RQA_IDX_OCC) = VALTOKEN THEN
{COMENT}                        BUFOUT = FNC_PRINT("ENCONTRO ELEMENTO " + RQA_MATR_OCC(RQA_PTR_RQA  , RQA_BUFF , RQA_IDX_OCC) + "*" + ELEM_STR )
{COMENT}                        BUFOUT = FNC_PRINT("EN OCURRENCIA " + FNC_SYSSTR(RQA_IDX_OCC ) )
                       ELM_OCC_ENC = "SI"
                       RQA_IDX_OCC = RQA_MATR_TOC(RQA_PTR_RQA  ,RQA_BUFF) + 1
                   END IF
               NEXT RQA_IDX_OCC 
               IF ELM_OCC_ENC = "NO" THEN
                     RQA_MATR_TOC(RQA_PTR_RQA  ,RQA_BUFF) = RQA_MATR_TOC(RQA_PTR_RQA  , RQA_BUFF) + 1
                     RQA_MATR_OCC(RQA_PTR_RQA  ,RQA_BUFF, RQA_MATR_TOC(RQA_PTR_RQA  , RQA_BUFF)  ) = VALTOKEN
               END IF
   {END_DEF}

% IF GEN_VAX
    DEF INTEGER FNC_LEE_DCG
% ELSE
    FUNCTION FNC_LEE_DCG () AS INTEGER
% END

{COMENT}        BUFOUT = FNC_PRINT("ABRIRA ARCHIVO DCG ")
        FIO_ACCI = FIO_DCG_INP{PAREN}
{COMENT}        BUFOUT = FNC_PRINT("ABRIO ARCHIVO DCG ")
 CIC_DCG:
{COMENT}         BUFOUT = FNC_PRINT("LEERA ARCHIVO DCG")
        I_B_STR = FIO_DCG_GETNXT{PAREN}
{COMENT}         BUFOUT = FNC_PRINT("LEYO DCG")
        IF FIO_STAT <> FIO_STAT_OKS THEN
             GO TO FIN_DCG
        END IF
        
        IF FNC_SYSMID(I_B_STR,1,1) = "!" THEN
             GO TO CIC_DCG
        END IF
        IF FNC_SYSMID(I_B_STR,1,7) = "ID_BASE" THEN
            TOT_ID_BASE = TOT_ID_BASE + 1
            DT2_ID_BASE_DTC(TOT_ID_BASE) = FNC_SYSMID(I_B_STR,09,3)
            DT2_ID_BASE_SIS(TOT_ID_BASE) = FNC_SYSMID(I_B_STR,17,3)

                FOR RQA_PRT_01 = 1 TO RQA_TOT_RQAS
                  FOR RQA_PRT_03 = 1 TO RQA_MATR_TOC(RQA_PRT_01, RQA_DBID)
                       IF DT2_ID_BASE_DTC(TOT_ID_BASE) = RQA_MATR_OCC(RQA_PRT_01, RQA_DBID, RQA_PRT_03 ) THEN
                                     RQA_MATR_TOC(RQA_PRT_01, RQA_SIST) = RQA_MATR_TOC(RQA_PRT_01, RQA_SIST) + 1
                                     RQA_MATR_OCC(RQA_PRT_01, RQA_SIST, RQA_PRT_03 ) = DT2_ID_BASE_SIS(TOT_ID_BASE)
                                     RQA_PRT_03 = RQA_MATR_TOC(RQA_PRT_01, RQA_DBID) + 1
                       END IF
                  NEXT RQA_PRT_03
                NEXT RQA_PRT_01 

        END IF
        IF FNC_SYSMID(I_B_STR,1,7) = "ID_TABL" THEN
            ID_TABL = FNC_SYSMID(I_B_STR,11,3)
            
            I_B_STR = FIO_DCG_GETNXT{PAREN}
            IF FNC_SYSMID(I_B_STR,1,8) = "FIN_TABL" THEN
                GO TO CIC_DCG
            END IF
            IF FNC_SYSMID(I_B_STR,1,6) = "ID_KEY" THEN
                I_KEY = FNC_SYSMID(I_B_STR,8,5)
                F_KEY = FNC_SYSRIGHT(I_B_STR,16)
{COMENT}                BUFOUT = FNC_PRINT("llave dtc " + I_KEY )
{COMENT}                BUFOUT = FNC_PRINT("llave FIO " + F_KEY )
                FOR RQA_PRT_01 = 1 TO RQA_TOT_RQAS
{COMENT}                  BUFOUT = FNC_PRINT("llave FIO REVISANDO RQA " + FNC_SYSSTR(RQA_PRT_01) )
{COMENT}                  BUFOUT = FNC_PRINT("llave FIO HAY TOT ELEMENTOS DE LLAVE " + FNC_SYSSTR(RQA_MATR_TOC(RQA_PRT_01, RQA_IKEY)) )
                  FOR RQA_PRT_03 = 1 TO RQA_MATR_TOC(RQA_PRT_01, RQA_IKEY)
{COMENT}                       BUFOUT = FNC_PRINT("llave FIO COMPARANDO-1 " + I_KEY + "+" + RQA_MATR_OCC(RQA_PRT_01, RQA_IKEY, RQA_PRT_03 ) )
{COMENT}                       BUFOUT = FNC_PRINT("llave FIO COMPARANDO-2 " + ID_TABL + "+" + RQA_MATR_OCC(RQA_PRT_01, RQA_TABL, RQA_PRT_03 ) )
                       IF I_KEY = RQA_MATR_OCC(RQA_PRT_01, RQA_IKEY, RQA_PRT_03 ) AND ID_TABL = RQA_MATR_OCC(RQA_PRT_01, RQA_TABL, RQA_PRT_03 ) THEN
{COMENT}                                     BUFOUT = FNC_PRINT("llave FIO ASIGNANDO " + F_KEY )
                                     RQA_MATR_OCC(RQA_PRT_01, RQA_FKEY, RQA_PRT_03 ) = F_KEY
                                     RQA_MATR_TOC(RQA_PRT_01, RQA_FKEY) = RQA_MATR_TOC(RQA_PRT_01, RQA_FKEY) + 1
                                     RQA_PRT_03 = RQA_MATR_TOC(RQA_PRT_01, RQA_IKEY) + 1
                       END IF
                  NEXT RQA_PRT_03
                NEXT RQA_PRT_01 
            END IF
        END IF

        GO TO CIC_DCG
 FIN_DCG:
        FIO_ACCI = FIO_DCG_CLO{PAREN}

   {END_DEF}

{COMENT} LEE ARCHIVO DCG PARA RECUPERAR EQUIVALENCIA DE REGISTROS
% IF GEN_VAX
    DEF INTEGER FNC_LEE_REG
% ELSE
    FUNCTION FNC_LEE_REG () AS INTEGER
% END

{COMENT}        BUFOUT = FNC_PRINT("ABRIRA ARCHIVO DCG LEE REG ")
        FIO_ACCI = FIO_DCG_INP{PAREN}
{COMENT}        BUFOUT = FNC_PRINT("ABRIO ARCHIVO DCG LEE REG")
 CIC_LEE_REG:
{COMENT}        BUFOUT = FNC_PRINT("LEERA ARCHIVO DCG LEE_REG")
        I_B_STR = FIO_DCG_GETNXT{PAREN}
{COMENT}        BUFOUT = FNC_PRINT("LEYO DCG LEE_REG")
        IF FIO_STAT <> FIO_STAT_OKS THEN
             GO TO FIN_LEE_REG
        END IF
        
        IF FNC_SYSMID(I_B_STR,1,1) = "!" THEN
             GO TO CIC_LEE_REG
        END IF
        IF FNC_SYSMID(I_B_STR,1,7) = "ID_BASE" THEN
            ELM_OCC_ENC = "NO"
            ID_SIST = FNC_SYSMID(I_B_STR,17,3)
        END IF
        IF FNC_SYSMID(I_B_STR,1,7) = "ID_TABL" THEN
            ID_TABL = FNC_SYSMID(I_B_STR,11,3)
            DT2_PTR_REG_FLD = 0

{COMENT}            BUFOUT = FNC_PRINT("ARGUMENTO BUSQUEDA ID_REG PARA SIS-TAB+" + ID_SIST + "+" + ID_TABL + ">>" + FNC_SYSSTR(RQA_TOT_RQAS ))
            ELM_OCC_ENC = "NO"
            FOR RQA_PRT_01 = 1 TO RQA_TOT_RQAS
{COMENT}                  BUFOUT = FNC_PRINT("TOTAL ELEMENTOS A COMPARAR " + FNC_SYSSTR (RQA_MATR_TOC(RQA_PRT_01, RQA_TABL) ) )
                  FOR RQA_PRT_03 = 1 TO RQA_MATR_TOC(RQA_PRT_01, RQA_TABL)
{COMENT}                      BUFOUT = FNC_PRINT("COMPARANDO CON " + RQA_MATR_OCC(RQA_PRT_01, RQA_SIST, RQA_PRT_03 ) + "+" + RQA_MATR_OCC(RQA_PRT_01, RQA_TABL, RQA_PRT_03 ) + "+" )
                       IF ID_SIST = RQA_MATR_OCC(RQA_PRT_01, RQA_SIST, RQA_PRT_03 ) AND ID_TABL = RQA_MATR_OCC(RQA_PRT_01, RQA_TABL, RQA_PRT_03 ) THEN
                             ELM_OCC_ENC = "SI"
                             DT2_PTR_REG_REG = RQA_PRT_01 
{COMENT}                             BUFOUT = FNC_PRINT("ENCONTRO SIS-TAB EN CORR " + FNC_SYSSTR(DT2_PTR_REG_REG ) )
                             RQA_PRT_01 = RQA_TOT_RQAS + 1
                       END IF
                  NEXT RQA_PRT_03
            NEXT RQA_PRT_01 
        END IF

        IF FNC_SYSMID(I_B_STR,1,6) = "ID_REG"  THEN
{COMENT}            BUFOUT = FNC_PRINT( "ENCONTRO ID_REG " )
            IF ELM_OCC_ENC = "SI" THEN
                DT2_PTR_REG_FLD = DT2_PTR_REG_FLD + 1
                REG_MATR_TOC( DT2_PTR_REG_REG ) = DT2_PTR_REG_FLD
                REG_MATR_OCC( DT2_PTR_REG_REG, DT2_PTR_REG_FLD, DT2_CTE_FLD_DTC ) = FNC_SYSMID(I_B_STR,8,36)
                REG_MATR_OCC( DT2_PTR_REG_REG, DT2_PTR_REG_FLD, DT2_CTE_FLD_DTC ) = FNC_SYSEDIT( REG_MATR_OCC( DT2_PTR_REG_REG, DT2_PTR_REG_FLD, DT2_CTE_FLD_DTC ) , 2 )
{COMENT}                BUFOUT = FNC_PRINT("CAMPO RQA COR >" + RQA_MATR_IDN( DT2_PTR_REG_REG ) + "RQA COR>> " + FNC_SYSSTR(DT2_PTR_REG_REG ) + " CAMPO COR " + FNC_SYSSTR(  DT2_PTR_REG_FLD ) + "<" )
{COMENT}                BUFOUT = FNC_PRINT("CAMPO DTC>" + REG_MATR_OCC( DT2_PTR_REG_REG, DT2_PTR_REG_FLD, DT2_CTE_FLD_DTC ) + "<" )

                REG_MATR_OCC( DT2_PTR_REG_REG, DT2_PTR_REG_FLD, DT2_CTE_FLD_FIO ) = FNC_SYSRIGHT(I_B_STR,46)
                REG_MATR_OCC( DT2_PTR_REG_REG, DT2_PTR_REG_FLD, DT2_CTE_FLD_FIO ) = FNC_SYSEDIT( REG_MATR_OCC( DT2_PTR_REG_REG, DT2_PTR_REG_FLD, DT2_CTE_FLD_FIO ) , 2  )
{COMENT}                BUFOUT = FNC_PRINT("CAMPO FIO>" + REG_MATR_OCC( DT2_PTR_REG_REG, DT2_PTR_REG_FLD, DT2_CTE_FLD_FIO ) + "<" )
            ELSE
{COMENT}                    BUFOUT = FNC_PRINT("NO BUSCA POR REG NO APARECE EN PROGEMA >" + FNC_SYSMID(I_B_STR,8,36)+ "<" )
            END IF
        END IF

        IF FNC_SYSMID(I_B_STR,1,7) = "FIN_REG"  THEN
{COMENT}            BUFOUT = FNC_PRINT( "ENCONTRO FIN_REG " )
                RQA_MATR_TDCXREG( DT2_PTR_REG_REG ) = DT2_PTR_REG_FLD
                DT2_PTR_REG_FLD = 0
        END IF

        GO TO CIC_LEE_REG
 FIN_LEE_REG:
        FIO_ACCI = FIO_DCG_CLO{PAREN}

   {END_DEF}


% IF GEN_VAX
    DEF INTEGER FNC_GEN_DC1
% ELSE
    FUNCTION FNC_GEN_DC1 () AS INTEGER
% END
             WHILE TOKEN <> ETXTOK
                    TOKEN = NEXTTOKEN{PAREN}

{COMENT} CALL 'DBNTRY' USING UIB REQUEST-AREA-DCP E-DCP-01  ELEMENT-LIST-DCP.
                 IF VALTOKEN = "CALL" THEN
{COMENT}            BUFOUT = FNC_PRINT("DETECTO CALL")
{COMENT}            BUFOUT = FNC_PRINT("POSIBLE DBNTRY " + VALTOKEN )
                    TOKEN = NEXTTOKEN{PAREN}
                    IF TOKEN = STRTOK AND STRTOKEN = "DBNTRY" THEN
{COMENT}                 BUFOUT = FNC_PRINT(" POSIBLE USING")
                         TOKEN = NEXTTOKEN{PAREN}
                         IF VALTOKEN = "USING" THEN
{COMENT}                        BUFOUT = FNC_PRINT("POSIBLE UIB")
                                TOKEN = NEXTTOKEN{PAREN}
{COMENT}                        BUFOUT = FNC_PRINT("POSIBLE RQA ")
                                TOKEN = NEXTTOKEN{PAREN}
{COMENT}                        BUFOUT = FNC_PRINT("REQA " + VALTOKEN)
                                ACCION = FNC_ADD_RQA{PAREN}
{COMENT} EN RQA_PTR_RQA  QUEDA EL INDICE DONDE PUSO LA RQA
{COMENT}                        BUFOUT = FNC_PRINT("POSIBLE REGISTRO")
                                TOKEN = NEXTTOKEN
                                IF VALTOKEN <> "." THEN
                                     ACCION = FNC_ADD_BDR{PAREN}

                                     TOKEN = NEXTTOKEN
{COMENT}                                 BUFOUT = FNC_PRINT("ELEM ==>> " + VALTOKEN)
                                     ELEM_STR = VALTOKEN
                                     ACCION = ADD_ELEM
                               END IF
                            END IF
                     END IF
                 END IF
             {TER_WHI}
{COMENT}              BUFOUT = FNC_PRINT("CERRARA MTX 1 ")
              FIO_ACCI = FIO_MTX_CLOSE{PAREN}
{COMENT}              BUFOUT = FNC_PRINT("CERRO MTX 1")
              FIO_ACCI = FIO_MTX_INP{PAREN}
{COMENT}              BUFOUT = FNC_PRINT("ABRIO MTX NUEVAMENTE 2")

              TOKEN = INITOK
              BUFOUT = FNC_ANL_RQA{PAREN}
{COMENT}              BUFOUT = FNC_PRINT("CERRARA MTX 2 ")
              FIO_ACCI = FIO_MTX_CLOSE{PAREN}
{COMENT}              BUFOUT = FNC_PRINT("CERRO MTX 2")

             ACCION = FNC_LEE_DCG

            FIO_ACCI = FIO_DC1_OUT

            FIO_ACCI = FIO_DC1_PUT(FIO_STAT,MAP_GLS_IDEN)
            FIO_ACCI = FIO_DC1_PUT(FIO_STAT,GNS_PATH)
            FIO_ACCI = FIO_DC1_PUT(FIO_STAT,GNS_USER$)
            FIO_ACCI = FIO_DC1_PUT(FIO_STAT,ARCH_SPA_CPT_ALF)
            ARCH_IDEN_CPT_ALF = "      *    " + FILE_DC1
            FIO_ACCI = FIO_DC1_PUT(FIO_STAT,ARCH_IDEN_CPT_ALF + VSN_CPT_ALF)
            FIO_ACCI = FIO_DC1_PUT(FIO_STAT,ARCH_SPA_CPT_ALF)


{COMENT} BUFOUT = FNC_PRINT("TOTAL DE RQAS ==>> " + FNC_SYSSTR(RQA_TOT_RQAS) )
             FOR RQA_PRT_01 = 1 TO RQA_TOT_RQAS
                PRT_DC1_RQA = "ID_RQA = " + RQA_MATR_IDN(RQA_PRT_01)
                FIO_ACCI = FIO_DC1_PUT(FIO_STAT,PRT_DC1_RQA)

{COMENT}        BUFOUT = FNC_PRINT("  RQA ==>> " + FNC_SYSSTR(RQA_PRT_01) + " " + RQA_MATR_IDN(RQA_PRT_01) )
{COMENT}        BUFOUT = FNC_PRINT("  RQA ==>> " + " CON IDENTIFICADORES " )

                FOR RQA_PRT_02 = 1 TO DT2_TOT_EST
                     PRT_DC1_ELM = "ID_ELM = " + DC1_VEC_DOC(RQA_PRT_02) + " " +  FNC_SYSFORMAT(RQA_MATR_TOC(RQA_PRT_01, RQA_PRT_02),"##") + " " + FG_BAS_PADDING(RQA_MATR_EST(RQA_PRT_01,RQA_PRT_02) , 24, " ", "D")
                     PRT_DC1_OCC = ""
{COMENT}             BUFOUT = FNC_PRINT("    ELEMENTO ==>> " + FNC_SYSSTR(RQA_PRT_02) + "  " + RQA_MATR_EST(RQA_PRT_01, RQA_PRT_02 ) )
                     FOR RQA_PRT_03 = 1 TO RQA_MATR_TOC(RQA_PRT_01, RQA_PRT_02)
{COMENT}                 BUFOUT = FNC_PRINT("      OCURRENCIA ==>> " + FNC_SYSSTR(RQA_PRT_03) + "  " + RQA_MATR_OCC(RQA_PRT_01, RQA_PRT_02, RQA_PRT_03 ) )
                         PRT_DC1_OCC_AUX = RQA_MATR_OCC(RQA_PRT_01, RQA_PRT_02, RQA_PRT_03 ) 
                         PRT_DC1_OCC_AUX = FG_BAS_PADDING(PRT_DC1_OCC_AUX , 24, " ", "D")

                         PRT_DC1_OCC = PRT_DC1_OCC + PRT_DC1_OCC_AUX
                    
                     NEXT RQA_PRT_03
                     PRT_DC1_ELM = PRT_DC1_ELM + PRT_DC1_OCC
                     FIO_ACCI = FIO_DC1_PUT(FIO_STAT,PRT_DC1_ELM)
                NEXT RQA_PRT_02

            NEXT RQA_PRT_01 
	
{COMENT}            BUFOUT = FNC_PRINT("CERRARA DC1 1 ")
            FIO_ACCI = FIO_DC1_CLOSE{PAREN}
{COMENT}            BUFOUT = FNC_PRINT("CERRO DC1 1")
   {END_DEF}

% IF GEN_VAX
    DEF INTEGER FNC_LEE_DC1
% ELSE
    FUNCTION FNC_LEE_DC1 () AS INTEGER
% END
             FIO_ACCI = FIO_DC1_INP

             RQA_TOT_RQAS = 0
             RQA_PRT_01 = 0
             RQA_PRT_02 = 1
             RQA_PRT_03 = 1
 CIC_LEE_DC1:
             I_B_STR = FIO_DC1_GETNXT{PAREN}
{COMENT}             BUFOUT = FNC_PRINT("DC1 LEIDO " + I_B_STR )

             IF FNC_SYSMID(I_B_STR , 7 , 1 ) = "*" THEN
                  GO TO CIC_LEE_DC1
             END IF
             IF FNC_SYSLEFT(I_B_STR , 8 ) = "ID_RQA =" THEN
                  RQA_TOT_RQAS = RQA_TOT_RQAS + 1
{COMENT}                  BUFOUT = FNC_PRINT("DC1 DETECTO RQA>> " + FNC_SYSSTR( RQA_TOT_RQAS ) )
                  RQA_PRT_01 = RQA_PRT_01 + 1
                  RQA_PRT_02 = 0
                  RQA_MATR_IDN(RQA_PRT_01) = FNC_SYSRIGHT(I_B_STR, 10) 
{COMENT}                  BUFOUT = FNC_PRINT("REQUEST AREA NO DEPURADA +" + RQA_MATR_IDN(RQA_PRT_01) + "+" )
                  RQA_MATR_IDN(RQA_PRT_01) = FNC_SYSEDIT(RQA_MATR_IDN(RQA_PRT_01) ,2)
{COMENT}                  BUFOUT = FNC_PRINT("REQUEST AREA    DEPURADA +" + RQA_MATR_IDN(RQA_PRT_01) + "+" )
                  GO TO CIC_LEE_DC1
             END IF

             IF FNC_SYSLEFT(I_B_STR , 8 ) = "ID_ELM =" THEN
                  RQA_PRT_02 = RQA_PRT_02 + 1

                  TOT_OCC_STR = FNC_SYSMID(I_B_STR, 17, 03 ) 
                  TOT_OCC_STR = FNC_SYSEDIT( TOT_OCC_STR , 2 ) 
{COMENT}                  BUFOUT = FNC_PRINT("TOTAL DE OCURRENCIAS +" + TOT_OCC_STR + "+" )
                  RQA_MATR_TOC(RQA_PRT_01, RQA_PRT_02) = FNC_SYSVAL( TOT_OCC_STR  ) 

                  RQA_MATR_EST(RQA_PRT_01,RQA_PRT_02) = FNC_SYSMID(I_B_STR, 20, 20 ) 
                  RQA_MATR_EST(RQA_PRT_01,RQA_PRT_02) = FNC_SYSEDIT( RQA_MATR_EST(RQA_PRT_01,RQA_PRT_02)  , 2)

                  FOR RQA_PRT_03 = 1 TO RQA_MATR_TOC(RQA_PRT_01, RQA_PRT_02)
                      RQA_MATR_OCC(RQA_PRT_01, RQA_PRT_02, RQA_PRT_03 ) = FNC_SYSMID(I_B_STR, 44 + ( RQA_PRT_03 - 1) * 24 , 24 ) 
{COMENT}                      BUFOUT = FNC_PRINT("APARICION SIN DEPURAR +" + RQA_MATR_OCC(RQA_PRT_01, RQA_PRT_02, RQA_PRT_03)  + "+" )
                      RQA_MATR_OCC(RQA_PRT_01, RQA_PRT_02, RQA_PRT_03 ) = FNC_SYSEDIT( RQA_MATR_OCC(RQA_PRT_01, RQA_PRT_02, RQA_PRT_03) , 2 )
{COMENT}                      BUFOUT = FNC_PRINT("APARICION     DEPURAD +" + RQA_MATR_OCC(RQA_PRT_01, RQA_PRT_02, RQA_PRT_03)  + "+" )
                  NEXT RQA_PRT_03

                  GO TO CIC_LEE_DC1
             END IF
             FIO_ACCI = FIO_DC1_CLOSE{PAREN}
   {END_DEF}

% IF GEN_VAX
   DEF INTEGER DSP_ERR
% ELSE
   FUNCTION DSP_ERR () AS INTEGER
% END

        AA_CPT_ALF = ""
        P_R = P_R - 1
        FOR ZZ_CPT_NUM = 1 TO P_R 
                AA_CPT_ALF = AA_CPT_ALF + " "
        NEXT ZZ_CPT_NUM
        BB_CPT_ALF = AA_CPT_ALF + "^"
        AA_CPT_ALF = AA_CPT_ALF + "|"
        BUFOUT = FNC_PRINT("ERROR DE ABORTO EN LINEA NRO: " + FNC_SYSSTR(TPG_TOT_LEI))
        BUFOUT = FNC_PRINT("EN COLUMNA                  : " + FNC_SYSSTR(P_Q))
        BUFOUT = FNC_PRINT(I_B_STR)
        BUFOUT = FNC_PRINT(BB_CPT_ALF)
        BUFOUT = FNC_PRINT(AA_CPT_ALF)
        BUFOUT = FNC_PRINT(AA_CPT_ALF)
        BUFOUT = FNC_PRINT(GLS_ERR)
        BUFOUT = FNC_PRINT("")
   {END_DEF}



% IF GEN_VAX
     DEF STRING FNC_SCAN_MTX
% ELSE
     FUNCTION FNC_SCAN_MTX () AS STRING
% END

{COMENT} DETECTA LAS RQAS USADAS POR PROCEDURE DIVISION
        IF PASO_EJEC = "DOC" THEN
             ACCION = FNC_GEN_DC1
        ELSE
             ACCION = FNC_LEE_DC1
             ACCION = FNC_LEE_REG

{COMENT} esta demas              FOR RQA_PRT_01 = 1 TO RQA_TOT_RQAS
{COMENT} esta demas                 PRT_DC1_RQA = "ID_RQA = " + RQA_MATR_IDN(RQA_PRT_01)
{COMENT} esta demas                 FIO_ACCI = FIO_DC1_PUT(FIO_STAT,PRT_DC1_RQA)
{COMENT} esta demas 
{COMENT} esta demas                 FOR RQA_PRT_02 = 1 TO DT2_TOT_EST
{COMENT} esta demas                      PRT_DC1_ELM = "ID_ELM = " +  DC1_VEC_DOC(RQA_PRT_02) + " " + FG_BAS_PADDING(RQA_MATR_EST(RQA_PRT_01,RQA_PRT_02) , 24, " ", "D")
{COMENT} esta demas                      PRT_DC1_OCC = ""
{COMENT} esta demas              BUFOUT = FNC_PRINT("    ELEMENTO ==>> " + FNC_SYSSTR(RQA_PRT_02) + "  " + RQA_MATR_EST(RQA_PRT_01, RQA_PRT_02 ) )
{COMENT} esta demas                      FOR RQA_PRT_03 = 1 TO RQA_MATR_TOC(RQA_PRT_01, RQA_PRT_02)
{COMENT} esta demas                          BUFOUT = FNC_PRINT("      OCURRENCIA ==>> " + FNC_SYSSTR(RQA_PRT_03) + "  " + RQA_MATR_OCC(RQA_PRT_01, RQA_PRT_02, RQA_PRT_03 ) )
{COMENT} esta demas                          PRT_DC1_OCC_AUX = RQA_MATR_OCC(RQA_PRT_01, RQA_PRT_02, RQA_PRT_03 ) 
{COMENT} esta demas                          PRT_DC1_OCC_AUX = FG_BAS_PADDING(PRT_DC1_OCC_AUX , 24, " ", "D")
{COMENT} esta demas 
{COMENT} esta demas                          PRT_DC1_OCC = PRT_DC1_OCC + PRT_DC1_OCC_AUX
{COMENT} esta demas                     
{COMENT} esta demas                      NEXT RQA_PRT_03
{COMENT} esta demas                      PRT_DC1_ELM = PRT_DC1_ELM + PRT_DC1_OCC
{COMENT} esta demas                      FIO_ACCI = FIO_DC1_PUT(FIO_STAT,PRT_DC1_ELM)
{COMENT} esta demas                 NEXT RQA_PRT_02
{COMENT} esta demas 
{COMENT} esta demas             NEXT RQA_PRT_01 
{COMENT} esta demas 

            FIO_ACCI = FIO_MTX_INP{PAREN}

{COMENT}            BUFOUT = FNC_PRINT("ABRIO NUEVAMENTE 3======================================================================")

            BUFOUT = FNC_GEN_PGO{PAREN}

            FIO_ACCI = ESCR_PGO(FIO_STAT, MAP_GLS_IDEN  +  " ==>> CONVERSION DTC TO DB2 - INI CAPSULAS " )
            FOR RQA_PRT_01 = 1 TO RQA_TOT_RQAS
                FIO_ACCI = ESCR_PGO(FIO_STAT," ")
                FIO_ACCI = ESCR_PGO(FIO_STAT,"       PGM-" + RQA_MATR_OCC(RQA_PRT_01, RQA_SIST , 1 ) + "-FIO-" + RQA_MATR_OCC(RQA_PRT_01, RQA_TABL , 1 ) +  " SECTION." )
                FIO_ACCI = ESCR_PGO(FIO_STAT,"       INI-PGM-" + RQA_MATR_OCC(RQA_PRT_01, RQA_SIST , 1 ) + "-FIO-" + RQA_MATR_OCC(RQA_PRT_01, RQA_TABL , 1 ) +  "." )
                FIO_ACCI = ESCR_PGO(FIO_STAT,"           MOVE " + "PGM-" + RQA_MATR_OCC(RQA_PRT_01, RQA_SIST , 1 ) + "-" + RQA_MATR_OCC(RQA_PRT_01, RQA_TABL , 1 ) + "-CMND TO FIO-CMND.")
                FIO_ACCI = ESCR_PGO(FIO_STAT,"           PERFORM " + RQA_MATR_OCC(RQA_PRT_01, RQA_SIST , 1 ) + "-FIO-" + RQA_MATR_OCC(RQA_PRT_01, RQA_TABL , 1 ) +  "." )
                FIO_ACCI = ESCR_PGO(FIO_STAT,"           MOVE FIO-STAT TO PGM-" + RQA_MATR_OCC(RQA_PRT_01 , RQA_SIST , 1 ) + "-" + RQA_MATR_OCC(RQA_PRT_01 , RQA_TABL , 1 ) + "-STAT.")
                FIO_ACCI = ESCR_PGO(FIO_STAT,"       FIN-PGM-" + RQA_MATR_OCC(RQA_PRT_01, RQA_SIST , 1 ) + "-FIO-" + RQA_MATR_OCC(RQA_PRT_01, RQA_TABL , 1 ) +  "." )
                FIO_ACCI = ESCR_PGO(FIO_STAT,"           EXIT.")
                FIO_ACCI = ESCR_PGO(FIO_STAT,"       COPY " + RQA_MATR_OCC(RQA_PRT_01, RQA_SIST , 1 ) + "BF" + RQA_MATR_OCC(RQA_PRT_01, RQA_TABL , 1 ) +  "." )
            NEXT RQA_PRT_01
            FIO_ACCI = ESCR_PGO(FIO_STAT,"       COPY GNSBGDTC.")
            FIO_ACCI = ESCR_PGO(FIO_STAT, MAP_GLS_IDEN  +  " ==>> CONVERSION DTC TO DB2 - FIN CAPSULAS " )

{COMENT}            BUFOUT = FNC_PRINT("CERRARA MTX 3 ")
            FIO_ACCI = FIO_MTX_CLOSE{PAREN}
            FIO_ACCI = FIO_DCG_CLOSE{PAREN}
            FIO_ACCI = FIO_PGO_CLOSE{PAREN}
        END IF

   {END_DEF}



{COMENT}------------------------------------------------------------------
{COMENT}              MODULO PRINCIPAL
{COMENT}__________________________________________________________________
% IF GEN_VAX
        ON ERROR GO TO  LABE_BADD
% ELSE
        SUB MAIN()
             GLDIRARCH = FG_BAS_GETSYSINI("GENMTX","PATH")
             ON ERROR {GO_TO} LABE_BADD
             GLDIRARCH = FG_BAS_GETSYSINI("GENMTX","PATH")
             IF TRIM(GLDIRARCH) = "" THEN
                MSGBOX "NO SE HA INGRESADO EL PATH DE LOS ARCHIVOS A BUSCAR"
                END
              END IF
% END

            BUFOUT = FNC_PRINT(" INICIO DE PROCESO " + FNC_SYSTIME(0%) )

            ACCION = INIC_IALI{PAREN}

{COMENT}            BUFOUT = FNC_PRINT(" ANTES DE SCAN POR PRIEMRA VEZ ")
            BUFOUT = FNC_SCAN_MTX{PAREN}
{COMENT}            BUFOUT = FNC_PRINT(" DESPUES DE SCAN POR PRIEMRA VEZ ")
            BUFOUT = FNC_PRINT(" FIN    DE PROCESO " + FNC_SYSTIME(0%) )
            BUFOUT = FNC_PRINT(" # REG PROCESADOS  " + FNC_SYSSTR(TPG_TOT_LEI) )

% IF GEN_VAX
        GO TO LABE_ATRA
 LABE_BADD:
        RESUME 999
  999
 LABE_ATRA:

 END
% ELSE
        {GO_TO} LABE_ATRA
 LABE_BADD:
        RESUME NEXT
  999
 LABE_ATRA:

   END
 END SUB
% END
