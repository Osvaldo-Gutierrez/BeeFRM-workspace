050
 !!!    TPG_TOT_HST ES EL NUMERO DE HST ESPECIFICADOS
 !!!	TPG_MAT_HST_NUM(I% , CTE_IDX_TCF) TOTAL DE CAMPOS PARA HST I%
 !!!	TPG_MAT_HST_NUM(I% , CTE_IDX_TSF) TOTAL DE SRV PARA HST I%
 !!!	TPG_MAT_NAMEFLDHST(I% , J%)       NOMBRE DEL CAMPO J% DENTRO DEL HST I%
 !!!	TPG_MAT_IDENFLDHST(I% , J%)       IDENTIFICACION(COMENTARIO) DEL CAMPO J% DENTRO DEL HST I%
 !!!	TPG_MAT_LRG(I% , J%)              LARGO DEL CAMPO J% DENTRO DEL HST I%
 !!!	TPG_MAT_TOTOCCFLDHST(I%, J% )     TOTAL DE OCURRENCIAS DEL CAMPO J% DENTRO DEL HST I%
 !!!	TPG_MAT_NCP_SRV(I% , J%)          NUMERO DE CAMPOS DEL SRV J% PARA HST I%
 !!!    TPG_MAT_NAMEFLDSRV(I%, J%, K% )   NOMBRE DE LOS CAMPOS  K%  PARA HST  I%  SRV  J%
 !!!    TPG_MAT_TOTOCCFLDSRV(I%, J%, K% )  ES EL N° DE OCURRENCIAS DEL CAMPOS  K%  PARA HST  I%  SRV  J%

 !!!       *********  GENERACION DE SERVERS AUTOMATICOS ********
 !!!	901	IKY			"INSTANCIA DE LLAVES EN ING"
 !!!	902     STAT-MSG
 !!!	903	FLD + IKY		"INSTANCIA DE CAMPOS EN ING Y MOD"
 !!!	904	FLD + MKY + AKY + IKY   "DATOS DE RESPUESTAS DE CON      "
 !!!	905	IKY + MKY + AKY		"INSTANCIA DE LLAVES EN CON, MOD, ELI "
 !!!    907	""			"INSTANCIA DE ENTER SIN DATOS ELI"

100
	DECLARE INTEGER NUMTOKEN,	SC_NUMTOKEN	,&
			SZTOKEN	, 	SC_SZTOKEN	,&
			TOKEN	,	SC_TOKEN 	,&
			P_P	,	SC_P_P		,&
			P_Q	,	SC_P_Q 		,&
			SZ_I_B  ,       KK              ,&
			LL      ,       bb              ,&
			PONRT   ,       SEMSUM          ,&
			SM	,	DL		,&
			FIL_HST ,       COL_HST		,&
			FIL_CAM ,       COL_CAM		,&
			FIL_NCF ,	COL_NCF		,&
			FIL_LRG ,	COL_LRG  	,&
			FIL_IDX ,	TPG_TOT_LEI     ,&
			TPG_POS_REQ ,   NUM_TRN  

	DECLARE	STRING	C_Q	,	SC_C_Q		,&
			VALTOKEN,	SC_VALTOKEN	,&
			STRTOKEN,        ULT_SEC        ,&
			ANTERIOR,        NEW_PAG 	,&
			ANTE	,	 GLS_ERR	,&
			WSS_DSPLINETOK,	WSS_DSPPASO     ,&
			WSS_GENDFI,     WSS_GENDFO

	DECLARE STRING	CONSTANT &
			WSS_DSP00 = 'N'			,&
			WSS_DSP01 = 'N'			,&
			WSS_DSP04 = 'N'			

	DECLARE INTEGER	CONSTANT &
			KEYTOK = 1,	IDNTOK = 2	,&
			NUMTOK = 3,	STRTOK = 4	,&
			CHRTOK = 5,	EOLTOK = 6	,&
			ETXTOK = 7,	HTAB   = 9	,&
			TPGTOK = 10,	CTE_IDX_TCF = 1 ,&
			CTE_IDX_TSF = 2			,&
			CTE_IDX_NOM = 1			,&
			CTE_IDX_SIS = 2			,&
			CTE_IDX_SIM = 3			,&
			CTE_TRN_FRM = 1 ,&
			CTE_TRN_CMN = 2, CTE_TRN_CPP = 3 ,&
			CTE_TRN_SPP = 4, CTE_TRN_PGM = 5 ,&
			CTE_TRN_SUB = 6 , CTE_TRN_INS =  7 ,&
			CTE_TRN_INM = 8 , CTE_TRN_FIN =  9 ,&
			CTE_TRN_FOU = 10 , CTE_TRN_CMT = 11 ,&
			CTE_TRN_IDX = 12 ,&
			MG_0  = 1	,&
			MG_7  = 2	,&
			MG_8  = 3	,&
			MG_12 = 4	,&
			MG_16 = 5	,&
			MG_20 = 6	,&
			MG_24 = 7	,&
			MG_28 = 8	,&
			NIV_01 = MG_8	,&
			NIV_03 = MG_12	,&
			NIV_05 = MG_16	,&
			NIV_07 = MG_20	,&
			NIV_09 = MG_24	,&
			NIV_11 = MG_28	,&
			TOT_PASOS = 8
	

200
	DECLARE INTEGER C_FILE_STX,	C_FILE_PD1	,&
			C_FILE_PD2,	C_FILE_PD3	,&
			C_FILE_WS1,	C_FILE_WS3	,&
			C_FILE_PI1,	C_FILE_WS2	,&
			C_FILE_DFO,	C_FILE_DFI	,&
			C_FILE_RO,	C_FILE_RN

	DECLARE INTEGER  RE


	DECLARE INTEGER ACCION		,&
			FST_WSS				,&
			TPG_TOT_HST,    TPG_TOT_REQ ,&
			TPG_TOT_TRN, TPG_CON_TRN  ,&
			NIV_MRG(9)

	DECLARE INTEGER	FIL_OCUP(24) ,&
			TPG_MAT_HST_NUM(25,2) ,&
			TPG_MAT_LRG(25,175)   , TPG_MAT_NCP_SRV(25,30) ,&
			TPG_VEC_NUM_TRN(70) ,&
			TPG_MAT_PTFIDX(25,30) ,&
			TPG_MAT_TXFIDX(70,30) ,&
			TPG_MAT_XTFIDX(25,30) ,&
			TPG_MAT_CAM_PT(70) , TPG_MAT_CAM_TX(70) ,&
			TPG_MAT_CAM_TP(70) , TPG_MAT_CAM_XT(70) ,&
			TPG_MAT_TOTOCCFLDHST(25,175)	,&
			TPG_MAT_TOTOCCFLDSRV(25,30,175)	
	
	DECLARE INTEGER TPG_MAT_NIV_IDPT(70,20,2) , TPG_MAT_NIV_IDXT(70,20,2) ,&
			TPG_MAT_NIV_IDTX(70,20,2) , TPG_MAT_NIV_IDTP(70,20,2)
			
	DECLARE INTEGER SEM           , AUX           ,&
			CAMP          ,&
			LINEA         ,&
			QQ          

	DECLARE STRING	FILE_STX,	FILE_PD1	,&
			FILE_PD2,	FILE_PD3	,&
			FILE_WS1,	FILE_WS3	,&
			FILE_PI1,	FILE_WS2	,&
			FILE_DFI,	FILE_DFO	,&
			FILE_RO,	FILE_RN	,&
			NIV_PIC(9),	NIV_SEP(9)	,&
			TPG_MAT_IDENFLDHST(25 , 175 ) 

	COM STRING 	TPG_MAT_TPFRM(70,30) , TPG_MAT_PTFMT(70,30) ,&
			TPG_MAT_TRN(70,10,12) ,&
			TPG_MAT_TXFMT(70,30) , TPG_MAT_XTFMT(70,30) ,&
                        TPG_MAT_IDT_FLD(25,175) ,&
			TPG_MAT_NAMEFLDSRV(25,17,175) 
                         

	DECLARE	STRING  O_L		,&
			EXTERNO,&
			VARI_ABPA,	VARI_CIPA	,&
			BUFOUT		,&
			RPT_GLS_PRY	,&
			MAP_GLS_CMP,&
			V_M(9)	,&
			RPT_GLS_SRT,	RPT_GLS_FOR	,&
			MAP_GLS_IDEN,	RPT_GLS_PAI	,&
			RPT_GLS_CLI  ,  VARI            ,&
			TPG_MAT_HST_ALF(25,3) ,&
			TPG_MAT_SRV_ALF(25,30) ,&
			TPG_MAT_TRN_PGM(200,11) ,&
			TPG_VEC_REQ(70) , TAB_GLS_DESC(10)  ,&
			TPG_MAT_PTFRM(70,30) ,&
			TPG_MAT_TXFRM(70,30) ,&
			TPG_MAT_XTFRM(70,30) ,&
			TPG_MAT_TPFMT(70,30) , V_MES(12,2) ,&
			TPG_VEC_SIST(30) ,&
			TPG_MAT_NAMEFLDHST(25 , 175 )



	DECLARE INTEGER	CONSTANT &
			ZI	  = 1,	NO	  =  0	,&
			NEXT_PAGE = 2,	VALO_FOUT = 60	,&
			LINE_USED = 1   

 !==========================================================================


 !==========================================================================

    DEF STRING ESCR_PD1 (INTEGER MARGEN,STRING BUFOUT)
         REG_1$ = ""
         REG_2$ = ""
 	BUFOUT = V_M(MARGEN) + BUFOUT
         IF LEN(BUFOUT) > 72 THEN
             GEN_I% = 1
             GEN_J% = 3
             WHILE MID$(BUFOUT,GEN_I%,4) <> " TO " AND &
                   GEN_I% < LEN(BUFOUT) 
                      GEN_I% = GEN_I% + 1
             NEXT
             IF GEN_I% > 72 THEN
                 GEN_I% = 71
                 GEN_J% = 0
                 WHILE MID$(BUFOUT,GEN_I%,1) <> " "
                      GEN_I% = GEN_I% - 1
                 NEXT
             END IF
             REG_1$ = LEFT$(BUFOUT,GEN_I% + GEN_J%)
             REG_2$ = V_M(MG_16) + " " + RIGHT$(BUFOUT,GEN_I% + 1 + GEN_J%)
         ELSE
            REG_1$ = BUFOUT
         END IF

	REG_1$ = EDIT$(REG_1$, 128%)
 	PRINT #C_FILE_PD1, REG_1$
	IF REG_2$ > "" THEN
		REG_2$ = EDIT$(REG_2$, 128%)
	 	PRINT #C_FILE_PD1, REG_2$
	END IF
    END DEF

 !==========================================================================

    DEF STRING ESCR_PD2 (INTEGER MARGEN,STRING BUFOUT)
         REG_1$ = ""
         REG_2$ = ""
 	BUFOUT = V_M(MARGEN) + BUFOUT
         IF LEN(BUFOUT) > 72 THEN
             GEN_I% = 1
             GEN_J% = 3
             WHILE MID$(BUFOUT,GEN_I%,4) <> " TO " AND &
                   GEN_I% < LEN(BUFOUT) 
                      GEN_I% = GEN_I% + 1
             NEXT
             IF GEN_I% > 72 THEN
                 GEN_I% = 71
                 GEN_J% = 0
                 WHILE MID$(BUFOUT,GEN_I%,1) <> " "
                      GEN_I% = GEN_I% - 1
                 NEXT
             END IF
             REG_1$ = LEFT$(BUFOUT,GEN_I% + GEN_J%)
             REG_2$ = V_M(MG_16) + " " + RIGHT$(BUFOUT,GEN_I% + 1 + GEN_J%)
         ELSE
            REG_1$ = BUFOUT
         END IF

	REG_1$ = EDIT$(REG_1$, 128%)
 	PRINT #C_FILE_PD2, REG_1$
	IF REG_2$ > "" THEN
		REG_2$ = EDIT$(REG_2$, 128%)
	 	PRINT #C_FILE_PD2, REG_2$
	END IF
    END DEF

 !==========================================================================

    DEF STRING ESCR_PD3 (INTEGER MARGEN,STRING BUFOUT)
         REG_1$ = ""
         REG_2$ = ""
 	BUFOUT = V_M(MARGEN) + BUFOUT
         IF LEN(BUFOUT) > 72 THEN
             GEN_I% = 1
             GEN_J% = 3
             WHILE MID$(BUFOUT,GEN_I%,4) <> " TO " AND &
                   GEN_I% < LEN(BUFOUT) 
                      GEN_I% = GEN_I% + 1
             NEXT
             IF GEN_I% > 72 THEN
                 GEN_I% = 71
                 GEN_J% = 0
                 WHILE MID$(BUFOUT,GEN_I%,1) <> " "
                      GEN_I% = GEN_I% - 1
                 NEXT
             END IF
             REG_1$ = LEFT$(BUFOUT,GEN_I% + GEN_J%)
             REG_2$ = V_M(MG_16) + " " + RIGHT$(BUFOUT,GEN_I% + 1 + GEN_J%)
         ELSE
            REG_1$ = BUFOUT
         END IF

	REG_1$ = EDIT$(REG_1$, 128%)
 	PRINT #C_FILE_PD3, REG_1$
	IF REG_2$ > "" THEN
		REG_2$ = EDIT$(REG_2$, 128%)
	 	PRINT #C_FILE_PD3, REG_2$
	END IF
    END DEF

 !==========================================================================

    DEF STRING ESCR_WS1 (INTEGER MARGEN, STRING BUFOUT)
 	PRINT #C_FILE_WS1, V_M(MARGEN) + BUFOUT
    END DEF

    DEF STRING ESCR_WS2 (INTEGER MARGEN, STRING BUFOUT)
 	PRINT #C_FILE_WS2, V_M(MARGEN) + BUFOUT
    END DEF

    DEF STRING ESCR_WS3 (INTEGER MARGEN, STRING BUFOUT)
 	PRINT #C_FILE_WS3, V_M(MARGEN) + BUFOUT
    END DEF

    DEF STRING ESCR_DFI (INTEGER MARGEN, STRING BUFOUT)
	IF WSS_GENDFI = "S" THEN
	 	PRINT #C_FILE_DFI, V_M(MARGEN) + BUFOUT
	END IF
    END DEF

    DEF STRING ESCR_DFO (INTEGER MARGEN, STRING BUFOUT)
	IF WSS_GENDFO = "S" THEN
	 	PRINT #C_FILE_DFO, V_M(MARGEN) + BUFOUT
	END IF
    END DEF

 !==========================================================================

    DEF STRING ESCR_PI1 (INTEGER MARGEN, STRING BUFOUT)
 	PRINT #C_FILE_PI1, V_M(MARGEN) + BUFOUT
    END DEF

 !=====================================================================

    DEF INTEGER NEXTTOKEN
	ON ERROR GO TO LABE_ERRO
	IF TOKEN = ETXTOK THEN
		NEXTTOKEN = ETXTOK
		GO TO LABE_ASIG
	END IF
        P_P = P_Q 
 LABE_SIGA:
	WHILE (MID$(I_B$,P_P,1) = " " OR MID$(I_B$,P_P,1) = "	") AND &
			P_P <= SZ_I_B
		P_P = P_P + 1
	NEXT
	P_Q = P_P 
	IF P_P > SZ_I_B OR I_B$ = "" OR MID$(I_B$,P_P,1) = "!" THEN
		TPG_TOT_LEI = TPG_TOT_LEI + 1
		GET #C_FILE_STX
		SZ_I_B = RECOUNT
	     	MOVE FROM #C_FILE_STX , I_B$ = SZ_I_B
		P_P, P_Q  = 1
		IF WSS_DSPLINETOK = 'S' THEN
			PRINT "PROC REG " ; TPG_TOT_LEI ; " #"; I_B$
		END IF
		GO TO LABE_SIGA
	END IF
	C_Q = MID$(I_B$,P_Q,1)
	IF (C_Q >= "A" AND C_Q <= "Z") OR (C_Q >= "a" AND C_Q <= "z") THEN
	         WHILE ( ( MID$(I_B$,P_P,1) >= "A" AND &
			   MID$(I_B$,P_P,1) <= "Z" &
			 ) &
	            OR   ( MID$(I_B$,P_P,1)  = "-" 	  &
			 ) &
		    OR   ( MID$(I_B$,P_P,1) >= "a" AND &
		          MID$(I_B$,P_P,1) <= "z"  &
			 ) &
		    OR   ( MID$(I_B$,P_P,1) >= "0" AND &
		          MID$(I_B$,P_P,1) <= "9" &
			 ) &
		       )
	            			P_P = P_P + 1
		 NEXT
	         SZTOKEN = P_P - P_Q
		 NEXTTOKEN = IDNTOK
	   	 VALTOKEN = MID$(I_B$,P_Q,SZTOKEN)
	ELSE
	IF C_Q >= "0" AND C_Q <= "9" THEN
	          WHILE MID$(I_B$,P_P,1) >= "0" AND MID$(I_B$,P_P,1) <= "9"
		             P_P = P_P + 1
	          NEXT
	          SZTOKEN = P_P - P_Q
		  NEXTTOKEN = NUMTOK
		  VALTOKEN = MID$(I_B$,P_Q,SZTOKEN)
	          NUMTOKEN  = VAL(VALTOKEN)
	ELSE
	IF C_Q = '"'  OR C_Q = "'" THEN
		P_P = P_P + 1
	        WHILE MID$(I_B$,P_P,1) <> C_Q
  	              P_P = P_P + 1
	        NEXT
	        SZTOKEN = P_P - (P_Q + 1)
	        P_P = P_P + 1
		NEXTTOKEN = STRTOK
		STRTOKEN = MID$(I_B$,P_Q + 1,SZTOKEN)
		VALTOKEN = C_Q + STRTOKEN + C_Q
	ELSE
		IF C_Q = '$'  AND MID$(I_B$,P_P + 1 ,1) = "_" THEN
  			 P_P = P_P + 2
		         WHILE (MID$(I_B$,P_P,1) >= "A" AND MID$(I_B$,P_P,1) <= "Z" &
		            OR  MID$(I_B$,P_P,1)  = "_" 	  &
			    OR  MID$(I_B$,P_P,1) >= "a" AND &
			        MID$(I_B$,P_P,1) <= "z")
		            			P_P = P_P + 1
			 NEXT
		         SZTOKEN = P_P - P_Q
			 NEXTTOKEN = TPGTOK
		   	 VALTOKEN = MID$(I_B$,P_Q,SZTOKEN)
		ELSE
			NEXTTOKEN = CHRTOK
			VALTOKEN = MID$(I_B$,P_P,1)
			P_P = P_P + 1
			SZTOKEN = 1
		END IF
	END IF
	END IF
        END IF


	GO TO LABE_ASIG
 LABE_ERRO:
	IF ERR = 11 THEN
		NEXTTOKEN = ETXTOK
	ELSE
		PRINT "ERROR(";ERR;") ";ERT$(ERR);" en linea ";erl;", MODULO ";ern$
	END IF
	RESUME 800
 LABE_ASIG:
	P_Q = P_P
800
	END DEF

 !==========================================================================

 !=================================================================

 DEF INTEGER INI_MATR2


	PASO% = PASO% + 1
	IF WSS_DSPPASO = 'S' THEN
		PRINT " INICIO           PASO " ; PASO% ; "/" ; TOT_PASOS ; " INICIALIZANDO"
	END IF
	V_MES(1,1) = "JAN"
	V_MES(1,2) = "01"
	V_MES(2,1) = "FEB"
	V_MES(2,2) = "02"
	V_MES(3,1) = "MAR"
	V_MES(3,2) = "03"
	V_MES(4,1) = "APR"
	V_MES(4,2) = "04"
	V_MES(5,1) = "MAY"
	V_MES(5,2) = "05"
	V_MES(6,1) = "JUN"
	V_MES(6,2) = "06"
	V_MES(7,1) = "JUL"
	V_MES(7,2) = "07"
	V_MES(8,1) = "AUG"
	V_MES(8,2) = "08"
	V_MES(9,1) = "SEP"
	V_MES(9,2) = "09"
	V_MES(10,1) = "OCT"
	V_MES(10,2) = "10"
	V_MES(11,1) = "NOV"
	V_MES(11,2) = "11"
	V_MES(12,1) = "DEC"
	V_MES(12,2) = "12"
	FOR I% = 1 TO 70
		FOR J% = 1 TO 10
			TPG_MAT_TRN(I%,J%, CTE_TRN_FRM) = '   '
			TPG_MAT_TRN(I%,J%, CTE_TRN_CMN) = '   '
			TPG_MAT_TRN(I%,J%, CTE_TRN_CPP) = '   '
			TPG_MAT_TRN(I%,J%, CTE_TRN_SPP) = ' '
			TPG_MAT_TRN(I%,J%, CTE_TRN_PGM) = '        '
			TPG_MAT_TRN(I%,J%, CTE_TRN_SUB) = '        '
			TPG_MAT_TRN(I%,J%, CTE_TRN_INS) = '   '
			TPG_MAT_TRN(I%,J%, CTE_TRN_INM) = '   '
			TPG_MAT_TRN(I%,J%, CTE_TRN_FIN) = '   '
			TPG_MAT_TRN(I%,J%, CTE_TRN_FOU) = '   '
			TPG_MAT_TRN(I%,J%, CTE_TRN_CMT) = ''
			TPG_MAT_TRN(I%,J%, CTE_TRN_IDX) = ''
		NEXT J%
	NEXT I%

 !!!	FOR I% = 1 TO 25 
 !!!		FOR j% = 1 TO 2 
 !!!			TPG_MAT_HST_NUM(I% , J%) = 0
 !!!			TPG_MAT_HST_ALF(I% , J%) = " "
 !!!		NEXT J%
 !!!	NEXT I%
 	FOR I% = 1 TO 25
    		FOR j% = 1 TO 175
 !!!  			TPG_MAT_LRG(I% , J%) = 0
 !!! 			TPG_MAT_NAMEFLDHST(I% , J%) = " "
  			TPG_MAT_IDENFLDHST(I% , J%) = ""
 !!!  			TPG_MAT_TOTOCCFLDHST(I%, J% ) = 1
  		NEXT J%
  	NEXT I%
 !!! 	FOR I% = 1 TO 20
 !!! 		FOR J% = 1 TO 30
 !!! 			FOR K% = 1 TO 120
 !!! 				TPG_MAT_TOTOCCFLDSRV(I%, J%, K% ) = 1
 !!! 			NEXT K%
 !!! 		NEXT J%
 !!! 	NEXT I%
 !!!	FOR I% = 1 TO 25
 !!!		FOR j% = 1 TO 20
 !!!			TPG_MAT_SRV_ALF(I% , J%) = " "
 !!!			TPG_MAT_NCP_SRV(I% , J%) = 0
 !!!		NEXT J%
 !!!		FOR j% = 21 TO 30
 !!!			TPG_MAT_NCP_SRV(I% , J%) = 0
 !!!		NEXT J%
 !!!	NEXT I%
	IF WSS_DSPPASO = 'S' THEN
	 	PRINT " FIN              PASO " ; PASO% ; "/" ; TOT_PASOS ; " INICIALIZANDO"
	END IF
 
 END DEF

 !==================================================================

   DEF INTEGER INIC_IALI

	NIV_PIC (NIV_01) = "01  "
	NIV_PIC (NIV_03) = "03  "
	NIV_PIC (NIV_05) = "05  "
	NIV_PIC (NIV_07) = "07  "
	NIV_PIC (NIV_09) = "09  "
	NIV_PIC (NIV_11) = "11  "
	
	NIV_SEP (NIV_01) = "    	      "
	NIV_SEP (NIV_03) = "               "
	NIV_SEP (NIV_05) = "            "
	NIV_SEP (NIV_07) = "         "
	NIV_SEP (NIV_09) = "      "
	NIV_SEP (NIV_11) = "   "

	NIV_MRG (NIV_01) = MG_8
	NIV_MRG (NIV_03) = MG_12
	NIV_MRG (NIV_05) = MG_16
	NIV_MRG (NIV_07) = MG_20
	NIV_MRG (NIV_09) = MG_24
	NIV_MRG (NIV_11) = MG_28

	C_FILE_STX = 1
	C_FILE_PD1 = 2
	C_FILE_PD2 = 3
	C_FILE_PD3 = 4
	C_FILE_WS1 = 5
	C_FILE_WS2 = 6
	C_FILE_WS3 = 7
	C_FILE_PI1 = 8
	C_FILE_DFI = 9
	C_FILE_DFO = 10
	C_FILE_RO = 11
	C_FILE_RN = 12
	FST_WSS = NO
	V_M(MG_0)  = ""
	V_M(MG_7)  = "      *"
	V_M(MG_8)  = "       "
	V_M(MG_12) = "           "
	V_M(MG_16) = "               "
	V_M(MG_20) = "                   "
	V_M(MG_24) = "                       "
	V_M(MG_28) = "                           "
	O_L  = CHR$(13) + CHR$(10)
	P_P,P_Q = 1
	
 !!!    TPG$TKN   PARAMETRO PARA ACTIVACION DE DESPPLIEGE DE VARIABLES TOKEN
 	CALL LIB$GET_SYMBOL("TPG$TKN",WSS_DSPLINETOK)
 !!!    TPG$DPP   PARAMETRO PARA LA ACTIVACION DE PASOS DE GENERACION   
	CALL LIB$GET_SYMBOL("TPG$DPP",WSS_DSPPASO)
 !!!    WSS_TPG$DFI  PARAMETRO PARA LA ACTIVACION DE GENERACION DE ARCHIVO DFI
	CALL LIB$GET_SYMBOL("TPG$DFI",WSS_GENDFI)
 !!!    WSS_TPG$DFO  PARAMETRO PARA LA ACTIVACION DE GENERACION DE ARCHIVO DFO
	CALL LIB$GET_SYMBOL("TPG$DFO",WSS_GENDFO)

 	CALL LIB$GET_SYMBOL("GNS$PRY",RPT_GLS_PRY)
 	CALL LIB$GET_SYMBOL("GNS$FIL",EXTERNO)

 	CALL LIB$GET_SYMBOL("PTH",FILE_STX)
 	CALL LIB$GET_SYMBOL("GNS$SOP",RPT_GLS_FOR)
 	CALL LIB$GET_SYMBOL("GNS$PAI",RPT_GLS_PAI)
 	CALL LIB$GET_SYMBOL("GNS$CLI",RPT_GLS_CLI)

	MAP_GLS_IDEN = DATE$(0%) + " " + TIME$(0%) + "     ,PAI=" + RPT_GLS_PAI + " ,CLI=" + RPT_GLS_CLI + " ,SOP=" + RPT_GLS_FOR
	MAP_GLS_IDEN = "      *    " + EDIT$(MAP_GLS_IDEN,32)

	OPEN FILE_STX FOR INPUT AS FILE #C_FILE_STX ,RECORDSIZE 255,	&
		ORGANIZATION SEQUENTIAL VARIABLE    ,RECORDTYPE ANY

	TPG_TOT_LEI = TPG_TOT_LEI + 1
	GET #C_FILE_STX
	SZ_I_B  = RECOUNT
	MOVE FROM #C_FILE_STX , I_B$ = SZ_I_B
	IF WSS_DSPLINETOK = 'S' THEN
		PRINT "PROC REG " ; TPG_TOT_LEI ; " #"; I_B$
	END IF

	FILE_PD1 = EXTERNO + "MX" + "PD1.TXT"
	FILE_PD2 = EXTERNO + "MX" + "PD2.TXT"
	FILE_PD3 = EXTERNO + "MX" + "PD3.TXT"
	FILE_WS1 = EXTERNO + "MX" + "WS1.TXT"
	FILE_WS2 = EXTERNO + "MX" + "WS2.TXT"
	FILE_WS3 = EXTERNO + "MX" + "WS3.TXT"
	FILE_PI1 = EXTERNO + "MX" + "PI1.TXT"

 	FILE_DFI  = EXTERNO + "MX" + "DFI.TXT"

	FILE_DFO = EXTERNO + "MX" + "DFO.TXT"
	FILE_RO = RPT_GLS_PRY + "RO" + EXTERNO + ".SRT"
	FILE_RN = RPT_GLS_PRY + "RN" + EXTERNO + ".TXT"

 	OPEN FILE_PD1 FOR OUTPUT AS FILE #C_FILE_PD1, RECORDTYPE ANY,	&
 	     ORGANIZATION    SEQUENTIAL	    VARIABLE, RECORDSIZE 255
  	PRINT #C_FILE_PD1,MAP_GLS_IDEN


 	OPEN FILE_PD2 FOR OUTPUT AS FILE #C_FILE_PD2, RECORDTYPE ANY,	&
 	     ORGANIZATION    SEQUENTIAL	    VARIABLE, RECORDSIZE 255
  	PRINT #C_FILE_PD2,MAP_GLS_IDEN

 		OPEN FILE_PD3 FOR OUTPUT AS FILE #C_FILE_PD3, RECORDTYPE ANY,&
 		ORGANIZATION    SEQUENTIAL	    VARIABLE, RECORDSIZE 255
  		PRINT #C_FILE_PD3,MAP_GLS_IDEN

 !!! 		OPEN FILE_RD FOR OUTPUT AS FILE #C_FILE_RD, RECORDTYPE ANY,&
 !!! 		ORGANIZATION    SEQUENTIAL	    VARIABLE, RECORDSIZE 255
 !!! 		PRINT #C_FILE_RD,MAP_GLS_IDEN

	IF WSS_GENDFO = "S" THEN
  		OPEN FILE_DFO FOR OUTPUT AS FILE #C_FILE_DFO, RECORDTYPE ANY,&
  		ORGANIZATION    SEQUENTIAL	    VARIABLE, RECORDSIZE 255
  		PRINT #C_FILE_DFO,MAP_GLS_IDEN
	END IF

	IF WSS_GENDFI = "S" THEN
	 	OPEN FILE_DFI FOR OUTPUT AS FILE #C_FILE_DFI, RECORDTYPE ANY,	&
 		     ORGANIZATION    SEQUENTIAL	    VARIABLE, RECORDSIZE 255
 	 	PRINT #C_FILE_DFI,MAP_GLS_IDEN
	END IF
 
	OPEN FILE_WS1 FOR OUTPUT AS FILE #C_FILE_WS1, RECORDTYPE ANY,	&
	     ORGANIZATION    SEQUENTIAL	    VARIABLE, RECORDSIZE 255
 	PRINT #C_FILE_WS1,MAP_GLS_IDEN

 	OPEN FILE_WS3 FOR OUTPUT AS FILE #C_FILE_WS3, RECORDTYPE ANY,	&
 	     ORGANIZATION    SEQUENTIAL	    VARIABLE, RECORDSIZE 255
  	PRINT #C_FILE_WS3,MAP_GLS_IDEN


 	OPEN FILE_WS2 FOR OUTPUT AS FILE #C_FILE_WS2, RECORDTYPE ANY,	&
 	     ORGANIZATION    SEQUENTIAL	    VARIABLE, RECORDSIZE 255
  	PRINT #C_FILE_WS2,MAP_GLS_IDEN


	OPEN FILE_PI1 FOR OUTPUT AS FILE #C_FILE_PI1, RECORDTYPE ANY,	&
	     ORGANIZATION    SEQUENTIAL	    VARIABLE, RECORDSIZE 255
 	PRINT #C_FILE_PI1,MAP_GLS_IDEN

 !!!	OPEN FILE_RO FOR OUTPUT AS FILE #C_FILE_RO, RECORDTYPE ANY,	&
 !!!	     ORGANIZATION    SEQUENTIAL	    VARIABLE, RECORDSIZE 255
 !!! 	PRINT #C_FILE_RO,MAP_GLS_IDEN

 !!!	OPEN FILE_RN FOR OUTPUT AS FILE #C_FILE_RN, RECORDTYPE ANY,	&
 !!!	     ORGANIZATION    SEQUENTIAL	    VARIABLE, RECORDSIZE 255
 !!! 	PRINT #C_FILE_RN,MAP_GLS_IDEN
   END DEF

 !================================================================


 !!! FUNCION QUE BUSCA UN CAMPO SERVER OCURRENCIAS ANTERIORES
 !!! DE SRV PARA DETECTAR CAMPOS INDEXADOS
   DEF INTEGER TPG_FNC_BCS
	IDX% = 0
	OCC_SRV% = 0
	FOR TT% = 1 TO TPG_MAT_HST_NUM(II%, CTE_IDX_TCF)
		IF AA$ = TPG_MAT_NAMEFLDHST(II%, TT%) THEN
			OCC_SRV% = OCC_SRV% + 1
			IF OCC_SRV% = CONT_SRV% THEN
				IDX% = TT%
				TT% = TPG_MAT_HST_NUM(II%, CTE_IDX_TCF) + 1
			END IF
		END IF
	NEXT TT%
   END DEF


   DEF INTEGER DSP_ERR

	AA$ = ""
	FOR ZZ% = 1 TO P_Q
		AA$ = AA$ + " "
	NEXT ZZ%
	AA$ = AA$ + "*"
	PRINT "ERROR DE ABORTO EN LINEA NRO: " ; TPG_TOT_LEI
	PRINT I_B$
	PRINT AA$
	PRINT GLS_ERR
	PRINT ""
   END DEF


   DEF INTEGER TPG_FNC_ATR_FLD_IDX_HST
 !!!	**comentario**			" TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TCF ) = num de campos hst "
	TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TCF ) = TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TCF ) + 1
	IF WSS_DSP00 = 'S' THEN
		PRINT "TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TCF) " ; TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TCF)
		PRINT " VALTOKEN " ; VALTOKEN
	END IF
 !!!	**comentario**		" TPG_MAT_NAMEFLDHST(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST ,CTE_IDX_TCF ) ) = nombre campos hst "
	TPG_MAT_NAMEFLDHST(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST ,CTE_IDX_TCF ) ) = VALTOKEN
	TPG_MAT_TOTOCCFLDHST(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST ,CTE_IDX_TCF ) ) = TOT_OCURRENCIAS_CAMPOS%
 !!!		PRINT "TOKEN PREVIO " ; TOKEN
 !!!		PRINT "VALTOKEN PREVIO %" ; VALTOKEN ; "%"
 !!! ****** MODIFICACION IKY

	TOKEN = NEXTTOKEN
	IF VALTOKEN = "IKY"  OR VALTOKEN = "MKY"  OR VALTOKEN = "AKY"  OR VALTOKEN = "FLD" THEN
                TPG_MAT_IDT_FLD(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST , CTE_IDX_TCF )) = VALTOKEN
		TOKEN = NEXTTOKEN
	END IF

 !!! *****
 	IF VALTOKEN <> '(' THEN
		PRINT "TOKEN " ; TOKEN
		PRINT "VALTOKEN %" ; VALTOKEN ; "%"
		GLS_ERR = 'CARACTER ( PARA LARGO DE CAMPO EXPECTED'
		IDX_ERR% = DSP_ERR
	END IF
	TOKEN = NEXTTOKEN
	IF TOKEN <> NUMTOK THEN
		GLS_ERR = 'PARA LARGO DE CAMPO EXPECTED'
		IDX_ERR% = DSP_ERR
	END IF
 !!!	**comentario**		"TPG_MAT_LRG(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST , CTE_IDX_TCF ))  = largo campos hst "
	TPG_MAT_LRG(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST , CTE_IDX_TCF )) =  NUMTOKEN
	TOKEN = NEXTTOKEN
	IF VALTOKEN <> ')' THEN
		GLS_ERR = 'CARACTER ) PARA LARGO DE CAMPO EXPECTED'
		IDX_ERR% = DSP_ERR
	END IF

   END DEF

   DEF INTEGER TPG_FNC_IDEN_FLD_HST
	IF TOKEN = STRTOK THEN
  	        TPG_MAT_IDENFLDHST(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST ,CTE_IDX_TCF ) )  = STRTOKEN
		TOKEN = NEXTTOKEN
	END IF
   END DEF


   DEF INTEGER TPG_FNC_FLD_IDX_HST
 	TOKEN = NEXTTOKEN
        FUNC% = TPG_FNC_IDEN_FLD_HST

	IF VALTOKEN = "$_IDX_FIN" THEN
		GO TO FIN_TPG_FNC_FLD_IDX_HST
	END IF
        
	IF TOKEN = IDNTOK THEN
		FUNC% = TPG_FNC_ATR_FLD_IDX_HST
	ELSE
		GLS_ERR = 'IDENTIFICADOR EXPECTED'
		IDX_ERR% = DSP_ERR
	END IF

 FIN_TPG_FNC_FLD_IDX_HST:

   END DEF


   DEF INTEGER TPG_FNC_HST_FLD
	TOKEN = NEXTTOKEN
        FUNC% = TPG_FNC_IDEN_FLD_HST
	IF VALTOKEN = "$_FLD_FIN" THEN
		GO TO FIN_TPG_FNC_HST_FLD
	END IF
	IF VALTOKEN = "$_IDX_INI" THEN
		TOKEN = NEXTTOKEN
		POS_1ER_FLD_IDX% = 0
		IF VALTOKEN <> '=' THEN
			GLS_ERR = 'SIGNO = PARA ASIGNACION FORMULARIO EXPECTED'
			IDX_ERR% = DSP_ERR
		END IF
		TOKEN = NEXTTOKEN
		IF TOKEN <> NUMTOK THEN
			GLS_ERR = 'TOTAL DE OCURENCIAS PARA CAMPOS HST EXPECTED'
			IDX_ERR% = DSP_ERR
		END IF
		TOT_OCURRENCIAS_CAMPOS% = NUMTOKEN
		POS_1ER_FLD_IDX% = TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TCF ) + 1 	

		WHILE VALTOKEN <> "$_IDX_FIN"
			FUNC% = TPG_FNC_FLD_IDX_HST
		NEXT

		POS_ULT_FLD_IDX% = TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TCF )  	

		TOT_OCURRENCIAS_CAMPOS% = TOT_OCURRENCIAS_CAMPOS% - 1
		FOR AA% = 1 TO TOT_OCURRENCIAS_CAMPOS%
			FOR SS% = POS_1ER_FLD_IDX% TO POS_ULT_FLD_IDX%
				TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TCF ) = TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TCF ) + 1
				TPG_MAT_IDENFLDHST (TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST ,CTE_IDX_TCF ) ) =&
				TPG_MAT_IDENFLDHST (TPG_TOT_HST, SS% ) 
				TPG_MAT_NAMEFLDHST (TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST ,CTE_IDX_TCF ) ) =&
				TPG_MAT_NAMEFLDHST (TPG_TOT_HST, SS% ) 

 				TPG_MAT_IDT_FLD(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST ,CTE_IDX_TCF ) ) =&
 					TPG_MAT_IDT_FLD(TPG_TOT_HST, SS% ) 

				TPG_MAT_TOTOCCFLDHST(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST ,CTE_IDX_TCF ) ) = &
					TOT_OCURRENCIAS_CAMPOS% + 1

				TPG_MAT_LRG(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST , CTE_IDX_TCF )) = TPG_MAT_LRG(TPG_TOT_HST, SS%)
			NEXT SS%
		NEXT AA%
		TOT_OCURRENCIAS_CAMPOS% = 0
	ELSE
	IF TOKEN = IDNTOK THEN
		FUNC% = TPG_FNC_ATR_FLD_IDX_HST
	ELSE
		GLS_ERR = '$_IDX_INI OR IDENTIFICADOR DE CAMPO EXPECTED'
		IDX_ERR% = DSP_ERR
	END IF
	END IF

 FIN_TPG_FNC_HST_FLD:

   END DEF

   DEF INTEGER TPG_FNC_HST

	TOKEN = NEXTTOKEN
	IF VALTOKEN = "$_HST_FIN" THEN
		GO TO FIN_TPG_FNC_HST
	END IF

	IF VALTOKEN = "$_NOM" THEN
		TOKEN = NEXTTOKEN
		IF VALTOKEN <> '=' THEN
			GLS_ERR = 'SIGNO = PARA ASIGNACION FORMULARIO EXPECTED'
			IDX_ERR% = DSP_ERR
		END IF
		TOKEN = NEXTTOKEN
		IF TOKEN <> STRTOK THEN
			GLS_ERR = 'STRING CON NOMBRE DE FORMULARIO EXPECTED'
			IDX_ERR% = DSP_ERR
		END IF
		TPG_MAT_HST_ALF(TPG_TOT_HST, CTE_IDX_NOM) = STRTOKEN
 !!!	**comentario**					" TPG_MAT_HST_ALF(TPG_TOT_HST, CTE_IDX_NOM) = nombre de pantalla"
	ELSE
	IF VALTOKEN = "$_SIS" THEN
		TOKEN = NEXTTOKEN
		IF VALTOKEN <> '=' THEN
			GLS_ERR = 'SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED'
			IDX_ERR% = DSP_ERR
		END IF
		TOKEN = NEXTTOKEN
		IF TOKEN <> STRTOK THEN
			GLS_ERR = 'STRING CON NOMBRE DE SISTEMA EXPECTED'
			IDX_ERR% = DSP_ERR
		END IF
		TPG_MAT_HST_ALF(TPG_TOT_HST, CTE_IDX_SIS) = STRTOKEN
 !!!	**comentario**					" TPG_MAT_HST_ALF(TPG_TOT_HST, CTE_IDX_SIS) = nombre de sist "
		ENC$ = "NO"
		FOR JJ% = 1 TO TPG_TOT_SIST%
			IF TPG_VEC_SIST(JJ%) = STRTOKEN THEN
				ENC$ = "SI"
				JJ% = TPG_TOT_SIST% + 1
			END IF
		NEXT JJ%
		IF ENC$ = "NO" THEN
			TPG_TOT_SIST% = TPG_TOT_SIST% + 1
			TPG_VEC_SIST(TPG_TOT_SIST%) = STRTOKEN
		END IF

 	ELSE
	IF VALTOKEN = "$_SIM" THEN
		TOKEN = NEXTTOKEN
		IF VALTOKEN <> '=' THEN
			GLS_ERR = 'SIGNO = PARA ASIGNACION SISTEMA SIM EXPECTED'
			IDX_ERR% = DSP_ERR
		END IF
		TOKEN = NEXTTOKEN
		IF TOKEN <> STRTOK THEN
			GLS_ERR = 'STRING CON NOMBRE DE FORMULARIO EXPECTED'
			IDX_ERR% = DSP_ERR
		END IF
		TPG_MAT_HST_ALF(TPG_TOT_HST, CTE_IDX_SIM) = STRTOKEN
	ELSE
	IF VALTOKEN = "$_FLD_INI" THEN
		WHILE VALTOKEN <> "$_FLD_FIN"
			FUNC% = TPG_FNC_HST_FLD
			IF WSS_DSP00 = 'S' THEN
				PRINT "VOLVIO DE TPG_FNC_HST_FLD"
			END IF
		NEXT
	ELSE
		GLS_ERR = '$_NOM OR $_SIS OR $_FLD_INI EXPECTED'
		IDX_ERR% = DSP_ERR
	END IF
	END IF
	END IF
	END IF

 FIN_TPG_FNC_HST:
	IF TPG_MAT_HST_ALF(TPG_TOT_HST, CTE_IDX_SIM) = "" THEN
		TPG_MAT_HST_ALF(TPG_TOT_HST, CTE_IDX_SIM) = TPG_MAT_HST_ALF(TPG_TOT_HST, CTE_IDX_SIS)
	END IF

	IF WSS_DSP00 = 'S' THEN
		PRINT "EN FIN_TPG_FNC_HST"
	END IF
   END DEF

   DEF INTEGER TPG_FNC_SRV_IDX
	POS_1ER_FLD_IDX% = 0
	TOKEN = NEXTTOKEN
	IF VALTOKEN <> '=' THEN
		GLS_ERR = 'SIGNO = PARA ASIGNACION FORMULARIO EXPECTED'
		IDX_ERR% = DSP_ERR
	END IF
	TOKEN = NEXTTOKEN
	IF TOKEN <> NUMTOK THEN
		GLS_ERR = 'NUMERO DE OCURRENCIAS PARA CAMPOS SRV EXPECTED'
		IDX_ERR% = DSP_ERR
	END IF
	TOT_OCURRENCIAS_CAMPOS% = NUMTOKEN
	TOKEN = NEXTTOKEN
	POS_1ER_FLD_IDX% = TPG_MAT_NCP_SRV(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF ) )  + 1 	
	WHILE VALTOKEN <> "$_IDX_FIN"
 		IF TOKEN <> IDNTOK THEN
			GLS_ERR = 'IDENTIFICADOR CON NOMBRE DE CAMPO EXPECTED'
			IDX_ERR% = DSP_ERR
		END IF
		TPG_MAT_NCP_SRV(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF ) ) =&
			TPG_MAT_NCP_SRV(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF ) ) + 1
		INDEX% = TPG_MAT_NCP_SRV(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF ))
		TPG_MAT_NAMEFLDSRV (TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF), INDEX%) = VALTOKEN
		TPG_MAT_TOTOCCFLDSRV(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF), INDEX%) = &
			TOT_OCURRENCIAS_CAMPOS%
		TOKEN = NEXTTOKEN
	NEXT
	IF WSS_DSP01 = 'S' THEN
		PRINT " FIN WHILE SRV_IDX POS_1ER_FLD_IDX%"  ; POS_1ER_FLD_IDX%
	END IF
	POS_ULT_FLD_IDX% = TPG_MAT_NCP_SRV(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF ) ) 
	IF WSS_DSP01 = 'S' THEN
		PRINT " FIN WHILE SRV_IDX POS_ULT_FLD_IDX%"  ; POS_ULT_FLD_IDX%
	END IF
	IF POS_1ER_FLD_IDX% <> 0 THEN
		TOT_OCURRENCIAS_CAMPOS% = TOT_OCURRENCIAS_CAMPOS% - 1
		FOR AA% = 1 TO TOT_OCURRENCIAS_CAMPOS%
			IF WSS_DSP01 = 'S' THEN
				PRINT " GUARDO INDEX VECES :  " ; TOT_OCURRENCIAS_CAMPOS%
			END IF
			FOR SS% = POS_1ER_FLD_IDX% TO POS_ULT_FLD_IDX%
				IF WSS_DSP01 = 'S' THEN
					PRINT " EL CAMPO  :  " ; SS%
				END IF
				TPG_MAT_NCP_SRV(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF ) ) =&
					TPG_MAT_NCP_SRV(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF ) ) + 1
				INDEX% = TPG_MAT_NCP_SRV(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF ))
				TPG_MAT_NAMEFLDSRV(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF), INDEX%) =&
					TPG_MAT_NAMEFLDSRV(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF), SS%) 
				TPG_MAT_TOTOCCFLDSRV(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF), INDEX%) = &
					TOT_OCURRENCIAS_CAMPOS% + 1
			NEXT SS%
		NEXT AA%
		TOT_OCURRENCIAS_CAMPOS% = 0
	END IF		
   END DEF

 DEF INTEGER TPG_FNC_SRV

	TOKEN = NEXTTOKEN
	IF VALTOKEN = "$_SRV_FIN" THEN
		GO TO FIN_TPG_FNC_SRV
	END IF

	IF VALTOKEN = "$_NOM" THEN
		TOKEN = NEXTTOKEN
		IF VALTOKEN <> '=' THEN
			GLS_ERR = 'SIGNO = PARA ASIGNACION FORMULARIO EXPECTED'
			IDX_ERR% = DSP_ERR
		END IF
		TOKEN = NEXTTOKEN
		IF TOKEN <> STRTOK THEN
			GLS_ERR = 'STRING CON NOMBRE DE FORMULARIO EXPECTED'
			IDX_ERR% = DSP_ERR
		END IF
 !!!	**comentario**	"  TPG_MAT_SRV_ALF(TPG_TOT_HST , TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF ) )  = nombre de srv "
		TPG_MAT_SRV_ALF(TPG_TOT_HST , TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF ) ) = STRTOKEN	
	ELSE
	IF VALTOKEN = "$_FLD_INI" THEN
		TOKEN = NEXTTOKEN
		WHILE VALTOKEN <> "$_FLD_FIN"
			IF VALTOKEN = "$_IDX_INI" THEN
				WHILE VALTOKEN <> "$_IDX_FIN"
					FUNC% = TPG_FNC_SRV_IDX
				NEXT
			ELSE
			IF TOKEN = IDNTOK THEN
				AA$ = VALTOKEN
				II% = TPG_TOT_HST
				CONT_SRV% = 1
				ENC% = TPG_FNC_BCS
				IF IDX% = 0 THEN
					PRINT " NO EXISTE " ;  AA$ ; " EN TABLA HST => " ;&
						TPG_MAT_HST_ALF(TPG_TOT_HST , CTE_IDX_NOM ) 
				END IF
 !!!	**comentario**	" TPG_MAT_NCP_SRV(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF ) ) = nª de campos de srv "
				TPG_MAT_NCP_SRV(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF ) ) =&
					TPG_MAT_NCP_SRV(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF ) ) + 1
				INDEX% = TPG_MAT_NCP_SRV(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF ))
 !!!	**comentario**	" TPG_MAT_NAMEFLDSRV(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF), INDEX%) = nombre campo srv "
				TPG_MAT_NAMEFLDSRV(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF), INDEX%) = VALTOKEN
			END IF
			END IF
			TOKEN = NEXTTOKEN
		NEXT
	ELSE
		GLS_ERR = '"NOM" OR $_FLD_INI PARA SRV EXPECTED'
		IDX_ERR% = DSP_ERR

	END IF
	END IF

 FIN_TPG_FNC_SRV:

 END DEF
  !!! ********************   

 !==================================================================

 ! ------------------------------------------------------------------
 !               MODULO PRINCIPAL
 ! __________________________________________________________________
	ON ERROR GO TO  LABE_BADD
	ACCION = INIC_IALI
	SEMSUM = 0
	PS = 1
	PONRT = 0
	SM = 1
	DL = 0
        KK = 0
	BB = 1
	LL = 1
	NEW_PAG = ""
 !!!  codigo para generador para plataforma grafica
	TPG_TOT_HST  = 0
	TPG_TOT_TRN = 0
	COL_SRV = 0
	COL_NCF = 0
        FIL_IND = 0 
	COL_LRG = 0
	ACCION = INI_MATR2
	DT$ = DATE$(0%)
	HRS$ = TIME$(0%)
	MNT$ = MID$(HRS$,4,2)
	HRS$ = MID$(HRS$,1,2)
	HORA$ = HRS$ + MNT$ + "00"
	DIA$ = MID$(DT$,1,2)
	MES$ = MID$(DT$,4,3)
	ANO$ = MID$(DT$,8,4)
	MES$ = EDIT$(MES$,32%)
	FOR O% = 1 TO 12
		IF V_MES(O%,1) = MES$ THEN
			MES$ = V_MES(O%,2)
			O% = 13
		END IF
	NEXT O% 
	TIME_STP$ = "19" + ANO$ + MES$ + DIA$ + HORA$
	IF LEN(TIME_STP$) <> 14 THEN
		PRINT "LARGO DE TIME STAMP DISTINTO DE 14 TIME-STAMP : " ; TIME_STP$
	END IF
        TOKEN = NEXTTOKEN
 	WHILE TOKEN <> TPGTOK
 	  TOKEN = NEXTTOKEN
        NEXT
  
	WHILE TOKEN <> ETXTOK

	IF VALTOKEN = "$_TIME_STP" THEN
		TOKEN = NEXTTOKEN
		IF VALTOKEN <> '=' THEN
			GLS_ERR = 'SIGNO = PARA ASIGNACION FORMULARIO EXPECTED'
			IDX_ERR% = DSP_ERR
		END IF
		TOKEN = NEXTTOKEN
		IF TOKEN <> STRTOK THEN
			GLS_ERR = 'STRING CON NOMBRE DE FORMULARIO EXPECTED'
			IDX_ERR% = DSP_ERR
		END IF
		TIME_STP$  = STRTOKEN
		IF LEN(TIME_STP$) <> 14 THEN
			PRINT "LARGO DE TIME STAMP DISTINTO DE 14 TIME-STAMP : " ; TIME_STP$
		END IF
		PRINT "LARGO DE TIME-STAMP : " ; TIME_STP$
		TOKEN = NEXTTOKEN
	END IF
	IF VALTOKEN = "$_LRG_SND" THEN
		TOKEN = NEXTTOKEN
		IF VALTOKEN <> '=' THEN
			GLS_ERR = 'SIGNO = PARA ASIGNACION FORMULARIO EXPECTED'
			IDX_ERR% = DSP_ERR
		END IF
		TOKEN = NEXTTOKEN
		TPG_LRG_SND% = NUMTOKEN
	END IF

	IF VALTOKEN = "$_LRG_RCV" THEN
		TOKEN = NEXTTOKEN
		IF VALTOKEN <> '=' THEN
			GLS_ERR = 'SIGNO = PARA ASIGNACION FORMULARIO EXPECTED'
			IDX_ERR% = DSP_ERR
		END IF
		TOKEN = NEXTTOKEN
		TPG_LRG_RCV% = NUMTOKEN
	END IF

	IF VALTOKEN = "$_HDR_RCV" THEN
		TOKEN = NEXTTOKEN
		IF VALTOKEN <> '=' THEN
			GLS_ERR = 'SIGNO = PARA ASIGNACION FORMULARIO EXPECTED'
			IDX_ERR% = DSP_ERR
		END IF
		TOKEN = NEXTTOKEN
		TPG_HDR_RCV% = NUMTOKEN
	END IF

	IF VALTOKEN = "$_HDR_SND" THEN
		TOKEN = NEXTTOKEN
		IF VALTOKEN <> '=' THEN
			GLS_ERR = 'SIGNO = PARA ASIGNACION FORMULARIO EXPECTED'
			IDX_ERR% = DSP_ERR
		END IF
		TOKEN = NEXTTOKEN
		TPG_HDR_SND% = NUMTOKEN
	END IF


	IF VALTOKEN = "$_FRM_INI" THEN
		TPG_TOT_HST = TPG_TOT_HST + 1
 !!! 	**comentario**								" TPG_TOT_HST  =  numero de hst "
		IF WSS_DSP00 = 'S' THEN
			PRINT "TPG_TOT_HST "; TPG_TOT_HST
		END IF
		WHILE VALTOKEN <> "$_FRM_FIN"
			TOKEN = NEXTTOKEN

			IF VALTOKEN = "$_HST_INI" THEN
				WHILE VALTOKEN <> "$_HST_FIN"
					FUNC% = TPG_FNC_HST
				NEXT
 !!! SIMULA CAMPO {FRM}-GLS-MENS
				TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TCF ) = TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TCF ) + 1
				TPG_MAT_NAMEFLDHST(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST ,CTE_IDX_TCF ) ) =&
  					TPG_MAT_HST_ALF(TPG_TOT_HST, CTE_IDX_NOM) + "-GLS-MENS"
				TPG_MAT_LRG(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST , CTE_IDX_TCF )) = 79
                        ELSE
			IF VALTOKEN = "$_SRV_INI" THEN
 !!!	**comentario**		" TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF )  = num de srv para hst "
				TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF ) = TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF ) + 1
				WHILE VALTOKEN <> "$_SRV_FIN"
					FUNC% = TPG_FNC_SRV
				NEXT
 			ELSE
			IF VALTOKEN <> "$_FRM_FIN" THEN
				GLS_ERR = 'HST_INI OR SRV_INI OR FRM_FIN EXPECTED'
				IDX_ERR% = DSP_ERR
			END IF
			END IF
			END IF

		NEXT
 !!! AQUI SE DEBE INCLUIR LA NUEVA PARTE 12312312312312
 		TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF ) = TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF ) + 1
 !!! nombre de nuevo srv para este caso  "901"
 		TPG_MAT_SRV_ALF(TPG_TOT_HST , TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF ) ) = "901"	
		FOR XX% = 1 TO TPG_MAT_HST_NUM(TPG_TOT_HST , CTE_IDX_TCF)
                	IF  TPG_MAT_IDT_FLD(TPG_TOT_HST, XX%)  = "IKY" THEN                 
 !!! se incluyen campos IKY 
 				TPG_MAT_NCP_SRV(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF ) ) =&
				TPG_MAT_NCP_SRV(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF ) ) + 1
				INDEX% = TPG_MAT_NCP_SRV(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF ))
 				TPG_MAT_NAMEFLDSRV(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF), INDEX%) =&
				TPG_MAT_NAMEFLDHST(TPG_TOT_HST, XX% ) 
 !!! para cmapos indexados en el host
   		                TPG_MAT_TOTOCCFLDSRV(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF), INDEX%) = &
  	                        TPG_MAT_TOTOCCFLDHST(TPG_TOT_HST, XX%)
			END IF
		NEXT XX%

		TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF ) = TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF ) + 1
 		TPG_MAT_SRV_ALF(TPG_TOT_HST , TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF ) ) = "902"	


 		TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF ) = TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF ) + 1
 		TPG_MAT_SRV_ALF(TPG_TOT_HST , TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF ) ) = "903"	
		FOR XX% = 1 TO TPG_MAT_HST_NUM(TPG_TOT_HST , CTE_IDX_TCF)
                	IF  TPG_MAT_IDT_FLD(TPG_TOT_HST, XX%)  = "FLD" OR &
			    TPG_MAT_IDT_FLD(TPG_TOT_HST, XX%)  = "MKY" THEN
				TPG_MAT_NCP_SRV(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF ) ) =&
				TPG_MAT_NCP_SRV(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF ) ) + 1
				INDEX% = TPG_MAT_NCP_SRV(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF ))
 				TPG_MAT_NAMEFLDSRV(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF), INDEX%) =&
				 TPG_MAT_NAMEFLDHST(TPG_TOT_HST, XX% ) 
 !!! para cmapos indexados en el host
   		                TPG_MAT_TOTOCCFLDSRV(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF), INDEX%) = &
  	                        TPG_MAT_TOTOCCFLDHST(TPG_TOT_HST, XX%)
			END IF
		NEXT XX%

		TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF ) = TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF ) + 1
 		TPG_MAT_SRV_ALF(TPG_TOT_HST , TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF ) ) = "904"	


		FOR XX% = 1 TO TPG_MAT_HST_NUM(TPG_TOT_HST , CTE_IDX_TCF)
                	IF      TPG_MAT_IDT_FLD(TPG_TOT_HST, XX%)  = "IKY"&
			     OR TPG_MAT_IDT_FLD(TPG_TOT_HST, XX%)  = "MKY" &
			     OR TPG_MAT_IDT_FLD(TPG_TOT_HST, XX%)  = "AKY"&
			     OR TPG_MAT_IDT_FLD(TPG_TOT_HST, XX%)  = "FLD" THEN
				TPG_MAT_NCP_SRV(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF ) ) =&
				TPG_MAT_NCP_SRV(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF ) ) + 1

				INDEX% = TPG_MAT_NCP_SRV(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF ))
 				TPG_MAT_NAMEFLDSRV(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF), INDEX%) =&
				 TPG_MAT_NAMEFLDHST(TPG_TOT_HST, XX% ) 
 !!! para cmapos indexados en el host
   		                TPG_MAT_TOTOCCFLDSRV(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF), INDEX%) = &
  	                        TPG_MAT_TOTOCCFLDHST(TPG_TOT_HST, XX%)

			END IF
		NEXT XX%


 		TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF ) = TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF ) + 1
 		TPG_MAT_SRV_ALF(TPG_TOT_HST , TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF ) ) = "905"	
		FOR XX% = 1 TO TPG_MAT_HST_NUM(TPG_TOT_HST , CTE_IDX_TCF)
                	IF  TPG_MAT_IDT_FLD(TPG_TOT_HST, XX%)  = "IKY" OR &
			    TPG_MAT_IDT_FLD(TPG_TOT_HST, XX%)  = "MKY" OR &
			    TPG_MAT_IDT_FLD(TPG_TOT_HST, XX%)  = "AKY" THEN
 				TPG_MAT_NCP_SRV(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF ) ) =&
				TPG_MAT_NCP_SRV(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF ) ) + 1
				INDEX% = TPG_MAT_NCP_SRV(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF ))
 				TPG_MAT_NAMEFLDSRV(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF), INDEX%) =&
				 TPG_MAT_NAMEFLDHST(TPG_TOT_HST, XX% ) 
 !!! para cmapos indexados en el host
   		                TPG_MAT_TOTOCCFLDSRV(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF), INDEX%) = &
  	                        TPG_MAT_TOTOCCFLDHST(TPG_TOT_HST, XX%)
	
			END IF
		NEXT XX%

		TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF ) = TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF ) + 1
 		TPG_MAT_SRV_ALF(TPG_TOT_HST , TPG_MAT_HST_NUM(TPG_TOT_HST, CTE_IDX_TSF ) ) = "907"	

 !!! AQUI SE DEBE INCLUIR LA NUEVA PARTE 12312312312312

	END IF


        TOKEN = NEXTTOKEN
	TPG_POS_REQ = 0
	IF VALTOKEN = "$_REQ_INI" THEN
		TPG_TOT_TRN = 0
		TPG_TOT_REQ = TPG_TOT_REQ + 1

		TOKEN = NEXTTOKEN

		WHILE VALTOKEN <> "$_REQ_FIN"
			IF VALTOKEN = "$_NOM" THEN

				TOKEN = NEXTTOKEN

				IF VALTOKEN <> '=' THEN
					GLS_ERR = 'SIGNO = PARA ASIGNACION FORMULARIO EXPECTED'
					IDX_ERR% = DSP_ERR
				END IF

				TOKEN = NEXTTOKEN

				IF TOKEN <> STRTOK THEN
					GLS_ERR = 'STRING CON NOMBRE DE FORMULARIO EXPECTED'
					IDX_ERR% = DSP_ERR
				END IF
				TPG_VEC_REQ(TPG_TOT_REQ) = STRTOKEN

				TOKEN = NEXTTOKEN

			END IF
			IF VALTOKEN = "$_TRN_INI" THEN
				TPG_TOT_TRN = TPG_TOT_TRN + 1
				TOKEN = NEXTTOKEN

				WHILE VALTOKEN <> "$_TRN_FIN"
					IF TOKEN <> TPGTOK THEN
						GLS_ERR = 'STRING CON NOMBRE DE SISTEMA EXPECTED'
						IDX_ERR% = DSP_ERR
					END IF
					IF VALTOKEN = '$_FRM' THEN
						TPG_POS_REQ = CTE_TRN_FRM
					END IF
					IF VALTOKEN = '$_CMN' THEN
						TPG_POS_REQ = CTE_TRN_CMN
					END IF
					IF VALTOKEN = '$_CPP' THEN
						TPG_POS_REQ = CTE_TRN_CPP
					END IF
					IF VALTOKEN = '$_SPP' THEN
						TPG_POS_REQ = CTE_TRN_SPP
					END IF
					IF VALTOKEN = '$_PGM' THEN
						TPG_POS_REQ = CTE_TRN_PGM
					END IF
					IF VALTOKEN = '$_SUB' THEN
						TPG_POS_REQ = CTE_TRN_SUB
					END IF
					IF VALTOKEN = '$_INS' THEN
						TPG_POS_REQ = CTE_TRN_INS
					END IF
					IF VALTOKEN = '$_INM' THEN
						TPG_POS_REQ = CTE_TRN_INM
					END IF
					IF VALTOKEN = '$_FIN' THEN
						TPG_POS_REQ = CTE_TRN_FIN
					END IF
					IF VALTOKEN = '$_FOU' THEN
						TPG_POS_REQ = CTE_TRN_FOU
					END IF
					IF VALTOKEN = '$_CMT' THEN
						TPG_POS_REQ = CTE_TRN_CMT
					END IF
					IF VALTOKEN = '$_IDX' THEN
						TPG_POS_REQ = CTE_TRN_IDX
					END IF

					TOKEN = NEXTTOKEN

					IF VALTOKEN <> '=' THEN
						GLS_ERR = 'SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED'
						IDX_ERR% = DSP_ERR
					END IF
					TOKEN = NEXTTOKEN
					IF TOKEN <> STRTOK THEN
						GLS_ERR = 'STRING CON NOMBRE DE SISTEMA EXPECTED'
						IDX_ERR% = DSP_ERR
					END IF

					IF TPG_POS_REQ = CTE_TRN_FRM THEN
						IF STRTOKEN = '' THEN
							GLS_ERR = 'EN TRANSACCION: FORMULARIO OBLIGATORIO'
							IDX_ERR% = DSP_ERR
						ELSE
							IF LEN(STRTOKEN) <> 3 THEN
								GLS_ERR = 'EN TRANSACCION: FORMULARIO CON LARGO DISTINTO DE 3'
								IDX_ERR% = DSP_ERR
							END IF
						END IF
					END IF
					IF TPG_POS_REQ = CTE_TRN_CMN THEN
						IF STRTOKEN = '' THEN
							GLS_ERR = 'EN TRANSACCION: COMANDO "CMN" OBLIGATORIO'
							IDX_ERR% = DSP_ERR
						ELSE
							IF LEN(STRTOKEN) <> 3 THEN
								GLS_ERR = 'EN TRANSACCION: COMANDO "CMN" CON LARGO DISTINTO DE 3'
								IDX_ERR% = DSP_ERR
							END IF
						END IF
					END IF
					IF TPG_POS_REQ = CTE_TRN_CPP THEN
						IF STRTOKEN = '' THEN
							GLS_ERR = 'EN TRANSACCION: COMANDO "CPP" OBLIGATORIO'
							IDX_ERR% = DSP_ERR
						ELSE
							IF LEN(STRTOKEN) <> 3 THEN
								GLS_ERR = 'EN TRANSACCION: COMANDO "CPP" CON LARGO DISTINTO DE 3'
								IDX_ERR% = DSP_ERR
							END IF
						END IF
					END IF
					IF TPG_POS_REQ = CTE_TRN_SPP THEN
						IF STRTOKEN = '' THEN
							GLS_ERR = 'EN TRANSACCION: STATUS PARA PROGRAMA "SPP" OBLIGATORIO'
							IDX_ERR% = DSP_ERR
						ELSE
							IF LEN(STRTOKEN) <> 1 THEN
								GLS_ERR = 'EN TRANSACCION: STATUS PARA PROGRAMA "SPP" CON LARGO DISTINTO DE 1'
								IDX_ERR% = DSP_ERR
							END IF
						END IF
					END IF
					IF TPG_POS_REQ = CTE_TRN_PGM THEN
						IF STRTOKEN = '' THEN
							GLS_ERR = 'EN TRANSACCION: PROGRAMA OBLIGATORIO'
							IDX_ERR% = DSP_ERR
						ELSE
							IF LEN(STRTOKEN) <> 8 THEN
								GLS_ERR = 'EN TRANSACCION: PROGRAMA(SUB) CON LARGO DISTINTO DE 8'
								IDX_ERR% = DSP_ERR
							END IF
						END IF
					END IF
					IF TPG_POS_REQ = CTE_TRN_INS THEN
						IF STRTOKEN = '' THEN
							GLS_ERR = 'EN TRANSACCION: INSTANCIA OBLIGATORIA'
							IDX_ERR% = DSP_ERR
						ELSE
							IF LEN(STRTOKEN) <> 3 THEN
								GLS_ERR = 'EN TRANSACCION: INSTANCIA CON LARGO DISTINTO DE 3'
								IDX_ERR% = DSP_ERR
							END IF
						END IF
					END IF
					IF TPG_POS_REQ = CTE_TRN_SUB THEN
						IF STRTOKEN = '' THEN
							GLS_ERR = 'EN TRANSACCION: PROGRAMA OBLIGATORIO'
							IDX_ERR% = DSP_ERR
						ELSE
							IF LEN(STRTOKEN) <> 8 THEN
								GLS_ERR = 'EN TRANSACCION: PROGRAMA CON LARGO DISTINTO DE 8'
								IDX_ERR% = DSP_ERR
							END IF
						END IF
					END IF
					IF TPG_POS_REQ = CTE_TRN_FIN THEN
						IF STRTOKEN = '' THEN
							GLS_ERR = 'EN TRANSACCION: FORMATO DE INPUT OBLIGATORIO'
							IDX_ERR% = DSP_ERR
						ELSE
							IF LEN(STRTOKEN) <> 3 THEN
								GLS_ERR = 'EN TRANSACCION: FORMATO DE INPUT CON LARGO DISTINTO DE 3'
								IDX_ERR% = DSP_ERR
							END IF
						END IF
					END IF
					IF TPG_POS_REQ = CTE_TRN_FOU THEN
						IF STRTOKEN = '' THEN
							STRTOKEN = '   '
						ELSE
							IF LEN(STRTOKEN) <> 3 THEN
								GLS_ERR = 'EN TRANSACCION: FORMATO DE OUPUT CON LARGO DISTINTO DE 3'
								IDX_ERR% = DSP_ERR
							END IF
						END IF
					END IF
					TPG_MAT_TRN(TPG_TOT_REQ , TPG_TOT_TRN , TPG_POS_REQ ) = STRTOKEN
					TOKEN = NEXTTOKEN
				NEXT
                                IF TPG_MAT_TRN(TPG_TOT_REQ , TPG_TOT_TRN , CTE_TRN_INM ) = "   " THEN
    					TPG_MAT_TRN(TPG_TOT_REQ , TPG_TOT_TRN , CTE_TRN_INM ) = &
					TPG_MAT_TRN(TPG_TOT_REQ , TPG_TOT_TRN , CTE_TRN_INS )
				END IF
		END IF	

 !!! inicio de lectura de datos para generar PCAPT  "PT"
			VAR_IDX1% = 0 
			VAR_IDX2% = 0 
			IF VALTOKEN = "$_PT_INI" THEN
				TOKEN = NEXTTOKEN
				TPG_TOT_CAMP = 0
				WHILE VALTOKEN <> "$_PT_FIN"
					IF TOKEN <> TPGTOK THEN
						GLS_ERR = 'STRING NO CORRESPONDE A UN " $_ " EXPECTED' 
						IDX_ERR% = DSP_ERR
					END IF
					IF VALTOKEN = "$_FRM" THEN
						SEC_PT_HDR$ = "OPEN"
						TOKEN = NEXTTOKEN
						IF VALTOKEN <> '=' THEN
							GLS_ERR = 'SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED' 
							IDX_ERR% = DSP_ERR
						END IF
						TOKEN = NEXTTOKEN


						TPG_TOT_CAMP = TPG_TOT_CAMP + 1
						TPG_MAT_PTFRM(TPG_TOT_REQ , TPG_TOT_CAMP ) = STRTOKEN
					END IF
					IF VALTOKEN = "$_FMT" THEN
						SEC_PT_HDR$ = "CLOSE"
						TOKEN = NEXTTOKEN
						IF VALTOKEN <> '=' THEN
							GLS_ERR = 'SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED'
							IDX_ERR% = DSP_ERR
						END IF
						TOKEN = NEXTTOKEN

						TPG_MAT_PTFMT(TPG_TOT_REQ , TPG_TOT_CAMP ) = STRTOKEN
						TPG_MAT_NIV_IDPT(TPG_TOT_REQ , TPG_TOT_CAMP, 1 ) = VAR_IDX1%
						TPG_MAT_NIV_IDPT(TPG_TOT_REQ , TPG_TOT_CAMP, 2 ) = VAR_IDX2%
					END IF
					IF VALTOKEN = "$_IDX_INI" THEN
						TOKEN = NEXTTOKEN
						IF VALTOKEN <> '=' THEN
							GLS_ERR = 'SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED'
							IDX_ERR% = DSP_ERR
						END IF
						TOKEN = NEXTTOKEN
						IF VAR_IDX1% = 0 THEN 
							VAR_IDX1% = NUMTOKEN
						ELSE
							VAR_IDX2% = NUMTOKEN
						END IF
					END IF
					IF VALTOKEN = "$_IDX_FIN" THEN
						IF VAR_IDX2% <> 0 THEN 
							VAR_IDX2% = 0
						ELSE
							VAR_IDX1% = 0
						END IF
					END IF

					TOKEN = NEXTTOKEN
 				NEXT
 				TPG_MAT_CAM_PT(TPG_TOT_REQ) = TPG_TOT_CAMP
			END IF



 !!! inicio de lectura de datos para generar PTAMX  "TX"
			VAR_IDX1% = 0 
			VAR_IDX2% = 0 
			IF VALTOKEN = "$_TX_INI" THEN
				TOKEN = NEXTTOKEN
				TPG_TOT_CAMP = 0
				WHILE VALTOKEN <> "$_TX_FIN"
					IF TOKEN <> TPGTOK THEN
						GLS_ERR = 'STRING NO CORRESPONDE A UN " $_ " EXPECTED'
						IDX_ERR% = DSP_ERR
					END IF
					IF VALTOKEN = "$_FRM" THEN
						TOKEN = NEXTTOKEN
						IF VALTOKEN <> '=' THEN
							GLS_ERR = 'SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED'
							IDX_ERR% = DSP_ERR
						END IF
						TOKEN = NEXTTOKEN
						TPG_TOT_CAMP = TPG_TOT_CAMP + 1
						TPG_MAT_TXFRM(TPG_TOT_REQ , TPG_TOT_CAMP ) = STRTOKEN
					END IF
					IF VALTOKEN = "$_FMT" THEN
						TOKEN = NEXTTOKEN
						IF VALTOKEN <> '=' THEN
							GLS_ERR = 'SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED'
							IDX_ERR% = DSP_ERR
						END IF
						TOKEN = NEXTTOKEN
						TPG_MAT_TXFMT(TPG_TOT_REQ , TPG_TOT_CAMP ) = STRTOKEN
						TPG_MAT_NIV_IDTX(TPG_TOT_REQ , TPG_TOT_CAMP, 1 ) = VAR_IDX1%
						TPG_MAT_NIV_IDTX(TPG_TOT_REQ , TPG_TOT_CAMP, 2 ) = VAR_IDX2%
					END IF
					IF VALTOKEN = "$_IDX_INI" THEN
						TOKEN = NEXTTOKEN
						IF VALTOKEN <> '=' THEN
							GLS_ERR = 'SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED'
							IDX_ERR% = DSP_ERR
						END IF
						TOKEN = NEXTTOKEN
						IF VAR_IDX1% = 0 THEN 
							VAR_IDX1% = NUMTOKEN
						ELSE
							VAR_IDX2% = NUMTOKEN
						END IF
					END IF
					IF VALTOKEN = "$_IDX_FIN" THEN
						IF VAR_IDX2% <> 0 THEN 
							VAR_IDX2% = 0
						ELSE
							VAR_IDX1% = 0
						END IF
					END IF

					TOKEN = NEXTTOKEN
				NEXT
				TPG_MAT_CAM_TX(TPG_TOT_REQ) = TPG_TOT_CAMP
			END IF



 !!! inicio de lectura de datos para generar MXAPT  "XT"
			VAR_IDX1% = 0 
			VAR_IDX2% = 0 
			IF VALTOKEN = "$_XT_INI" THEN
				TOKEN = NEXTTOKEN
				TPG_TOT_CAMP = 0
				WHILE VALTOKEN <> "$_XT_FIN"
					IF TOKEN <> TPGTOK THEN
						GLS_ERR = 'STRING NO CORRESPONDE A UN " $_ " EXPECTED'
						IDX_ERR% = DSP_ERR
					END IF
					IF VALTOKEN = "$_FRM" THEN
						TOKEN = NEXTTOKEN
						IF VALTOKEN <> '=' THEN
							GLS_ERR = 'SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED'
							IDX_ERR% = DSP_ERR
						END IF
						TOKEN = NEXTTOKEN
						TPG_TOT_CAMP = TPG_TOT_CAMP + 1
						TPG_MAT_XTFRM(TPG_TOT_REQ , TPG_TOT_CAMP ) = STRTOKEN
					END IF
					IF VALTOKEN = "$_FMT" THEN
						TOKEN = NEXTTOKEN
						IF VALTOKEN <> '=' THEN
							GLS_ERR = 'SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED'
							IDX_ERR% = DSP_ERR
						END IF
						TOKEN = NEXTTOKEN
						TPG_MAT_XTFMT(TPG_TOT_REQ , TPG_TOT_CAMP ) = STRTOKEN
						TPG_MAT_NIV_IDXT(TPG_TOT_REQ , TPG_TOT_CAMP, 1 ) = VAR_IDX1%
						TPG_MAT_NIV_IDXT(TPG_TOT_REQ , TPG_TOT_CAMP, 2 ) = VAR_IDX2%
					END IF
					IF VALTOKEN = "$_IDX_INI" THEN
						TOKEN = NEXTTOKEN
						IF VALTOKEN <> '=' THEN
							GLS_ERR = 'SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED'
							IDX_ERR% = DSP_ERR
						END IF
						TOKEN = NEXTTOKEN
						IF VAR_IDX1% = 0 THEN 
							VAR_IDX1% = NUMTOKEN
						ELSE
							VAR_IDX2% = NUMTOKEN
						END IF
					END IF
					IF VALTOKEN = "$_IDX_FIN" THEN
						IF VAR_IDX2% <> 0 THEN 
							VAR_IDX2% = 0
						ELSE
							VAR_IDX1% = 0
						END IF
					END IF

					TOKEN = NEXTTOKEN
				NEXT
				TPG_MAT_CAM_XT(TPG_TOT_REQ) = TPG_TOT_CAMP
			END IF



 !!! inicio de lectura de datos para generar PTAPC   "TP"
			IF VALTOKEN = "$_TP_INI" THEN
				VAR_IDX1% = 0 
				VAR_IDX2% = 0 
				TOKEN = NEXTTOKEN
				TPG_TOT_CAMP = 0
				WHILE VALTOKEN <> "$_TP_FIN"
					IF TOKEN <> TPGTOK THEN
						GLS_ERR = 'STRING NO CORRESPONDE A UN " $_ " EXPECTED'
						IDX_ERR% = DSP_ERR
					END IF
					IF VALTOKEN = "$_FRM" THEN
						TOKEN = NEXTTOKEN
						IF VALTOKEN <> '=' THEN
							GLS_ERR = 'SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED'
							IDX_ERR% = DSP_ERR
						END IF
						TOKEN = NEXTTOKEN
						TPG_TOT_CAMP = TPG_TOT_CAMP + 1
						TPG_MAT_TPFRM(TPG_TOT_REQ , TPG_TOT_CAMP ) = STRTOKEN
					END IF
					IF VALTOKEN = "$_FMT" THEN
						TOKEN = NEXTTOKEN
						IF VALTOKEN <> '=' THEN
							GLS_ERR = 'SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED'
							IDX_ERR% = DSP_ERR
						END IF
						TOKEN = NEXTTOKEN
						TPG_MAT_TPFMT(TPG_TOT_REQ , TPG_TOT_CAMP ) = STRTOKEN
						TPG_MAT_NIV_IDTP(TPG_TOT_REQ , TPG_TOT_CAMP, 1 ) = VAR_IDX1%
						TPG_MAT_NIV_IDTP(TPG_TOT_REQ , TPG_TOT_CAMP, 2 ) = VAR_IDX2%
					END IF
					IF VALTOKEN = "$_IDX_INI" THEN
						TOKEN = NEXTTOKEN
						IF VALTOKEN <> '=' THEN
							GLS_ERR = 'SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED'
							IDX_ERR% = DSP_ERR
						END IF
						TOKEN = NEXTTOKEN
						IF VAR_IDX1% = 0 THEN 
							VAR_IDX1% = NUMTOKEN
						ELSE
							VAR_IDX2% = NUMTOKEN
						END IF
					END IF
					IF VALTOKEN = "$_IDX_FIN" THEN
						IF VAR_IDX2% <> 0 THEN 
							VAR_IDX2% = 0
						ELSE
							VAR_IDX1% = 0
						END IF
					END IF
					TOKEN = NEXTTOKEN
				NEXT
				TPG_MAT_CAM_TP(TPG_TOT_REQ) = TPG_TOT_CAMP
			END IF

			TPG_VEC_NUM_TRN(TPG_TOT_REQ ) = TPG_TOT_TRN 
			TOKEN = NEXTTOKEN
		NEXT
	END IF
	NEXT


	IF WSS_DSP04 = 'S' THEN
		PRINT " ARCHIVO DE ESPECIFICACION TIENE " ; TPG_TOT_HST ; " HOST"
		PRINT " TOTAL DE CAMPOS Y TOTAL DE SRV PARA CADA HOST"
	 	FOR I% = 1 TO TPG_TOT_HST
			PRINT " EL HOST " ; I% ; " TIENE " ; TPG_MAT_HST_NUM(I% , 1) ; " CAMPOS Y "  ;&
			      TPG_MAT_HST_NUM(I% , 2) ; " SRV"
		NEXT I%	
	
	 	FOR I% = 1 TO TPG_TOT_HST
			PRINT " NOMBRES, LARGOS Y OCURRENCIAS DE CAMPOS PARA HST " ; I%
	 		FOR J% = 1 TO TPG_MAT_HST_NUM(I% , 1)
				PRINT " NOMBRE, LARGO Y OCCURRENCIAS " ; TPG_MAT_NAMEFLDHST(I% , J%) ; ", " ;&
					TPG_MAT_LRG(I% , J%);  ", " ; TPG_MAT_TOTOCCFLDHST(I%, J% ) ; "," ;&
  	        			"#########IDENTIFICACION " ; TPG_MAT_IDENFLDHST(I% , J%)
			NEXT J%
		NEXT I%

	 	FOR I% = 1 TO TPG_TOT_HST
			PRINT " HST " ; I%
	 		FOR J% = 1 TO TPG_MAT_HST_NUM(I% , 2)
					PRINT " N° DE CAMPOS DE SRV " ; J% ; " " ; TPG_MAT_NCP_SRV(I% , J%)
			NEXT J%
		NEXT I%	

 		FOR I% = 1 TO TPG_TOT_HST
			PRINT " HST " ; I%
 			FOR J% = 1 TO TPG_MAT_HST_NUM(I% , 2)
				PRINT " SRV " ; J%
				FOR K% = 1 TO TPG_MAT_NCP_SRV(I% , J%)
					PRINT " NOMBRE DE CAMPOS DE SRV " ; J% ; " " ; TPG_MAT_NAMEFLDSRV(I%, J%, K% ) ; &
					"  N° DE OCURRENCIAS DE CAMPOS  " ; TPG_MAT_TOTOCCFLDSRV(I%, J%, K% )  
				NEXT K%
			NEXT J%
		NEXT I%
	END IF
		
 !!! fin de codigo para generador de plataforma grafica

	PASO% = PASO% + 1
	IF WSS_DSPPASO = 'S' THEN
		PRINT " INICIO           PASO " ; PASO% ; "/" ; TOT_PASOS ; " REGISTROS HST Y SRV"
	END IF
		FOR JJ% = 1 TO TPG_TOT_SIST%

 !!! *REGTAB "TBLHST"
			COD_CTAB$ = "HST         "
			COD_TABL$ = "TBL" + COD_CTAB$
			EX_CTAB$ = "HST  "
			EX_TABL$ = "TBL" +  EX_CTAB$

			REG_TAB$ = " " + COD_TABL$ + TIME_STP$ + " " + "S" + "    " + "GENTPG      " + COD_TABL$ +&
				 EX_TABL$ + COD_CTAB$ + "00000" + "TABLA HST                                         " +&
								   "                                                  "    + "      "
			IF LEN(REG_TAB$) <> 194 THEN
				PRINT "ERROR EN CONSTRUCCION DE REGISTRO TAB "
				PRINT "LARGO " ; LEN(REG_TAB$)
				PRINT " REGISTRO TAB : "
				PRINT REG_TAB$
			ELSE
				BUFOUT = ESCR_PI1(MG_0,"REGTAB" + TPG_VEC_SIST(JJ%) )
				BUFOUT = ESCR_PI1(MG_0,MID$(REG_TAB$,001,60))
				BUFOUT = ESCR_PI1(MG_0,MID$(REG_TAB$,061,60))
				BUFOUT = ESCR_PI1(MG_0,MID$(REG_TAB$,121,60))
				BUFOUT = ESCR_PI1(MG_0,MID$(REG_TAB$,181,60))
			END IF

 !!! *REGTAB "HST   "

			COD_CTAB$ = "            "
			COD_TABL$ = "HST" + COD_CTAB$
			EX_CTAB$ = "     "
			EX_TABL$ = "HST" +  EX_CTAB$

			REG_TAB$ = " " + COD_TABL$ + TIME_STP$ + " " + "S" + "    " + "GENTPG      " + COD_TABL$ +&
				 EX_TABL$ + COD_CTAB$ + "00000" + "TABLA HST                                         " +&
								   "                                                  "    + "      "
			IF LEN(REG_TAB$) <> 194 THEN
				PRINT "ERROR EN CONSTRUCCION DE REGISTRO TAB "
				PRINT "LARGO " ; LEN(REG_TAB$)
				PRINT " REGISTRO TAB : "
				PRINT REG_TAB$
			ELSE
				BUFOUT = ESCR_PI1(MG_0,"REGTAB" + TPG_VEC_SIST(JJ%)  )
				BUFOUT = ESCR_PI1(MG_0,MID$(REG_TAB$,001,60))
				BUFOUT = ESCR_PI1(MG_0,MID$(REG_TAB$,061,60))
				BUFOUT = ESCR_PI1(MG_0,MID$(REG_TAB$,121,60))
				BUFOUT = ESCR_PI1(MG_0,MID$(REG_TAB$,181,60))
			END IF





 !!! *REGTAB "TBLSRV   "
			COD_CTAB$ = "SRV         "
			COD_TABL$ = "TBL" + COD_CTAB$
			EX_CTAB$ = "SRV  "
			EX_TABL$ = "TBL" +  EX_CTAB$

			REG_TAB$ = " " + COD_TABL$ + TIME_STP$ + " " + "S" + "    " + "GENTPG      " + COD_TABL$ +&
				 EX_TABL$ + COD_CTAB$ + "00000" + "TABLA SRV                                         " +&
								   "                                                  "    + "      "
			IF LEN(REG_TAB$) <> 194 THEN
				PRINT "ERROR EN CONSTRUCCION DE REGISTRO TAB "
				PRINT "LARGO " ; LEN(REG_TAB$)
				PRINT " REGISTRO TAB : "
				PRINT REG_TAB$
			ELSE
				BUFOUT = ESCR_PI1(MG_0,"REGTAB" + TPG_VEC_SIST(JJ%)  )
				BUFOUT = ESCR_PI1(MG_0,MID$(REG_TAB$,001,60))
				BUFOUT = ESCR_PI1(MG_0,MID$(REG_TAB$,061,60))
				BUFOUT = ESCR_PI1(MG_0,MID$(REG_TAB$,121,60))
				BUFOUT = ESCR_PI1(MG_0,MID$(REG_TAB$,181,60))
			END IF

 !!! *REGTAB "SRV   "
			COD_CTAB$ = "            "
			COD_TABL$ = "SRV" + COD_CTAB$
			EX_CTAB$ = "     "
			EX_TABL$ = "SRV" +  EX_CTAB$

			REG_TAB$ = " " + COD_TABL$ + TIME_STP$ + " " + "S" + "    " + "GENTPG      " + COD_TABL$ +&
				 EX_TABL$ + COD_CTAB$ + "00000" + "TABLA SRV                                         " +&
								   "                                                  "    + "      "
			IF LEN(REG_TAB$) <> 194 THEN
				PRINT "ERROR EN CONSTRUCCION DE REGISTRO TAB "
				PRINT "LARGO " ; LEN(REG_TAB$)
				PRINT " REGISTRO TAB : "
				PRINT REG_TAB$
			ELSE
				BUFOUT = ESCR_PI1(MG_0,"REGTAB" + TPG_VEC_SIST(JJ%)  )
				BUFOUT = ESCR_PI1(MG_0,MID$(REG_TAB$,001,60))
				BUFOUT = ESCR_PI1(MG_0,MID$(REG_TAB$,061,60))
				BUFOUT = ESCR_PI1(MG_0,MID$(REG_TAB$,121,60))
				BUFOUT = ESCR_PI1(MG_0,MID$(REG_TAB$,181,60))
			END IF


		NEXT JJ%


 !!! *REGTAB "HST"frm-corr
	FOR II% = 1 TO TPG_TOT_HST

		FOR PP% = 1 TO 10
			TAB_GLS_DESC(PP%) = ""
		NEXT PP%

		XX% = 0
		YY% = 0
		COR_HST% = 0
 NXT_TAB_HST :

		IF ( TPG_MAT_HST_NUM(II% , CTE_IDX_TCF) - XX% ) < 50 THEN
			ZZ% = TPG_MAT_HST_NUM(II% , CTE_IDX_TCF)  - XX%
		ELSE
			ZZ% = 50
		END IF

		COR_HST% = COR_HST% + 1
		FOR KK% = 1 TO ZZ%
			YY% = YY% + 1
			AA$ = STR$(TPG_MAT_LRG(II% , YY%))
			IF LEN(AA$) < 2 THEN
				AA$ = "0" + AA$
			END IF
			TAB_GLS_DESC(COR_HST%) = TAB_GLS_DESC(COR_HST%) + AA$
		NEXT KK%
		IF YY% < TPG_MAT_HST_NUM(II% , CTE_IDX_TCF)  THEN
			XX% = XX% + 50
			GO TO NXT_TAB_HST
		ELSE
			IF ZZ% < 50 THEN
			 ZZ% = 50 - ZZ%
				FOR KK% = 1 TO ZZ%
					TAB_GLS_DESC(COR_HST%)  = TAB_GLS_DESC(COR_HST%)  + "  "
				NEXT KK%
			END IF
		END IF
		FOR JJ% = 1 TO COR_HST%
			SGTE$ = STR$(JJ%) 
			IF LEN(SGTE$) < 2 THEN
				SGTE$ = "0" + SGTE$
			END IF
  			COD_CTAB$ = TPG_MAT_HST_ALF(II%,CTE_IDX_SIS) + "F" + TPG_MAT_HST_ALF(II%,CTE_IDX_NOM) +&
				SGTE$ + "   "
			COD_TABL$ = "HST" + COD_CTAB$
			EX_CTAB$ = "F" + TPG_MAT_HST_ALF(II%,CTE_IDX_NOM) + " "
			EX_TABL$ = "HST" +  EX_CTAB$

			REG_TAB$ = " " + COD_TABL$ + TIME_STP$ + " " + "S" + "    " + "GENTPG      " + COD_TABL$ +&
				 EX_TABL$ + COD_CTAB$ + "00000" + TAB_GLS_DESC(JJ%) + "      "
			IF LEN(REG_TAB$) <> 194 THEN
				PRINT "ERROR EN CONSTRUCCION DE REGISTRO TAB "
				PRINT "LARGO " ; LEN(REG_TAB$)
				PRINT " REGISTRO TAB : "
				PRINT REG_TAB$
			ELSE
				BUFOUT = ESCR_PI1(MG_0,"REGTAB" + TPG_MAT_HST_ALF(II%,CTE_IDX_SIS) )
				BUFOUT = ESCR_PI1(MG_0,MID$(REG_TAB$,001,60))
				BUFOUT = ESCR_PI1(MG_0,MID$(REG_TAB$,061,60))
				BUFOUT = ESCR_PI1(MG_0,MID$(REG_TAB$,121,60))
				BUFOUT = ESCR_PI1(MG_0,MID$(REG_TAB$,181,60))
			END IF

		NEXT JJ%
	NEXT II% 

 !!! *REGTAB "SRV"frm-corr
	FOR II% = 1 TO TPG_TOT_HST

	FOR LL% = 1 TO TPG_MAT_HST_NUM(II%, CTE_IDX_TSF )

		FOR PP% = 1 TO 10
			TAB_GLS_DESC(PP%) = ""
		NEXT PP%

		XX% = 0
		YY% = 0
		COR_HST% = 0
 NXT_TAB_SRV :
		IF ( TPG_MAT_NCP_SRV(II% , LL% ) - XX% ) < 33 THEN
			ZZ% = TPG_MAT_NCP_SRV(II% , LL% ) - XX%
		ELSE
			ZZ% = 33
		END IF
		
		COR_HST% = COR_HST% + 1

 		FOR KK% = 1 TO ZZ%
			YY% = YY% + 1
			AA$ = EDIT$(TPG_MAT_NAMEFLDSRV(II%, LL%, YY%), 128%)
			CONT_SRV% = 0

			FOR SRV_ACT% = 1 TO YY%
				IF AA$ = EDIT$(TPG_MAT_NAMEFLDSRV(II%, LL%, SRV_ACT%),128%) THEN
					CONT_SRV% = CONT_SRV% + 1
				END IF
			NEXT SRV_ACT%
			
			FUNC% = TPG_FNC_BCS

			AA$ = STR$(IDX%)
			IF LEN(AA$) = 1 THEN
				AA$ = "00" + AA$
			ELSE
			IF LEN(AA$) = 2 THEN
				AA$ = "0" + AA$
			END IF
			END IF
			TAB_GLS_DESC(COR_HST%) = TAB_GLS_DESC(COR_HST%) + AA$
		NEXT KK%

		LZ% = LEN(TAB_GLS_DESC(COR_HST%) )
		IF LZ% < 100 THEN
			LZ% = 100 - LZ%
			FOR KK% = 1 TO LZ%
				TAB_GLS_DESC(COR_HST%)  = TAB_GLS_DESC(COR_HST%)  + " "
			NEXT KK%
		END IF

		IF YY% < TPG_MAT_NCP_SRV(II% , LL% ) THEN
			XX% = XX% + 33
			GO TO NXT_TAB_SRV
		END IF

		FOR JJ% = 1 TO COR_HST%
			SGTE$ = STR$(JJ%) 
			IF LEN(SGTE$) < 2 THEN
				SGTE$ = "0" + SGTE$
			END IF
			COD_CTAB$ = TPG_MAT_HST_ALF(II%,CTE_IDX_SIS) + "F" + TPG_MAT_HST_ALF(II%,CTE_IDX_NOM) +&
				 TPG_MAT_SRV_ALF(II%, LL%) + SGTE$
			COD_TABL$ = "SRV" + COD_CTAB$
			EX_CTAB$ = "F" + TPG_MAT_HST_ALF(II%,CTE_IDX_NOM) + " "
			EX_TABL$ = "SRV" +  EX_CTAB$
				
			REG_TAB$ = " " + COD_TABL$ + TIME_STP$ + " " + "S" + "    " + "GENTPG      " + COD_TABL$ +&
				 EX_TABL$ + COD_CTAB$ + "00000" + TAB_GLS_DESC(JJ%) + "      "
			IF LEN(REG_TAB$) <> 194 THEN
				PRINT "ERROR EN CONSTRUCCION DE REGISTRO TAB "
				PRINT "LARGO " ; LEN(REG_TAB$)
				PRINT " REGISTRO TAB : "
				PRINT REG_TAB$
			END IF

			BUFOUT = ESCR_PI1(MG_0,"REGTAB" + TPG_MAT_HST_ALF(II%,CTE_IDX_SIS) )
			BUFOUT = ESCR_PI1(MG_0,MID$(REG_TAB$,001,60))
			BUFOUT = ESCR_PI1(MG_0,MID$(REG_TAB$,061,60))
			BUFOUT = ESCR_PI1(MG_0,MID$(REG_TAB$,121,60))
			BUFOUT = ESCR_PI1(MG_0,MID$(REG_TAB$,181,60))

		NEXT JJ%
	NEXT LL% 
	NEXT II% 
 !!! *REGTAB "MSG"&&frm-corr
	FOR II% = 1 TO TPG_TOT_HST
	FOR JJ% = 1 TO TPG_MAT_HST_NUM(II% , CTE_IDX_TCF)
		IF TPG_MAT_IDENFLDHST(II% , JJ%) <> "" THEN
		TAB_GLS_DESC$ = TPG_MAT_IDENFLDHST(II% , JJ%)

		IF LEN(TAB_GLS_DESC$) > 20 THEN
				PRINT "ERROR EN CONSTRUCCION DE MENSAJE DEL TIPO &&"
				PRINT "PARA CAMPO " ; TPG_MAT_NAMEFLDHST(II% , JJ%) ; " NRO " ; JJ% ;&
				      " DE HST  "; II% ;&
				      " PANTALLA  " ; TPG_MAT_HST_ALF(TPG_TOT_HST, CTE_IDX_NOM) 
				PRINT "MENSAJE TRUCADO"
				PRINT TAB_GLS_DESC$
				TAB_GLS_DESC$ = LEFT$(TAB_GLS_DESC$,40)
		END IF

		LL% = 100 - LEN(TAB_GLS_DESC$) 
		FOR KK% = 1 TO LL%
			TAB_GLS_DESC$ = TAB_GLS_DESC$ + " "
		NEXT KK%
		CORR_FLD$ = STR$(JJ%)
		LL% = 4 - LEN(CORR_FLD$) 
		FOR KK% = 1 TO LL%
			CORR_FLD$ = "0" + CORR_FLD$
		NEXT KK%

		COD_CTAB$ = "&&" + TPG_MAT_HST_ALF(II%,CTE_IDX_NOM) + CORR_FLD$ + "   "

		COD_TABL$ = "MSG" + COD_CTAB$

		EX_CTAB$ = "&" + CORR_FLD$
		EX_TABL$ = "MSG" +  EX_CTAB$

		REG_TAB$ = " " + COD_TABL$ + TIME_STP$ + " " + "S" + "    " + "GENTPG      " + COD_TABL$ +&
			 EX_TABL$ + COD_CTAB$ + EX_CTAB$ + TAB_GLS_DESC$ + "      "

		IF LEN(REG_TAB$) <> 194 THEN
			PRINT "ERROR EN CONSTRUCCION DE REGISTRO TAB "
			PRINT "LARGO " ; LEN(REG_TAB$)
			PRINT " REGISTRO TAB : "
			PRINT REG_TAB$
		ELSE
			BUFOUT = ESCR_PI1(MG_0,"REGTAB" + TPG_MAT_HST_ALF(II%,CTE_IDX_SIS) )
			BUFOUT = ESCR_PI1(MG_0,MID$(REG_TAB$,001,60))
			BUFOUT = ESCR_PI1(MG_0,MID$(REG_TAB$,061,60))
			BUFOUT = ESCR_PI1(MG_0,MID$(REG_TAB$,121,60))
			BUFOUT = ESCR_PI1(MG_0,MID$(REG_TAB$,181,60))
		END IF
		END IF

	NEXT JJ%
	NEXT II% 


	IF WSS_DSPPASO = 'S' THEN
		PRINT " FIN              PASO " ; PASO% ; "/" ; TOT_PASOS ; " REGISTROS HST Y SRV"
	END IF

	PASO% = PASO% + 1
	IF WSS_DSPPASO = 'S' THEN
		PRINT " INICIO           PASO " ; PASO% ; "/" ; TOT_PASOS ; " REGISTROS MNU Y RPF"
	END IF


	BB$ = "X"
	NUM_TRN  = 0
	FOR II% = 1 TO TPG_TOT_REQ 
		FOR JJ% = 1 TO TPG_VEC_NUM_TRN(II%)
			NUM_TRN = NUM_TRN + 1
			IF NUM_TRN = 100 THEN
				NUM_TRN = 1
				BB$ = "Y"
			END IF
			TPG_GLS_SIS$  = ""

			TPG_GLS_FRQ$ = EDIT$(TPG_MAT_TRN(II% , JJ% , CTE_TRN_INS),128%)

			TPG_GLS_FRM$ = EDIT$(TPG_MAT_TRN(II% , JJ% , CTE_TRN_FRM),128%)

			FOR NN% = 1 TO TPG_TOT_HST
				IF TPG_GLS_FRM$ = TPG_MAT_HST_ALF(NN%, CTE_IDX_NOM) THEN 
					TPG_GLS_SIS$ = TPG_MAT_HST_ALF(NN%, CTE_IDX_SIS)
					TPG_GLS_SIM$ = TPG_MAT_HST_ALF(NN%, CTE_IDX_SIM)
					NN% = TPG_TOT_HST + 1
				END IF
			NEXT NN%

			MNU_COD_NEMO$ = TPG_GLS_SIM$ + EDIT$(TPG_MAT_TRN(II% ,  JJ% , CTE_TRN_FRM),128%) +&
					 EDIT$(TPG_MAT_TRN(II% ,  JJ% , CTE_TRN_CMN),128%) +&
				 	 EDIT$(TPG_MAT_TRN(II% ,  JJ% , CTE_TRN_INM),128%)

			AA$ = STR$(NUM_TRN)

			IF LEN(AA$) = 1 THEN
				AA$ = "0" + AA$
			END IF

			MNU_COD_OPCI$ = BB$ + AA$
			MNU_COD_IMEN$ = MNU_COD_OPCI$  + "   "
			MNU_COD_TFUN$ = "PTC"
			MNU_GLS_FMEN$ = EDIT$(TPG_MAT_TRN(II% , JJ% , CTE_TRN_CMT),128%)
			IF LEN(MNU_GLS_FMEN$) < 30 THEN
				LL% = 30 - LEN(MNU_GLS_FMEN$) 
				FOR AA% = 1  TO LL%
					MNU_GLS_FMEN$ = MNU_GLS_FMEN$ + " "
				NEXT AA%
			ELSE
				IF LEN(MNU_GLS_FMEN$) > 30 THEN
					MNU_GLS_FMEN$ = RIGHT(MNU_GLS_FMEN$,30)
				END IF
			END IF
			MNU_GLS_PROG$ =  EDIT$(TPG_MAT_TRN(II% , JJ% , CTE_TRN_PGM),128%)
			IF LEN(MNU_GLS_PROG$) < 12 THEN
				LL% = 12 - LEN(MNU_GLS_PROG$) 
				FOR AA% = 1  TO LL%
					MNU_GLS_PROG$ = MNU_GLS_PROG$ + " "
				NEXT AA%
			ELSE
				IF LEN(MNU_GLS_PROG$) > 12 THEN
					MNU_GLS_PROG$ = RIGHT(MNU_GLS_PROG$,12)
				END IF
			END IF
			MNU_GLS_TRAN$ = "XXXX"
			MNU_COD_CMND$ = EDIT$(TPG_MAT_TRN(II% , JJ% ,CTE_TRN_CMN),128%)
			MNU_GLS_LFRM$ = TPG_GLS_SIS$ + "A"+ EDIT$(TPG_MAT_TRN(II% , JJ% , CTE_TRN_FRM),128%)
			MNU_GLS_NFRM$ = TPG_GLS_SIS$ + "F"+ EDIT$(TPG_MAT_TRN(II% , JJ% , CTE_TRN_FRM),128%)
			MNU_GLS_FPRO$ = MNU_GLS_FMEN$
			MNU_NUM_FILA$ = "00"
			MNU_NUM_COLU$ = "00"
			MNU_COD_FRET$ = "SIS         "
			MNU_COD_INST$ = EDIT$(TPG_MAT_TRN(II% , JJ% , CTE_TRN_INS),128%)
			MNU_COD_TCTL$ = "LINK"
			MNU_COD_TINF$ = "OT "
			BUFOUT = ESCR_PI1(MG_0,"REGMNU" + TPG_GLS_SIS$ )
			REGMNU$ = " "  +MNU_COD_NEMO$  + MNU_COD_OPCI$  + MNU_COD_IMEN$  + MNU_COD_TFUN$ +&
					MNU_GLS_FMEN$  + "            "  + MNU_GLS_PROG$ +&
					"                             " + MNU_GLS_TRAN$  + MNU_COD_CMND$ +&
					"       "  + "                        " + MNU_GLS_LFRM$  + MNU_GLS_NFRM$ +&
					MNU_GLS_FPRO$  + MNU_NUM_FILA$  + MNU_NUM_COLU$  + MNU_COD_FRET$  + " " +&
					"   "  + " "  + MNU_COD_INST$  + " "  + "   "  + "   "  + MNU_COD_TCTL$ +&
					"   " + "            " + "   " + "            " + " " + "       " +&
					"       " + "        " + "            " + MNU_COD_TINF$ + "   " + " " +&
					" " + "       " + "       " + " " + "       " + "       " + " " +&
					"                                                                                 " +&
					"                                                                                 "
					
			IF LEN(REGMNU$) <> 490 THEN
				PRINT "ERROR EN CONSTRUCCION DE REGISTRO MNU "
				PRINT "LARGO " ; LEN(REGMNU$ )
				PRINT " REGISTRO MNU : "
				PRINT REGMNU$ 
			END IF

			BUFOUT = ESCR_PI1(MG_0,MID$(REGMNU$ ,001,60))
			BUFOUT = ESCR_PI1(MG_0,MID$(REGMNU$ ,061,60))
			BUFOUT = ESCR_PI1(MG_0,MID$(REGMNU$ ,121,60))
			BUFOUT = ESCR_PI1(MG_0,MID$(REGMNU$ ,181,60))
			BUFOUT = ESCR_PI1(MG_0,MID$(REGMNU$ ,241,60))
			BUFOUT = ESCR_PI1(MG_0,MID$(REGMNU$ ,301,60))
			BUFOUT = ESCR_PI1(MG_0,MID$(REGMNU$ ,361,60))
			BUFOUT = ESCR_PI1(MG_0,MID$(REGMNU$ ,421,60))
			BUFOUT = ESCR_PI1(MG_0,MID$(REGMNU$ ,481,60))


 !!! GENERACION DE RPF
			RPF_COD_DPRO$ = EDIT$(TPG_MAT_TRN(II% , JJ% ,CTE_TRN_PGM),128%)
			IF LEN(RPF_COD_DPRO$ ) < 12 THEN
				LL% = 12 - LEN(RPF_COD_DPRO$ ) 
				FOR AA% = 1  TO LL%
					RPF_COD_DPRO$   = RPF_COD_DPRO$  + " "
				NEXT AA%
			ELSE
				IF LEN(RPF_COD_DPRO$ ) > 12 THEN
					RPF_COD_DPRO$  = RIGHT(RPF_COD_DPRO$ ,12)
				END IF
			END IF
			RPF_COD_TREG$ = "A"
			RPF_COD_CORR$ = " "
			RPF_COD_DARC$ = "        "
			RPF_COD_DATA$ = "CONSIST                                                               "
			BUFOUT = ESCR_PI1(MG_0,"REGRPF" + TPG_GLS_SIS$ )
			REGMNU$ = RPF_COD_DPRO$ + RPF_COD_TREG$ + RPF_COD_CORR$  +RPF_COD_DARC$  + RPF_COD_DATA$  
			IF LEN(REGMNU$) <> 92 THEN
				PRINT "ERROR EN CONSTRUCCION DE REGISTRO RPF -A- "
				PRINT "LARGO " ; LEN(REGMNU$ )
				PRINT " REGISTRO RPF : "
				PRINT REGMNU$ 
			END IF
			BUFOUT = ESCR_PI1(MG_0,MID$(REGMNU$ ,001,60))
			BUFOUT = ESCR_PI1(MG_0,MID$(REGMNU$ ,061,60))


			RPF_COD_DPRO$ = EDIT$(TPG_MAT_TRN(II% , JJ% ,CTE_TRN_PGM),128%)
			IF LEN(RPF_COD_DPRO$ ) < 12 THEN
				LL% = 12 - LEN(RPF_COD_DPRO$ ) 
				FOR AA% = 1  TO LL%
					RPF_COD_DPRO$   = RPF_COD_DPRO$  + " "
				NEXT AA%
			ELSE
				IF LEN(RPF_COD_DPRO$ ) > 12 THEN
					RPF_COD_DPRO$  = RIGHT(RPF_COD_DPRO$ ,12)
				END IF
			END IF

			RPF_COD_TREG$ = "B"
			RPF_COD_CORR$ = " "
			RPF_COD_DARC$ = "        "
			RPF_COD_DATA$ = TPG_GLS_SIS$ + EDIT$(TPG_MAT_TRN(II% , JJ% ,CTE_TRN_FRM),128%)
			IF LEN(RPF_COD_DATA$  ) < 70 THEN
				LL% = 70 - LEN(RPF_COD_DATA$  ) 
				FOR AA% = 1  TO LL%
					RPF_COD_DATA$  = RPF_COD_DATA$   + " "
				NEXT AA%
			END IF
			BUFOUT = ESCR_PI1(MG_0,"REGRPF" + TPG_GLS_SIS$ )
			REGMNU$ = RPF_COD_DPRO$ + RPF_COD_TREG$ + RPF_COD_CORR$  +RPF_COD_DARC$  + RPF_COD_DATA$ 
			IF LEN(REGMNU$) <> 92 THEN
				PRINT "ERROR EN CONSTRUCCION DE REGISTRO RPF -B-"
				PRINT "LARGO " ; LEN(REGMNU$ )
				PRINT " REGISTRO RPF : "
				PRINT REGMNU$ 
			END IF
			BUFOUT = ESCR_PI1(MG_0,MID$(REGMNU$ ,001,60))
			BUFOUT = ESCR_PI1(MG_0,MID$(REGMNU$ ,061,60))

			RPF_COD_DPRO$ = EDIT$(TPG_MAT_TRN(II% , JJ% ,CTE_TRN_PGM),128%)
			IF LEN(RPF_COD_DPRO$ ) < 12 THEN
				LL% = 12 - LEN(RPF_COD_DPRO$ ) 
				FOR AA% = 1  TO LL%
					RPF_COD_DPRO$  = RPF_COD_DPRO$  + " "
				NEXT AA%
			ELSE
				IF LEN(RPF_COD_DPRO$ ) > 12 THEN
					RPF_COD_DPRO$  = RIGHT(RPF_COD_DPRO$ ,12)
				END IF
			END IF
			RPF_COD_TREG$ = "C"
			RPF_COD_CORR$ = " "
			RPF_COD_DARC$ = "        "
			RPF_COD_DATA$ = "                                                                      "
			BUFOUT = ESCR_PI1(MG_0,"REGRPF" + TPG_GLS_SIS$ )
			REGMNU$ = RPF_COD_DPRO$ + RPF_COD_TREG$ + RPF_COD_CORR$  +RPF_COD_DARC$  + RPF_COD_DATA$  
			IF LEN(REGMNU$) <> 92 THEN
				PRINT "ERROR EN CONSTRUCCION DE REGISTRO RPF -C-"
				PRINT "LARGO " ; LEN(REGMNU$ )
				PRINT " REGISTRO RPF : "
				PRINT REGMNU$ 
			END IF
			BUFOUT = ESCR_PI1(MG_0,MID$(REGMNU$ ,001,60))
			BUFOUT = ESCR_PI1(MG_0,MID$(REGMNU$ ,061,60))


			RPF_COD_DPRO$ = EDIT$(TPG_MAT_TRN(II% , JJ% ,CTE_TRN_PGM),128%)
			IF LEN(RPF_COD_DPRO$ ) < 12 THEN
				LL% = 12 - LEN(RPF_COD_DPRO$ ) 
				FOR AA% = 1  TO LL%
					RPF_COD_DPRO$   = RPF_COD_DPRO$  + " "
				NEXT AA%
			ELSE
				IF LEN(RPF_COD_DPRO$ ) > 12 THEN
					RPF_COD_DPRO$  = RIGHT(RPF_COD_DPRO$ ,12)
				END IF
			END IF
			RPF_COD_TREG$ = "P"
			RPF_COD_CORR$ = "0"
			RPF_COD_DARC$ = "        "
			RPF_COD_DATA$ = TPG_GLS_SIS$ + EDIT$(TPG_MAT_TRN(II% , JJ% ,CTE_TRN_FRM),128%) +&
					 TPG_GLS_SIS$ + EDIT$(TPG_MAT_TRN(II% , JJ% ,CTE_TRN_FRM),128%)
			IF LEN(RPF_COD_DATA$  ) < 70 THEN
				LL% = 70 - LEN(RPF_COD_DATA$  ) 
				FOR AA% = 1  TO LL%
					RPF_COD_DATA$  = RPF_COD_DATA$   + " "
				NEXT AA%
			END IF
			BUFOUT = ESCR_PI1(MG_0,"REGRPF" + TPG_GLS_SIS$ )
			REGMNU$ = RPF_COD_DPRO$ + RPF_COD_TREG$ + RPF_COD_CORR$  +RPF_COD_DARC$  + RPF_COD_DATA$  
			IF LEN(REGMNU$) <> 92 THEN
				PRINT "ERROR EN CONSTRUCCION DE REGISTRO RPF -P0- "
				PRINT "LARGO " ; LEN(REGMNU$ )
				PRINT " REGISTRO RPF : "
				PRINT REGMNU$ 
			END IF

			BUFOUT = ESCR_PI1(MG_0,MID$(REGMNU$ ,001,60))
			BUFOUT = ESCR_PI1(MG_0,MID$(REGMNU$ ,061,60))

		NEXT JJ%
	NEXT II%

 !!! GENERACION DE REGISTROS RPF CON COMANDOS

	TOT_PGM% = 0
	FOR II% = 1 TO TPG_TOT_REQ 
		FOR JJ% = 1 TO TPG_VEC_NUM_TRN(II%)
			ENC_PGM$ = "NO"
			FOR ZZZ% = 1 TO TOT_PGM%
				IF TPG_MAT_TRN_PGM( ZZZ% , CTE_TRN_PGM ) = EDIT$(TPG_MAT_TRN(II% , JJ% ,CTE_TRN_PGM),128%) AND&
				   TPG_MAT_TRN_PGM( ZZZ% , CTE_TRN_CMN ) = EDIT$(TPG_MAT_TRN(II% , JJ% ,CTE_TRN_CMN),128%) AND&
				   TPG_MAT_TRN_PGM( ZZZ% , CTE_TRN_SPP ) = EDIT$(TPG_MAT_TRN(II% , JJ% ,CTE_TRN_SPP),128%) THEN
					ENC_PGM$ = "SI"
					ZZZ% = TOT_PGM% + 1
				END IF
			NEXT ZZZ%
			IF ENC_PGM$ = "NO" THEN
				TOT_PGM% = TOT_PGM% + 1
				TPG_MAT_TRN_PGM( TOT_PGM% , CTE_TRN_PGM ) = EDIT$(TPG_MAT_TRN(II% , JJ% ,CTE_TRN_PGM ),128%)
				TPG_MAT_TRN_PGM( TOT_PGM% , CTE_TRN_CPP ) = EDIT$(TPG_MAT_TRN(II% , JJ% ,CTE_TRN_CPP ),128%)
				TPG_MAT_TRN_PGM( TOT_PGM% , CTE_TRN_SPP ) = EDIT$(TPG_MAT_TRN(II% , JJ% ,CTE_TRN_SPP ),128%)
				TPG_MAT_TRN_PGM( TOT_PGM% , CTE_TRN_SUB ) = EDIT$(TPG_MAT_TRN(II% , JJ% ,CTE_TRN_SUB ),128%)
				TPG_MAT_TRN_PGM( TOT_PGM% , CTE_TRN_CMN ) = EDIT$(TPG_MAT_TRN(II% , JJ% ,CTE_TRN_CMN ),128%)
			END IF
		NEXT JJ%
	NEXT II%

	FOR YYY% = 1 TO TOT_PGM%
	FOR ZZZ% = 1 TO TOT_PGM%
		IF TPG_MAT_TRN_PGM( YYY% , CTE_TRN_PGM ) > TPG_MAT_TRN_PGM( ZZZ% , CTE_TRN_PGM ) THEN

			AUX_PGM$ = TPG_MAT_TRN_PGM( ZZZ% , CTE_TRN_PGM )
			AUX_CMN$ = TPG_MAT_TRN_PGM( ZZZ% , CTE_TRN_CMN )
			AUX_CPP$ = TPG_MAT_TRN_PGM( ZZZ% , CTE_TRN_CPP )
			AUX_SPP$ = TPG_MAT_TRN_PGM( ZZZ% , CTE_TRN_SPP )
			AUX_SUB$ = TPG_MAT_TRN_PGM( ZZZ% , CTE_TRN_SUB )

			TPG_MAT_TRN_PGM( ZZZ% , CTE_TRN_PGM ) = TPG_MAT_TRN_PGM( YYY% , CTE_TRN_PGM ) 
			TPG_MAT_TRN_PGM( ZZZ% , CTE_TRN_CMN ) = TPG_MAT_TRN_PGM( YYY% , CTE_TRN_CMN ) 
			TPG_MAT_TRN_PGM( ZZZ% , CTE_TRN_CPP ) = TPG_MAT_TRN_PGM( YYY% , CTE_TRN_CPP ) 
			TPG_MAT_TRN_PGM( ZZZ% , CTE_TRN_SPP ) = TPG_MAT_TRN_PGM( YYY% , CTE_TRN_SPP ) 
			TPG_MAT_TRN_PGM( ZZZ% , CTE_TRN_SUB ) = TPG_MAT_TRN_PGM( YYY% , CTE_TRN_SUB ) 

			TPG_MAT_TRN_PGM( YYY% , CTE_TRN_PGM ) = AUX_PGM$
			TPG_MAT_TRN_PGM( YYY% , CTE_TRN_CMN ) = AUX_CMN$
			TPG_MAT_TRN_PGM( YYY% , CTE_TRN_CPP ) = AUX_CPP$
			TPG_MAT_TRN_PGM( YYY% , CTE_TRN_SPP ) = AUX_SPP$
			TPG_MAT_TRN_PGM( YYY% , CTE_TRN_SUB ) = AUX_SUB$

		END IF
	NEXT ZZZ%
	NEXT YYY%

	FOR ZZZ% = 1 TO TOT_PGM%
		IF AUX_PGM$ <> TPG_MAT_TRN_PGM( ZZZ% , CTE_TRN_PGM ) THEN
			COR_PGM% = 0
			AUX_PGM$ = TPG_MAT_TRN_PGM( ZZZ% , CTE_TRN_PGM )
		ELSE
			COR_PGM% = COR_PGM% + 1
		END IF

		RPF_COD_DPRO$ = TPG_MAT_TRN_PGM(ZZZ% ,CTE_TRN_PGM ) 
		IF LEN(RPF_COD_DPRO$ ) < 12 THEN
			LL% = 12 - LEN(RPF_COD_DPRO$ ) 
			FOR AA% = 1  TO LL%
				RPF_COD_DPRO$   = RPF_COD_DPRO$  + " "
			NEXT AA%
		ELSE
			IF LEN(RPF_COD_DPRO$ ) > 12 THEN
				RPF_COD_DPRO$  = RIGHT(RPF_COD_DPRO$ ,12)
			END IF
		END IF

		RPF_COD_TREG$ = "C"
		RPF_COD_CORR$ = STR$(COR_PGM%)
		RPF_COD_DARC$ = "        "
		RPF_COD_CMND$ =  TPG_MAT_TRN_PGM(ZZZ% ,CTE_TRN_CMN)
		RPF_COD_UARC$ =  TPG_MAT_TRN_PGM(ZZZ% ,CTE_TRN_SUB) + "    "
		RPF_GLS_DAT1$ = "                                                  " + RPF_COD_UARC$ 
		RPF_COD_CCPP$ =  TPG_MAT_TRN_PGM(ZZZ% ,CTE_TRN_CPP)
		RPF_COD_STPP$ =  TPG_MAT_TRN_PGM(ZZZ% ,CTE_TRN_SPP)
		RPF_GLS_DAT2$ = " "
 
		BUFOUT = ESCR_PI1(MG_0,"REGRPF" + TPG_GLS_SIS$ )
		REGMNU$ = RPF_COD_DPRO$ + RPF_COD_TREG$ + RPF_COD_CORR$  +RPF_COD_DARC$  + RPF_COD_CMND$ +&
			 RPF_GLS_DAT1$ + RPF_COD_CCPP$ + RPF_COD_STPP$ + RPF_GLS_DAT2$ 
		IF LEN(REGMNU$) <> 92 THEN
			PRINT "ERROR EN CONSTRUCCION DE REGISTRO RPF -C#- "
			PRINT "LARGO " ; LEN(REGMNU$ )
			PRINT " REGISTRO RPF : "
			PRINT REGMNU$ 
		END IF
		BUFOUT = ESCR_PI1(MG_0,MID$(REGMNU$ ,001,60))
		BUFOUT = ESCR_PI1(MG_0,MID$(REGMNU$ ,061,60))
	NEXT ZZZ%

 !!! FIN GENERACION DE REGISTROS RPF CON COMANDOS


	BUFOUT = ESCR_PI1(MG_0,"FINPI1")

	IF WSS_DSPPASO = 'S' THEN
	 	PRINT " FIN              PASO " ; PASO% ; "/" ; TOT_PASOS ; " REGISTROS HST Y SRV"
	END IF

 !!!	FOR II% = 1 TO TPG_TOT_REQ 
 !!!		FOR JJ% = 1 TO TPG_MAT_CAM_PT( II%) 
 !!!			PRINT "	 II%, JJ% " ; II% ; "-" ; JJ% 
 !!!     		PRINT "	 TPG_MAT_PTFRM(II% , JJ%)        " ; TPG_MAT_PTFRM(II% ,  JJ%) 
 !!!			PRINT "	 TPG_MAT_PTFMT(II% , JJ%)        " ; TPG_MAT_PTFMT(II% , JJ%) 
 !!!			PRINT "	 TPG_MAT_PTFIDPT( II% , JJ%, 1 )  " ; TPG_MAT_NIV_IDPT(II% , JJ% , 1)     
 !!!			PRINT "	 TPG_MAT_PTFIDPT( II% , JJ%, 2 )  " ; TPG_MAT_NIV_IDPT(II% , JJ% , 2)     
 !!!		NEXT JJ%
 !!!	NEXT II%





		NIV_ESC% = NIV_01
		REGMNU$ = NIV_PIC(NIV_ESC%) + "WSS-RCV."
		BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)
		IF TPG_HDR_RCV% <> 0 THEN
			NIV_ESC% = NIV_03
			REGMNU$ = NIV_PIC(NIV_ESC%) + "WSS-RCV-HDR           PIC X(" + STR$(TPG_HDR_RCV%) + ")."
			BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)
		END IF
		NIV_ESC% = NIV_03
		REGMNU$ = NIV_PIC(NIV_ESC%) + "WSS-RCV-CREQ."
		BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)
		NIV_ESC% = NIV_05
		REGMNU$ = NIV_PIC(NIV_ESC%) + "WSS-RCV-CREQ-1           PIC X(01)."
		BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)
		NIV_ESC% = NIV_05
		REGMNU$ = NIV_PIC(NIV_ESC%) + "WSS-RCV-CREQ-2           PIC X(02)."
		BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)
		TPG_HDR_DAT% = TPG_LRG_RCV% - ( TPG_HDR_RCV% + 3 )
		NIV_ESC% = NIV_03
		REGMNU$ = NIV_PIC(NIV_ESC%) + "WSS-RCV-DAT           PIC X(" + STR$(TPG_HDR_DAT%) + ")."
		BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)

		REGMNU$ = ""
		BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)

		NIV_ESC% = NIV_01
		REGMNU$ = NIV_PIC(NIV_ESC%) + "WSS-SEGR REDEFINES WSS-RCV."
		BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)
		NIV_ESC% = NIV_03
		SEGR$ = STR$( TPG_LRG_RCV% / 1024 )
		IF LEN(SEGR$) < 2 THEN
			SEGR$  = '0' + SEGR$ 
		END IF
		REGMNU$ = NIV_PIC(NIV_ESC%) + "WSS-TAB-SEGR           OCCURS  " + SEGR$  + "  TIMES."
		BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)
		NIV_ESC% = NIV_05
		REGMNU$ = NIV_PIC(NIV_ESC%) + "WSS-ELE-SEGR                    PIC X(1024)."
		BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)

		NIV_ESC% = NIV_01
		REGMNU$ = NIV_PIC(NIV_ESC%) + "WSS-RCV-RED REDEFINES WSS-RCV."
		BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)
		NIV_ESC% = NIV_03
		REGMNU$ = NIV_PIC(NIV_ESC%) + "WSS-RCV-RED-ELM   OCCURS " + STR$(TPG_LRG_RCV%) + " TIMES PIC X(01)."
		BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)

	PASO% = PASO% + 1
	IF WSS_DSPPASO = 'S' THEN
		PRINT " INICIO           PASO " ; PASO% ; "/" ; TOT_PASOS ; "FORMATO PCAPT"
	END IF
	FIRST% = 1
	REGMNU$ = "SEC-DSP-VAR SECTION."
	BUFOUT = ESCR_DFI(MG_8,REGMNU$)
	REGMNU$ = "INI-SEC-DSP-VAR."
	BUFOUT = ESCR_DFI(MG_8,REGMNU$)

	FOR II% = 1 TO TPG_TOT_REQ 
		LRG_ESTR% = 0
		REGMNU$ = " "
		BUFOUT = ESCR_WS1(MG_7,REGMNU$)
		IF FIRST% <> 1 THEN
			REGMNU$ = "GO TO FIN-SEC-DSP-VAR."
			BUFOUT = ESCR_DFI(MG_16,REGMNU$)
		END IF
		IF FIRST% = 1 THEN
			FIRST% = 0
		END IF 
		NIV_ESC% = NIV_01
		REGMNU$ = NIV_PIC(NIV_ESC%) + "PT-" + TPG_VEC_REQ(II%)  + " " + "REDEFINES WSS-RCV."
		BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)

		REGMNU$ = "IF VAR-COD-REQU = '" + TPG_VEC_REQ(II%) + "'"
		BUFOUT = ESCR_DFI(MG_12,REGMNU$)
		REGMNU$ = "MOVE VAR-GLS-DATA TO PT-" + TPG_VEC_REQ(II%) 
		BUFOUT = ESCR_DFI(MG_16,REGMNU$)
		ANTE$ = " "

		IF TPG_HDR_RCV% <> 0 THEN
			NIV_ESC% = NIV_03
			REGMNU$ = NIV_PIC(NIV_ESC%) + "PT-" + TPG_VEC_REQ(II%)  + "-RCV-HDR           PIC X(" + STR$(TPG_HDR_RCV%) + ")."
			BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)
			LRG_ESTR% = TPG_HDR_RCV%
		END IF

		NIV_ESC% = NIV_03
		REGMNU$ = NIV_PIC(NIV_ESC%) + "PT-" + TPG_VEC_REQ(II%)  + "-CREQ                 PIC X(03)."
		BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)

		NIV_ESC% = NIV_03
		REGMNU$ = NIV_PIC(NIV_ESC%) + "PT-" + TPG_VEC_REQ(II%)  +"-DMSG."
		BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)

		ANT% = TPG_MAT_NIV_IDPT(II% ,1, 1 )
		ANT% = 0
		NIV_ESC% = NIV_05
		OCCUR2$ = 'N'
		LRG_ESTR% = LRG_ESTR% + 3
		FOR JJ% = 1 TO TPG_MAT_CAM_PT( II% ) 
			PUT_PTHDR$ = "SI"
			PUT_HDR$ = "NO"
			OLD_IDX$ = "NO"
			MUL_NIV_UNO% = 1
			MUL_NIV_DOS% = 1
			MUL_NIV_TRE% = 1
			IF TPG_MAT_NIV_IDPT(II% , JJ% , 1)  = 0  THEN  
				OCCUR1$ = 'N'
				REPT$ = " "   
			END IF
			IF TPG_MAT_NIV_IDPT(II% , JJ% , 2)  = 0  THEN  
				OCCUR2$ = 'N'
			END IF
			IF TPG_MAT_NIV_IDPT(II% , JJ% , 1 ) <> ANT%  AND TPG_MAT_NIV_IDPT( II% , JJ% , 1) <> 0 THEN  
					REGMNU$ = "05  PT-" + TPG_VEC_REQ(II%)  +"-DMSG-IDX-1 OCCURS" + " " +&
						STR$(TPG_MAT_NIV_IDPT(II% , JJ% , 1)) + " TIMES."
					BUFOUT = ESCR_WS1(MG_16,REGMNU$)
					REPT$ = STR$(TPG_MAT_NIV_IDPT(II% , JJ% , 1)) 
					REPT1% = TPG_MAT_NIV_IDPT(II% , JJ% , 1) 

					OCCUR1$ = 'S'
					MUL_NIV_UNO% =  TPG_MAT_NIV_IDPT( II% , JJ% , 1) 
			END IF

			IF TPG_MAT_NIV_IDPT(II% , JJ% , 2 )  <> 0 THEN 
					REGMNU$ = "07  PT-" + TPG_VEC_REQ(II%)  +"-DMSG-IDX-2 OCCURS" + " " +&
					  	  STR$(TPG_MAT_NIV_IDPT(II% , JJ% , 2))  + " TIMES."
					BUFOUT = ESCR_WS1(MG_20,REGMNU$)
					REPT$ = STR$(TPG_MAT_NIV_IDPT(II% , JJ% , 2)) 

					OCCUR2$ = 'S'
					MUL_NIV_DOS% = TPG_MAT_NIV_IDPT( II% , JJ% , 2 ) 
			END IF

			ANT% = TPG_MAT_NIV_IDPT(II% ,JJ%, 1 )
			HST% = 0

			FOR GG% = 1 TO TPG_TOT_HST
				IF (TPG_MAT_HST_ALF( GG% , CTE_IDX_NOM ) = TPG_MAT_PTFRM(II% , JJ%)) THEN
					HST% = GG%
					GG% = TPG_TOT_HST + 1
				END IF
			NEXT GG%
			SRV% = 0
			FOR GG% = 1 TO TPG_MAT_HST_NUM(HST% ,CTE_IDX_TSF) 
				IF (TPG_MAT_SRV_ALF(HST% , GG% ) =  EDIT$(TPG_MAT_PTFMT(II% , JJ%),128%)) THEN
					SRV% = GG%
					GG% = TPG_MAT_HST_NUM(HST% ,CTE_IDX_TSF) + 1
				END IF
			NEXT GG%
			FOR GG% = 1 TO TPG_MAT_NCP_SRV( HST% , SRV% )
				
				N_IDX% = 0
				FOR XX% = 1 TO TPG_MAT_HST_NUM(HST% , CTE_IDX_TCF)
					TPGMATNAMEFLDSRV$ = EDIT$(TPG_MAT_NAMEFLDSRV(HST% , SRV%, GG% ), 128%)
					IF TPG_MAT_NAMEFLDHST(HST%, XX%) = TPGMATNAMEFLDSRV$ THEN
						N_IDX% = N_IDX% + 1
					END IF
				NEXT XX%
				NN_IDX% = TPG_MAT_TOTOCCFLDSRV(HST% , SRV%, GG% ) 
				FOR TT% = 1 TO TPG_MAT_HST_NUM(HST% , CTE_IDX_TCF)
					TPGMATNAMEFLDSRV$ = EDIT$(TPG_MAT_NAMEFLDSRV(HST%, SRV%, GG%), 128%)
					IF TPGMATNAMEFLDSRV$ = TPG_MAT_NAMEFLDHST(HST% , TT% ) THEN
						CAMP% = TT%
						TT% = TPG_MAT_HST_NUM(HST% , CTE_IDX_TCF) + 1
					END IF
				NEXT TT%
				ESCR$ = "SI"
				IF N_IDX% > 1 THEN
					UU% = GG% - 1
					FOR XX% = 1 TO UU%
						TPGMATNAMEFLDSRV$ = EDIT$(TPG_MAT_NAMEFLDSRV(HST%, SRV%, XX%), 128%)
						IF TPGMATNAMEFLDSRV$ = TPG_MAT_NAMEFLDSRV(HST% , SRV%, GG% ) THEN
							ESCR$ = "NO"
						END IF
					NEXT XX%
				END IF
				AA$ = STR$(TPG_MAT_LRG(HST% , CAMP% )) 
				IF LEN(AA$) < 2 THEN
					AA$ = "0" + AA$
				END IF

				IF OCCUR2$ = 'S' THEN
					NIV_ESC% = NIV_09
				ELSE
					IF OCCUR1$ = 'S' THEN
						NIV_ESC% = NIV_07
					ELSE
						NIV_ESC%  = NIV_05
					END IF			
				END IF			

				IF N_IDX%  > 1 THEN
					OLD_IDX$ = "SI"
					IF PUT_HDR$ = "NO" THEN
						PUT_HDR$ = "SI"
						YY$ = STR$(JJ%)
						IF LEN(YY$) = 1 THEN
							YY$ = "0" + YY$
						END IF
						YY$ = "-" + YY$
						REGMNU$ = NIV_PIC(NIV_ESC%) + "PT-" + TPG_VEC_REQ(II%)  +&
							 YY$ +	"-FLD-HST OCCURS " + STR$(N_IDX%) + " TIMES."
						BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)
						MUL_NIV_TRE% = N_IDX%

					END IF
					NIV_ESC% = NIV_ESC% + 1
				ELSE
					IF OLD_IDX$ = "SI" THEN
						OLD_IDX$ = "NO"
					END IF
				END IF

				IF ESCR$ = "SI" THEN
					LRG_ESTR%  = LRG_ESTR%  + (TPG_MAT_LRG(HST% , CAMP% ) *  MUL_NIV_UNO%  * MUL_NIV_DOS% *&
												MUL_NIV_TRE%)
					YY$ = STR$(JJ%)
					IF LEN(YY$) = 1 THEN
						YY$ = "0" + YY$
					END IF
					YY$ = "-" + YY$
					REGMNU$ = NIV_PIC(NIV_ESC% ) + "PT-" + TPG_VEC_REQ(II%)  +&
						 YY$ + "-" +&
					           EDIT$(TPG_MAT_NAMEFLDSRV(HST%, SRV%, GG%), 128%) + NIV_SEP(NIV_ESC% ) +&
					           "PIC X(" +  AA$ + ")." 
					BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)

					
 					IF YY$ <> ANTE$ THEN
						ANTE$ = YY$
						IF REPT$ <> " " THEN
	 						REGMNU$ = "PERFORM  DSP-PT-" + TPG_VEC_REQ(II%)  + YY$ + " VARYING "  
	 						BUFOUT = ESCR_DFI(MG_16,REGMNU$)
							REGMNU$ = "TPG-I FROM 1 BY 1 UNTIL TPG-I > " +   REPT$ 
							BUFOUT = ESCR_DFI(MG_20,REGMNU$)
						ELSE
	 						REGMNU$ = "PERFORM  DSP-PT-" + TPG_VEC_REQ(II%)  + YY$   
							BUFOUT = ESCR_DFI(MG_16,REGMNU$)
						END IF
					END IF

				END IF
			NEXT GG%
		NEXT JJ%
		LRG_ESTR% = TPG_LRG_RCV% - LRG_ESTR%
		IF LRG_ESTR% > 0 THEN
			IF  TPG_LRG_RCV% = LRG_ESTR% THEN
				NIV_ESC% = NIV_05
			ELSE
				NIV_ESC% = NIV_03
			END IF
			REGMNU$ = NIV_PIC(NIV_ESC% ) + "PT-" + TPG_VEC_REQ(II%)  + "-" +&
			           "FRM-GLS-DISP" + NIV_SEP(NIV_ESC% ) +&
			           "PIC X(" +  STR$(LRG_ESTR%) + ")." 
			BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)
		ELSE
			PRINT " LARGO DE ESTR MAYOR QUE   " ; LRG_ESTR% ; " " ; TPG_LRG_RCV% 
		END IF
	NEXT II%
	REGMNU$ = "GO TO FIN-SEC-DSP-VAR."
	BUFOUT = ESCR_DFI(MG_16,REGMNU$)
	REGMNU$ = "FIN-SEC-DSP-VAR."
	BUFOUT = ESCR_DFI(MG_8,REGMNU$)
	REGMNU$ = "EXIT."
	BUFOUT = ESCR_DFI(MG_12,REGMNU$)
	REGMNU$ = " "
	BUFOUT = ESCR_DFI(MG_12,REGMNU$)

	IF WSS_DSPPASO = 'S' THEN
		PRINT " FIN           PASO " ; PASO% ; "/" ; TOT_PASOS ; "FORMATO PCAPT"
	END IF

	PASO% = PASO% + 1
	IF WSS_DSPPASO = 'S' THEN
		PRINT " INICIO           PASO " ; PASO% ; "/" ; TOT_PASOS ; " FORMATO MXAPT "
	END IF

        FRS_LRG_XT$ = 'SI'
	FOR II% = 1 TO TPG_TOT_REQ 
		REGMNU$ = " "
		BUFOUT = ESCR_WS1(MG_7,REGMNU$)
		REGMNU$ = " FORMATO MXAPT"
		BUFOUT = ESCR_WS1(MG_7,REGMNU$)
		REGMNU$ = "01  XT-" + TPG_VEC_REQ(II%)  + " " + "REDEFINES WSS-RCV."
		BUFOUT = ESCR_WS1(MG_8,REGMNU$)

		NIV_ESC% = NIV_03
		REGMNU$ = NIV_PIC(NIV_ESC%) + "XT-" + TPG_VEC_REQ(II%)  +"-DMSG."
		BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)

		ANT% = TPG_MAT_NIV_IDXT(II% ,1, 1 )
		ANT% = 0
		OCCUR1$ = 'N'
		OCCUR2$ = 'N'
		LRG_ESTR% = 0  

		FOR JJ% = 1 TO TPG_MAT_CAM_XT( II% ) 
 !!!			PRINT " TOTAL DE JJ% " ; TPG_MAT_CAM_TX( II%) 
			PUT_HDR$ = "NO"
			OLD_IDX$ = "NO"
			MUL_NIV_UNO% = 1
			MUL_NIV_DOS% = 1
			MUL_NIV_TRE% = 1
			IF TPG_MAT_NIV_IDXT(II% , JJ% , 1)  = 0  THEN  
				OCCUR1$ = 'N'
			END IF
			IF TPG_MAT_NIV_IDXT(II% , JJ% , 2)  = 0  THEN  
				OCCUR2$ = 'N'
			END IF

			IF TPG_MAT_NIV_IDXT(II% , JJ% , 1 ) <> ANT%  AND TPG_MAT_NIV_IDXT( II% , JJ% , 1) <> 0 THEN  

					REGMNU$ = "05  XT-" + TPG_VEC_REQ(II%)  +"-DMSG-IDX-1 OCCURS" + " " +&
						STR$(TPG_MAT_NIV_IDXT(II% , JJ% , 1)) + " TIMES."
					BUFOUT = ESCR_WS1(MG_16,REGMNU$)
					OCCUR1$ = 'S'
					MUL_NIV_UNO% =  TPG_MAT_NIV_IDXT( II% , JJ% , 1) 
			END IF
			IF TPG_MAT_NIV_IDXT(II% , JJ% , 2 )  <> 0 THEN  
					REGMNU$ = "07  XT-" + TPG_VEC_REQ(II%)  +"-DMSG-IDX-2 OCCURS" + " " +&
						STR$(TPG_MAT_NIV_IDXT(II% , JJ% , 2))  + " TIMES."
					BUFOUT = ESCR_WS1(MG_20,REGMNU$)
					OCCUR2$ = 'S'
					MUL_NIV_DOS% =  TPG_MAT_NIV_IDXT( II% , JJ% , 2) 
			END IF

			ANT% = TPG_MAT_NIV_IDXT(II% ,JJ%, 1 )
 !!!			PRINT " COMPARA  TPG_MAT_XTFRM(II% , JJ%)" ; " " ; II% ; " " ; JJ% ; " " ; TPG_MAT_XTFRM(II% , JJ%)

			FOR GG% = 1  TO TPG_TOT_HST 
 !!!				PRINT " COMPARA CON HST TPG_MAT_HST_ALF( GG% , CTE_IDX_NOM) " ; &
 !!!					GG% ;  " " ; TPG_MAT_HST_ALF( GG% , CTE_IDX_NOM) 
				IF (TPG_MAT_HST_ALF( GG% , CTE_IDX_NOM ) = TPG_MAT_XTFRM(II% , JJ%)) THEN
					HST% = GG%
 !!!					print " HST " ; HST%
					GG% = TPG_TOT_HST + 1
				END IF
			NEXT GG%

 !!!			PRINT " COMPARARA TPG_MAT_XTFMT(II% , JJ%) " ; II% ; " " ; JJ% ; " " ; EDIT$(TPG_MAT_XTFMT(II% , JJ%),128%)
			FOR GG% = 1 TO TPG_MAT_HST_NUM(HST% ,CTE_IDX_TSF) 
 !!!				PRINT "COMPARA CON SRV TPG_MAT_SRV_ALF(HST% , GG% ) " ; HST% ; " " ; GG% ;&
 !!!						" " ; TPG_MAT_SRV_ALF(HST% , GG% ) 
				IF (TPG_MAT_SRV_ALF(HST% , GG% ) =  EDIT$(TPG_MAT_XTFMT(II% , JJ%),128%)) THEN
					SRV% = GG%
 !!!					print " ENCONTRO SRV EN CORR. " ; SRV%
					GG% = TPG_MAT_HST_NUM(HST% ,CTE_IDX_TSF) + 1
				END IF
			NEXT GG%
			FOR GG% = 1 TO TPG_MAT_NCP_SRV( HST% , SRV% )

				N_IDX% = 0
				FOR XX% = 1 TO TPG_MAT_HST_NUM(HST% , CTE_IDX_TCF)
					IF TPG_MAT_NAMEFLDHST(HST%, XX%) = EDIT$(TPG_MAT_NAMEFLDSRV(HST% , SRV%, GG% ), 128% ) THEN
						N_IDX% = N_IDX% + 1
					END IF
				NEXT XX%
				NN_IDX% = TPG_MAT_TOTOCCFLDSRV(HST% , SRV%, GG% ) 
 !!!				PRINT "4: N_IDX, NN_IDX " ; N_IDX% ; " " ; NN_IDX%


				FOR TT% = 1 TO TPG_MAT_HST_NUM(HST% , CTE_IDX_TCF)
					IF EDIT$(TPG_MAT_NAMEFLDSRV(HST%, SRV%, GG%), 128% ) = TPG_MAT_NAMEFLDHST(HST% , TT% ) THEN
						CAMP% = TT%
						TT% = TPG_MAT_HST_NUM(HST% , CTE_IDX_TCF) + 1
					END IF
				NEXT TT%


				ESCR$ = "SI"
				IF N_IDX% > 1 THEN
					UU% = GG% - 1
 !!!					PRINT "CAMPO INDEXADO RECORRERA HASTA GG% - 1 " ; UU%
 !!!					PRINT "COMPARANDO CON " ; TPG_MAT_NAMEFLDSRV(HST% , SRV%, GG%) 
 !!!					PRINT " CON TPG_MAT_NAMEFLDSRV(HST%, SRV%, XX%) "
					FOR XX% = 1 TO UU%
 !!!						PRINT TPG_MAT_NAMEFLDSRV(HST%, SRV%, XX%) 
						IF EDIT$(TPG_MAT_NAMEFLDSRV(HST%, SRV%, XX%),128%) = EDIT$(TPG_MAT_NAMEFLDSRV(HST% , SRV%, GG% ), 128% ) THEN
							ESCR$ = "NO"
						END IF
					NEXT XX%
				END IF

				AA$ = STR$(TPG_MAT_LRG(HST% , CAMP% )) 
				IF LEN(AA$) < 2 THEN
					AA$ = "0" + AA$
				END IF

				IF OCCUR2$ = 'S' THEN
					NIV_ESC% = NIV_09
				ELSE
					IF OCCUR1$ = 'S' THEN
						NIV_ESC% = NIV_07
					ELSE
						NIV_ESC%  = NIV_05
					END IF			
				END IF			

				IF N_IDX%  > 1 THEN
					OLD_IDX$ = "SI"
					IF PUT_HDR$ = "NO" THEN
						PUT_HDR$ = "SI"
						REGMNU$ = NIV_PIC(NIV_ESC%) + "XT-" + TPG_VEC_REQ(II%)  +&
								"-FLD-HST OCCURS " + STR$(N_IDX%) + " TIMES."
						BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)
						MUL_NIV_TRE% = N_IDX%
					END IF
					NIV_ESC% = NIV_ESC% + 1
				ELSE
					IF OLD_IDX$ = "SI" THEN
						OLD_IDX$ = "NO"
					END IF
				END IF
				IF ESCR$ = "SI" THEN
					LRG_ESTR%  = LRG_ESTR%  + (TPG_MAT_LRG(HST% , CAMP% ) *  MUL_NIV_UNO%  * MUL_NIV_DOS% *&
							MUL_NIV_TRE% )
					YY$ = STR$(JJ%)
					IF LEN(YY$) = 1 THEN
						YY$ = "0" + YY$
					END IF
					YY$ = "-" + YY$
					REGMNU$ = NIV_PIC(NIV_ESC% ) + "XT-" + TPG_VEC_REQ(II%) +&
							YY$ + "-" +&
					           EDIT$(TPG_MAT_NAMEFLDSRV(HST%, SRV%, GG%), 128% ) + NIV_SEP(NIV_ESC% ) +&
					           "PIC X(" +  AA$ + ")." 
					BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)
				END IF
			NEXT GG%
		NEXT JJ%
		LRG_XT_TP% = LRG_ESTR% 
		LRG_XT_TP$ = STR$(LRG_XT_TP%)
		IF LEN(LRG_XT_TP$) = 1 THEN
			LRG_XT_TP$ = "0000" + LRG_XT_TP$
		ELSE
		IF LEN(LRG_XT_TP$) = 2 THEN
			LRG_XT_TP$ = "000" + LRG_XT_TP$
		ELSE
		IF LEN(LRG_XT_TP$) = 3 THEN
			LRG_XT_TP$ = "00" + LRG_XT_TP$
		ELSE
		IF LEN(LRG_XT_TP$) = 4 THEN
			LRG_XT_TP$ = "0" + LRG_XT_TP$
		END IF
		END IF
		END IF
		END IF

                IF FRS_LRG_XT$ = 'SI' THEN
	  		NIV_ESC% = NIV_01
			REGMNU$ = NIV_PIC(NIV_ESC%) + "TPG-LRG-XT."
			BUFOUT = ESCR_WS3(NIV_MRG(NIV_ESC%),REGMNU$)
			FRS_LRG_XT$ = 'NO'
		END IF
		LRG_ESTR% = TPG_LRG_SND% - LRG_ESTR%
		IF LRG_ESTR% > 0 THEN
			IF  TPG_LRG_SND% = LRG_ESTR% THEN
				NIV_ESC% = NIV_05
			ELSE
				NIV_ESC% = NIV_03
			END IF
			REGMNU$ = NIV_PIC(NIV_ESC% ) + "XT-" + TPG_VEC_REQ(II%)  + "-" +&
			           "FRM-GLS-DISP" + NIV_SEP(NIV_ESC% ) +&
			           "PIC X(" +  STR$(LRG_ESTR%) + ")." 
			BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC%),REGMNU$)

			NIV_ESC% = NIV_03
			REGMNU$ = NIV_PIC(NIV_ESC%) + "TPG-LRG-XT-" + TPG_VEC_REQ(II%) + "     VALUE  " + LRG_XT_TP$ +&
				 " PIC 9(05)."
			BUFOUT = ESCR_WS3(NIV_MRG(NIV_ESC%),REGMNU$)
		ELSE
			PRINT " LARGO DE ESTR MAYOR QUE  TPG_LRG_SND " ; LRG_ESTR% ; " " ; TPG_LRG_SND% 
		END IF
	NEXT II%


	IF WSS_DSPPASO = 'S' THEN
		PRINT " FIN           PASO " ; PASO% ; "/" ; TOT_PASOS ; " FORMATO MXAPT "
	END IF



	REGMNU$ = "01  TPG-LRG-NVL."
	BUFOUT = ESCR_WS3(MG_8,REGMNU$)

	NIV_ESC% = NIV_01
	REGMNU$ = NIV_PIC(NIV_ESC%) + "WSS-SND."
	BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC%),REGMNU$)
	NIV_ESC% = NIV_03
	REGMNU$ = NIV_PIC(NIV_ESC%) + "WSS-SND-HDR           PIC X(" + STR$(TPG_HDR_SND%) + ")."
	IF TPG_HDR_SND% > 0 THEN
		BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC%),REGMNU$)
	END IF
	NIV_ESC% = NIV_03
	REGMNU$ = NIV_PIC(NIV_ESC%) + "WSS-SND-DMSG."
	BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC%),REGMNU$)
	NIV_ESC% = NIV_05
	REGMNU$ = NIV_PIC(NIV_ESC%) + "WSS-SND-STAT           PIC X(01)."
	BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC%),REGMNU$)
	REGMNU$ = NIV_PIC(NIV_ESC%) + "WSS-SND-MENS           PIC X(79)."
	BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC%),REGMNU$)
	TPG_HDR_DAT% = TPG_LRG_SND% - ( TPG_HDR_SND% + 80 )
	NIV_ESC% = NIV_03
	REGMNU$ = NIV_PIC(NIV_ESC%) + "WSS-SND-DAT           PIC X(" + STR$(TPG_HDR_DAT%) + ")."
	BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC%),REGMNU$)
	REGMNU$ = ""
	BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC%),REGMNU$)



	NIV_ESC% = NIV_01
	REGMNU$ = NIV_PIC(NIV_ESC%) + "WSS-SEGR REDEFINES WSS-SND."
	BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC%),REGMNU$)
	NIV_ESC% = NIV_03
	SEGS$ = STR$( TPG_LRG_SND% / 1024 )
	IF LEN(SEGS$) < 2 THEN
		SEGS$  = '0' + SEGS$ 
	END IF
	REGMNU$ = NIV_PIC(NIV_ESC%) + "WSS-TAB-SEGS           OCCURS  " + SEGS$ + "  TIMES."
	BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC%),REGMNU$)
	NIV_ESC% = NIV_05
	REGMNU$ = NIV_PIC(NIV_ESC%) + "WSS-ELE-SEGS                    PIC X(1024)."
	BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC%),REGMNU$)


	FIRST% = 1
	REGMNU$ = "SEC-DSP-RAV SECTION."
	BUFOUT = ESCR_DFO(MG_8,REGMNU$)
	REGMNU$ = "INI-SEC-DSP-RAV."
	BUFOUT = ESCR_DFO(MG_8,REGMNU$)

	FOR II% = 1 TO TPG_TOT_REQ
		REGMNU$ = " "
		BUFOUT = ESCR_WS2(MG_7,REGMNU$)
		IF FIRST% <> 1 THEN
			REGMNU$ = "GO TO FIN-SEC-DSP-RAV."
			BUFOUT = ESCR_DFO(MG_16,REGMNU$)
		END IF
		IF FIRST% = 1 THEN
			FIRST% = 0
		END IF
		REGMNU$ = "IF WSS-COD-REQU = '" +   TPG_VEC_REQ(II%)  + "'"
		BUFOUT = ESCR_DFO(MG_12,REGMNU$)
		REGMNU$ = "MOVE RAV-GLS-DISP TO TP-" +   TPG_VEC_REQ(II%)
		BUFOUT = ESCR_DFO(MG_16,REGMNU$)
		ANTE$ = " "

		REGMNU$ = " FORMATO PTAPC"
		BUFOUT = ESCR_WS2(MG_7,REGMNU$)
		REGMNU$ = "01  TP-" + TPG_VEC_REQ(II%)  + " " + "REDEFINES WSS-SND."
		BUFOUT = ESCR_WS2(MG_8,REGMNU$)
		REGMNU$ = "03 TP-" + TPG_VEC_REQ(II%)  + "-STAT              PIC X(01)."
		BUFOUT = ESCR_WS2(MG_12,REGMNU$)
		REGMNU$ = "03 TP-" + TPG_VEC_REQ(II%)  + "-MENS              PIC X(79)."
		BUFOUT = ESCR_WS2(MG_12,REGMNU$)
		REGMNU$ = "03 TP-" + TPG_VEC_REQ(II%)  +"-DMSG."
		BUFOUT = ESCR_WS2(MG_12,REGMNU$)
		ANT% = TPG_MAT_NIV_IDTP(II% ,1, 1 )
		ANT% = 0
		OCCUR1$ = 'N'
		OCCUR2$ = 'N'
		LRG_ESTR% = 80
		MUL_NIV_UNO% = 1
		MUL_NIV_DOS% = 1
		MUL_NIV_TRE% = 1
		FOR JJ% = 1 TO TPG_MAT_CAM_TP( II% ) 
			PUT_HDR$ = "NO"
			OLD_IDX$ = "NO"
			IF TPG_MAT_NIV_IDTP(II% , JJ% , 1)  = 0  THEN  
				OCCUR1$ = 'N'
				REPT$ = " "
			END IF
			IF TPG_MAT_NIV_IDTP(II% , JJ% , 2)  = 0  THEN  
				OCCUR2$ = 'N'
			END IF
			IF TPG_MAT_NIV_IDTP(II% , JJ% , 1 ) <> ANT%  AND TPG_MAT_NIV_IDTP( II% , JJ% , 1) <> 0 THEN  
					REGMNU$ = "05  TP-" + TPG_VEC_REQ(II%)  +"-DMSG-IDX-1 OCCURS" + " " +&
						STR$(TPG_MAT_NIV_IDTP(II% , JJ% , 1)) + " TIMES."
					BUFOUT = ESCR_WS2(MG_16,REGMNU$)
					REPT$ = STR$(TPG_MAT_NIV_IDTP(II% , JJ% , 1)) 
					OCCUR1$ = 'S'
					MUL_NIV_UNO% =  TPG_MAT_NIV_IDTP( II% , JJ% , 1) 
			END IF
			IF TPG_MAT_NIV_IDTP(II% , JJ% , 2 )  <> 0 THEN  
					REGMNU$ = "07  TP-" + TPG_VEC_REQ(II%)  +"-DMSG-IDX-2 OCCURS" + " " +&
						STR$(TPG_MAT_NIV_IDTP(II% , JJ% , 2))  + " TIMES."
					BUFOUT = ESCR_WS2(MG_20,REGMNU$)
					REPT$ = STR$(TPG_MAT_NIV_IDTP(II% , JJ% , 2)) 
					OCCUR2$ = 'S'
					MUL_NIV_DOS% =  TPG_MAT_NIV_IDTP( II% , JJ% , 2) 
			END IF
			ANT% = TPG_MAT_NIV_IDTP(II% ,JJ%, 1 )
			FOR GG% = 1 TO TPG_TOT_HST
 !!!				PRINT " COMPARA CON HST TPG_MAT_HST_ALF( GG% , CTE_IDX_NOM) " ; &
 !!!					GG% ;  " " ; TPG_MAT_HST_ALF( GG% , CTE_IDX_NOM) 
				TPGMATTPFRM$ = EDIT$(TPG_MAT_TPFRM(II% , JJ%),128%)
				IF (TPG_MAT_HST_ALF( GG% , CTE_IDX_NOM ) = TPGMATTPFRM$ ) THEN
					HST% = GG%
 !!!					print " HST " ; HST%
					GG% = TPG_TOT_HST + 1
				END IF
			NEXT GG%

 !!!			PRINT " COMPARARA TPG_MAT_TPFMT(II% , JJ%) " ; II% ; " " ; JJ% ; " " ; EDIT$(TPG_MAT_TPFMT(II% , JJ%),128%)
			FOR GG% = 1 TO TPG_MAT_HST_NUM(HST% ,CTE_IDX_TSF) 
 !!!				PRINT "COMPARA CON SRV TPG_MAT_SRV_ALF(HST% , GG% ) " ; HST% ; " " ; GG% ;&
 !!!						" " ; TPG_MAT_SRV_ALF(HST% , GG% ) 
				TPGMATTPFMT$ = EDIT$(TPG_MAT_TPFMT(II% , JJ%),128%)
				IF TPG_MAT_SRV_ALF(HST% , GG% ) =  TPGMATTPFMT$ THEN
					SRV% = GG%
 !!!					print " ENCONTRO SRV EN CORR. " ; SRV%
					GG% = TPG_MAT_HST_NUM(HST% ,CTE_IDX_TSF) + 1
				END IF
			NEXT GG%
			FOR GG% = 1 TO TPG_MAT_NCP_SRV( HST% , SRV% )
				N_IDX% = 0
				FOR XX% = 1 TO TPG_MAT_HST_NUM(HST% , CTE_IDX_TCF)
					IF TPG_MAT_NAMEFLDHST(HST%, XX%) = EDIT$(TPG_MAT_NAMEFLDSRV(HST% , SRV%, GG% ),128%) THEN
						N_IDX% = N_IDX% + 1
					END IF
				NEXT XX%
				NN_IDX% = TPG_MAT_TOTOCCFLDSRV(HST% , SRV%, GG% ) 
 !!!				PRINT "3: N_IDX, NN_IDX " ; N_IDX% ; " " ; NN_IDX%

				FOR TT% = 1 TO TPG_MAT_HST_NUM(HST% , CTE_IDX_TCF)
					IF EDIT$(TPG_MAT_NAMEFLDSRV(HST%, SRV%, GG%),128%) = TPG_MAT_NAMEFLDHST(HST% , TT% ) THEN
						CAMP% = TT%
						TT% = TPG_MAT_HST_NUM(HST% , CTE_IDX_TCF) + 1
					END IF
				NEXT TT%

				ESCR$ = "SI"
				IF N_IDX% > 1 THEN
					UU% = GG% - 1
					FOR XX% = 1 TO UU%
						IF EDIT$(TPG_MAT_NAMEFLDSRV(HST%, SRV%, XX%), 128%) = EDIT$(TPG_MAT_NAMEFLDSRV(HST% , SRV%, GG% ), 128%) THEN
							ESCR$ = "NO"
						END IF
					NEXT XX%
				END IF

				AA$ = STR$(TPG_MAT_LRG(HST% , CAMP% )) 
				IF LEN(AA$) < 2 THEN
					AA$ = "0" + AA$
				END IF

				IF OCCUR2$ = 'S' THEN
					NIV_ESC% = NIV_09
				ELSE
					IF OCCUR1$ = 'S' THEN
						NIV_ESC% = NIV_07
					ELSE
						NIV_ESC%  = NIV_05
					END IF			
				END IF			
				IF N_IDX%  > 1 THEN
					OLD_IDX$ = "SI"
					IF PUT_HDR$ = "NO" THEN
						PUT_HDR$ = "SI"
						REGMNU$ = NIV_PIC(NIV_ESC%) + "TP-" + TPG_VEC_REQ(II%)  +&
								"-FLD-HST OCCURS " + STR$(N_IDX%) + " TIMES."
						BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC%),REGMNU$)
						MUL_NIV_TRE% = N_IDX%
					END IF
					NIV_ESC% = NIV_ESC% + 1
				ELSE
					IF OLD_IDX$ = "SI" THEN
						OLD_IDX$ = "NO"
					END IF
				END IF
				IF ESCR$ = "SI" THEN
					LRG_ESTR%  = LRG_ESTR%  + (TPG_MAT_LRG(HST% , CAMP% ) *  MUL_NIV_UNO%  * MUL_NIV_DOS% *&
									MUL_NIV_TRE% )
					YY$ = STR$(JJ%)
					IF LEN(YY$) = 1 THEN
						YY$ = "0" + YY$
					END IF
					YY$ = "-" + YY$
					REGMNU$ = NIV_PIC(NIV_ESC% ) + "TP-" + TPG_VEC_REQ(II%)  +&
						YY$ + "-" +&
					           EDIT$(TPG_MAT_NAMEFLDSRV(HST%, SRV%, GG%), 128%) + NIV_SEP(NIV_ESC% ) +&
					           "PIC X(" +  AA$ + ")." 
					BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC%),REGMNU$)
 					IF YY$ <> ANTE$ THEN
 						ANTE$ = YY$
						IF REPT$ <> " " THEN
 							REGMNU$ = "PERFORM  DSP-TP-" + TPG_VEC_REQ(II%)  + YY$ + " VARYING "  
 							BUFOUT = ESCR_DFO(MG_16,REGMNU$)
							REGMNU$ = "TPG-I FROM 1 BY 1 UNTIL TPG-I > " +   REPT$ 
							BUFOUT = ESCR_DFO(MG_20,REGMNU$)
						ELSE
	 						REGMNU$ = "PERFORM  DSP-TP-" + TPG_VEC_REQ(II%)  + YY$   
 							BUFOUT = ESCR_DFO(MG_16,REGMNU$)
						END IF
					END IF
				END IF
			NEXT GG%
		NEXT JJ%
		LRG_PT_TX% = LRG_ESTR% - 80
		LRG_PT_TX$ = STR$(LRG_PT_TX%)
		IF LEN(LRG_PT_TX$) = 1 THEN
			LRG_PT_TX$ = "0000" + LRG_PT_TX$ 
		ELSE
		IF LEN(LRG_PT_TX$) = 2 THEN
			LRG_PT_TX$ = "000" + LRG_PT_TX$ 
		ELSE
		IF LEN(LRG_PT_TX$) = 3 THEN
			LRG_PT_TX$ = "00" + LRG_PT_TX$ 
		ELSE
		IF LEN(LRG_PT_TX$) = 4 THEN
			LRG_PT_TX$ = "0" + LRG_PT_TX$ 
		END IF
		END IF
		END IF
		END IF
		LRG_ESTR% = TPG_LRG_SND% - LRG_ESTR%
		IF LRG_ESTR% > 0 THEN
			IF  TPG_LRG_SND% = ( LRG_ESTR% + 80 ) THEN
				NIV_ESC% = NIV_05
			ELSE
				NIV_ESC% = NIV_03
			END IF
			REGMNU$ = NIV_PIC(NIV_ESC% ) + "TP-" + TPG_VEC_REQ(II%)  + "-" +&
			           "FRM-GLS-DISP" + NIV_SEP(NIV_ESC% ) +&
			           "PIC X(" +  STR$(LRG_ESTR%) + ")." 
			BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC%),REGMNU$)
			NIV_ESC% = NIV_03
			REGMNU$ = NIV_PIC(NIV_ESC%) +  "TPG-LRG-TP-" + TPG_VEC_REQ(II%)  + "     VALUE  " +&
				   LRG_PT_TX$ +  " PIC 9(05)."
			BUFOUT = ESCR_WS3(NIV_MRG(NIV_ESC%),REGMNU$)
		ELSE
			PRINT " LARGO DE ESTR MAYOR QUE  TPG_LRG_SND " ; LRG_ESTR% ; " " ; TPG_LRG_SND% 
		END IF
	NEXT II%
	REGMNU$ = "GO TO FIN-SEC-DSP-RAV."
	BUFOUT = ESCR_DFO(MG_16,REGMNU$)
	REGMNU$ = "FIN-SEC-DSP-RAV."   
	BUFOUT = ESCR_DFO(MG_8,REGMNU$)
	REGMNU$ = "EXIT."   
	BUFOUT = ESCR_DFO(MG_12,REGMNU$)
	REGMNU$ = " "   
	BUFOUT = ESCR_DFO(MG_12,REGMNU$)





	FOR II% = 1 TO TPG_TOT_REQ 

		REGMNU$ = " "
		BUFOUT = ESCR_WS2(MG_7,REGMNU$)
		REGMNU$ = " FORMATO PTATX"
		BUFOUT = ESCR_WS2(MG_7,REGMNU$)
		REGMNU$ = "01  TX-" + TPG_VEC_REQ(II%)  + " " + "REDEFINES WSS-SND."
		BUFOUT = ESCR_WS2(MG_8,REGMNU$)

		NIV_ESC% = NIV_03
		REGMNU$ = NIV_PIC(NIV_ESC%) + "TX-" + TPG_VEC_REQ(II%)  +"-DMSG."
		BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC%),REGMNU$)
		ANT% = TPG_MAT_NIV_IDTX(II% ,1, 1 )
		ANT% = 0
		OCCUR1$ = 'N'
		OCCUR2$ = 'N'
                TPG_CON_TRN = 0
		LRG_ESTR% = 0  

		FOR JJ% = 1 TO TPG_MAT_CAM_TX( II% ) 
			MUL_NIV_UNO% = 1
			MUL_NIV_DOS% = 1
			MUL_NIV_TRE% = 1
			PUT_HDR$ = "NO"
			OLD_IDX$ = "NO"
			IF TPG_MAT_NIV_IDTX(II% , JJ% , 1)  = 0  THEN  
				OCCUR1$ = 'N'
			END IF
			IF TPG_MAT_NIV_IDTX(II% , JJ% , 2)  = 0  THEN  
				OCCUR2$ = 'N'
			END IF

			IF TPG_MAT_NIV_IDTX(II% , JJ% , 1 ) <> ANT%  AND TPG_MAT_NIV_IDTX( II% , JJ% , 1) <> 0 THEN  

					REGMNU$ = "05  TX-" + TPG_VEC_REQ(II%)  +"-DMSG-IDX-1 OCCURS" + " " +&
						STR$(TPG_MAT_NIV_IDTX(II% , JJ% , 1)) + " TIMES."
					BUFOUT = ESCR_WS2(MG_16,REGMNU$)
					OCCUR1$ = 'S'
					MUL_NIV_UNO% =  TPG_MAT_NIV_IDTX( II% , JJ% , 1) 

			END IF

			IF TPG_MAT_NIV_IDTX(II% , JJ% , 2 )  <> 0 THEN  
					REGMNU$ = "07  TX-" + TPG_VEC_REQ(II%)  +"-DMSG-IDX-2 OCCURS" + " " +&
						STR$(TPG_MAT_NIV_IDTX(II% , JJ% , 2))  + " TIMES."
					BUFOUT = ESCR_WS2(MG_20,REGMNU$)
					OCCUR2$ = 'S'
					MUL_NIV_DOS% =  TPG_MAT_NIV_IDTX( II% , JJ% , 2) 

			END IF


			MNU_GLS_PROG$ =  EDIT$(TPG_MAT_TRN(II% , JJ% , CTE_TRN_INS ),128%) 

                        TPG_CON_TRN  = TPG_CON_TRN  + 1
			AA$ = STR$( TPG_CON_TRN ) 
			IF LEN(AA$) < 2 THEN
				AA$ = "0" + AA$
			END IF

				IF OCCUR2$ = 'S' THEN
					NIV_ESC% = NIV_09
				ELSE
					IF OCCUR1$ = 'S' THEN
						NIV_ESC% = NIV_07
					ELSE
						NIV_ESC%  = NIV_05
					END IF			
				END IF			

			REGMNU$ = NIV_PIC(NIV_ESC%) + "TX-" + TPG_VEC_REQ(II%)  + "-" + AA$ + "-SIST-" +&
				EDIT$(TPG_MAT_TRN(II% , JJ% , CTE_TRN_INS ),128%)   + "             PIC X(03)."
			BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC%),REGMNU$)
			REGMNU$ = NIV_PIC(NIV_ESC%) + "TX-" + TPG_VEC_REQ(II%)  + "-" + AA$ + "-NEMO-" +&
				EDIT$(TPG_MAT_TRN(II% , JJ% , CTE_TRN_INS ),128%) + "               PIC X(12)."
			BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC%),REGMNU$)
			REGMNU$ = NIV_PIC(NIV_ESC%) + "TX-" + TPG_VEC_REQ(II%)  + "-" +  AA$ + "-FINP-" +&
				EDIT$(TPG_MAT_TRN(II% , JJ% , CTE_TRN_INS ),128%) + "               PIC X(03)."
			BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC%),REGMNU$)
			REGMNU$ = NIV_PIC(NIV_ESC%) + "TX-" + TPG_VEC_REQ(II%)  + "-" + AA$ + "-FOUT-" +&
				EDIT$(TPG_MAT_TRN(II% , JJ% , CTE_TRN_INS ),128%) +  "              PIC X(03)."
			BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC%),REGMNU$)
			REGMNU$ = NIV_PIC(NIV_ESC%) + "TX-" + TPG_VEC_REQ(II%)  + "-" + AA$ + "-DMSG-" +&
				EDIT$(TPG_MAT_TRN(II% , JJ% , CTE_TRN_INS ),128%) + "."


			ANT% = TPG_MAT_NIV_IDTX(II% ,JJ%, 1 )
			FOR GG% = 1 TO TPG_TOT_HST
				IF (TPG_MAT_HST_ALF( GG% , CTE_IDX_NOM ) = TPG_MAT_TXFRM(II% , JJ%)) THEN
					HST% = GG%
					GG% = TPG_TOT_HST + 1
				END IF
			NEXT GG%

			FOR GG% = 1 TO TPG_MAT_HST_NUM(HST% ,CTE_IDX_TSF) 
				IF (TPG_MAT_SRV_ALF(HST% , GG% ) =  EDIT$(TPG_MAT_TXFMT(II% , JJ%),128%)) THEN
					SRV% = GG%
					GG% = TPG_MAT_HST_NUM(HST% ,CTE_IDX_TSF) + 1
				END IF
			NEXT GG%

			IF TPG_MAT_NCP_SRV( HST% , SRV% ) > 0 THEN
				BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC%),REGMNU$)
			END IF


			FOR GG% = 1 TO TPG_MAT_NCP_SRV( HST% , SRV% )

				N_IDX% = 0
				FOR XX% = 1 TO TPG_MAT_HST_NUM(HST% , CTE_IDX_TCF)
					IF TPG_MAT_NAMEFLDHST(HST%, XX%) = EDIT$(TPG_MAT_NAMEFLDSRV(HST% , SRV%, GG% ), 128% ) THEN
						N_IDX% = N_IDX% + 1
					END IF
				NEXT XX%
				NN_IDX% = TPG_MAT_TOTOCCFLDSRV(HST% , SRV%, GG% ) 
 !!!				PRINT "2: N_IDX, NN_IDX " ; N_IDX% ; " " ; NN_IDX%

				FOR TT% = 1 TO TPG_MAT_HST_NUM(HST% , CTE_IDX_TCF)
					IF EDIT$(TPG_MAT_NAMEFLDSRV(HST%, SRV%, GG%),128% ) = TPG_MAT_NAMEFLDHST(HST% , TT% ) THEN
						CAMP% = TT%
						TT% = TPG_MAT_HST_NUM(HST% , CTE_IDX_TCF) + 1
					END IF
				NEXT TT%

				ESCR$ = "SI"
				IF N_IDX% > 1 THEN
					UU% = GG% - 1
 !!!					PRINT "CAMPO INDEXADO RECORRERA HASTA GG% - 1 " ; UU%
 !!!					PRINT "COMPARANDO CON " ; TPG_MAT_NAMEFLDSRV(HST% , SRV%, GG%) 
 !!!					PRINT " CON TPG_MAT_NAMEFLDSRV(HST%, SRV%, XX%) "
					FOR XX% = 1 TO UU%
 !!!						PRINT TPG_MAT_NAMEFLDSRV(HST%, SRV%, XX%) 
						IF EDIT$(TPG_MAT_NAMEFLDSRV(HST%, SRV%, XX%), 128%) = EDIT$(TPG_MAT_NAMEFLDSRV(HST% , SRV%, GG% ),128%) THEN
							ESCR$ = "NO"
						END IF
					NEXT XX%
				END IF

				AA$ = STR$(TPG_MAT_LRG(HST% , CAMP% )) 
				IF LEN(AA$) < 2 THEN
					AA$ = "0" + AA$
				END IF

				IF OCCUR2$ = 'S' THEN
					NIV_ESC% = NIV_11
				ELSE
					IF OCCUR1$ = 'S' THEN
						NIV_ESC% = NIV_09
					ELSE
						NIV_ESC%  = NIV_07
					END IF			
				END IF			
				IF N_IDX%  > 1 THEN
					OLD_IDX$ = "SI"
					IF PUT_HDR$ = "NO" THEN
						PUT_HDR$ = "SI"
						REGMNU$ = NIV_PIC(NIV_ESC%) + "TX-" + TPG_VEC_REQ(II%)  +&
								"-FLD-HST OCCURS " + STR$(N_IDX%) + " TIMES."
						BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC%),REGMNU$)
						MUL_NIV_TRE% = N_IDX%
					END IF
					NIV_ESC% = NIV_ESC% + 1
				ELSE
					IF OLD_IDX$ = "SI" THEN
						OLD_IDX$ = "NO"
					END IF
				END IF

				IF ESCR$ = "SI" THEN
					LRG_ESTR%  = LRG_ESTR%  + (TPG_MAT_LRG(HST% , CAMP% ) *  MUL_NIV_UNO%  * MUL_NIV_DOS% *&
										MUL_NIV_TRE% )
					YY$ = STR$(JJ%)
					IF LEN(YY$) = 1 THEN
						YY$ = "0" + YY$
					END IF
					YY$ = "-" + YY$
					REGMNU$ = NIV_PIC(NIV_ESC% ) + "TX-" + TPG_VEC_REQ(II%) +&
						   YY$ + "-" +&
					           EDIT$(TPG_MAT_NAMEFLDSRV(HST%, SRV%, GG%),128%) + NIV_SEP(NIV_ESC% ) +&
					           "PIC X(" +  AA$ + ")." 
					BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC%),REGMNU$)
				END IF
			NEXT GG%
		NEXT JJ%
		LRG_ESTR% = TPG_LRG_RCV% - LRG_ESTR%
		IF LRG_ESTR% > 0 THEN
			IF  TPG_LRG_RCV% = LRG_ESTR% THEN
				NIV_ESC% = NIV_05
			ELSE
				NIV_ESC% = NIV_03
			END IF
			REGMNU$ = NIV_PIC(NIV_ESC% ) + "TX-" + TPG_VEC_REQ(II%)  + "-" +&
			           "FRM-GLS-DISP" + NIV_SEP(NIV_ESC% ) +&
			           "PIC X(" +  STR$(LRG_ESTR%) + ")." 
			BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC%),REGMNU$)
		ELSE
			PRINT " LARGO DE ESTR MAYOR QUE  TPG_LRG_RCV " ; LRG_ESTR% ; " " ; TPG_LRG_RCV% 
		END IF

	NEXT II%

	REGMNU$ = " "
	BUFOUT = ESCR_WS3(MG_8,REGMNU$)
	REGMNU$ = "01  WSS-COD-CREQ       VALUE SPACES    PIC X(03)."
	BUFOUT = ESCR_WS3(MG_8,REGMNU$)
	REGMNU$ = " "
	BUFOUT = ESCR_WS3(MG_8,REGMNU$)
	REGMNU$ = "01  WSS-GNS-TVB."
	BUFOUT = ESCR_WS3(MG_8,REGMNU$)
	REGMNU$ = "03  TPG-I          VALUE ZEROES    PIC 9(05)."
	BUFOUT = ESCR_WS3(MG_12,REGMNU$)
	REGMNU$ = "03  TPG-J          VALUE ZEROES    PIC 9(05)."
	BUFOUT = ESCR_WS3(MG_12,REGMNU$)
	REGMNU$ = "03  TPG-K          VALUE ZEROES    PIC 9(05)."
	BUFOUT = ESCR_WS3(MG_12,REGMNU$)
	REGMNU$ = "03  TPG-L          VALUE ZEROES    PIC 9(05)."
	BUFOUT = ESCR_WS3(MG_12,REGMNU$)
	REGMNU$ = "03  TPG-M          VALUE ZEROES    PIC 9(05)."
	BUFOUT = ESCR_WS3(MG_12,REGMNU$)
	REGMNU$ = "03  TPG-N          VALUE ZEROES    PIC 9(05)."
	BUFOUT = ESCR_WS3(MG_12,REGMNU$)

	PASO% = PASO% + 1
	IF WSS_DSPPASO = 'S' THEN
		PRINT " INICIO           PASO " ; PASO% ; "/" ; TOT_PASOS ; "MOV-GNS"
	END IF
	FOR II% = 1 TO TPG_TOT_REQ 
		FOR JJ% = 1 TO TPG_MAT_CAM_TX( II% ) 

			AA$ = STR$(JJ%)
			IF LEN(AA$) = 1 THEN
				AA$ = "0" + AA$
			END IF
			ANT1% = TPG_MAT_NIV_IDTX(II% , JJ% , 1 )
			ANT2% = TPG_MAT_NIV_IDTX(II% , JJ% , 2 )

			BUF$ = "MOV-GNS-" + TPG_VEC_REQ(II%)  + "-" + AA$ + " SECTION."
			BUFOUT = ESCR_PD3(MG_8,BUF$)
			BUF$ = "INI-MOV-GNS-" + TPG_VEC_REQ(II%)  + "-" + AA$ + "."
			BUFOUT = ESCR_PD3(MG_8,BUF$)

			IF ANT1% <> 0 OR  ANT2% <> 0 THEN
				BB$ = "(TPG-I)."
			ELSE
				BB$ = "."
			END IF
			
			TPG_GLS_FRM$ = EDIT$(TPG_MAT_TRN(II% , JJ% , CTE_TRN_FRM ),128%)
			FOR NN% = 1 TO TPG_TOT_HST
				IF TPG_GLS_FRM$ = TPG_MAT_HST_ALF(NN%, CTE_IDX_NOM) THEN 
					TPG_GLS_SIS$ = TPG_MAT_HST_ALF(NN%, CTE_IDX_SIS)
					TPG_GLS_SIM$ = TPG_MAT_HST_ALF(NN%, CTE_IDX_SIM)
					NN% = TPG_TOT_HST + 1
				END IF
			NEXT NN%

			MNU_GLS_PROG$ =  EDIT$(TPG_MAT_TRN(II% , JJ% , CTE_TRN_INS ),128%) 

			REGMNU$ = "MOVE WSS-" + TPG_VEC_REQ(II%)  + "-" + AA$ + "-SIST-" +&
					MNU_GLS_PROG$ + " TO TX-" + TPG_VEC_REQ(II%)  + "-" + AA$ + "-SIST-" +&
					MNU_GLS_PROG$   + BB$
			BUFOUT = ESCR_PD3(MG_12,REGMNU$)

			REGMNU$ = ""
			BUFOUT = ESCR_WS3(MG_12,REGMNU$)

			REGMNU$ = "03 WSS-" + TPG_VEC_REQ(II%)  + "-" + AA$ + "-SIST-" +&
					MNU_GLS_PROG$ + " PIC X(03) VALUE '" + TPG_GLS_SIS$ +    "'."
			BUFOUT = ESCR_WS3(MG_12,REGMNU$)

			REGMNU$ = "MOVE WSS-" + TPG_VEC_REQ(II%)  + "-" + AA$ + "-NEMO-" +&
					EDIT$(TPG_MAT_TRN(II% , JJ% , CTE_TRN_INS ),128%) +&
					" TO TX-" + TPG_VEC_REQ(II%)  + "-" + AA$ + "-NEMO-" +&
					EDIT$(TPG_MAT_TRN(II% , JJ% , CTE_TRN_INS ),128%)  + BB$
			BUFOUT = ESCR_PD3(MG_12,REGMNU$)

			REGMNU$ = "03 WSS-" + TPG_VEC_REQ(II%)  + "-" + AA$ + "-NEMO-" +&
					MNU_GLS_PROG$ + " PIC X(12) VALUE '" +&
					TPG_GLS_SIM$ + EDIT$(TPG_MAT_TRN(II% , JJ% , CTE_TRN_FRM ),128%) +&
					EDIT$(TPG_MAT_TRN(II% , JJ% , CTE_TRN_CMN ),128%) +&
                                        EDIT$(TPG_MAT_TRN(II% , JJ% , CTE_TRN_INS),128%) + "'."
			BUFOUT = ESCR_WS3(MG_12,REGMNU$)

			REGMNU$ = "MOVE WSS-" + TPG_VEC_REQ(II%)  + "-" +  AA$ + "-FINP-" +&
					EDIT$(TPG_MAT_TRN(II% , JJ% , CTE_TRN_INS ),128%) +&
					" TO TX-" + TPG_VEC_REQ(II%)  + "-" +  AA$ + "-FINP-" +&
					EDIT$(TPG_MAT_TRN(II% , JJ% , CTE_TRN_INS ),128%)  + BB$
			BUFOUT = ESCR_PD3(MG_12,REGMNU$)

			FINP$ = EDIT$(TPG_MAT_TRN(II% , JJ% , CTE_TRN_FIN ),128%)
			IF FINP$ = "" THEN
				FINP$ = "   "
			END IF
			REGMNU$ = "03 WSS-" + TPG_VEC_REQ(II%)  + "-" + AA$ + "-FINP-" +&
					MNU_GLS_PROG$ + " PIC X(03) VALUE '" + FINP$   + "'."
			BUFOUT = ESCR_WS3(MG_12,REGMNU$)

			REGMNU$ = "MOVE WSS-" + TPG_VEC_REQ(II%)  + "-" + AA$ + "-FOUT-" +&
					EDIT$(TPG_MAT_TRN(II% , JJ% , CTE_TRN_INS ),128%) +&
					" TO TX-" + TPG_VEC_REQ(II%)  + "-" + AA$ + "-FOUT-" +&
					EDIT$(TPG_MAT_TRN(II% , JJ% , CTE_TRN_INS ),128%) + BB$
			BUFOUT = ESCR_PD3(MG_12,REGMNU$)

			FOUT$ = EDIT$(TPG_MAT_TRN(II% , JJ% , CTE_TRN_FOU ),128%)
			IF FOUT$ = "" THEN
				FOUT$ = "   "
			END IF
			REGMNU$ = "03 WSS-" + TPG_VEC_REQ(II%)  + "-" + AA$ + "-FOUT-" +&
					MNU_GLS_PROG$ + " PIC X(03) VALUE '" + FOUT$ + "'."
			BUFOUT = ESCR_WS3(MG_12,REGMNU$)

			BUF$ = "FIN-MOV-GNS-" + TPG_VEC_REQ(II%)  + "-" + AA$ + "."
			BUFOUT = ESCR_PD3(MG_8,BUF$)
			BUF$ = "EXIT."
			BUFOUT = ESCR_PD3(MG_12,BUF$)
			BUF$ = ""
			BUFOUT = ESCR_PD3(MG_12,BUF$)
		NEXT JJ%
	NEXT II%
	IF WSS_DSPPASO = 'S' THEN
		PRINT " FIN              PASO " ; PASO% ; "/" ; TOT_PASOS ; "MOV-GNS"
	END IF

	PASO% = PASO% + 1
	IF WSS_DSPPASO = 'S' THEN
		PRINT " INICIO           PASO " ; PASO% ; "/" ; TOT_PASOS ; "MOV-PTAMX"
	END IF
 	FOR II% = 1 TO TPG_TOT_REQ 
		FOR JJ% = 1 TO TPG_MAT_CAM_TX( II% ) 
		    IF TPG_MAT_TXFRM(II% , JJ%) = TPG_MAT_PTFRM(II% , JJ%) THEN 
			AA$ = STR$(JJ%)
			IF LEN(AA$) = 1 THEN
				AA$ = "0" + AA$
			END IF

			BUF$ = "MOV-PT-TX-" + TPG_VEC_REQ(II%)  + "-" + AA$ + " SECTION."
			BUFOUT = ESCR_PD1(MG_8,BUF$)
			BUF$ = "INI-MOV-PT-TX-" + TPG_VEC_REQ(II%)  + "-" + AA$ + "."
			BUFOUT = ESCR_PD1(MG_8,BUF$)

			BUF$ = "DSP-PT-" + TPG_VEC_REQ(II%)  + "-" + AA$ + " SECTION."
			BUFOUT = ESCR_DFI(MG_8,BUF$)
			BUF$ = "INI-DSP-PT-" + TPG_VEC_REQ(II%)  + "-" + AA$ + "."
			BUFOUT = ESCR_DFI(MG_8,BUF$)

			FOR GG% = 1 TO TPG_TOT_HST
				IF (TPG_MAT_HST_ALF( GG% , CTE_IDX_NOM ) = TPG_MAT_TXFRM(II% , JJ%)) THEN
					HST% = GG%
					GG% = TPG_TOT_HST + 1
				END IF
			NEXT GG%	

			FOR GG% = 1 TO TPG_MAT_HST_NUM(HST% ,CTE_IDX_TSF) 
				IF (TPG_MAT_SRV_ALF(HST% , GG% ) =  EDIT$(TPG_MAT_TXFMT(II% , JJ%),128%)) THEN
					SRV% = GG%
					GG% = TPG_MAT_HST_NUM(HST% ,CTE_IDX_TSF) + 1
				END IF
			NEXT GG%

			NIV_MOV_TX_ENT% = 0
			NIV_MOV_PT_ENT% = 0

			IF  TPG_MAT_NIV_IDTX(II% , JJ% , 1 ) <> 0 THEN
				NIV_MOV_TX_ENT% = NIV_MOV_TX_ENT% + 1
				IF TPG_MAT_NIV_IDTX(II% , JJ% , 2 ) <> 0 THEN
					NIV_MOV_TX_ENT% = NIV_MOV_TX_ENT% + 1
				END IF
			END IF	

			FOR DD% = 1 TO TPG_MAT_CAM_PT( II% ) 
				IF TPG_MAT_TXFRM(II% , JJ% ) = TPG_MAT_PTFRM(II% , DD% ) AND&
				   EDIT$(TPG_MAT_TXFMT(II% , JJ% ),128%) = EDIT$(TPG_MAT_PTFMT(II% , DD% ),128%)  THEN 
					TY% = DD%
					DD% = TPG_MAT_CAM_PT( II% )  + 1
				END IF
			NEXT DD%

			IF  TPG_MAT_NIV_IDPT(II% , TY% , 1 )  <> 0 THEN
				NIV_MOV_PT_ENT% = NIV_MOV_PT_ENT% + 1
				IF  TPG_MAT_NIV_IDPT(II% , TY% , 2 )  <> 0  THEN
					NIV_MOV_PT_ENT% = NIV_MOV_PT_ENT% + 1
				END IF
			END IF

			FOR GG% = 1 TO TPG_MAT_NCP_SRV( HST% , SRV% )
				NIV_MOV_PT_MOV% = NIV_MOV_PT_ENT% 
				NIV_MOV_TX_MOV% = NIV_MOV_TX_ENT% 
				N_IDX% = 0
				NN_IDX% = 0
				POS_IDX% = 0
 
				FOR XX% = 1 TO TPG_MAT_NCP_SRV( HST% , SRV% )
 					IF EDIT$(TPG_MAT_NAMEFLDSRV(HST% , SRV%, XX% ),128%) = EDIT$(TPG_MAT_NAMEFLDSRV(HST% , SRV%, GG% ),128%) THEN
 						N_IDX% = N_IDX% + 1
 						IF N_IDX% = 2 THEN
 							POS_IDX% = XX%
 						END IF
 					END IF
 				NEXT XX%

 !!!   BUSCA CAMPO DE SERVER EN HST PARA, IDENTIFICAR SU LARGO

				FOR TT% = 1 TO TPG_MAT_HST_NUM(HST% , CTE_IDX_TCF)
					TPGMATNAMEFLDSRV$ = EDIT$(TPG_MAT_NAMEFLDSRV(HST%, SRV%, GG%), 128%)
					IF TPGMATNAMEFLDSRV$ = TPG_MAT_NAMEFLDHST(HST% , TT% ) THEN
						CAMP% = TT%
						TT% = TPG_MAT_HST_NUM(HST% , CTE_IDX_TCF) + 1
					END IF
				NEXT TT%
				VV$ = STR$(TPG_MAT_LRG(HST% , CAMP% )) 

 !!! FIN BUSQUEDA DE  CAMPO

				NN_IDX% = TPG_MAT_TOTOCCFLDSRV(HST% , SRV%, GG% ) 

 				IF NN_IDX% <= 1 THEN
					NN_IDX% = 1
				END IF
			
				IF NIV_MOV_PT_MOV% = 0 THEN
					IDX_PT$ = ""
				ELSE
				IF NIV_MOV_PT_MOV% = 1 THEN
					IDX_PT$ = "TPG-I"
				ELSE
				IF NIV_MOV_PT_MOV% = 2 THEN
					IDX_PT$ = "TPG-I, TPG-J"
				ELSE
				IF NIV_MOV_PT_MOV% = 3 THEN
					IDX_PT$ = "TPG-I, TPG-J, TPG-K"
				END IF
				END IF
				END IF
				END IF

				IF NIV_MOV_TX_MOV% = 0 THEN
					IDX_TX$ = ""
					DSP_IDX_TX$ = ""
				ELSE
				IF NIV_MOV_TX_MOV% = 1 THEN
					IDX_TX$ = "TPG-I"
					DSP_IDX_TX$ = " TPG-I "
				ELSE
				IF NIV_MOV_TX_MOV% = 2 THEN
					IDX_TX$ = "TPG-I, TPG-J"
					DPS_IDX_TX$ = " TPG-I ', ' TPG-J "
				ELSE
				IF NIV_MOV_TX_MOV% = 3 THEN
					IDX_TX$ = "TPG-I, TPG-J, TPG-K"
					DSP_IDX_TX$ = " TPG-I ', ' TPG-J ', ' TPG-K"
				END IF
				END IF
				END IF
				END IF

				IF IDX_PT$ > "" OR NN_IDX% > 1 THEN
					ABPAPT$ = "("
					CIPAPT$ = ")"
				ELSE
					ABPAPT$ = ""
					CIPAPT$ = ""
				END IF

				COMAPT$ = ""
				IF IDX_PT$ > "" AND NN_IDX% > 1 THEN
					COMAPT$ = ", "
				END IF

				IF IDX_TX$ > "" OR NN_IDX% > 1 THEN
					ABPATX$ = "("
					CIPATX$ = ")"
				ELSE
					ABPATX$ = ""
					CIPATX$ = ""
				END IF
				COMATX$ = ""
				IF IDX_TX$ > "" AND NN_IDX% > 1 THEN
					COMATX$ = ", "
				END IF

				YY$ = STR$(JJ%)
				IF LEN(YY$) = 1 THEN
					YY$ = "0" + YY$
				END IF
				YY$ = "-" + YY$
				IF NN_IDX% > 1  THEN
					IF  GG% < POS_IDX% THEN
						REGMNU$ = ""
						BUFOUT = ESCR_PD1(MG_12,REGMNU$)
						REGMNU$ = "MOVE 1 TO TPG-L."
						BUFOUT = ESCR_PD1(MG_12,REGMNU$)
						REGMNU$ = "LUP-" + "PT-" + TPG_VEC_REQ(II%) + YY$  + "-" +&
							 EDIT$(TPG_MAT_NAMEFLDSRV(HST%, SRV%, GG%),128%) + "."
						BUFOUT = ESCR_PD1(MG_8,REGMNU$)
						REGMNU$ = "MOVE PT-" + TPG_VEC_REQ(II%) +&
							YY$  + "-" +&
							EDIT$(TPG_MAT_NAMEFLDSRV(HST%, SRV%, GG%),128%) + ABPAPT$ + IDX_PT$ + COMAPT$ +&
							"TPG-L" + CIPAPT$ + " TO TX-" + TPG_VEC_REQ(II%) + YY$  + "-" +&
						        EDIT$(TPG_MAT_NAMEFLDSRV(HST%, SRV%, GG%),128%) + ABPATX$ + IDX_TX$ + COMATX$ +&
							"TPG-L" + CIPATX$ + "." 
						BUFOUT = ESCR_PD1(MG_12,REGMNU$)
						REGMNU$ = "ADD 1 TO TPG-L."
						BUFOUT = ESCR_PD1(MG_12,REGMNU$)
						REGMNU$ = "IF TPG-L < " + STR$(NN_IDX% + 1)
						BUFOUT = ESCR_PD1(MG_12,REGMNU$)
						REGMNU$ = "GO TO " + "LUP-" + "PT-" + TPG_VEC_REQ(II%) + YY$  +&
							 "-" + EDIT$(TPG_MAT_NAMEFLDSRV(HST%, SRV%, GG%),128%)+ "."
						BUFOUT = ESCR_PD1(MG_16,REGMNU$)
						IF DSP_IDX_TX$ <> "" THEN
							REGMNU$ = "DISPLAY '" + DSP_IDX_TX$ + "  :  '" + DSP_IDX_TX$ + "."
							BUFOUT = ESCR_DFI(MG_12,REGMNU$)
						END IF
						REGMNU$ = "DISPLAY ' PT-" + TPG_VEC_REQ(II%) +&
							YY$  + "-" +&
							EDIT$(TPG_MAT_NAMEFLDSRV(HST%, SRV%, GG%),128%) + ABPAPT$ + IDX_PT$ + COMAPT$ +&
							"TPG-L" + CIPAPT$ + " DE LARGO : " + VV$ + " '."
						BUFOUT = ESCR_DFI(MG_12,REGMNU$)
						REGMNU$ = "DISPLAY "
						BUFOUT = ESCR_DFI(MG_12,REGMNU$)
						REGMNU$ = "'123456789*123456789*123456789*123456789*'"
						BUFOUT = ESCR_DFI(MG_12,REGMNU$)
						REGMNU$ = "DISPLAY  PT-" + TPG_VEC_REQ(II%) +&
							YY$  + "-" +&
							EDIT$(TPG_MAT_NAMEFLDSRV(HST%, SRV%, GG%),128%) + ABPAPT$ + IDX_PT$ + COMAPT$ +&
							"TPG-L" + CIPAPT$ + " '##########'."
						BUFOUT = ESCR_DFI(MG_12,REGMNU$)
						REGMNU$ = "DISPLAY ' '. "
						BUFOUT = ESCR_DFI(MG_12,REGMNU$)

					END IF
				ELSE
					REGMNU$ = "MOVE PT-" + TPG_VEC_REQ(II%) +&
						YY$  + "-" +&
						EDIT$(TPG_MAT_NAMEFLDSRV(HST%, SRV%, GG%) , 128%) + ABPAPT$ + IDX_PT$ + CIPAPT$ +&
						" TO TX-" + TPG_VEC_REQ(II%) + YY$  + "-" +&
					        EDIT$(TPG_MAT_NAMEFLDSRV(HST%, SRV%, GG%) , 128%) + ABPATX$ + IDX_TX$ + CIPATX$ + "." 
					 BUFOUT = ESCR_PD1(MG_12,REGMNU$)
					 IF DSP_IDX_TX$ <> "" THEN
					 	REGMNU$ = "DISPLAY '" + DSP_IDX_TX$ + "  :' " + DSP_IDX_TX$ + "."
					 	BUFOUT = ESCR_DFI(MG_12,REGMNU$)
					END IF
					 REGMNU$ = "DISPLAY 'PT-" +  TPG_VEC_REQ(II%) +&
						YY$  + "-" +&
						EDIT$(TPG_MAT_NAMEFLDSRV(HST%, SRV%, GG%) , 128%) + ABPAPT$ + IDX_PT$ + CIPAPT$ +&
						" DE LARGO : " + VV$ + " '."
					 BUFOUT = ESCR_DFI(MG_12,REGMNU$)
					 REGMNU$ = "DISPLAY"
					 BUFOUT = ESCR_DFI(MG_12,REGMNU$)
					 REGMNU$ = "'123456789*123456789*123456789*123456789*123456789*'"
					 BUFOUT = ESCR_DFI(MG_12,REGMNU$)
					 REGMNU$ = "DISPLAY  PT-" +  TPG_VEC_REQ(II%) +&
						YY$  + "-" +&
						EDIT$(TPG_MAT_NAMEFLDSRV(HST%, SRV%, GG%) , 128%) + ABPAPT$ + IDX_PT$ + CIPAPT$ +&
						 " '##########'."
					 BUFOUT = ESCR_DFI(MG_12,REGMNU$)
 					 REGMNU$ = "DISPLAY ' '. "
					 BUFOUT = ESCR_DFI(MG_12,REGMNU$)
						
				END IF
			NEXT GG%

			BUF$ = "FIN-MOV-PT-TX-" + TPG_VEC_REQ(II%)  + "-" + AA$ + "."
			BUFOUT = ESCR_PD1(MG_8,BUF$)
			BUF$ = "EXIT."
			BUFOUT = ESCR_PD1(MG_12,BUF$)
			BUF$ = "FIN-DSP-PT-" + TPG_VEC_REQ(II%)  + "-" + AA$ + "."
			BUFOUT = ESCR_DFI(MG_8,BUF$)
			BUF$ = "EXIT."
			BUFOUT = ESCR_DFI(MG_12,BUF$)
			BUF$ = ""
			BUFOUT = ESCR_PD1(MG_12,BUF$)
			BUF$ = ""
			BUFOUT = ESCR_DFI(MG_12,BUF$)

 !!!		  ELSE
 !!!			PRINT " NO GENERA MOV DE : "
 !!!			print " TPG_MAT_TXFRM(II% , JJ%)  "   ; TPG_MAT_TXFRM(II% , JJ%) 
 !!!			print " TPG_MAT_PTFRM(II% , JJ%)  "   ; TPG_MAT_PTFRM(II% , JJ%) 
 !!!			PRINT " II% " ; II%
 !!!			PRINT " JJ% " ; JJ%
		  END IF

		NEXT JJ%
	NEXT II%
	IF WSS_DSPPASO = 'S' THEN
		PRINT " FIN              PASO " ; PASO% ; "/" ; TOT_PASOS ; "MOV-PTAMX"
	END IF

	PASO% = PASO% + 1
	IF WSS_DSPPASO = 'S' THEN
		PRINT " INICIO           PASO " ; PASO% ; "/" ; TOT_PASOS ; "MOV-MXAPT"
	END IF

	FOR II% = 1 TO TPG_TOT_REQ 
		FOR JJ% = 1 TO TPG_MAT_CAM_XT( II% ) 

			AA$ = STR$(JJ%)
			IF LEN(AA$) = 1 THEN
				AA$ = "0" + AA$
			END IF

			BUF$ = "MOV-XT-TP-" + TPG_VEC_REQ(II%)  + "-" + AA$ + " SECTION."
			BUFOUT = ESCR_PD2(MG_8,BUF$)
			BUF$ = "INI-MOV-XT-TP-" + TPG_VEC_REQ(II%)  + "-" + AA$ + "."
			BUFOUT = ESCR_PD2(MG_8,BUF$)
			BUF$ = "DSP-TP-" + TPG_VEC_REQ(II%)  + "-" + AA$ + " SECTION."
			BUFOUT = ESCR_DFO(MG_8,BUF$)
			BUF$ = "INI-DSP-TP-" + TPG_VEC_REQ(II%)  + "-" + AA$ + "."
			BUFOUT = ESCR_DFO(MG_8,BUF$)


			NIV_MOV_XT_ENT% = 0
			NIV_MOV_TP_ENT% = 0

			IF  TPG_MAT_NIV_IDXT(II% , JJ% , 1 ) <> 0 THEN
				NIV_MOV_XT_ENT% = NIV_MOV_TX_ENT% + 1
				IF TPG_MAT_NIV_IDXT(II% , JJ% , 2 ) <> 0 THEN
					NIV_MOV_XT_ENT% = NIV_MOV_XT_ENT% + 1
				END IF
			END IF	

			FOR GG% = 1 TO TPG_TOT_HST
				IF (TPG_MAT_HST_ALF( GG% , CTE_IDX_NOM ) = TPG_MAT_XTFRM(II% , JJ%)) THEN
					HST% = GG%
					GG% = TPG_TOT_HST + 1
				END IF
			NEXT GG%	

			FOR GG% = 1 TO TPG_MAT_HST_NUM(HST% ,CTE_IDX_TSF) 
				IF (TPG_MAT_SRV_ALF(HST% , GG% ) =  EDIT$(TPG_MAT_XTFMT(II% , JJ%),128%)) THEN
					SRV% = GG%
					GG% = TPG_MAT_HST_NUM(HST% ,CTE_IDX_TSF) + 1
				END IF
			NEXT GG%

			FOR DD% = 1 TO TPG_MAT_CAM_TP( II% ) 
				TPGMATTPFRM$ = EDIT$(TPG_MAT_TPFRM(II% , DD%),128%)
				TPGMATTPFMT$ = EDIT$(TPG_MAT_TPFMT(II% , DD%),128%)  
				IF TPG_MAT_XTFRM(II% , JJ% ) = TPGMATTPFRM$  AND&
				   EDIT$(TPG_MAT_XTFMT(II% , JJ% ),128%) = TPGMATTPFMT$   THEN 
					TY% = DD%
					DD% = TPG_MAT_CAM_TP( II% )  + 1
				END IF
			NEXT DD%

			IF  TPG_MAT_NIV_IDTP(II% , TY% , 1 )  <> 0 THEN
				NIV_MOV_TP_ENT% = NIV_MOV_TP_ENT% + 1
				IF  TPG_MAT_NIV_IDTP(II% , TY% , 2 )  <> 0  THEN
					NIV_MOV_TP_ENT% = NIV_MOV_TP_ENT% + 1
				END IF
			END IF


			FOR GG% = 1 TO TPG_MAT_NCP_SRV( HST% , SRV% )
				NIV_MOV_TP_MOV% = NIV_MOV_TP_ENT%
				NIV_MOV_XT_MOV% = NIV_MOV_XT_ENT%
				NN_IDX% = 0
				N_IDX% = 0
				POS_IDX% = 0
 				FOR XX% = 1 TO TPG_MAT_NCP_SRV( HST% , SRV% )
 					IF EDIT$(TPG_MAT_NAMEFLDSRV(HST% , SRV%, XX% ) , 128%) = EDIT$(TPG_MAT_NAMEFLDSRV(HST% , SRV%, GG% ) , 128%) THEN
 						N_IDX% = N_IDX% + 1
 						IF N_IDX% = 2 THEN
 							POS_IDX% = XX%
 						END IF
 					END IF
 				NEXT XX%
				NN_IDX% = TPG_MAT_TOTOCCFLDSRV(HST% , SRV%, GG% ) 
 !!!				PRINT "6: N_IDX, NN_IDX , POS_IDX% " ; N_IDX% ; " " ; NN_IDX% ; " " ; POS_IDX%

 !!!   BUSCA CAMPO DE SERVER EN HST PARA, IDENTIFICAR SU LARGO
				FOR TT% = 1 TO TPG_MAT_HST_NUM(HST% , CTE_IDX_TCF)
					TPGMATNAMEFLDSRV$ = EDIT$(TPG_MAT_NAMEFLDSRV(HST%, SRV%, GG%), 128%)
					IF TPGMATNAMEFLDSRV$ = TPG_MAT_NAMEFLDHST(HST% , TT% ) THEN
						CAMP% = TT%
						TT% = TPG_MAT_HST_NUM(HST% , CTE_IDX_TCF) + 1
					END IF
				NEXT TT%
				VV$ = STR$(TPG_MAT_LRG(HST% , CAMP% )) 

 !!! FIN BUSQUEDA DE  CAMPO


 				IF NN_IDX% <= 1 THEN
					NN_IDX% = 1
				END IF
			
				IF NIV_MOV_TP_MOV% = 0 THEN
					IDX_TP$ = ""
				ELSE
				IF NIV_MOV_TP_MOV% = 1 THEN
					IDX_TP$ = "TPG-I"
				ELSE
				IF NIV_MOV_TP_MOV% = 2 THEN
					IDX_TP$ = "TPG-I, TPG-J"
				ELSE
				IF NIV_MOV_TP_MOV% = 3 THEN
					IDX_TP$ = "TPG-I, TPG-J, TPG-K"
				END IF
				END IF
				END IF
				END IF

				IF NIV_MOV_XT_MOV% = 0 THEN
					IDX_XT$ = ""
					DSP_IDX_TX$ = ""
				ELSE
				IF NIV_MOV_XT_MOV% = 1 THEN
					IDX_XT$ = "TPG-I"
					DSP_IDX_XT$ = "TPG-I"
				ELSE
				IF NIV_MOV_XT_MOV% = 2 THEN
					IDX_XT$ = "TPG-I, TPG-J"
					DSP_IDX_XT$ = "TPG-I, TPG-J"
				ELSE
				IF NIV_MOV_XT_MOV% = 3 THEN
					IDX_XT$ = "TPG-I, TPG-J, TPG-K"
					DSP_IDX_XT$ = "TPG-I, TPG-J, TPG-K"
				END IF
				END IF
				END IF
				END IF

				IF IDX_TP$ > "" OR NN_IDX% > 1 THEN
					ABPATP$ = "("
					CIPATP$ = ")"
				ELSE
					ABPATP$ = ""
					CIPATP$ = ""
				END IF

				COMATP$ = ""
				IF IDX_TP$ > "" AND NN_IDX% > 1 THEN
					COMATP$ = ", "
				END IF

				IF IDX_XT$ > "" OR NN_IDX% > 1 THEN
					ABPAXT$ = "("
					CIPAXT$ = ")"
				ELSE
					ABPAXT$ = ""
					CIPAXT$ = ""
				END IF
				COMAXT$ = ""
				IF IDX_XT$ > "" AND NN_IDX% > 1 THEN
					COMAXT$ = ", "
				END IF

				YY$ = STR$(JJ%)
				IF LEN(YY$) = 1 THEN
					YY$ = "0" + YY$
				END IF
				YY$ = "-" + YY$
				IF NN_IDX% > 1 THEN
					IF  GG% < POS_IDX% THEN
						REGMNU$ = ""
						BUFOUT = ESCR_PD2(MG_12,REGMNU$)
						REGMNU$ = "MOVE 1 TO TPG-L."
						BUFOUT = ESCR_PD2(MG_12,REGMNU$)
						REGMNU$ = "LUP-" + "TP-" + TPG_VEC_REQ(II%) + YY$  +&
							 "-" + EDIT$(TPG_MAT_NAMEFLDSRV(HST%, SRV%, GG%) , 128%) + "."
						BUFOUT = ESCR_PD2(MG_8,REGMNU$)
						REGMNU$ = "MOVE XT-" + TPG_VEC_REQ(II%) + YY$  + "-" +&
						        EDIT$(TPG_MAT_NAMEFLDSRV(HST%, SRV%, GG%) , 128%) + ABPAXT$ + IDX_XT$ + COMAXT$ +&
							"TPG-L" + CIPAXT$ + " TO TP-" + TPG_VEC_REQ(II%) +&
							YY$  + "-" +&
							EDIT$(TPG_MAT_NAMEFLDSRV(HST%, SRV%, GG%) , 128%) + ABPATP$ + IDX_TP$ + COMATP$ +&
							"TPG-L" + CIPATP$ + "." 
						BUFOUT = ESCR_PD2(MG_12,REGMNU$)
						REGMNU$ = "ADD 1 TO TPG-L."
						BUFOUT = ESCR_PD2(MG_12,REGMNU$)
						REGMNU$ = "IF TPG-L < " + STR$(NN_IDX% + 1)
						BUFOUT = ESCR_PD2(MG_12,REGMNU$)
						REGMNU$ = "GO TO " + "LUP-" + "TP-" + TPG_VEC_REQ(II%) + YY$  +&
							 "-" + EDIT$(TPG_MAT_NAMEFLDSRV(HST%, SRV%, GG%) , 128%) + "."
						BUFOUT = ESCR_PD2(MG_16,REGMNU$)
						REGMNU$ = ""
						BUFOUT = ESCR_DFO(MG_12,REGMNU$)
						REGMNU$ = "MOVE 1 TO TPG-L."
						BUFOUT = ESCR_DFO(MG_12,REGMNU$)
						REGMNU$ = "LUP-" + "TP-" + TPG_VEC_REQ(II%) + YY$  +&
							 "-" + EDIT$(TPG_MAT_NAMEFLDSRV(HST%, SRV%, GG%) , 128%) + "."
						BUFOUT = ESCR_DFO(MG_8,REGMNU$)
						IF DSP_IDX_TX$ <> "" THEN
							REGMNU$ = "DISPLAY '" +  DSP_IDX_TX$ + "  : '  " + DSP_IDX_TX$ + "."
							BUFOUT = ESCR_DFO(MG_12,REGMNU$)
						END IF
						REGMNU$ = "DISPLAY 'TP-" + TPG_VEC_REQ(II%) +&
							YY$  + "-" +&
							EDIT$(TPG_MAT_NAMEFLDSRV(HST%, SRV%, GG%) , 128%) + ABPATP$ + IDX_TP$ + COMATP$ +&
							"TPG-L" + CIPATP$ + " DE LARGO " + VV$ + "'." 
						BUFOUT = ESCR_DFO(MG_12,REGMNU$)
						REGMNU$ = "DISPLAY "
						BUFOUT = ESCR_DFO(MG_12,REGMNU$)
						REGMNU$ = "'123456789*123456789*123456789*123456789*123456789*'"
						BUFOUT = ESCR_DFO(MG_12,REGMNU$)
						REGMNU$ = "DISPLAY  TP-" + TPG_VEC_REQ(II%) +&
							YY$  + "-" +&
							EDIT$(TPG_MAT_NAMEFLDSRV(HST%, SRV%, GG%) , 128%) + ABPATP$ + IDX_TP$ + COMATP$ +&
							"TPG-L" + CIPATP$ + " '##########'." 
						BUFOUT = ESCR_DFO(MG_12,REGMNU$)
						REGMNU$ = "DISPLAY ' '."
						BUFOUT = ESCR_DFO(MG_12,REGMNU$)
						REGMNU$ = "ADD 1 TO TPG-L."
						BUFOUT = ESCR_DFO(MG_12,REGMNU$)
						REGMNU$ = "IF TPG-L < " + STR$(NN_IDX% + 1)
						BUFOUT = ESCR_DFO(MG_12,REGMNU$)
						REGMNU$ = "GO TO " + "LUP-" + "TP-" + TPG_VEC_REQ(II%) + YY$  +&
							 "-" + EDIT$(TPG_MAT_NAMEFLDSRV(HST%, SRV%, GG%) , 128%) + "."
						BUFOUT = ESCR_DFO(MG_16,REGMNU$)
					END IF
				ELSE
					REGMNU$ = "MOVE XT-" + TPG_VEC_REQ(II%) + YY$  + "-" +&
					        EDIT$(TPG_MAT_NAMEFLDSRV(HST%, SRV%, GG%) , 128%) + ABPAXT$ + IDX_XT$ + CIPAXT$+&
						" TO TP-" + TPG_VEC_REQ(II%) + YY$  + "-" +&
						EDIT$(TPG_MAT_NAMEFLDSRV(HST%, SRV%, GG%) , 128%) + ABPATP$ + IDX_TP$ + CIPATP$ + "." 
					BUFOUT = ESCR_PD2(MG_12,REGMNU$)
					IF DSP_IDX_TX$ <> "" THEN
						REGMNU$ = "DISPLAY '" + DSP_IDX_TX$ + "  : ' " + DSP_IDX_TX$ + "."
						BUFOUT = ESCR_DFO(MG_12,REGMNU$)
					END IF
					REGMNU$ = "DISPLAY 'TP-" + TPG_VEC_REQ(II%) + YY$  + "-" +&
						EDIT$(TPG_MAT_NAMEFLDSRV(HST%, SRV%, GG%) , 128%) + ABPATP$ + IDX_TP$ +&
                                                 CIPATP$ + " DE LARGO " + VV$ + " '." 
					BUFOUT = ESCR_DFO(MG_12,REGMNU$)
					REGMNU$ = "DISPLAY "
					BUFOUT = ESCR_DFO(MG_12,REGMNU$)
					REGMNU$ = "'123456789*123456789*123456789*123456789*123456789*'"
					BUFOUT = ESCR_DFO(MG_12,REGMNU$)
					REGMNU$ = "DISPLAY TP-" + TPG_VEC_REQ(II%) + YY$  + "-" +&
						EDIT$(TPG_MAT_NAMEFLDSRV(HST%, SRV%, GG%) , 128%) + ABPATP$ + IDX_TP$ +&
                                                 CIPATP$ + " '##########'." 
					BUFOUT = ESCR_DFO(MG_12,REGMNU$)
					REGMNU$ = "DISPLAY ' '. "
					BUFOUT = ESCR_DFO(MG_12,REGMNU$)
				END IF
			NEXT GG%

			BUF$ = "FIN-MOV-XT-TP-" + TPG_VEC_REQ(II%)  + "-" + AA$ + "."
			BUFOUT = ESCR_PD2(MG_8,BUF$)
			BUF$ = "EXIT."
			BUFOUT = ESCR_PD2(MG_12,BUF$)
			BUF$ = ""
			BUFOUT = ESCR_PD2(MG_12,BUF$)
			BUF$ = "FIN-DSP-TP-" + TPG_VEC_REQ(II%)  + "-" + AA$ + "."
			BUFOUT = ESCR_DFO(MG_8,BUF$)
			BUF$ = "EXIT."
			BUFOUT = ESCR_DFO(MG_12,BUF$)
			BUF$ = ""
			BUFOUT = ESCR_DFO(MG_12,BUF$)

		NEXT JJ%
	NEXT II%
	IF WSS_DSPPASO = 'S' THEN
		PRINT " FIN              PASO " ; PASO% ; "/" ; TOT_PASOS ; "MOV-MXAPT"
	END IF

	GO TO LABE_ATRA
	
 LABE_BADD:
	IF ERR = 2 THEN
		PRINT FILE_STX,FILE_PD1,FILE_PD2, " : NOMBRE DE ARCHIVO ILEGAL"
	ELSE 
	IF ERR = 5 THEN
		PRINT FILE_STX,FILE_PD1,FILE_PD2, " ARCHIVO INEXISTENTE       "
	ELSE
		PRINT "CODIGO : ",ERR
		PRINT "MENSAJE :",ERT$(ERR)
	END IF
	END IF
	RESUME 999
999
 LABE_ATRA:
 END
