100  
	DECLARE	REAL  		        VLTOKEN
	DECLARE	REAL		        VLVLTOKEN

	DECLARE INTEGER			PASADA
	DECLARE INTEGER			INX_III
	DECLARE	INTEGER			INX_JJJ
	DECLARE	INTEGER			INX_KKK
	DECLARE	INTEGER			INX_LLL
	DECLARE	INTEGER		 	SZTOKEN		
	DECLARE INTEGER			SZSZTOKEN
	DECLARE	INTEGER			PTR_PTOKEN
	DECLARE	INTEGER			PTR_P
	DECLARE	INTEGER			PTR_Q
	DECLARE	INTEGER			ASCII_Q
	DECLARE INTEGER			CAR_LEIDOS
	DECLARE	INTEGER			INX_MOD
	DECLARE	INTEGER			INX_ENC
	DECLARE INTEGER			MAX_MOD
	DECLARE INTEGER			ACCION

	DECLARE	STRING			BIP
	DECLARE	STRING			PROGRAMAIN
	DECLARE	STRING			PROGRAMAOUT
	DECLARE STRING			RESPALDO_PROGRAMA
	DECLARE STRING			ANT_VAL_PTR_PTOKEN
	DECLARE STRING			VAL_PTR_PTOKEN
	DECLARE STRING			VAL_STR_PTOKEN
	DECLARE STRING			NEW_REG
	DECLARE STRING			EXT_PGM_IN(50)
	DECLARE	STRING			NOM_PTL_IN(50)

	DECLARE INTEGER	CONSTANT	IDNTOK		=	1
	DECLARE INTEGER	CONSTANT	KEYTOK		=	2
	DECLARE INTEGER	CONSTANT	NUMTOK		=	3
	DECLARE INTEGER CONSTANT	EOLTOK		=	4
	DECLARE INTEGER	CONSTANT	STSTOK		=	5
	DECLARE INTEGER	CONSTANT	STDTOK		=	6
	DECLARE INTEGER	CONSTANT	CHRTOK		=	7
	DECLARE INTEGER	CONSTANT	ETXTOK		=	8

	DECLARE INTEGER CONSTANT	TABB		=	9
	DECLARE INTEGER	CONSTANT	NEW_LINE	=	10
	DECLARE INTEGER	CONSTANT	CAR_RET		=	13
	DECLARE INTEGER	CONSTANT	CREMILLA_DOBLE	=	34
	DECLARE INTEGER	CONSTANT	CREMILLA_SIMPLE	=	39
	DECLARE INTEGER CONSTANT	ASTERISCO	=	42
	DECLARE INTEGER CONSTANT	SIGNO_MENOS	=	45
	DECLARE INTEGER CONSTANT	PUNTO		=	46
	DECLARE INTEGER CONSTANT	NUMERO_CERO	=	48
	DECLARE INTEGER	CONSTANT	NUMERO_NUEVE 	=	57
	DECLARE INTEGER	CONSTANT	LETRA_A		=	65
	DECLARE INTEGER	CONSTANT	LETRA_Z		=	90
	DECLARE INTEGER	CONSTANT	LOWER_A		=	97
	DECLARE INTEGER	CONSTANT	LOWER_Z		=      122	

	DECLARE STRING 	CONSTANT	CTE_TITULO	=	"TITULO "
	DECLARE STRING 	CONSTANT	CTE_POSICION	=	"POSICION "
	DECLARE STRING 	CONSTANT	CTE_CAMPO	=	"CAMPO "
	DECLARE STRING 	CONSTANT	CTE_FECHA	=	"FECHA "
	DECLARE STRING 	CONSTANT	CTE_SECCION	=	"SECCION "
	DECLARE STRING 	CONSTANT	CTE_LARGO	=	"LARGO "
	DECLARE STRING 	CONSTANT	CTE_NUMERICO	=	"NUMERICO "
	DECLARE STRING 	CONSTANT	CTE_COMA 	=	","
	DECLARE STRING 	CONSTANT	CTE_ALFANUMERICO=	"ALFANUMERICO "

	DECLARE STRING			REGISTRO
	DECLARE STRING			VAR_TITULO
	DECLARE STRING			VAR_POSICION	
	DECLARE STRING			VAR_CAMPO
	DECLARE STRING			VAR_SECCION
	DECLARE STRING			VAR_NOMBRE
	DECLARE STRING			VAR_LARGO
	DECLARE STRING			VAR_TIPO
	DECLARE STRING			VAR_POS_X
	DECLARE STRING			VAR_POS_Y

 !================================================
    DEF INTEGER ESCRIBA

	PRINT 	#CANALOUT% , REGISTRO	
	REGISTRO = ""

    END DEF
 !================================================
	
    DEF INTEGER NEXTTOKEN 

	ON ERROR GO TO LAB_ERROR
 CICLO:	NEW_REG = "NO"

	IF PTR_PTOKEN = ETXTOK THEN
		 GO TO LAB_ASIG
	END IF

        PTR_P = PTR_Q 
 SIGA:	WHILE (MID$(ARR_IB$,PTR_P,1) = " " OR &
			ASCII(MID$(ARR_IB$,PTR_P,1)) = TABB ) AND &
			PTR_P <= CAR_LEIDOS

		PTR_P = PTR_P + 1
	NEXT

	PTR_Q = PTR_P 

	WHILE PTR_P > CAR_LEIDOS OR ARR_IB$ = ""

		GET #CANALIN%
		CAR_LEIDOS = RECOUNT
	     	MOVE FROM #CANALIN% , ARR_IB$ = CAR_LEIDOS
		PTR_P, PTR_Q  = 1
		GO TO SIGA
	NEXT

	ASCII_Q = ASCII(MID$(ARR_IB$,PTR_Q,1))  
	IF ((ASCII_Q >= LETRA_A AND ASCII_Q <= LETRA_Z) OR &
           (ASCII_Q >= LOWER_A AND ASCII_Q <= LOWER_Z) ) THEN

	         WHILE(ASCII(MID$(ARR_IB$,PTR_P,1)) >=LETRA_A AND	  &
		       ASCII(MID$(ARR_IB$,PTR_P,1)) <= LETRA_Z) 	  &
	              OR ASCII(MID$(ARR_IB$,PTR_P,1)) = SIGNO_MENOS       &
		      OR (ASCII(MID$(ARR_IB$,PTR_P,1)) >= LOWER_A AND     &
			ASCII(MID$(ARR_IB$,PTR_P,1)) <= LOWER_Z)
	              PTR_P = PTR_P + 1
		 NEXT

	         SZTOKEN = PTR_P - PTR_Q
		 NEXTTOKEN = IDNTOK
	   	 VAL_PTR_PTOKEN = MID$(ARR_IB$,PTR_Q,SZTOKEN)
	         GO TO LAB_ASIG
	END IF

	IF(ASCII_Q >= NUMERO_CERO AND &
	   ASCII_Q <= NUMERO_NUEVE   ) THEN    
	
	          WHILE (ASCII(MID$(ARR_IB$,PTR_P,1)) >= NUMERO_CERO AND &
			 ASCII(MID$(ARR_IB$,PTR_P,1)) <= NUMERO_NUEVE )
		             PTR_P = PTR_P + 1
	          NEXT

	          SZTOKEN = PTR_P - PTR_Q
		  NEXTTOKEN = NUMTOK
		  VAL_PTR_PTOKEN = MID$(ARR_IB$,PTR_Q,SZTOKEN)
	          VLTOKEN  = VAL(VAL_PTR_PTOKEN)
		  GO TO LAB_ASIG
	END IF

	IF (ASCII_Q = CREMILLA_DOBLE ) THEN
		PTR_P = PTR_P + 1

	        WHILE (ASCII(MID$(ARR_IB$,PTR_P,1)) <> CREMILLA_DOBLE)
  	              PTR_P = PTR_P + 1
	        NEXT

	        SZTOKEN = PTR_P - (PTR_Q + 1)
	        PTR_P = PTR_P + 1
		NEXTTOKEN = STDTOK  
		VAL_STR_PTOKEN = MID$(ARR_IB$,PTR_Q+1,SZTOKEN) 
		VAL_PTR_PTOKEN = '"' + VAL_STR_PTOKEN + '"'
		GO TO LAB_ASIG	 
	END IF

	IF (ASCII_Q = CREMILLA_SIMPLE) THEN
		PTR_P = PTR_P + 1

	        WHILE (ASCII(MID$(ARR_IB$,PTR_P,1)) <> CREMILLA_SIMPLE)
  	              PTR_P = PTR_P + 1
	        NEXT

	        SZTOKEN = PTR_P - (PTR_Q + 1)
	        PTR_P = PTR_P + 1
		NEXTTOKEN = STSTOK  
		VAL_STR_PTOKEN = MID$(ARR_IB$,PTR_Q+1,SZTOKEN) 
		VAL_PTR_PTOKEN = "'" + VAL_STR_PTOKEN + "'"
		GO TO LAB_ASIG	 
	END IF

	NEXTTOKEN = CHRTOK
	VAL_PTR_PTOKEN = MID$(ARR_IB$,PTR_P,1)

	PTR_P = PTR_P + 1
	SZTOKEN = 1
	GO TO LAB_ASIG

 LAB_ERROR:	
	IF ERR = 11 THEN
		PRINT " FIN DE  PROCESO  PARA ARCHIVO                      ",PROGRAMAIN, &
			CHR$(NEW_LINE),CHR$(CAR_RET)
		CLOSE #CANALOUT%		
		CLOSE #CANALIN%		
		NEXTTOKEN = ETXTOK
	        RESUME 810		
	ELSE 
		PRINT "ERROR(";err;") ";ert$(err);" en linea ";erl;", MODULO ";ern$
		CLOSE #CANALOUT%		
		CLOSE #CANALIN%		
		RESUME 810
	END IF

 LAB_ASIG:  
	PTR_Q = PTR_P
810


  END DEF !!! FIN NEXTTOKEN	

	! ------------------------------------------------------------------
	!		
	!               MODULO PRINCIPAL
	!		****************		
	! __________________________________________________________________


	ON ERROR GO TO  BAD
	BIP = CHR$(07)
	CANALIN%  = 1	
	CANALOUT% = 2

	PRINT BIP,BIP
	INPUT " INGRESE NOMBRE DE ARCHIVO CON PANTALLAS A CREAR ",PROGRAMAIN 
	WHILE PROGRAMAIN <> "" 

		OPEN PROGRAMAIN FOR INPUT AS FILE #CANALIN%,            &
			ORGANIZATION SEQUENTIAL VARIABLE, RECORDSIZE 255, &
			RECORDTYPE ANY
		GET #CANALIN%
		CAR_LEIDOS  = RECOUNT
		MOVE FROM #CANALIN% , ARR_IB$ = CAR_LEIDOS
	        PASADA = 1
		MAX_MOD = 1
		PTR_P,PTR_Q = 1

 LAB_A1 :
		PTR_PTOKEN = NEXTTOKEN
		IF VAL_PTR_PTOKEN = "CONVIERTA"  THEN
			PTR_PTOKEN = NEXTTOKEN
		END IF

 LAB_A2 :
		IF VAL_PTR_PTOKEN = "PANTALLAS" OR VAL_PTR_PTOKEN = "PANTALLA" THEN
			PTR_PTOKEN = NEXTTOKEN
		END IF

 LAB_A4 :
		IF PTR_PTOKEN = IDNTOK	THEN
			NOM_PTL_IN(MAX_MOD) = VAL_PTR_PTOKEN
			PTR_PTOKEN = NEXTTOKEN
		END IF

		IF VAL_PTR_PTOKEN <> "." THEN
			PRINT BIP,BIP,BIP,BIP,BIP
			PRINT "ERROR EN NOMBRE DE PANTALLA, DEBE INCLUIR TIPO "
	                PRINT "ASUMIO NOMBRE",NOM_PTL_IN(MAX_MOD),VAL_PTR_PTOKEN
			GO TO ATRAS
		END IF

		PTR_PTOKEN = NEXTTOKEN

		IF PTR_PTOKEN = IDNTOK THEN
			EXT_PGM_IN(MAX_MOD) = VAL_PTR_PTOKEN	
			PTR_PTOKEN = NEXTTOKEN
			IF VAL_PTR_PTOKEN = "," THEN
				PTR_PTOKEN = NEXTTOKEN
				GO TO LAB_A4
			END IF
		END IF


		CLOSE #CANALIN%
		PASADA = 2
	        PTR_PTOKEN = 0

		!-----------------------------------------------------------
		! FIN :
		!    SECCION DONDE SE RECONOCE LA SINTAXIS QUE ESPECIFICA
		!    LAS PANTALLAS A TRANSFORMAR
		!-----------------------------------------------------------
		! INICIO :
		!    SECCION DONDE SE REALIZAN  LOS CAMBIOS
		!
		!-----------------------------------------------------------

		INX_MOD = 0

		WHILE INX_MOD < MAX_MOD
			INX_MOD = INX_MOD + 1
			PTR_P,PTR_Q = 1
			ARR_IB$ = ""
			PROGRAMAIN = NOM_PTL_IN(INX_MOD) + "." + EXT_PGM_IN(INX_MOD)
			PRINT " NOMBRE DEL PANTALLA A TRANSFORMAR      		   ";PROGRAMAIN
			OPEN PROGRAMAIN FOR INPUT AS FILE #CANALIN% , &
				ORGANIZATION SEQUENTIAL , RECORDTYPE ANY
			GET #CANALIN% 
			CAR_LEIDOS = RECOUNT   
			MOVE FROM #CANALIN%,ARR_IB$ = CAR_LEIDOS
			PROGRAMAOUT = NOM_PTL_IN(INX_MOD) + "." + "TXT"
			OPEN PROGRAMAOUT FOR OUTPUT AS FILE #CANALOUT%,            &
				ORGANIZATION SEQUENTIAL VARIABLE , RECORDSIZE 255, &
				RECORDTYPE ANY

			WHILE PTR_PTOKEN <> ETXTOK	 

				PTR_PTOKEN = NEXTTOKEN
				IF VAL_PTR_PTOKEN = "TEXT" THEN
		
					PTR_PTOKEN = NEXTTOKEN
	
					PTR_PTOKEN = NEXTTOKEN

					VAR_POS_X  = VAL_PTR_PTOKEN

					PTR_PTOKEN = NEXTTOKEN

					PTR_PTOKEN = NEXTTOKEN

					VAR_POS_Y  = VAL_PTR_PTOKEN

					PTR_PTOKEN = NEXTTOKEN

					PTR_PTOKEN = NEXTTOKEN

					VAR_TITULO = "'" + VAL_STR_PTOKEN
			
					PTR_PTOKEN = NEXTTOKEN

					IF VAL_PTR_PTOKEN = "&" THEN
						PTR_PTOKEN = NEXTTOKEN
						VAR_TITULO = VAR_TITULO + VAL_STR_PTOKEN
					END IF
					VAR_TITULO = VAR_TITULO + "'"
					REGISTRO = CTE_TITULO + VAR_TITULO
					ACCION = ESCRIBA
					REGISTRO = CTE_POSICION + VAR_POS_X + &
					           CTE_COMA     + VAR_POS_Y
					ACCION=ESCRIBA
					ACCION=ESCRIBA
	
					PTR_PTOKEN = NEXTTOKEN

				END IF
	
				IF VAL_PTR_PTOKEN = "FIELD" THEN
			
					PTR_PTOKEN = NEXTTOKEN

					IF VAL_PTR_PTOKEN <> "NAME" THEN
						GO TO CONT
					END IF
		
					PTR_PTOKEN = NEXTTOKEN

					PTR_PTOKEN = NEXTTOKEN
					VAR_CAMPO  = VAL_PTR_PTOKEN

					PTR_PTOKEN = NEXTTOKEN
					PTR_PTOKEN = NEXTTOKEN

					VAR_POS_X  = VAL_PTR_PTOKEN	

					PTR_PTOKEN = NEXTTOKEN

					PTR_PTOKEN = NEXTTOKEN
					VAR_POS_Y  = VAL_PTR_PTOKEN		

					PTR_PTOKEN = NEXTTOKEN
					PTR_PTOKEN = NEXTTOKEN
					IF VAL_PTR_PTOKEN = "PICTURE" THEN
						PTR_PTOKEN = NEXTTOKEN
						PTR_PTOKEN = NEXTTOKEN
						VAR_LARGO  = VAL_PTR_PTOKEN
						PTR_PTOKEN = NEXTTOKEN
					
						IF PTR_PTOKEN = STSTOK THEN	
							IF VAL_STR_PTOKEN = "9" THEN
								VAR_TIPO  = CTE_NUMERICO
							ELSE 
								VAR_TIPO = CTE_ALFANUMERICO
							END IF
						END IF
					ELSE
						PRINT "ERROR: ESPERANDO PICTURE ",VAL_PTR_PTOKEN
					END IF
			
					REGISTRO = CTE_CAMPO + VAR_CAMPO
					ACCION=ESCRIBA
					REGISTRO = CTE_POSICION + VAR_POS_X + &
						CTE_COMA     + VAR_POS_Y
					ACCION=ESCRIBA
					REGISTRO = VAR_TIPO
					ACCION=ESCRIBA
					REGISTRO = CTE_LARGO + VAR_LARGO
					ACCION=ESCRIBA
					REGISTRO = CTE_SECCION + "1"
					ACCION=ESCRIBA
					PTR_PTOKEN = NEXTTOKEN
					ACCION=ESCRIBA
	
				END IF
				
 CONT:			NEXT
		NEXT

 FIN:
		CLOSE #CANALOUT%
		PTR_PTOKEN = 0 
		VAL_PTR_PTOKEN = ""
 		ARR_OB$ = ""
 		VAL_STR_PTOKEN = ""

		PRINT BIP,BIP
		INPUT " INGRESE NOMBRE DE ARCHIVO CON PANTALLAS A CREAR ",PROGRAMAIN 
		PASADA = 1
	 NEXT
	 GO TO ATRAS
	
 BAD:
	PRINT BIP,BIP,BIP
	IF ERR = 2 THEN
		PRINT PROGRAMAIN," : NOMBRE DE ARCHIVO ILEGAL"
	ELSE 
		IF ERR = 5 THEN
			PRINT PROGRAMAIN," ARCHIVO INEXISTENTE"	
		ELSE
			PRINT "CODIGO : ",ERR
			PRINT "MENSAJE :",ERT$(ERR)
		END IF
	END IF
	RESUME 999

999
 ATRAS:

 END

