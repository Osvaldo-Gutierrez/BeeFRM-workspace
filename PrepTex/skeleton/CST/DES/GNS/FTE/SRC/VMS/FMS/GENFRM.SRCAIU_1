100
 !!!  17-NOV-1988 12:32:50 
 !!! MAP_IND_TFLD = TIPO DE CAMPO (MKY, AKY, IKY ) MAP_IND_IKY, MAP_IND_MKY,
 !!!						   MAP_IND_AKY
 !!! MAP_GLS_SECC = SECCION ( VAL-NUM-IKY, VAL-NUM-AKY, VAL-NUM-MKY )
 !!! MAP_GLS_IZR  = INDICADOR DE CERO
 !!! MAP_VEC_IOV  = IDC O VRF
 !!! MAP_IND_IDC  = 1
 !!! MAP_VEC_BUS  = BUSCA VRF ASOCIADO A IDC
 !!! MAP_VEC_TVAL = TIPO DE VALIDACION IDC, GLS, VRF ASOC MAP_IND_V%%%
 !!! VERSION VAX, ESTA PREPARADA PARA SER VERSION COMPATIBLE VAX-IBM,
 !!! SE DEBE PROBAR SOLAMENTE
 !!!  24-NOV-1988 18:54:04 
 !!! RUTS MULTIPLES
	COMMON ( FIO_VARI ) STRING FILLER=26,FIO_STAT=1,FIO_INFO=1,	&
				   FIO_ACCS=1,FILL
        RECORD DMN
               STRING  DMN_COD_DOMI=32
               STRING  DMN_COD_SIST=03
               STRING  DMN_COD_REGI=03
               STRING  DMN_COD_TABL=04
               STRING  DMN_COD_TIPO=01
               STRING  DMN_MSC_FMTO=01
               STRING  DMN_NUM_LARG=03
               STRING  DMN_GLS_FIMP=20
               STRING  DMN_GLS_VALI=16
               STRING  DMN_GLS_BUSQ=16
               STRING  DMN_GLS_DISP=59
	END RECORD DMN
	COMMON ( DMN ) DMN DMN
	RECORD	RCR
               STRING  RCR_COD_RECO=32
               STRING  RCR_COD_DOMI=32
               STRING  RCR_COD_SIST=03
               STRING  RCR_COD_REGI=03
               STRING  RCR_GLS_FIMP=20
               STRING  RCR_GLS_DISP=68
	END RECORD RCR
	COMMON ( RCR ) RCR RCR
   DECLARE INTEGER                      			 &
	NUMTOKEN           					,&
	SZTOKEN            					,&
	TOKEN              					,&
	P_P                					,&
	P_Q                					,&
	SZ_I_B

   DECLARE   STRING						 &
	C_Q                					,&
	VALTOKEN           					,&
	STRTOKEN

   DECLARE INTEGER   CONSTANT					 &
	KEYTOK = 1,         		IDNTOK = 2		,&
	NUMTOK = 3,         		STRTOK = 4		,&
	CHRTOK = 5,         		EOLTOK = 6		,&
	ETXTOK = 7,         		HTAB   = 9

200
   DECLARE INTEGER						 &
	MAP_CNL_FDMN,			MAP_CNL_FRCR		,&
	MAP_CNL_FBMS,			MAP_TOT_CMPO		,&
	MAP_CNL_FGEN,			MAP_TOT_CIDX		,&
	MAP_CNL_FFLG,			MAP_TOT_FILE		,&
	MAP_CNL_FTXT						,&
					MAP_NUM_PICT		,&
	MAP_SWI_FILE,        		MAP_NUM_LINE        	,&
	MAP_SWI_PFLD,			MAP_NUM_COLU		,&
	MAP_SWI_FECH,			MAP_NUM_CORR		,&
	MAP_SWI_VERF,			MAP_NUM_TTEX		,&
	MAP_SWI_CFRM,			MAP_NUM_INFE        	,&
	MAP_SWI_GLOS,			MAP_NUM_SUPE		,&
	MAP_SWI_ERRO,			MAP_NUM_CFLD		,&
	MAP_IND_CMPO,			MAP_VEC_ATR(100)	,&
	WBMS_NUM_SOR,			MAP_VEC_LEN(100)	,&
	WTXT_NUM_SOR,       		MAP_IND_NUM		,&
	MAP_VEC_UNDE(10),		MAP_VEC_N(100)		,&
	MAP_VEC_FICO(100,2),		MAP_MAT_SCRN(24,80) 	,&
	MAP_VEC_TFLD(100),		MAP_VEC_SGN(100)	,&
	MAP_VEC_DSPL(100),		MAP_VEC_DERI(100)	,&
	MAP_VEC_PFLD(100),  		MAP_VEC_MOVE(100)  	,&
	MAP_VEC_SCLR(100) 					,&
	OVR_NUM_COL,        		MAP_NUM_VSZ        ,&
	OVR_NUM_FIL,        MAP_NUM_ASC        ,&
	MAP_NUM_BAS			        ,&
	BMS_NUM_DPZ,        BMS_NUM_PIC        ,&
	ANT_INDEX,          NIV_INDEX          ,&
	TMP_INDEX,          MAP_VEC_PROT(100)  ,&
	ACT_INDEX,          MAP_VEC_TIDX(100)        ,&
	MAP_VEC_VALI(100),   MAP_VEC_PKEY(100)  ,&
	MAP_NUM_NCS,        MAP_NUM_NCI        ,&
	MAP_VEC_NUME(100)                       ,&
	MAP_NUM_TFEC,       OVR_NUM_LEN        ,&
	OVR_NUM_ADI,        MAP_VEC_ENT(100)   ,&
	MAP_VEC_DECM(100),   MAP_VEC_BYA(100)  ,&
	MAP_VEC_VAUT(100),  MAP_VEC_GLOS(100)  ,&
	MAP_VEC_FECH(100),	MAP_TOT_NOMB   ,&
	MAP_TOT_REPE	,	MAP_VEC_IOV(150),&
	MAP_VEC_BUS(150),	MAP_IND_TFLD	,&
	MAP_VEC_TVAL(150)


   DECLARE   STRING                           &
      MAP_ASC_BEL,        MAP_ASC_NWL        ,&
      MAP_FIL_BMS,        MAP_FIL_FLG        ,&
      MAP_FIL_DMN,        MAP_FIL_RCR        ,&
      MAP_GLS_WRIT,       MAP_GLS_FLG        ,&
      WRT_GLS_LIN,        WRT_GLS_COL        ,&
      WRT_GLS_COR,        MAP_GLS_PIC        ,&
      WRT_GLS_DAT,        MAP_GLS_DEF        ,&
      MAP_GLS_MAPA,       MAP_GLS_PROY       ,&
      MAP_GLS_PBM,        MAP_GLS_TYP        ,&
      MAP_GLS_L11,        MAP_GLS_L12        ,&
      MAP_GLS_L13,        MAP_GLS_CMP        ,&
      MAP_GLS_L21,        MAP_GLS_L31        ,&
      MAP_GLS_FIL,        MAP_VEC_OBLI(100)   ,&
      MAP_GLS_COL,        MAP_GLS_VIX(100)   ,&
      MAP_GLS_POS,        MAP_GLS_BMS        ,&
      MAP_GLS_TXT,        MAP_GLS_PXZ        ,&
      MAP_GLS_STP,        MAP_FIL_GEN        ,&
      MAP_VEC_CMP(100),   MAP_VEC_REGI(100)   ,&
      MAP_VEC_TIPO(100),   MAP_VEC_NOMB(100)   ,&
      V_ANSI(6),          MAP_FIL_TXT        ,&
      MAP_VEC_FIL(10),    MAP_GLS_HLP        ,&
      MAP_GLS_DFL,        MAP_GLS_MST        ,&
      MAP_VEC_BLK(10),	  MAP_GLS_MRG_VRF    ,&
      MAP_VEC_NRTN(100),  MAP_GLS_RED        ,&
      MAP_GLS_VFEC(4),    MAP_GLS_VRF(7)     ,&
      SGN_LEAD,           MAP_VEC_TAB(100)   ,&
      MAP_VEC_DMSA(5),    MAP_GLS_PRE        ,&
      MAP_GLS_SFEC,       MAP_GLS_DLD        ,&
      MAP_GLS_DLI,        MAP_GLS_IDC(3)     ,&
      MAP_GLS_NOMB,       MAP_GLS_OCC        ,&
      MAP_GLS_MAT,	  MAP_GLS_EDTN	     ,&
      MAP_GLS_NIV_FLD,    MAP_GLS_SPA_FLD    ,&
      MAP_GLS_NIV_FEC,    MAP_GLS_SPA_FEC    ,&
      MAP_GLS_NIV_VRF,    MAP_GLS_SPA_VRF    ,&
      MAP_GLS_NIV_IDC,    MAP_GLS_SPA_IDC    ,&
      MAP_SEPA_PIC,       MAP_SEPA_LEN       ,&
      MAP_SEPA_ATR,       GEN_GLS_PRT        ,&
      MAP_VEC_NMR(100),   GEN_GLS_VAL        ,&
      MAP_GLS_PIC_ALF,    MAP_GLS_PIC_EDT    ,&
      MAP_VEC_ISG(100),	  MAP_GLS_DARK	     ,&
      FIO_CMND,		  MAP_GLS_FOR	     ,&
      MAP_GLS_VCOD,       MAP_GLS_VIND       ,&
      MAP_GLS_GCOD,       MAP_GLS_GIND       ,&
      MAP_GLS_IDEN,	  MAP_VEC_REPE(150)  ,&
      MAP_GLS_SECC,	  MAP_GLS_IZR	     ,&
      MAP_VEC_FLD(100)

   DECLARE   STRING CONSTANT			&
      FIO_STAT_OKS  = "0"

   DECLARE STRING POS_VEC_ZRS(2)
      POS_VEC_ZRS(1) = "0"
      POS_VEC_ZRS(2) = ""

   DECLARE STRING MAP_GLS_BYA(4)
      MAP_GLS_BYA(1) = "FRM-CPIM-AEY"
      MAP_GLS_BYA(2) = "FRM-CPIM-UBY"
      MAP_GLS_BYA(3) = "FRM-CPIM-ANY"
      MAP_GLS_BYA(4) = "FRM-CPIM-UNY"

   DECLARE STRING MAP_VEC_FFEC(7)
      MAP_VEC_FFEC(1) = " 'ddmmssaa' "
      MAP_VEC_FFEC(2) = " 'ddmmaa' "
      MAP_VEC_FFEC(3) = " 'mmssaa' "
      MAP_VEC_FFEC(4) = " 'mmaa' "
      MAP_VEC_FFEC(5) = " 'ssaa' "
      MAP_VEC_FFEC(6) = " 'ddmm' "
      MAP_VEC_FFEC(7) = " 'aa' "

   DECLARE STRING MAP_VEC_VFEC(7)
      MAP_VEC_VFEC(1) = "FEC"
      MAP_VEC_VFEC(2) = "DMA"
      MAP_VEC_VFEC(3) = "MSA"
      MAP_VEC_VFEC(4) = "FMA"
      MAP_VEC_VFEC(5) = "FSA"
      MAP_VEC_VFEC(6) = "FDM"
      MAP_VEC_VFEC(7) = "FFA"

   DECLARE INTEGER   CONSTANT                 &
      MAP_CTE_YES =  1,   MAP_CTE_NOT =  0   ,&
      MAP_ASC_LFD = 10,   MAP_ASC_CRT = 13   ,&
      MAP_CTE_NUM =  0,   MAP_CTE_ALF =  1   ,&
      MAP_CTE_IDF =  2,   MAP_IND_FLD =  0   ,&
      MAP_IND_IKY =  1,   MAP_IND_MKY =  2   ,&
      MAP_IND_AKY =  3,	  MAP_CTE_RED =  2   ,&
      MAP_IND_FIC =  4 			     ,&
      MG_C       =  1,   MG_A       =  2     ,&
      MG_B       =  3,   MG_1       =  4     ,&
      MG_2       =  5,   MG_N       =  6     ,&
      MAP_NUM_CODI  = 1, MAP_NUM_MISC = 2    ,&
      FEC_IND_FFEC  = 1, FEC_IND_FDMA = 2    ,&
      FEC_IND_FMSA  = 3, FEC_IND_FFMA = 4    ,&
      FEC_IND_FFSA  = 5, FEC_IND_FFDM = 6    ,&
      FEC_IND_FFFA  = 7, MAP_IND_IDC = 1     ,&
      MAP_IND_VIND  = 1, MAP_IND_VGLS = 2	,&
      MAP_IND_VVRF  = 3, MAP_NUM_VVRF = 4

	FEC$	= "FALSE"
	NRO$	= "FALSE"
	VRF$	= "FALSE"
	IDC$	= "FALSE"
	BUSTAB$	= "FALSE"
	VALCOD$	= "FALSE"
	BUSMSC$	= "FALSE"
	VALIND$ = "FALSE"
	BUSOFI$ = "FALSE"
	VALOFI$ = "FALSE"
	BUSUSR$ = "FALSE"
	VALUSR$ = "FALSE"
	VALTDU$ = "FALSE"
	ERRGLS$	= "FALSE"

 !====================== WRITE ARCHIVO SORT ======================

    DEF STRING MAP_FNC_WBMS (STRING MAP_GLS_WRIT)
       WRT_GLS_DAT = FORMAT$(WBMS_NUM_SOR,"#")
       WRT_GLS_LIN = FORMAT$(MAP_NUM_LINE,"##")
       WRT_GLS_COL = FORMAT$(MAP_NUM_COLU,"###")
       WRT_GLS_COR = FORMAT$(MAP_NUM_CORR,"###")
       MAP_GLS_WRIT = WRT_GLS_DAT + WRT_GLS_LIN + WRT_GLS_COL + WRT_GLS_COR +&
         MAP_GLS_WRIT
       MAP_NUM_CORR = MAP_NUM_CORR + 1
       PRINT #MAP_CNL_FBMS,MAP_GLS_WRIT
       MAP_GLS_WRIT = ""
    END DEF
 !====================== POSICION ===============================
   DEF INTEGER R_POS
      MAP_GLS_POS = POS_VEC_ZRS(LEN(STR$(BMS_NUM_COL+BMS_NUM_DPZ))) +&
         STR$(BMS_NUM_COL + BMS_NUM_DPZ)
      MAP_GLS_POS = "POS=(" + MAP_GLS_FIL + "," + MAP_GLS_POS + ")"
   END DEF
 !====================== WRITE ARCHIVO TXT ======================

    DEF STRING MAP_FNC_WTXT (STRING MAP_GLS_WRIT)
       WRT_GLS_DAT = FORMAT$(WTXT_NUM_SOR,"#")
       WRT_GLS_LIN = FORMAT$(MAP_NUM_LINE,"##")
       WRT_GLS_COL = FORMAT$(MAP_NUM_COLU,"###")
       WRT_GLS_COR = FORMAT$(MAP_NUM_CORR,"###")
       MAP_GLS_WRIT = WRT_GLS_DAT + WRT_GLS_LIN + WRT_GLS_COL + WRT_GLS_COR +&
          MAP_GLS_WRIT
       MAP_NUM_CORR = MAP_NUM_CORR + 1
       PRINT #MAP_CNL_FTXT,MAP_GLS_WRIT
       MAP_GLS_WRIT = ""
    END DEF

 !====================== TOKEN ==========================================

    DEF INTEGER NEXTTOKEN
    ON ERROR GO TO MAP_LAB_ERR
       IF TOKEN = ETXTOK THEN
          NEXTTOKEN = ETXTOK
          GO TO NEX_LAB_ASG
       END IF
       P_P = P_Q 
 NEX_LAB_NEW:
       WHILE (MID$(I_B$,P_P,1) = " " OR ASCII(MID$(I_B$,P_P,1)) = HTAB) AND &
          P_P <= SZ_I_B
          P_P = P_P + 1
       NEXT
       P_Q = P_P 
       IF P_P > SZ_I_B OR I_B$ = "" THEN
          GET #MAP_CNL_FFLG
          SZ_I_B = RECOUNT
          MOVE FROM #MAP_CNL_FFLG , I_B$ = SZ_I_B
          P_P, P_Q  = 1
          GO TO NEX_LAB_NEW
        END IF
        C_Q = MID$(I_B$,P_Q,1)
        IF (C_Q >= "A" AND C_Q <= "Z") OR (C_Q >= "a" AND C_Q <= "z") THEN
            WHILE (MID$(I_B$,P_P,1) >= "A" AND MID$(I_B$,P_P,1) <= "Z" &
               OR  MID$(I_B$,P_P,1)  = "_"      &
          OR  MID$(I_B$,P_P,1) >= "a" AND &
              MID$(I_B$,P_P,1) <= "z")
                        P_P = P_P + 1
         NEXT
         SZTOKEN = P_P - P_Q
         NEXTTOKEN = IDNTOK
         VALTOKEN = MID$(I_B$,P_Q,SZTOKEN)
      ELSE
      IF C_Q >= "0" AND C_Q <= "9" THEN
         WHILE MID$(I_B$,P_P,1) >= "0" AND MID$(I_B$,P_P,1) <= "9"
            P_P = P_P + 1
         NEXT
         SZTOKEN = P_P - P_Q
         NEXTTOKEN = NUMTOK
         VALTOKEN = MID$(I_B$,P_Q,SZTOKEN)
         NUMTOKEN  = VAL(VALTOKEN)
      ELSE
      IF C_Q = '"'  OR C_Q = "'" THEN
         P_P = P_P + 1
         WHILE MID$(I_B$,P_P,1) <> C_Q
            P_P = P_P + 1
         NEXT
         SZTOKEN = P_P - (P_Q + 1)
         P_P = P_P + 1
         NEXTTOKEN = STRTOK
         STRTOKEN = MID$(I_B$,P_Q + 1,SZTOKEN)
         VALTOKEN = C_Q + STRTOKEN + C_Q
      ELSE
         NEXTTOKEN = CHRTOK
         VALTOKEN = MID$(I_B$,P_P,1)
       P_P = P_P + 1
       SZTOKEN = 1
      END IF
      END IF
      END IF
      GO TO NEX_LAB_ASG
 MAP_LAB_ERR:
      CLOSE #MAP_CNL_FFLG
      IF ERR = 11 THEN
          NEXTTOKEN = ETXTOK
      ELSE
          PRINT   "ERROR(";ERR;") ";ERT$(ERR);" en linea ";erl;&
            ", MODULO ";ern$
       END IF
       RESUME 800
 NEX_LAB_ASG:
       P_Q = P_P
800
   END DEF

 !====================== INICIALIZACION ======================
805
   DEF INTEGER MAP_FNC_INI
    ON ERROR GO TO MAP_LAB_OPE
      MAP_GLS_IDEN = DATE$(0%) + " " + TIME$(0%)
      MAP_NUM_BAS = 65
      MAP_SEPA_PIC    = "            PIC  "
      MAP_ASC_BEL = CHR$(07)
      MAP_CNL_FFLG = 1   
      MAP_CNL_FBMS = 2
      MAP_CNL_FGEN = 3
      MAP_CNL_FTXT = 4
      MAP_CNL_FDMN = 5
      MAP_CNL_FRCR = 6
 !JSS
      MAP_CNL_FINF = 7

      V_ANSI(MG_C) = "      "
      V_ANSI(MG_A) = "       "
      V_ANSI(MG_B) = "           "
      V_ANSI(MG_1) = "               "
      V_ANSI(MG_2) = "                   "
      V_ANSI(MG_N) = ""
      MAP_VEC_BLK(1) = "        "
      MAP_VEC_BLK(2) = "       "
      MAP_VEC_BLK(3) = "      "
      MAP_VEC_BLK(4) = "     "
      MAP_VEC_BLK(5) = "    "
      MAP_VEC_BLK(6) = "   "
      MAP_VEC_BLK(7) = "  "
      MAP_VEC_BLK(8) = " "
      MAP_VEC_BLK(9) = ""
      FOR I% = 1 TO 100
         MAP_GLS_VIX(I%)   = "(" + STR$(I%) + ")"
         MAP_VEC_TAB(I%)   = ",ATTRB=(PROT),LENGTH=1,"
         MAP_VEC_OBLI(I%)  =  "S"
         MAP_VEC_MOVE(I%)  = MAP_CTE_YES
         MAP_VEC_SCLR(I%)  = MAP_CTE_YES
         MAP_VEC_TFLD(I%)  = MAP_IND_FLD
         MAP_VEC_PROT(I%)  = MAP_CTE_YES
         MAP_VEC_VALI(I%)  = MAP_CTE_YES
         MAP_VEC_PFLD(I%)  = MAP_CTE_YES
         MAP_VEC_FECH(I%)  = MAP_CTE_NOT
         MAP_VEC_DERI(I%)  = MAP_CTE_NOT
         MAP_VEC_SGN(I%)  = MAP_CTE_NOT
         MAP_VEC_BYA(I%)   = 1
	 MAP_VEC_ATR(I%) = MAP_CTE_YES
	 MAP_VEC_LEN(I%) = MAP_CTE_YES
	 MAP_VEC_N(I%) = MAP_CTE_YES
      NEXT I%
      MAP_NUM_INFE = 3
      MAP_NUM_SUPE = 24
      MAP_SWI_PFLD = MAP_CTE_NOT
      MAP_ASC_NWL = CHR$(MAP_ASC_CRT) + CHR$(MAP_ASC_LFD)
      P_P,P_Q = 1
806
      CALL LIB$GET_SYMBOL("GNS$PRY",MAP_GLS_PROY)
      CALL LIB$GET_SYMBOL("GNS$FIL",MAP_GLS_FLG)
      CALL LIB$GET_SYMBOL("PTH",MAP_FIL_FLG)
      CALL LIB$GET_SYMBOL("GNS$MAP",MAP_GLS_MAT)
      CALL LIB$GET_SYMBOL("GNS$AIU",MAP_GLS_FOR)
      MAP_GLS_HLP = ""
807
 !!!	APERTURA  ARCHIVO REGISTRO DOMINIO
	FIO_CMND = "INP                 "
	CALL "GNSFIODMN" BY REF (FIO_CMND)
   
 !!!	APERTURA  ARCHIVO REGISTRO RECORRIDO
	FIO_CMND = "INP                 "
 	CALL "GNSFIORCR" BY REF (FIO_CMND)
   
808   OPEN MAP_FIL_FLG FOR INPUT AS FILE #MAP_CNL_FFLG,RECORDTYPE ANY,   &
         ORGANIZATION SEQUENTIAL VARIABLE,   RECORDSIZE 255
   
      GET #MAP_CNL_FFLG
      SZ_I_B = RECOUNT
      MOVE FROM #MAP_CNL_FFLG , I_B$ = SZ_I_B
      GO TO FIN_LAB_INI
 MAP_LAB_OPE:
   PRINT MAP_ASC_BEL,MAP_ASC_BEL,MAP_ASC_BEL
   IF ERR = 2 THEN
      PRINT MAP_FIL_FLG,FILE_WSS, " : NOMBRE DE ARCHIVO ILEGAL"
   ELSE 
   IF ERR = 5 THEN
      PRINT MAP_FIL_FLG,FILE_WSS, " ARCHIVO INEXISTENTE       "
   ELSE
      PRINT   "ERROR(";ERR;") ";ERT$(ERR);" en linea ";erl;&
         ", MODULO ";ern$
   END IF
   END IF
   RESUME 809
 FIN_LAB_INI:
809
   END DEF

810
  !====================== FORM ======================

   DEF INTEGER MAP_FNC_FOR
      WHILE VALTOKEN <> "FORM"
         TOKEN = NEXTTOKEN
      NEXT
      TOKEN = NEXTTOKEN
      TOKEN = NEXTTOKEN
      TOKEN = NEXTTOKEN
      MAP_GLS_MAPA = STRTOKEN
      IF LEN(MAP_GLS_MAPA) > 3 THEN
          MAP_GLS_MAPA = RIGHT$(MAP_GLS_MAPA,3)
      END IF

 !!!	APERTURA  ARCHIVO MAPA
	IF MAP_GLS_FOR = "BMS" THEN
	    MAP_FIL_BMS = MAP_GLS_PROY + "A" + MAP_GLS_MAPA + ".SRT"
	    OPEN MAP_FIL_BMS FOR OUTPUT AS FILE #MAP_CNL_FBMS,RECORDTYPE ANY,&
	    ORGANIZATION SEQUENTIAL VARIABLE,   RECORDSIZE 255
	END IF
   
 !!!	APERTURA  ARCHIVO MODULO DE MANEJO
      MAP_FIL_GEN = MAP_GLS_PROY + "BM" + MAP_GLS_MAPA + ".AIU"
      MAP_GLS_PBM = " OF '" + MAP_GLS_PROY + "BM" + MAP_GLS_MAPA + ".TXT'"
      OPEN MAP_FIL_GEN FOR OUTPUT AS FILE #MAP_CNL_FGEN,RECORDTYPE ANY,&
         ORGANIZATION SEQUENTIAL VARIABLE,   RECORDSIZE 255
   
 !!!	APERTURA  ARCHIVO REGISTRO IMAGEN
      MAP_FIL_TXT = MAP_GLS_PROY + "WI" + MAP_GLS_MAPA + ".SRT"
      OPEN MAP_FIL_TXT FOR OUTPUT AS FILE #MAP_CNL_FTXT,RECORDTYPE ANY,&
         ORGANIZATION SEQUENTIAL VARIABLE,   RECORDSIZE 255
   
 !!!JSS	APERTURA  ARCHIVO DE INFORMACION
      MAP_FIL_TXT = MAP_GLS_PROY + "BI" + MAP_GLS_MAPA + ".AIU"
      OPEN MAP_FIL_TXT FOR OUTPUT AS FILE #MAP_CNL_FINF,RECORDTYPE ANY,&
         ORGANIZATION SEQUENTIAL VARIABLE,   RECORDSIZE 255

      TOKEN = NEXTTOKEN
      IF VALTOKEN = 'HELP_FORM' THEN
         TOKEN = NEXTTOKEN
         TOKEN = NEXTTOKEN
         MAP_GLS_HLP = STRTOKEN
      END IF
   
      MAP_GLS_DFL = " IN " + MAP_GLS_MAPA + "-FLD"
      MAP_GLS_MST = MAP_GLS_PROY + MAP_GLS_MAPA + "A"
 !    CALL MAP_RUT_SPA(MAP_GLS_MAPA,9)
      CALL MAP_RUT_SPA(MAP_GLS_MST,9)
 !    MAP_GLS_MAPA = MAP_GLS_PROY + MAP_GLS_MAPA + "DFHMDI SIZE=("
      WTXT_NUM_SOR = 0
      MAP_NUM_LINE = 0
      MAP_GLS_TXT = MAP_FNC_WTXT(V_ANSI(MG_C) + "* " + MAP_GLS_IDEN)
      MAP_GLS_TXT = MAP_FNC_WTXT(V_ANSI(MG_C) + "* " + MAP_GLS_HLP)
      MAP_GLS_HLP = ""
            
      MAP_GLS_TXT = MAP_FNC_WTXT(V_ANSI(MG_A) +"01  " + MAP_GLS_MAPA + "-FRM.")
      WTXT_NUM_SOR = 0
      MAP_NUM_LINE = 2
      IF MAP_GLS_FOR = "BMS" THEN
	  MAP_GLS_TXT = MAP_FNC_WTXT(V_ANSI(MG_B) +&
		"05 FILLER-" + MAP_GLS_MAPA + "                    PIC  X(12).")
      ELSE
          MAP_GLS_TXT = MAP_FNC_WTXT(V_ANSI(MG_B) + "03 " +&
		        MAP_GLS_MAPA +&
			"-NAME                         PIC X(31) VALUE")
          MAP_GLS_TXT = MAP_FNC_WTXT(V_ANSI(MG_B) + "   '" +&
			MAP_GLS_MAPA + "'.")
          MAP_GLS_TXT = MAP_FNC_WTXT(V_ANSI(MG_B) + "03 " + MAP_GLS_MAPA +&
			"-RWSP                         PIC X(12).")
          MAP_GLS_TXT = MAP_FNC_WTXT(V_ANSI(MG_B) + "03 " + MAP_GLS_MAPA +&
			"-UARV                         PIC X(39) VALUE")
	  MAP_GLS_TXT = MAP_FNC_WTXT(V_ANSI(MG_B) + "   '" +&
			MAP_GLS_PROY + "BM" + MAP_GLS_MAPA + "'.")
	  MAP_GLS_TXT = MAP_FNC_WTXT(V_ANSI(MG_B) + "03 " +&
			MAP_GLS_MAPA + "-NFLD.")
          WTXT_NUM_SOR = 2
	  MAP_GLS_TXT = MAP_FNC_WTXT(V_ANSI(MG_A) +"01 " + MAP_GLS_MAPA +&
			"-FLD EXTERNAL.")
	  MAP_GLS_TXT = MAP_FNC_WTXT(V_ANSI(MG_B) +"04 " + MAP_GLS_MAPA +&
			"-DFLD.")
          WTXT_NUM_SOR = 0
      END IF
   END DEF
820
 !====================== AREA TO CLEAR ======================

   DEF INTEGER MAP_FNC_ATC
   WHILE VALTOKEN <> ";"
          IF VALTOKEN = 'AREA_TO_CLEAR' THEN
             TOKEN = NEXTTOKEN
             TOKEN = NEXTTOKEN
 !!!         MAP_NUM_INFE = NUMTOKEN
             MAP_NUM_INFE = 3
             TOKEN = NEXTTOKEN
             TOKEN = NEXTTOKEN
 !!!         MAP_NUM_SUPE = NUMTOKEN
 !!!         MAP_GLS_WRIT = MAP_GLS_MAPA + STR$(MAP_NUM_SUPE - MAP_NUM_INFE + 1) +&
 !!!             ",80),CTRL(PRINT)"
 !!!         MAP_GLS_WRIT = MAP_FNC_WBMS(MAP_GLS_WRIT)
          END IF
      TOKEN = NEXTTOKEN
   
   NEXT
   END DEF
830
 !====================== DETECTA NUMERO POR SU PICTURE ==============

   DEF INTEGER MAP_FNC_DNUM
        MAP_IND_NUM = 0
 !JSS   PRINT '**';LEN(STRTOKEN);STRTOKEN
        FOR I_NUM% = 1 TO LEN(STRTOKEN)
            C_NUM$ = MID$(STRTOKEN,I_NUM%,1)
            IF C_NUM$ <> '9' AND C_NUM$ <> '.' AND C_NUM$ <> ','&
                             AND C_NUM$ <> 'N' THEN
                MAP_IND_NUM = 1
            ELSE
 !JSS           PRINT C_NUM$
            END IF
        NEXT I_NUM%
   END DEF
835
 !====================== PICTURE ====================================

   DEF INTEGER MAP_FNC_PIC
   MAP_GLS_PIC = ""
   TOKEN = NEXTTOKEN
   TOKEN = NEXTTOKEN
   SGN_LEAD = ""
 
   IF TOKEN = NUMTOK THEN
         OVR_NUM_LEN = NUMTOKEN
         MAP_NUM_PICT = NUMTOKEN
         MAP_NUM_NCS  =  NUMTOKEN
         MAP_NUM_NCI  = 0
         TOKEN = NEXTTOKEN
      IF STRTOKEN = "X" OR STRTOKEN = "C" THEN
         MAP_GLS_PIC = "X(" + STR$(MAP_NUM_PICT) + ")"
      ELSE
         MAP_VEC_NUME(MAP_TOT_CMPO) = MAP_CTE_YES
         MAP_VEC_ENT(MAP_IND_CMPO) = MAP_NUM_PICT
         MAP_VEC_DECM(MAP_IND_CMPO) = 0
         MAP_VEC_NMR(MAP_IND_CMPO) = "NN9N"
         MAP_VEC_ISG(MAP_IND_CMPO) = "N"
	 MAP_GLS_EDTN = "Z"
         IF STRTOKEN = "N" THEN
	    MAP_GLS_EDTN = "-"
            MAP_VEC_NMR(MAP_IND_CMPO) = "NS9N"
            MAP_VEC_ISG(MAP_IND_CMPO) = "S"
            SGN_LEAD = "   SIGN LEADING SEPARATE"
            STRTOKEN = "9"
            MAP_GLS_PIC = "9(" + STR$(MAP_NUM_PICT-1) + ")"
         ELSE
            MAP_GLS_PIC = "9(" + STR$(MAP_NUM_PICT) + ")"
         END IF
         MAP_GLS_PIC_ALF = "X(" + STR$(MAP_NUM_PICT) + ")"
         MAP_GLS_PIC_EDT = MAP_GLS_EDTN + "(" + STR$(MAP_NUM_PICT) + ")"
      END IF
   ELSE
        MAP_NUM_FNC = MAP_FNC_DNUM
        IF MAP_IND_NUM = 0 THEN
            MAP_VEC_NUME(MAP_TOT_CMPO) = MAP_CTE_YES
        END IF
        OVR_NUM_LEN = LEN(STRTOKEN)
        MAP_VEC_NMR(MAP_IND_CMPO) = "NN9"
        MAP_VEC_ISG(MAP_IND_CMPO) = "N"
        IF MID$(STRTOKEN,1,1) = "N" THEN
            MAP_VEC_NMR(MAP_IND_CMPO) = "NS9"
            MAP_VEC_ISG(MAP_IND_CMPO) = "S"
            SGN_LEAD = "   SIGN LEADING SEPARATE"
        END IF
        MAP_GLS_PIC_EDT = STRTOKEN
	A$ = STRTOKEN
        CALL GENRPTMAN(A$,"9-NZ")
        MAP_GLS_PIC_ALF = "X(" + STR$(LEN(A$)) + ")"
        IF SGN_LEAD <> "" THEN
            CALL GENRPTREP(MAP_GLS_PIC_EDT,"9","-")
            CALL GENRPTREP(MAP_GLS_PIC_EDT,"N","-")
        ELSE
            CALL GENRPTREP(MAP_GLS_PIC_EDT,"9","Z")
        END IF
        MAP_GLS_PIC = STRTOKEN
        IF MID$(MAP_GLS_PIC,1,1) = "N" THEN
	    CALL GENRPTREP(MAP_GLS_PIC,"N","9")
            MAP_GLS_PIC = RIGHT(MAP_GLS_PIC,2)
        END IF
        MAP_NUM_NCS = LEN(MAP_GLS_PIC)
        IF MAP_SWI_FECH = MAP_CTE_YES THEN
            CALL GENRPTMAN(MAP_GLS_PIC,"9XC.,")
        ELSE
        IF MAP_VEC_NUME(MAP_TOT_CMPO) = MAP_CTE_NOT THEN
            CALL GENRPTMAN(MAP_GLS_PIC,"X")
        END IF
        END IF
        MAP_NUM_PICT = LEN(MAP_GLS_PIC)
        IF MAP_SWI_VERF = MAP_CTE_YES OR MAP_SWI_IDC = MAP_CTE_YES THEN
           MAP_NUM_PICT = MAP_NUM_PICT - 1
        END IF
        CALL GENRPTMAN(MAP_GLS_PIC,"-9XC.,")
        CALL GENRPTREP(MAP_GLS_PIC,".","")
        CALL GENRPTREP(MAP_GLS_PIC,",","V")
    IF LEN(LEFT$(MAP_GLS_PIC,INSTR(0,MAP_GLS_PIC,"V"))) - 1= -1 THEN
          MAP_VEC_NMR(MAP_IND_CMPO) = MAP_VEC_NMR(MAP_IND_CMPO) + "N"
          MAP_VEC_ENT(MAP_IND_CMPO) = LEN(MAP_GLS_PIC)
          IF MAP_SWI_VERF = MAP_CTE_YES THEN
             MAP_VEC_ENT(MAP_IND_CMPO) = MAP_VEC_ENT(MAP_IND_CMPO) - 2
          END IF
          MAP_VEC_DECM(MAP_IND_CMPO) = 0
      ELSE
          MAP_VEC_NMR(MAP_IND_CMPO) = MAP_VEC_NMR(MAP_IND_CMPO) + "V"
          MAP_VEC_ENT(MAP_IND_CMPO) = &
                     LEN(LEFT$(MAP_GLS_PIC,INSTR(0,MAP_GLS_PIC,"V"))) - 1
          MAP_VEC_DECM(MAP_IND_CMPO) = &
                     LEN(RIGHT$(MAP_GLS_PIC,INSTR(0,MAP_GLS_PIC,"V"))) - 1
           END IF
      IF MAP_VEC_NUME(MAP_IND_CMPO) = MAP_CTE_YES THEN
          MAP_NUM_NCI = 0
      ELSE
          MAP_NUM_NCI = MAP_NUM_NCS - MAP_NUM_PICT
      END IF
      CALL MAP_RUT_PIC(MAP_GLS_PIC)
   END IF

   IF MAP_SWI_FECH = MAP_CTE_YES THEN
       MAP_VEC_NUME(MAP_TOT_CMPO) = MAP_CTE_NOT
   END IF
   IF SGN_LEAD <> "" THEN
        MAP_VEC_ENT(MAP_IND_CMPO) = MAP_VEC_ENT(MAP_IND_CMPO) - 1
	MAP_VEC_SGN(MAP_IND_CMPO) = MAP_CTE_YES
	MAP_GLS_PIC  = "S" + MAP_GLS_PIC
   END IF

   TOKEN = NEXTTOKEN
   END DEF
840
 !====================== ARCHIVO TXT : REGISTRO IMAGEN ======================

   DEF INTEGER MAP_FNC_TXT

   WTXT_NUM_SOR = 2
   MAP_GLS_TXT = MAP_FNC_WTXT(V_ANSI(MG_C) + "*" + MAP_GLS_HLP)
   IF ACT_INDEX = MAP_CTE_YES THEN
      ANT_INDEX = MAP_CTE_YES
      MAP_GLS_NIV_FLD = V_ANSI(MG_B) + "   05 "
      MAP_GLS_SPA_FLD = V_ANSI(MG_B) + "   "
      IF NIV_INDEX = 3 THEN
         MAP_GLS_OCC = MAP_VEC_NRTN(MAP_IND_CMPO)+"-IDX  OCCURS " +&
				  STR$(MAP_TOT_CIDX) + " TIMES."
         MAP_GLS_TXT = MAP_FNC_WTXT(MAP_GLS_NIV_FLD + MAP_GLS_OCC)
      END IF
      IF MAP_SWI_VERF = MAP_CTE_YES THEN
          MAP_GLS_NIV_FLD = V_ANSI(MG_B) + "      09 "
          MAP_GLS_MRG_VRF = V_ANSI(MG_B) + "  07 "
      ELSE
          MAP_GLS_NIV_FLD = V_ANSI(MG_B) + "      07 "
          MAP_GLS_MRG_VRF = ""
      END IF
      MAP_GLS_SPA_FLD = V_ANSI(MG_B) + "      "
      MAP_GLS_NIV_VRF = V_ANSI(MG_B) + "      09 "
      MAP_GLS_NIV_IDC = V_ANSI(MG_B) + "      09 "
      MAP_GLS_SPA_VRF = V_ANSI(MG_B) + "      "
      MAP_GLS_SPA_IDC = V_ANSI(MG_B) + "      "
      MAP_GLS_NIV_FEC = V_ANSI(MG_B) + "         09 "
      MAP_GLS_SPA_FEC = V_ANSI(MG_B) + "         "
      MAP_SEPA_PIC     = "         PIC  "
      MAP_SEPA_LEN     = "-LEN    COMP   PIC S9(04)."
      MAP_SEPA_ATR     = "           "
   ELSE
      ANT_INDEX = MAP_CTE_NOT
      MAP_GLS_MRG_VRF = V_ANSI(MG_B) + "   05 "
      IF MAP_SWI_VERF = MAP_CTE_YES THEN
          MAP_GLS_NIV_FLD = V_ANSI(MG_B) + "      07 "
          MAP_GLS_SPA_VRF = V_ANSI(MG_B) + "      "
      ELSE
          MAP_GLS_NIV_FLD = V_ANSI(MG_B) + "   05 "
          MAP_GLS_SPA_VRF = V_ANSI(MG_B) + "   "
      END IF
      MAP_GLS_SPA_FLD = V_ANSI(MG_B) + "   "
      MAP_GLS_NIV_VRF = V_ANSI(MG_B) + "      07 "
      MAP_GLS_NIV_IDC = V_ANSI(MG_B) + "      07 "
      MAP_GLS_SPA_IDC = V_ANSI(MG_B) + "   "
      MAP_GLS_NIV_FEC = V_ANSI(MG_B) + "      07 "
      MAP_GLS_SPA_FEC = V_ANSI(MG_B) + "      "
      MAP_SEPA_PIC    = "            PIC  "
      MAP_SEPA_LEN    = "-LEN       COMP   PIC S9(04)."
      MAP_SEPA_ATR    = "              "
   END IF

   IF MAP_SWI_VERF = MAP_CTE_YES THEN
       MAP_GLS_TXT = MAP_FNC_WTXT(MAP_GLS_MRG_VRF + MAP_GLS_VRF(1))
   END IF
   IF MAP_GLS_FOR = "BMS" THEN
	MAP_GLS_TXT = MAP_FNC_WTXT(MAP_GLS_NIV_FLD +&
			MAP_VEC_NRTN(MAP_IND_CMPO)+ MAP_SEPA_LEN)
	MAP_GLS_TXT = MAP_FNC_WTXT(MAP_GLS_NIV_FLD +&
			MAP_VEC_NRTN(MAP_IND_CMPO)+ "-ATR" +&
			MAP_SEPA_ATR  + "PIC  X(01).")
   END IF
   IF MAP_SWI_FECH = MAP_CTE_YES THEN
      MAP_GLS_TXT = MAP_FNC_WTXT(MAP_GLS_NIV_FLD +&
             MAP_VEC_NRTN(MAP_IND_CMPO) + ".")
      FOR Z% = 1 TO MAP_NUM_TFEC
        MAP_GLS_TXT = MAP_FNC_WTXT(MAP_GLS_NIV_FEC + MAP_GLS_VFEC(Z%))
      NEXT Z%
   ELSE
   IF MAP_SWI_VERF = MAP_CTE_YES THEN
      IF MAP_GLS_FOR = "BMS" THEN
	MAP_GLS_TXT = MAP_FNC_WTXT(MAP_GLS_NIV_VRF + MAP_GLS_VRF(2))
        IF MAP_GLS_FOR = "BMS" THEN
	   MAP_GLS_TXT = MAP_FNC_WTXT(MAP_GLS_NIV_VRF + MAP_GLS_VRF(3))
	   MAP_GLS_TXT = MAP_FNC_WTXT(MAP_GLS_SPA_VRF + MAP_GLS_VRF(4))
        END IF
	MAP_GLS_TXT = MAP_FNC_WTXT(MAP_GLS_NIV_VRF + MAP_GLS_VRF(5))
        MAP_GLS_TXT = MAP_FNC_WTXT(MAP_GLS_SPA_VRF + MAP_GLS_VRF(6))
	MAP_GLS_TXT = MAP_FNC_WTXT(MAP_GLS_NIV_FLD +&
			MAP_VEC_NRTN(MAP_IND_CMPO+1)+ MAP_SEPA_LEN)
	MAP_GLS_TXT = MAP_FNC_WTXT(MAP_GLS_NIV_FLD +&
			MAP_VEC_NRTN(MAP_IND_CMPO+1)+ "-ATR" +&
			MAP_SEPA_ATR  + "PIC  X(01).")
      ELSE
        MAP_GLS_TXT = MAP_FNC_WTXT(MAP_GLS_NIV_VRF + MAP_GLS_VRF(4))
        MAP_GLS_TXT = MAP_FNC_WTXT(MAP_GLS_NIV_VRF + MAP_GLS_VRF(5))
        MAP_GLS_TXT = MAP_FNC_WTXT(MAP_GLS_SPA_VRF + "   " + MAP_GLS_VRF(6))
      END IF
      MAP_GLS_TXT = MAP_FNC_WTXT(MAP_GLS_NIV_VRF + MAP_GLS_VRF(7) )
   ELSE
   IF MAP_SWI_IDC = MAP_CTE_YES THEN
      MAP_GLS_TXT = MAP_FNC_WTXT(MAP_GLS_MRG_VRF + MAP_GLS_IDC(1))
      IF MAP_GLS_FOR = "BMS" THEN
          MAP_GLS_TXT = MAP_FNC_WTXT(MAP_GLS_NIV_FLD +&
                        MAP_VEC_NRTN(MAP_IND_CMPO+1) + MAP_SEPA_LEN)
          MAP_GLS_TXT = MAP_FNC_WTXT(MAP_GLS_NIV_FLD +&
                        MAP_VEC_NRTN(MAP_IND_CMPO+1)+&
                        "-ATR" + MAP_SEPA_ATR  + "PIC  X(01).")
      END IF
      MAP_GLS_TXT = MAP_FNC_WTXT(MAP_GLS_NIV_IDC + MAP_GLS_IDC(2))
      MAP_GLS_TXT = MAP_FNC_WTXT(MAP_GLS_NIV_IDC + MAP_GLS_IDC(3))
   ELSE
   IF MAP_VEC_NUME(MAP_IND_CMPO) = MAP_CTE_YES AND &
      SGN_LEAD <> "" THEN
      MAP_GLS_TXT = MAP_FNC_WTXT(MAP_GLS_NIV_FLD +&
         MAP_VEC_NRTN(MAP_IND_CMPO)  + "-ALF" +&
         RIGHT(MAP_SEPA_PIC,5) + MAP_GLS_PIC_ALF + ".")

      IF MAP_GLS_FOR = "BMS" THEN
         MAP_GLS_TXT = MAP_FNC_WTXT(MAP_GLS_NIV_FLD +&
            MAP_VEC_NRTN(MAP_IND_CMPO) + "-EDT  REDEFINES" )
         MAP_GLS_TXT = MAP_FNC_WTXT(MAP_GLS_SPA_FLD +&
            "   " + MAP_VEC_NRTN(MAP_IND_CMPO) + "-ALF" +&
         RIGHT(MAP_SEPA_PIC,5) + MAP_GLS_PIC_EDT + ".")
      END IF
      MAP_GLS_TXT = MAP_FNC_WTXT(MAP_GLS_NIV_FLD +&
         MAP_VEC_NRTN(MAP_IND_CMPO) + "      REDEFINES" )
      IF SGN_LEAD <> "" THEN
         MAP_GLS_TXT = MAP_FNC_WTXT(MAP_GLS_SPA_FLD +&
            "   " + MAP_VEC_NRTN(MAP_IND_CMPO) + "-ALF" +&
            RIGHT(MAP_SEPA_PIC,5)  +&
            MAP_GLS_PIC )
            MAP_GLS_TXT = MAP_FNC_WTXT(MAP_GLS_SPA_FLD +&
            SGN_LEAD + "." )
      ELSE
         MAP_GLS_TXT = MAP_FNC_WTXT(MAP_GLS_SPA_FLD +&
            "   " + MAP_VEC_NRTN(MAP_IND_CMPO) + "-ALF" +&
            MAP_GLS_SPA_FLD + MAP_GLS_PIC + ".")
      END IF
   ELSE
      MAP_GLS_TXT = MAP_FNC_WTXT(MAP_GLS_NIV_FLD +&
         MAP_VEC_NRTN(MAP_IND_CMPO)  +&
         MAP_SEPA_PIC + MAP_GLS_PIC + ".")
   END IF
   END IF
   END IF
   END IF
   END DEF
850
 !====================== DETECTA CADA REGISTRO DE LA PANTALLA ===============

   DEF INTEGER MAP_FNC_FIL
   MAP_SWI_FILE = MAP_CTE_NOT
   FOR I% = 1 TO MAP_TOT_FILE
      IF MAP_VEC_FIL(I%) = MAP_VEC_REGI(MAP_TOT_CMPO) THEN
         MAP_SWI_FILE = MAP_CTE_YES
      END IF
   NEXT I%
   IF MAP_SWI_FILE = MAP_CTE_NOT AND MAP_SWI_CFRM = MAP_CTE_NOT THEN
      MAP_TOT_FILE = MAP_TOT_FILE + 1
      MAP_VEC_FIL(MAP_TOT_FILE) = MAP_VEC_REGI(MAP_TOT_CMPO)
   END IF

   END DEF
860
 !====================== GENERA CAMPOS ADICIONALES DE FECHA =============

   DEF INTEGER MAP_FNC_FEC
   FEC$ = "TRUE"
   MAP_GLS_SFEC = RIGHT$(MAP_VEC_NOMB(MAP_TOT_CMPO),2)
   FOR I% = 1 TO MAP_NUM_TFEC
      MAP_TOT_CMPO = MAP_TOT_CMPO + 1
      IF MAP_SWI_CFRM = MAP_CTE_YES THEN
         MAP_VEC_MOVE(MAP_TOT_CMPO) = MAP_CTE_NOT
      END IF
      MAP_VEC_DERI (MAP_TOT_CMPO) = MAP_CTE_YES
      MAP_VEC_DSPL (MAP_TOT_CMPO) = MAP_VEC_DSPL(MAP_IND_CMPO)
      MAP_VEC_PROT (MAP_TOT_CMPO) = MAP_CTE_NOT
      MAP_VEC_VALI (MAP_TOT_CMPO) = MAP_CTE_NOT
      MAP_VEC_SCLR (MAP_TOT_CMPO) = MAP_CTE_NOT
      MAP_VEC_TFLD (MAP_TOT_CMPO) = MAP_VEC_TFLD(MAP_IND_CMPO)
      MAP_VEC_REGI (MAP_TOT_CMPO) = MAP_VEC_REGI(MAP_IND_CMPO)
      MAP_VEC_TIPO (MAP_TOT_CMPO) = "NUM"
      MAP_VEC_NOMB (MAP_TOT_CMPO) = MAP_VEC_DMSA(I%) + MAP_GLS_SFEC
      MAP_VEC_PFLD (MAP_TOT_CMPO) = MAP_CTE_NOT
      MAP_VEC_NRTN (MAP_TOT_CMPO) = MAP_VEC_REGI(MAP_TOT_CMPO) +&
                                   "-NUM-" + MAP_VEC_NOMB(MAP_TOT_CMPO)
      MAP_VEC_TIDX(MAP_TOT_CMPO)        = MAP_TOT_CIDX
      MAP_GLS_VFEC(I%)           = MAP_VEC_NRTN(MAP_TOT_CMPO) +&
                    RIGHT(MAP_SEPA_PIC,4) + "X(02)."
      MAP_VEC_ATR(MAP_TOT_CMPO) = MAP_CTE_NOT
      MAP_VEC_LEN(MAP_TOT_CMPO) = MAP_CTE_NOT
      MAP_VEC_N(MAP_TOT_CMPO) = MAP_CTE_NOT
882
   NEXT I%
   END DEF
884
 !====================== GENERA CAMPOS ADICIONALES DIGITO VERIFICADOR =======
886
   DEF INTEGER MAP_FNC_VRF

   VRF$ = "TRUE"

   MAP_VEC_N(MAP_TOT_CMPO) = MAP_CTE_NOT
   MAP_TOT_CMPO = MAP_TOT_CMPO + 1
   IF MAP_SWI_CFRM = MAP_CTE_YES THEN
        MAP_VEC_MOVE(MAP_TOT_CMPO) = MAP_CTE_NOT
   END IF
   MAP_VEC_FLD(MAP_TOT_CMPO) = MAP_VEC_FLD(MAP_TOT_CMPO - 1) 
   MAP_VEC_TVAL(MAP_TOT_CMPO) = MAP_IND_VVRF
   MAP_VEC_TVAL(MAP_TOT_CMPO-1) = MAP_NUM_VVRF
   MAP_VEC_DSPL(MAP_TOT_CMPO) = MAP_VEC_DSPL(MAP_IND_CMPO)
   MAP_VEC_PROT(MAP_TOT_CMPO) = MAP_VEC_PROT(MAP_IND_CMPO)
   MAP_VEC_PROT(MAP_IND_CMPO) = MAP_CTE_NOT
   MAP_VEC_TIDX(MAP_TOT_CMPO) = MAP_TOT_CIDX
   MAP_VEC_REGI(MAP_TOT_CMPO) = MAP_VEC_REGI(MAP_IND_CMPO)
   MAP_VEC_TIPO(MAP_TOT_CMPO) = "VRF"
   MAP_VEC_NOMB(MAP_TOT_CMPO) = MAP_VEC_NOMB(MAP_IND_CMPO)
   MAP_VEC_NRTN(MAP_TOT_CMPO) = MAP_VEC_REGI(MAP_IND_CMPO) + "-VRF-" +&
                                MAP_VEC_NOMB(MAP_IND_CMPO)

   IF MAP_GLS_FOR = "FMS" THEN
 	MAP_VEC_PKEY(MAP_TOT_CMPO) = MAP_VEC_PKEY(MAP_IND_CMPO)
 	MAP_VEC_PKEY(MAP_IND_CMPO) = MAP_CTE_NOT
 	MAP_VEC_PFLD(MAP_TOT_CMPO) = MAP_VEC_PFLD(MAP_IND_CMPO)
 	MAP_VEC_PFLD(MAP_IND_CMPO) = MAP_CTE_NOT
        MAP_VEC_ATR(MAP_TOT_CMPO) = MAP_CTE_RED
        MAP_VEC_LEN(MAP_TOT_CMPO) = MAP_CTE_RED
   END IF
   MAP_VEC_TFLD(MAP_TOT_CMPO) = MAP_VEC_TFLD(MAP_IND_CMPO)
   MAP_GLS_VRF(1) = MAP_VEC_NRTN(MAP_TOT_CMPO) + "-VRF."
   MAP_GLS_VRF(2) = MAP_VEC_NRTN(MAP_TOT_CMPO-1) + "-ALF" +&
          RIGHT(MAP_SEPA_PIC,5) + "X(" +&
          STR$(MAP_NUM_PICT - 1) + ")."
   IF MAP_GLS_FOR = "BMS" THEN
      MAP_GLS_VRF(3) = MAP_VEC_NRTN(MAP_TOT_CMPO-1) + "-EDT  REDEFINES"
      MAP_GLS_VRF(4) = MAP_VEC_NRTN(MAP_TOT_CMPO-1) + "-ALF" +&
          RIGHT(MAP_SEPA_PIC,5) + "Z(" +&
          STR$(MAP_NUM_PICT - 1) + ")."
   END IF
   MAP_GLS_VRF(5) = MAP_VEC_NRTN(MAP_TOT_CMPO-1) + "      REDEFINES"
   IF MAP_GLS_FOR = "BMS" THEN
   ELSE
	MAP_GLS_VRF(4) = MAP_VEC_NRTN(MAP_TOT_CMPO-1) + "-ALF" +&
			 RIGHT$(MAP_SEPA_PIC,5) + "X(" +&
			 STR$(MAP_NUM_PICT - 1) + ")."
        MAP_GLS_VRF(5) = MAP_VEC_NRTN(MAP_TOT_CMPO-1) + "      REDEFINES"
	MAP_GLS_VRF(6) = MAP_VEC_NRTN(MAP_TOT_CMPO-1) + "-ALF" +&
			 RIGHT$(MAP_SEPA_PIC,5) + "9(" +&
			 STR$(MAP_NUM_PICT - 1) + ")."
   END IF
   MAP_GLS_VRF(7) = MAP_VEC_NRTN(MAP_TOT_CMPO)   +&
          MAP_SEPA_PIC + "X(01)."
   END DEF

 !====================== GENERA CAMPOS ADICIONALES CAMPOS IDC =======

   DEF INTEGER MAP_FNC_IDC

   IDC$ = "TRUE"

   MAP_VEC_N(MAP_TOT_CMPO) = MAP_CTE_NOT
   MAP_VEC_TVAL(MAP_TOT_CMPO) = MAP_IND_VIND
   MAP_TOT_CMPO = MAP_TOT_CMPO + 1
   MAP_VEC_TVAL(MAP_TOT_CMPO) = MAP_IND_VGLS
   IF MAP_SWI_CFRM = MAP_CTE_YES THEN
        MAP_VEC_MOVE(MAP_TOT_CMPO) = MAP_CTE_NOT
   END IF
   MAP_VEC_BUS(MAP_TOT_CMPO)  = MAP_IND_IDC
   MAP_VEC_REGI(MAP_TOT_CMPO) = MAP_VEC_REGI(MAP_IND_CMPO)
   MAP_VEC_TIPO(MAP_TOT_CMPO) = "GLS"
   MAP_VEC_TIDX(MAP_TOT_CMPO) = MAP_TOT_CIDX
   MAP_VEC_NOMB(MAP_TOT_CMPO) = MAP_VEC_NOMB(MAP_IND_CMPO)

   MAP_VEC_NRTN(MAP_TOT_CMPO) = MAP_VEC_REGI(MAP_IND_CMPO) + "-GLS-" +&
               MAP_VEC_NOMB(MAP_TOT_CMPO)
   MAP_VEC_TFLD(MAP_TOT_CMPO) = MAP_VEC_TFLD(MAP_IND_CMPO)
   MAP_VEC_PKEY(MAP_TOT_CMPO - 1) = MAP_CTE_NOT
   MAP_VEC_PKEY(MAP_TOT_CMPO    ) = MAP_CTE_NOT
   MAP_VEC_PFLD(MAP_TOT_CMPO - 1) = MAP_CTE_NOT
   MAP_VEC_PFLD(MAP_TOT_CMPO    ) = MAP_CTE_NOT
   MAP_VEC_DSPL(MAP_TOT_CMPO) = MAP_VEC_DSPL(MAP_IND_CMPO)
   MAP_VEC_PROT(MAP_TOT_CMPO) = MAP_VEC_PROT(MAP_IND_CMPO)
   MAP_GLS_IDC(1) = MAP_VEC_NRTN(MAP_TOT_CMPO-1) + "-IDC."
   MAP_GLS_IDC(2) = MAP_VEC_NRTN(MAP_TOT_CMPO-1) +&
         MAP_SEPA_PIC + "X(1)."
   MAP_GLS_IDC(3) = MAP_VEC_NRTN(MAP_TOT_CMPO) +&
         MAP_SEPA_PIC + "X(" +&
         STR$(MAP_NUM_PICT ) + ")."
   END DEF


 !====================== UNDERCORE ======================

   DEF INTEGER MAP_FNC_UND

   MAP_GLS_DLI = "INITIAL='<'"
   MAP_GLS_DLD = "INITIAL='>'"
   MAP_TOT_CMPO = MAP_TOT_CMPO + 1
   MAP_IND_CMPO = MAP_TOT_CMPO
   MAP_VEC_FLD(MAP_IND_CMPO) = MAP_GLS_CMP
   CALL GENRPTREP(MAP_GLS_CMP,"_","-")

 UND_LAB_CIC:
   UND_TOT_UND = 0
   FOR I% = 1 TO LEN(MAP_GLS_CMP)
      IF MID$(MAP_GLS_CMP,I%,1) = "-" THEN
         UND_TOT_UND = UND_TOT_UND + 1
         MAP_VEC_UNDE(UND_TOT_UND) = I%
      END IF
   NEXT I%

   IF MID$(MAP_GLS_CMP,MAP_VEC_UNDE(1),5) = "-IKY-" THEN
      MAP_GLS_DLI = "INITIAL='{'"
      MAP_GLS_DLD = "INITIAL='}'"
      MAP_VEC_PKEY(MAP_TOT_CMPO) = MAP_CTE_YES
      MAP_VEC_PFLD(MAP_TOT_CMPO) = MAP_CTE_NOT
      MAP_VEC_TFLD(MAP_TOT_CMPO) = MAP_IND_IKY
                MAP_GLS_CMP = LEFT$(MAP_GLS_CMP,MAP_VEC_UNDE(1) - 1 ) +&
               RIGHT$(MAP_GLS_CMP,MAP_VEC_UNDE(2))
      GO TO UND_LAB_CIC
   ELSE
   IF MID$(MAP_GLS_CMP,MAP_VEC_UNDE(1),5) = "-MKY-" THEN
      MAP_GLS_DLI = "INITIAL='{'"
      MAP_GLS_DLD = "INITIAL='}'"
      MAP_VEC_PKEY(MAP_TOT_CMPO) = MAP_CTE_NOT
      MAP_VEC_PFLD(MAP_TOT_CMPO) = MAP_CTE_YES
      MAP_VEC_TFLD(MAP_TOT_CMPO) = MAP_IND_MKY
                MAP_GLS_CMP = LEFT$(MAP_GLS_CMP,MAP_VEC_UNDE(1) - 1 ) +&
               RIGHT$(MAP_GLS_CMP,MAP_VEC_UNDE(2))
      GO TO UND_LAB_CIC
   ELSE
   IF MID$(MAP_GLS_CMP,MAP_VEC_UNDE(1),5) = "-AKY-" THEN
      MAP_GLS_DLI = "INITIAL='{'"
      MAP_GLS_DLD = "INITIAL='}'"
      MAP_VEC_PKEY(MAP_TOT_CMPO) = MAP_CTE_NOT
      MAP_VEC_PFLD(MAP_TOT_CMPO) = MAP_CTE_NOT
      MAP_VEC_TFLD(MAP_TOT_CMPO) = MAP_IND_AKY
                MAP_GLS_CMP = LEFT$(MAP_GLS_CMP,MAP_VEC_UNDE(1) - 1 ) +&
               RIGHT$(MAP_GLS_CMP,MAP_VEC_UNDE(2))
      GO TO UND_LAB_CIC
   END IF
   END IF
   END IF

   IF LEFT$(MAP_GLS_CMP,4) = "FRM-" THEN
        MAP_SWI_CFRM = MAP_CTE_YES
        MAP_VEC_MOVE(MAP_TOT_CMPO) = MAP_CTE_NOT
 !!!    MAP_VEC_REGI(MAP_TOT_CMPO) = MAP_GLS_MAPA
 !!!    GO TO UND_LAB_FRM
   END IF
   MAP_VEC_REGI(MAP_TOT_CMPO) = LEFT$(MAP_GLS_CMP,MAP_VEC_UNDE(1) - 1)
 UND_LAB_FRM:

   IF MID$(MAP_GLS_CMP,MAP_VEC_UNDE(1),5) = "-FEC-" THEN
      MAP_NUM_TFEC = 4
      MAP_VEC_DMSA(1) = "D"
      MAP_VEC_DMSA(2) = "M"
      MAP_VEC_DMSA(3) = "S"
      MAP_VEC_DMSA(4) = "A"
      MAP_SWI_FECH = MAP_CTE_YES
      MAP_VEC_MOVE(MAP_TOT_CMPO) = MAP_CTE_NOT
      MAP_VEC_FECH(MAP_TOT_CMPO) = FEC_IND_FFEC
   ELSE
   IF MID$(MAP_GLS_CMP,MAP_VEC_UNDE(1),5) = "-DMA-" OR &
      MID$(MAP_GLS_CMP,MAP_VEC_UNDE(1),5) = "-AMD-" THEN
      MAP_NUM_TFEC = 3
      MAP_VEC_DMSA(1) = "D"
      MAP_VEC_DMSA(2) = "M"
      MAP_VEC_DMSA(3) = "A"
      MAP_VEC_DMSA(4) = ""
      MAP_SWI_FECH = MAP_CTE_YES
      MAP_VEC_MOVE(MAP_TOT_CMPO) = MAP_CTE_NOT
      MAP_VEC_FECH(MAP_TOT_CMPO) = FEC_IND_FDMA
   ELSE
   IF MID$(MAP_GLS_CMP,MAP_VEC_UNDE(1),5) = "-MSA-" OR &
      MID$(MAP_GLS_CMP,MAP_VEC_UNDE(1),5) = "-SAM-" THEN
      MAP_NUM_TFEC = 3
      MAP_VEC_DMSA(1) = "M"
      MAP_VEC_DMSA(2) = "S"
      MAP_VEC_DMSA(3) = "A"
      MAP_VEC_DMSA(4) = ""
      MAP_SWI_FECH = MAP_CTE_YES
      MAP_VEC_MOVE(MAP_TOT_CMPO) = MAP_CTE_NOT
      MAP_VEC_FECH(MAP_TOT_CMPO) = FEC_IND_FMSA
   ELSE
   IF MID$(MAP_GLS_CMP,MAP_VEC_UNDE(1),5) = "-FMA-" OR &
      MID$(MAP_GLS_CMP,MAP_VEC_UNDE(1),5) = "-FAM-" THEN
      MAP_NUM_TFEC = 2
      MAP_VEC_DMSA(1) = "M"
      MAP_VEC_DMSA(2) = "A"
      MAP_VEC_DMSA(3) = ""
      MAP_VEC_DMSA(4) = ""
      MAP_SWI_FECH = MAP_CTE_YES
      MAP_VEC_MOVE(MAP_TOT_CMPO) = MAP_CTE_NOT
      MAP_VEC_FECH(MAP_TOT_CMPO) = FEC_IND_FFMA
   ELSE
   IF MID$(MAP_GLS_CMP,MAP_VEC_UNDE(1),5) = "-FSA-" OR &
      MID$(MAP_GLS_CMP,MAP_VEC_UNDE(1),5) = "-FAS-" THEN
      MAP_NUM_TFEC = 2
      MAP_VEC_DMSA(1) = "S"
      MAP_VEC_DMSA(2) = "A"
      MAP_VEC_DMSA(3) = ""
      MAP_VEC_DMSA(4) = ""
      MAP_SWI_FECH = MAP_CTE_YES
      MAP_VEC_MOVE(MAP_TOT_CMPO) = MAP_CTE_NOT
      MAP_VEC_FECH(MAP_TOT_CMPO) = FEC_IND_FFSA
   ELSE
   IF MID$(MAP_GLS_CMP,MAP_VEC_UNDE(1),5) = "-FDM-" OR &
      MID$(MAP_GLS_CMP,MAP_VEC_UNDE(1),5) = "-FMD-" THEN
      MAP_NUM_TFEC = 2
      MAP_VEC_DMSA(1) = "D"
      MAP_VEC_DMSA(2) = "M"
      MAP_VEC_DMSA(3) = ""
      MAP_VEC_DMSA(4) = ""
      MAP_SWI_FECH = MAP_CTE_YES
      MAP_VEC_MOVE(MAP_TOT_CMPO) = MAP_CTE_NOT
      MAP_VEC_FECH(MAP_TOT_CMPO) = FEC_IND_FFDM
   ELSE
   IF MID$(MAP_GLS_CMP,MAP_VEC_UNDE(1),5) = "-FFA-" THEN
      MAP_NUM_TFEC = 1
      MAP_VEC_DMSA(1) = "A"
      MAP_VEC_DMSA(2) = ""
      MAP_VEC_DMSA(3) = ""
      MAP_VEC_DMSA(4) = ""
      MAP_SWI_FECH = MAP_CTE_YES
      MAP_VEC_MOVE(MAP_TOT_CMPO) = MAP_CTE_NOT
      MAP_VEC_FECH(MAP_TOT_CMPO) = FEC_IND_FFFA
   ELSE
   IF MID$(MAP_GLS_CMP,MAP_VEC_UNDE(1),5) = "-VRF-" THEN
      OVR_NUM_ADI = OVR_NUM_ADI + 2
      MAP_SWI_VERF = MAP_CTE_YES
      MAP_GLS_CMP = LEFT(MAP_GLS_CMP,MAP_VEC_UNDE(1)) +&
               "NUM" + RIGHT(MAP_GLS_CMP,MAP_VEC_UNDE(2))
      MAP_VEC_TIPO(MAP_TOT_CMPO) = "NUM"
      MAP_VEC_NUME(MAP_TOT_CMPO) = MAP_CTE_YES
   ELSE
   IF MID$(MAP_GLS_CMP,MAP_VEC_UNDE(1),5) = "-IDC-" THEN
      OVR_NUM_ADI = OVR_NUM_ADI + 2
      MAP_SWI_IDC = MAP_CTE_YES
      MAP_GLS_CMP = LEFT(MAP_GLS_CMP,MAP_VEC_UNDE(1)) +&
               "IND" + RIGHT(MAP_GLS_CMP,MAP_VEC_UNDE(2))
      MAP_VEC_TIPO(MAP_TOT_CMPO) = "IND"
   ELSE
   IF MID$(MAP_GLS_CMP,MAP_VEC_UNDE(1),5) = "-GLS-" THEN
      MAP_SWI_GLOS = MAP_CTE_YES
   ELSE
   END IF
   END IF
   END IF
   END IF
   END IF
   END IF
   END IF
   END IF
   END IF
   END IF
   MAP_VEC_TIPO(MAP_TOT_CMPO) = MID$(MAP_GLS_CMP,MAP_VEC_UNDE(1) + 1,&
               MAP_VEC_UNDE(2) - (MAP_VEC_UNDE(1) + 1))
   MAP_VEC_NOMB(MAP_TOT_CMPO) = RIGHT$(MAP_GLS_CMP,MAP_VEC_UNDE(2) + 1)
   MAP_VEC_CMP(MAP_TOT_CMPO) = MAP_GLS_CMP
   MAP_VEC_NRTN(MAP_TOT_CMPO) = MAP_VEC_REGI(MAP_TOT_CMPO) + "-" +&
               MAP_VEC_TIPO(MAP_TOT_CMPO) + "-" +&
               MAP_VEC_NOMB(MAP_TOT_CMPO)

   MAP_NUM_FNC = MAP_FNC_FIL
   END DEF
890
 !====================== INDEX =============================

   DEF INTEGER MAP_FNC_IDX
   TMP_INDEX = 1
   MAP_GLS_OCC = ""
   MAP_GLS_NIV_FLD = V_ANSI(MG_B) + "02 "
   MAP_GLS_SPA_FLD = V_ANSI(MG_B) + "   "
 IDX_LAB_NEW:
   ACT_INDEX = MAP_CTE_YES
   TMP_INDEX = TMP_INDEX + 1
   TOKEN = NEXTTOKEN
   TOKEN = NEXTTOKEN
   MAP_VEC_FICO(TMP_INDEX,1) = NUMTOKEN
 !   OVR_NUM_FIL = NUMTOKEN

   TOKEN = NEXTTOKEN
   TOKEN = NEXTTOKEN
   MAP_VEC_FICO(TMP_INDEX,2) = NUMTOKEN - 1

   TOKEN = NEXTTOKEN
   TOKEN = NEXTTOKEN
   IF VALTOKEN = ":" THEN
      GO TO IDX_LAB_NEW
   END IF      
895
 F_INDEX:

   IF ANT_INDEX = MAP_CTE_NOT THEN
      NIV_INDEX = 3
      MAP_SEPA_PIC = "            PIC  "
   ELSE
      IF TMP_INDEX = MAP_TOT_CIDX THEN
         NIV_INDEX = 5
      ELSE
         NIV_INDEX = 3
      END IF
   END IF

   ANT_INDEX = MAP_CTE_YES
   MAP_TOT_CIDX = TMP_INDEX
 IDX_LAB_FIN:
   MAP_VEC_TIDX(MAP_TOT_CMPO) = MAP_TOT_CIDX
   END DEF
900
 !====================== HELP ======================

   DEF INTEGER MAP_FNC_HLP
   TOKEN = NEXTTOKEN
   TOKEN = NEXTTOKEN
   MAP_GLS_HLP = STRTOKEN
   END DEF

 !====================== TEXT ======================
920
   DEF INTEGER MAP_FNC_TEX
   OVR_NUM_ADI = 1
   TOKEN = NEXTTOKEN
   TOKEN = NEXTTOKEN
   MAP_VEC_FICO(1,1) = NUMTOKEN
   OVR_NUM_FIL = NUMTOKEN
   MAP_NUM_LINE = NUMTOKEN
   IF MAP_SWI_PFLD = MAP_CTE_NOT THEN
      MAP_SWI_PFLD = MAP_CTE_YES
 !!!      MAP_NUM_INFE = MAP_VEC_FICO(1,1)
   END IF
   MAP_GLS_FIL = STR$(MAP_VEC_FICO(1,1) - MAP_NUM_INFE + 1 )
   IF LEN(MAP_GLS_FIL) = 1 THEN
      MAP_GLS_FIL = "0" + MAP_GLS_FIL
   END IF
   TOKEN = NEXTTOKEN
   TOKEN = NEXTTOKEN
   MAP_VEC_FICO(1,2) = NUMTOKEN - 1
   OVR_NUM_COL = NUMTOKEN - 1
   MAP_NUM_COLU = NUMTOKEN
   BMS_NUM_COL = NUMTOKEN
   MAP_GLS_COL = POS_VEC_ZRS(LEN(STR$(MAP_VEC_FICO(1,2)))) +&
            STR$(MAP_VEC_FICO(1,2))
   TOKEN = NEXTTOKEN
   TOKEN = NEXTTOKEN
   MAP_NUM_TTEX = SZTOKEN
   MAP_GLS_DEF = STRTOKEN
   TOKEN = NEXTTOKEN
   IF VALTOKEN = "&" THEN
      TOKEN = NEXTTOKEN
      MAP_GLS_DEF = MAP_GLS_DEF + STRTOKEN 
      MAP_NUM_TTEX = MAP_NUM_TTEX + SZTOKEN
      TOKEN = NEXTTOKEN
   END IF
   OVR_NUM_LEN = MAP_NUM_TTEX
   MAP_GLS_L11 = "         DFHMDF POS=(" + MAP_GLS_FIL + &
            "," + MAP_GLS_COL + "),ATTRB=(ASKIP"
   MAP_GLS_L13 = "),LENGTH=" + STR$(MAP_NUM_TTEX) + ","
   MAP_GLS_L31 = ""
   MAP_GLS_L21 = "               INITIAL='" 
   IF LEN(MAP_GLS_DEF) > 46 THEN
        MAP_GLS_L21 = MAP_GLS_L21 + LEFT$(MAP_GLS_DEF,47) + "X"
        MAP_GLS_L31 = "               " + RIGHT$(MAP_GLS_DEF,48) + "'"
   ELSE
        MAP_GLS_L21 = MAP_GLS_L21 + MAP_GLS_DEF + "'"
   END IF
   MAP_GLS_L12 = ",NORM"
   WHILE VALTOKEN <> ";"
      IF VALTOKEN = "BLINK" THEN
 !!!         MAP_NUM_INFE = 1
         MAP_SWI_PFLD = MAP_CTE_NOT
         GO TO TEX_LAB_FIN
      END IF
      TOKEN = NEXTTOKEN
   NEXT
   MAP_NUM_VSZ = MAP_NUM_TTEX + 1
   MAP_NUM_FNC = MAP_FNC_VAL
930
   IF MAP_GLS_FOR = "BMS" THEN
	MAP_GLS_WRIT = MAP_GLS_L11 + MAP_GLS_L12 + MAP_GLS_L13
	CALL MAP_RUT_SPA(MAP_GLS_WRIT,71)
	MAP_GLS_WRIT = MAP_GLS_WRIT + "X"
	MAP_GLS_WRIT = MAP_FNC_WBMS(MAP_GLS_WRIT)
	MAP_GLS_L21 = MAP_FNC_WBMS(MAP_GLS_L21)
	IF MAP_GLS_L31 <> "" THEN
		MAP_GLS_L31 = MAP_FNC_WBMS(MAP_GLS_L31)
	END IF
   END IF
 TEX_LAB_FIN:
   END DEF


 !====ASIGNACION CORRELATIVOS PARA NOMBRES REPETIDOS  ===========

   DEF INTEGER MAP_FNC_NOMB
     FOR I% = 1 TO MAP_TOT_NOMB
       IF MAP_VEC_REPE(I%) = MAP_GLS_NOMB THEN
            MAP_TOT_REPE = MAP_TOT_REPE + 1
            MAP_GLS_NOMB = LEFT$(MAP_GLS_NOMB,LEN(MAP_GLS_NOMB) - 2) +&
                           POS_VEC_ZRS(LEN(STR$(MAP_TOT_REPE))) +&
                           STR$(MAP_TOT_REPE)
       END IF
     NEXT I%
     MAP_TOT_NOMB = MAP_TOT_NOMB + 1
     MAP_VEC_REPE(MAP_TOT_NOMB) = MAP_GLS_NOMB
   END DEF
 !====================== BMS ======================================

   DEF INTEGER MAP_FNC_BMS

   BMS_NUM_LMAP = BMS_NUM_PIC + 3
 !!! Delim_izq ( MAP_GLS_DLI es < o {   ,      Columna - 2 )
   BMS_NUM_DPZ = -2
   IF MAP_VEC_DSPL(MAP_IND_CMPO) = MAP_CTE_NOT THEN
         MAP_NUM_FNC = R_POS
         MAP_GLS_BMS = "         DFHMDF " + MAP_GLS_POS +&
                       ",ATTRB=(ASKIP,NORM),LENGTH=1," + MAP_GLS_DLI
         MAP_GLS_BMS = MAP_FNC_WBMS(MAP_GLS_BMS)
   END IF
   BMS_NUM_DPZ = MAP_NUM_NCI
 !!!      Campo Prefijo ( Ej: IDC )
   IF MAP_SWI_IDC = MAP_CTE_YES THEN
 !!!         BMS_NUM_LMAP = BMS_NUM_
         BMS_NUM_DPZ  = 0
         MAP_GLS_NOMB = MAP_VEC_TIPO(MAP_IND_CMPO) + MAP_VEC_NOMB(MAP_IND_CMPO)
         MAP_NUM_FNC = MAP_FNC_NOMB
         CALL MAP_RUT_SPA(MAP_GLS_NOMB,9)
         MAP_GLS_NOMB  = MAP_GLS_NOMB + "DFHMDF "
         MAP_NUM_FNC  = R_POS
         MAP_AUX_IDC$ = ",ATTRB=(ASKIP," + MAP_GLS_DARK + "),LENGTH=1"
         MAP_AUX_IDC$ = MAP_GLS_NOMB + MAP_GLS_POS + MAP_AUX_IDC$
         MAP_AUX_IDC$ = MAP_FNC_WBMS(MAP_AUX_IDC$)
         BMS_NUM_DPZ  = 2
         MAP_NUM_FNC  = R_POS
       MAP_AUX_IDC$ = ",ATTRB=(PROT,BRT),LENGTH=1,INITIAL='-'"
         MAP_AUX_IDC$ = "         DFHMDF " + MAP_GLS_POS + MAP_AUX_IDC$
         MAP_AUX_IDC$ = MAP_FNC_WBMS(MAP_AUX_IDC$)
 !!!     BMS_NUM_PIC  = MAP_NUM_PICT - 1
         BMS_NUM_DPZ  = 4
   END IF

 !!! Nombre del campo
   IF MAP_SWI_IDC = MAP_CTE_YES THEN
      MAP_GLS_NOMB = MAP_VEC_TIPO(MAP_IND_CMPO + 1) + MAP_VEC_NOMB(MAP_IND_CMPO)
   ELSE
      MAP_GLS_NOMB = MAP_VEC_TIPO(MAP_IND_CMPO) + MAP_VEC_NOMB(MAP_IND_CMPO)
   END IF
   MAP_NUM_FNC = MAP_FNC_NOMB
   CALL MAP_RUT_SPA(MAP_GLS_NOMB,9)
   MAP_GLS_BMS = MAP_GLS_NOMB + "DFHMDF "

 !!! Atributos del campo
   MAP_NUM_FNC = R_POS
   MAP_GLS_BMS = MAP_GLS_BMS + MAP_GLS_POS + ",ATTRB=(ASKIP,"

 !!! Display only ==> intensidad normal
   IF MAP_GLS_DARK <> "DRK" AND&
      MAP_VEC_DSPL(MAP_IND_CMPO) = MAP_CTE_YES THEN
         MAP_GLS_DARK = "BRT"
   END IF
   MAP_GLS_BMS = MAP_GLS_BMS + MAP_GLS_DARK + ",FSET),"
   MAP_GLS_BMS = MAP_GLS_BMS + "LENGTH=" + STR$(BMS_NUM_PIC)
   MAP_GLS_BMS = MAP_FNC_WBMS(MAP_GLS_BMS)

 !!! Campo Stopper
   MAP_VEC_TAB(MAP_IND_CMPO) = ",ATTRB=(PROT),LENGTH=1," + MAP_GLS_DLD

 !!!      Campo Sufijo ( Ej: VRF )
   IF MAP_SWI_VERF = MAP_CTE_YES THEN
      BMS_NUM_DPZ  = BMS_NUM_PIC + 1
      MAP_NUM_FNC  =  R_POS
      MAP_AUX_VRF$ = "         DFHMDF " + MAP_GLS_POS
      MAP_AUX_VRF$ = MAP_AUX_VRF$ +&
            ",ATTRB=(PROT,BRT),LENGTH=1,INITIAL='-'"
      MAP_AUX_VRF$ = MAP_FNC_WBMS(MAP_AUX_VRF$)
      BMS_NUM_DPZ  = BMS_NUM_PIC + 1 + 2
      MAP_GLS_NOMB = MAP_VEC_TIPO(MAP_IND_CMPO + 1) + MAP_VEC_NOMB(MAP_IND_CMPO)
      MAP_NUM_FNC = MAP_FNC_NOMB
      CALL MAP_RUT_SPA(MAP_GLS_NOMB,9)
      MAP_GLS_NOMB  = MAP_GLS_NOMB + "DFHMDF "
      MAP_NUM_FNC  = R_POS
      MAP_AUX_VRF$ = MAP_GLS_NOMB + MAP_GLS_POS
      MAP_AUX_VRF$ = MAP_AUX_VRF$ + ",ATTRB=(ASKIP," + MAP_GLS_DARK +&
				"),LENGTH=1"
      MAP_AUX_VRF$ = MAP_FNC_WBMS(MAP_AUX_VRF$)
      BMS_NUM_DPZ  = BMS_NUM_PIC + 2 + 2 + 1
   ELSE
      BMS_NUM_DPZ  = BMS_NUM_PIC + MAP_NUM_NCI + 1
      IF MAP_SWI_IDC = MAP_CTE_YES THEN
          BMS_NUM_DPZ = BMS_NUM_DPZ + 2
      END IF
   END IF

  IF MAP_VEC_DSPL(MAP_IND_CMPO) = MAP_CTE_NOT THEN
      MAP_NUM_FNC = R_POS
      MAP_GLS_BMS = "         DFHMDF "
      MAP_GLS_BMS = MAP_GLS_BMS + MAP_GLS_POS +&
         MAP_VEC_TAB(MAP_IND_CMPO)
      MAP_GLS_BMS = MAP_FNC_WBMS(MAP_GLS_BMS)
   END IF

   END DEF
 !====================== FIELD ======================
940
   DEF INTEGER MAP_FNC_FLD
   MAP_NUM_CORR = 0
   OVR_NUM_ADI = 5
   MAP_GLS_HLP = ""
   MAP_SWI_FECH = MAP_CTE_NOT
   MAP_SWI_GLOS = MAP_CTE_NOT
   MAP_GLS_DARK = "NORM"
   MAP_SWI_IDC = MAP_CTE_NOT
   MAP_SWI_VERF = MAP_CTE_NOT
   MAP_SWI_CFRM = MAP_CTE_NOT
   ACT_INDEX = MAP_CTE_NOT

   MAP_NUM_ASC = MAP_NUM_BAS
   MAP_NUM_BAS = MAP_NUM_BAS + 1
   TOKEN = NEXTTOKEN
   IF VALTOKEN <> "NAME" THEN
      GO TO FLD_LAB_FLD
   END IF
   TOKEN = NEXTTOKEN
   TOKEN = NEXTTOKEN
   MAP_NUM_CFLD = MAP_NUM_CFLD + 1
   MAP_GLS_CMP = STRTOKEN
   MAP_NUM_FNC = MAP_FNC_UND

   TOKEN = NEXTTOKEN
   TOKEN = NEXTTOKEN
   MAP_VEC_FICO(1,1) = NUMTOKEN
   OVR_NUM_FIL = NUMTOKEN
   IF MAP_SWI_PFLD = MAP_CTE_NOT THEN
      MAP_SWI_PFLD = MAP_CTE_YES
 !!!      MAP_NUM_INFE = MAP_VEC_FICO(1,1)
   END IF

   TOKEN = NEXTTOKEN
   TOKEN = NEXTTOKEN
   MAP_VEC_FICO(1,2) = NUMTOKEN - 1
   OVR_NUM_COL = NUMTOKEN - 3
   
   TOKEN = NEXTTOKEN
   TOKEN = NEXTTOKEN
950
   IF VALTOKEN = 'PICTURE' THEN
 !      IF MAP_SWI_VERF = MAP_CTE_YES THEN
 !         TOKEN = NEXTTOKEN
 !         TOKEN = NEXTTOKEN
 !         MAP_NUM_PICT = LEN(STRTOKEN) - 1
 !         TOKEN = NEXTTOKEN
 !      ELSE
           MAP_NUM_FNC = MAP_FNC_PIC
 !      END IF
 !!!      END IF
    END IF
   IF VALTOKEN = 'INDEX' THEN
      TOKEN = NEXTTOKEN
      MAP_NUM_FNC = MAP_FNC_IDX
   ELSE
      MAP_TOT_CIDX = 1
   END IF
   IF VALTOKEN = 'HELP' THEN
      MAP_NUM_FNC = MAP_FNC_HLP
   END IF
960
   WHILE VALTOKEN <> ";"
      IF VALTOKEN = "NOECHO" THEN
	 MAP_GLS_DARK = "DRK"
         MAP_VEC_BYA(MAP_IND_CMPO) = 3
         IF MAP_SWI_VERF = MAP_CTE_YES THEN
            MAP_VEC_BYA(MAP_TOT_CMPO+1) = 3
         END IF
      ELSE
      IF VALTOKEN = "DISPLAY_ONLY" THEN
         MAP_VEC_DSPL(MAP_IND_CMPO) = MAP_CTE_YES
         MAP_VEC_PROT(MAP_IND_CMPO) = MAP_CTE_NOT
         OVR_NUM_ADI = OVR_NUM_ADI - 4
         OVR_NUM_COL = OVR_NUM_COL + 2
      ELSE
      IF VALTOKEN = "AUTOTAB" THEN
         MAP_VEC_TAB(MAP_IND_CMPO) =&
            ",ATTRB=(PROT,ASKIP),LENGTH=1,"
      ELSE
      IF VALTOKEN = "RESPONSE_REQUIRED" THEN
         MAP_VEC_OBLI(MAP_IND_CMPO) = "N"

      END IF
      END IF
      END IF
      END IF
      TOKEN = NEXTTOKEN
   NEXT
   IF MAP_SWI_FECH = MAP_CTE_YES THEN
      MAP_NUM_FNC = MAP_FNC_FEC
   ELSE
   IF MAP_SWI_VERF = MAP_CTE_YES THEN
      MAP_NUM_FNC = MAP_FNC_VRF
   ELSE
   IF MAP_SWI_IDC = MAP_CTE_YES THEN
      MAP_NUM_FNC = MAP_FNC_IDC
   END IF
   END IF
   END IF
   MAP_NUM_LINE = MAP_VEC_FICO(1,1)
   MAP_NUM_COLU = MAP_VEC_FICO(1,2)
   BMS_NUM_COL =  MAP_VEC_FICO(1,2)
   MAP_NUM_FNC = MAP_FNC_TXT

 !!! Setea valores para funcion del BMS
   BMS_NUM_PIC = MAP_NUM_PICT
   IF MAP_SWI_VERF = MAP_CTE_YES THEN
      BMS_NUM_PIC = MAP_NUM_PICT - 1
   END IF

 !!! Area_total_campo = Delm_izq + attrb_byte + pic_campo   + delm_izq
   MAP_NUM_VSZ =    2        + 1          + BMS_NUM_PIC + 2

   FOR L% = 1 TO MAP_TOT_CIDX
 !!! Setea fila-columna para el sort
      MAP_NUM_LINE = MAP_VEC_FICO(L%,1)
      MAP_NUM_COLU = MAP_VEC_FICO(L%,2)

 !!! FILA DEL CAMPO

      MAP_GLS_FIL = STR$(MAP_VEC_FICO(L%,1) - MAP_NUM_INFE + 1 )
      IF LEN(MAP_GLS_FIL) = 1 THEN
         MAP_GLS_FIL = "0" + MAP_GLS_FIL
      END IF

      MAP_GLS_COL = STR$(MAP_VEC_FICO(L%,2) )
      IF LEN(MAP_GLS_COL) = 1 THEN
         MAP_GLS_COL = "0" + MAP_GLS_COL
      END IF

 !!!      MAP_NUM_FNC = MAP_FNC_VAL
	IF MAP_GLS_FOR = "BMS" THEN
		MAP_NUM_FNC = MAP_FNC_BMS
	END IF
   NEXT L%

 FLD_LAB_FLD:
   END DEF
962

 ! Validacion de Campos No Indexados
 !
   DEF INTEGER GEN_FNC_VCNI
   CALL PUT_GEN(MG_B,"PERFORM VAL-" + MAP_VEC_NRTN(I%) + ".")
   CALL PUT_GEN(MG_B,"IF FRM-SUAR = " +&
         " FRM-SUAR-MAL OR FRM-SUAR = FRM-SUAR-CLR")
   CALL PUT_GEN(MG_1,"MOVE -1 TO " +&
         MAP_VEC_NRTN(I%) + "-LEN" + MAP_GLS_DFL)
   CALL PUT_GEN(MG_1, "GO TO FIN-VAL-FLD-" + MAP_GLS_MAPA + ".")
   END DEF

 ! Validacion de Campos Indexados
 !
965
   DEF INTEGER GEN_FNC_VCSI
     CALL PUT_GEN(MG_B,"PERFORM VAL-" + MAP_VEC_NRTN(I%) )
     CALL PUT_GEN(MG_B," VARYING FRM-IFLD FROM 1 BY 1 UNTIL FRM-IFLD > " +&
          STR$(MAP_VEC_TIDX(I%)) )
     CALL PUT_GEN(MG_B,"     OR FRM-SUAR = FRM-SUAR-MAL" )
     CALL PUT_GEN(MG_B,"     OR FRM-SUAR = FRM-SUAR-CLR.")
     CALL PUT_GEN(MG_B,"IF FRM-SUAR = " +&
         "FRM-SUAR-MAL OR FRM-SUAR = FRM-SUAR-CLR" )
     CALL PUT_GEN(MG_1,"SUBTRACT 1 FROM FRM-IFLD")
     CALL PUT_GEN(MG_1,"MOVE -1 TO " + MAP_VEC_NRTN(I%) +&
         "-LEN" + MAP_GLS_DFL )
     CALL PUT_GEN(MG_1,"GO TO FIN-VAL-FLD-" + MAP_GLS_MAPA + ".")
   END DEF

970

   DEF INTEGER MAP_FNC_COD
   FOR I% = 1 TO MAP_TOT_CMPO
	IF MAP_VEC_TIPO(I%) = "COD" THEN
                MAP_VEC_VAUT(I%) = MAP_NUM_CODI 
		FOR J% = 1 TO MAP_TOT_CMPO
		  IF MAP_VEC_TIPO(J%) = "GLS" AND&
		     MAP_VEC_NOMB(J%) = MAP_VEC_NOMB(I%) THEN
			MAP_VEC_GLOS(I%) = J%
			J% = MAP_TOT_CMPO + 1
		  END IF
	 	NEXT J%
	ELSE
	IF MAP_VEC_TIPO(I%) = "IND" OR&
           MAP_VEC_TIPO(I%) = "MSC" THEN
                MAP_VEC_VAUT(I%) = MAP_NUM_MISC
		FOR J% = 1 TO MAP_TOT_CMPO
		  IF MAP_VEC_TIPO(J%) = "GLS" AND&
		     MAP_VEC_NOMB(J%) = MAP_VEC_NOMB(I%) THEN
			MAP_VEC_GLOS(I%) = J%
			J% = MAP_TOT_CMPO + 1
		  END IF
	 	NEXT J%
	END IF
	END IF
   NEXT I%
   END DEF

   DEF INTEGER MAP_FNC_GRCR
        RCR::RCR_COD_RECO = MAP_VEC_REGI(I%) + "-" +&
		MAP_VEC_TIPO(I%) + "-" + MAP_VEC_NOMB(I%)
        FIO_CMND = "GET_KEY             "
        CALL "GNSFIORCR" BY REF (FIO_CMND)
   END DEF

   DEF INTEGER MAP_FNC_GDMN
        DMN::DMN_COD_DOMI = RCR::RCR_COD_DOMI
        FIO_CMND = "GET_KEY             "
        CALL "GNSFIODMN" BY REF (FIO_CMND)
   END DEF

   DEF INTEGER MAP_FNC_VCOD
        CALL PUT_GEN(MG_N,'*% SIS = "' + DMN::DMN_COD_SIST + '"')
        CALL PUT_GEN(MG_N,'*% TAB = "' + LEFT$(DMN::DMN_COD_TABL,3) + '"')
        CALL PUT_GEN(MG_N,'*% FLD = "' + MAP_VEC_NRTN(I%) + '"')
        CALL PUT_GEN(MG_N,'*% BUF = "' + MAP_GLS_MAPA + '-FLD"')
        CALL PUT_GEN(MG_N,'*% GLS = "' + MAP_VEC_NRTN(MAP_VEC_GLOS(I%)) + '"')
        CALL PUT_GEN(MG_N,'*% TIENE_GLOSA = ' + MAP_GLS_GCOD )
        CALL PUT_GEN(MG_N,"*% INCLUDE '" + MAP_GLS_VCOD + "'")
   END DEF

   DEF INTEGER MAP_FNC_GCOD
        CALL PUT_GEN(MG_N,"*% INCLUDE '" + MAP_GLS_GCOD + "'")
   END DEF

   DEF INTEGER MAP_FNC_VIND
        CALL PUT_GEN(MG_N,'*% SIS = "' + DMN::DMN_COD_SIST + '"')
 !!! ISP
 !!!        CALL PUT_GEN(MG_N,'*% MSC = "' + DMN::DMN_COD_TABL + '"')
        CALL PUT_GEN(MG_N,'*% TAB = "' + DMN::DMN_COD_TABL + '"')
        CALL PUT_GEN(MG_N,'*% FLD = "' + MAP_VEC_NRTN(I%) + '"')
        CALL PUT_GEN(MG_N,'*% BUF = "' + MAP_GLS_MAPA + '-FLD"')
        CALL PUT_GEN(MG_N,'*% GLS = "' + MAP_VEC_NRTN(MAP_VEC_GLOS(I%)) + '"' )
        CALL PUT_GEN(MG_N,'*% TIENE_GLOSA = ' + MAP_GLS_GIND )
        CALL PUT_GEN(MG_N,"*% INCLUDE '" + MAP_GLS_VIND + "'")
   END DEF

   DEF INTEGER MAP_FNC_GIND
        CALL PUT_GEN(MG_N,"*% INCLUDE '" + MAP_GLS_GIND + "'")
   END DEF

   DEF INTEGER MAP_FNC_BUS
	FOR I% = 1 TO MAP_TOT_CMPO
		IF MAP_VEC_BUS(I%) = MAP_IND_IDC THEN
			FOR J% = 1 TO MAP_TOT_CMPO
				IF MAP_VEC_NOMB(I%) = MAP_VEC_NOMB(J%) AND&
				   MAP_VEC_TIPO(J%) = "VRF" THEN
				      MAP_VEC_IOV(J%) = MAP_IND_IDC
				END IF
			NEXT J%
		END IF
	NEXT I%
   END DEF

 !!!   FUNCIONES MODULO DE MANEJO
 !!!   ==========================

   DEF INTEGER GEN_PUT_ALL
   CALL PUT_GEN(MG_C,"* " + MAP_GLS_IDEN)
   CALL PUT_GEN(MG_N,'*% RWI = "' + MAP_GLS_MAPA + '-FLD' + '"')
   CALL PUT_GEN(MG_A,"PUT-ALL-" + MAP_GLS_MAPA + " SECTION.")
   CALL PUT_GEN(MG_A,"INI-PUT-ALL-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_N,"*% INCLUDE INI_PUT_ALL_" + MAP_GLS_MAPA +MAP_GLS_PBM)

   FOR I% = 1 TO MAP_TOT_FILE
      CALL PUT_GEN(MG_B,"PERFORM PUT-" + MAP_VEC_FIL(I%) + "-" +&
                      MAP_GLS_MAPA + ".")
 !JSS
      PRINT #MAP_CNL_FINF,'% RG' + STR$(I%) + ' = "' + MAP_VEC_FIL(I%) + '"'

   NEXT I%
 !JSS
      PRINT #MAP_CNL_FINF,'% TRG = ' + STR$(MAP_TOT_FILE)

   FOR I% = 1 TO MAP_TOT_CMPO
	IF MAP_VEC_VAUT(I%) <> MAP_CTE_NOT THEN
            MAP_NUM_FNC = MAP_FNC_GRCR
            IF FIO_STAT = FIO_STAT_OKS THEN
                MAP_NUM_FNC = MAP_FNC_GDMN
                IF FIO_STAT = FIO_STAT_OKS THEN
                   IF MAP_VEC_GLOS(I%) > 0 THEN
                       IF MAP_VEC_VAUT(I%) = MAP_NUM_CODI THEN
                           IF DMN::DMN_GLS_BUSQ <= " " OR &
			      DMN::DMN_GLS_BUSQ  = "BUSTAB" THEN
                               MAP_GLS_VCOD = 'BUSTAB'
			       BUSTAB$ = "TRUE"
                           ELSE
                               MAP_GLS_VCOD = DMN::DMN_GLS_BUSQ
			       IF MAP_GLS_VCOD = "BUSOFI" THEN
					BUSOFI$ = "TRUE"
			       ELSE
			       IF MAP_GLS_VCOD = "BUSUSR" THEN
					BUSUSR$ = "TRUE"
			       END IF
			       END IF
                           END IF
                           MAP_GLS_GCOD = 'TRUE'
                           MAP_NUM_FNC = MAP_FNC_VCOD
                       ELSE
                       IF MAP_VEC_VAUT(I%) = MAP_NUM_MISC THEN
                           IF DMN::DMN_GLS_BUSQ <= " " OR &
                              DMN::DMN_GLS_BUSQ  = "BUSMSC" THEN
                               MAP_GLS_VIND = 'BUSMSC'
			       BUSMSC$ = "TRUE"
                           ELSE
                               MAP_GLS_VIND = DMN::DMN_GLS_BUSQ 
			       IF MAP_GLS_VIND = "BUSOFI" THEN
					BUSOFI$ = "TRUE"
			       ELSE
			       IF MAP_GLS_VIND = "BUSUSR" THEN
					BUSUSR$ = "TRUE"
			       END IF
			       END IF
                           END IF
                           MAP_GLS_GIND = 'TRUE'
                           MAP_NUM_FNC = MAP_FNC_VIND
                       END IF
                       END IF
                  END IF
                END IF
            END IF
        END IF
   NEXT I%
   CALL PUT_GEN(MG_N,"*% INCLUDE FIN_PUT_ALL_" + MAP_GLS_MAPA +MAP_GLS_PBM )
   CALL PUT_GEN(MG_A,"FIN-PUT-ALL-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF

   DEF INTEGER GEN_PUT_REG
   FOR I% = 1 TO MAP_TOT_FILE
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"PUT-" + MAP_VEC_FIL(I%) + "-" + MAP_GLS_MAPA +&
                        " SECTION.")
   CALL PUT_GEN(MG_A,"INI-PUT-" + MAP_VEC_FIL(I%) + "-" + MAP_GLS_MAPA +".")
   CALL PUT_GEN(MG_N,"*% INCLUDE INI_PUT_" + MAP_VEC_FIL(I%) +&
         "_" + MAP_GLS_MAPA + MAP_GLS_PBM )

  CALL PUT_GEN(MG_B,"IF PGM-STAT-" + MAP_VEC_FIL(I%) + "-NUL")
  CALL PUT_GEN(MG_B,"    GO TO FIN-PUT-" + MAP_VEC_FIL(I%) +&
			"-" + MAP_GLS_MAPA + ".")
  CALL PUT_GEN(MG_B,"IF NOT PGM-STAT-" + MAP_VEC_FIL(I%) + "-OKS")
  CALL PUT_GEN(MG_B,"    PERFORM CLR-" + MAP_VEC_FIL(I%) + "-" + MAP_GLS_MAPA)
  CALL PUT_GEN(MG_B,"    GO TO FIN-PUT-" + MAP_VEC_FIL(I%) +&
			"-" + MAP_GLS_MAPA + ".")
      FOR J% = 1 TO MAP_TOT_CMPO
      IF MAP_VEC_FIL(I%) = MAP_VEC_REGI(J%) AND &
         MAP_VEC_MOVE(J%) = MAP_CTE_YES   THEN
         IF MAP_VEC_TIDX(J%) > 1 THEN
            CALL PUT_GEN(MG_C,"*")
            CALL PUT_GEN(MG_C,&
            "*    CAMPO INDEXADO   " + MAP_VEC_NRTN(J%) )
            FOR M% = 1 TO MAP_VEC_TIDX(J%)
            CALL PUT_GEN(MG_B,"MOVE " +&
            MAP_VEC_NRTN(J%) + " IN " +&
            MAP_VEC_FIL(I%) + MAP_GLS_VIX(M%) +&
            " TO " + MAP_VEC_NRTN(J%) +&
            MAP_GLS_DFL + MAP_GLS_VIX(M%) + "." )
            NEXT M%
         ELSE
            CALL PUT_GEN(MG_B,"MOVE " +&
            MAP_VEC_NRTN(J%) + " IN " +&
            MAP_VEC_FIL(I%) +&
            " TO " + MAP_VEC_NRTN(J%) + MAP_GLS_DFL + "." )
         END IF
      END IF
      NEXT J%
   CALL PUT_GEN(MG_N,"*% INCLUDE FIN_PUT_" + MAP_VEC_FIL(I%) +&
         "_" + MAP_GLS_MAPA + MAP_GLS_PBM )
   CALL PUT_GEN(MG_A,"FIN-PUT-" + MAP_VEC_FIL(I%) + "-" +&
                  MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   NEXT I%
   END DEF

   DEF INTEGER GEN_RET_ALL
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"RET-ALL-" + MAP_GLS_MAPA + " SECTION.")
   CALL PUT_GEN(MG_A,"INI-RET-ALL-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_N,"*% INCLUDE INI_RET_ALL_" +MAP_GLS_MAPA+ MAP_GLS_PBM )
   CALL PUT_GEN(MG_B,"PERFORM KEY-ALL-" + MAP_GLS_MAPA + ".")
   FOR I% = 1 TO MAP_TOT_FILE
        CALL PUT_GEN(MG_B,"PERFORM RET-"+MAP_VEC_FIL(I%)+"-" +&
                  MAP_GLS_MAPA + ".")
   NEXT I%
   CALL PUT_GEN(MG_N,"*% INCLUDE FIN_RET_ALL_" + MAP_GLS_MAPA+MAP_GLS_PBM )
   CALL PUT_GEN(MG_A,"FIN-RET-ALL-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF

   DEF INTEGER GEN_RET_REG
   FOR I% = 1 TO MAP_TOT_FILE
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"RET-" + MAP_VEC_FIL(I%) +&
      "-" + MAP_GLS_MAPA + " SECTION.")
   CALL PUT_GEN(MG_A,"INI-RET-" +&
         MAP_VEC_FIL(I%) + "-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_N,"*% INCLUDE INI_RET_" + MAP_VEC_FIL(I%) +&
         "_" + MAP_GLS_MAPA + MAP_GLS_PBM )
      FOR J% = 1 TO MAP_TOT_CMPO
      IF MAP_VEC_FIL(I%)  = MAP_VEC_REGI(J%) AND &
         MAP_VEC_MOVE(J%) = MAP_CTE_YES     AND &
         MAP_VEC_TFLD(J%) = MAP_IND_FLD     THEN
         IF MAP_VEC_TIDX(J%) > 1 THEN
            CALL PUT_GEN(MG_C,"*")
            CALL PUT_GEN(MG_C,&
            "*    CAMPO INDEXADO   " + MAP_VEC_NRTN(J%) )
            FOR M% = 1 TO MAP_VEC_TIDX(J%)
            CALL PUT_GEN(MG_B,"MOVE " +&
            MAP_VEC_NRTN(J%) +&
            MAP_GLS_DFL + MAP_GLS_VIX(M%) + " TO " +&
              MAP_VEC_NRTN(J%) + " IN " +&
            MAP_VEC_FIL(I%) + MAP_GLS_VIX(M%) + "." )
            NEXT M%
         ELSE
            CALL PUT_GEN(MG_B,"MOVE " +&
            MAP_VEC_NRTN(J%) + MAP_GLS_DFL + " TO " +&
              MAP_VEC_NRTN(J%) + " IN " +&
            MAP_VEC_FIL(I%) + "." )
         END IF
      END IF
      NEXT J%
   CALL PUT_GEN(MG_N,"*% INCLUDE FIN_RET_" + MAP_VEC_FIL(I%) +&
         "_" + MAP_GLS_MAPA + MAP_GLS_PBM )
   CALL PUT_GEN(MG_A,"FIN-RET-" + MAP_VEC_FIL(I%) + "-" +&
                  MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   NEXT I%
   END DEF

   DEF INTEGER GEN_KEY_ALL
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"KEY-ALL-" + MAP_GLS_MAPA + " SECTION.")
   CALL PUT_GEN(MG_A,"INI-KEY-ALL-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_N,"*% INCLUDE INI_KEY_ALL_" + MAP_GLS_MAPA+MAP_GLS_PBM )
   FOR I% = 1 TO MAP_TOT_FILE
      CALL PUT_GEN(MG_B,"PERFORM KEY-" + MAP_VEC_FIL(I%) + "-" +&
         MAP_GLS_MAPA + ".")
   NEXT I%
   CALL PUT_GEN(MG_N,"*% INCLUDE FIN_KEY_ALL_" + MAP_GLS_MAPA+MAP_GLS_PBM )
   CALL PUT_GEN(MG_A,"FIN-KEY-ALL-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF

   DEF INTEGER GEN_KEY_REG
   FOR I% = 1 TO MAP_TOT_FILE
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"KEY-" + MAP_VEC_FIL(I%) + "-" + MAP_GLS_MAPA +&
                  " SECTION.")
   CALL PUT_GEN(MG_A,"INI-KEY-" + MAP_VEC_FIL(I%) + "-" +&
                  MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_N,"*% INCLUDE INI_KEY_" + MAP_VEC_FIL(I%) +&
   "_" + MAP_GLS_MAPA + MAP_GLS_PBM )
   FOR J% = 1 TO MAP_TOT_CMPO
   IF  MAP_VEC_FIL(I%)  =  MAP_VEC_REGI(J%)   AND &
       MAP_VEC_TFLD(J%) <> MAP_IND_FLD   THEN
      IF MAP_VEC_MOVE(J%) = MAP_CTE_YES THEN
         IF MAP_VEC_TIDX(J%) > 1 THEN
            FOR M% = 1 TO MAP_VEC_TIDX(J%)
            CALL PUT_GEN(MG_B,"MOVE "   +&
            MAP_VEC_NRTN(J%)                +&
            MAP_GLS_DFL + MAP_GLS_VIX(M%) + " TO "      +&
            MAP_VEC_NRTN(J%)   + " IN " + MAP_VEC_FIL(I%)  +&
            MAP_GLS_VIX(M%) + "." )
            NEXT M%
         ELSE
            CALL PUT_GEN(MG_B,"MOVE "   +&
            MAP_VEC_NRTN(J%) + MAP_GLS_DFL + " TO "      +&
              MAP_VEC_NRTN(J%) + " IN "           +&
            MAP_VEC_FIL(I%) + "." )
         END IF
      END IF
   END IF
   NEXT J%
   CALL PUT_GEN(MG_N,"*% INCLUDE FIN_KEY_" + MAP_VEC_FIL(I%) +&
   "_" + MAP_GLS_MAPA + MAP_GLS_PBM )
   CALL PUT_GEN(MG_A,"FIN-KEY-" + MAP_VEC_FIL(I%) + "-" +&
         MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   NEXT I%
   END DEF

   DEF INTEGER GEN_CLR_ALL
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"SCR-CLRA-" + MAP_GLS_MAPA + " SECTION.")
   CALL PUT_GEN(MG_A,"INI-SCR-CLRA-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_N,"*% INCLUDE INI_SCR_CLRA_"+ MAP_GLS_MAPA+MAP_GLS_PBM )
   IF MAP_GLS_FOR = "FMS" THEN
	CALL PUT_GEN(MG_B,"MOVE FRM-CLR-ALL TO FRM-CMND.")
	CALL PUT_GEN(MG_B,"PERFORM GNS-PRO-FRM.")
   ELSE
	CALL PUT_GEN(MG_B,"PERFORM CLR-KEY-" + MAP_GLS_MAPA + ".")
	CALL PUT_GEN(MG_B,"PERFORM CLR-FLD-" + MAP_GLS_MAPA + ".")
   END IF
   CALL PUT_GEN(MG_N,"*% INCLUDE FIN_SCR_CLRA_" + MAP_GLS_MAPA+MAP_GLS_PBM )
   CALL PUT_GEN(MG_A,"FIN-SCR-CLRA-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF

   DEF INTEGER GEN_CLR_KEY
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"CLR-KEY-" + MAP_GLS_MAPA + " SECTION.")
   CALL PUT_GEN(MG_A,"INI-CLR-KEY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_N,"*% INCLUDE INI_CLR_KEY_" + MAP_GLS_MAPA+MAP_GLS_PBM )
   FOR I% = 1 TO MAP_TOT_CMPO
     IF MAP_VEC_SCLR(I%) = MAP_CTE_YES AND&
             MAP_VEC_TFLD(I%) <> MAP_IND_FLD THEN
      MAP_GLS_RED = ""
      MAP_AUX_VAL$ = "MOVE SPACES TO "
      IF MAP_VEC_NUME(I%) = MAP_CTE_YES THEN
         MAP_AUX_VAL$ = "MOVE ZEROES TO "
      END IF
 !!!      IF ( MAP_VEC_FECH(I%) = MAP_CTE_NOT OR&
 !!!           MAP_VEC_DSPL(I%) = MAP_CTE_YES ) THEN
 !!!         MAP_AUX_VAL$ = "MOVE" + MAP_VEC_FFEC(MAP_VEC_FECH(I%)) + "TO "
 !!!      END IF
      IF MAP_VEC_TIDX(I%) > 1 THEN
                      FOR ZZ% = 1 TO MAP_VEC_TIDX(I%)
         CALL PUT_GEN(MG_B,MAP_AUX_VAL$ + MAP_VEC_NRTN(I%) +&
             MAP_GLS_DFL + MAP_GLS_VIX(ZZ%) + ".")
            NEXT ZZ%
      ELSE
         CALL PUT_GEN(MG_B,MAP_AUX_VAL$ + MAP_VEC_NRTN(I%) +&
             MAP_GLS_DFL + ".")
      END IF
   END IF
   NEXT I%
   CALL PUT_GEN(MG_N,"*% INCLUDE FIN_CLR_KEY_" + MAP_GLS_MAPA+MAP_GLS_PBM )
   CALL PUT_GEN(MG_A,"FIN-CLR-KEY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF

   DEF INTEGER GEN_CLR_FLD
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"CLR-FLD-" + MAP_GLS_MAPA + " SECTION.")
   CALL PUT_GEN(MG_A,"INI-CLR-FLD-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_N,"*% INCLUDE INI_CLR_FLD_" + MAP_GLS_MAPA+MAP_GLS_PBM )
   FOR J% = 1 TO MAP_TOT_CMPO
      IF MAP_VEC_REGI(J%)   =  "FRM" AND &
         MAP_VEC_SCLR(J%) =  MAP_CTE_YES AND&
         MAP_VEC_TFLD(J%)  =  MAP_IND_FLD THEN
         MAP_AUX_VAL$ = "MOVE SPACES TO "
         IF MAP_VEC_NUME(J%) = MAP_CTE_YES THEN
            MAP_AUX_VAL$ = "MOVE ZEROES TO "
         END IF
 !!!         IF NOT ( MAP_VEC_FECH(J%) = MAP_CTE_NOT OR&
 !!!              MAP_VEC_DSPL(J%) = MAP_CTE_YES ) THEN
 !!!            MAP_AUX_VAL$ = "MOVE" + MAP_VEC_FFEC(MAP_VEC_FECH(J%)) + "TO "
 !!!         END IF
         IF MAP_VEC_TIDX(J%) > 1 THEN
                         FOR ZZ% = 1 TO MAP_VEC_TIDX(J%)
            CALL PUT_GEN(MG_B,MAP_AUX_VAL$ +&
              MAP_VEC_NRTN(J%) +&
              MAP_GLS_DFL + MAP_GLS_VIX(ZZ%) + ".")
               NEXT ZZ%
         ELSE
            CALL PUT_GEN(MG_B,MAP_AUX_VAL$ +&
            MAP_VEC_NRTN(J%) + MAP_GLS_DFL + ".")
         END IF
      END IF
      NEXT J%
   FOR I% = 1 TO MAP_TOT_FILE
        CALL PUT_GEN(MG_B,"PERFORM CLR-" + MAP_VEC_FIL(I%) + "-" +&
                  MAP_GLS_MAPA + ".")
   NEXT I%
   CALL PUT_GEN(MG_N,"*% INCLUDE FIN_CLR_FLD_" + MAP_GLS_MAPA+MAP_GLS_PBM )
   CALL PUT_GEN(MG_A,"FIN-CLR-FLD-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF

   DEF INTEGER GEN_CLR_FLS
   FOR I% = 1 TO MAP_TOT_FILE
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"CLR-" + MAP_VEC_FIL(I%) + "-" + MAP_GLS_MAPA +&
                        " SECTION.")
   CALL PUT_GEN(MG_A,"INI-CLR-" + MAP_VEC_FIL(I%) + "-"+MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_N,"*% INCLUDE INI_CLR_" + MAP_VEC_FIL(I%) +&
         "_" + MAP_GLS_MAPA + MAP_GLS_PBM )
   FOR J% = 1 TO MAP_TOT_CMPO
      IF ( MAP_VEC_FIL(I%)   =  MAP_VEC_REGI(J%) AND &
           MAP_VEC_REGI(J%)   <> "FRM" ) AND &
           MAP_VEC_SCLR(J%) =  MAP_CTE_YES AND&
                MAP_VEC_TFLD(J%)  =  MAP_IND_FLD THEN
         MAP_AUX_VAL$ = "MOVE SPACES TO "
         IF MAP_VEC_NUME(J%) = MAP_CTE_YES THEN
            MAP_AUX_VAL$ = "MOVE ZEROES TO "
         END IF
 !!!         IF NOT (MAP_VEC_FECH(J%) = MAP_CTE_NOT OR&
 !!!                 MAP_VEC_DSPL(J%) = MAP_CTE_YES ) THEN
 !!!             MAP_AUX_VAL$ = "MOVE" + MAP_VEC_FFEC(MAP_VEC_FECH(J%)) + "TO "
 !!!         END IF
         IF MAP_VEC_TIDX(J%) > 1 THEN
                         FOR ZZ% = 1 TO MAP_VEC_TIDX(J%)
            CALL PUT_GEN(MG_B,MAP_AUX_VAL$ +&
              MAP_VEC_NRTN(J%) +&
              MAP_GLS_DFL + MAP_GLS_VIX(ZZ%) + ".")
               NEXT ZZ%
         ELSE
            CALL PUT_GEN(MG_B,MAP_AUX_VAL$ +&
            MAP_VEC_NRTN(J%) + MAP_GLS_DFL + ".")
         END IF
      END IF
      NEXT J%
   CALL PUT_GEN(MG_N,"*% INCLUDE FIN_CLR_" + MAP_VEC_FIL(I%) +&
         "_" + MAP_GLS_MAPA + MAP_GLS_PBM )
   CALL PUT_GEN(MG_A,"FIN-CLR-" + MAP_VEC_FIL(I%) + "-"+MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   NEXT I%
   END DEF

   DEF INTEGER GEN_FST_KEY
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"FST-KEY-" + MAP_GLS_MAPA + " SECTION.")
   CALL PUT_GEN(MG_A,"INI-FST-KEY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_N,"*% INCLUDE INI_FST_KEY_" + MAP_GLS_MAPA+MAP_GLS_PBM )
   I% = 1
   WHILE I% <= MAP_TOT_CMPO
      IF MAP_VEC_PROT(I%) = MAP_CTE_YES AND&
         MAP_VEC_PKEY(I%) = MAP_CTE_YES THEN
         MAP_GLS_IDX$ = "MOVE -1 TO " +&
               MAP_VEC_NRTN(I%) + "-LEN" + MAP_GLS_DFL 
 !!!         IF MAP_VEC_TIDX(I%) > 1 THEN
 !!!              FOR ZZ% = 1 TO MAP_VEC_TIDX(I%)
 !!!                  CALL PUT_GEN(MG_B,MAP_GLS_IDX$ +&
 !!!                  MAP_GLS_DFL + MAP_GLS_VIX(ZZ%) + ".")
 !!!              NEXT ZZ%
 !!!         ELSE
            CALL PUT_GEN(MG_B,MAP_GLS_IDX$ + ".")
 !!!         END IF
         I% = MAP_TOT_CMPO + 1
      ELSE
         I% = I% + 1
      END IF
            NEXT
   CALL PUT_GEN(MG_N,"*% INCLUDE FIN_FST_KEY_" + MAP_GLS_MAPA+MAP_GLS_PBM )
   CALL PUT_GEN(MG_A,"FIN-FST-KEY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF

   DEF INTEGER GEN_FST_FLD
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"FST-FLD-" + MAP_GLS_MAPA + " SECTION.")
   CALL PUT_GEN(MG_A,"INI-FST-FLD-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_N,"*% INCLUDE INI_FST_FLD_" + MAP_GLS_MAPA+MAP_GLS_PBM )
   I% = 1
   WHILE I% <= MAP_TOT_CMPO
      IF MAP_VEC_PROT(I%) =  MAP_CTE_YES AND&
         MAP_VEC_PFLD(I%) = MAP_CTE_YES THEN
 !!!          IF MAP_VEC_TIDX(I%) > 1 THEN
 !!!         CALL PUT_GEN(MG_B,"MOVE -1 TO " +&
 !!!         MAP_VEC_NRTN(I%) + "-LEN" + MAP_GLS_DFL + "(1).")
 !!!          ELSE
         CALL PUT_GEN(MG_B,"MOVE -1 TO " +&
          MAP_VEC_NRTN(I%) + "-LEN" + MAP_GLS_DFL + ".")
 !!!          END IF
          I% = MAP_TOT_CMPO + 1
      ELSE
         I% = I% + 1
      END IF
   NEXT
   CALL PUT_GEN(MG_N,"*% INCLUDE FIN_FST_FLD_" + MAP_GLS_MAPA+MAP_GLS_PBM )
   CALL PUT_GEN(MG_A,"FIN-FST-FLD-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF

   DEF INTEGER GEN_PRO_KEY
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"PRO-KEY-" + MAP_GLS_MAPA + " SECTION.")
   CALL PUT_GEN(MG_A,"INI-PRO-KEY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_N,"*% INCLUDE INI_PRO_KEY_" + MAP_GLS_MAPA+MAP_GLS_PBM )
   FOR J% = 1 TO MAP_TOT_CMPO
      IF MAP_VEC_TFLD(J%) <>  MAP_IND_FLD AND&
         MAP_VEC_REGI(J%) =   "FRM"       AND &
         MAP_VEC_PROT(J%) =   MAP_CTE_YES THEN
      MAP_GLS_IDX$ = "MOVE " + MAP_GLS_BYA(MAP_VEC_BYA(J%)) +&
         " TO " + MAP_VEC_NRTN(J%) + "-ATR" + MAP_GLS_DFL
 !!!      IF MAP_VEC_TIDX(J%) > 1 THEN
 !!!                  FOR ZZ% = 1 TO MAP_VEC_TIDX(J%)
 !!!             CALL PUT_GEN(MG_B,MAP_GLS_IDX$ + MAP_GLS_VIX(ZZ%) + ".")
 !!!         NEXT ZZ%
 !!!      ELSE
         CALL PUT_GEN(MG_B,MAP_GLS_IDX$ + ".")
 !!!      END IF
       END IF
   NEXT J%
   CALL PUT_GEN(MG_B,"PERFORM PRO-IKY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"PERFORM PRO-AKY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"PERFORM PRO-MKY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_N,"*% INCLUDE FIN_PRO_KEY_" + MAP_GLS_MAPA+MAP_GLS_PBM )
   CALL PUT_GEN(MG_A,"FIN-PRO-KEY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF
   
   DEF INTEGER GEN_PRO_IKY
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"PRO-IKY-" + MAP_GLS_MAPA + " SECTION.")
   CALL PUT_GEN(MG_A,"INI-PRO-IKY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_N,"*% INCLUDE INI_PRO_IKY_" + MAP_GLS_MAPA+MAP_GLS_PBM )
   I% = 1
   FOR I% = 1 TO MAP_TOT_CMPO
   IF MAP_VEC_TFLD(I%) = MAP_IND_IKY AND&
      MAP_VEC_PROT(I%) = MAP_CTE_YES THEN
      MAP_GLS_IDX$ = "MOVE " + MAP_GLS_BYA(MAP_VEC_BYA(I%)) +&
            " TO " + MAP_VEC_NRTN(I%) + "-ATR" + MAP_GLS_DFL 
 !!!      IF MAP_VEC_TIDX(I%) > 1 THEN
 !!!           FOR ZZ% = 1 TO MAP_VEC_TIDX(I%)
 !!!             CALL PUT_GEN(MG_B,MAP_GLS_IDX$ +&
 !!!             MAP_GLS_DFL + MAP_GLS_VIX(ZZ%) + ".")
 !!!           NEXT ZZ%
 !!!      ELSE
         CALL PUT_GEN(MG_B,MAP_GLS_IDX$ + ".")
 !!!      END IF
   END IF
   NEXT I%
   CALL PUT_GEN(MG_N,"*% INCLUDE FIN_PRO_IKY_" + MAP_GLS_MAPA+MAP_GLS_PBM )
   CALL PUT_GEN(MG_A,"FIN-PRO-IKY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF
   
   DEF INTEGER GEN_PRO_MKY
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"PRO-MKY-" + MAP_GLS_MAPA + " SECTION.")
   CALL PUT_GEN(MG_A,"INI-PRO-MKY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_N,"*% INCLUDE INI_PRO_MKY_" + MAP_GLS_MAPA+MAP_GLS_PBM )
   FOR I% = 1 TO MAP_TOT_CMPO
   IF MAP_VEC_TFLD(I%) = MAP_IND_MKY AND&
      MAP_VEC_PROT(I%) = MAP_CTE_YES THEN
          MAP_GLS_IDX$ = "MOVE " + MAP_GLS_BYA(MAP_VEC_BYA(I%)) +&
              " TO " + MAP_VEC_NRTN(I%) + "-ATR" + MAP_GLS_DFL 
 !!!          IF MAP_VEC_TIDX(I%) > 1 THEN
 !!!              FOR ZZ% = 1 TO MAP_VEC_TIDX(I%)
 !!!                  CALL PUT_GEN(MG_B,MAP_GLS_IDX$ +&
 !!!                  MAP_GLS_DFL + MAP_GLS_VIX(ZZ%) + "." )
 !!!              NEXT ZZ%
 !!!          ELSE
              CALL PUT_GEN(MG_B,MAP_GLS_IDX$ + ".")
 !!!          END IF
   END IF
   NEXT I%
   CALL PUT_GEN(MG_N,"*% INCLUDE FIN_PRO_MKY_" + MAP_GLS_MAPA+MAP_GLS_PBM )
   CALL PUT_GEN(MG_A,"FIN-PRO-MKY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF

   DEF INTEGER GEN_PRO_AKY
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"PRO-AKY-" + MAP_GLS_MAPA + " SECTION.")
   CALL PUT_GEN(MG_A,"INI-PRO-AKY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_N,"*% INCLUDE INI_PRO_AKY_" + MAP_GLS_MAPA+MAP_GLS_PBM )
   FOR I% = 1 TO MAP_TOT_CMPO
   IF MAP_VEC_TFLD(I%) = MAP_IND_AKY AND&
      MAP_VEC_PROT(I%) = MAP_CTE_YES THEN
        MAP_GLS_IDX$ = "MOVE " + MAP_GLS_BYA(MAP_VEC_BYA(I%)) +&
         " TO " + MAP_VEC_NRTN(I%) + "-ATR" + MAP_GLS_DFL 
 !!!        IF MAP_VEC_TIDX(I%) > 1 THEN
 !!!              FOR ZZ% = 1 TO MAP_VEC_TIDX(I%)
 !!!                 CALL PUT_GEN(MG_B,MAP_GLS_IDX$ +&
 !!!                 MAP_GLS_DFL + MAP_GLS_VIX(ZZ%) + "." )
 !!!              NEXT ZZ%
 !!!        ELSE
              CALL PUT_GEN(MG_B,MAP_GLS_IDX$ + ".")
 !!!        END IF
   END IF
   NEXT I%
   CALL PUT_GEN(MG_N,"*% INCLUDE FIN_PRO_AKY_" + MAP_GLS_MAPA+MAP_GLS_PBM )
   CALL PUT_GEN(MG_A,"FIN-PRO-AKY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF
   
   DEF INTEGER GEN_PRO_FLD
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"PRO-FLD-" + MAP_GLS_MAPA + " SECTION.")
   CALL PUT_GEN(MG_A,"INI-PRO-FLD-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_N,"*% INCLUDE INI_PRO_FLD_" + MAP_GLS_MAPA+MAP_GLS_PBM )
   FOR J% = 1 TO MAP_TOT_CMPO
   IF MAP_VEC_TFLD(J%) = MAP_IND_FLD AND &
        MAP_VEC_REGI(J%) = "FRM"	AND &
        MAP_VEC_PROT(J%) = MAP_CTE_YES THEN
           MAP_GLS_IDX$ = "MOVE " + MAP_GLS_BYA(MAP_VEC_BYA(J%)) +&
           " TO " + MAP_VEC_NRTN(J%) + "-ATR" + MAP_GLS_DFL
 !!!           IF MAP_VEC_TIDX(J%) > 1 THEN
 !!!               FOR ZZ% = 1 TO MAP_VEC_TIDX(J%)
 !!!                  CALL PUT_GEN(MG_B,MAP_GLS_IDX$ + MAP_GLS_VIX(ZZ%) + ".")
 !!!               NEXT ZZ%
 !!!           ELSE
               CALL PUT_GEN(MG_B,MAP_GLS_IDX$ + ".")
 !!!           END IF
   END IF
   NEXT J%
   FOR I% = 1 TO MAP_TOT_FILE
        CALL PUT_GEN(MG_B,"PERFORM PRO-" + MAP_VEC_FIL(I%) + "-" +&
                  MAP_GLS_MAPA + ".")
   NEXT I%
   CALL PUT_GEN(MG_N,"*% INCLUDE FIN_PRO_FLD_" + MAP_GLS_MAPA+MAP_GLS_PBM )
   CALL PUT_GEN(MG_A,"FIN-PRO-FLD-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF
   
   DEF INTEGER GEN_PRO_FLS
   FOR I% = 1 TO MAP_TOT_FILE
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"PRO-" + MAP_VEC_FIL(I%) + "-" + MAP_GLS_MAPA +&
                        " SECTION.")
   CALL PUT_GEN(MG_A,"INI-PRO-" + MAP_VEC_FIL(I%) + "-"+MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_N,"*% INCLUDE INI_PRO_" + MAP_VEC_FIL(I%) +&
         "_" + MAP_GLS_MAPA + MAP_GLS_PBM )
   FOR J% = 1 TO MAP_TOT_CMPO
      IF MAP_VEC_TFLD(J%) = MAP_IND_FLD AND &
         MAP_VEC_FIL(I%)  = MAP_VEC_REGI(J%) AND &
         MAP_VEC_PROT(J%) = MAP_CTE_YES THEN
            MAP_GLS_IDX$ = "MOVE " + MAP_GLS_BYA(MAP_VEC_BYA(J%)) +&
            " TO " + MAP_VEC_NRTN(J%) + "-ATR" + MAP_GLS_DFL
 !!!            IF MAP_VEC_TIDX(J%) > 1 THEN
 !!!                FOR ZZ% = 1 TO MAP_VEC_TIDX(J%)
 !!!                    CALL PUT_GEN(MG_B,MAP_GLS_IDX$ + MAP_GLS_VIX(ZZ%) + ".")
 !!!                NEXT ZZ%
 !!!            ELSE
                CALL PUT_GEN(MG_B,MAP_GLS_IDX$ + ".")
 !!!            END IF
       END IF
   NEXT J%
   CALL PUT_GEN(MG_N,"*% INCLUDE FIN_PRO_" + MAP_VEC_FIL(I%) +&
         "_" + MAP_GLS_MAPA + MAP_GLS_PBM )
   CALL PUT_GEN(MG_A,"FIN-PRO-" + MAP_VEC_FIL(I%) + "-"+MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   NEXT I%
   END DEF
   
   DEF INTEGER GEN_UNP_KEY
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"UNP-KEY-" + MAP_GLS_MAPA + " SECTION.")
   CALL PUT_GEN(MG_A,"INI-UNP-KEY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_N,"*% INCLUDE INI_UNP_KEY_" + MAP_GLS_MAPA+MAP_GLS_PBM )
   FOR J% = 1 TO MAP_TOT_CMPO
      IF MAP_VEC_TFLD(J%) <> MAP_IND_FLD AND&
         MAP_VEC_REGI(J%)  = "FRM"	 AND &
         MAP_VEC_PROT(J%) = MAP_CTE_YES  THEN
             MAP_GLS_IDX$ = "MOVE " + MAP_GLS_BYA(MAP_VEC_BYA(J%) + 1) +&
             " TO " + MAP_VEC_NRTN(J%) + "-ATR" + MAP_GLS_DFL
 !!!             IF MAP_VEC_TIDX(J%) > 1 THEN
 !!!                FOR ZZ% = 1 TO MAP_VEC_TIDX(J%)
 !!!                  CALL PUT_GEN(MG_B,MAP_GLS_IDX$ + MAP_GLS_VIX(ZZ%) + ".")
 !!!                NEXT ZZ%
 !!!             ELSE
                CALL PUT_GEN(MG_B,MAP_GLS_IDX$ + ".")
 !!!             END IF
       END IF
   NEXT J%
   CALL PUT_GEN(MG_B,"PERFORM UNP-IKY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"PERFORM UNP-AKY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"PERFORM UNP-MKY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_N,"*% INCLUDE FIN_UNP_KEY_" + MAP_GLS_MAPA+MAP_GLS_PBM )
   CALL PUT_GEN(MG_A,"FIN-UNP-KEY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF
   
   DEF INTEGER GEN_UNP_IKY
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"UNP-IKY-" + MAP_GLS_MAPA + " SECTION.")
   CALL PUT_GEN(MG_A,"INI-UNP-IKY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_N,"*% INCLUDE INI_UNP_IKY_" + MAP_GLS_MAPA+MAP_GLS_PBM )
   FOR I% = 1 TO MAP_TOT_CMPO
   IF MAP_VEC_TFLD(I%) = MAP_IND_IKY AND&
      MAP_VEC_PROT(I%) = MAP_CTE_YES THEN
          MAP_GLS_IDX$ = "MOVE " + MAP_GLS_BYA(MAP_VEC_BYA(I%)+1) +&
          " TO " + MAP_VEC_NRTN(I%) + "-ATR" 
 !!!         IF MAP_VEC_TIDX(I%) > 1 THEN
 !!!             FOR ZZ% = 1 TO MAP_VEC_TIDX(I%)
 !!!                CALL PUT_GEN(MG_B,MAP_GLS_IDX$ +&
 !!!                MAP_GLS_DFL + MAP_GLS_VIX(ZZ%) + ".")
 !!!             NEXT ZZ%
 !!!         ELSE
             CALL PUT_GEN(MG_B,MAP_GLS_IDX$ + ".")
 !!!         END IF
   END IF
   NEXT I%
   CALL PUT_GEN(MG_N,"*% INCLUDE FIN_UNP_IKY_" + MAP_GLS_MAPA+MAP_GLS_PBM )
   CALL PUT_GEN(MG_A,"FIN-UNP-IKY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF
   
   DEF INTEGER GEN_UNP_MKY
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"UNP-MKY-" + MAP_GLS_MAPA + " SECTION.")
   CALL PUT_GEN(MG_A,"INI-UNP-MKY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_N,"*% INCLUDE INI_UNP_MKY_" + MAP_GLS_MAPA+MAP_GLS_PBM )
   FOR I% = 1 TO MAP_TOT_CMPO
   IF MAP_VEC_TFLD(I%) = MAP_IND_MKY AND&
      MAP_VEC_PROT(I%) = MAP_CTE_YES THEN
          MAP_GLS_IDX$ = "MOVE " + MAP_GLS_BYA(MAP_VEC_BYA(I%)+1) +&
          " TO " + MAP_VEC_NRTN(I%) + "-ATR"
 !!!          IF MAP_VEC_TIDX(I%) > 1 THEN
 !!!               FOR ZZ% = 1 TO MAP_VEC_TIDX(I%)
 !!!                   CALL PUT_GEN(MG_B,MAP_GLS_IDX$ +&
 !!!                   MAP_GLS_DFL + MAP_GLS_VIX(ZZ%) + ".")
 !!!               NEXT ZZ%
 !!!          ELSE
               CALL PUT_GEN(MG_B,MAP_GLS_IDX$ + ".")
 !!!          END IF
   END IF
   NEXT I%
   CALL PUT_GEN(MG_N,"*% INCLUDE FIN_UNP_MKY_" + MAP_GLS_MAPA+MAP_GLS_PBM )
   CALL PUT_GEN(MG_A,"FIN-UNP-MKY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF
   
   DEF INTEGER GEN_UNP_AKY
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"UNP-AKY-" + MAP_GLS_MAPA + " SECTION.")
   CALL PUT_GEN(MG_A,"INI-UNP-AKY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_N,"*% INCLUDE INI_UNP_AKY_" + MAP_GLS_MAPA+MAP_GLS_PBM )
   FOR I% = 1 TO MAP_TOT_CMPO
   IF MAP_VEC_TFLD(I%) = MAP_IND_AKY AND&
      MAP_VEC_PROT(I%) = MAP_CTE_YES THEN
            MAP_GLS_IDX$ = "MOVE " + MAP_GLS_BYA(MAP_VEC_BYA(I%)+1) +&
            " TO " + MAP_VEC_NRTN(I%) + "-ATR"
 !!!            IF MAP_VEC_TIDX(I%) > 1 THEN
 !!!                 FOR ZZ% = 1 TO MAP_VEC_TIDX(I%)
 !!!                     CALL PUT_GEN(MG_B,MAP_GLS_IDX$ +&
 !!!                     MAP_GLS_DFL + MAP_GLS_VIX(ZZ%) + "." )
 !!!                 NEXT ZZ%
 !!!            ELSE
                 CALL PUT_GEN(MG_B,MAP_GLS_IDX$ + ".")
 !!!            END IF
   END IF
   NEXT I%
   CALL PUT_GEN(MG_N,"*% INCLUDE FIN_UNP_AKY_" + MAP_GLS_MAPA+MAP_GLS_PBM )
   CALL PUT_GEN(MG_A,"FIN-UNP-AKY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF
   
   DEF INTEGER GEN_UNP_FLD
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"UNP-FLD-" + MAP_GLS_MAPA + " SECTION.")
   CALL PUT_GEN(MG_A,"INI-UNP-FLD-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_N,"*% INCLUDE INI_UNP_FLD_" + MAP_GLS_MAPA+MAP_GLS_PBM )
   FOR J% = 1 TO MAP_TOT_CMPO
      IF MAP_VEC_TFLD(J%) = MAP_IND_FLD	    AND&
         MAP_VEC_REGI(J%) = "FRM" 	    AND &
         MAP_VEC_PROT(J%) = MAP_CTE_YES THEN
      MAP_GLS_IDX$ = "MOVE " + MAP_GLS_BYA(MAP_VEC_BYA(J%) + 1) +&
         " TO " + MAP_VEC_NRTN(J%) + "-ATR" + MAP_GLS_DFL
 !!!      IF MAP_VEC_TIDX(J%) > 1 THEN
 !!!                  FOR ZZ% = 1 TO MAP_VEC_TIDX(J%)
 !!!             CALL PUT_GEN(MG_B,MAP_GLS_IDX$ + MAP_GLS_VIX(ZZ%) + ".")
 !!!         NEXT ZZ%
 !!!      ELSE
         CALL PUT_GEN(MG_B,MAP_GLS_IDX$ + ".")
 !!!      END IF
       END IF
   NEXT J%
   FOR I% = 1 TO MAP_TOT_FILE
        CALL PUT_GEN(MG_B,"PERFORM UNP-" + MAP_VEC_FIL(I%) + "-" +&
                  MAP_GLS_MAPA + ".")
   NEXT I%
   CALL PUT_GEN(MG_N,"*% INCLUDE FIN_UNP_FLD_" + MAP_GLS_MAPA+MAP_GLS_PBM )
   CALL PUT_GEN(MG_A,"FIN-UNP-FLD-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF
   
   DEF INTEGER GEN_UNP_FLS
   FOR I% = 1 TO MAP_TOT_FILE
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"UNP-" + MAP_VEC_FIL(I%) + "-" + MAP_GLS_MAPA +&
                        " SECTION.")
   CALL PUT_GEN(MG_A,"INI-UNP-" + MAP_VEC_FIL(I%) + "-"+MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_N,"*% INCLUDE INI_UNP_" + MAP_VEC_FIL(I%) +&
         "_" + MAP_GLS_MAPA + MAP_GLS_PBM )
   FOR J% = 1 TO MAP_TOT_CMPO
      IF MAP_VEC_TFLD(J%) = MAP_IND_FLD	    AND&
         MAP_VEC_FIL(I%)  = MAP_VEC_REGI(J%) AND &
         MAP_VEC_PROT(J%) = MAP_CTE_YES THEN
      MAP_GLS_IDX$ = "MOVE " + MAP_GLS_BYA(MAP_VEC_BYA(J%) + 1) +&
         " TO " + MAP_VEC_NRTN(J%) + "-ATR" + MAP_GLS_DFL
 !!!	      IF MAP_VEC_TIDX(J%) > 1 THEN
 !!!		  FOR ZZ% = 1 TO MAP_VEC_TIDX(J%)
 !!!		     CALL PUT_GEN(MG_B,MAP_GLS_IDX$ + MAP_GLS_VIX(ZZ%) + ".")
 !!!		  NEXT ZZ%
 !!!	      ELSE
		  CALL PUT_GEN(MG_B,MAP_GLS_IDX$ + ".")
 !!!	     END IF
	END IF
   NEXT J%
   CALL PUT_GEN(MG_N,"*% INCLUDE FIN_UNP_" + MAP_VEC_FIL(I%) +&
         "_" + MAP_GLS_MAPA + MAP_GLS_PBM )
   CALL PUT_GEN(MG_A,"FIN-UNP-" + MAP_VEC_FIL(I%) + "-"+MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   NEXT I%
   END DEF
   
   DEF INTEGER GEN_VAL_KEY
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"VAL-KEY-" + MAP_GLS_MAPA + " SECTION.")
   CALL PUT_GEN(MG_A,"INI-VAL-KEY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"PERFORM VAL-IKY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"PERFORM VAL-MKY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"PERFORM VAL-AKY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_A,"FIN-VAL-KEY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF
   
   DEF INTEGER GEN_VAL_IKY
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"VAL-IKY-" + MAP_GLS_MAPA + " SECTION.")
   CALL PUT_GEN(MG_A,"INI-VAL-IKY-" + MAP_GLS_MAPA + ".")
   FOR I% = 1 TO MAP_TOT_CMPO
 !!!   IF MAP_VEC_PROT(I%) = MAP_CTE_YES AND&
   IF MAP_VEC_VALI(I%) = MAP_CTE_YES AND&
      MAP_VEC_TFLD(I%) = MAP_IND_IKY THEN
      MAP_GLS_IDX$ = MAP_GLS_DFL 
      IF MAP_VEC_TIDX(I%) > 1 THEN
         CALL PUT_GEN(MG_B,"PERFORM VAL-" +&
            MAP_VEC_NRTN(I%) + " VARYING FRM-IFLD" )
         CALL PUT_GEN(MG_B,"     FROM 1 BY 1 " +&
            "UNTIL FRM-IFLD > " + STR$(MAP_VEC_TIDX(I%)) )
         CALL PUT_GEN(MG_B,&
            "     OR FRM-SUAR = FRM-SUAR-MAL" )
         CALL PUT_GEN(MG_B,&
            "     OR FRM-SUAR = FRM-SUAR-CLR." )
 !!!         MAP_GLS_IDX$ = "(FRM-IFLD)"
      ELSE
         CALL PUT_GEN(MG_B,"PERFORM VAL-" +&
            MAP_VEC_NRTN(I%) + "." )
      END IF
      CALL PUT_GEN(MG_B,"IF FRM-SUAR = FRM-SUAR-MAL" +&
         " OR FRM-SUAR = FRM-SUAR-CLR" )
      IF MAP_GLS_IDX$ = "(FRM-IFLD)" THEN
          CALL PUT_GEN(MG_1,"SUBTRACT 1 FROM FRM-IFLD")
      END IF
      CALL PUT_GEN(MG_1,"MOVE -1 TO " + MAP_VEC_NRTN(I%) +&
            "-LEN" + MAP_GLS_IDX$ )
      CALL PUT_GEN(MG_1,"GO TO FIN-VAL-IKY-" + MAP_GLS_MAPA + ".")
   END IF
   NEXT I%
   CALL PUT_GEN(MG_A,"FIN-VAL-IKY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF
   
   DEF INTEGER GEN_VAL_MKY
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"VAL-MKY-" + MAP_GLS_MAPA + " SECTION.")
   CALL PUT_GEN(MG_A,"INI-VAL-MKY-" + MAP_GLS_MAPA + ".")
   FOR I% = 1 TO MAP_TOT_CMPO
 !!!   IF MAP_VEC_PROT(I%) = MAP_CTE_NOT AND&
   IF MAP_VEC_VALI(I%) = MAP_CTE_YES AND&
      MAP_VEC_TFLD(I%) = MAP_IND_MKY THEN
      MAP_GLS_IDX$ = MAP_GLS_DFL 
      IF MAP_VEC_TIDX(I%) > 1 THEN
         CALL PUT_GEN(MG_B,"PERFORM VAL-" +&
            MAP_VEC_NRTN(I%) + " VARYING FRM-IFLD" )
         CALL PUT_GEN(MG_B,"     FROM 1 BY 1 " +&
            "UNTIL FRM-IFLD > " + STR$(MAP_VEC_TIDX(I%)) )
         CALL PUT_GEN(MG_B,&
            "     OR FRM-SUAR = FRM-SUAR-MAL")
         CALL PUT_GEN(MG_B,&
            "     OR FRM-SUAR = FRM-SUAR-CLR.")
 !!!         MAP_GLS_IDX$ = "(FRM-IFLD)"
      ELSE
         CALL PUT_GEN(MG_B,"PERFORM VAL-" +&
            MAP_VEC_NRTN(I%) + "." )
      END IF
      CALL PUT_GEN(MG_B,"IF FRM-SUAR = FRM-SUAR-MAL" +&
         " OR FRM-SUAR = FRM-SUAR-CLR")
      IF MAP_GLS_IDX$ = "(FRM-IFLD)" THEN
          CALL PUT_GEN(MG_1,"SUBTRACT 1 FROM FRM-IFLD")
      END IF
      CALL PUT_GEN(MG_1,"MOVE -1 TO " + MAP_VEC_NRTN(I%) +&
            "-LEN" + MAP_GLS_IDX$ )
      CALL PUT_GEN(MG_1,"GO TO FIN-VAL-MKY-" + MAP_GLS_MAPA + "." )
   END IF
   NEXT I%
   CALL PUT_GEN(MG_A,"FIN-VAL-MKY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF
   
   DEF INTEGER GEN_VAL_AKY
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"VAL-AKY-" + MAP_GLS_MAPA + " SECTION.")
   CALL PUT_GEN(MG_A,"INI-VAL-AKY-" + MAP_GLS_MAPA + ".")
   FOR I% = 1 TO MAP_TOT_CMPO
 !!!   IF MAP_VEC_PROT(I%) = MAP_CTE_NOT AND&
   IF MAP_VEC_VALI(I%) = MAP_CTE_YES AND&
      MAP_VEC_TFLD(I%) = MAP_IND_AKY THEN
      MAP_GLS_IDX$ = MAP_GLS_DFL 
      IF MAP_VEC_TIDX(I%) > 1 THEN
         CALL PUT_GEN(MG_B,"PERFORM VAL-" +&
            MAP_VEC_NRTN(I%) + " VARYING FRM-IFLD" )
         CALL PUT_GEN(MG_B,"     FROM 1 BY 1 " +&
            "UNTIL FRM-IFLD > " + STR$(MAP_VEC_TIDX(I%)) )
         CALL PUT_GEN(MG_B,&
            "     OR FRM-SUAR = FRM-SUAR-MAL" )
         CALL PUT_GEN(MG_B,&
            "     OR FRM-SUAR = FRM-SUAR-CLR." )
 !!!         MAP_GLS_IDX$ = "(FRM-IFLD)"
      ELSE
         CALL PUT_GEN(MG_B,"PERFORM VAL-" +&
            MAP_VEC_NRTN(I%) + "." )
      END IF
      CALL PUT_GEN(MG_B,"IF FRM-SUAR = FRM-SUAR-MAL" +&
         " OR FRM-SUAR = FRM-SUAR-CLR" )
      IF MAP_GLS_IDX$ = "(FRM-IFLD)" THEN
          CALL PUT_GEN(MG_1,"SUBTRACT 1 FROM FRM-IFLD")
      END IF
      CALL PUT_GEN(MG_1,"MOVE -1 TO " + MAP_VEC_NRTN(I%) +&
            "-LEN" + MAP_GLS_IDX$ )
      CALL PUT_GEN(MG_1,"GO TO FIN-VAL-AKY-" + MAP_GLS_MAPA + "." )
    END IF
   NEXT I%
   CALL PUT_GEN(MG_A,"FIN-VAL-AKY-" + MAP_GLS_MAPA + "." )
   CALL PUT_GEN(MG_B,"EXIT." )
   END DEF
   
   DEF INTEGER GEN_VAL_FLD
   CALL PUT_GEN(MG_C," " )
   CALL PUT_GEN(MG_A,"VAL-FLD-" + MAP_GLS_MAPA + " SECTION." )
   CALL PUT_GEN(MG_A,"INI-VAL-FLD-" + MAP_GLS_MAPA + "." )
 !!!JSS 16-NOV-1989 16:09:06
   CALL PUT_GEN(MG_N,"*% INCLUDE INI_VAL_FLD_" + MAP_GLS_MAPA + MAP_GLS_PBM )
 !!!
   FOR I% = 1 TO MAP_TOT_CMPO
 !!!   IF MAP_VEC_PROT(I%) = MAP_CTE_NOT AND&
   IF MAP_VEC_VALI(I%) = MAP_CTE_YES AND&
      MAP_VEC_TFLD(I%) = MAP_IND_FLD THEN
      MAP_GLS_IDX$ = ""
      IF MAP_VEC_TIDX(I%) > 1 THEN
         MAP_NUM_FNC = GEN_FNC_VCSI
 !!!         MAP_GLS_IDX$ = "(FRM-IFLD)"
      ELSE
         MAP_NUM_FNC = GEN_FNC_VCNI
      END IF
   END IF
   NEXT I%
 !!!JSS 16-NOV-1989 16:09:06
   CALL PUT_GEN(MG_N,"*% INCLUDE FIN_VAL_FLD_" + MAP_GLS_MAPA + MAP_GLS_PBM )
 !!!
   CALL PUT_GEN(MG_A,"FIN-VAL-FLD-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF
   
   DEF INTEGER GEN_VAL_FLS
   FOR I% = 1 TO MAP_TOT_CMPO
 !!!   IF MAP_VEC_PROT(I%) = MAP_CTE_NOT AND&
   IF MAP_VEC_VALI(I%) = MAP_CTE_YES THEN
        CALL PUT_GEN(MG_C," ")
        CALL PUT_GEN(MG_A,"VAL-" + MAP_VEC_NRTN(I%) + " SECTION." )
        CALL PUT_GEN(MG_A,"INI-VAL-" + MAP_VEC_NRTN(I%) + "." )
 !!!        IF NOT ( MAP_VEC_FECH(I%) = MAP_CTE_NOT OR&
 !!!                 MAP_VEC_DSPL(I%) = MAP_CTE_YES ) THEN
 !!!            IF MAP_VEC_TIDX(I%) > 1 THEN
 !!!               FOR ZZ% = 1 TO MAP_VEC_TIDX(I%)
 !!!                CALL PUT_GEN(MG_B,"IF " + MAP_VEC_NRTN(I%) + MAP_GLS_DFL +&
 !!!                  MAP_GLS_VIX(ZZ%) + " =" + MAP_VEC_FFEC(MAP_VEC_FECH(I%)))
 !!!                CALL PUT_GEN(MG_1,"MOVE SPACES TO " + MAP_VEC_NRTN(I%) +&
 !!!			MAP_GLS_DFL + MAP_GLS_VIX(ZZ%) + ".")
 !!!               NEXT ZZ%
 !!!           ELSE
 !!!              CALL PUT_GEN(MG_B,"IF " + MAP_VEC_NRTN(I%) + MAP_GLS_DFL + " =" +&
 !!!		MAP_VEC_FFEC(MAP_VEC_FECH(I%)))
 !!!              CALL PUT_GEN(MG_1,"MOVE SPACES TO " + MAP_VEC_NRTN(I%) +&
 !!!                           MAP_GLS_DFL + ".")
 !!!           END IF
 !!!         END IF

         IF NOT ( MAP_VEC_FECH(I%) = MAP_CTE_NOT OR&
                  MAP_VEC_DSPL(I%) = MAP_CTE_YES ) THEN
 !!!         CALL PUT_GEN(MG_N,"*% INCLUDE INI_" + MAP_VEC_REGI(I%) + "_" +&
 !!!            MAP_VEC_TIPO(I%) + "_" + MAP_VEC_NOMB(I%) + MAP_GLS_PBM )
             CALL PUT_GEN(MG_N,'*% FLD = "' + MAP_VEC_NRTN(I%) + '"')
             CALL PUT_GEN(MG_N,'*% SN  = "' + MAP_VEC_OBLI(I%) + '"')
             CALL PUT_GEN(MG_N,'*% FRM = "' + MAP_VEC_VFEC(MAP_VEC_FECH(I%)) +&
                               '"')
	     CALL PUT_GEN(MG_N,'*% LBL = "' + MAP_VEC_REGI(I%) + "_" +&
                MAP_VEC_TIPO(I%) + "_" + MAP_VEC_NOMB(I%) + MAP_GLS_PBM +&
                               '"')
	     CALL PUT_GEN(MG_N,'*% HOY = "LE"')
	     CALL PUT_GEN(MG_N,'*% HBL = "S"')
             IF MAP_VEC_TIDX(I%) > 1 THEN
               CALL PUT_GEN(MG_N,'*% BUF = "' + MAP_GLS_MAPA +&
                                 '-FLD(FRM-IFLD)'  + '"')
             ELSE
               CALL PUT_GEN(MG_N,'*% BUF = "' + MAP_GLS_MAPA + '-FLD' + '"')
             END IF
             CALL PUT_GEN(MG_N,"*% INCLUDE 'VALFEC'")

        END IF
 !!! ESTA PREGUNTA SIGNIFICA QUE EL CAMPO ES OBLIGATORIO.
        IF MAP_VEC_FECH(I%) = MAP_CTE_NOT THEN
            IF MAP_VEC_OBLI(I%) = "N" AND &
               MAP_VEC_DSPL(I%) = MAP_CTE_NOT THEN
                 IF MAP_VEC_NUME(I%) <> MAP_CTE_YES THEN
                     A$ = " NOT > SPACES"
                 ELSE
                     A$ = " = ZEROES"
                 END IF
		 ERRGLS$  = "TRUE"
                 IF MAP_VEC_TIDX(I%) > 1 THEN
                     MAP_GLS_IDX$ = "(FRM-IFLD)"
                     CALL PUT_GEN(MG_B,"IF " + MAP_VEC_NRTN(I%) +&
			MAP_GLS_DFL +  MAP_GLS_IDX$ + A$)
                     CALL PUT_GEN(MG_1,"PERFORM ERR-GLS")
                     CALL PUT_GEN(MG_1,"GO TO FIN-VAL-"+MAP_VEC_NRTN(I%)+".")
                 ELSE
                      CALL PUT_GEN(MG_B,"IF " + MAP_VEC_NRTN(I%) +&
			MAP_GLS_DFL + A$)
                     CALL PUT_GEN(MG_1,"PERFORM ERR-GLS")
                     CALL PUT_GEN(MG_1,"GO TO FIN-VAL-"+MAP_VEC_NRTN(I%)+".")
                 END IF
            ELSE
                 IF MAP_VEC_NUME(I%) <> MAP_CTE_YES THEN
                     IF MAP_VEC_TIDX(I%) > 1 THEN
                         MAP_GLS_IDX$ = "(FRM-IFLD)"
                         CALL PUT_GEN(MG_B,"IF " + MAP_VEC_NRTN(I%) +&
                              MAP_GLS_DFL + MAP_GLS_IDX$ + " NOT > SPACES")
                         CALL PUT_GEN(MG_B,"   MOVE SPACES TO " +&
                              MAP_VEC_NRTN(I%) + MAP_GLS_DFL + MAP_GLS_IDX$ + ".")
                     ELSE
                         CALL PUT_GEN(MG_B,"IF " + MAP_VEC_NRTN(I%) +&
                              MAP_GLS_DFL +  " NOT > SPACES")
                         CALL PUT_GEN(MG_B,"   MOVE SPACES TO " +&
                              MAP_VEC_NRTN(I%) + MAP_GLS_DFL + ".")
                     END IF
                 END IF
            END IF
        END IF
	IF MAP_VEC_TVAL(I%) = MAP_IND_VVRF THEN
	        IF MAP_VEC_TIDX(I%) > 1 THEN
		    MAP_GLS_INDI$ = MAP_GLS_MAPA + "-FLD(FRM-IFLD)"
		ELSE
		    MAP_GLS_INDI$ = MAP_GLS_MAPA + "-FLD"
		END IF
		CALL PUT_GEN(MG_N,'*% KO0 = "K"')
		CALL PUT_GEN(MG_N,'*% ZRO = "S"')
		CALL PUT_GEN(MG_N,'*% FLD = "' + MAP_VEC_NRTN(I% - 1) + '"')
		CALL PUT_GEN(MG_N,'*% VRF = "' + MAP_VEC_NRTN(I%) + '"')
		CALL PUT_GEN(MG_N,'*% BUF = "' + MAP_GLS_INDI$ + '"')
 		CALL PUT_GEN(MG_N,'*% LMX = "7"')
		IF MAP_VEC_IOV(I%) = MAP_IND_IDC THEN
			CALL PUT_GEN(MG_N,"*% INCLUDE 'VALRUT'")
		ELSE
			CALL PUT_GEN(MG_N,"*% INCLUDE 'VALVRF'")
		END IF
	END IF
	IF MAP_VEC_TVAL(I%) = MAP_IND_VIND THEN
		CALL PUT_GEN(MG_N,'*% IND = "' + MAP_VEC_NRTN(I%) + '"')
		CALL PUT_GEN(MG_N,'*% FLD = "' + MAP_GLS_MAPA + '-FLD"')
		CALL PUT_GEN(MG_N,"*% INCLUDE 'VALIDC'")
	END IF
	IF MAP_VEC_TVAL(I%) = MAP_IND_VGLS THEN
		CALL PUT_GEN(MG_N,'*% FLD = "' + MAP_VEC_NRTN(I%) + '"')
		CALL PUT_GEN(MG_N,'*% BUF = "' + MAP_GLS_MAPA + '-FLD"')
		CALL PUT_GEN(MG_N,"*% INCLUDE 'VALGLS'")
	END IF
        CALL PUT_GEN(MG_N,"*% INCLUDE " + MAP_VEC_REGI(I%) + "_" +&
           MAP_VEC_TIPO(I%) + "_" + MAP_VEC_NOMB(I%) + MAP_GLS_PBM )
	IF MAP_VEC_VAUT(I%) <> MAP_CTE_NOT THEN
            MAP_NUM_FNC = MAP_FNC_GRCR
            IF FIO_STAT = FIO_STAT_OKS THEN
                MAP_NUM_FNC = MAP_FNC_GDMN
                IF FIO_STAT = FIO_STAT_OKS THEN
                       IF MAP_VEC_VAUT(I%) = MAP_NUM_CODI THEN
                           IF DMN::DMN_GLS_VALI <= " " OR &
			      DMN::DMN_GLS_VALI  = "VALCOD" THEN
                               MAP_GLS_VCOD = 'VALCOD'
			       VALCOD$ = "TRUE"
                           ELSE
                               MAP_GLS_VCOD = DMN::DMN_GLS_VALI
			       IF MAP_GLS_VCOD = "VALOFI" THEN
					VALOFI$ = "TRUE"
			       ELSE
			       IF MAP_GLS_VCOD = "VALUSR" THEN
					VALUSR$ = "TRUE"
                               ELSE
			       IF MAP_GLS_VCOD = "VALTDU" THEN
					VALTDU$ = "TRUE"
			       END IF
			       END IF
			       END IF
                           END IF
                           IF MAP_VEC_GLOS(I%) > 0 THEN
                               MAP_GLS_GCOD = 'TRUE'
                           ELSE
                               MAP_GLS_GCOD = 'FALSE'
                           END IF
                           MAP_NUM_FNC = MAP_FNC_VCOD
                       ELSE
                           IF DMN::DMN_GLS_VALI <= " " OR &
                              DMN::DMN_GLS_VALI  = "VALIND" THEN
                               MAP_GLS_VIND = 'VALIND'
			       VALIND$ = "TRUE"
                           ELSE
                               MAP_GLS_VIND = DMN::DMN_GLS_VALI
			       IF MAP_GLS_VIND = "VALOFI" THEN
					VALOFI$ = "TRUE"
			       ELSE
			       IF MAP_GLS_VIND = "VALUSR" THEN
					VALUSR$ = "TRUE"
                               ELSE
			       IF MAP_GLS_VIND = "VALTDU" THEN
					VALTDU$ = "TRUE"
			       END IF
			       END IF
			       END IF
                           END IF
                           IF MAP_VEC_GLOS(I%) > 0 THEN
                               MAP_GLS_GIND = 'TRUE'
                           ELSE
                               MAP_GLS_GIND = 'FALSE'
                           END IF
                           MAP_NUM_FNC = MAP_FNC_VIND
                       END IF
                    END IF
                END IF
            END IF
        CALL PUT_GEN(MG_A,"FIN-VAL-" +    MAP_VEC_NRTN(I%) + "." )
        CALL PUT_GEN(MG_B,"EXIT." )
   END IF
   NEXT I%
   END DEF
   
   DEF INTEGER VAL_CON_KEY
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"VAL-CON-KEY-" + MAP_GLS_MAPA + " SECTION.")
   CALL PUT_GEN(MG_A,"INI-VAL-CON-KEY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_N,"*% INCLUDE INI_VAL_CON_KEY_" +&
            MAP_GLS_MAPA + MAP_GLS_PBM )
   MAP_KEY_ABPA$ = "IF     "
   FOR I% = 1 TO MAP_TOT_CMPO
      IF MAP_VEC_NUME(I%) = MAP_CTE_YES THEN
            MAP_KEY_CIPA$ = " NOT > ZEROES "
      ELSE
            MAP_KEY_CIPA$ = " NOT > SPACES "
      END IF
      IF MAP_VEC_TFLD(I%) = MAP_IND_IKY OR &
         MAP_VEC_TFLD(I%) = MAP_IND_MKY OR &
         MAP_VEC_TFLD(I%) = MAP_IND_AKY THEN
         IF MAP_VEC_TIDX(I%) > 1 THEN
            FOR ZZ% = 1 TO MAP_VEC_TIDX(I%)
               CALL PUT_GEN(MG_B,MAP_KEY_ABPA$ +&
               MAP_VEC_NRTN(I%) + MAP_GLS_DFL +&
               MAP_GLS_VIX(ZZ%) + MAP_KEY_CIPA$)
               MAP_KEY_ABPA$ = "   AND "
            NEXT ZZ%
         ELSE
            CALL PUT_GEN(MG_B,MAP_KEY_ABPA$ +&
               MAP_VEC_NRTN(I%) + MAP_GLS_DFL +&
               MAP_KEY_CIPA$)
         END IF
         MAP_KEY_ABPA$ = "   AND "
      END IF
   NEXT I%
         
   CALL PUT_GEN(MG_B,"     PERFORM ERR-KEY")
   CALL PUT_GEN(MG_B,"     PERFORM FST-KEY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_N,"*% INCLUDE FIN_VAL_CON_KEY_" + MAP_GLS_MAPA +&
            MAP_GLS_PBM )
   CALL PUT_GEN(MG_A,"FIN-VAL-CON-KEY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF

   DEF INTEGER VAL_CON_IKY
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"VAL-CON-IKY-" + MAP_GLS_MAPA + " SECTION.")
   CALL PUT_GEN(MG_A,"INI-VAL-CON-IKY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_N,"*% INCLUDE INI_VAL_CON_IKY_" + MAP_GLS_MAPA +&
         MAP_GLS_PBM )
   MAP_IKY_ABPA$ = "IF     "
   FOR I% = 1 TO MAP_TOT_CMPO
      IF MAP_VEC_NUME(I%) = MAP_CTE_YES THEN
            MAP_IKY_CIPA$ = " NOT > ZEROES "
      ELSE
            MAP_IKY_CIPA$ = " NOT > SPACES "
      END IF
      IF MAP_VEC_TFLD(I%) = MAP_IND_IKY AND&
	 MAP_VEC_DERI(I%) = MAP_CTE_NOT THEN
           IF MAP_VEC_TIDX(I%) > 1 THEN
               FOR ZZ% = 1 TO MAP_VEC_TIDX(I%)
                  CALL PUT_GEN(MG_B,MAP_IKY_ABPA$ +&
                  MAP_VEC_NRTN(I%) + MAP_GLS_DFL +&
                  MAP_GLS_VIX(ZZ%) + MAP_IKY_CIPA$)
                  MAP_IKY_ABPA$ = "   AND "
               NEXT ZZ%
           ELSE
               CALL PUT_GEN(MG_B,MAP_IKY_ABPA$ +&
                   MAP_VEC_NRTN(I%) + MAP_GLS_DFL +&
                   MAP_IKY_CIPA$)
           END IF
           MAP_IKY_ABPA$ = "   AND "
      END IF
   NEXT I%
         
   CALL PUT_GEN(MG_B,"     PERFORM ERR-KEY")
   CALL PUT_GEN(MG_B,"     PERFORM FST-KEY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_N,"*% INCLUDE FIN_VAL_CON_IKY_" + MAP_GLS_MAPA +&
            MAP_GLS_PBM )
   CALL PUT_GEN(MG_A,"FIN-VAL-CON-IKY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF
   
   DEF INTEGER VAL_CON_FLD
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"VAL-CON-FLD-" + MAP_GLS_MAPA + " SECTION.")
   CALL PUT_GEN(MG_A,"INI-VAL-CON-FLD-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_N,"*% INCLUDE VAL_CON_FLD_" + MAP_GLS_MAPA+MAP_GLS_PBM )
   CALL PUT_GEN(MG_A,"FIN-VAL-CON-FLD-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF
   
   DEF INTEGER GEN_VAL_CON
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"VAL-CON-" + MAP_GLS_MAPA + " SECTION.")
   CALL PUT_GEN(MG_A,"INI-VAL-CON-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_N,"*% INCLUDE VAL_CON_" + MAP_GLS_MAPA + MAP_GLS_PBM )
   CALL PUT_GEN(MG_A,"FIN-VAL-CON-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF
   
   
   DEF INTEGER VAL_NUM_KEY
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"VAL-NUM-KEY-" + MAP_GLS_MAPA + " SECTION.")
   CALL PUT_GEN(MG_A,"INI-VAL-NUM-KEY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"PERFORM VAL-NUM-IKY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"PERFORM VAL-NUM-MKY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"PERFORM VAL-NUM-AKY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_A,"FIN-VAL-NUM-KEY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF
   
   DEF INTEGER VAL_NUM_IKY
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"VAL-NUM-IKY-" + MAP_GLS_MAPA + " SECTION.")
   CALL PUT_GEN(MG_A,"INI-VAL-NUM-IKY-" + MAP_GLS_MAPA + ".")
   FOR I% = 1 TO MAP_TOT_CMPO
      IF MAP_VEC_VALI(I%)  = MAP_CTE_YES AND&
         MAP_VEC_TFLD(I%)  = MAP_IND_IKY AND&
         MAP_VEC_NUME(I%)  = MAP_CTE_YES AND&
         ( MAP_VEC_SGN(I%) = MAP_CTE_YES OR&
           MAP_VEC_TVAL(I%) = MAP_NUM_VVRF )AND&
         MAP_GLS_FOR = "FMS" THEN
	NRO$ = "TRUE"
        IF MAP_VEC_TIDX(I%) > 1 THEN
        FOR M% = 1 TO MAP_VEC_TIDX(I%)
         CALL PUT_GEN(MG_A,'VAL-NUM-' + MAP_VEC_NRTN(I%) + '-' + STR$(M%) + '.')
         CALL PUT_GEN(MG_N,'*% IZR = "S"')
         CALL PUT_GEN(MG_N,'*% FLD = "' + MAP_VEC_NRTN(I%) + '"')
         CALL PUT_GEN(MG_N,'*% BUF = "' + MAP_GLS_MAPA + '-FLD'+&
            '(' + STR$(M%) + ')"')
         CALL PUT_GEN(MG_N,'*% ENT = ' +&
                  STR$(MAP_VEC_ENT(I%)) )
         CALL PUT_GEN(MG_N,'*% DCM = ' +&
                  STR$(MAP_VEC_DECM(I%)) )
         CALL PUT_GEN(MG_N,'*% NMR = "' + MAP_VEC_NMR(I%) + '"')
         CALL PUT_GEN(MG_N,'*% ISG = "' + MAP_VEC_ISG(I%) + '"')
         IF MAP_VEC_SGN(I%) = MAP_CTE_YES THEN
 	         CALL PUT_GEN(MG_N,"*% INCLUDE 'VALNUM'")
	 ELSE
		 AA$ = MAP_VEC_NRTN(I%)
	         CALL PUT_GEN(MG_N,'*% LBL = ' + '"VAL_NUM_' +&
			AA$ + '_' + STR$(M%) + '"')
 	         CALL PUT_GEN(MG_N,"*% INCLUDE 'GNSSRCSOP:VALINT.SRCSOP'")
	 END IF
	 CALL PUT_GEN(MG_B,"IF FRM-SUAR = FRM-SUAR-MAL OR ")
	 CALL PUT_GEN(MG_B,"   FRM-SUAR = FRM-SUAR-CLR")
	 CALL PUT_GEN(MG_1,"GO TO FIN-VAL-NUM-IKY-" +&
                     MAP_GLS_MAPA + ".")
            NEXT M%
         ELSE
            CALL PUT_GEN(MG_A,'VAL-NUM-' + MAP_VEC_NRTN(I%) + '.')
            CALL PUT_GEN(MG_N,'*% IZR = "S"')
            CALL PUT_GEN(MG_N,'*% FLD = "' + MAP_VEC_NRTN(I%) + '"')
            CALL PUT_GEN(MG_N,'*% BUF = "' + MAP_GLS_MAPA + '-FLD"')
            CALL PUT_GEN(MG_N,'*% ENT = ' +&
                  STR$(MAP_VEC_ENT(I%)) )
            CALL PUT_GEN(MG_N,'*% DCM = ' +&
                  STR$(MAP_VEC_DECM(I%)) )
            CALL PUT_GEN(MG_N,'*% NMR = "' + MAP_VEC_NMR(I%) + '"')
            CALL PUT_GEN(MG_N,'*% ISG = "' + MAP_VEC_ISG(I%) + '"')
         IF MAP_VEC_SGN(I%) = MAP_CTE_YES THEN
 	         CALL PUT_GEN(MG_N,"*% INCLUDE 'VALNUM'")
	 ELSE
		 AA$ = MAP_VEC_NRTN(I%)
	         CALL PUT_GEN(MG_N,'*% LBL = VAL_NUM_' +&
			AA$  )
 	         CALL PUT_GEN(MG_N,"*% INCLUDE 'GNSSRCSOP:VALINT.SRCSOP'")
	 END IF
	 CALL PUT_GEN(MG_B,"IF FRM-SUAR = FRM-SUAR-MAL OR ")
	 CALL PUT_GEN(MG_B,"   FRM-SUAR = FRM-SUAR-CLR")
            CALL PUT_GEN(MG_1,"GO TO FIN-VAL-NUM-IKY-" +&
                     MAP_GLS_MAPA + ".")
        END IF
      END IF
   NEXT I%
   CALL PUT_GEN(MG_A,"FIN-VAL-NUM-IKY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF
   
   DEF INTEGER VAL_NUM_MKY
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"VAL-NUM-MKY-" + MAP_GLS_MAPA + " SECTION.")
   CALL PUT_GEN(MG_A,"INI-VAL-NUM-MKY-" + MAP_GLS_MAPA + ".")
   FOR I% = 1 TO MAP_TOT_CMPO
      IF MAP_VEC_VALI(I%)  = MAP_CTE_YES AND&
          MAP_VEC_TFLD(I%) = MAP_IND_MKY AND&
          MAP_VEC_NUME(I%)  = MAP_CTE_YES AND&
         ( MAP_VEC_SGN(I%) = MAP_CTE_YES OR&
           MAP_VEC_TVAL(I%) = MAP_NUM_VVRF )AND&
         MAP_GLS_FOR = "FMS" THEN
	NRO$ = "TRUE"
             IF MAP_VEC_TIDX(I%) > 1 THEN
       FOR M% = 1 TO MAP_VEC_TIDX(I%)
         CALL PUT_GEN(MG_A,'VAL-NUM-' + MAP_VEC_NRTN(I%) + '-' + STR$(M%) + '.')
         CALL PUT_GEN(MG_N,'*% IZR = "S"')
         CALL PUT_GEN(MG_N,'*% FLD = "' + MAP_VEC_NRTN(I%) + '"')
         CALL PUT_GEN(MG_N,'*% BUF = "' + MAP_GLS_MAPA + '-FLD'+&
            '(' + STR$(M%) + ')"')
         CALL PUT_GEN(MG_N,'*% ENT = ' +&
                  STR$(MAP_VEC_ENT(I%)) )
         CALL PUT_GEN(MG_N,'*% DCM = ' +&
                  STR$(MAP_VEC_DECM(I%)) )
         CALL PUT_GEN(MG_N,'*% NMR = "' + MAP_VEC_NMR(I%) + '"')
         CALL PUT_GEN(MG_N,'*% ISG = "' + MAP_VEC_ISG(I%) + '"')
         IF MAP_VEC_SGN(I%) = MAP_CTE_YES THEN
 	         CALL PUT_GEN(MG_N,"*% INCLUDE 'VALNUM'")
	 ELSE
		 AA$ = MAP_VEC_NRTN(I%)
	         CALL PUT_GEN(MG_N,'*% LBL = ' + '"VAL_NUM_' +&
			AA$ + '_' + STR$(M%) + '"')
 	         CALL PUT_GEN(MG_N,"*% INCLUDE 'GNSSRCSOP:VALINT.SRCSOP'")
	 END IF
	 CALL PUT_GEN(MG_B,"IF FRM-SUAR = FRM-SUAR-MAL OR ")
	 CALL PUT_GEN(MG_B,"   FRM-SUAR = FRM-SUAR-CLR")
                     CALL PUT_GEN(MG_1,"GO TO FIN-VAL-NUM-MKY-" +&
                     MAP_GLS_MAPA + ".")
            NEXT M%
        ELSE
            CALL PUT_GEN(MG_A,'VAL-NUM-' + MAP_VEC_NRTN(I%) + '.')
            CALL PUT_GEN(MG_N,'*% IZR = "S"')
            CALL PUT_GEN(MG_N,'*% FLD = "' + MAP_VEC_NRTN(I%) + '"')
            CALL PUT_GEN(MG_N,'*% BUF = "' + MAP_GLS_MAPA + '-FLD"')
            CALL PUT_GEN(MG_N,'*% ENT = ' +&
                  STR$(MAP_VEC_ENT(I%)) )
            CALL PUT_GEN(MG_N,'*% DCM = ' +&
                  STR$(MAP_VEC_DECM(I%)) )
            CALL PUT_GEN(MG_N,'*% NMR = "' + MAP_VEC_NMR(I%) + '"')
            CALL PUT_GEN(MG_N,'*% ISG = "' + MAP_VEC_ISG(I%) + '"')
         IF MAP_VEC_SGN(I%) = MAP_CTE_YES THEN
 	         CALL PUT_GEN(MG_N,"*% INCLUDE 'VALNUM'")
	 ELSE
		 AA$ = MAP_VEC_NRTN(I%)
	         CALL PUT_GEN(MG_N,'*% LBL = VAL_NUM_' +&
			AA$  )
 	         CALL PUT_GEN(MG_N,"*% INCLUDE 'GNSSRCSOP:VALINT.SRCSOP'")
	 END IF
	 CALL PUT_GEN(MG_B,"IF FRM-SUAR = FRM-SUAR-MAL OR ")
	 CALL PUT_GEN(MG_B,"   FRM-SUAR = FRM-SUAR-CLR")
                 CALL PUT_GEN(MG_1,"GO TO FIN-VAL-NUM-MKY-" +&
                     MAP_GLS_MAPA + ".")
        END IF
      END IF
   NEXT I%
   CALL PUT_GEN(MG_A,"FIN-VAL-NUM-MKY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF
   
   DEF INTEGER VAL_NUM_AKY
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"VAL-NUM-AKY-" + MAP_GLS_MAPA + " SECTION.")
   CALL PUT_GEN(MG_A,"INI-VAL-NUM-AKY-" + MAP_GLS_MAPA + ".")
   FOR I% = 1 TO MAP_TOT_CMPO
      IF  MAP_VEC_VALI(I%)  = MAP_CTE_YES AND&
          MAP_VEC_TFLD(I%) = MAP_IND_AKY AND&
          MAP_VEC_NUME(I%)  = MAP_CTE_YES AND&
         ( MAP_VEC_SGN(I%) = MAP_CTE_YES OR&
           MAP_VEC_TVAL(I%) = MAP_NUM_VVRF )AND&
         MAP_GLS_FOR = "FMS" THEN
	NRO$ = "TRUE"
             IF MAP_VEC_TIDX(I%) > 1 THEN
        FOR M% = 1 TO MAP_VEC_TIDX(I%)
         CALL PUT_GEN(MG_A,'VAL-NUM-' + MAP_VEC_NRTN(I%) + '-' + STR$(M%) + '.')
         CALL PUT_GEN(MG_N,'*% IZR = "S"')
         CALL PUT_GEN(MG_N,'*% FLD = "' + MAP_VEC_NRTN(I%) + '"')
         CALL PUT_GEN(MG_N,'*% BUF = "' + MAP_GLS_MAPA + '-FLD'+&
            '(' + STR$(M%) + ')"')
         CALL PUT_GEN(MG_N,'*% ENT = ' +&
                  STR$(MAP_VEC_ENT(I%)) )
         CALL PUT_GEN(MG_N,'*% DCM = ' +&
                  STR$(MAP_VEC_DECM(I%)) )
         CALL PUT_GEN(MG_N,'*% NMR = "' + MAP_VEC_NMR(I%) + '"')
         CALL PUT_GEN(MG_N,'*% ISG = "' + MAP_VEC_ISG(I%) + '"')
         IF MAP_VEC_SGN(I%) = MAP_CTE_YES THEN
 	         CALL PUT_GEN(MG_N,"*% INCLUDE 'VALNUM'")
	 ELSE
		 AA$ = MAP_VEC_NRTN(I%)
	         CALL PUT_GEN(MG_N,'*% LBL = ' + '"VAL_NUM_' +&
			AA$ + '_' + STR$(M%) + '"')
 	         CALL PUT_GEN(MG_N,"*% INCLUDE 'GNSSRCSOP:VALINT.SRCSOP'")
	 END IF
	 CALL PUT_GEN(MG_B,"IF FRM-SUAR = FRM-SUAR-MAL OR ")
	 CALL PUT_GEN(MG_B,"   FRM-SUAR = FRM-SUAR-CLR")
                     CALL PUT_GEN(MG_1,"GO TO FIN-VAL-NUM-AKY-" +&
                     MAP_GLS_MAPA + ".")
          NEXT M%
         ELSE
            CALL PUT_GEN(MG_A,'VAL-NUM-' + MAP_VEC_NRTN(I%) + '.')
            CALL PUT_GEN(MG_N,'*% IZR = "S"')
            CALL PUT_GEN(MG_N,'*% FLD = "' + MAP_VEC_NRTN(I%) + '"')
            CALL PUT_GEN(MG_N,'*% BUF = "' + MAP_GLS_MAPA + '-FLD"')
            CALL PUT_GEN(MG_N,'*% ENT = ' +&
                  STR$(MAP_VEC_ENT(I%)) )
            CALL PUT_GEN(MG_N,'*% DCM = ' +&
                  STR$(MAP_VEC_DECM(I%)) )
            CALL PUT_GEN(MG_N,'*% NMR = "' + MAP_VEC_NMR(I%) + '"')
            CALL PUT_GEN(MG_N,'*% ISG = "' + MAP_VEC_ISG(I%) + '"')
         IF MAP_VEC_SGN(I%) = MAP_CTE_YES THEN
 	         CALL PUT_GEN(MG_N,"*% INCLUDE 'VALNUM'")
	 ELSE
		 AA$ = MAP_VEC_NRTN(I%)
	         CALL PUT_GEN(MG_N,'*% LBL = VAL_NUM_' +&
			AA$  )
 	         CALL PUT_GEN(MG_N,"*% INCLUDE 'GNSSRCSOP:VALINT.SRCSOP'")
	 END IF
	 CALL PUT_GEN(MG_B,"IF FRM-SUAR = FRM-SUAR-MAL OR ")
	 CALL PUT_GEN(MG_B,"   FRM-SUAR = FRM-SUAR-CLR")
                 CALL PUT_GEN(MG_1,"GO TO FIN-VAL-NUM-AKY-" +&
                     MAP_GLS_MAPA + ".")
        END IF
      END IF
   NEXT I%
   CALL PUT_GEN(MG_A,"FIN-VAL-NUM-AKY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF
   
   DEF INTEGER VAL_NUM_FLD
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"VAL-NUM-FLD-" + MAP_GLS_MAPA + " SECTION.")
   CALL PUT_GEN(MG_A,"INI-VAL-NUM-FLD-" + MAP_GLS_MAPA + ".")
   FOR I% = 1 TO MAP_TOT_CMPO
      IF MAP_VEC_VALI(I%) = MAP_CTE_YES AND&
         MAP_VEC_TFLD(I%) = MAP_IND_FLD AND&
         MAP_VEC_NUME(I%) = MAP_CTE_YES AND&
         ( MAP_VEC_SGN(I%) = MAP_CTE_YES OR&
           MAP_VEC_TVAL(I%) = MAP_NUM_VVRF )AND&
         MAP_GLS_FOR = "FMS" THEN
	NRO$ = "TRUE"
      IF MAP_VEC_TIDX(I%) > 1 THEN
        FOR M% = 1 TO MAP_VEC_TIDX(I%)
         CALL PUT_GEN(MG_A,'VAL-NUM-' + MAP_VEC_NRTN(I%) + '-' + STR$(M%) + '.')
         CALL PUT_GEN(MG_N,'*% IZR = "S"')
         CALL PUT_GEN(MG_N,'*% FLD = "' + MAP_VEC_NRTN(I%) + '"')
         CALL PUT_GEN(MG_N,'*% BUF = "' + MAP_GLS_MAPA + '-FLD'+&
            '(' + STR$(M%) + ')"')
         CALL PUT_GEN(MG_N,'*% ENT = ' +&
                  STR$(MAP_VEC_ENT(I%)) )
         CALL PUT_GEN(MG_N,'*% DCM = ' +&
                  STR$(MAP_VEC_DECM(I%)) )
         CALL PUT_GEN(MG_N,'*% NMR = "' + MAP_VEC_NMR(I%) + '"')
         CALL PUT_GEN(MG_N,'*% ISG = "' + MAP_VEC_ISG(I%) + '"')
         IF MAP_VEC_SGN(I%) = MAP_CTE_YES THEN
 	         CALL PUT_GEN(MG_N,"*% INCLUDE 'VALNUM'")
	 ELSE
		 AA$ = MAP_VEC_NRTN(I%)
	         CALL PUT_GEN(MG_N,'*% LBL = ' + '"VAL_NUM_' +&
			AA$ + '_' + STR$(M%) + '"')
 	         CALL PUT_GEN(MG_N,"*% INCLUDE 'GNSSRCSOP:VALINT.SRCSOP'")
	 END IF
	 CALL PUT_GEN(MG_B,"IF FRM-SUAR = FRM-SUAR-MAL OR ")
	 CALL PUT_GEN(MG_B,"   FRM-SUAR = FRM-SUAR-CLR")
                     CALL PUT_GEN(MG_1,"GO TO FIN-VAL-NUM-FLD-" +&
                     MAP_GLS_MAPA + ".")
          NEXT M%
        ELSE
            CALL PUT_GEN(MG_A,'VAL-NUM-' + MAP_VEC_NRTN(I%) + '.')
            CALL PUT_GEN(MG_N,'*% IZR = "S"')
            CALL PUT_GEN(MG_N,'*% FLD = "' + MAP_VEC_NRTN(I%) + '"')
            CALL PUT_GEN(MG_N,'*% BUF = "' + MAP_GLS_MAPA + '-FLD"')
            CALL PUT_GEN(MG_N,'*% ENT = ' +&
                  STR$(MAP_VEC_ENT(I%)) )
            CALL PUT_GEN(MG_N,'*% DCM = ' +&
                  STR$(MAP_VEC_DECM(I%)) )
            CALL PUT_GEN(MG_N,'*% NMR = "' + MAP_VEC_NMR(I%) + '"')
            CALL PUT_GEN(MG_N,'*% ISG = "' + MAP_VEC_ISG(I%) + '"')
         IF MAP_VEC_SGN(I%) = MAP_CTE_YES THEN
 	         CALL PUT_GEN(MG_N,"*% INCLUDE 'VALNUM'")
	 ELSE
		 AA$ = MAP_VEC_NRTN(I%)
	         CALL PUT_GEN(MG_N,'*% LBL = VAL_NUM_' +&
			AA$  )
 	         CALL PUT_GEN(MG_N,"*% INCLUDE 'GNSSRCSOP:VALINT.SRCSOP'")
	 END IF
	 CALL PUT_GEN(MG_B,"IF FRM-SUAR = FRM-SUAR-MAL OR ")
	 CALL PUT_GEN(MG_B,"   FRM-SUAR = FRM-SUAR-CLR")
                 CALL PUT_GEN(MG_1,"GO TO FIN-VAL-NUM-FLD-" +&
                     MAP_GLS_MAPA + ".")
        END IF
      END IF
   NEXT I%
   CALL PUT_GEN(MG_A,"FIN-VAL-NUM-FLD-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF

   DEF INTEGER GEN_EDT_KEY
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"EDT-KEY-" + MAP_GLS_MAPA +" SECTION.")
   CALL PUT_GEN(MG_A,"INI-EDT-KEY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"PERFORM EDT-IKY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"PERFORM EDT-MKY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"PERFORM EDT-AKY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_N,"*% INCLUDE EDT_KEY_" + MAP_GLS_MAPA + MAP_GLS_PBM )
   CALL PUT_GEN(MG_A,"FIN-EDT-KEY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF
   
   DEF INTEGER GEN_EDT_IKY
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"EDT-IKY-" + MAP_GLS_MAPA +" SECTION.")
   CALL PUT_GEN(MG_A,"INI-EDT-IKY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_N,"*% INCLUDE EDT_IKY_" + MAP_GLS_MAPA + MAP_GLS_PBM )
   FOR I% = 1 TO MAP_TOT_CMPO
     IF MAP_VEC_NUME(I%)  = MAP_CTE_YES AND&
        MAP_VEC_TFLD(I%) = MAP_IND_IKY THEN
        IF MAP_VEC_TIDX(I%) > 1 THEN
      FOR PP% = 1 TO MAP_VEC_TIDX(I%)
         CALL PUT_GEN(MG_B,"IF " + MAP_VEC_NRTN(I%) + "-LEN" +&
         MAP_GLS_DFL + MAP_GLS_VIX(PP%) + " = -9")
         CALL PUT_GEN(MG_1,"MOVE -1 TO " + MAP_VEC_NRTN(I%) + "-LEN" +&
         MAP_GLS_DFL + MAP_GLS_VIX(PP%))
         CALL PUT_GEN(MG_1,"GO TO FIN-EDT-IKY-" + MAP_GLS_MAPA + ".")
       CALL PUT_GEN(MG_B,"MOVE " + MAP_VEC_NRTN(I%) + MAP_GLS_DFL +&
         MAP_GLS_VIX(PP%) + " TO " + MAP_VEC_NRTN(I%) +&
         "-EDT" + MAP_GLS_DFL + MAP_GLS_VIX(PP%) + ".")
      NEXT PP%
        ELSE
         CALL PUT_GEN(MG_B,"IF " + MAP_VEC_NRTN(I%) + "-LEN" +&
         MAP_GLS_DFL + " = -9")
         CALL PUT_GEN(MG_1,"MOVE -1 TO " + MAP_VEC_NRTN(I%) + "-LEN" +&
         MAP_GLS_DFL)
         CALL PUT_GEN(MG_1,"GO TO FIN-EDT-IKY-" + MAP_GLS_MAPA + ".")
       CALL PUT_GEN(MG_B,"MOVE " + MAP_VEC_NRTN(I%) + MAP_GLS_DFL +&
         " TO " + MAP_VEC_NRTN(I%) + "-EDT" + MAP_GLS_DFL + ".")
        END IF
    END IF
   NEXT I%
   CALL PUT_GEN(MG_A,"FIN-EDT-IKY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF
   
   DEF INTEGER GEN_EDT_MKY
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"EDT-MKY-" + MAP_GLS_MAPA +" SECTION.")
   CALL PUT_GEN(MG_A,"INI-EDT-MKY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_N,"*% INCLUDE EDT_MKY_" + MAP_GLS_MAPA + MAP_GLS_PBM )
   FOR I% = 1 TO MAP_TOT_CMPO
     IF MAP_VEC_NUME(I%)  = MAP_CTE_YES AND&
        MAP_VEC_TFLD(I%) = MAP_IND_MKY THEN
        IF MAP_VEC_TIDX(I%) > 1 THEN
      FOR PP% = 1 TO MAP_VEC_TIDX(I%)
         CALL PUT_GEN(MG_B,"IF " + MAP_VEC_NRTN(I%) + "-LEN" +&
         MAP_GLS_DFL + MAP_GLS_VIX(PP%) + " = -9")
         CALL PUT_GEN(MG_1,"MOVE -1 TO " + MAP_VEC_NRTN(I%) + "-LEN" +&
         MAP_GLS_DFL + MAP_GLS_VIX(PP%) )
         CALL PUT_GEN(MG_1,"GO TO FIN-EDT-MKY-" + MAP_GLS_MAPA + ".")
       CALL PUT_GEN(MG_B,"MOVE " + MAP_VEC_NRTN(I%) + MAP_GLS_DFL +&
         MAP_GLS_VIX(PP%) + " TO " + MAP_VEC_NRTN(I%) +&
         "-EDT" + MAP_GLS_DFL + MAP_GLS_VIX(PP%) + ".")
      NEXT PP%
        ELSE
         CALL PUT_GEN(MG_B,"IF " + MAP_VEC_NRTN(I%) + "-LEN" +&
         MAP_GLS_DFL + " = -9")
         CALL PUT_GEN(MG_1,"MOVE -1 TO " + MAP_VEC_NRTN(I%) + "-LEN" +&
         MAP_GLS_DFL)
         CALL PUT_GEN(MG_1,"GO TO FIN-EDT-MKY-" + MAP_GLS_MAPA + ".")
       CALL PUT_GEN(MG_B,"MOVE " + MAP_VEC_NRTN(I%) + MAP_GLS_DFL +&
         " TO " + MAP_VEC_NRTN(I%) + "-EDT" + MAP_GLS_DFL + ".")
        END IF
    END IF
   NEXT I%
   CALL PUT_GEN(MG_A,"FIN-EDT-MKY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF
   
   DEF INTEGER GEN_EDT_AKY
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"EDT-AKY-" + MAP_GLS_MAPA +" SECTION.")
   CALL PUT_GEN(MG_A,"INI-EDT-AKY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_N,"*% INCLUDE EDT_AKY_" + MAP_GLS_MAPA + MAP_GLS_PBM )
   FOR I% = 1 TO MAP_TOT_CMPO
     IF MAP_VEC_NUME(I%)  = MAP_CTE_YES AND&
        MAP_VEC_TFLD(I%) = MAP_IND_AKY THEN
        IF MAP_VEC_TIDX(I%) > 1 THEN
      FOR PP% = 1 TO MAP_VEC_TIDX(I%)
         CALL PUT_GEN(MG_B,"IF " + MAP_VEC_NRTN(I%) + "-LEN" +&
         MAP_GLS_DFL + MAP_GLS_VIX(PP%) + " = -9")
         CALL PUT_GEN(MG_1,"MOVE -1 TO " + MAP_VEC_NRTN(I%) + "-LEN" +&
         MAP_GLS_DFL + MAP_GLS_VIX(PP%) )
         CALL PUT_GEN(MG_1,"GO TO FIN-EDT-AKY-" + MAP_GLS_MAPA + ".")
       CALL PUT_GEN(MG_B,"MOVE " + MAP_VEC_NRTN(I%) + MAP_GLS_DFL +&
         MAP_GLS_VIX(PP%) + " TO " + MAP_VEC_NRTN(I%) +&
         "-EDT" + MAP_GLS_DFL + MAP_GLS_VIX(PP%) + ".")
      NEXT PP%
        ELSE
         CALL PUT_GEN(MG_B,"IF " + MAP_VEC_NRTN(I%) + "-LEN" +&
         MAP_GLS_DFL + " = -9")
         CALL PUT_GEN(MG_1,"MOVE -1 TO " + MAP_VEC_NRTN(I%) + "-LEN" +&
         MAP_GLS_DFL)
         CALL PUT_GEN(MG_1,"GO TO FIN-EDT-AKY-" + MAP_GLS_MAPA + ".")
       CALL PUT_GEN(MG_B,"MOVE " + MAP_VEC_NRTN(I%) + MAP_GLS_DFL +&
         " TO " + MAP_VEC_NRTN(I%) + "-EDT" + MAP_GLS_DFL + ".")
        END IF
    END IF
   NEXT I%
   CALL PUT_GEN(MG_A,"FIN-EDT-AKY-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF
   
   DEF INTEGER GEN_EDT_FLD
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"EDT-FLD-" + MAP_GLS_MAPA +" SECTION.")
   CALL PUT_GEN(MG_A,"INI-EDT-FLD-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_N,"*% INCLUDE EDT_FLD_" + MAP_GLS_MAPA + MAP_GLS_PBM )
   FOR I% = 1 TO MAP_TOT_CMPO
     IF MAP_VEC_NUME(I%) = MAP_CTE_YES AND&
        MAP_VEC_TFLD(I%) = MAP_IND_FLD THEN
        IF MAP_VEC_TIDX(I%) > 1 THEN
      FOR PP% = 1 TO MAP_VEC_TIDX(I%)
         CALL PUT_GEN(MG_B,"IF " + MAP_VEC_NRTN(I%) + "-LEN" +&
         MAP_GLS_DFL + MAP_GLS_VIX(PP%) + " = -9")
         CALL PUT_GEN(MG_1,"MOVE -1 TO " + MAP_VEC_NRTN(I%) + "-LEN" +&
         MAP_GLS_DFL + MAP_GLS_VIX(PP%) )
         CALL PUT_GEN(MG_1,"GO TO FIN-EDT-FLD-" + MAP_GLS_MAPA + ".")
       CALL PUT_GEN(MG_B,"MOVE " + MAP_VEC_NRTN(I%) + MAP_GLS_DFL +&
         MAP_GLS_VIX(PP%) + " TO " + MAP_VEC_NRTN(I%) +&
         "-EDT" + MAP_GLS_DFL + MAP_GLS_VIX(PP%) + ".")
      NEXT PP%
        ELSE
         CALL PUT_GEN(MG_B,"IF " + MAP_VEC_NRTN(I%) + "-LEN" +&
         MAP_GLS_DFL + " = -9")
         CALL PUT_GEN(MG_1,"MOVE -1 TO " + MAP_VEC_NRTN(I%) + "-LEN" +&
         MAP_GLS_DFL)
         CALL PUT_GEN(MG_1,"GO TO FIN-EDT-FLD-" + MAP_GLS_MAPA + ".")
       CALL PUT_GEN(MG_B,"MOVE " + MAP_VEC_NRTN(I%) + MAP_GLS_DFL +&
         " TO " + MAP_VEC_NRTN(I%) + "-EDT" + MAP_GLS_DFL + ".")
        END IF
    END IF
   NEXT I%
   CALL PUT_GEN(MG_A,"FIN-EDT-FLD-" + MAP_GLS_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF

   DEF INTEGER GEN_ATR_LEN
          WTXT_NUM_SOR = 4
          MAP_GLS_TXT = MAP_FNC_WTXT(V_ANSI(MG_B) + "04 " +&
			MAP_GLS_MAPA + "-DFLD-ATR.")

          WTXT_NUM_SOR = 6
          MAP_GLS_TXT = MAP_FNC_WTXT(V_ANSI(MG_B) + "04 " +&
			MAP_GLS_MAPA + "-DFLD-LEN.")
   FOR J% = 1 TO MAP_TOT_CMPO
      IF MAP_VEC_ATR(J%)   =  MAP_CTE_YES THEN
        WTXT_NUM_SOR = 4
   	MAP_GLS_TXT = MAP_FNC_WTXT(V_ANSI(MG_B) + "   05 " +&
			MAP_VEC_REGI(J%) + "-" +&
			MAP_VEC_TIPO(J%) + "-" +&
			MAP_VEC_NOMB(J%) + "-ATR" +&
			"                PIC 9(01).")
      ELSE
      IF MAP_VEC_ATR(J%)   =  MAP_CTE_RED THEN
        WTXT_NUM_SOR = 4
   	MAP_GLS_TXT = MAP_FNC_WTXT(V_ANSI(MG_B) + "   05 " +&
			MAP_VEC_REGI(J%) + "-" +&
			MAP_VEC_TIPO(J%) + "-" +&
			MAP_VEC_NOMB(J%) + "-ATR REDEFINES")
   	MAP_GLS_TXT = MAP_FNC_WTXT(V_ANSI(MG_B) + "      " +&
			MAP_VEC_REGI(J%-1) + "-" +&
			MAP_VEC_TIPO(J%-1) + "-" +&
			MAP_VEC_NOMB(J%-1) + "-ATR" +&
			"                PIC 9(01).")
      END IF
      END IF
      IF MAP_VEC_LEN(J%)   =  MAP_CTE_YES THEN
        WTXT_NUM_SOR = 6
   	MAP_GLS_TXT = MAP_FNC_WTXT(V_ANSI(MG_B) + "   05 " +&
			MAP_VEC_REGI(J%) + "-" +&
			MAP_VEC_TIPO(J%) + "-" +&
			MAP_VEC_NOMB(J%) + "-LEN" +&
			"                PIC S9(01).")
      ELSE
      IF MAP_VEC_LEN(J%)   =  MAP_CTE_RED THEN
        WTXT_NUM_SOR = 6
   	MAP_GLS_TXT = MAP_FNC_WTXT(V_ANSI(MG_B) + "   05 " +&
			MAP_VEC_REGI(J%) + "-" +&
			MAP_VEC_TIPO(J%) + "-" +&
			MAP_VEC_NOMB(J%) + "-LEN REDEFINES")
   	MAP_GLS_TXT = MAP_FNC_WTXT(V_ANSI(MG_B) + "      " +&
			MAP_VEC_REGI(J%-1) + "-" +&
			MAP_VEC_TIPO(J%-1) + "-" +&
			MAP_VEC_NOMB(J%-1) + "-LEN" +&
			"                PIC S9(01).")
      END IF
      END IF
      IF MAP_VEC_N(J%) = MAP_CTE_YES THEN
        WTXT_NUM_SOR = 1
   	MAP_GLS_TXT = MAP_FNC_WTXT(V_ANSI(MG_B) + "   05 " +&
 			MAP_VEC_REGI(J%) + "-" +&
 			MAP_VEC_TIPO(J%) + "-" +&
 			MAP_VEC_NOMB(J%) + "-N" +&
			"                PIC X(31) VALUE")
   	MAP_GLS_TXT = MAP_FNC_WTXT(V_ANSI(MG_B) + "     '" +&
					MAP_VEC_FLD(J%) + "'." )
       END IF
   NEXT J%
        WTXT_NUM_SOR = 4
   	MAP_GLS_TXT = MAP_FNC_WTXT(V_ANSI(MG_B) + "   05 " +&
			MAP_GLS_MAPA + "-GLS-MENS-ATR" +&
			"                PIC 9(01).")
        WTXT_NUM_SOR = 6
   	MAP_GLS_TXT = MAP_FNC_WTXT(V_ANSI(MG_B) + "   05 " +&
			MAP_GLS_MAPA + "-GLS-MENS-LEN" +&
			"                PIC S9(01).")
   END DEF


   DEF INTEGER MAP_FNC_GEN
 ! >> BUSCA  VRF  ASOCIADO A IDC
	MAP_NUM_FNC = MAP_FNC_BUS
 ! >> PUT
	MAP_NUM_FNC = GEN_PUT_ALL
	MAP_NUM_FNC = GEN_PUT_REG

 ! >> RET
	MAP_NUM_FNC = GEN_RET_ALL
	MAP_NUM_FNC = GEN_RET_REG

 ! >> KEY
	MAP_NUM_FNC = GEN_KEY_ALL
	MAP_NUM_FNC = GEN_KEY_REG

 ! >> CLR
	MAP_NUM_FNC = GEN_CLR_ALL
	MAP_NUM_FNC = GEN_CLR_KEY
	MAP_NUM_FNC = GEN_CLR_FLD
	MAP_NUM_FNC = GEN_CLR_FLS

 ! >> FST
	MAP_NUM_FNC = GEN_FST_KEY
	MAP_NUM_FNC = GEN_FST_FLD

 ! >> PRO
	MAP_NUM_FNC = GEN_PRO_KEY
	MAP_NUM_FNC = GEN_PRO_IKY
	MAP_NUM_FNC = GEN_PRO_MKY
	MAP_NUM_FNC = GEN_PRO_AKY
	MAP_NUM_FNC = GEN_PRO_FLD
	MAP_NUM_FNC = GEN_PRO_FLS

 ! >> UNP
	MAP_NUM_FNC = GEN_UNP_KEY
	MAP_NUM_FNC = GEN_UNP_IKY
	MAP_NUM_GNC = GEN_UNP_MKY
	MAP_NUM_FNC = GEN_UNP_AKY
	MAP_NUM_FNC = GEN_UNP_FLD
	MAP_NUM_FNC = GEN_UNP_FLS

 ! >> VAL
	MAP_NUM_FNC = GEN_VAL_KEY
	MAP_NUM_FNC = GEN_VAL_IKY
	MAP_NUM_FNC = GEN_VAL_MKY
	MAP_NUM_FNC = GEN_VAL_AKY
	MAP_NUM_FNC = GEN_VAL_FLD
	MAP_NUM_FNC = GEN_VAL_FLS
	MAP_NUM_FNC = VAL_CON_KEY
	MAP_NUM_FNC = VAL_CON_IKY
	MAP_NUM_FNC = VAL_CON_FLD
	MAP_NUM_FNC = GEN_VAL_CON

 ! >> VAL-NUM
	MAP_NUM_FNC = VAL_NUM_KEY
	MAP_NUM_FNC = VAL_NUM_IKY
	MAP_NUM_FNC = VAL_NUM_MKY
	MAP_NUM_FNC = VAL_NUM_AKY
	MAP_NUM_FNC = VAL_NUM_FLD


 ! >> EDT-NUM
	IF MAP_GLS_FOR = "BMS" THEN
		MAP_NUM_FNC = GEN_EDT_KEY
		MAP_NUM_FNC = GEN_EDT_IKY
		MAP_NUM_FNC = GEN_EDT_MKY
		MAP_NUM_FNC = GEN_EDT_AKY
		MAP_NUM_FNC = GEN_EDT_FLD
	ELSE
		MAP_NUM_FNC = GEN_ATR_LEN
	END IF

   END DEF

 !============ ESCRIBE EN ARCHIVO BI ELEMENTOS USADOS EN EL MAPA ===========

   DEF INTEGER MAP_GEN_FIF

      PRINT #MAP_CNL_FINF,'% FCH = '    + FEC$
      PRINT #MAP_CNL_FINF,'% NUM = '    + NRO$
      PRINT #MAP_CNL_FINF,'% VRF = '    + VRF$
      PRINT #MAP_CNL_FINF,'% IDC = '    + IDC$
      PRINT #MAP_CNL_FINF,'% BUSTAB = ' + BUSTAB$
      PRINT #MAP_CNL_FINF,'% VALCOD = ' + VALCOD$
      PRINT #MAP_CNL_FINF,'% BUSMSC = ' + BUSMSC$
      PRINT #MAP_CNL_FINF,'% VALIND = ' + VALIND$
      PRINT #MAP_CNL_FINF,'% BUSOFI = ' + BUSOFI$
      PRINT #MAP_CNL_FINF,'% VALOFI = ' + VALOFI$
      PRINT #MAP_CNL_FINF,'% BUSUSR = ' + BUSUSR$
      PRINT #MAP_CNL_FINF,'% VALUSR = ' + VALUSR$
      PRINT #MAP_CNL_FINF,'% VALTDU = ' + VALTDU$
      PRINT #MAP_CNL_FINF,'% ERRGLS = ' + ERRGLS$

   END DEF

 !====================== FINALIZACION ======================

   DEF INTEGER MAP_FNC_FIN

   WBMS_NUM_SOR = 0
   MAP_NUM_LINE = 0
   MAP_NUM_COLU = 0
   IF MAP_GLS_FOR = "BMS" THEN
	MAP_GLS_WRIT = MAP_FNC_WBMS("         PRINT NOGEN")
	MAP_GLS_WRIT = MAP_GLS_PROY + "A" + MAP_GLS_MAPA +&
	MAP_VEC_BLK(LEN(MAP_GLS_PROY + MAP_GLS_MAPA) + 1 ) +&
	"DFHMSD TYPE=&SYSPARM,TERM=3270,MODE=INOUT,LANG=COBOL,"
	CALL MAP_RUT_SPA(MAP_GLS_WRIT,71)
	MAP_GLS_WRIT = MAP_GLS_WRIT + "X"
	MAP_GLS_WRIT = MAP_FNC_WBMS(MAP_GLS_WRIT)
	MAP_GLS_WRIT = "               TIOAPFX=YES"
	MAP_GLS_WRIT = MAP_FNC_WBMS(MAP_GLS_WRIT)
	MAP_GLS_WRIT = MAP_GLS_PROY + "F" + MAP_GLS_MAPA +&
         MAP_VEC_BLK(LEN(MAP_GLS_PROY + MAP_GLS_MAPA) + 1 ) +&
         "DFHMDI SIZE=(" + STR$(MAP_NUM_SUPE -&
            MAP_NUM_INFE + 1 ) + ",80),LINE=" + STR$(MAP_NUM_INFE) +&
            ",COLUMN=1,CTRL=(FREEKB)"
	MAP_GLS_WRIT = MAP_FNC_WBMS(MAP_GLS_WRIT)

	WBMS_NUM_SOR = 5
	MAP_GLS_WRIT = "SCRMENS  DFHMDF POS=(" + STR$(24 - MAP_NUM_INFE + 1) +&
         ",01),ATTRB=(ASKIP,BRT),LENGTH=79,"
	CALL MAP_RUT_SPA(MAP_GLS_WRIT,71)
	MAP_GLS_WRIT = MAP_GLS_WRIT + "X"
	MAP_GLS_WRIT = MAP_FNC_WBMS(MAP_GLS_WRIT)
	MAP_GLS_WRIT = "               INITIAL=' '"
	MAP_GLS_WRIT = MAP_FNC_WBMS(MAP_GLS_WRIT)
	MAP_GLS_WRIT = "         DFHMSD TYPE=FINAL"
	MAP_GLS_WRIT = MAP_FNC_WBMS(MAP_GLS_WRIT)
	MAP_GLS_WRIT = "         END"
	MAP_GLS_WRIT = MAP_FNC_WBMS(MAP_GLS_WRIT)
   END IF
   WTXT_NUM_SOR = 3
 !!!   MAP_GLS_TXT = MAP_FNC_WTXT(V_ANSI(MG_C) + " ")
   MAP_GLS_TXT = MAP_FNC_WTXT("      * Linea de Mensajes")
   IF MAP_GLS_FOR = "BMS" THEN
	MAP_GLS_TXT = MAP_FNC_WTXT(V_ANSI(MG_B) + "05 " + MAP_GLS_MAPA +&
			"-GLS-MENS-LEN       COMP   PIC S9(04).")
	MAP_GLS_TXT = MAP_FNC_WTXT(V_ANSI(MG_B) + "05 " + MAP_GLS_MAPA +&
			"-GLS-MENS-ATR              PIC  X(01).")
   END IF
   MAP_GLS_TXT = MAP_FNC_WTXT(V_ANSI(MG_B) + "   05 " + MAP_GLS_MAPA +&
         "-GLS-MENS.")
   MAP_GLS_TXT = MAP_FNC_WTXT(V_ANSI(MG_B) + "      07 " + MAP_GLS_MAPA +&
            "-GLS-MEN1               PIC  X(40).")
   MAP_GLS_TXT = MAP_FNC_WTXT(V_ANSI(MG_B) + "      07 " + MAP_GLS_MAPA +&
            "-GLS-MEN2               PIC  X(39).")
   WTXT_NUM_SOR = 0
   MAP_NUM_LINE = 1
   MAP_NUM_COLU = 0
   MAP_NUM_CORR = 0

   MAP_GLS_TXT = MAP_FNC_WTXT(V_ANSI(MG_B) + "03 " +&
		 MAP_GLS_MAPA + "-CFLD         VALUE " +&
		 STR$(MAP_NUM_CFLD) + "        PIC 9(02).")
   END DEF

 !---------------------------- MODULO PRINCIPAL --------------------------------

   ON ERROR GO TO MAP_LAB_BAD
   MAP_NUM_FNC = MAP_FNC_INI
   MAP_NUM_FNC = MAP_FNC_FOR
   MAP_NUM_FNC = MAP_FNC_ATC

 LABE_SCRS:
   WBMS_NUM_SOR = 3
      
   WHILE TOKEN <> ETXTOK    
      IF VALTOKEN = "TEXT" THEN
         MAP_NUM_FNC = MAP_FNC_TEX
      ELSE
      IF VALTOKEN = "FIELD" THEN
         MAP_NUM_FNC = MAP_FNC_FLD
      END IF
      END IF
      TOKEN = NEXTTOKEN
   NEXT

   MAP_NUM_FNC = MAP_FNC_FIN
   MAP_NUM_FNC = MAP_FNC_COD
   MAP_NUM_FNC = MAP_FNC_GEN
   CALL PUT_GEN(MG_N,"*% INCLUDE EOF" + MAP_GLS_PBM )
   CALL PUT_GEN(MG_N,"*% INCLUDE EOF_VAX" + MAP_GLS_PBM )
 !!!   CALL PUT_GEN(MG_N,"*% INCLUDE EOF_IBM" + MAP_GLS_PBM )

   MAP_NUM_FNC = MAP_GEN_FIF
   
   IF MAP_GLS_MAT = "VSAM" THEN
      GO TO LABE_CONT
   END IF
   MAP_CNL_AUX% = 8
   MAP_FIL_AUX$ = MAP_GLS_MAPA + "MAT.GEN"
   OPEN MAP_FIL_AUX$ FOR OUTPUT AS FILE #MAP_CNL_AUX%,RECORDTYPE ANY, &
      ORGANIZATION SEQUENTIAL VARIABLE,   RECORDSIZE 255

   PRINT #MAP_CNL_AUX%,'         1         2         3         '+&
           '4         5         6         7         8'  
   PRINT #MAP_CNL_AUX%,'123456789 123456789 123456789 123456789'+&
           ' 123456789 123456789 123456789 123456789 '
   PRINT #MAP_CNL_AUX%,'         '
   FOR I% = 1 TO 24
   VARI_AUXI$ = ""
   FOR J% = 1 TO 80
   IF MAP_MAT_SCRN(I%,J%) <> 0 THEN
      VARI_AUXI$ = VARI_AUXI$ + STR$(MAP_MAT_SCRN(I%,J%))
   ELSE
      VARI_AUXI$ = VARI_AUXI$ + "."
   END IF
   NEXT J%
   PRINT #MAP_CNL_AUX%,VARI_AUXI$
   NEXT I%
 LABE_CONT:
   IF MAP_SWI_ERRO = MAP_CTE_YES THEN
      PRINT ""
   END IF
   CALL LIB$DO_COMMAND('$ EDTFRM ' + MAP_GLS_MAPA)

   GO TO LABE_ATRA
   
 MAP_LAB_BAD:
   PRINT MAP_ASC_BEL,MAP_ASC_BEL,MAP_ASC_BEL
   IF ERR = 2 THEN
      PRINT MAP_FIL_FLG,FILE_WSS, " : NOMBRE DE ARCHIVO ILEGAL"
   ELSE 
   IF ERR = 5 THEN
      PRINT MAP_FIL_FLG,FILE_WSS, " ARCHIVO INEXISTENTE       "
   ELSE
   IF ERR = 55 THEN
      PRINT MAP_FIL_FLG,FILE_WSS, " Indice fuera de rango "
   ELSE
      PRINT   "ERROR(";ERR;") ";ERT$(ERR);" en linea ";erl;&
         ", MODULO ";ern$
   END IF
   END IF
   RESUME 999
999
 LABE_ATRA:
 END
1300   SUB MAP_RUT_SPA(STRING SPA_GLS_STR BY DESC,REAL SPA_NUM_LMT BY REF)
      WHILE LEN(SPA_GLS_STR) < SPA_NUM_LMT
         SPA_GLS_STR = SPA_GLS_STR + " "
      NEXT
   END SUB

1400   SUB MAP_RUT_PIC(STRING PIC_GLS_PIC BY DESC)
      PIC_SWI_ALL$ = "YES"
      PIC_I% = 1
      PIC_J% = LEN(PIC_GLS_PIC)
      PIC_0$ = ""
      IF PIC_J% < 10 THEN
         PIC_0$ = "0"
      END IF
      PIC_GLS_FST$ = LEFT$(PIC_GLS_PIC,1)
      WHILE PIC_I% <= PIC_J%
         IF MID$(PIC_GLS_PIC,PIC_I%,1) <> PIC_GLS_FST$ THEN
            PIC_SWI_ALL$ = "NOT"
            PIC_I% = PIC_J% + 1
         END IF
         PIC_I% = PIC_I% + 1
      NEXT
      IF PIC_SWI_ALL$ = "YES" THEN
         PIC_GLS_PIC = PIC_GLS_FST$ + "(" +&
                  PIC_0$ + STR$(PIC_J%) + ")"
      END IF
   END SUB

1600   SUB PUT_GEN(INTEGER MARGEN, STRING REGISTRO BY DESC)
      DECLARE STRING REG_GEN   , V_ANSI(6)
      DECLARE INTEGER   CONSTANT          &
         MG_C       =  1,   MG_A       =  2,&
         MG_B       =  3,   MG_1       =  4,&
         MG_2       =  5,   MG_N       =  6
      V_ANSI(MG_C) = "      "
      V_ANSI(MG_A) = "       "
      V_ANSI(MG_B) = "           "
      V_ANSI(MG_1) = "                "
      V_ANSI(MG_2) = "                   "
      V_ANSI(MG_N) = ""
      REG_GEN = V_ANSI(MARGEN) + REGISTRO
      IF LEN(REG_GEN) > 72 THEN
         GEN_I% = 1
         GEN_J% = 3
         WHILE MID$(REG_GEN,GEN_I%,4) <> " TO " AND &
               GEN_I% < LEN(REG_GEN) 
            GEN_I% = GEN_I% + 1
         NEXT
         IF GEN_I% > 72 THEN
            GEN_I% = 71
            GEN_J% = 0
            WHILE MID$(REG_GEN,GEN_I%,1) <> " "
               GEN_I% = GEN_I% - 1
            NEXT
         END IF
         PRINT #3,LEFT$(REG_GEN,GEN_I% + GEN_J%)
         PRINT #3,V_ANSI(MG_1) + RIGHT$(REG_GEN,GEN_I% + 1 +&
                     GEN_J%)
      ELSE
         PRINT #3,REG_GEN
      END IF
   END SUB



1700   SUB GENRPTMAN (STRING STRG BY DESC,STRING MANT)
 !
 !  Esta subrutina  recibe en el primer parametro (STRG) la variable a
 !  modificar y mantiene en ella solo aquellos caracteres que aparecen 
 !  en el segundo parametro (MANT)
 !  Ejemplo:
 !   Si PICT_FILD tiene '99.999.999,99' despues de un
 !      CALL GENRPTMAN(PICT_FILD,"9,") 
 !      PICT_FILD tiene '99999999,99'
 !
   DECLARE      INTEGER      SIZE_STRG
   DECLARE      INTEGER      SIZE_MANT
   DECLARE      STRING      VARI_AUXI
   DECLARE      STRING      VARI_MIDD

   SIZE_STRG = LEN(STRG) 
   SIZE_MANT = LEN(MANT)
   VARI_AUXI = ""
   FOR I% = 1 TO SIZE_STRG
      VARI_MIDD = MID$(STRG,I%,1) 
      FOR J% = 1 TO SIZE_MANT
         IF MID$(MANT,J%,1) = VARI_MIDD THEN
             VARI_AUXI = VARI_AUXI + VARI_MIDD 
         END IF
      NEXT J%
   NEXT I%
   STRG = VARI_AUXI
   END SUB



1800   SUB GENRPTREP (STRING ESTR_INGS BY DESC, STRING CRTR_ORIG BY DESC,&
          STRING CRTR_REEM BY DESC)

 !   Reemplaza en ESTR_INGS el CRTR_ORIG(caracter original)
 !   por CRTR_REEM(carater(es) de reemplazo)
 !
 !   Ejemplo de llamada de esta subrutina:
 !       PICT_FILD = 999999,999
 !      CALL GENRPTREP(PICT_FILD,",","V")
 !   Esta subrutina devuelve en PICT_FILD el valor 999999V999

   LARGO_STR% = LEN(ESTR_INGS) 
   VAR_AUX$ = ""
   FOR I% = 1 TO LARGO_STR%
      IF MID$(ESTR_INGS,I%,1) = CRTR_ORIG THEN
         VAR_AUX$ = VAR_AUX$ + CRTR_REEM
      ELSE
         VAR_AUX$ = VAR_AUX$ + MID$(ESTR_INGS,I%,1)
      END IF
   NEXT I%
   ESTR_INGS = VAR_AUX$
   END SUB

