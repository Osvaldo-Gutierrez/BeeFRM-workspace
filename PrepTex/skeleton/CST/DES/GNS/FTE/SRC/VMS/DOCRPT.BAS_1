100
   DECLARE INTEGER                      			 &
	NUMTOKEN           					,&
	SZTOKEN            					,&
	TOKEN              					,&
	P_P                					,&
	P_Q                					,&
	SZ_I_B

   DECLARE   STRING						 &
	C_Q                					,&
	VALTOKEN           					,&
	STRTOKEN

   DECLARE INTEGER   CONSTANT					 &
	KEYTOK = 1,         		IDNTOK = 2		,&
	NUMTOK = 3,         		STRTOK = 4		,&
	CHRTOK = 5,         		EOLTOK = 6		,&
	ETXTOK = 7,         		HTAB   = 9

200
   DECLARE INTEGER						 &
	MAP_CNL_FBMS,			MAP_TOT_CMPO		,&
	MAP_CNL_FGEN,			MAP_TOT_CIDX		,&
	MAP_CNL_FFLG,			MAP_TOT_FILE		,&
	MAP_CNL_FTXT						,&
					MAP_NUM_PICT		,&
	MAP_SWI_FILE,        		MAP_NUM_LINE        	,&
	MAP_SWI_PFLD,			MAP_NUM_COLU		,&
	MAP_SWI_FECH,			MAP_NUM_CORR		,&
	MAP_SWI_VERF,			MAP_NUM_TTEX		,&
	MAP_SWI_CFRM,			MAP_NUM_INFE        	,&
	MAP_SWI_GLOS,			MAP_NUM_SUPE		,&
	MAP_SWI_ERRO						,&
	MAP_IND_CMPO						,&
	WTXT_NUM_SOR,       		MAP_IND_NUM		,&
	MAP_VEC_UNDE(10)					,&
	MAP_VEC_FICO(150,2)					,&
	MAP_VEC_TFLD(150)					,&
					MAP_VEC_DERI(150)	,&
	MAP_VEC_PFLD(150),  		MAP_VEC_MOVE(150)  	,&
	MAP_VEC_SCLR(150), 		MAP_VEC_LGLS(150)	,&
	OVR_NUM_COL,        		MAP_NUM_VSZ        ,&
	OVR_NUM_FIL,        MAP_NUM_ASC        ,&
	MAP_NUM_BAS			        ,&
	BMS_NUM_PIC        ,&
	ANT_INDEX,          NIV_INDEX          ,&
	TMP_INDEX,          MAP_VEC_PROT(150)  ,&
	ACT_INDEX,          MAP_VEC_TIDX(150)        ,&
	MAP_VEC_VALI(150),   MAP_VEC_PKEY(150)  ,&
	MAP_NUM_NCS,        MAP_NUM_NCI        ,&
	MAP_VEC_NUME(150)                       ,&
	MAP_NUM_TFEC,       OVR_NUM_LEN        ,&
	OVR_NUM_ADI,        MAP_VEC_ENT(150)   ,&
	MAP_VEC_DECM(150),   MAP_VEC_BYA(150)  ,&
	MAP_VEC_VAUT(150),  MAP_VEC_GLOS(150)  ,&
	MAP_VEC_FECH(150),	MAP_TOT_NOMB   ,&
	MAP_TOT_REPE	,	MAP_VEC_POSI(150,2),&
	MAP_TOT_LINE,		MAP_TOT_IMPR	,&
	MAP_FST_IMPR

   DECLARE   STRING                           &
      MAP_ASC_BEL,        MAP_ASC_NWL        ,&
      MAP_FIL_BMS,        MAP_FIL_FLG        ,&
      MAP_GLS_WRIT,       MAP_GLS_FLG        ,&
      WRT_GLS_LIN,        WRT_GLS_COL        ,&
      WRT_GLS_COR,        MAP_GLS_PIC        ,&
      WRT_GLS_DAT,        MAP_GLS_DEF        ,&
      MAP_GLS_MAPA,       MAP_GLS_PROY       ,&
      MAP_GLS_PBM,        MAP_GLS_TYP        ,&
      MAP_GLS_L11,        MAP_GLS_L12        ,&
      MAP_GLS_L13,        MAP_GLS_CMP        ,&
      MAP_GLS_L21,        MAP_GLS_L31        ,&
      MAP_GLS_FIL,        MAP_VEC_IMPR(150)   ,&
      MAP_GLS_COL,        MAP_GLS_VIX(150)   ,&
      MAP_GLS_POS,        MAP_GLS_BMS        ,&
      MAP_GLS_TXT,        MAP_GLS_PXZ        ,&
      MAP_GLS_STP,        MAP_FIL_GEN        ,&
      MAP_VEC_CMP(150),   MAP_VEC_REGI(150)   ,&
      MAP_VEC_TIPO(150),   MAP_VEC_NOMB(150)   ,&
      V_ANSI(6),          MAP_FIL_TXT        ,&
      MAP_VEC_FIL(10),    MAP_GLS_HLP        ,&
      MAP_GLS_DFL,        MAP_GLS_MST        ,&
      MAP_GLS_HFOR	     ,&
      MAP_VEC_NRTN(150),   MAP_GLS_RED        ,&
      MAP_GLS_VFEC(4),    MAP_GLS_VRF(6)     ,&
      SGN_LEAD,           MAP_VEC_TAB(150)   ,&
      MAP_VEC_DMSA(5),    MAP_GLS_PRE        ,&
      MAP_GLS_SFEC,       MAP_GLS_IDC(2)     ,&
      MAP_GLS_NOMB,        MAP_GLS_OCC        ,&
      MAP_GLS_MAT,	  MAP_GLS_EDTN	     ,&
      MAP_GLS_NIV_FLD,    MAP_GLS_SPA_FLD    ,&
      MAP_GLS_NIV_FEC,    MAP_GLS_SPA_FEC    ,&
      MAP_GLS_NIV_VRF,    MAP_GLS_SPA_VRF    ,&
      MAP_GLS_NIV_IDC,    MAP_GLS_SPA_IDC    ,&
      MAP_SEPA_PIC,       MAP_SEPA_LEN       ,&
      MAP_SEPA_ATR,       GEN_GLS_PRT        ,&
      MAP_VEC_NMR(150),   GEN_GLS_VAL        ,&
      MAP_GLS_PIC_ALF,    MAP_GLS_PIC_EDT    ,&
      MAP_VEC_ISG(150),	  MAP_GLS_DARK	     ,&
      FIO_CMND,		  MAP_MAT_SCRN(30,150),&
      MAP_GLS_VCOD,       MAP_GLS_VIND       ,&
      MAP_GLS_GCOD,       MAP_GLS_GIND       ,&
      MAP_GLS_IDEN,	  MAP_VEC_REPE(150)  ,&
      MAP_VEC_HLP(150),	  MAP_VEC_BLKS(150)  ,&
      MAP_GLS_AUX,	  MAP_GLS_BCOD	     ,&
      MAP_GLS_LINE

   DECLARE   STRING CONSTANT			&
      FIO_STAT_OKS  = "0"

   DECLARE STRING POS_VEC_ZRS(4)
      POS_VEC_ZRS(1) = "0"
      POS_VEC_ZRS(2) = ""
      POS_VEC_ZRS(3) = ""
      POS_VEC_ZRS(4) = ""

   DECLARE INTEGER   CONSTANT                 &
      MAP_CTE_YES =  1,   MAP_CTE_NOT =  0   ,&
      MAP_ASC_LFD = 10,   MAP_ASC_CRT = 13   ,&
      MAP_CTE_NUM =  0,   MAP_CTE_ALF =  1   ,&
      MAP_CTE_IDF =  2,   MAP_IND_FLD =  0   ,&
      MAP_IND_IKY =  1,   MAP_IND_MKY =  2   ,&
      MAP_IND_AKY =  3                       ,&
      MAP_IND_FIC =  4 				,&
      MG_C       =  1,   MG_A       =  2     ,&
      MG_B       =  3,   MG_1       =  4     ,&
      MG_2       =  5,   MG_N       =  6     ,&
      MAP_NUM_CODI  = 1, MAP_NUM_MISC = 2    ,&
      FEC_IND_FFEC  = 1, FEC_IND_FDMA = 2    ,&
      FEC_IND_FMSA  = 3, FEC_IND_FFMA = 4    ,&
      FEC_IND_FFSA  = 5, FEC_IND_FFDM = 6    ,&
      FEC_IND_FFFA  = 7			     ,&
      MAP_NUM_MHOR  = 3 

 !====================== TOKEN ==========================================

    DEF INTEGER NEXTTOKEN
    ON ERROR GO TO MAP_LAB_ERR
       IF TOKEN = ETXTOK THEN
          NEXTTOKEN = ETXTOK
          GO TO NEX_LAB_ASG
       END IF
       P_P = P_Q 
 NEX_LAB_NEW:
       WHILE (MID$(I_B$,P_P,1) = " " OR ASCII(MID$(I_B$,P_P,1)) = HTAB) AND &
          P_P <= SZ_I_B
          P_P = P_P + 1
       NEXT
       P_Q = P_P 
       IF P_P > SZ_I_B OR I_B$ = "" THEN
          GET #MAP_CNL_FFLG
          SZ_I_B = RECOUNT
          MOVE FROM #MAP_CNL_FFLG , I_B$ = SZ_I_B
          P_P, P_Q  = 1
          GO TO NEX_LAB_NEW
        END IF
        C_Q = MID$(I_B$,P_Q,1)
        IF (C_Q >= "A" AND C_Q <= "Z") OR (C_Q >= "a" AND C_Q <= "z") THEN
            WHILE (MID$(I_B$,P_P,1) >= "A" AND MID$(I_B$,P_P,1) <= "Z" &
               OR  MID$(I_B$,P_P,1)  = "_"      &
          OR  MID$(I_B$,P_P,1) >= "a" AND &
              MID$(I_B$,P_P,1) <= "z")
                        P_P = P_P + 1
         NEXT
         SZTOKEN = P_P - P_Q
         NEXTTOKEN = IDNTOK
         VALTOKEN = MID$(I_B$,P_Q,SZTOKEN)
      ELSE
      IF C_Q >= "0" AND C_Q <= "9" THEN
         WHILE MID$(I_B$,P_P,1) >= "0" AND MID$(I_B$,P_P,1) <= "9"
            P_P = P_P + 1
         NEXT
         SZTOKEN = P_P - P_Q
         NEXTTOKEN = NUMTOK
         VALTOKEN = MID$(I_B$,P_Q,SZTOKEN)
         NUMTOKEN  = VAL(VALTOKEN)
      ELSE
      IF C_Q = '"'  OR C_Q = "'" THEN
         P_P = P_P + 1
         WHILE MID$(I_B$,P_P,1) <> C_Q
            P_P = P_P + 1
         NEXT
         SZTOKEN = P_P - (P_Q + 1)
         P_P = P_P + 1
         NEXTTOKEN = STRTOK
         STRTOKEN = MID$(I_B$,P_Q + 1,SZTOKEN)
         VALTOKEN = C_Q + STRTOKEN + C_Q
      ELSE
         NEXTTOKEN = CHRTOK
         VALTOKEN = MID$(I_B$,P_P,1)
       P_P = P_P + 1
       SZTOKEN = 1
      END IF
      END IF
      END IF
      GO TO NEX_LAB_ASG
 MAP_LAB_ERR:
      CLOSE #MAP_CNL_FFLG
      IF ERR = 11 THEN
          NEXTTOKEN = ETXTOK
      ELSE
          PRINT   "ERROR(";ERR;") ";ERT$(ERR);" en linea ";erl;&
            ", MODULO ";ern$
       END IF
       RESUME 800
 NEX_LAB_ASG:
       P_Q = P_P
800
   END DEF

 !====================== INICIALIZACION ======================
805
   DEF INTEGER MAP_FNC_INI
    ON ERROR GO TO MAP_LAB_OPE

      CALL LIB$GET_SYMBOL("GNS$PRY",MAP_GLS_PROY)
      CALL LIB$GET_SYMBOL("GNS$FIL",MAP_GLS_FLG)
      CALL LIB$GET_SYMBOL("PTH",MAP_FIL_FLG)
      CALL LIB$GET_SYMBOL("GNS$MAP",MAP_GLS_MAT)
      CALL LIB$GET_SYMBOL("MAP$LINE",MAP_GLS_LINE)
   IF MAP_GLS_LINE = "136" THEN
	MAX_COLUM% = 136
	MAT_COL_INIT = 2
	MAT_COL_FINI = 135
   ELSE
	MAX_COLUM% = 132
	MAT_COL_INIT = 0
	MAT_COL_FINI = 133
   END IF
   MAP_TOT_LINE  = 0

	FOR I% = 1 TO 30
		FOR J% = 1 TO 150
			MAP_MAT_SCRN(I%,J%) = " "
		NEXT J%
	NEXT I%

 !!! LINEA DEL TIPO ( 1         2         3........ )
   FOR I% = 1 TO 13
	IF I% > 9 THEN
		P% = I% - 10
	ELSE
		P% = I%
	END IF
	MAP_MAT_SCRN( 1,I% * 10 + MAT_COL_INIT) = STR$( P% )
	MAP_MAT_SCRN(30,I% * 10 + MAT_COL_INIT) = STR$( P% )
   NEXT I%

 !!! LINEA DEL TIPO ( 123456789 123456789 123.......... )
   FOR I% = 0 TO 13
   FOR J% = 1 TO 10
   IF I% * 10 + J%  > 132 THEN
	GO TO FIN_CIC_LIN
   END IF
      IF J% = 10 THEN
         MAP_MAT_SCRN( 2,I%  * 10 + J% + MAT_COL_INIT ) = " "
         MAP_MAT_SCRN(29,I%  * 10 + J% + MAT_COL_INIT ) = " "
      ELSE
         MAP_MAT_SCRN( 2,I%  * 10 + J% + MAT_COL_INIT ) = STR$(J%)
         MAP_MAT_SCRN(29,I%  * 10 + J% + MAT_COL_INIT ) = STR$(J%)
      END IF
 FIN_CIC_LIN:
   NEXT J%
   NEXT I%

 !!! LINEA DEL TIPO ( -----------------------...... )
   FOR I% = MAT_COL_INIT + 1 TO MAT_COL_FINI
        MAP_MAT_SCRN(3,I%) = "-"
        MAP_MAT_SCRN(28,I%) = "-"
   NEXT I%

 !!! LINEAS DEL TIPO 01 |            | 01
 !!!                 02 |            | 02
 !!!                 03 |            | 03

    IF MAP_GLS_LINE = "136" THEN
	FOR I% = 4 TO 27
 !!! SE PONE EN DOS CASILLEROS DE LA MATRIZ
	   IF I% -3 < 10 THEN
             MAP_MAT_SCRN(I% , 1 ) = "0"
             MAP_MAT_SCRN(I% , 2 ) = STR$( I% - 3 )
             MAP_MAT_SCRN(I% , MAT_COL_FINI ) = "0"
             MAP_MAT_SCRN(I% , MAT_COL_FINI + 1) = STR$( I% - 3 )
	   ELSE
             MAP_MAT_SCRN(I% , 1 ) = LEFT$(STR$( I% - 3),1)
             MAP_MAT_SCRN(I% , 2 ) = RIGHT$(STR$(I% - 3),2)
             MAP_MAT_SCRN(I% , MAT_COL_FINI ) = LEFT$(STR$( I% - 3),1)
             MAP_MAT_SCRN(I% , MAT_COL_FINI + 1) = RIGHT$(STR$(I% - 3),2)
	   END IF
 !!!         MAP_MAT_SCRN(I% , 3 ) = "|"
 !!!         MAP_MAT_SCRN(I% , MAT_COL_FINI + 1) = "|"
	 NEXT I%
    END IF


   MAP_VEC_BLKS(1) = ""
   FOR I% = 2 TO 150
	MAP_VEC_BLKS(I%) = MAP_VEC_BLKS(I% - 1) + " "
   NEXT I%

      MAP_GLS_IDEN = DATE$(0%) + " " + TIME$(0%)
      MAP_NUM_BAS = 65
      MAP_SEPA_PIC    = "                  PIC  "
      MAP_ASC_BEL = CHR$(07)
      MAP_CNL_FFLG = 1   
      MAP_FST_IMPR = MAP_CTE_YES
	MAP_TOT_IMPR = 0
	MAP_ANT_FILA$ = ""

      MAP_NUM_INFE = 3
      MAP_NUM_SUPE = 24
      MAP_SWI_PFLD = MAP_CTE_NOT
      MAP_ASC_NWL = CHR$(MAP_ASC_CRT) + CHR$(MAP_ASC_LFD)
      P_P,P_Q = 1
806
      MAP_GLS_HLP = ""
      MAP_GLS_HFOR = ""
807
   
808   OPEN MAP_FIL_FLG FOR INPUT AS FILE #MAP_CNL_FFLG,RECORDTYPE ANY,   &
         ORGANIZATION SEQUENTIAL VARIABLE,   RECORDSIZE 255
   
      GET #MAP_CNL_FFLG
      SZ_I_B = RECOUNT
      MOVE FROM #MAP_CNL_FFLG , I_B$ = SZ_I_B
      GO TO FIN_LAB_INI
 MAP_LAB_OPE:
   PRINT MAP_ASC_BEL,MAP_ASC_BEL,MAP_ASC_BEL
   IF ERR = 2 THEN
      PRINT MAP_FIL_FLG,FILE_WSS, " : NOMBRE DE ARCHIVO ILEGAL"
   ELSE 
   IF ERR = 5 THEN
      PRINT MAP_FIL_FLG,FILE_WSS, " ARCHIVO INEXISTENTE       "
   ELSE
      PRINT   "ERROR(";ERR;") ";ERT$(ERR);" en linea ";erl;&
         ", MODULO ";ern$
   END IF
   END IF
   RESUME 809
 FIN_LAB_INI:
809
   END DEF

810
  !====================== FORM ======================

   DEF INTEGER MAP_FNC_FOR
      WHILE VALTOKEN <> "FORM"
         TOKEN = NEXTTOKEN
      NEXT
      TOKEN = NEXTTOKEN
      TOKEN = NEXTTOKEN
      TOKEN = NEXTTOKEN
      MAP_GLS_MAPA = STRTOKEN
      IF LEN(MAP_GLS_MAPA) > 3 THEN
          MAP_GLS_MAPA = RIGHT$(MAP_GLS_MAPA,3)
      END IF

      TOKEN = NEXTTOKEN
      IF VALTOKEN = 'HELP_FORM' THEN
         TOKEN = NEXTTOKEN
         TOKEN = NEXTTOKEN
         MAP_GLS_HFOR = MAP_GLS_MAPA + " : " + STRTOKEN
      END IF
   
      MAP_GLS_DFL = " IN " + MAP_GLS_MAPA + "-FLD"
      MAP_GLS_MST = MAP_GLS_PROY + MAP_GLS_MAPA + "A"
      MAP_GLS_HLP = ""
            
   END DEF
820
 !====================== AREA TO CLEAR ======================

   DEF INTEGER MAP_FNC_ATC
   WHILE VALTOKEN <> ";"
      TOKEN = NEXTTOKEN
          IF VALTOKEN = 'AREA_TO_CLEAR' THEN
             TOKEN = NEXTTOKEN
             TOKEN = NEXTTOKEN
 !!!         MAP_NUM_INFE = NUMTOKEN
             MAP_NUM_INFE = 3
             TOKEN = NEXTTOKEN
             TOKEN = NEXTTOKEN
 !!!         MAP_NUM_SUPE = NUMTOKEN
 !!!         MAP_GLS_WRIT = MAP_GLS_MAPA + STR$(MAP_NUM_SUPE - MAP_NUM_INFE + 1) +&
 !!!             ",80),CTRL(PRINT)"
          END IF
   
   NEXT
   END DEF
830
 !====================== DETECTA NUMERO POR SU PICTURE ==============

   DEF INTEGER MAP_FNC_DNUM
        MAP_IND_NUM = 0
 !JSS   PRINT '**';LEN(STRTOKEN);STRTOKEN
        FOR I_NUM% = 1 TO LEN(STRTOKEN)
            C_NUM$ = MID$(STRTOKEN,I_NUM%,1)
            IF C_NUM$ <> '9' AND C_NUM$ <> '.' AND C_NUM$ <> ','&
                             AND C_NUM$ <> 'N' THEN
                MAP_IND_NUM = 1
            ELSE
 !JSS           PRINT C_NUM$
            END IF
        NEXT I_NUM%
   END DEF
835
 !====================== PICTURE ====================================

   DEF INTEGER MAP_FNC_PIC
   MAP_GLS_PIC = ""
   TOKEN = NEXTTOKEN
   TOKEN = NEXTTOKEN
   SGN_LEAD = ""
 
   IF TOKEN = NUMTOK THEN
         MAP_VEC_LGLS(MAP_IND_CMPO) = NUMTOKEN
         OVR_NUM_LEN = NUMTOKEN
         MAP_NUM_PICT = NUMTOKEN
         MAP_NUM_NCS  =  NUMTOKEN
         TOKEN = NEXTTOKEN
         MAP_GLS_PIC = ""
         FOR I% = 1 TO MAP_NUM_PICT
            MAP_GLS_PIC = MAP_GLS_PIC + STRTOKEN
         NEXT I%
   ELSE
        MAP_NUM_FNC = MAP_FNC_DNUM
        IF MAP_IND_NUM = 0 THEN
            MAP_VEC_NUME(MAP_TOT_CMPO) = MAP_CTE_YES
        END IF
        OVR_NUM_LEN = LEN(STRTOKEN)
        MAP_VEC_NMR(MAP_IND_CMPO) = "NN9"
        MAP_VEC_ISG(MAP_IND_CMPO) = "N"
        IF MID$(STRTOKEN,1,1) = "N" THEN
            MAP_VEC_NMR(MAP_IND_CMPO) = "NS9"
            MAP_VEC_ISG(MAP_IND_CMPO) = "S"
            SGN_LEAD = " SIGN LEADING SEPARATE"
        END IF
        MAP_GLS_PIC = STRTOKEN
        MAP_NUM_NCS = LEN(MAP_GLS_PIC)
        MAP_NUM_PICT = LEN(MAP_GLS_PIC)
        IF MAP_SWI_VERF = MAP_CTE_YES OR MAP_SWI_IDC = MAP_CTE_YES THEN
           MAP_NUM_PICT = MAP_NUM_PICT - 1
        END IF
    IF LEN(LEFT$(MAP_GLS_PIC,INSTR(0,MAP_GLS_PIC,"V"))) - 1= -1 THEN
          MAP_VEC_NMR(MAP_IND_CMPO) = MAP_VEC_NMR(MAP_IND_CMPO) + "N"
          MAP_VEC_ENT(MAP_IND_CMPO) = LEN(MAP_GLS_PIC)
          IF MAP_SWI_VERF = MAP_CTE_YES THEN
             MAP_VEC_ENT(MAP_IND_CMPO) =&
            MAP_VEC_ENT(MAP_IND_CMPO) - 1
          END IF
          MAP_VEC_DECM(MAP_IND_CMPO) = 0
      ELSE
          MAP_VEC_NMR(MAP_IND_CMPO) = MAP_VEC_NMR(MAP_IND_CMPO) + "V"
          MAP_VEC_ENT(MAP_IND_CMPO) = &
                     LEN(LEFT$(MAP_GLS_PIC,INSTR(0,MAP_GLS_PIC,"V"))) - 1
          MAP_VEC_DECM(MAP_IND_CMPO) = &
                     LEN(RIGHT$(MAP_GLS_PIC,INSTR(0,MAP_GLS_PIC,"V"))) - 1
           END IF
 !!!      CALL MAP_RUT_PIC(MAP_GLS_PIC)
   END IF

   IF MAP_SWI_FECH = MAP_CTE_YES THEN
       MAP_VEC_NUME(MAP_TOT_CMPO) = MAP_CTE_NOT
   END IF
   IF SGN_LEAD <> "" THEN
        MAP_VEC_ENT(MAP_IND_CMPO) = MAP_VEC_ENT(MAP_IND_CMPO) - 1
   END IF

   TOKEN = NEXTTOKEN
   END DEF
840
850
884
886

 !====================== UNDERCORE ======================

   DEF INTEGER MAP_FNC_UND

   MAP_TOT_CMPO = MAP_TOT_CMPO + 1
   MAP_IND_CMPO = MAP_TOT_CMPO

 UND_LAB_CIC:
   UND_TOT_UND = 0
   FOR I% = 1 TO LEN(MAP_GLS_CMP)
      IF MID$(MAP_GLS_CMP,I%,1) = "-" THEN
         UND_TOT_UND = UND_TOT_UND + 1
         MAP_VEC_UNDE(UND_TOT_UND) = I%
      END IF
   NEXT I%


 UND_LAB_FRM:

   IF MID$(MAP_GLS_CMP,MAP_VEC_UNDE(1),5) = "-FEC-" THEN
      MAP_NUM_TFEC = 4
      MAP_SWI_FECH = MAP_CTE_YES
      MAP_VEC_MOVE(MAP_TOT_CMPO) = MAP_CTE_NOT
      MAP_VEC_FECH(MAP_TOT_CMPO) = FEC_IND_FFEC
   ELSE
   IF MID$(MAP_GLS_CMP,MAP_VEC_UNDE(1),5) = "-DMA-" OR &
      MID$(MAP_GLS_CMP,MAP_VEC_UNDE(1),5) = "-AMD-" THEN
      MAP_NUM_TFEC = 3
      MAP_VEC_DMSA(1) = "D"
      MAP_VEC_DMSA(2) = "M"
      MAP_VEC_DMSA(3) = "A"
      MAP_VEC_DMSA(4) = ""
      MAP_SWI_FECH = MAP_CTE_YES
      MAP_VEC_MOVE(MAP_TOT_CMPO) = MAP_CTE_NOT
      MAP_VEC_FECH(MAP_TOT_CMPO) = FEC_IND_FDMA
   ELSE
   IF MID$(MAP_GLS_CMP,MAP_VEC_UNDE(1),5) = "-MSA-" OR &
      MID$(MAP_GLS_CMP,MAP_VEC_UNDE(1),5) = "-SAM-" THEN
      MAP_NUM_TFEC = 3
      MAP_VEC_DMSA(1) = "M"
      MAP_VEC_DMSA(2) = "S"
      MAP_VEC_DMSA(3) = "A"
      MAP_VEC_DMSA(4) = ""
      MAP_SWI_FECH = MAP_CTE_YES
      MAP_VEC_MOVE(MAP_TOT_CMPO) = MAP_CTE_NOT
      MAP_VEC_FECH(MAP_TOT_CMPO) = FEC_IND_FMSA
   ELSE
   IF MID$(MAP_GLS_CMP,MAP_VEC_UNDE(1),5) = "-FMA-" OR &
      MID$(MAP_GLS_CMP,MAP_VEC_UNDE(1),5) = "-FAM-" THEN
      MAP_NUM_TFEC = 2
      MAP_VEC_DMSA(1) = "M"
      MAP_VEC_DMSA(2) = "A"
      MAP_VEC_DMSA(3) = ""
      MAP_VEC_DMSA(4) = ""
      MAP_SWI_FECH = MAP_CTE_YES
      MAP_VEC_MOVE(MAP_TOT_CMPO) = MAP_CTE_NOT
      MAP_VEC_FECH(MAP_TOT_CMPO) = FEC_IND_FFMA
   ELSE
   IF MID$(MAP_GLS_CMP,MAP_VEC_UNDE(1),5) = "-FSA-" OR &
      MID$(MAP_GLS_CMP,MAP_VEC_UNDE(1),5) = "-FAS-" THEN
      MAP_NUM_TFEC = 2
      MAP_VEC_DMSA(1) = "S"
      MAP_VEC_DMSA(2) = "A"
      MAP_VEC_DMSA(3) = ""
      MAP_VEC_DMSA(4) = ""
      MAP_SWI_FECH = MAP_CTE_YES
      MAP_VEC_MOVE(MAP_TOT_CMPO) = MAP_CTE_NOT
      MAP_VEC_FECH(MAP_TOT_CMPO) = FEC_IND_FFSA
   ELSE
   IF MID$(MAP_GLS_CMP,MAP_VEC_UNDE(1),5) = "-FDM-" OR &
      MID$(MAP_GLS_CMP,MAP_VEC_UNDE(1),5) = "-FMD-" THEN
      MAP_NUM_TFEC = 2
      MAP_VEC_DMSA(1) = "D"
      MAP_VEC_DMSA(2) = "M"
      MAP_VEC_DMSA(3) = ""
      MAP_VEC_DMSA(4) = ""
      MAP_SWI_FECH = MAP_CTE_YES
      MAP_VEC_MOVE(MAP_TOT_CMPO) = MAP_CTE_NOT
      MAP_VEC_FECH(MAP_TOT_CMPO) = FEC_IND_FFDM
   ELSE
   IF MID$(MAP_GLS_CMP,MAP_VEC_UNDE(1),5) = "-FFA-" THEN
      MAP_NUM_TFEC = 1
      MAP_VEC_DMSA(1) = "A"
      MAP_VEC_DMSA(2) = ""
      MAP_VEC_DMSA(3) = ""
      MAP_VEC_DMSA(4) = ""
      MAP_SWI_FECH = MAP_CTE_YES
      MAP_VEC_MOVE(MAP_TOT_CMPO) = MAP_CTE_NOT
      MAP_VEC_FECH(MAP_TOT_CMPO) = FEC_IND_FFFA
   ELSE
   IF MID$(MAP_GLS_CMP,MAP_VEC_UNDE(1),5) = "-WWW-" THEN
      OVR_NUM_ADI = OVR_NUM_ADI + 2
      MAP_SWI_VERF = MAP_CTE_YES
      MAP_GLS_CMP = LEFT(MAP_GLS_CMP,MAP_VEC_UNDE(1)) +&
               "NUM" + RIGHT(MAP_GLS_CMP,MAP_VEC_UNDE(2))
      MAP_VEC_TIPO(MAP_TOT_CMPO) = "NUM"
      MAP_VEC_NUME(MAP_TOT_CMPO) = MAP_CTE_YES
   ELSE
   IF MID$(MAP_GLS_CMP,MAP_VEC_UNDE(1),5) = "-WWW-" THEN
      OVR_NUM_ADI = OVR_NUM_ADI + 2
      MAP_SWI_IDC = MAP_CTE_YES
      MAP_GLS_CMP = LEFT(MAP_GLS_CMP,MAP_VEC_UNDE(1)) +&
               "IND" + RIGHT(MAP_GLS_CMP,MAP_VEC_UNDE(2))
      MAP_VEC_TIPO(MAP_TOT_CMPO) = "IND"
   ELSE
   IF MID$(MAP_GLS_CMP,MAP_VEC_UNDE(1),5) = "-GLS-" THEN
      MAP_SWI_GLOS = MAP_CTE_YES
   ELSE
   END IF
   END IF
   END IF
   END IF
   END IF
   END IF
   END IF
   END IF
   END IF
   END IF
   MAP_VEC_TIPO(MAP_TOT_CMPO) = MID$(MAP_GLS_CMP,MAP_VEC_UNDE(1) + 1,&
               MAP_VEC_UNDE(2) - (MAP_VEC_UNDE(1) + 1))
   MAP_VEC_NOMB(MAP_TOT_CMPO) = RIGHT$(MAP_GLS_CMP,MAP_VEC_UNDE(2) + 1)
   MAP_VEC_CMP(MAP_TOT_CMPO) = MAP_GLS_CMP
   MAP_VEC_NRTN(MAP_TOT_CMPO) = MAP_GLS_CMP
   CALL GENRPTREP(MAP_VEC_NRTN(MAP_TOT_CMPO),"_","-")

   END DEF
890
 !====================== BMS ======================================

   DEF INTEGER MAP_FNC_BMS

   FOR I% = 1 TO LEN(MAP_GLS_PIC)
     MAP_MAT_SCRN(MAP_VEC_FICO(TMP_INDEX,1) + MAP_NUM_MHOR ,&
                  MAT_COL_INIT +  MAP_VEC_FICO(TMP_INDEX,2) +&
		  (I%-1) ) = MID$(MAP_GLS_PIC,I%,1)
   NEXT I%

   END DEF
 !====================== INDEX =============================

   DEF INTEGER MAP_FNC_IDX
 IDX_LAB_NEW:
   TMP_INDEX = TMP_INDEX + 1
   TOKEN = NEXTTOKEN
   TOKEN = NEXTTOKEN
   MAP_VEC_FICO(TMP_INDEX,1) = NUMTOKEN

   TOKEN = NEXTTOKEN
   TOKEN = NEXTTOKEN
   MAP_VEC_FICO(TMP_INDEX,2) = NUMTOKEN

   TOKEN = NEXTTOKEN
   TOKEN = NEXTTOKEN
   MAP_NUM_FNC = MAP_FNC_BMS
   IF VALTOKEN = ":" THEN
      GO TO IDX_LAB_NEW
   END IF      
895
   END DEF
900
 !====================== HELP ======================

   DEF INTEGER MAP_FNC_HLP
   TOKEN = NEXTTOKEN
   TOKEN = NEXTTOKEN
   MAP_VEC_HLP(MAP_IND_CMPO) = STRTOKEN
   MAP_GLS_HLP = STRTOKEN
   END DEF

 !====================== TEXT ======================
920
   DEF INTEGER MAP_FNC_TEX
   OVR_NUM_ADI = 1
   TOKEN = NEXTTOKEN
   TOKEN = NEXTTOKEN
   MAP_VEC_FICO(1,1) = NUMTOKEN
   OVR_NUM_FIL = NUMTOKEN
   MAP_NUM_LINE = NUMTOKEN
   IF MAP_SWI_PFLD = MAP_CTE_NOT THEN
      MAP_SWI_PFLD = MAP_CTE_YES
 !!!      MAP_NUM_INFE = MAP_VEC_FICO(1,1)
   END IF
   MAP_GLS_FIL = STR$(MAP_VEC_FICO(1,1) - MAP_NUM_INFE + 1 )
   IF LEN(MAP_GLS_FIL) = 1 THEN
      MAP_GLS_FIL = "0" + MAP_GLS_FIL
   END IF
   TOKEN = NEXTTOKEN
   TOKEN = NEXTTOKEN
   MAP_VEC_FICO(1,2) = NUMTOKEN - 1
   OVR_NUM_COL = NUMTOKEN - 1
   MAP_NUM_COLU = NUMTOKEN
   BMS_NUM_COL = NUMTOKEN
   MAP_GLS_COL = POS_VEC_ZRS(LEN(STR$(MAP_VEC_FICO(1,2)))) +&
            STR$(MAP_VEC_FICO(1,2))
   TOKEN = NEXTTOKEN
   TOKEN = NEXTTOKEN
   MAP_NUM_TTEX = SZTOKEN
   MAP_GLS_DEF = STRTOKEN
   TOKEN = NEXTTOKEN
   IF VALTOKEN = "&" THEN
      TOKEN = NEXTTOKEN
      MAP_GLS_DEF = MAP_GLS_DEF + STRTOKEN 
      MAP_NUM_TTEX = MAP_NUM_TTEX + SZTOKEN
      TOKEN = NEXTTOKEN
   END IF
   OVR_NUM_LEN = MAP_NUM_TTEX
   MAP_GLS_L11 = "         DFHMDF POS=(" + MAP_GLS_FIL + &
            "," + MAP_GLS_COL + "),ATTRB=(ASKIP"
   MAP_GLS_L13 = "),LENGTH=" + STR$(MAP_NUM_TTEX) + ","
   MAP_GLS_L31 = ""
   MAP_GLS_L21 = "               INITIAL='" 
   IF LEN(MAP_GLS_DEF) > 46 THEN
        MAP_GLS_L21 = MAP_GLS_L21 + LEFT$(MAP_GLS_DEF,47) + "X"
        MAP_GLS_L31 = "               " + RIGHT$(MAP_GLS_DEF,48) + "'"
   ELSE
        MAP_GLS_L21 = MAP_GLS_L21 + MAP_GLS_DEF + "'"
   END IF
   MAP_GLS_L12 = ",NORM"
   WHILE VALTOKEN <> ";"
      IF VALTOKEN = "BLINK" THEN
 !!!         MAP_NUM_INFE = 1
         MAP_SWI_PFLD = MAP_CTE_NOT
         GO TO TEX_LAB_FIN
      END IF
      TOKEN = NEXTTOKEN
   NEXT
   MAP_NUM_VSZ = MAP_NUM_TTEX + 1
930
   MAP_GLS_WRIT = MAP_GLS_L11 + MAP_GLS_L12 + MAP_GLS_L13
   CALL MAP_RUT_SPA(MAP_GLS_WRIT,71)
   MAP_GLS_WRIT = MAP_GLS_WRIT + "X"

   FOR I% = 1 TO MAP_NUM_TTEX
     MAP_MAT_SCRN(MAP_NUM_LINE + MAP_NUM_MHOR,&
                  MAT_COL_INIT + MAP_NUM_COLU + I% - 1) =&
	MID$(MAP_GLS_DEF,I%,1)
   NEXT I%

 TEX_LAB_FIN:
   END DEF

940
 !====================== FIELD ======================
   DEF INTEGER MAP_FNC_FLD
   MAP_NUM_CORR = 0
   OVR_NUM_ADI = 5
   MAP_GLS_HLP = ""
   ACT_INDEX = MAP_CTE_NOT

   MAP_NUM_ASC = MAP_NUM_BAS
   MAP_NUM_BAS = MAP_NUM_BAS + 1
   TOKEN = NEXTTOKEN
   IF VALTOKEN <> "NAME" THEN
      GO TO FLD_LAB_FLD
   END IF
   TOKEN = NEXTTOKEN
   TOKEN = NEXTTOKEN
   MAP_GLS_CMP = STRTOKEN
   MAP_NUM_FNC = MAP_FNC_UND

   TOKEN = NEXTTOKEN
   TOKEN = NEXTTOKEN
   MAP_VEC_FICO(1,1) = NUMTOKEN
   MAP_VEC_POSI(MAP_IND_CMPO,1) = NUMTOKEN
   OVR_NUM_FIL = NUMTOKEN
   IF MAP_SWI_PFLD = MAP_CTE_NOT THEN
      MAP_SWI_PFLD = MAP_CTE_YES
 !!!      MAP_NUM_INFE = MAP_VEC_FICO(1,1)
   END IF

   TOKEN = NEXTTOKEN
   TOKEN = NEXTTOKEN
   MAP_VEC_FICO(1,2) = NUMTOKEN
   MAP_VEC_POSI(MAP_IND_CMPO,2) = NUMTOKEN
   OVR_NUM_COL = NUMTOKEN - 3
   
   TOKEN = NEXTTOKEN
   TOKEN = NEXTTOKEN
950
   IF VALTOKEN = 'PICTURE' THEN
           MAP_NUM_FNC = MAP_FNC_PIC
   END IF
   IF VALTOKEN = 'INDEX' THEN
      TOKEN = NEXTTOKEN
      MAP_NUM_FNC = MAP_FNC_IDX
   ELSE
      MAP_TOT_CIDX = 1
   END IF
   IF VALTOKEN = 'HELP' THEN
      MAP_NUM_FNC = MAP_FNC_HLP
   END IF
960
   WHILE VALTOKEN <> ";"
      IF VALTOKEN = "NOECHO" THEN
         MAP_VEC_BYA(MAP_IND_CMPO) = 3
         IF MAP_SWI_VERF = MAP_CTE_YES THEN
            MAP_VEC_BYA(MAP_TOT_CMPO+1) = 3
         END IF
      ELSE
      IF VALTOKEN = "AUTOTAB" THEN
         MAP_VEC_TAB(MAP_IND_CMPO) =&
            ",ATTRB=(PROT,ASKIP),LENGTH=1,"
      END IF
      END IF
      TOKEN = NEXTTOKEN
   NEXT
   MAP_NUM_LINE = MAP_VEC_FICO(1,1)
   MAP_NUM_COLU = MAP_VEC_FICO(1,2)

 !!! Setea valores para funcion del BMS
   BMS_NUM_PIC = MAP_NUM_PICT
   IF MAP_SWI_VERF = MAP_CTE_YES THEN
      BMS_NUM_PIC = MAP_NUM_PICT - 1
   END IF

 !!! Area_total_campo = Delm_izq + attrb_byte + pic_campo   + delm_izq
   MAP_NUM_VSZ =    2        + 1          + BMS_NUM_PIC + 2

   FOR L% = 1 TO MAP_TOT_CIDX
 !!! Setea fila-columna para el sort
      BMS_NUM_COL =  MAP_VEC_FICO(L%,2)
      MAP_NUM_LINE = MAP_VEC_FICO(L%,1)
      MAP_NUM_COLU = MAP_VEC_FICO(L%,2)

 !!! FILA DEL CAMPO

      MAP_GLS_FIL = STR$(MAP_VEC_FICO(L%,1) - MAP_NUM_INFE + 1 )
      IF LEN(MAP_GLS_FIL) = 1 THEN
         MAP_GLS_FIL = "0" + MAP_GLS_FIL
      END IF

      MAP_GLS_COL = STR$(MAP_VEC_FICO(L%,2) )
      IF LEN(MAP_GLS_COL) = 1 THEN
         MAP_GLS_COL = "0" + MAP_GLS_COL
      END IF

      TMP_INDEX = 1
      MAP_NUM_FNC = MAP_FNC_BMS
   NEXT L%

 FLD_LAB_FLD:
   END DEF
962



 !!!   FUNCIONES BLOQUES DE CMAPOS
 !!!   ===========================

   DEF INTEGER GEN_PUT_HDR
	PRINT #MAP_CNL_AUX%,""
	LEN_HFOR% = 66 - LEN(MAP_GLS_HFOR) / 2
	PRINT #MAP_CNL_AUX%,MAP_VEC_BLKS(LEN_HFOR%) + MAP_GLS_HFOR
	PRINT #MAP_CNL_AUX%,""
	PRINT #MAP_CNL_AUX%,""

	PRINT #MAP_CNL_AUX%,"-------------------------------------------" +&
			    "-------------------------------------------" +&
			    "----------------------------------------------"

	PRINT #MAP_CNL_AUX%," Fila   Col Nombre                           Especificacion en help de campo"
	PRINT #MAP_CNL_AUX%,"            Campo"

	PRINT #MAP_CNL_AUX%,"-------------------------------------------" +&
			    "-------------------------------------------" +&
			    "----------------------------------------------"
	PRINT #MAP_CNL_AUX%,""
	PRINT #MAP_CNL_AUX%,""
	MAP_TOT_LINE = 12

   END DEF

   DEF INTEGER MAP_PUT_AUX
	PRINT #MAP_CNL_AUX%,MAP_GLS_AUX
	MAP_TOT_LINE = MAP_TOT_LINE + 1
	IF MAP_TOT_LINE > 53 THEN
		MAP_NUM_FNC = GEN_PUT_HDR
	END IF
   END DEF

   DEF INTEGER MAP_PUT_IMPR
	MAP_TOT_IMPR = MAP_TOT_IMPR + 1
	MAP_VEC_IMPR(MAP_TOT_IMPR) = MAP_GLS_AUX
   END DEF

   DEF INTEGER MAP_FNC_IMPR
	IF ( MAP_TOT_IMPR + MAP_TOT_LINE ) > 53 THEN
		MAP_NUM_FNC = GEN_PUT_HDR
	END IF

	FOR I% = 1 TO MAP_TOT_IMPR
		MAP_GLS_AUX = MAP_VEC_IMPR(I%)
		MAP_NUM_FNC = MAP_PUT_AUX
	NEXT I%

	MAP_GLS_AUX = " "
	MAP_NUM_FNC = MAP_PUT_AUX
	MAP_TOT_IMPR = 0
   END DEF

   DEF INTEGER MAP_GET_ATR
	IF MAP_VEC_POSI(J%,1) < 1 THEN
	    GO TO FIN_GET_ATR
	END IF

	MAP_GLS_FILA$ = FORMAT$(MAP_VEC_POSI(J%,1),"##")
	MAP_BKP_FILA$ = MAP_GLS_FILA$

	MAP_GLS_COLU$ = FORMAT$(MAP_VEC_POSI(J%,2),"###")


	IF MAP_FST_IMPR = MAP_CTE_YES THEN
		MAP_FST_IMPR = MAP_CTE_NOT
	ELSE
	IF MAP_ANT_FILA$ <> MAP_GLS_FILA$ THEN
		MAP_NUM_FNC = MAP_FNC_IMPR
	ELSE
		MAP_GLS_FILA$ = "  "
	END IF
	END IF 

	LEN_NTRN% = LEN(MAP_VEC_NRTN(J%))
	ATR_GLS_NRTN$ = MAP_VEC_NRTN(J%) +&
			MAP_VEC_BLKS( 30 - LEN_NTRN% )
	MAP_GLS_AUX = ". " + MAP_GLS_FILA$ + "   " + &
			MAP_GLS_COLU$ + "  " + ATR_GLS_NRTN$  + "  " + &
			" " + MAP_VEC_HLP(J%)
	MAP_NUM_FNC = MAP_PUT_IMPR


	MAP_GLS_FILA$ = MAP_BKP_FILA$
	MAP_ANT_FILA$ = MAP_GLS_FILA$
 FIN_GET_ATR:
	
   END DEF

   DEF INTEGER GEN_PUT_ALL
	FOR J% = 1 TO MAP_TOT_CMPO
		MAP_GLS_VCOD = ""
		MAP_GLS_BCOD = ""
		MAP_NUM_FNC = MAP_GET_ATR
	NEXT J%
 !ISP SE REQUIERE ESCRIBIR ULTIMO BLOQUE DE CAMPOS
	MAP_NUM_FNC = MAP_FNC_IMPR
	MAP_GLS_AUX =  ""
	MAP_NUM_FNC = MAP_PUT_AUX
   END DEF

   DEF INTEGER MAP_FNC_GEN
 ! >> PUT
	MAP_NUM_FNC = GEN_PUT_HDR
	MAP_NUM_FNC = GEN_PUT_ALL
   END DEF

 !====================== FINALIZACION ======================

   DEF INTEGER MAP_FNC_FIN

   MAP_NUM_LINE = 0
   MAP_NUM_COLU = 0
   CALL MAP_RUT_SPA(MAP_GLS_WRIT,71)
   CALL MAP_RUT_SPA(MAP_GLS_WRIT,71)
   END DEF

 !---------------------------- MODULO PRINCIPAL --------------------------------

 !!!   ON ERROR GO TO MAP_LAB_BAD
   MAP_NUM_FNC = MAP_FNC_INI
   MAP_NUM_FNC = MAP_FNC_FOR
   MAP_NUM_FNC = MAP_FNC_ATC

 LABE_SCRS:
      
   WHILE TOKEN <> ETXTOK    
      IF VALTOKEN = "TEXT" THEN
         MAP_NUM_FNC = MAP_FNC_TEX
      ELSE
      IF VALTOKEN = "FIELD" THEN
         MAP_NUM_FNC = MAP_FNC_FLD
      END IF
      END IF
      TOKEN = NEXTTOKEN
   NEXT

   MAP_CNL_AUX% = 8
   MAP_FIL_AUX$ = MAP_GLS_PROY + "R" + MAP_GLS_MAPA + ".DOC"
   OPEN MAP_FIL_AUX$ FOR OUTPUT AS FILE #MAP_CNL_AUX%,RECORDTYPE ANY, &
      ORGANIZATION SEQUENTIAL VARIABLE,   RECORDSIZE 255

	MAP_GLS_AUX =  ""
	MAP_NUM_FNC = MAP_PUT_AUX
	MAP_GLS_AUX =   "  " + MAP_GLS_IDEN
	MAP_NUM_FNC = MAP_PUT_AUX
	LEN_HFOR% = 66 - LEN(MAP_GLS_HFOR) / 2
	PRINT #MAP_CNL_AUX%,MAP_VEC_BLKS(LEN_HFOR%) + MAP_GLS_HFOR
	MAP_GLS_AUX =  ""
	MAP_NUM_FNC = MAP_PUT_AUX

   FOR I% = 1 TO 30
   VARI_AUXI$ = ""
   
   FOR J% = 1 TO max_colum%
      VARI_AUXI$ = VARI_AUXI$ + MAP_MAT_SCRN(I%,J%)
   NEXT J%
   MAP_GLS_AUX = VARI_AUXI$
   MAP_NUM_FNC = MAP_PUT_AUX
   NEXT I%
 LABE_CONT:
   MAP_NUM_FNC = MAP_FNC_GEN
   CALL LIB$SET_SYMBOL('FRM',MAP_FIL_AUX$)

   GO TO LABE_ATRA
   
 MAP_LAB_BAD:
   PRINT MAP_ASC_BEL,MAP_ASC_BEL
   PRINT "Error(";ERR;") ";ERT$(ERR);" en linea ";erl; ", Modulo ";ern$
   IF ERR = 2 THEN
      PRINT MAP_FIL_FLG,FILE_WSS, " : Nombre de archivo ilegal"
   ELSE 
   IF ERR = 5 THEN
      PRINT MAP_FIL_FLG,FILE_WSS, " Archivo inexistente       "
   ELSE
   IF ERR = 55 THEN
      PRINT " Indice fuera de rango "
   END IF
   END IF
   RESUME 999
999
 LABE_ATRA:
 END
1300   SUB MAP_RUT_SPA(STRING SPA_GLS_STR BY DESC,REAL SPA_NUM_LMT BY REF)
      WHILE LEN(SPA_GLS_STR) < SPA_NUM_LMT
         SPA_GLS_STR = SPA_GLS_STR + " "
      NEXT
   END SUB

1400   SUB MAP_RUT_PIC(STRING PIC_GLS_PIC BY DESC)
      PIC_SWI_ALL$ = "YES"
      PIC_I% = 1
      PIC_J% = LEN(PIC_GLS_PIC)
      PIC_0$ = ""
      IF PIC_J% < 10 THEN
         PIC_0$ = "0"
      END IF
      PIC_GLS_FST$ = LEFT$(PIC_GLS_PIC,1)
      WHILE PIC_I% <= PIC_J%
         IF MID$(PIC_GLS_PIC,PIC_I%,1) <> PIC_GLS_FST$ THEN
            PIC_SWI_ALL$ = "NOT"
            PIC_I% = PIC_J% + 1
         END IF
         PIC_I% = PIC_I% + 1
      NEXT
      IF PIC_SWI_ALL$ = "YES" THEN
         PIC_GLS_PIC = PIC_GLS_FST$ + "(" +&
                  PIC_0$ + STR$(PIC_J%) + ")"
      END IF
   END SUB

1700   SUB GENRPTMAN (STRING STRG BY DESC,STRING MANT)
 !
 !  Esta subrutina  recibe en el primer parametro (STRG) la variable a
 !  modificar y mantiene en ella solo aquellos caracteres que aparecen 
 !  en el segundo parametro (MANT)
 !  Ejemplo:
 !   Si PICT_FILD tiene '99.999.999,99' despues de un
 !      CALL GENRPTMAN(PICT_FILD,"9,") 
 !      PICT_FILD tiene '99999999,99'
 !
   DECLARE      INTEGER      SIZE_STRG
   DECLARE      INTEGER      SIZE_MANT
   DECLARE      STRING      VARI_AUXI
   DECLARE      STRING      VARI_MIDD

   SIZE_STRG = LEN(STRG) 
   SIZE_MANT = LEN(MANT)
   VARI_AUXI = ""
   FOR I% = 1 TO SIZE_STRG
      VARI_MIDD = MID$(STRG,I%,1) 
      FOR J% = 1 TO SIZE_MANT
         IF MID$(MANT,J%,1) = VARI_MIDD THEN
             VARI_AUXI = VARI_AUXI + VARI_MIDD 
         END IF
      NEXT J%
   NEXT I%
   STRG = VARI_AUXI
   END SUB



1800   SUB GENRPTREP (STRING ESTR_INGS BY DESC, STRING CRTR_ORIG BY DESC,&
          STRING CRTR_REEM BY DESC)

 !   Reemplaza en ESTR_INGS el CRTR_ORIG(caracter original)
 !   por CRTR_REEM(carater(es) de reemplazo)
 !
 !   Ejemplo de llamada de esta subrutina:
 !       PICT_FILD = 999999,999
 !      CALL GENRPTREP(PICT_FILD,",","V")
 !   Esta subrutina devuelve en PICT_FILD el valor 999999V999

   LARGO_STR% = LEN(ESTR_INGS) 
   VAR_AUX$ = ""
   FOR I% = 1 TO LARGO_STR%
      IF MID$(ESTR_INGS,I%,1) = CRTR_ORIG THEN
         VAR_AUX$ = VAR_AUX$ + CRTR_REEM
      ELSE
         VAR_AUX$ = VAR_AUX$ + MID$(ESTR_INGS,I%,1)
      END IF
   NEXT I%
   ESTR_INGS = VAR_AUX$
   END SUB

