100
	COMMON ( FIO_EXTE ) STRING FILLER=58,FIO_STAT=1,FIO_INFO=1,&
				   FIO_ACCS=1,FILL
        RECORD DMN
               STRING  DMN_COD_DOMI=32
               STRING  DMN_COD_SIST=03
               STRING  DMN_COD_REGI=03
               STRING  DMN_COD_TABL=04
               STRING  DMN_COD_TIPO=01
               STRING  DMN_MSC_FMTO=01
               STRING  DMN_NUM_LARG=03
               STRING  DMN_G_FIMP=20
               STRING  DMN_G_VALI=16
               STRING  DMN_G_BUSQ=16
               STRING  DMN_G_GLOS=32
               STRING  DMN_G_DISP=110
	END RECORD DMN
	COMMON ( DMN ) DMN DMN

	RECORD	RCR
               STRING  RCR_COD_RECO=32
               STRING  RCR_COD_DOMI=32
               STRING  RCR_COD_SIST=03
               STRING  RCR_COD_REGI=03
               STRING  RCR_G_FIMP=20
               STRING  RCR_G_VALI=16
               STRING  RCR_G_BUSQ=16
               STRING  RCR_COD_TABL=04
               STRING  RCR_COD_TIPO=01
               STRING  RCR_G_GLOS=32
               STRING  RCR_MSC_FMTO=01
               STRING  RCR_NUM_LARG=03
               STRING  RCR_G_DISP=78
	END RECORD RCR
	COMMON ( RCR ) RCR RCR

   DECLARE INTEGER                      			 &
	NUMTOKEN           					,&
	SZTOKEN            					,&
	TOKEN              					,&
	P_P                					,&
	P_Q                					,&
	SZ_I_B

   DECLARE   STRING						 &
	C_Q                					,&
	VALTOKEN           					,&
	STRTOKEN

   DECLARE INTEGER   CONSTANT					 &
	KEYTOK = 1,         		IDNTOK = 2		,&
	NUMTOK = 3,         		STRTOK = 4		,&
	CHRTOK = 5,         		EOLTOK = 6		,&
	ETXTOK = 7,         		HTAB   = 9

200

   DECLARE INTEGER							 &
	M_CNL_FDMN,	M_CNL_FRCR,	M_CNL_FBMS,	M_CNL_FGEN	,&
	M_CNL_FFLG,	M_CNL_FTXT					,&
	M_TOT_FILE,	M_TOT_CIDX,	T 				,&
	M_SWI_FILE,	M_SWI_PFLD,	M_SWI_FECH,	M_SWI_VERF	,&
	M_SWI_CFRM,	M_SWI_GLOS,	M_SWI_ERRO			,&
	M_NUM_LINE,	M_NUM_COLU,	M_NUM_CORR,	M_NUM_TTEX	,&
	M_NUM_INFE,	M_NUM_SUPE,	M_NUM_CFLD,	M_NUM_PICT	,&
	M_IND_OVER,	S 						,&
	M_IND_NUM							,&
	M_V_ATR(150),	M_V_LEN(150)					,&
	WBMS_NUM_SOR,	WTXT_NUM_SOR					,&
	M_V_UNDE(10),	M_V_N(150)					,&
	M_V_FICO(150,2),		M_MAT_SCRN(24,80) 		,&
	M_V_TFLD(150),		M_V_SGN(150)				,&
	M_V_DSPL(150),		M_V_DERI(150)				,&
	M_V_PFLD(150),  		M_V_MOVE(150)  			,&
	M_V_SCLR(150), 		M_V_LGLS(150)				,&
	OVR_NUM_COL,	M_NUM_VSZ,	OVR_NUM_FIL,	BMS_NUM_DPZ	,&
	BMS_NUM_PIC,     ANT_INDEX,	NIV_INDEX,	TMP_INDEX	,&
	M_V_PROT(150),		M_V_TIDX(150)				,&
	ACT_INDEX							,&
	M_V_VALI(150),		M_V_PKEY(150)				,&
	M_NUM_NCS,	M_NUM_NCI        				,&
	M_V_NUME(150)                       				,&
	M_NUM_TFEC,       OVR_NUM_LEN        				,&
	OVR_NUM_ADI,        M_V_ENT(150)   				,&
	M_V_DCM(150),   M_V_BYA(150)  					,&
	M_V_VAUT(150),  M_V_GLOS(150)  					,&
	M_V_FECH(150),	M_TOT_NOMB   					,&
	M_TOT_REPE	,	M_V_IOV(150)				,&
	M_V_BUS(150),	M_IND_TFLD					,&
	M_V_TVAL(150),	M_V_CIN(4)				


   DECLARE   STRING                           &
      NWL        							,&
      M_FIL_BMS,        M_FIL_FLG					,&
      M_FIL_DMN,        M_FIL_RCR					,&
      M_G_WRIT,       M_G_FLG						,&
      WRT_G_LIN,        WRT_G_COL					,&
      WRT_G_COR,        M_G_PIC						,&
      WRT_G_DAT,        M_G_DEF						,&
      M_G_MAPA,       M_G_PROY       					,&
      M_G_PBM,        M_G_TYP						,&
      M_G_L11,        M_G_L12						,&
      M_G_L13,        M_G_CMP						,&
      M_G_L21,        M_G_L31						,&
      M_G_FIL,        M_V_OBLI(150)   					,&
      M_G_COL,        M_G_VIX(150)   					,&
      M_G_POS,        M_G_BMS        					,&
      M_G_TXT,        M_G_PXZ        					,&
      M_G_STP,        M_FIL_GEN        					,&
      M_V_CMP(150),   M_V_RFRM(150)   					,&
      M_V_REGI(150)   							,&
      M_V_TIPO(150),  M_V_NOMB(150)   					,&
      M_V_TIPO_N(150)							,&
      V_M(6),          M_FIL_TXT        				,&
      M_V_FIL(20),    M_G_HLP        					,&
      M_G_DFL,        M_G_MST        					,&
      M_V_BLK(10),	  M_G_MRG_VRF      				,&
      M_V_NRTN(150),  M_G_RED        					,&
      M_G_VFEC(4),    M_G_VRF(7)     					,&
      SGN_LEAD,           M_V_TAB(150)   				,&
      M_V_DMSA(5),    M_G_PRE        					,&
      M_G_SFEC,       M_G_DLD        					,&
      M_G_DLI,        M_G_IDC(3)     					,&
      M_G_NOMB,       M_G_OCC        					,&
      M_G_MAT,	  M_G_EDTN	     					,&
      M_G_NIV_FLD,    M_G_SPA_FLD    					,&
      M_G_NIV_FEC,    M_G_SPA_FEC    					,&
      M_G_NIV_VRF,    M_G_SPA_VRF    					,&
      M_G_NIV_IDC,    M_G_SPA_IDC    					,&
      M_SEPA_PIC,       M_SEPA_LEN       				,&
      M_SEPA_ATR,       GEN_G_PRT        				,&
      M_V_NMR(150),   GEN_G_VAL        					,&
      M_G_PIC_ALF,    M_G_PIC_EDT    					,&
      M_V_ISG(150),	  M_G_DARK	     				,&
      FIO_CMND,      	  M_G_FOR	     				,&
      M_G_VCOD,       M_G_VIND       					,&
      M_G_GCOD,       M_G_GIND       					,&
      M_G_IDEN,	  M_V_REPE(150)  					,&
      M_G_SECC,	  M_G_IZR	     					,&
      M_G_PTXL,	  M_V_FLD(150)						,&
      M_V_VSIS(150),	M_V_VTAB(150),	M_V_VTIP(150)			,&
      M_V_VBUS(150),	M_V_VGLS(150),	M_V_VVAL(150)			,&
      FIO_STAT_DMN,	FIO_STAT_RCR					,&
      M_G_EDF(150)


   DECLARE   STRING CONSTANT			&
      FIO_STAT_OKS  = "0"						,&
      FIO_GET_KEY   = "0001"						,&
      FIO_INP	    = "0010"

   DECLARE STRING POS_V_ZRS(4)
      POS_V_ZRS(1) = "0"
      POS_V_ZRS(2) = ""
      POS_V_ZRS(3) = ""
      POS_V_ZRS(4) = ""

   DECLARE STRING M_G_BYA(4)
      M_G_BYA(1) = "FRM-CPIM-AEY"
      M_G_BYA(2) = "FRM-CPIM-UBY"
      M_G_BYA(3) = "FRM-CPIM-ANY"
      M_G_BYA(4) = "FRM-CPIM-UNY"

   DECLARE STRING M_V_FFEC(7)
      M_V_FFEC(1) = " 'ddmmssaa' "
      M_V_FFEC(2) = " 'ddmmaa' "
      M_V_FFEC(3) = " 'mmssaa' "
      M_V_FFEC(4) = " 'mmaa' "
      M_V_FFEC(5) = " 'ssaa' "
      M_V_FFEC(6) = " 'ddmm' "
      M_V_FFEC(7) = " 'aa' "

   DECLARE STRING M_V_VFEC(7)
      M_V_VFEC(1) = "FEC"
      M_V_VFEC(2) = "DMA"
      M_V_VFEC(3) = "MSA"
      M_V_VFEC(4) = "FMA"
      M_V_VFEC(5) = "FSA"
      M_V_VFEC(6) = "FDM"
      M_V_VFEC(7) = "FFA"

   DECLARE INTEGER   CONSTANT                 &
      M_CTE_YES =  1,   M_CTE_NOT =  0   				,&
      M_CTE_NUM =  0,   M_CTE_ALF =  1   				,&
      M_CTE_IDF =  2,   M_IND_FLD =  0   				,&
      M_IND_IKY =  1,   M_IND_MKY =  2   				,&
      M_IND_AKY =  3,	  M_CTE_RED =  2   				,&
      M_IND_FIC =  4 			     				,&
      MG_C       =  1,   MG_A       =  2     				,&
      MG_B       =  3,   MG_1       =  4     				,&
      MG_2       =  5,   MG_N       =  6     				,&
      M_NUM_CODI  = 1, M_NUM_MISC = 2    				,&
      FEC_IND_FFEC  = 1, FEC_IND_FDMA = 2    				,&
      FEC_IND_FMSA  = 3, FEC_IND_FFMA = 4    				,&
      FEC_IND_FFSA  = 5, FEC_IND_FFDM = 6    				,&
      FEC_IND_FFFA  = 7, M_IND_IDC = 1     				,&
      M_IND_VIND  = 1, M_IND_VGLS = 2					,&
      M_IND_VVRF  = 3, M_NUM_VVRF = 4

	FEC$	= "FALSE"
	NRO$	= "FALSE"
	VRF$	= "FALSE"
	IDC$	= "FALSE"
	BUSTAB$	= "FALSE"
	VALCOD$	= "FALSE"
	BUSMSC$	= "FALSE"
	VALIND$ = "FALSE"
	BUSOFI$ = "FALSE"
	VALOFI$ = "FALSE"
	BUSUSR$ = "FALSE"
	VALUSR$ = "FALSE"
	VALTDU$ = "FALSE"
	ERRGLS$	= "FALSE"

 !==>> WRITE ARCHIVO SORT

    DEF STRING M_FNC_WBMS (STRING M_G_WRIT)
	WRT_G_DAT = FORMAT$(WBMS_NUM_SOR,"#")
	WRT_G_LIN = FORMAT$(M_NUM_LINE,"##")
	WRT_G_COL = FORMAT$(M_NUM_COLU,"###")
	WRT_G_COR = FORMAT$(M_NUM_CORR,"###")
	M_G_WRIT = WRT_G_DAT + WRT_G_LIN + WRT_G_COL + WRT_G_COR +&
		M_G_WRIT
	M_NUM_CORR = M_NUM_CORR + 1
	PRINT #M_CNL_FBMS,M_G_WRIT
	M_G_WRIT = ""
    END DEF

 !==>> Lee recorrido

   DEF INTEGER M_FNC_GRCR
	RCR::RCR_COD_DOMI = " "
        RCR::RCR_COD_SIST = " "
        RCR::RCR_COD_REGI = " "
        RCR::RCR_G_FIMP   = " "
        RCR::RCR_G_VALI   = " "
        RCR::RCR_G_BUSQ   = " "
        RCR::RCR_COD_TABL = " "
        RCR::RCR_COD_TIPO = " "
        RCR::RCR_G_GLOS   = " "
        RCR::RCR_MSC_FMTO = " "
        RCR::RCR_NUM_LARG = " "
        RCR::RCR_G_DISP   = " "

        FIO_CMND = FIO_GET_KEY
        CALL "GNSPFRCR" BY REF (FIO_CMND,RCR)
	IF FIO_STAT = FIO_STAT_OKS THEN
		FIO_STAT_RCR = FIO_STAT_OKS
                RCR::RCR_COD_SIST = " "
	ELSE
		FIO_STAT_RCR = "23"
	END IF
		
   END DEF
   DEF INTEGER WRT_RCR
	PRINT "DOMI ";RCR::RCR_COD_DOMI 
        PRINT "SIST ";RCR::RCR_COD_SIST 
        PRINT "REGI ";RCR::RCR_COD_REGI 
        PRINT "FIMP ";RCR::RCR_G_FIMP   
        PRINT "VALI ";RCR::RCR_G_VALI   
        PRINT "BUSQ ";RCR::RCR_G_BUSQ   
        PRINT "TABL ";RCR::RCR_COD_TABL 
        PRINT "TIPO ";RCR::RCR_COD_TIPO 
        PRINT "GLOS ";RCR::RCR_G_GLOS   
        PRINT "FMTO ";RCR::RCR_MSC_FMTO 
        PRINT "LARG ";RCR::RCR_NUM_LARG 
        PRINT "DISP ";RCR::RCR_G_DISP   
   END DEF
 !==>> Lee dominio
   DEF INTEGER M_FNC_GDMN
	DMN::DMN_COD_SIST = " "
	DMN::DMN_COD_REGI = " "
	DMN::DMN_COD_TABL = " "
	DMN::DMN_COD_TIPO = " "
	DMN::DMN_MSC_FMTO = " "
	DMN::DMN_NUM_LARG = " "
	DMN::DMN_G_FIMP   = " "
	DMN::DMN_G_VALI   = " "
	DMN::DMN_G_BUSQ   = " "
	DMN::DMN_G_GLOS   = " "
	DMN::DMN_G_DISP   = " "

	FIO_CMND = FIO_GET_KEY
	CALL "GNSPFDMN" BY REF (FIO_CMND,DMN)
	IF FIO_STAT = FIO_STAT_OKS THEN
   		DMN::DMN_COD_REGI = " "
		FIO_STAT_DMN = FIO_STAT_OKS
	ELSE
		FIO_STAT_DMN = "23"
	END IF
   END DEF

 !==>> Lee dominio
   DEF INTEGER WRT_DMN
	PRINT "SIST ";DMN::DMN_COD_SIST 
	PRINT "REGI ";DMN::DMN_COD_REGI 
	PRINT "TABL ";DMN::DMN_COD_TABL 
	PRINT "TIPO ";DMN::DMN_COD_TIPO 
	PRINT "FMTO ";DMN::DMN_MSC_FMTO 
	PRINT "LARG ";DMN::DMN_NUM_LARG 
	PRINT "FIMP ";DMN::DMN_G_FIMP   
	PRINT "VALI ";DMN::DMN_G_VALI   
	PRINT "BUSQ ";DMN::DMN_G_BUSQ   
	PRINT "GLOS ";DMN::DMN_G_GLOS   
	PRINT "DISP ";DMN::DMN_G_DISP   

    END DEF
 !==>> SOBREPOSICION

    DEF INTEGER M_FNC_OVR
	M_IND_OVER = M_CTE_NOT
	FOR K% = OVR_NUM_COL TO ( OVR_NUM_COL + OVR_NUM_LEN + OVR_NUM_ADI - 1 )
		IF K% < 1 OR K% > 80 THEN
			M_SWI_ERRO = M_CTE_YES
			M_IND_OVER = M_CTE_YES
		ELSE
		IF M_MAT_SCRN(OVR_NUM_FIL,K%) <> 0 THEN
			M_SWI_ERRO = M_CTE_YES
			M_IND_OVER = M_CTE_YES
		END IF
		M_MAT_SCRN(OVR_NUM_FIL,K%) = M_MAT_SCRN(OVR_NUM_FIL,K%) + 1
		END IF
	NEXT K%
    END DEF

 !==>> POSICION

   DEF INTEGER R_POS
	M_G_POS = POS_V_ZRS(LEN(STR$(BMS_NUM_COL+BMS_NUM_DPZ))) +&
		STR$(BMS_NUM_COL + BMS_NUM_DPZ)
	M_G_POS = "POS=(" + M_G_FIL + "," + M_G_POS + ")"
   END DEF

 !==>> WRITE ARCHIVO TXT

    DEF STRING M_FNC_WTXT (STRING M_G_WRIT)
	WRT_G_DAT = FORMAT$(WTXT_NUM_SOR,"#")
	WRT_G_LIN = FORMAT$(M_NUM_LINE,"##")
	WRT_G_COL = FORMAT$(M_NUM_COLU,"###")
	WRT_G_COR = FORMAT$(M_NUM_CORR,"###")
	M_G_WRIT = WRT_G_DAT + WRT_G_LIN + WRT_G_COL + WRT_G_COR +&
		M_G_WRIT
	M_NUM_CORR = M_NUM_CORR + 1
	PRINT #M_CNL_FTXT,M_G_WRIT
	M_G_WRIT = ""
    END DEF

 !==>> TOKEN

    DEF INTEGER NEXTTOKEN
    ON ERROR GO TO M_LAB_ERR
       IF TOKEN = ETXTOK THEN
          NEXTTOKEN = ETXTOK
          GO TO NEX_LAB_ASG
       END IF
       P_P = P_Q 
 NEX_LAB_NEW:
       WHILE (MID$(I_B$,P_P,1) = " " OR ASCII(MID$(I_B$,P_P,1)) = HTAB) AND &
          P_P <= SZ_I_B
          P_P = P_P + 1
       NEXT
       P_Q = P_P 
       IF P_P > SZ_I_B OR I_B$ = "" THEN
          GET #M_CNL_FFLG
          SZ_I_B = RECOUNT
          MOVE FROM #M_CNL_FFLG , I_B$ = SZ_I_B
          P_P, P_Q  = 1
          GO TO NEX_LAB_NEW
        END IF
        C_Q = MID$(I_B$,P_Q,1)
        IF (C_Q >= "A" AND C_Q <= "Z") OR (C_Q >= "a" AND C_Q <= "z") THEN
            WHILE (MID$(I_B$,P_P,1) >= "A" AND MID$(I_B$,P_P,1) <= "Z" &
               OR  MID$(I_B$,P_P,1)  = "_"      &
          OR  MID$(I_B$,P_P,1) >= "a" AND &
              MID$(I_B$,P_P,1) <= "z")
                        P_P = P_P + 1
         NEXT
         SZTOKEN = P_P - P_Q
         NEXTTOKEN = IDNTOK
         VALTOKEN = MID$(I_B$,P_Q,SZTOKEN)
      ELSE
      IF C_Q >= "0" AND C_Q <= "9" THEN
         WHILE MID$(I_B$,P_P,1) >= "0" AND MID$(I_B$,P_P,1) <= "9"
            P_P = P_P + 1
         NEXT
         SZTOKEN = P_P - P_Q
         NEXTTOKEN = NUMTOK
         VALTOKEN = MID$(I_B$,P_Q,SZTOKEN)
         NUMTOKEN  = VAL(VALTOKEN)
      ELSE
      IF C_Q = '"'  OR C_Q = "'" THEN
         P_P = P_P + 1
         WHILE MID$(I_B$,P_P,1) <> C_Q
            P_P = P_P + 1
         NEXT
         SZTOKEN = P_P - (P_Q + 1)
         P_P = P_P + 1
         NEXTTOKEN = STRTOK
         STRTOKEN = MID$(I_B$,P_Q + 1,SZTOKEN)
         VALTOKEN = C_Q + STRTOKEN + C_Q
      ELSE
         NEXTTOKEN = CHRTOK
         VALTOKEN = MID$(I_B$,P_P,1)
       P_P = P_P + 1
       SZTOKEN = 1
      END IF
      END IF
      END IF
      GO TO NEX_LAB_ASG
 M_LAB_ERR:
	CLOSE #M_CNL_FFLG
	IF ERR = 11 THEN
		NEXTTOKEN = ETXTOK
	ELSE
		PRINT   "ERROR(";ERR;") ";ERT$(ERR);" en linea ";erl;&
			", MODULO ";ern$
	END IF
	RESUME 800
 NEX_LAB_ASG:
       P_Q = P_P
800
   END DEF

 !==>> INICIALIZACION
805
   DEF INTEGER M_FNC_INI
	M_G_IDEN = DATE$(0%) + " " + TIME$(0%)
	M_G_IDEN = EDIT$(M_G_IDEN,32)
	M_SEPA_PIC    = "                  PIC  "
	M_CNL_FFLG = 1   
	M_CNL_FBMS = 2
	M_CNL_FGEN = 3
	M_CNL_FTXT = 4
	M_CNL_FDMN = 5
	M_CNL_FRCR = 6
	M_CNL_FINF = 7

	V_M(MG_C) = "      "
	V_M(MG_A) = "       "
	V_M(MG_B) = "           "
	V_M(MG_1) = "               "
	V_M(MG_2) = "                   "
	V_M(MG_N) = ""
	M_V_BLK(1) = "        "
	M_V_BLK(2) = "       "
	M_V_BLK(3) = "      "
	M_V_BLK(4) = "     "
	M_V_BLK(5) = "    "
	M_V_BLK(6) = "   "
	M_V_BLK(7) = "  "
	M_V_BLK(8) = " "
	M_V_BLK(9) = ""

	FOR I% = 1 TO 150
		M_G_VIX(I%)   = "(" + STR$(I%) + ")"
		M_V_TAB(I%)   = ",ATTRB=(PROT),LENGTH=1,"
		M_V_OBLI(I%)  = "S"
		M_V_MOVE(I%)  = M_CTE_YES
		M_V_SCLR(I%)  = M_CTE_YES
		M_V_TFLD(I%)  = M_IND_FLD
		M_V_PROT(I%)  = M_CTE_YES
		M_V_VALI(I%)  = M_CTE_YES
		M_V_PFLD(I%)  = M_CTE_YES
		M_V_FECH(I%)  = M_CTE_NOT
		M_V_DERI(I%)  = M_CTE_NOT
		M_V_BYA(I%)   = 1
		M_V_LGLS(I%)  = 0
		M_V_ATR(I%) = M_CTE_YES
		M_V_LEN(I%) = M_CTE_YES
		M_V_N(I%) = M_CTE_YES
		M_V_SGN(I%) = M_CTE_NOT
		M_V_VSIS(I%) = ""
		M_V_VTAB(I%) = ""
		M_V_VTIP(I%) = ""
		M_V_VBUS(I%) = ""
		M_V_VGLS(I%) = ""
		M_V_VVAL(I%) = ""
		M_G_EDF(I%) = "FALSE"
	NEXT I%
	M_NUM_SUPE = 24
	M_SWI_PFLD = M_CTE_NOT
	NWL = CR + LF
	P_P,P_Q = 1
806
	CALL LIB$GET_SYMBOL("GNS$PRY",M_G_PROY)
	CALL LIB$GET_SYMBOL("GNS$FIL",M_G_FLG)
	CALL LIB$GET_SYMBOL("PTH",M_FIL_FLG)
	CALL LIB$GET_SYMBOL("GNS$MAP",M_G_MAT)
	CALL LIB$GET_SYMBOL("GNS$AIU",M_G_FOR)
	M_G_HLP = ""
808
	ON ERROR GO TO FLG_LAB_OPE
	OPEN M_FIL_FLG FOR INPUT AS FILE #M_CNL_FFLG,RECORDTYPE ANY,   &
		ORGANIZATION SEQUENTIAL VARIABLE,   RECORDSIZE 255
   
	GET #M_CNL_FFLG
	SZ_I_B = RECOUNT
	MOVE FROM #M_CNL_FFLG , I_B$ = SZ_I_B
	GO TO FIN_LAB_INI
 FLG_LAB_OPE:
	PRINT BEL,BEL,BEL
	SELECT ERR
		CASE 2
			PRINT M_FIL_FLG,FILE_WSS, " : Nombre de archivo ilegal"
		CASE 5
			PRINT M_FIL_FLG,FILE_WSS, " Archivo inexistente"
		CASE ELSE
			PRINT   "ERROR(";ERR;") ";ERT$(ERR);" en linea ";erl;&
				", MODULO ";ern$
	END SELECT
   RESUME 809
 FIN_LAB_INI:
809
   END DEF

810
   DEF INTEGER M_FNC_OPE

 !!! Apertura Archivos
 !!! ======== ========
 !!!
 !!! Mapa
 !!!-----
	IF M_G_FOR = "BMS" THEN
		M_FIL_BMS = M_G_PROY + "A" + M_G_MAPA + ".SRT"
		OPEN M_FIL_BMS FOR OUTPUT AS FILE #M_CNL_FBMS,&
		RECORDTYPE ANY, ORGANIZATION SEQUENTIAL VARIABLE,&
		RECORDSIZE 255
		M_G_WRIT = M_FNC_WBMS('*        ' + M_G_IDEN)
	END IF
   
 !!! Modulo de manejo
 !!!-----------------

	M_FIL_GEN = M_G_PROY + "BM" + M_G_MAPA + ".AIU"
      OPEN M_FIL_GEN FOR OUTPUT AS FILE #M_CNL_FGEN,RECORDTYPE ANY,&
         ORGANIZATION SEQUENTIAL VARIABLE,   RECORDSIZE 255
   
 !!! Registro imagen
 !!! ----------------

      M_FIL_TXT = M_G_PROY + "WI" + M_G_MAPA + ".SRT"
      OPEN M_FIL_TXT FOR OUTPUT AS FILE #M_CNL_FTXT,RECORDTYPE ANY,&
         ORGANIZATION SEQUENTIAL VARIABLE,   RECORDSIZE 255
   
 !!! Parametros formulario
 !!!----------------------

      M_FIL_TXT = M_G_PROY + "BI" + M_G_MAPA + ".AIU"
      OPEN M_FIL_TXT FOR OUTPUT AS FILE #M_CNL_FINF,RECORDTYPE ANY,&
         ORGANIZATION SEQUENTIAL VARIABLE,   RECORDSIZE 255
   
 !!! Dominio
 !!!--------

	FIO_CMND = FIO_INP
	CALL "GNSPFDMN" BY REF (FIO_CMND,DMN)
   
 !!! Recorrido
 !!!----------
	FIO_CMND = FIO_INP
 	CALL "GNSPFRCR" BY REF (FIO_CMND,RCR)
   
	M_G_PBM = " OF '" + M_G_PROY + "BM" + M_G_MAPA + ".TXT'"
	M_G_DFL = " IN " + M_G_MAPA + "-FLD"
	M_G_MST = M_G_PROY + M_G_MAPA + "A"

   END DEF

  !====================== FORM ======================

   DEF INTEGER M_FNC_FOR
	WHILE VALTOKEN <> "FORM"
		TOKEN = NEXTTOKEN
	NEXT
	TOKEN = NEXTTOKEN
	TOKEN = NEXTTOKEN
	TOKEN = NEXTTOKEN
	M_G_MAPA = STRTOKEN
	IF LEN(M_G_MAPA) > 3 THEN
		M_G_MAPA = RIGHT$(M_G_MAPA,3)
	END IF

	M_NUM_FNC = M_FNC_OPE

	TOKEN = NEXTTOKEN
	IF VALTOKEN = 'HELP_FORM' THEN
		TOKEN = NEXTTOKEN
		TOKEN = NEXTTOKEN
		M_G_HLP = STRTOKEN
	END IF
   
 !    CALL M_RUT_SPA(M_G_MAPA,9)
	CALL M_RUT_SPA(M_G_MST,9)
 !    M_G_MAPA = M_G_PROY + M_G_MAPA + "DFHMDI SIZE=("
	WTXT_NUM_SOR = 0
	M_G_TXT = M_FNC_WTXT(V_M(MG_C) + "* " + M_G_IDEN)
	M_G_TXT = M_FNC_WTXT(V_M(MG_C) + "* " + M_G_HLP)
	M_G_HLP = ""
            
	IF M_G_FOR = "BMS" THEN
		M_G_TXT = M_FNC_WTXT(V_M(MG_A) +  "01  " + M_G_MAPA + "-FLD.")
		M_G_TXT = M_FNC_WTXT(V_M(MG_B) + "05 FILLER-" + M_G_MAPA + "                    PIC  X(12).")
		WTXT_NUM_SOR = 1
	ELSE
		M_G_TXT = M_FNC_WTXT(V_M(MG_A) +"01  " +&
			M_G_MAPA + "-FRM.")
		WTXT_NUM_SOR = 0
		M_NUM_LINE = 2
		M_G_TXT = M_FNC_WTXT(V_M(MG_B) + "03 " +&
			M_G_MAPA +&
			"-NAME                         PIC X(31) VALUE")
		M_G_TXT = M_FNC_WTXT(V_M(MG_B) + "   '" +&
			M_G_MAPA + "'.")
		M_G_TXT = M_FNC_WTXT(V_M(MG_B) + "03 " + M_G_MAPA +&
			"-RWSP                         PIC X(12).")
		M_G_TXT = M_FNC_WTXT(V_M(MG_B) +&
			"03 " + M_G_MAPA +&
			"-UARV                         PIC X(39) VALUE")
		M_G_TXT = M_FNC_WTXT(V_M(MG_B) + "   '" +&
			M_G_PROY + "BM" + M_G_MAPA + "'.")
		M_G_TXT = M_FNC_WTXT(V_M(MG_B) + "03 " +&
			M_G_MAPA + "-NFLD.")
		WTXT_NUM_SOR = 2
		M_G_TXT = M_FNC_WTXT(V_M(MG_A) +"01 " + M_G_MAPA +&
			"-FLD EXTERNAL.")
		M_G_TXT = M_FNC_WTXT(V_M(MG_B) +"04 " + M_G_MAPA +&
			"-DFLD.")
		WTXT_NUM_SOR = 0
      END IF
   END DEF
820
 !==>> AREA TO CLEAR

   DEF INTEGER M_FNC_ATC
	WHILE VALTOKEN <> ";"
		IF VALTOKEN = 'AREA_TO_CLEAR' THEN
			TOKEN = NEXTTOKEN
			TOKEN = NEXTTOKEN
			M_NUM_INFE = NUMTOKEN
			TOKEN = NEXTTOKEN
			TOKEN = NEXTTOKEN
		END IF
		TOKEN = NEXTTOKEN
	NEXT
   END DEF
830

 !==>> DETECTA NUMERO POR SU PICTURE

   DEF INTEGER M_FNC_DNUM
	M_IND_NUM = 0
	FOR I_NUM% = 1 TO LEN(STRTOKEN)
		C_NUM$ = MID$(STRTOKEN,I_NUM%,1)
		IF C_NUM$ <> '9' AND C_NUM$ <> '.' AND C_NUM$ <> ','&
				AND C_NUM$ <> 'N' THEN
			M_IND_NUM = 1
		END IF
	NEXT I_NUM%
   END DEF
835

 !==>> PICTURE FMS

   DEF INTEGER M_FNC_PIC_FMS
	M_G_PIC = ""
	TOKEN = NEXTTOKEN
	TOKEN = NEXTTOKEN
	SGN_LEAD = ""
 
	IF TOKEN = NUMTOK THEN
		M_V_LGLS( S ) = NUMTOKEN
		OVR_NUM_LEN = NUMTOKEN
		M_NUM_PICT = NUMTOKEN
		M_NUM_NCS  =  NUMTOKEN
		M_NUM_NCI  = 0
		TOKEN = NEXTTOKEN
		IF STRTOKEN = "X" OR STRTOKEN = "C" THEN
			M_G_PIC = "X(" + STR$(M_NUM_PICT) + ")"
		ELSE
			M_V_NUME( T ) = M_CTE_YES
			M_V_ENT( S ) = M_NUM_PICT
			M_V_DCM( S ) = 0
			M_V_NMR( S ) = "NN9N"
			M_V_ISG( S ) = "N"
			M_G_EDTN = "Z"
			IF STRTOKEN = "N" THEN
				M_G_EDTN = "-"
				M_V_NMR( S ) = "NS9N"
				M_V_ISG( S ) = "S"
				SGN_LEAD = "   SIGN LEADING SEPARATE"
				STRTOKEN = "9"
				M_G_PIC = "9(" + STR$(M_NUM_PICT-1) + ")"
			ELSE
				M_G_PIC = "9(" + STR$(M_NUM_PICT) + ")"
			END IF
				M_G_PIC_ALF = "X(" + STR$(M_NUM_PICT) + ")"
				M_G_PIC_EDT = M_G_EDTN + "(" + STR$(M_NUM_PICT) + ")"
		END IF
	ELSE
		M_NUM_FNC = M_FNC_DNUM
		IF M_IND_NUM = 0 THEN
			M_V_NUME( T ) = M_CTE_YES
		END IF
		OVR_NUM_LEN = LEN(STRTOKEN)
		M_V_NMR( S ) = "NN9"
		M_V_ISG( S ) = "N"
		IF MID$(STRTOKEN,1,1) = "N" THEN
			M_V_NMR( S ) = "NS9"
			M_V_ISG( S ) = "S"
			SGN_LEAD = "   SIGN LEADING SEPARATE"
		END IF
		M_G_PIC_EDT = STRTOKEN
		A$ = STRTOKEN
		CALL GENRPTMAN(A$,"9-NZ")
		M_G_PIC_ALF = "X(" + STR$(LEN(A$)) + ")"
		IF SGN_LEAD <> "" THEN
			CALL GENRPTREP(M_G_PIC_EDT,"9","-")
			CALL GENRPTREP(M_G_PIC_EDT,"N","-")
		ELSE
			CALL GENRPTREP(M_G_PIC_EDT,"9","Z")
		END IF
		M_G_PIC = STRTOKEN
		IF MID$(M_G_PIC,1,1) = "N" THEN
			CALL GENRPTREP(M_G_PIC,"N","9")
			M_G_PIC = RIGHT(M_G_PIC,2)
		END IF
		M_NUM_NCS = LEN(M_G_PIC)
		IF M_SWI_FECH = M_CTE_YES THEN
			CALL GENRPTMAN(M_G_PIC,"9XC.,")
		ELSE
			IF M_V_NUME( T ) = M_CTE_NOT THEN
				CALL GENRPTMAN(M_G_PIC,"X")
			END IF
		END IF
		M_NUM_PICT = LEN(M_G_PIC)
		IF M_SWI_VERF = M_CTE_YES OR M_SWI_IDC = M_CTE_YES THEN
			M_NUM_PICT = M_NUM_PICT - 1
		END IF
		CALL GENRPTMAN(M_G_PIC,"-9XC,")
		CALL GENRPTREP(M_G_PIC,",","V")
		M_NUM_PDCM = INSTR(0,M_G_PIC,"V")
		IF M_NUM_PDCM = 0 THEN
			M_V_NMR( S ) = M_V_NMR( S ) + "N"
			M_V_ENT( S ) = LEN(M_G_PIC)
			IF M_SWI_VERF = M_CTE_YES THEN
				M_V_ENT( S ) = M_V_ENT( S ) - 1
			END IF
			M_V_DCM( S ) = 0
		ELSE
			M_V_NMR( S ) = M_V_NMR( S ) + "V"
			M_V_ENT( S ) = M_NUM_PDCM - 1
			M_V_DCM( S ) = LEN(M_G_PIC) - M_NUM_PDCM
		END IF
		IF M_V_NUME( S ) = M_CTE_YES THEN
			M_NUM_NCI = 0
		ELSE
			M_NUM_NCI = M_NUM_NCS - M_NUM_PICT
		END IF
		CALL M_RUT_PIC(M_G_PIC)
	END IF

	IF M_SWI_FECH = M_CTE_YES THEN
		M_V_NUME( T ) = M_CTE_NOT
	END IF
	IF SGN_LEAD <> "" THEN
		M_V_ENT( S ) = M_V_ENT( S ) - 1
		M_V_SGN( S ) = M_CTE_YES
		M_G_PIC  = "S" + M_G_PIC
	END IF

	TOKEN = NEXTTOKEN
   END DEF

 !==>> PICTURE BMS

   DEF INTEGER M_FNC_PIC_BMS
	M_G_PIC = ""
	TOKEN = NEXTTOKEN
	TOKEN = NEXTTOKEN
	SGN_LEAD = ""
 
	IF TOKEN = NUMTOK THEN
		M_V_LGLS( S ) = NUMTOKEN
		OVR_NUM_LEN  = NUMTOKEN
		M_NUM_PICT = NUMTOKEN
		M_NUM_NCS  =  NUMTOKEN
		M_NUM_NCI  = 0
		TOKEN = NEXTTOKEN
		IF STRTOKEN = "X" OR STRTOKEN = "C" THEN
			M_G_PIC = "X(" + STR$(M_NUM_PICT) + ")"
			GO TO NOT_NUM
		ELSE
			STR_AUX$ = STRTOKEN
			STRTOKEN = ""
			FOR I% = 1 TO M_NUM_PICT
				STRTOKEN = STRTOKEN + STR_AUX$
			NEXT I%
		END IF
	END IF
	IF M_SWI_VERF = M_CTE_YES THEN
		STRTOKEN = LEFT$(STRTOKEN,LEN(STRTOKEN) - 2)
		CALL GENRPTREP(STRTOKEN,"X","9")
	ELSE
		IF M_SWI_IDC = M_CTE_YES THEN
			STRTOKEN = RIGHT$(STRTOKEN,2)
		END IF
	END IF
	M_NUM_FNC = M_FNC_DNUM
	IF M_IND_NUM = 0 THEN
		M_V_NUME( T ) = M_CTE_YES
	END IF
	OVR_NUM_LEN = LEN(STRTOKEN)
	M_V_NMR( S ) = "NN9"
	M_V_ISG( S ) = "N"
	IF MID$(STRTOKEN,1,1) = "N" THEN
		M_V_NMR( S ) = "NS9"
		M_V_ISG( S ) = "S"
 !!!		SGN_LEAD = " SIGN LEADING SEPARATE"
		SGN_LEAD = "S"
	END IF
	M_G_PIC_EDT = STRTOKEN
	M_G_PIC_ALF = "X(" + STR$(LEN(STRTOKEN)) + ")"
	IF SGN_LEAD <> "" THEN
		CALL GENRPTREP(M_G_PIC_EDT,"9","-")
		CALL GENRPTREP(M_G_PIC_EDT,"N","-")
	ELSE
	IF M_SWI_FECH = M_CTE_YES THEN
		Z% = 1
		WHILE Z% <= LEN(STRTOKEN)
			IF MID$(STRTOKEN,Z%,1) = '/' THEN
				M_G_EDF( S ) = "TRUE"
				Z% = LEN(STRTOKEN) + 1
			ELSE
				Z% = Z% + 1
			END IF
		NEXT
	ELSE
		CALL GENRPTREP(M_G_PIC_EDT,"9","Z")
	END IF
	END IF

	M_NUM_NCS = LEN(STRTOKEN)
	M_G_PIC = STRTOKEN
	IF MID$(M_G_PIC,1,1) = "N" THEN
		CALL GENRPTREP(M_G_PIC,"N","9")
	END IF
	IF M_SWI_FECH = M_CTE_YES THEN
		CALL GENRPTMAN(M_G_PIC,"9XC.,")
	ELSE
	IF M_V_NUME( T ) = M_CTE_NOT THEN
		CALL GENRPTMAN(M_G_PIC,"X")
	END IF
	END IF

	M_NUM_PICT = LEN(M_G_PIC)
	CALL GENRPTMAN(M_G_PIC,"-9XC,")
	CALL GENRPTREP(M_G_PIC,",","V")
	M_NUM_PDCM = INSTR(0,M_G_PIC,"V")

		IF M_NUM_PDCM = 0 THEN
			M_V_NMR( S ) = M_V_NMR( S ) + "N"
			M_V_ENT( S ) = LEN(M_G_PIC)
			M_V_DCM( S ) = 0
		ELSE
			M_V_NMR( S ) = M_V_NMR( S ) + "V"
			M_V_ENT( S ) = M_NUM_PDCM - 1
			M_V_DCM( S ) = LEN(M_G_PIC) - M_NUM_PDCM
		END IF
	IF M_V_NUME( S ) = M_CTE_YES THEN
		M_NUM_NCI = 0
	ELSE
		M_NUM_NCI = M_NUM_NCS - M_NUM_PICT
	END IF
	CALL M_RUT_PIC(M_G_PIC)

 NOT_NUM:
	IF M_SWI_FECH = M_CTE_YES THEN
		M_V_NUME( T ) = M_CTE_NOT
	END IF
	IF SGN_LEAD <> "" THEN
		M_V_ENT( S ) = M_V_ENT( S ) - 1
	END IF

	TOKEN = NEXTTOKEN
   END DEF
840
 !==>> EDITA Z A CAMPOS NUMERICOS DISPLAY ONLY

   DEF INTEGER M_FNC_EDT
	Y% = INSTR(1%,M_G_PIC_EDT,",")
	IF Y% = 0 THEN
		Y% = LEN(M_G_PIC_EDT) - 1
	ELSE
		Y% = Y% - 2
	END IF
	VARI_POST$ = MID$(M_G_PIC_EDT, Y% + 1 ,LEN(M_G_PIC_EDT) - Y%)

	M_G_PIC_EDT = MID$(M_G_PIC_EDT , 1 , Y%)
        IF M_V_DSPL( S ) <> M_CTE_YES THEN
		M_G_PIC_EDT = M_G_PIC_EDT + VARI_POST$
		VARI_POST$ = ""
	END IF
 	CALL GENRPTREP(VARI_POST$,"-","9")
 	CALL GENRPTREP(VARI_POST$,"Z","9")
 !!!	IF MID$(VARI_TIPO,1,1) = "N" THEN
 !!!			CALL GENRPTREP(M_G_PIC_EDT,"9","-")
 !!!	ELSE
 !!!			CALL GENRPTREP(M_G_PIC_EDT,"9","Z")
 !!!	END IF
	M_G_PIC_EDT = M_G_PIC_EDT + VARI_POST$
   END DEF

 !==>> ARCHIVO TXT : REGISTRO IMAGEN BMS

   DEF INTEGER M_FNC_TXT_BMS
   M_G_TXT = M_FNC_WTXT(V_M(MG_C) + "*" + M_G_HLP)
   IF ACT_INDEX = M_CTE_YES THEN
      ANT_INDEX = M_CTE_YES
      M_G_NIV_FLD = V_M(MG_B) + "05 "
      M_G_SPA_FLD = V_M(MG_B) + "   "
      IF NIV_INDEX = 3 THEN
         M_G_OCC = M_V_NRTN( S ) + "-IDX  OCCURS " + STR$(M_TOT_CIDX) +" TIMES."
         M_G_TXT = M_FNC_WTXT(M_G_NIV_FLD + M_G_OCC)
      END IF
      M_G_NIV_FLD = V_M(MG_B) + "   07 "
      M_G_SPA_FLD = V_M(MG_B) + "      "
      M_G_NIV_VRF = V_M(MG_B) + "   07 "
      M_G_SPA_VRF = V_M(MG_B) + "      "
      M_G_NIV_IDC = V_M(MG_B) + "   07 "
      M_G_SPA_IDC = V_M(MG_B) + "      "
      M_G_NIV_FEC = V_M(MG_B) + "      09 "
      M_G_SPA_FEC = V_M(MG_B) + "         "
      M_SEPA_PIC    = "               PIC  "
      M_SEPA_LEN    = "-LEN    COMP   PIC S9(04)."
      M_SEPA_ATR    = "           "
   ELSE
      ANT_INDEX = M_CTE_NOT
      M_G_NIV_FLD = V_M(MG_B) + "05 "
      M_G_SPA_FLD = V_M(MG_B) + "   "
      M_G_NIV_VRF = V_M(MG_B) + "05 "
      M_G_SPA_VRF = V_M(MG_B) + "   "
      M_G_NIV_IDC = V_M(MG_B) + "05 "
      M_G_SPA_IDC = V_M(MG_B) + "   "
      M_G_NIV_FEC = V_M(MG_B) + "   07 "
      M_G_SPA_FEC = V_M(MG_B) + "      "
      M_SEPA_PIC    = "                  PIC  "
      M_SEPA_LEN    = "-LEN       COMP   PIC S9(04)."
      M_SEPA_ATR    = "              "
   END IF

   M_G_TXT = M_FNC_WTXT(M_G_NIV_FLD + M_V_NRTN( S )+ M_SEPA_LEN)
   M_G_TXT = M_FNC_WTXT(M_G_NIV_FLD + M_V_NRTN( S )+&
         "-ATR" + M_SEPA_ATR  + "PIC  X(01).")
842
   IF M_SWI_FECH = M_CTE_YES THEN
	M_G_TXT = M_FNC_WTXT(M_G_NIV_FLD + M_V_NRTN( S )  + "-ALF" +&
			RIGHT(M_SEPA_PIC,5) + M_G_PIC_ALF + ".")
	FOR  Z% = 1 TO 4
		M_V_CIN(Z%) = 0
	NEXT Z%
	ZZ%  = 1
	C_INS$ = ""
	FOR  Z% = 1 TO LEN(M_G_PIC_EDT)
		IF MID$(M_G_PIC_EDT,Z%,1) = '/' THEN
			C_INS$ = MID$(M_G_PIC_EDT,Z%,1)
			M_V_CIN(ZZ%) = Z%
			ZZ%  = ZZ% + 1
		END IF
	NEXT Z%
 !!!	M_G_TXT = M_FNC_WTXT(M_G_NIV_FLD + M_V_NRTN( S ) + "-EDT  REDEFINES" )
 !!!	M_G_TXT = M_FNC_WTXT(M_G_SPA_FLD + M_V_NRTN( S ) + "-ALF" +&
 !!!			RIGHT(M_SEPA_PIC,5) + M_G_PIC_EDT + ".")
 	M_G_TXT = M_FNC_WTXT(M_G_NIV_FLD + M_V_NRTN( S ) + ".")
	FOR  Z% = 1 TO M_NUM_TFEC
		M_G_TXT = M_FNC_WTXT(M_G_NIV_FEC + M_G_VFEC(Z%))
		IF Z% * 3 = M_V_CIN(1) OR&
		   Z% * 3 = M_V_CIN(2) THEN
			M_G_TXT = M_FNC_WTXT(M_G_NIV_FEC + "FILLER" +&
				"       VALUE '" + C_INS$ + "'     PIC  X(01).")
		END IF
	NEXT Z%
 !!!	M_G_TXT = M_FNC_WTXT(M_G_NIV_FLD + M_V_NRTN( S ) + "-MOV  REDEFINES" )
 !!! 	M_G_TXT = M_FNC_WTXT(M_G_SPA_FLD + M_V_NRTN( S ) + "    "   +&
 !!!	         RIGHT(M_SEPA_PIC,5) + "X(0" + STR$(2 * M_NUM_TFEC) + ").")
   ELSE
   IF M_SWI_VERF = M_CTE_YES THEN
      M_G_TXT = M_FNC_WTXT(M_G_NIV_VRF + M_G_VRF(1))
      M_G_TXT = M_FNC_WTXT(M_G_NIV_VRF + M_G_VRF(2))
      M_G_TXT = M_FNC_WTXT(M_G_SPA_VRF + M_G_VRF(3))
      M_G_TXT = M_FNC_WTXT(M_G_NIV_VRF + M_G_VRF(4) )
      M_G_TXT = M_FNC_WTXT(M_G_SPA_VRF + M_G_VRF(5) )
      M_G_TXT = M_FNC_WTXT(M_G_NIV_FLD + M_V_NRTN( S + 1 )+ M_SEPA_LEN )
      M_G_TXT = M_FNC_WTXT(M_G_NIV_FLD + M_V_NRTN( S +1)+ "-ATR" +&
		M_SEPA_ATR  + "PIC  X(01).")
      M_G_TXT = M_FNC_WTXT(M_G_NIV_VRF + M_G_VRF(6) )
   ELSE
   IF M_SWI_IDC = M_CTE_YES THEN
      M_G_TXT = M_FNC_WTXT(M_G_NIV_IDC + M_G_IDC(1))
      M_G_TXT = M_FNC_WTXT(M_G_NIV_FLD + M_V_NRTN( S +1 ) + M_SEPA_LEN)
      M_G_TXT = M_FNC_WTXT(M_G_NIV_FLD + M_V_NRTN( S +1 )+&
         "-ATR" + M_SEPA_ATR  + "PIC  X(01).")
      M_G_TXT = M_FNC_WTXT(M_G_NIV_IDC + M_G_IDC(2))
   ELSE
   IF M_V_NUME( S ) = M_CTE_YES THEN
      M_NUM_FNC = M_FNC_EDT
      M_G_TXT = M_FNC_WTXT(M_G_NIV_FLD + M_V_NRTN( S )  + "-ALF" +&
         RIGHT(M_SEPA_PIC,5) + M_G_PIC_ALF + ".")
      M_G_TXT = M_FNC_WTXT(M_G_NIV_FLD + M_V_NRTN( S ) + "-EDT  REDEFINES" )
      M_G_TXT = M_FNC_WTXT(M_G_SPA_FLD + M_V_NRTN( S ) + "-ALF" +&
         RIGHT(M_SEPA_PIC,5) + M_G_PIC_EDT + ".")
      M_G_TXT = M_FNC_WTXT(M_G_NIV_FLD + M_V_NRTN( S ) + "      REDEFINES" )
      IF SGN_LEAD <> "" THEN
         M_G_TXT = M_FNC_WTXT(M_G_SPA_FLD + M_V_NRTN( S ) + "-ALF" +&
            RIGHT(M_SEPA_PIC,5) + "S" + M_G_PIC + "." )
 !!! AQUI IBA LA VARIABLE SGN_LEAD + UN PUNTO FINAL
      ELSE
         M_G_TXT = M_FNC_WTXT(M_G_SPA_FLD + M_V_NRTN( S ) + "-ALF" +&
            RIGHT(M_SEPA_PIC,5) + M_G_PIC + ".")
      END IF
   ELSE
      M_G_TXT = M_FNC_WTXT(M_G_NIV_FLD + M_V_NRTN( S ) + M_SEPA_PIC +&
		M_G_PIC + ".")
   END IF
   END IF
   END IF
   END IF
   END DEF
850
 !==>> ARCHIVO TXT : REGISTRO IMAGEN FMS

   DEF INTEGER M_FNC_TXT_FMS

   WTXT_NUM_SOR = 2
   M_G_TXT = M_FNC_WTXT(V_M(MG_C) + "*" + M_G_HLP)
   IF ACT_INDEX = M_CTE_YES THEN
      ANT_INDEX = M_CTE_YES
      M_G_NIV_FLD = V_M(MG_B) + "   05 "
      M_G_SPA_FLD = V_M(MG_B) + "   "
      IF NIV_INDEX = 3 THEN
         M_G_OCC = M_V_NRTN( S )+"-IDX  OCCURS " + STR$(M_TOT_CIDX) + " TIMES."
         M_G_TXT = M_FNC_WTXT(M_G_NIV_FLD + M_G_OCC)
      END IF
      IF M_SWI_VERF = M_CTE_YES THEN
          M_G_NIV_FLD = V_M(MG_B) + "      09 "
          M_G_MRG_VRF = V_M(MG_B) + "  07 "
      ELSE
          M_G_NIV_FLD = V_M(MG_B) + "      07 "
          M_G_MRG_VRF = ""
      END IF
      M_G_SPA_FLD = V_M(MG_B) + "      "
      M_G_NIV_VRF = V_M(MG_B) + "      09 "
      M_G_NIV_IDC = V_M(MG_B) + "      09 "
      M_G_SPA_VRF = V_M(MG_B) + "      "
      M_G_SPA_IDC = V_M(MG_B) + "      "
      M_G_NIV_FEC = V_M(MG_B) + "         09 "
      M_G_SPA_FEC = V_M(MG_B) + "         "
      M_SEPA_PIC     = "         PIC  "
      M_SEPA_LEN     = "-LEN    COMP   PIC S9(04)."
      M_SEPA_ATR     = "           "
   ELSE
      ANT_INDEX = M_CTE_NOT
      M_G_MRG_VRF = V_M(MG_B) + "   05 "
      IF M_SWI_VERF = M_CTE_YES THEN
          M_G_NIV_FLD = V_M(MG_B) + "      07 "
          M_G_SPA_VRF = V_M(MG_B) + "      "
      ELSE
          M_G_NIV_FLD = V_M(MG_B) + "   05 "
          M_G_SPA_VRF = V_M(MG_B) + "   "
      END IF
      M_G_SPA_FLD = V_M(MG_B) + "   "
      M_G_NIV_VRF = V_M(MG_B) + "      07 "
      M_G_NIV_IDC = V_M(MG_B) + "      07 "
      M_G_SPA_IDC = V_M(MG_B) + "   "
      M_G_NIV_FEC = V_M(MG_B) + "      07 "
      M_G_SPA_FEC = V_M(MG_B) + "      "
      M_SEPA_PIC    = "            PIC  "
      M_SEPA_LEN    = "-LEN       COMP   PIC S9(04)."
      M_SEPA_ATR    = "              "
   END IF

   IF M_SWI_VERF = M_CTE_YES THEN
       M_G_TXT = M_FNC_WTXT(M_G_MRG_VRF + M_G_VRF(1))
   END IF
   IF M_SWI_FECH = M_CTE_YES THEN
      M_G_TXT = M_FNC_WTXT(M_G_NIV_FLD +&
             M_V_NRTN( S ) + ".")
      FOR Z% = 1 TO M_NUM_TFEC
        M_G_TXT = M_FNC_WTXT(M_G_NIV_FEC + M_G_VFEC(Z%))
      NEXT Z%
   ELSE
   IF M_SWI_VERF = M_CTE_YES THEN
      M_G_TXT = M_FNC_WTXT(M_G_NIV_VRF + M_G_VRF(4))
      M_G_TXT = M_FNC_WTXT(M_G_NIV_VRF + M_G_VRF(5))
      M_G_TXT = M_FNC_WTXT(M_G_SPA_VRF + "   " + M_G_VRF(6))
 !!!      M_G_TXT = M_FNC_WTXT(M_G_NIV_VRF + M_G_VRF(6))
      M_G_TXT = M_FNC_WTXT(M_G_NIV_VRF + M_G_VRF(7) )
   ELSE
   IF M_SWI_IDC = M_CTE_YES THEN
      M_G_TXT = M_FNC_WTXT(M_G_MRG_VRF + M_G_IDC(1))
      IF M_G_FOR = "BMS" THEN
          M_G_TXT = M_FNC_WTXT(M_G_NIV_FLD + M_V_NRTN( S +1) + M_SEPA_LEN)
          M_G_TXT = M_FNC_WTXT(M_G_NIV_FLD + M_V_NRTN( S +1)+&
                        "-ATR" + M_SEPA_ATR  + "PIC  X(01).")
      END IF
      M_G_TXT = M_FNC_WTXT(M_G_NIV_IDC + M_G_IDC(2))
      M_G_TXT = M_FNC_WTXT(M_G_NIV_IDC + M_G_IDC(3))
   ELSE
   IF M_V_NUME( S ) = M_CTE_YES AND &
      SGN_LEAD <> "" THEN
      M_G_TXT = M_FNC_WTXT(M_G_NIV_FLD +&
         M_V_NRTN( S )  + "-ALF" +&
         RIGHT(M_SEPA_PIC,5) + M_G_PIC_ALF + ".")

      M_G_TXT = M_FNC_WTXT(M_G_NIV_FLD + M_V_NRTN( S ) + "      REDEFINES" )
      IF SGN_LEAD <> "" THEN
         M_G_TXT = M_FNC_WTXT(M_G_SPA_FLD +&
            "   " + M_V_NRTN( S ) + "-ALF" +&
            RIGHT(M_SEPA_PIC,5)  +&
            M_G_PIC )
            M_G_TXT = M_FNC_WTXT(M_G_SPA_FLD +&
            SGN_LEAD + "." )
      ELSE
         M_G_TXT = M_FNC_WTXT(M_G_SPA_FLD +&
            "   " + M_V_NRTN( S ) + "-ALF" +&
            M_G_SPA_FLD + M_G_PIC + ".")
      END IF
   ELSE
      M_G_TXT = M_FNC_WTXT(M_G_NIV_FLD +&
         M_V_NRTN( S )  +&
         M_SEPA_PIC + M_G_PIC + ".")
   END IF
   END IF
   END IF
   END IF
   END DEF

 !==>> DETECTA CADA REGISTRO DE LA PANTALLA

   DEF INTEGER M_FNC_FIL
   M_SWI_FILE = M_CTE_NOT
   FOR I% = 1 TO M_TOT_FILE
      IF M_V_FIL(I%) = M_V_REGI( T ) THEN
         M_SWI_FILE = M_CTE_YES
      END IF
   NEXT I%
   IF M_SWI_FILE = M_CTE_NOT AND M_SWI_CFRM = M_CTE_NOT THEN
      M_TOT_FILE = M_TOT_FILE + 1
      M_V_FIL(M_TOT_FILE) = M_V_REGI( T )
   END IF

   END DEF
860
 !==>> GENERA CAMPOS ADICIONALES DE FECHA

   DEF INTEGER M_FNC_FEC

	M_NUM_NCI = 0
	M_NUM_PICT = M_NUM_NCS
	M_G_SFEC = RIGHT$(M_V_NOMB( T ),2)
	FOR I% = 1 TO M_NUM_TFEC
		 T  =  T  + 1
		IF M_SWI_CFRM = M_CTE_YES THEN
			M_V_MOVE( T ) = M_CTE_NOT
		END IF
		M_V_DERI ( T ) = M_CTE_YES
		M_V_DSPL ( T ) = M_V_DSPL( S )
		M_V_PROT ( T ) = M_CTE_NOT
		M_V_VALI ( T ) = M_CTE_NOT
		M_V_SCLR ( T ) = M_CTE_NOT
		M_V_TFLD ( T ) = M_V_TFLD( S )
		M_V_RFRM ( T ) = M_V_RFRM( S )
		M_V_REGI ( T ) = M_V_REGI( S )
		M_V_TIPO ( T ) = "NUM"
		M_V_TIPO_N ( T ) = "NUM"
		M_V_NOMB ( T ) = M_V_DMSA(I%) + M_G_SFEC
		M_V_PFLD ( T ) = M_CTE_NOT
		M_V_NRTN ( T ) = M_V_RFRM( T ) + "-NUM-" + M_V_NOMB( T )
		M_V_TIDX( T )  = M_TOT_CIDX
		M_G_VFEC(I%)   = M_V_NRTN( T ) + RIGHT(M_SEPA_PIC,4) + "X(02)."
		IF M_G_FOR = 'FMS' THEN
			M_V_ATR( T ) = M_CTE_NOT
			M_V_LEN( T ) = M_CTE_NOT
			M_V_N( T ) = M_CTE_NOT
		ELSE
			
		END IF
	NEXT I%
   END DEF
884
 !==>> GENERA CAMPOS ADICIONALES DIGITO VERIFICADOR BMS
886
   DEF INTEGER M_FNC_VRF_BMS

	VRF$ = "TRUE"

	T  =  T  + 1
 	IF M_SWI_CFRM = M_CTE_YES THEN
		M_V_MOVE( T ) = M_CTE_NOT
	END IF
	M_V_TVAL( T ) = M_IND_VVRF
	M_V_TVAL( T - 1 ) = M_NUM_VVRF
	M_V_DSPL( T ) = M_V_DSPL( S )
	M_V_PROT( T ) = M_V_PROT( S )
	M_V_TIDX( T ) = M_TOT_CIDX
	M_V_RFRM( T ) = M_V_RFRM( S )
	M_V_REGI( T ) = M_V_REGI( S )
	M_V_TIPO( T ) = "VRF"
	M_V_TIPO_N( T ) = "VRF"
	M_V_NOMB( T ) = M_V_NOMB( S )
	M_V_NRTN( T ) = M_V_RFRM( S ) + "-VRF-" + M_V_NOMB( S )
	M_V_TFLD( T ) = M_V_TFLD( S )
	M_V_PKEY( T ) = M_CTE_NOT
	M_V_PFLD( T ) = M_CTE_NOT
	M_G_VRF(1) = M_V_NRTN( T - 1) + "-ALF" +&
		RIGHT(M_SEPA_PIC,5) + M_G_PIC_ALF + "."
	M_G_VRF(2) = M_V_NRTN( T -1) + "-EDT  REDEFINES"
		M_G_VRF(3) = M_V_NRTN( T -1) + "-ALF" +&
		RIGHT(M_SEPA_PIC,5) + M_G_PIC_EDT + "."
	M_G_VRF(4) = M_V_NRTN( T -1) + "      REDEFINES"
	M_G_VRF(5) = M_V_NRTN( T -1) + "-ALF" +&
		RIGHT(M_SEPA_PIC,5) + "9(" +&
		STR$(M_V_ENT( S )) + ")."
	M_G_VRF(6) = M_V_NRTN( T )   +&
		M_SEPA_PIC + "X(01)."
   END DEF

 !==>> GENERA CAMPOS ADICIONALES DIGITO VERIFICADOR FMS
   DEF INTEGER M_FNC_VRF_FMS

	VRF$ = "TRUE"

	M_V_N( T ) = M_CTE_NOT
	T  =  T  + 1
	IF M_SWI_CFRM = M_CTE_YES THEN
		M_V_MOVE( T ) = M_CTE_NOT
	END IF
	M_V_FLD( T ) = M_V_FLD( T - 1 ) 
	M_V_TVAL( T ) = M_IND_VVRF
	M_V_TVAL( T - 1 ) = M_NUM_VVRF
	M_V_DSPL( T ) = M_V_DSPL( S )
	M_V_PROT( T ) = M_V_PROT( S )
	M_V_PROT( S ) = M_CTE_NOT
	M_V_TIDX( T ) = M_TOT_CIDX
	M_V_RFRM( T ) = M_V_RFRM( S )
	M_V_REGI( T ) = M_V_REGI( S )
	M_V_TIPO( T ) = "VRF"
	M_V_TIPO_N( T ) = "VRF"
	M_V_NOMB( T ) = M_V_NOMB( S )
	M_V_NRTN( T ) = M_V_RFRM( S ) + "-VRF-" + M_V_NOMB( S )
 	M_V_PKEY( T ) = M_V_PKEY( S )
 	M_V_PKEY( S ) = M_CTE_NOT
 	M_V_PFLD( T ) = M_V_PFLD( S )
 	M_V_PFLD( S ) = M_CTE_NOT
        M_V_ATR( T ) = M_CTE_RED
        M_V_LEN( T ) = M_CTE_RED
	M_V_TFLD( T ) = M_V_TFLD( S )
	M_G_VRF(1) = M_V_NRTN( T ) + "-VRF."
	M_G_VRF(2) = M_V_NRTN( T -1) + "-ALF" + RIGHT(M_SEPA_PIC,5) + "X(" +&
		STR$(M_NUM_PICT - 1) + ")."
	M_G_VRF(4) = M_V_NRTN(T-1) + "-ALF" +&
			 RIGHT$(M_SEPA_PIC,5) + "X(" +&
			 STR$(M_NUM_PICT - 1) + ")."
        M_G_VRF(5) = M_V_NRTN(T-1) + "      REDEFINES"
	M_G_VRF(6) = M_V_NRTN(T-1) + "-ALF" +&
			 RIGHT$(M_SEPA_PIC,5) + "9(" +&
			 STR$(M_NUM_PICT - 1) + ")."
 !!!	M_G_VRF(5) = M_V_NRTN( T -1) + "      REDEFINES"
 !!!	M_G_VRF(6) = M_V_NRTN( T -1) + M_SEPA_PIC + "9(" +&
 !!!		STR$(M_NUM_PICT - 1) + ")."
	M_G_VRF(7) = M_V_NRTN( T )   + M_SEPA_PIC + "X(01)."
   END DEF

 !==>> GENERA CAMPOS ADICIONALES CAMPOS IDC BMS 

   DEF INTEGER M_FNC_IDC_BMS

	IDC$ = "TRUE"

	M_V_TVAL( T ) = M_IND_VIND
	T  =  T  + 1
	M_V_TVAL( T ) = M_IND_VGLS
	IF M_SWI_CFRM = M_CTE_YES THEN
		M_V_MOVE( T ) = M_CTE_NOT
	END IF
	M_V_BUS( T )  = M_IND_IDC
	M_V_RFRM( T ) = M_V_RFRM( S )
	M_V_REGI( T ) = M_V_REGI( S )
	M_V_TIPO( T ) = "GLS"
	M_V_TIPO_N( T ) = "IDC"
	M_V_TIDX( T ) = M_TOT_CIDX
	M_V_NOMB( T ) = M_V_NOMB( S )
	M_V_NRTN( T ) = M_V_RFRM( S ) + "-GLS-" + M_V_NOMB( T )
	M_V_TFLD( T ) = M_V_TFLD( S )
	M_V_PKEY( T  - 1) = M_CTE_NOT
	M_V_PKEY( T )     = M_CTE_NOT
	M_V_PFLD( T  - 1) = M_CTE_NOT
	M_V_PFLD( T )     = M_CTE_NOT
	M_V_DSPL( T )     = M_V_DSPL( S )
	M_V_PROT( T ) = M_V_PROT( S )
	M_G_IDC(1) = M_V_NRTN( T -1) +&
		M_SEPA_PIC + "X(1)."
	M_G_IDC(2) = M_V_NRTN( T ) + M_SEPA_PIC + "X(" +&
		STR$(M_NUM_PICT ) + ")."
   END DEF

 !==>> GENERA CAMPOS ADICIONALES CAMPOS IDC FMS

   DEF INTEGER M_FNC_IDC_FMS

	IDC$ = "TRUE"

 	M_V_N( T ) = M_CTE_NOT
	M_V_TVAL( T ) = M_IND_VIND
	T  =  T  + 1
	M_V_FLD( T ) = M_V_FLD( T - 1 ) 
	M_V_TVAL( T ) = M_IND_VGLS
	IF M_SWI_CFRM = M_CTE_YES THEN
		M_V_MOVE( T ) = M_CTE_NOT
	END IF
	M_V_BUS( T )  = M_IND_IDC
	M_V_RFRM( T ) = M_V_RFRM( S )
	M_V_REGI( T ) = M_V_REGI( S )
	M_V_TIPO( T ) = "GLS"
	M_V_TIPO_N( T ) = "IDC"
	M_V_TIDX( T ) = M_TOT_CIDX
	M_V_NOMB( T ) = M_V_NOMB( S )

	M_V_NRTN( T ) = M_V_RFRM( S ) + "-GLS-" + M_V_NOMB( T )
	M_V_TFLD( T ) = M_V_TFLD( S )
	M_V_PKEY( T  - 1) = M_CTE_NOT
	M_V_PKEY( T     ) = M_CTE_NOT
	M_V_PFLD( T  - 1) = M_CTE_NOT
	M_V_PFLD( T     ) = M_CTE_NOT
        M_V_ATR( T ) = M_CTE_RED
        M_V_LEN( T ) = M_CTE_RED
	M_V_DSPL( T ) = M_V_DSPL( S )
	M_V_PROT( T ) = M_V_PROT( S )
	M_G_IDC(1) = M_V_NRTN( T -1) + "-IDC."
	M_G_IDC(2) = M_V_NRTN( T -1) + M_SEPA_PIC + "X(1)."
	M_G_IDC(3) = M_V_NRTN( T ) + M_SEPA_PIC + "X(" + STR$(M_NUM_PICT ) +")."
   END DEF

 !==>> DETECTA DOMINIO Y RECORRIDO

   DEF INTEGER M_FNC_DDYR
        RCR::RCR_COD_RECO = M_V_RFRM( T ) + "-" + M_V_TIPO( T ) + "-" +&
			    M_V_NOMB( T )
	M_NUM_FNC = M_FNC_GRCR
	IF FIO_STAT_RCR <> FIO_STAT_OKS THEN
		GO TO FIN_M_FNC_DDYR
	END IF
	DMN::DMN_COD_DOMI = RCR::RCR_COD_DOMI
	M_NUM_FNC = M_FNC_GDMN

	IF RCR::RCR_COD_SIST > " " THEN
		M_V_VSIS( T ) = EDIT$(RCR::RCR_COD_SIST,128)
	END IF
	IF RCR::RCR_COD_REGI > " " THEN
		M_V_REGI( T ) = EDIT$(RCR::RCR_COD_REGI,128)
 !!!		PRINT "REGISTRO EN RCR ";M_V_REGI( T );" ";M_V_NRTN(T)
 !!!		M_NUM_FNC = WRT_RCR
	END IF
	IF RCR::RCR_COD_TABL > " " THEN
		M_V_VTAB( T ) = EDIT$(RCR::RCR_COD_TABL,128)
	END IF
	IF RCR::RCR_COD_TIPO > " " THEN
		M_V_VTIP( T ) = EDIT$(RCR::RCR_COD_TIPO,128)
	END IF
	IF RCR::RCR_G_VALI > " " THEN
		M_V_VVAL( T ) = EDIT$(RCR::RCR_G_VALI,128)
	END IF
	IF RCR::RCR_G_BUSQ > " " THEN
		M_V_VBUS( T ) = EDIT$(RCR::RCR_G_BUSQ,128)
	END IF
	IF RCR::RCR_G_GLOS > " " THEN
		M_V_VGLS( T ) = EDIT$(RCR::RCR_G_GLOS,128)
	END IF
	IF FIO_STAT_DMN = FIO_STAT_OKS THEN
		IF DMN::DMN_COD_SIST > " " AND&
		   M_V_VSIS( T ) <= " "	THEN
			M_V_VSIS( T ) = DMN::DMN_COD_SIST
		END IF
		IF DMN::DMN_COD_REGI > " " AND&
		   RCR::RCR_COD_REGI  <= " " THEN
			M_V_REGI( T ) = EDIT$(DMN::DMN_COD_REGI,128)
 !!!			PRINT "REGISTRO EN DMN ";M_V_REGI( T );" ";M_V_NRTN(T)
 !!!			M_NUM_FNC = WRT_DMN
		END IF
		IF DMN::DMN_COD_TABL > " " AND&
		   M_V_VTAB( T ) <= " " THEN
			M_V_VTAB( T ) = EDIT$(DMN::DMN_COD_TABL,128)
		END IF
		IF DMN::DMN_COD_TIPO > " " AND&
		   M_V_VTIP( T ) <= " " THEN
			M_V_VTIP( T ) = EDIT$(DMN::DMN_COD_TIPO,128)
		END IF
		IF DMN::DMN_G_VALI > " " AND&
		   M_V_VVAL( T ) <= " " THEN
			M_V_VVAL( T ) = EDIT$(DMN::DMN_G_VALI,128)
		END IF
		IF DMN::DMN_G_BUSQ > " " AND&
		   M_V_VBUS( T ) <= " " THEN
			M_V_VBUS( T ) = EDIT$(DMN::DMN_G_BUSQ,128)
		END IF
		IF DMN::DMN_G_GLOS > " " AND&
		   M_V_VGLS( T ) <= " " THEN
			M_V_VGLS( T ) = EDIT$(DMN::DMN_G_GLOS,128)
		END IF
	END IF
	IF M_V_TIPO( T ) = "COD" OR&
	   M_V_TIPO( T ) = "IND" OR&
	   M_V_TIPO( T ) = "MSC" THEN
		IF M_V_VVAL( T ) <= " " THEN
			VALCOD$ = "TRUE"
			M_V_VVAL( T ) = 'VALCOD'
		ELSE
		IF M_V_VVAL( T ) = "VALCOD" THEN
			VALCOD$ = "TRUE"
		END IF
		END IF

		IF M_V_VBUS( T ) <= " " THEN
			BUSTAB$ = "TRUE"
			M_V_VBUS( T ) = 'BUSTAB'
		ELSE
		IF M_V_VBUS( T ) = "BUSTAB" THEN
			BUSTAB$ = "TRUE"
		END IF
		END IF
	END IF
 FIN_M_FNC_DDYR:

   END DEF
 !==>> UNDERCORE 

   DEF INTEGER M_FNC_UND

	M_G_DLI = "INITIAL='<'"
	M_G_DLD = "INITIAL='>'"
	T  =  T  + 1
	S  =  T 
	M_V_FLD( S ) = M_G_CMP
	CALL GENRPTREP(M_G_CMP,"_","-")

 UND_LAB_CIC:
	UND_TOT_UND = 0
	FOR I% = 1 TO LEN(M_G_CMP)
		IF MID$(M_G_CMP,I%,1) = "-" THEN
			UND_TOT_UND = UND_TOT_UND + 1
			M_V_UNDE(UND_TOT_UND) = I%
		END IF
	NEXT I%

	SELECT MID$(M_G_CMP,M_V_UNDE(1),5)
		CASE "-IKY-"
			M_G_DLI = "INITIAL='{'"
			M_G_DLD = "INITIAL='}'"
			M_V_PKEY( T ) = M_CTE_YES
			M_V_PFLD( T ) = M_CTE_NOT
			M_V_TFLD( T ) = M_IND_IKY
	                M_G_CMP = LEFT$(M_G_CMP,M_V_UNDE(1) - 1 ) +&
			RIGHT$(M_G_CMP,M_V_UNDE(2))
			GO TO UND_LAB_CIC
		CASE "-MKY-"
			M_G_DLI = "INITIAL='{'"
			M_G_DLD = "INITIAL='}'"
			M_V_PKEY( T ) = M_CTE_NOT
			M_V_PFLD( T ) = M_CTE_YES
			M_V_TFLD( T ) = M_IND_MKY
			M_G_CMP = LEFT$(M_G_CMP,M_V_UNDE(1) - 1 ) +&
			RIGHT$(M_G_CMP,M_V_UNDE(2))
			GO TO UND_LAB_CIC
		CASE "-AKY-"
			M_G_DLI = "INITIAL='{'"
			M_G_DLD = "INITIAL='}'"
			M_V_PKEY( T ) = M_CTE_NOT
			M_V_PFLD( T ) = M_CTE_NOT
			M_V_TFLD( T ) = M_IND_AKY
			M_G_CMP = LEFT$(M_G_CMP,M_V_UNDE(1) - 1 ) +&
			RIGHT$(M_G_CMP,M_V_UNDE(2))
			GO TO UND_LAB_CIC
		CASE ELSE
			IF LEFT$(M_G_CMP,4) = "FRM-" THEN
				M_SWI_CFRM = M_CTE_YES
				M_V_MOVE( T ) = M_CTE_NOT
			END IF
			M_V_RFRM( T ) = LEFT$(M_G_CMP,M_V_UNDE(1) - 1)
			M_V_REGI( T ) = LEFT$(M_G_CMP,M_V_UNDE(1) - 1)
	END SELECT

	SELECT MID$(M_G_CMP,M_V_UNDE(1),5)
		CASE "-FEC-"
			M_NUM_TFEC = 4
			M_V_DMSA(1) = "D"
			M_V_DMSA(2) = "M"
			M_V_DMSA(3) = "S"
			M_V_DMSA(4) = "A"
			M_SWI_FECH = M_CTE_YES
			M_V_MOVE( T ) = M_CTE_NOT
			M_V_FECH( T ) = FEC_IND_FFEC
		CASE "-DMA-", "-AMD-"
			M_NUM_TFEC = 3
			M_V_DMSA(1) = "D"
			M_V_DMSA(2) = "M"
			M_V_DMSA(3) = "A"
			M_V_DMSA(4) = ""
			M_SWI_FECH = M_CTE_YES
			M_V_MOVE( T ) = M_CTE_NOT
			M_V_FECH( T ) = FEC_IND_FDMA
		CASE "-MSA-", "-SAM-"
			M_NUM_TFEC = 3
			M_V_DMSA(1) = "M"
			M_V_DMSA(2) = "S"
			M_V_DMSA(3) = "A"
			M_V_DMSA(4) = ""
			M_SWI_FECH = M_CTE_YES
			M_V_MOVE( T ) = M_CTE_NOT
			M_V_FECH( T ) = FEC_IND_FMSA
		CASE "-FMA-", "-FAM-"
			M_NUM_TFEC = 2
			M_V_DMSA(1) = "M"
			M_V_DMSA(2) = "A"
			M_V_DMSA(3) = ""
			M_V_DMSA(4) = ""
			M_SWI_FECH = M_CTE_YES
			M_V_MOVE( T ) = M_CTE_NOT
			M_V_FECH( T ) = FEC_IND_FFMA
		CASE "-FSA-", "-FAS-"
			M_NUM_TFEC = 2
			M_V_DMSA(1) = "S"
			M_V_DMSA(2) = "A"
			M_V_DMSA(3) = ""
			M_V_DMSA(4) = ""
			M_SWI_FECH = M_CTE_YES
			M_V_MOVE( T ) = M_CTE_NOT
			M_V_FECH( T ) = FEC_IND_FFSA
		CASE "-FDM-", "-FMD-"
			M_NUM_TFEC = 2
			M_V_DMSA(1) = "D"
			M_V_DMSA(2) = "M"
			M_V_DMSA(3) = ""
			M_V_DMSA(4) = ""
			M_SWI_FECH = M_CTE_YES
			M_V_MOVE( T ) = M_CTE_NOT
			M_V_FECH( T ) = FEC_IND_FFDM
		CASE "-FFA-"
			M_NUM_TFEC = 1
			M_V_DMSA(1) = "A"
			M_V_DMSA(2) = ""
			M_V_DMSA(3) = ""
			M_V_DMSA(4) = ""
			M_SWI_FECH = M_CTE_YES
			M_V_MOVE( T ) = M_CTE_NOT
			M_V_FECH( T ) = FEC_IND_FFFA
		CASE "-VRF-"
			OVR_NUM_ADI = OVR_NUM_ADI + 2
			M_SWI_VERF = M_CTE_YES
			M_G_CMP = LEFT(M_G_CMP,M_V_UNDE(1)) +&
				"NUM" + RIGHT(M_G_CMP,M_V_UNDE(2))
			M_V_TIPO( T ) = "NUM"
			M_V_TIPO_N( T ) = "NUM"
			M_V_NUME( T ) = M_CTE_YES
		CASE "-IDC-"
			OVR_NUM_ADI = OVR_NUM_ADI + 2
			M_SWI_IDC = M_CTE_YES
			M_G_CMP = LEFT(M_G_CMP,M_V_UNDE(1)) +&
			"IND" + RIGHT(M_G_CMP,M_V_UNDE(2))
			M_V_TIPO( T ) = "IND"
			M_V_TIPO_N( T ) = "IND"
		CASE "-GLS-"
			M_SWI_GLOS = M_CTE_YES
	END SELECT

	M_V_TIPO( T ) = MID$(M_G_CMP,M_V_UNDE(1) + 1,&
               M_V_UNDE(2) - (M_V_UNDE(1) + 1))
	M_V_TIPO_N( T ) = M_V_TIPO( T )
	M_V_NOMB( T ) = RIGHT$(M_G_CMP,M_V_UNDE(2) + 1)
	M_V_NRTN( T ) = M_V_RFRM( T ) + "-" + M_V_TIPO( T ) +"-" + M_V_NOMB( T )

	M_NUM_FNC = M_FNC_DDYR

	M_V_CMP( T ) = M_G_CMP

	M_NUM_FNC = M_FNC_FIL
   END DEF
890
 !==>> INDEX 

   DEF INTEGER M_FNC_IDX
	TMP_INDEX = 1
	M_G_OCC = ""
	M_G_NIV_FLD = V_M(MG_B) + "02 "
	M_G_SPA_FLD = V_M(MG_B) + "   "
 IDX_LAB_NEW:
	ACT_INDEX = M_CTE_YES
	TMP_INDEX = TMP_INDEX + 1
	TOKEN = NEXTTOKEN
	TOKEN = NEXTTOKEN
	M_V_FICO(TMP_INDEX,1) = NUMTOKEN
 !   OVR_NUM_FIL = NUMTOKEN

	TOKEN = NEXTTOKEN
	TOKEN = NEXTTOKEN
	M_V_FICO(TMP_INDEX,2) = NUMTOKEN - 1

	TOKEN = NEXTTOKEN
	TOKEN = NEXTTOKEN
	IF VALTOKEN = ":" THEN
		GO TO IDX_LAB_NEW
	END IF      
895
 F_INDEX:

	IF ANT_INDEX = M_CTE_NOT THEN
		NIV_INDEX = 3
		M_SEPA_PIC = "                  PIC  "
	ELSE
		IF TMP_INDEX = M_TOT_CIDX THEN
			NIV_INDEX = 5
		ELSE
			NIV_INDEX = 3
		END IF
	END IF

	ANT_INDEX = M_CTE_YES
	M_TOT_CIDX = TMP_INDEX
 IDX_LAB_FIN:
	M_V_TIDX( T ) = M_TOT_CIDX
   END DEF
900
 !==>> HELP 

   DEF INTEGER M_FNC_HLP
	TOKEN = NEXTTOKEN
	TOKEN = NEXTTOKEN
	M_G_HLP = STRTOKEN
   END DEF

 !==>> TEXT 
920
   DEF INTEGER M_FNC_TEX
	IF M_G_FOR = 'FMS' THEN
		GO TO FIN_M_FNC_TEX
	END IF

	OVR_NUM_ADI = 1
	TOKEN = NEXTTOKEN
	TOKEN = NEXTTOKEN
	M_V_FICO(1,1) = NUMTOKEN
	OVR_NUM_FIL = NUMTOKEN
	M_NUM_LINE = NUMTOKEN
	IF M_SWI_PFLD = M_CTE_NOT THEN
		M_SWI_PFLD = M_CTE_YES
	END IF
	M_G_FIL = STR$(M_V_FICO(1,1) - M_NUM_INFE + 1 )
	IF LEN(M_G_FIL) = 1 THEN
		M_G_FIL = "0" + M_G_FIL
	END IF
	TOKEN = NEXTTOKEN
	TOKEN = NEXTTOKEN
	M_V_FICO(1,2) = NUMTOKEN - 1
	OVR_NUM_COL = NUMTOKEN - 1
	M_NUM_COLU = NUMTOKEN
	BMS_NUM_COL = NUMTOKEN
	M_G_COL = POS_V_ZRS(LEN(STR$(M_V_FICO(1,2)))) +&
		STR$(M_V_FICO(1,2))
	TOKEN = NEXTTOKEN
	TOKEN = NEXTTOKEN
	M_NUM_TTEX = SZTOKEN
	M_G_DEF = STRTOKEN
	TOKEN = NEXTTOKEN
	IF VALTOKEN = "&" THEN
		TOKEN = NEXTTOKEN
		M_G_DEF = M_G_DEF + STRTOKEN 
		M_NUM_TTEX = M_NUM_TTEX + SZTOKEN
		TOKEN = NEXTTOKEN
	END IF
	OVR_NUM_LEN = M_NUM_TTEX
	M_G_L11 = "         DFHMDF POS=(" + M_G_FIL + &
		"," + M_G_COL + "),ATTRB=(ASKIP"
	M_G_L13 = "),LENGTH=" + STR$(M_NUM_TTEX) + ","
	M_G_L31 = ""
	M_G_L21 = "               INITIAL='" 
	IF LEN(M_G_DEF) > 46 THEN
		M_G_L21 = M_G_L21 + LEFT$(M_G_DEF,47) + "X"
		M_G_L31 = "               " + RIGHT$(M_G_DEF,48) + "'"
	ELSE
		M_G_L21 = M_G_L21 + M_G_DEF + "'"
	END IF
	M_G_L12 = ",NORM"
	WHILE VALTOKEN <> ";"
		IF VALTOKEN = "BLINK" THEN
			M_SWI_PFLD = M_CTE_NOT
			GO TO FIN_M_FNC_TEX
		END IF
		TOKEN = NEXTTOKEN
	NEXT
	M_NUM_VSZ = M_NUM_TTEX + 1
	M_NUM_FNC = M_FNC_VAL
930
	M_G_WRIT = M_G_L11 + M_G_L12 + M_G_L13
	CALL M_RUT_SPA(M_G_WRIT,71)
	M_G_WRIT = M_G_WRIT + "X"
	M_G_WRIT = M_FNC_WBMS(M_G_WRIT)
	M_G_L21 = M_FNC_WBMS(M_G_L21)
	IF M_G_L31 <> "" THEN
		M_G_L31 = M_FNC_WBMS(M_G_L31)
	END IF
	M_NUM_FNC = M_FNC_OVR
 FIN_M_FNC_TEX:
   END DEF


 !==>> ASIGNACION CORRELATIVOS PARA NOMBRES REPETIDOS  

   DEF INTEGER M_FNC_NOMB
	FOR I% = 1 TO M_TOT_NOMB
		IF M_V_REPE(I%) = M_G_NOMB THEN
			M_TOT_REPE = M_TOT_REPE + 1
			M_G_NOMB =&
			LEFT$(M_G_NOMB,LEN(M_G_NOMB) -&
				LEN(STR$(M_TOT_REPE))) + STR$(M_TOT_REPE)
		END IF
	NEXT I%
	M_TOT_NOMB = M_TOT_NOMB + 1
	M_V_REPE(M_TOT_NOMB) = M_G_NOMB
   END DEF

 !==>> BMS 

   DEF INTEGER M_FNC_BMS

 !!! Display only ==> intensidad normal
	IF M_G_DARK <> "DRK" AND&
	   M_V_DSPL( S ) = M_CTE_YES THEN
		M_G_DARK = "BRT"
	END IF
	BMS_NUM_LMAP = BMS_NUM_PIC + 3

 !!! Delim_izq ( M_G_DLI es < o { , Comienza en columna - 2 para campos no DO )
	IF M_V_DSPL( S ) = M_CTE_NOT AND&
	   M_IND_OVER = M_CTE_NOT THEN
		BMS_NUM_DPZ = -2
		M_NUM_FNC = R_POS
		M_G_BMS = "         DFHMDF " + M_G_POS +&
                       ",ATTRB=(ASKIP,NORM),LENGTH=1," + M_G_DLI
		M_G_BMS = M_FNC_WBMS(M_G_BMS)
	END IF
 !!! 

   BMS_NUM_DPZ = M_NUM_NCI
 !!!      Campo Prefijo ( Ej: IDC )
   IF M_SWI_IDC = M_CTE_YES THEN
         BMS_NUM_DPZ  = 0
         M_G_NOMB = M_V_TIPO( S ) + M_V_NOMB( S )
         M_NUM_FNC = M_FNC_NOMB
         CALL M_RUT_SPA(M_G_NOMB,9)
         M_G_NOMB  = M_G_NOMB + "DFHMDF "
         M_NUM_FNC  = R_POS
         M_AUX_IDC$ = ",ATTRB=(ASKIP," + M_G_DARK + ",FSET),LENGTH=1"
         M_AUX_IDC$ = M_G_NOMB + M_G_POS + M_AUX_IDC$
         M_AUX_IDC$ = M_FNC_WBMS(M_AUX_IDC$)
         BMS_NUM_DPZ  = 2
         M_NUM_FNC  = R_POS
         M_AUX_IDC$ = ",ATTRB=(PROT,BRT),LENGTH=1,INITIAL='-'"
         M_AUX_IDC$ = "         DFHMDF " + M_G_POS + M_AUX_IDC$
         M_AUX_IDC$ = M_FNC_WBMS(M_AUX_IDC$)
 !!!     BMS_NUM_PIC  = M_NUM_PICT - 1
         BMS_NUM_DPZ  = 4
   END IF

 !!! Nombre del campo
   IF M_SWI_IDC = M_CTE_YES THEN
      M_G_NOMB = M_V_TIPO( S  + 1 ) + M_V_NOMB( S )
   ELSE
      M_G_NOMB = M_V_TIPO( S ) + M_V_NOMB( S )
   END IF
   M_NUM_FNC = M_FNC_NOMB
   CALL M_RUT_SPA(M_G_NOMB,9)
   M_G_BMS = M_G_NOMB + "DFHMDF "

 !!! Atributos del campo
   M_NUM_FNC = R_POS
   M_G_BMS = M_G_BMS + M_G_POS + ",ATTRB=(ASKIP,"

   M_G_BMS = M_G_BMS + M_G_DARK + ",FSET),"
   M_G_BMS = M_G_BMS + "LENGTH=" + STR$(BMS_NUM_PIC)
   M_G_BMS = M_FNC_WBMS(M_G_BMS)

 !!! Campo Stopper
   M_V_TAB( S ) = ",ATTRB=(PROT),LENGTH=1," + M_G_DLD

 !!!      Campo Sufijo ( Ej: VRF )
   IF M_SWI_VERF = M_CTE_YES THEN
      BMS_NUM_DPZ  = BMS_NUM_PIC + 1
      M_NUM_FNC  =  R_POS
      M_AUX_VRF$ = "         DFHMDF " + M_G_POS
      M_AUX_VRF$ = M_AUX_VRF$ +&
            ",ATTRB=(PROT,BRT),LENGTH=1,INITIAL='-'"
      M_AUX_VRF$ = M_FNC_WBMS(M_AUX_VRF$)
      BMS_NUM_DPZ  = BMS_NUM_PIC + 1 + 2
      M_G_NOMB = M_V_TIPO( S  + 1) + M_V_NOMB( S )
      M_NUM_FNC = M_FNC_NOMB
      CALL M_RUT_SPA(M_G_NOMB,9)
      M_G_NOMB  = M_G_NOMB + "DFHMDF "
      M_NUM_FNC  = R_POS
      M_AUX_VRF$ = M_G_NOMB + M_G_POS
      M_AUX_VRF$ = M_AUX_VRF$ + ",ATTRB=(ASKIP," + M_G_DARK +&
				",FSET),LENGTH=1"
      M_AUX_VRF$ = M_FNC_WBMS(M_AUX_VRF$)
      BMS_NUM_DPZ  = BMS_NUM_PIC + 2 + 2 + 1
   ELSE
      BMS_NUM_DPZ  = BMS_NUM_PIC + M_NUM_NCI + 1
      IF M_SWI_IDC = M_CTE_YES THEN
          BMS_NUM_DPZ = BMS_NUM_DPZ + 3
      END IF
   END IF

  IF M_V_DSPL( S ) = M_CTE_NOT AND&
      M_IND_OVER = M_CTE_NOT THEN
      M_NUM_FNC = R_POS
      M_G_BMS = "         DFHMDF "
      M_G_BMS = M_G_BMS + M_G_POS +&
         M_V_TAB( S )
      M_G_BMS = M_FNC_WBMS(M_G_BMS)
   END IF

   END DEF
 !==>> FIELD
940
   DEF INTEGER M_FNC_FLD
   M_NUM_CORR = 0
   OVR_NUM_ADI = 5
   M_G_HLP = ""
   M_SWI_FECH = M_CTE_NOT
   M_SWI_GLOS = M_CTE_NOT
   M_G_DARK = "NORM"
   M_SWI_IDC = M_CTE_NOT
   M_SWI_VERF = M_CTE_NOT
   M_SWI_CFRM = M_CTE_NOT
   ACT_INDEX = M_CTE_NOT

   TOKEN = NEXTTOKEN
   IF VALTOKEN <> "NAME" THEN
      GO TO FLD_LAB_FLD
   END IF
   TOKEN = NEXTTOKEN
   TOKEN = NEXTTOKEN
   M_NUM_CFLD = M_NUM_CFLD + 1
   M_G_CMP = STRTOKEN
   M_NUM_FNC = M_FNC_UND

   TOKEN = NEXTTOKEN
   TOKEN = NEXTTOKEN
   M_V_FICO(1,1) = NUMTOKEN
   OVR_NUM_FIL = NUMTOKEN
   IF M_SWI_PFLD = M_CTE_NOT THEN
      M_SWI_PFLD = M_CTE_YES
 !!!      M_NUM_INFE = M_V_FICO(1,1)
   END IF

   TOKEN = NEXTTOKEN
   TOKEN = NEXTTOKEN
   M_V_FICO(1,2) = NUMTOKEN - 1
   OVR_NUM_COL = NUMTOKEN - 3
   
   TOKEN = NEXTTOKEN
   TOKEN = NEXTTOKEN
950
   IF VALTOKEN = 'PICTURE' OR&
      VALTOKEN = 'DATE_FIELD' THEN
		IF M_G_FOR = 'BMS' THEN
			M_NUM_FNC = M_FNC_PIC_BMS
		ELSE
			M_NUM_FNC = M_FNC_PIC_FMS
		END IF
 !      END IF
 !!!      END IF
    END IF
   IF VALTOKEN = 'INDEX' THEN
      TOKEN = NEXTTOKEN
      M_NUM_FNC = M_FNC_IDX
   ELSE
      M_TOT_CIDX = 1
   END IF
   IF VALTOKEN = 'HELP' THEN
      M_NUM_FNC = M_FNC_HLP
   END IF
960
   WHILE VALTOKEN <> ";"
      IF VALTOKEN = "NOECHO" THEN
	 M_G_DARK = "DRK"
         M_V_BYA( S ) = 3
         IF M_SWI_VERF = M_CTE_YES THEN
            M_V_BYA( T +1) = 3
         END IF
      ELSE
      IF VALTOKEN = "DISPLAY_ONLY" THEN
         M_V_DSPL( S ) = M_CTE_YES
         M_V_PROT( S ) = M_CTE_NOT
         OVR_NUM_ADI = OVR_NUM_ADI - 4
         OVR_NUM_COL = OVR_NUM_COL + 2
      ELSE
      IF VALTOKEN = "AUTOTAB" THEN
         M_V_TAB( S ) =&
            ",ATTRB=(PROT,ASKIP),LENGTH=1,"
      ELSE
      IF VALTOKEN = "RESPONSE_REQUIRED" THEN
         M_V_OBLI( S ) = "N"

      END IF
      END IF
      END IF
      END IF
      TOKEN = NEXTTOKEN
   NEXT
   IF M_SWI_FECH = M_CTE_YES THEN
      M_NUM_FNC = M_FNC_FEC
   ELSE
   IF M_SWI_VERF = M_CTE_YES THEN
	IF M_G_FOR = 'BMS' THEN
		M_NUM_FNC = M_FNC_VRF_BMS
	ELSE
		M_NUM_FNC = M_FNC_VRF_FMS
	END IF
   ELSE
   IF M_SWI_IDC = M_CTE_YES THEN
	IF M_G_FOR = 'BMS' THEN
		M_NUM_FNC = M_FNC_IDC_BMS
	ELSE
		M_NUM_FNC = M_FNC_IDC_FMS
	END IF
   END IF
   END IF
   END IF
   M_NUM_LINE = M_V_FICO(1,1)
   M_NUM_COLU = M_V_FICO(1,2)
	IF M_G_FOR = 'BMS' THEN
		M_NUM_FNC = M_FNC_TXT_BMS
	ELSE
		M_NUM_FNC = M_FNC_TXT_FMS
	END IF


 !!! Setea valores para funcion del BMS
   BMS_NUM_PIC = M_NUM_PICT
 !!!   IF M_SWI_VERF = M_CTE_YES THEN
 !!!      BMS_NUM_PIC = M_NUM_PICT - 1
 !!!   END IF

 !!! Area_total_campo = Delm_izq + attrb_byte + pic_campo   + delm_izq
   M_NUM_VSZ =    2        + 1          + BMS_NUM_PIC + 2

   M_NUM_FNC = M_FNC_OVR
   FOR L% = 1 TO M_TOT_CIDX
 !!! Setea fila-columna para el sort
      BMS_NUM_COL =  M_V_FICO(L%,2)
      M_NUM_LINE = M_V_FICO(L%,1)
      M_NUM_COLU = M_V_FICO(L%,2)

 !!! Fila del campo

      M_G_FIL = STR$(M_V_FICO(L%,1) - M_NUM_INFE + 1 )
      IF LEN(M_G_FIL) = 1 THEN
         M_G_FIL = "0" + M_G_FIL
      END IF

      M_G_COL = STR$(M_V_FICO(L%,2) )
      IF LEN(M_G_COL) = 1 THEN
         M_G_COL = "0" + M_G_COL
      END IF

 !!!      M_NUM_FNC = M_FNC_VAL
	IF M_G_FOR = 'BMS' THEN
		M_NUM_FNC = M_FNC_BMS
	END IF
   NEXT L%

 FLD_LAB_FLD:
   END DEF
962

 !==>> Validacion de Campos No Indexados

   DEF INTEGER GEN_FNC_VCNI
	CALL PUT_GEN(MG_B,"PERFORM VAL-" + M_V_NRTN(I%) + ".")
	CALL PUT_GEN(MG_B,"IF FRM-SUAR = " +&
		" FRM-SUAR-MAL OR FRM-SUAR = FRM-SUAR-CLR")
	CALL PUT_GEN(MG_1,"MOVE -1 TO " +&
		M_V_NRTN(I%) + "-LEN" + M_G_DFL)
	CALL PUT_GEN(MG_1, "GO TO FIN-VAL-FLD-" + M_G_MAPA + ".")
   END DEF

 !==>> Validacion de Campos Indexados
 !
965
   DEF INTEGER GEN_FNC_VCSI
     CALL PUT_GEN(MG_B,"PERFORM VAL-" + M_V_NRTN(I%) )
     CALL PUT_GEN(MG_B," VARYING FRM-IFLD FROM 1 BY 1 UNTIL FRM-IFLD > " +&
          STR$(M_V_TIDX(I%)) )
     CALL PUT_GEN(MG_B,"     OR FRM-SUAR = FRM-SUAR-MAL" )
     CALL PUT_GEN(MG_B,"     OR FRM-SUAR = FRM-SUAR-CLR.")
     CALL PUT_GEN(MG_B,"IF FRM-SUAR = " +&
         "FRM-SUAR-MAL OR FRM-SUAR = FRM-SUAR-CLR" )
     CALL PUT_GEN(MG_1,"SUBTRACT 1 FROM FRM-IFLD")
     IF M_G_FOR = 'BMS' THEN
	CALL PUT_GEN(MG_1,"MOVE -1 TO " + M_V_NRTN(I%) +&
		"-LEN" + M_G_DFL + "(FRM-IFLD)" )
     ELSE
	CALL PUT_GEN(MG_1,"MOVE -1 TO " + M_V_NRTN(I%) +&
         "-LEN" + M_G_DFL )
     END IF
     CALL PUT_GEN(MG_1,"GO TO FIN-VAL-FLD-" + M_G_MAPA + ".")
   END DEF

970

   DEF INTEGER M_FNC_COD
   FOR I% = 1 TO  T 
	IF M_V_TIPO(I%) = "COD" THEN
                M_V_VAUT(I%) = M_NUM_CODI 
		FOR J% = 1 TO  T 
		  IF M_V_TIPO(J%) = "GLS" AND&
		     M_V_NOMB(J%) = M_V_NOMB(I%) THEN
			M_V_GLOS(I%) = J%
			J% =  T  + 1
		  END IF
	 	NEXT J%
	ELSE
	IF M_V_TIPO(I%) = "IND" OR&
           M_V_TIPO(I%) = "MSC" THEN
                M_V_VAUT(I%) = M_NUM_MISC
		FOR J% = 1 TO  T 
		  IF M_V_TIPO(J%) = "GLS" AND&
		     M_V_NOMB(J%) = M_V_NOMB(I%) THEN
			M_V_GLOS(I%) = J%
			J% =  T  + 1
		  END IF
	 	NEXT J%
	END IF
	END IF
   NEXT I%
   END DEF

   DEF INTEGER M_FNC_BUS
	FOR I% = 1 TO  T
		IF M_V_VGLS(I%) <= " " THEN
			FOR J% = 1 TO  T
				IF I% <> J% AND&
				   M_V_TIPO(J%) = "GLS" AND&
				   M_V_NOMB(I%) = M_V_NOMB(J%) THEN
					M_V_VGLS(I%) = M_V_NRTN(J%)
					M_V_LGLS(I%) = M_V_LGLS(J%)
				END IF
			NEXT J%
		ELSE
			FOR J% = 1 TO  T
				IF M_V_VGLS(I%) = M_V_NRTN(J%) THEN
					M_V_LGLS(I%) = M_V_LGLS(J%)
				END IF
			NEXT J%
		END IF
	NEXT I%
   END DEF

 !!!   FUNCIONES MODULO DE MANEJO
 !!!   ==========================

   DEF INTEGER GEN_PUT_ALL
	CALL PUT_GEN(MG_C,"* " + M_G_IDEN)
	CALL PUT_GEN(MG_N,'*% RWI = "' + M_G_MAPA + '-FLD' + '"')
	CALL PUT_GEN(MG_A,"PUT-ALL-" + M_G_MAPA + " SECTION.")
	CALL PUT_GEN(MG_A,"INI-PUT-ALL-" + M_G_MAPA + ".")
	CALL PUT_GEN(MG_N,"*% INCLUDE INI_PUT_ALL_" + M_G_MAPA +M_G_PBM)

	FOR I% = 1 TO M_TOT_FILE
		CALL PUT_GEN(MG_B,"PERFORM PUT-" + M_V_FIL(I%) + "-" + M_G_MAPA + ".")
		PRINT #M_CNL_FINF,'% RG' + STR$(I%) + ' = "' + M_V_FIL(I%) + '"'
	NEXT I%
	PRINT #M_CNL_FINF,'% TRG = ' + STR$(M_TOT_FILE)

	CALL PUT_GEN(MG_N,"*% INCLUDE FIN_PUT_ALL_" + M_G_MAPA +M_G_PBM )
	CALL PUT_GEN(MG_A,"FIN-PUT-ALL-" + M_G_MAPA + ".")
	CALL PUT_GEN(MG_B,"EXIT.")
   END DEF

 !==>> PUT POR REGISTRO

   DEF INTEGER GEN_PUT_REG_INI
     CALL WRT_GEN(MG_C," " +&
     NWL + V_M(MG_A) + "PUT-" + M_V_FIL(I%) + "-" + M_G_MAPA + " SECTION."   +&
     NWL + V_M(MG_A) + "INI-PUT-" + M_V_FIL(I%) + "-" + M_G_MAPA + "."       +&
     NWL + "*% INCLUDE INI_PUT_" + M_V_FIL(I%) + "_" + M_G_MAPA + M_G_PBM    +&
     NWL + V_M(MG_B) + "IF PGM-STAT-" + M_V_FIL(I%) + "-NUL"                 +&
     NWL + V_M(MG_1) + "GO TO FIN-PUT-" + M_V_FIL(I%) + "-" + M_G_MAPA + "." +&
     NWL + V_M(MG_B) + "IF NOT PGM-STAT-" + M_V_FIL(I%) + "-OKS"             +&
     NWL + V_M(MG_1) + "PERFORM CLR-" + M_V_FIL(I%) + "-" + M_G_MAPA         +&
     NWL + V_M(MG_1) + "GO TO FIN-PUT-" + M_V_FIL(I%) + "-" + M_G_MAPA + ".")
   END DEF

   DEF INTEGER GEN_PUT_REG_MOV
	IF M_V_TIDX(J%) > 1 THEN
		CALL PUT_GEN(MG_C,"*")
		CALL PUT_GEN(MG_C,"* CAMPO INDEXADO   " + M_V_NRTN(J%) )
		FOR M% = 1 TO M_V_TIDX(J%)
			CALL PUT_GEN(MG_B,"MOVE " + M_V_NRTN(J%) +&
				" IN " + M_V_REGI(J%) + M_G_VIX(M%) +&
				" TO " + M_V_NRTN(J%) +&
				M_G_DFL + M_G_VIX(M%) + "." )
		NEXT M%
	ELSE
		CALL PUT_GEN(MG_B,"MOVE " + M_V_NRTN(J%) + " IN " +&
			M_V_REGI(J%) + " TO " + M_V_NRTN(J%) + M_G_DFL + "." )
	END IF
   END DEF

   DEF INTEGER GEN_PUT_REG_BUS
	IF M_V_TIDX(J%) > 1 THEN
		M_G_INDI$ = M_G_MAPA + "-FLD(FRM-IFLD)"
	ELSE
		M_G_INDI$ = M_G_MAPA + "-FLD"
	END IF
	CALL PUT_GEN(MG_N,'*% BUF = "' + M_G_INDI$ + '"')
	CALL PUT_GEN(MG_N,'*% SIS = "' + M_V_VSIS(J%) + '"')
	CALL PUT_GEN(MG_N,'*% TAB = "' + M_V_VTAB(J%) + '"')
	CALL PUT_GEN(MG_N,'*% FLD = "' + M_V_NRTN(J%) + '"')
	CALL PUT_GEN(MG_N,'*% GLS = "' + M_V_VGLS(J%) + '"')
	CALL PUT_GEN(MG_N,'*% LGL = '  + STR$( M_V_LGLS(J%) ) )
	CALL PUT_GEN(MG_N,"*% INCLUDE '" + M_V_VBUS(J%) + "'")
			       IF M_V_VBUS(J%)  = "BUSOFI" THEN
					BUSOFI$ = "TRUE"
			       ELSE
			       IF M_V_VBUS(J%)  = "BUSUSR" THEN
					BUSUSR$ = "TRUE"
			       ELSE
			       IF M_V_VBUS(J%)  = "BUSTAB" THEN
					BUSTAB$ = "TRUE"
			       ELSE
			       IF M_V_VBUS(J%)  = "BUSMSC" THEN
					BUSMSC$ = "TRUE"
			       ELSE
			       END IF
			       END IF
			       END IF
			       END IF
   END DEF

   DEF INTEGER GEN_PUT_REG_FIN
	CALL PUT_GEN(MG_N,"*% INCLUDE FIN_PUT_" + M_V_FIL(I%) +&
			"_" + M_G_MAPA + M_G_PBM )
	CALL PUT_GEN(MG_A,"FIN-PUT-" + M_V_FIL(I%) + "-" + M_G_MAPA + ".")
	CALL PUT_GEN(MG_B,"EXIT.")
   END DEF

 !==>> RET TOTAL

   DEF INTEGER GEN_PUT_REG
	FOR I% = 1 TO M_TOT_FILE
		M_NUM_FNC = GEN_PUT_REG_INI

		FOR J% = 1 TO  T 
			IF M_V_FIL(I%) = M_V_REGI(J%) AND &
			   M_V_MOVE(J%) = M_CTE_YES THEN
				M_NUM_FNC = GEN_PUT_REG_MOV
			END IF
		NEXT J%

		FOR J% = 1 TO  T 
			IF M_V_FIL(I%) = M_V_REGI(J%) THEN
				IF M_V_VBUS(J%) > " " AND&
				   M_V_VBUS(J%) <> "NOBUS" AND&
				   M_V_VGLS(J%) > " " THEN
					M_NUM_FNC = GEN_PUT_REG_BUS
				END IF
			END IF
		NEXT J%
		M_NUM_FNC = GEN_PUT_REG_FIN
	NEXT I%

   END DEF

   DEF INTEGER GEN_RET_ALL
	CALL PUT_GEN(MG_C," ")
	CALL PUT_GEN(MG_A,"RET-ALL-" + M_G_MAPA + " SECTION.")
	CALL PUT_GEN(MG_A,"INI-RET-ALL-" + M_G_MAPA + ".")
	CALL PUT_GEN(MG_N,"*% INCLUDE INI_RET_ALL_" +M_G_MAPA+ M_G_PBM )
	CALL PUT_GEN(MG_B,"PERFORM KEY-ALL-" + M_G_MAPA + ".")
	FOR I% = 1 TO M_TOT_FILE
		CALL PUT_GEN(MG_B,"PERFORM RET-" + M_V_FIL(I%) + "-" +&
				M_G_MAPA + ".")
	NEXT I%
	CALL PUT_GEN(MG_N,"*% INCLUDE FIN_RET_ALL_" + M_G_MAPA+M_G_PBM )
	CALL PUT_GEN(MG_A,"FIN-RET-ALL-" + M_G_MAPA + ".")
	CALL PUT_GEN(MG_B,"EXIT.")
   END DEF

   DEF INTEGER GEN_RET_REG_INI
	CALL PUT_GEN(MG_C," ")
	CALL PUT_GEN(MG_A,"RET-" + M_V_FIL(I%) + "-" + M_G_MAPA + " SECTION.")
	CALL PUT_GEN(MG_A,"INI-RET-" + M_V_FIL(I%) + "-" + M_G_MAPA + ".")
	CALL PUT_GEN(MG_N,"*% INCLUDE INI_RET_" + M_V_FIL(I%) +&
		"_" + M_G_MAPA + M_G_PBM )
   END DEF

   DEF INTEGER GEN_RET_REG_MOV
	IF M_V_FIL(I%)  = M_V_REGI(J%) AND &
	   M_V_MOVE(J%) = M_CTE_YES    AND &
	   M_V_TFLD(J%) = M_IND_FLD     THEN
		IF M_V_TIDX(J%) > 1 THEN
			CALL PUT_GEN(MG_C,"*")
			CALL PUT_GEN(MG_C,"* CAMPO INDEXADO   " + M_V_NRTN(J%) )
			FOR M% = 1 TO M_V_TIDX(J%)
				CALL PUT_GEN(MG_B,"MOVE " + M_V_NRTN(J%) +&
				M_G_DFL + M_G_VIX(M%) + " TO " +&
				M_V_NRTN(J%) + " IN " + M_V_REGI(J%) +&
				M_G_VIX(M%) + "." )
			NEXT M%
		ELSE
			CALL PUT_GEN(MG_B,"MOVE " + M_V_NRTN(J%) + M_G_DFL +&
				" TO " + M_V_NRTN(J%) + " IN " +&
				M_V_REGI(J%) + "." )
		END IF
	END IF
   END DEF

   DEF INTEGER GEN_RET_REG_FIN
	CALL PUT_GEN(MG_N,"*% INCLUDE FIN_RET_" + M_V_FIL(I%) +&
		"_" + M_G_MAPA + M_G_PBM )
	CALL PUT_GEN(MG_A,"FIN-RET-" + M_V_FIL(I%) + "-" + M_G_MAPA + ".")
	CALL PUT_GEN(MG_B,"EXIT.")
   END DEF

   DEF INTEGER GEN_RET_REG
	FOR I% = 1 TO M_TOT_FILE
		M_NUM_FNC = GEN_RET_REG_INI
		FOR J% = 1 TO  T 
			M_NUM_FNC = GEN_RET_REG_MOV
		NEXT J%
		M_NUM_FNC = GEN_RET_REG_FIN
	NEXT I%
   END DEF


   DEF INTEGER GEN_KEY_ALL_INI
	CALL PUT_GEN(MG_C," ")
	CALL PUT_GEN(MG_A,"KEY-ALL-" + M_G_MAPA + " SECTION.")
	CALL PUT_GEN(MG_A,"INI-KEY-ALL-" + M_G_MAPA + ".")
	CALL PUT_GEN(MG_N,"*% INCLUDE INI_KEY_ALL_" + M_G_MAPA+M_G_PBM )
   END DEF

   DEF INTEGER GEN_KEY_ALL_FIN
	CALL PUT_GEN(MG_N,"*% INCLUDE FIN_KEY_ALL_" + M_G_MAPA+M_G_PBM )
	CALL PUT_GEN(MG_A,"FIN-KEY-ALL-" + M_G_MAPA + ".")
	CALL PUT_GEN(MG_B,"EXIT.")
   END DEF

   DEF INTEGER GEN_KEY_ALL
	M_NUM_FNC = GEN_KEY_ALL_INI
	FOR I% = 1 TO M_TOT_FILE
		CALL PUT_GEN(MG_B,"PERFORM KEY-" + M_V_FIL(I%) +&
			"-" + M_G_MAPA + ".")
	NEXT I%
	M_NUM_FNC = GEN_KEY_ALL_FIN
   END DEF

   DEF INTEGER GEN_KEY_REG_INI
	CALL PUT_GEN(MG_C," ")
	CALL PUT_GEN(MG_A,"KEY-" + M_V_FIL(I%) + "-" + M_G_MAPA + " SECTION.")
	CALL PUT_GEN(MG_A,"INI-KEY-" + M_V_FIL(I%) + "-" + M_G_MAPA + ".")
	CALL PUT_GEN(MG_N,"*% INCLUDE INI_KEY_" + M_V_FIL(I%) +&
		"_" + M_G_MAPA + M_G_PBM )
   END DEF

   DEF INTEGER GEN_KEY_REG_MOV
	IF M_V_TIDX(J%) > 1 THEN
		FOR M% = 1 TO M_V_TIDX(J%)
			CALL PUT_GEN(MG_B,"MOVE "  + M_V_NRTN(J%) + M_G_DFL +&
				M_G_VIX(M%) + " TO " + M_V_NRTN(J%) + " IN " +&
				M_V_REGI(J%)  + M_G_VIX(M%) + "." )
		NEXT M%
	ELSE
		CALL PUT_GEN(MG_B,"MOVE " + M_V_NRTN(J%) + M_G_DFL + " TO " +&
			M_V_NRTN(J%) + " IN " + M_V_REGI(J%) + "." )
	END IF
   END DEF

   DEF INTEGER GEN_KEY_REG_FIN
	CALL PUT_GEN(MG_N,"*% INCLUDE FIN_KEY_" + M_V_FIL(I%) +&
		"_" + M_G_MAPA + M_G_PBM )
	CALL PUT_GEN(MG_A,"FIN-KEY-" + M_V_FIL(I%) + "-" + M_G_MAPA + ".")
	CALL PUT_GEN(MG_B,"EXIT.")
   END DEF

   DEF INTEGER GEN_KEY_REG
	FOR I% = 1 TO M_TOT_FILE
		M_NUM_FNC = GEN_KEY_REG_INI
		FOR J% = 1 TO  T 
			IF  M_V_FIL(I%)  =  M_V_REGI(J%)   AND &
			M_V_TFLD(J%) <> M_IND_FLD   THEN
				IF M_V_MOVE(J%) = M_CTE_YES THEN
					M_NUM_FNC = GEN_KEY_REG_MOV
				END IF
			END IF
		NEXT J%
		M_NUM_FNC = GEN_KEY_REG_FIN
	NEXT I%
   END DEF

   DEF INTEGER GEN_CLR_ALL
	CALL PUT_GEN(MG_C," ")
	CALL PUT_GEN(MG_A,"SCR-CLRA-" + M_G_MAPA + " SECTION.")
	CALL PUT_GEN(MG_A,"INI-SCR-CLRA-" + M_G_MAPA + ".")
	CALL PUT_GEN(MG_N,"*% INCLUDE INI_SCR_CLRA_" + M_G_MAPA + M_G_PBM )
	IF M_G_FOR = "FMS" THEN
		CALL PUT_GEN(MG_B,"MOVE FRM-CLR-ALL TO FRM-CMND.")
		CALL PUT_GEN(MG_B,"PERFORM GNS-PRO-FRM.")
	ELSE
		CALL PUT_GEN(MG_B,"PERFORM CLR-KEY-" + M_G_MAPA + ".")
		CALL PUT_GEN(MG_B,"PERFORM CLR-FLD-" + M_G_MAPA + ".")
	END IF
	CALL PUT_GEN(MG_N,"*% INCLUDE FIN_SCR_CLRA_" + M_G_MAPA+M_G_PBM )
	CALL PUT_GEN(MG_A,"FIN-SCR-CLRA-" + M_G_MAPA + ".")
	CALL PUT_GEN(MG_B,"EXIT.")
   END DEF

   DEF INTEGER GEN_CLR_KEY
	CALL PUT_GEN(MG_C," ")
	CALL PUT_GEN(MG_A,"CLR-KEY-" + M_G_MAPA + " SECTION.")
	CALL PUT_GEN(MG_A,"INI-CLR-KEY-" + M_G_MAPA + ".")
	CALL PUT_GEN(MG_N,"*% INCLUDE INI_CLR_KEY_" + M_G_MAPA+M_G_PBM )
	FOR I% = 1 TO  T 
		IF M_V_SCLR(I%) = M_CTE_YES AND&
		   M_V_TFLD(I%) <> M_IND_FLD THEN
			M_G_RED = ""
			M_AUX_VAL$ = "MOVE SPACES TO "
			IF M_V_NUME(I%) = M_CTE_YES THEN
				M_AUX_VAL$ = "MOVE ZEROES TO "
			END IF

 !!! Valores de limpieza de fechas
 !!!      IF ( M_V_FECH(I%) = M_CTE_NOT OR&
 !!!           M_V_DSPL(I%) = M_CTE_YES ) THEN
 !!!         M_AUX_VAL$ = "MOVE" + M_V_FFEC(M_V_FECH(I%)) + "TO "
 !!!      END IF
			IF M_V_TIDX(I%) > 1 THEN
				FOR ZZ% = 1 TO M_V_TIDX(I%)
					CALL PUT_GEN(MG_B,M_AUX_VAL$ +&
						M_V_NRTN(I%) + M_G_DFL +&
						M_G_VIX(ZZ%) + ".")
				NEXT ZZ%
			ELSE
				CALL PUT_GEN(MG_B,M_AUX_VAL$ + M_V_NRTN(I%) +&
					M_G_DFL + ".")
			END IF
		END IF
	NEXT I%
	CALL PUT_GEN(MG_N,"*% INCLUDE FIN_CLR_KEY_" + M_G_MAPA+M_G_PBM )
	CALL PUT_GEN(MG_A,"FIN-CLR-KEY-" + M_G_MAPA + ".")
	CALL PUT_GEN(MG_B,"EXIT.")
   END DEF

   DEF INTEGER GEN_CLR_FLD
	CALL PUT_GEN(MG_C," ")
	CALL PUT_GEN(MG_A,"CLR-FLD-" + M_G_MAPA + " SECTION.")
	CALL PUT_GEN(MG_A,"INI-CLR-FLD-" + M_G_MAPA + ".")
	CALL PUT_GEN(MG_N,"*% INCLUDE INI_CLR_FLD_" + M_G_MAPA+M_G_PBM )
	FOR J% = 1 TO  T 
		IF M_V_RFRM(J%) =  "FRM" AND &
		   M_V_SCLR(J%) =  M_CTE_YES AND&
		   M_V_TFLD(J%) =  M_IND_FLD THEN
			M_AUX_VAL$ = "MOVE SPACES TO "
			IF M_V_NUME(J%) = M_CTE_YES THEN
				M_AUX_VAL$ = "MOVE ZEROES TO "
			END IF

 !!! Valores de limpieza de fechas
 !!!         IF NOT ( M_V_FECH(J%) = M_CTE_NOT OR&
 !!!              M_V_DSPL(J%) = M_CTE_YES ) THEN
 !!!            M_AUX_VAL$ = "MOVE" + M_V_FFEC(M_V_FECH(J%)) + "TO "
 !!!         END IF
			IF M_V_TIDX(J%) > 1 THEN
				FOR ZZ% = 1 TO M_V_TIDX(J%)
					CALL PUT_GEN(MG_B,M_AUX_VAL$ + M_V_NRTN(J%) +&
						M_G_DFL + M_G_VIX(ZZ%) + ".")
				NEXT ZZ%
			ELSE
				CALL PUT_GEN(MG_B,M_AUX_VAL$ + M_V_NRTN(J%) +&
					M_G_DFL + ".")
			END IF
		END IF
	NEXT J%

	FOR I% = 1 TO M_TOT_FILE
		CALL PUT_GEN(MG_B,"PERFORM CLR-" + M_V_FIL(I%) + "-" +&
			M_G_MAPA + ".")
	NEXT I%
	CALL PUT_GEN(MG_N,"*% INCLUDE FIN_CLR_FLD_" + M_G_MAPA+M_G_PBM )
	CALL PUT_GEN(MG_A,"FIN-CLR-FLD-" + M_G_MAPA + ".")
	CALL PUT_GEN(MG_B,"EXIT.")
   END DEF

   DEF INTEGER GEN_CLR_FLS
	FOR I% = 1 TO M_TOT_FILE
		CALL PUT_GEN(MG_C," ")
		CALL PUT_GEN(MG_A,"CLR-" + M_V_FIL(I%) + "-" + M_G_MAPA +&
			" SECTION.")
		CALL PUT_GEN(MG_A,"INI-CLR-" + M_V_FIL(I%) + "-"+M_G_MAPA + ".")
		CALL PUT_GEN(MG_N,"*% INCLUDE INI_CLR_" + M_V_FIL(I%) +&
			"_" + M_G_MAPA + M_G_PBM )
		FOR J% = 1 TO  T 
			IF ( M_V_FIL(I%) = M_V_REGI(J%) AND &
			     M_V_RFRM(J%)   <> "FRM" ) AND &
			     M_V_SCLR(J%) =  M_CTE_YES AND&
			     M_V_TFLD(J%)  =  M_IND_FLD THEN
				M_AUX_VAL$ = "MOVE SPACES TO "
				IF M_V_NUME(J%) = M_CTE_YES THEN
					M_AUX_VAL$ = "MOVE ZEROES TO "
				END IF
 !!! Valores de limpieza de fechas
 !!!         IF NOT (M_V_FECH(J%) = M_CTE_NOT OR&
 !!!                 M_V_DSPL(J%) = M_CTE_YES ) THEN
 !!!             M_AUX_VAL$ = "MOVE" + M_V_FFEC(M_V_FECH(J%)) + "TO "
 !!!         END IF
				IF M_V_TIDX(J%) > 1 THEN
					FOR ZZ% = 1 TO M_V_TIDX(J%)
						CALL PUT_GEN(MG_B,M_AUX_VAL$ +&
							M_V_NRTN(J%) +&
						M_G_DFL + M_G_VIX(ZZ%) + ".")
					NEXT ZZ%
				ELSE
					CALL PUT_GEN(MG_B,M_AUX_VAL$ +&
						M_V_NRTN(J%) + M_G_DFL + ".")
				END IF
			END IF
		NEXT J%
		CALL PUT_GEN(MG_N,"*% INCLUDE FIN_CLR_" + M_V_FIL(I%) +&
			"_" + M_G_MAPA + M_G_PBM )
		CALL PUT_GEN(MG_A,"FIN-CLR-" + M_V_FIL(I%) + "-"+M_G_MAPA + ".")
		CALL PUT_GEN(MG_B,"EXIT.")
	NEXT I%
   END DEF

   DEF INTEGER GEN_FST_KEY
	CALL PUT_GEN(MG_C," ")
	CALL PUT_GEN(MG_A,"FST-KEY-" + M_G_MAPA + " SECTION.")
	CALL PUT_GEN(MG_A,"INI-FST-KEY-" + M_G_MAPA + ".")
	CALL PUT_GEN(MG_N,"*% INCLUDE INI_FST_KEY_" + M_G_MAPA+M_G_PBM )
	I% = 1
	WHILE I% <=  T 
		IF M_V_PROT(I%) = M_CTE_YES AND&
		   M_V_PKEY(I%) = M_CTE_YES THEN
			M_G_IDX$ = "MOVE -1 TO " + M_V_NRTN(I%) + "-LEN" +&
				M_G_DFL 
			IF M_V_TIDX(I%) > 1 THEN
				FOR ZZ% = 1 TO M_V_TIDX(I%)
					CALL PUT_GEN(MG_B,M_G_IDX$ +&
						M_G_DFL + M_G_VIX(ZZ%) + ".")
				NEXT ZZ%
			ELSE
				CALL PUT_GEN(MG_B,M_G_IDX$ + ".")
			END IF
			I% =  T  + 1
		ELSE
			I% = I% + 1
		END IF
	NEXT
	CALL PUT_GEN(MG_N,"*% INCLUDE FIN_FST_KEY_" + M_G_MAPA+M_G_PBM )
	CALL PUT_GEN(MG_A,"FIN-FST-KEY-" + M_G_MAPA + ".")
	CALL PUT_GEN(MG_B,"EXIT.")
   END DEF

   DEF INTEGER GEN_FST_FLD
	CALL PUT_GEN(MG_C," ")
	CALL PUT_GEN(MG_A,"FST-FLD-" + M_G_MAPA + " SECTION.")
	CALL PUT_GEN(MG_A,"INI-FST-FLD-" + M_G_MAPA + ".")
	CALL PUT_GEN(MG_N,"*% INCLUDE INI_FST_FLD_" + M_G_MAPA+M_G_PBM )
	I% = 1
	WHILE I% <=  T 
		IF M_V_PROT(I%) =  M_CTE_YES AND&
		   M_V_PFLD(I%) = M_CTE_YES THEN
			IF M_V_TIDX(I%) > 1 THEN
				CALL PUT_GEN(MG_B,"MOVE -1 TO " +&
				M_V_NRTN(I%) + "-LEN" + M_G_DFL + "(1).")
			ELSE
				CALL PUT_GEN(MG_B,"MOVE -1 TO " +&
				M_V_NRTN(I%) + "-LEN" + M_G_DFL + ".")
			END IF
			I% =  T  + 1
		ELSE
			I% = I% + 1
		END IF
	NEXT
	CALL PUT_GEN(MG_N,"*% INCLUDE FIN_FST_FLD_" + M_G_MAPA+M_G_PBM )
	CALL PUT_GEN(MG_A,"FIN-FST-FLD-" + M_G_MAPA + ".")
	CALL PUT_GEN(MG_B,"EXIT.")
   END DEF

   DEF INTEGER GEN_PRO_KEY
	CALL PUT_GEN(MG_C," ")
	CALL PUT_GEN(MG_A,"PRO-KEY-" + M_G_MAPA + " SECTION.")
	CALL PUT_GEN(MG_A,"INI-PRO-KEY-" + M_G_MAPA + ".")
	CALL PUT_GEN(MG_N,"*% INCLUDE INI_PRO_KEY_" + M_G_MAPA+M_G_PBM )
	FOR J% = 1 TO  T 
		IF M_V_TFLD(J%) <>  M_IND_FLD AND&
		   M_V_RFRM(J%) =   "FRM"       AND &
		   M_V_PROT(J%) =   M_CTE_YES THEN
			M_G_IDX$ = "MOVE " + M_G_BYA(M_V_BYA(J%)) +&
			" TO " + M_V_NRTN(J%) + "-ATR" + M_G_DFL
			IF M_G_FOR = 'BMS' AND&
 			   M_V_TIDX(J%) > 1 THEN
 				FOR ZZ% = 1 TO M_V_TIDX(J%)
 					CALL PUT_GEN(MG_B,M_G_IDX$ +&
 						M_G_VIX(ZZ%) + ".")
 				NEXT ZZ%
 			ELSE
				CALL PUT_GEN(MG_B,M_G_IDX$ + ".")
 			END IF
		END IF
	NEXT J%
	CALL PUT_GEN(MG_B,"PERFORM PRO-IKY-" + M_G_MAPA + ".")
	CALL PUT_GEN(MG_B,"PERFORM PRO-AKY-" + M_G_MAPA + ".")
	CALL PUT_GEN(MG_B,"PERFORM PRO-MKY-" + M_G_MAPA + ".")
	CALL PUT_GEN(MG_N,"*% INCLUDE FIN_PRO_KEY_" + M_G_MAPA+M_G_PBM )
	CALL PUT_GEN(MG_A,"FIN-PRO-KEY-" + M_G_MAPA + ".")
	CALL PUT_GEN(MG_B,"EXIT.")
   END DEF
   
   DEF INTEGER GEN_PRO_IKY
	CALL PUT_GEN(MG_C," ")
	CALL PUT_GEN(MG_A,"PRO-IKY-" + M_G_MAPA + " SECTION.")
	CALL PUT_GEN(MG_A,"INI-PRO-IKY-" + M_G_MAPA + ".")
	CALL PUT_GEN(MG_N,"*% INCLUDE INI_PRO_IKY_" + M_G_MAPA+M_G_PBM )
	I% = 1
	FOR I% = 1 TO  T 
		IF M_V_TFLD(I%) = M_IND_IKY AND&
		   M_V_PROT(I%) = M_CTE_YES THEN
			M_G_IDX$ = "MOVE " + M_G_BYA(M_V_BYA(I%)) +&
				" TO " + M_V_NRTN(I%) + "-ATR" + M_G_DFL 
			IF M_G_FOR = 'BMS' AND&
 			   M_V_TIDX(J%) > 1 THEN
				FOR ZZ% = 1 TO M_V_TIDX(I%)
					CALL PUT_GEN(MG_B,M_G_IDX$ +&
						M_G_DFL + M_G_VIX(ZZ%) + ".")
				NEXT ZZ%
			ELSE
				CALL PUT_GEN(MG_B,M_G_IDX$ + ".")
			END IF
		END IF
	NEXT I%
	CALL PUT_GEN(MG_N,"*% INCLUDE FIN_PRO_IKY_" + M_G_MAPA+M_G_PBM )
	CALL PUT_GEN(MG_A,"FIN-PRO-IKY-" + M_G_MAPA + ".")
	CALL PUT_GEN(MG_B,"EXIT.")
   END DEF
   
   DEF INTEGER GEN_PRO_MKY
	CALL PUT_GEN(MG_C," ")
	CALL PUT_GEN(MG_A,"PRO-MKY-" + M_G_MAPA + " SECTION.")
	CALL PUT_GEN(MG_A,"INI-PRO-MKY-" + M_G_MAPA + ".")
	CALL PUT_GEN(MG_N,"*% INCLUDE INI_PRO_MKY_" + M_G_MAPA+M_G_PBM )
	FOR I% = 1 TO  T 
		IF M_V_TFLD(I%) = M_IND_MKY AND&
		   M_V_PROT(I%) = M_CTE_YES THEN
			M_G_IDX$ = "MOVE " + M_G_BYA(M_V_BYA(I%)) +&
				" TO " + M_V_NRTN(I%) + "-ATR" + M_G_DFL 
			IF M_G_FOR = 'BMS' AND&
 			   M_V_TIDX(J%) > 1 THEN
				FOR ZZ% = 1 TO M_V_TIDX(I%)
					CALL PUT_GEN(MG_B,M_G_IDX$ +&
						M_G_DFL + M_G_VIX(ZZ%) + "." )
				NEXT ZZ%
			ELSE
				CALL PUT_GEN(MG_B,M_G_IDX$ + ".")
			END IF
		END IF
	NEXT I%
	CALL PUT_GEN(MG_N,"*% INCLUDE FIN_PRO_MKY_" + M_G_MAPA+M_G_PBM )
	CALL PUT_GEN(MG_A,"FIN-PRO-MKY-" + M_G_MAPA + ".")
	CALL PUT_GEN(MG_B,"EXIT.")
   END DEF

   DEF INTEGER GEN_PRO_AKY
	CALL PUT_GEN(MG_C," ")
	CALL PUT_GEN(MG_A,"PRO-AKY-" + M_G_MAPA + " SECTION.")
	CALL PUT_GEN(MG_A,"INI-PRO-AKY-" + M_G_MAPA + ".")
	CALL PUT_GEN(MG_N,"*% INCLUDE INI_PRO_AKY_" + M_G_MAPA+M_G_PBM )
	FOR I% = 1 TO  T 
		IF M_V_TFLD(I%) = M_IND_AKY AND&
		   M_V_PROT(I%) = M_CTE_YES THEN
			M_G_IDX$ = "MOVE " + M_G_BYA(M_V_BYA(I%)) +&
			" TO " + M_V_NRTN(I%) + "-ATR" + M_G_DFL 
			IF M_G_FOR = 'BMS' AND&
 			   M_V_TIDX(J%) > 1 THEN
				FOR ZZ% = 1 TO M_V_TIDX(I%)
					CALL PUT_GEN(MG_B,M_G_IDX$ +&
					M_G_DFL + M_G_VIX(ZZ%) + "." )
				NEXT ZZ%
			ELSE
				CALL PUT_GEN(MG_B,M_G_IDX$ + ".")
			END IF
		END IF
	NEXT I%
	CALL PUT_GEN(MG_N,"*% INCLUDE FIN_PRO_AKY_" + M_G_MAPA+M_G_PBM )
	CALL PUT_GEN(MG_A,"FIN-PRO-AKY-" + M_G_MAPA + ".")
	CALL PUT_GEN(MG_B,"EXIT.")
   END DEF
   
   DEF INTEGER GEN_PRO_FLD
	CALL PUT_GEN(MG_C," ")
	CALL PUT_GEN(MG_A,"PRO-FLD-" + M_G_MAPA + " SECTION.")
	CALL PUT_GEN(MG_A,"INI-PRO-FLD-" + M_G_MAPA + ".")
	CALL PUT_GEN(MG_N,"*% INCLUDE INI_PRO_FLD_" + M_G_MAPA+M_G_PBM )
	FOR J% = 1 TO  T 
		IF M_V_TFLD(J%) = M_IND_FLD AND &
		   M_V_RFRM(J%) = "FRM"	AND &
		   M_V_PROT(J%) = M_CTE_YES THEN
			M_G_IDX$ = "MOVE " + M_G_BYA(M_V_BYA(J%)) +&
				" TO " + M_V_NRTN(J%) + "-ATR" + M_G_DFL
			IF M_G_FOR = 'BMS' AND&
 			   M_V_TIDX(J%) > 1 THEN
				FOR ZZ% = 1 TO M_V_TIDX(J%)
					CALL PUT_GEN(MG_B,M_G_IDX$ + M_G_VIX(ZZ%) + ".")
				NEXT ZZ%
			ELSE
				CALL PUT_GEN(MG_B,M_G_IDX$ + ".")
			END IF
		END IF
	NEXT J%

	FOR I% = 1 TO M_TOT_FILE
		CALL PUT_GEN(MG_B,"PERFORM PRO-" + M_V_FIL(I%) + "-" +&
			M_G_MAPA + ".")
	NEXT I%
	CALL PUT_GEN(MG_N,"*% INCLUDE FIN_PRO_FLD_" + M_G_MAPA+M_G_PBM )
	CALL PUT_GEN(MG_A,"FIN-PRO-FLD-" + M_G_MAPA + ".")
	CALL PUT_GEN(MG_B,"EXIT.")
   END DEF
   
   DEF INTEGER GEN_PRO_FLS
	FOR I% = 1 TO M_TOT_FILE
		CALL PUT_GEN(MG_C," ")
		CALL PUT_GEN(MG_A,"PRO-" + M_V_FIL(I%) + "-" + M_G_MAPA +&
                        " SECTION.")
		CALL PUT_GEN(MG_A,"INI-PRO-" + M_V_FIL(I%) + "-"+M_G_MAPA + ".")
		CALL PUT_GEN(MG_N,"*% INCLUDE INI_PRO_" + M_V_FIL(I%) +&
			"_" + M_G_MAPA + M_G_PBM )
		FOR J% = 1 TO  T 
			IF M_V_TFLD(J%) = M_IND_FLD AND &
			   M_V_FIL(I%)  = M_V_REGI(J%) AND &
			   M_V_PROT(J%) = M_CTE_YES THEN
				M_G_IDX$ = "MOVE " + M_G_BYA(M_V_BYA(J%)) +&
				" TO " + M_V_NRTN(J%) + "-ATR" + M_G_DFL
			IF M_G_FOR = 'BMS' AND&
 			   M_V_TIDX(J%) > 1 THEN
					FOR ZZ% = 1 TO M_V_TIDX(J%)
						CALL PUT_GEN(MG_B,M_G_IDX$ +&
							M_G_VIX(ZZ%) + ".")
					NEXT ZZ%
				ELSE
					CALL PUT_GEN(MG_B,M_G_IDX$ + ".")
				END IF
			END IF
		NEXT J%
		CALL PUT_GEN(MG_N,"*% INCLUDE FIN_PRO_" + M_V_FIL(I%) +&
			"_" + M_G_MAPA + M_G_PBM )
		CALL PUT_GEN(MG_A,"FIN-PRO-" + M_V_FIL(I%) + "-"+M_G_MAPA + ".")
		CALL PUT_GEN(MG_B,"EXIT.")
	NEXT I%
   END DEF
   
   DEF INTEGER GEN_UNP_KEY
	CALL PUT_GEN(MG_C," ")
	CALL PUT_GEN(MG_A,"UNP-KEY-" + M_G_MAPA + " SECTION.")
	CALL PUT_GEN(MG_A,"INI-UNP-KEY-" + M_G_MAPA + ".")
	CALL PUT_GEN(MG_N,"*% INCLUDE INI_UNP_KEY_" + M_G_MAPA+M_G_PBM )
	FOR J% = 1 TO  T 
		IF M_V_TFLD(J%) <> M_IND_FLD AND&
		   M_V_RFRM(J%)  = "FRM"	 AND &
		   M_V_PROT(J%) = M_CTE_YES  THEN
			M_G_IDX$ = "MOVE " + M_G_BYA(M_V_BYA(J%) + 1) +&
				" TO " + M_V_NRTN(J%) + "-ATR" + M_G_DFL
			IF M_G_FOR = 'BMS' AND&
 			   M_V_TIDX(J%) > 1 THEN
				FOR ZZ% = 1 TO M_V_TIDX(J%)
					CALL PUT_GEN(MG_B,M_G_IDX$ + M_G_VIX(ZZ%) + ".")
				NEXT ZZ%
			ELSE
				CALL PUT_GEN(MG_B,M_G_IDX$ + ".")
			END IF
		END IF
	NEXT J%
	CALL PUT_GEN(MG_B,"PERFORM UNP-IKY-" + M_G_MAPA + ".")
	CALL PUT_GEN(MG_B,"PERFORM UNP-AKY-" + M_G_MAPA + ".")
	CALL PUT_GEN(MG_B,"PERFORM UNP-MKY-" + M_G_MAPA + ".")
	CALL PUT_GEN(MG_N,"*% INCLUDE FIN_UNP_KEY_" + M_G_MAPA+M_G_PBM )
	CALL PUT_GEN(MG_A,"FIN-UNP-KEY-" + M_G_MAPA + ".")
	CALL PUT_GEN(MG_B,"EXIT.")
   END DEF
   
   DEF INTEGER GEN_UNP_IKY
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"UNP-IKY-" + M_G_MAPA + " SECTION.")
   CALL PUT_GEN(MG_A,"INI-UNP-IKY-" + M_G_MAPA + ".")
   CALL PUT_GEN(MG_N,"*% INCLUDE INI_UNP_IKY_" + M_G_MAPA+M_G_PBM )
   FOR I% = 1 TO  T 
   IF M_V_TFLD(I%) = M_IND_IKY AND&
      M_V_PROT(I%) = M_CTE_YES THEN
          M_G_IDX$ = "MOVE " + M_G_BYA(M_V_BYA(I%)+1) +&
          " TO " + M_V_NRTN(I%) + "-ATR" 
			IF M_G_FOR = 'BMS' AND&
 			   M_V_TIDX(J%) > 1 THEN
             FOR ZZ% = 1 TO M_V_TIDX(I%)
                CALL PUT_GEN(MG_B,M_G_IDX$ +&
                M_G_DFL + M_G_VIX(ZZ%) + ".")
             NEXT ZZ%
         ELSE
             CALL PUT_GEN(MG_B,M_G_IDX$ + ".")
         END IF
   END IF
   NEXT I%
   CALL PUT_GEN(MG_N,"*% INCLUDE FIN_UNP_IKY_" + M_G_MAPA+M_G_PBM )
   CALL PUT_GEN(MG_A,"FIN-UNP-IKY-" + M_G_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF
   
   DEF INTEGER GEN_UNP_MKY
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"UNP-MKY-" + M_G_MAPA + " SECTION.")
   CALL PUT_GEN(MG_A,"INI-UNP-MKY-" + M_G_MAPA + ".")
   CALL PUT_GEN(MG_N,"*% INCLUDE INI_UNP_MKY_" + M_G_MAPA+M_G_PBM )
   FOR I% = 1 TO  T 
   IF M_V_TFLD(I%) = M_IND_MKY AND&
      M_V_PROT(I%) = M_CTE_YES THEN
          M_G_IDX$ = "MOVE " + M_G_BYA(M_V_BYA(I%)+1) +&
          " TO " + M_V_NRTN(I%) + "-ATR"
			IF M_G_FOR = 'BMS' AND&
 			   M_V_TIDX(J%) > 1 THEN
               FOR ZZ% = 1 TO M_V_TIDX(I%)
                   CALL PUT_GEN(MG_B,M_G_IDX$ +&
                   M_G_DFL + M_G_VIX(ZZ%) + ".")
               NEXT ZZ%
          ELSE
               CALL PUT_GEN(MG_B,M_G_IDX$ + ".")
          END IF
   END IF
   NEXT I%
   CALL PUT_GEN(MG_N,"*% INCLUDE FIN_UNP_MKY_" + M_G_MAPA+M_G_PBM )
   CALL PUT_GEN(MG_A,"FIN-UNP-MKY-" + M_G_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF
   
   DEF INTEGER GEN_UNP_AKY
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"UNP-AKY-" + M_G_MAPA + " SECTION.")
   CALL PUT_GEN(MG_A,"INI-UNP-AKY-" + M_G_MAPA + ".")
   CALL PUT_GEN(MG_N,"*% INCLUDE INI_UNP_AKY_" + M_G_MAPA+M_G_PBM )
   FOR I% = 1 TO  T 
   IF M_V_TFLD(I%) = M_IND_AKY AND&
      M_V_PROT(I%) = M_CTE_YES THEN
            M_G_IDX$ = "MOVE " + M_G_BYA(M_V_BYA(I%)+1) +&
            " TO " + M_V_NRTN(I%) + "-ATR"
			IF M_G_FOR = 'BMS' AND&
 			   M_V_TIDX(J%) > 1 THEN
                 FOR ZZ% = 1 TO M_V_TIDX(I%)
                     CALL PUT_GEN(MG_B,M_G_IDX$ +&
                     M_G_DFL + M_G_VIX(ZZ%) + "." )
                 NEXT ZZ%
            ELSE
                 CALL PUT_GEN(MG_B,M_G_IDX$ + ".")
            END IF
   END IF
   NEXT I%
   CALL PUT_GEN(MG_N,"*% INCLUDE FIN_UNP_AKY_" + M_G_MAPA+M_G_PBM )
   CALL PUT_GEN(MG_A,"FIN-UNP-AKY-" + M_G_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF
   
   DEF INTEGER GEN_UNP_FLD
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"UNP-FLD-" + M_G_MAPA + " SECTION.")
   CALL PUT_GEN(MG_A,"INI-UNP-FLD-" + M_G_MAPA + ".")
   CALL PUT_GEN(MG_N,"*% INCLUDE INI_UNP_FLD_" + M_G_MAPA+M_G_PBM )
   FOR J% = 1 TO  T 
      IF M_V_TFLD(J%) = M_IND_FLD	    AND&
         M_V_RFRM(J%) = "FRM" 	    AND &
         M_V_PROT(J%) = M_CTE_YES THEN
      M_G_IDX$ = "MOVE " + M_G_BYA(M_V_BYA(J%) + 1) +&
         " TO " + M_V_NRTN(J%) + "-ATR" + M_G_DFL
			IF M_G_FOR = 'BMS' AND&
 			   M_V_TIDX(J%) > 1 THEN
                  FOR ZZ% = 1 TO M_V_TIDX(J%)
             CALL PUT_GEN(MG_B,M_G_IDX$ + M_G_VIX(ZZ%) + ".")
         NEXT ZZ%
      ELSE
         CALL PUT_GEN(MG_B,M_G_IDX$ + ".")
      END IF
       END IF
   NEXT J%
   FOR I% = 1 TO M_TOT_FILE
        CALL PUT_GEN(MG_B,"PERFORM UNP-" + M_V_FIL(I%) + "-" +&
                  M_G_MAPA + ".")
   NEXT I%
   CALL PUT_GEN(MG_N,"*% INCLUDE FIN_UNP_FLD_" + M_G_MAPA+M_G_PBM )
   CALL PUT_GEN(MG_A,"FIN-UNP-FLD-" + M_G_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF
   
   DEF INTEGER GEN_UNP_FLS
   FOR I% = 1 TO M_TOT_FILE
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"UNP-" + M_V_FIL(I%) + "-" + M_G_MAPA +&
                        " SECTION.")
   CALL PUT_GEN(MG_A,"INI-UNP-" + M_V_FIL(I%) + "-"+M_G_MAPA + ".")
   CALL PUT_GEN(MG_N,"*% INCLUDE INI_UNP_" + M_V_FIL(I%) +&
         "_" + M_G_MAPA + M_G_PBM )
   FOR J% = 1 TO  T 
      IF M_V_TFLD(J%) = M_IND_FLD	    AND&
         M_V_FIL(I%)  = M_V_REGI(J%) AND &
         M_V_PROT(J%) = M_CTE_YES THEN
      M_G_IDX$ = "MOVE " + M_G_BYA(M_V_BYA(J%) + 1) +&
         " TO " + M_V_NRTN(J%) + "-ATR" + M_G_DFL
			IF M_G_FOR = 'BMS' AND&
 			   M_V_TIDX(J%) > 1 THEN
		  FOR ZZ% = 1 TO M_V_TIDX(J%)
		     CALL PUT_GEN(MG_B,M_G_IDX$ + M_G_VIX(ZZ%) + ".")
		  NEXT ZZ%
	      ELSE
		  CALL PUT_GEN(MG_B,M_G_IDX$ + ".")
	     END IF
	END IF
   NEXT J%
   CALL PUT_GEN(MG_N,"*% INCLUDE FIN_UNP_" + M_V_FIL(I%) +&
         "_" + M_G_MAPA + M_G_PBM )
   CALL PUT_GEN(MG_A,"FIN-UNP-" + M_V_FIL(I%) + "-"+M_G_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   NEXT I%
   END DEF
   
   DEF INTEGER GEN_VAL_KEY
	CALL PUT_GEN(MG_C," ")
	CALL PUT_GEN(MG_A,"VAL-KEY-" + M_G_MAPA + " SECTION.")
	CALL PUT_GEN(MG_A,"INI-VAL-KEY-" + M_G_MAPA + ".")
	CALL PUT_GEN(MG_B,    "PERFORM VAL-IKY-" + M_G_MAPA + ".")
	CALL PUT_GEN(MG_B,    "PERFORM VAL-MKY-" + M_G_MAPA + ".")
	CALL PUT_GEN(MG_B,    "PERFORM VAL-AKY-" + M_G_MAPA + ".")
	CALL PUT_GEN(MG_A,"FIN-VAL-KEY-" + M_G_MAPA + ".")
	CALL PUT_GEN(MG_B,    "EXIT.")
   END DEF
   

   DEF INTEGER GEN_VAL_TKEY
	CALL PUT_GEN(MG_C," ")
	CALL PUT_GEN(MG_A,M_G_SECC + " SECTION.")
	CALL PUT_GEN(MG_A,"INI-" + M_G_SECC + ".")
	FOR I% = 1 TO  T 
 !!!   		IF M_V_PROT(I%) = M_CTE_YES AND&
		IF M_V_VALI(I%) = M_CTE_YES AND&
		   M_V_TFLD(I%) = M_IND_TFLD THEN
			M_G_IDX$ = ""
			IF M_V_TIDX(I%) > 1 THEN
				CALL PUT_GEN(MG_B,"PERFORM VAL-" +&
					M_V_NRTN(I%) + " VARYING FRM-IFLD" )
				CALL PUT_GEN(MG_B,"     FROM 1 BY 1 " +&
					"UNTIL FRM-IFLD > " +&
					STR$(M_V_TIDX(I%)) )
				CALL PUT_GEN(MG_B,&
					"     OR FRM-SUAR = FRM-SUAR-MAL" )
				CALL PUT_GEN(MG_B,&
					"     OR FRM-SUAR = FRM-SUAR-CLR." )
				IF M_G_FOR = 'BMS' THEN
					M_G_IDX$ = "(FRM-IFLD)"
				END IF
			ELSE
				CALL PUT_GEN(MG_B,"PERFORM VAL-" + M_V_NRTN(I%) + "." )
			END IF
			CALL PUT_GEN(MG_B,"IF FRM-SUAR = FRM-SUAR-MAL" +&
				" OR FRM-SUAR = FRM-SUAR-CLR" )
			IF M_G_IDX$ = "(FRM-IFLD)" THEN
				CALL PUT_GEN(MG_1,"SUBTRACT 1 FROM FRM-IFLD")
			END IF
			CALL PUT_GEN(MG_1,"MOVE -1 TO " + M_V_NRTN(I%) +&
				"-LEN" + M_G_DFL + M_G_IDX$ )
			CALL PUT_GEN(MG_1,"GO TO FIN-" + M_G_SECC + ".")
		END IF
	NEXT I%
	CALL PUT_GEN(MG_A,"FIN-" + M_G_SECC + ".")
	CALL PUT_GEN(MG_B,"EXIT.")
   END DEF


   DEF INTEGER GEN_VAL_IKY
	M_IND_TFLD = M_IND_IKY
	M_G_SECC = "VAL-IKY-" + M_G_MAPA
	M_NUM_FNC = GEN_VAL_TKEY
   END DEF
   
   DEF INTEGER GEN_VAL_MKY
	M_IND_TFLD = M_IND_MKY
	M_G_SECC = "VAL-MKY-" + M_G_MAPA
	M_NUM_FNC = GEN_VAL_TKEY
   END DEF
   
   DEF INTEGER GEN_VAL_AKY
	M_IND_TFLD = M_IND_AKY
	M_G_SECC = "VAL-AKY-" + M_G_MAPA
	M_NUM_FNC = GEN_VAL_TKEY
   END DEF
   
   DEF INTEGER GEN_VAL_FLD
   CALL PUT_GEN(MG_C," " )
   CALL PUT_GEN(MG_A,"VAL-FLD-" + M_G_MAPA + " SECTION." )
   CALL PUT_GEN(MG_A,"INI-VAL-FLD-" + M_G_MAPA + "." )
 !!!JSS 16-NOV-1989 16:09:06
   CALL PUT_GEN(MG_N,"*% INI_VAL_FLD_" + M_G_MAPA + M_G_PBM )
 !!!
   FOR I% = 1 TO  T 
 !!!   IF M_V_PROT(I%) = M_CTE_NOT AND&
   IF M_V_VALI(I%) = M_CTE_YES AND&
      M_V_TFLD(I%) = M_IND_FLD THEN
      M_G_IDX$ = ""
      IF M_V_TIDX(I%) > 1 THEN
         M_NUM_FNC = GEN_FNC_VCSI
         M_G_IDX$ = "(FRM-IFLD)"
      ELSE
         M_NUM_FNC = GEN_FNC_VCNI
      END IF
   END IF
   NEXT I%
 !!!JSS 16-NOV-1989 16:12:55
   CALL PUT_GEN(MG_N,"*% FIN_VAL_FLD_" + M_G_MAPA + M_G_PBM )
 !!!
   CALL PUT_GEN(MG_A,"FIN-VAL-FLD-" + M_G_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF
   
 !!! Validacion de campo especifico

   DEF INTEGER GEN_VAL_FLS_DYR
	IF M_V_TIDX(I%) > 1 THEN
		M_G_INDI$ = M_G_MAPA + "-FLD(FRM-IFLD)"
	ELSE
		M_G_INDI$ = M_G_MAPA + "-FLD"
	END IF
	CALL PUT_GEN(MG_N,'*% BUF = "' + M_G_INDI$ + '"')
	CALL PUT_GEN(MG_N,'*% SIS = "' + M_V_VSIS(I%) + '"')
	CALL PUT_GEN(MG_N,'*% TAB = "' + M_V_VTAB(I%) + '"')
	CALL PUT_GEN(MG_N,'*% FLD = "' + M_V_NRTN(I%) + '"')
	CALL PUT_GEN(MG_N,'*% GLS = "' + M_V_VGLS(I%) + '"')
	IF M_V_VGLS(I%) > " " THEN
	        CALL PUT_GEN(MG_N,'*% TIENE_GLOSA = TRUE')
		CALL PUT_GEN(MG_N,'*% LGL = '  + STR$( M_V_LGLS(I%) ) )
	ELSE
	        CALL PUT_GEN(MG_N,'*% TIENE_GLOSA = FALSE')
		CALL PUT_GEN(MG_N,'*% LGL = 0')
	END IF
	CALL PUT_GEN(MG_N,"*% INCLUDE '" + M_V_VVAL(I%) + "'")
			       IF M_V_VVAL(I%)  = "VALCOD" THEN
					VALCOD$ = "TRUE"
			       ELSE
			       IF M_V_VVAL(I%)  = "VALIND" THEN
					VALIND$ = "TRUE"
			       ELSE
			       IF M_V_VVAL(I%)  = "VALOFI" THEN
					VALOFI$ = "TRUE"
			       ELSE
			       IF M_V_VVAL(I%)  = "VALUSR" THEN
					VALUSR$ = "TRUE"
			       ELSE
			       IF M_V_VVAL(I%)  = "VALTDU" THEN
					VALTDU$ = "TRUE"
			       END IF
			       END IF
			       END IF
			       END IF
			       END IF
   END DEF

   DEF INTEGER GEN_VAL_FLS_ESP

	IF M_V_TIDX(I%) > 1 THEN
		M_G_INDI$ = M_G_MAPA + "-FLD(FRM-IFLD)"
	ELSE
		M_G_INDI$ = M_G_MAPA + "-FLD"
	END IF

	CALL PUT_GEN(MG_C," ")
	CALL PUT_GEN(MG_A,"VAL-" + M_V_NRTN(I%) + " SECTION." )
	CALL PUT_GEN(MG_A,"INI-VAL-" + M_V_NRTN(I%) + "." )
 !!! Validacion valores fechas
 !!!    IF NOT ( M_V_FECH(I%) = M_CTE_NOT OR&
 !!!             M_V_DSPL(I%) = M_CTE_YES ) THEN
 !!!    	IF M_V_TIDX(I%) > 1 THEN
 !!!			FOR ZZ% = 1 TO M_V_TIDX(I%)
 !!!			CALL PUT_GEN(MG_B,"IF " + M_V_NRTN(I%) + M_G_DFL +&
 !!!                  M_G_VIX(ZZ%) + " =" + M_V_FFEC(M_V_FECH(I%)))
 !!!                CALL PUT_GEN(MG_1,"MOVE SPACES TO " + M_V_NRTN(I%) +&
 !!!			M_G_DFL + M_G_VIX(ZZ%) + ".")
 !!!               NEXT ZZ%
 !!!           ELSE
 !!!              CALL PUT_GEN(MG_B,"IF " + M_V_NRTN(I%) + M_G_DFL + " =" +&
 !!!		M_V_FFEC(M_V_FECH(I%)))
 !!!              CALL PUT_GEN(MG_1,"MOVE SPACES TO " + M_V_NRTN(I%) +&
 !!!                           M_G_DFL + ".")
 !!!           END IF
 !!!         END IF

         IF NOT ( M_V_FECH(I%) = M_CTE_NOT OR&
                  M_V_DSPL(I%) = M_CTE_YES ) THEN
		CALL PUT_GEN(MG_N,'*% BUF = "' + M_G_INDI$ + '"')
		CALL PUT_GEN(MG_N,'*% FLD = "' + M_V_NRTN(I%) + '"')
		CALL PUT_GEN(MG_N,'*% SN  = "' + M_V_OBLI(I%) + '"')
		CALL PUT_GEN(MG_N,'*% FRM = "' + M_V_VFEC(M_V_FECH(I%)) + '"')
		CALL PUT_GEN(MG_N,'*% LBL = "' + M_V_RFRM(I%) + "_" +&
			M_V_TIPO(I%) + "_" + M_V_NOMB(I%) + M_G_PBM + '"')
		CALL PUT_GEN(MG_N,'*% HOY = "LE"')
		CALL PUT_GEN(MG_N,'*% HBL = "S"')
		CALL PUT_GEN(MG_N,'*% FEC_EDT = "' + M_G_EDF(I%) + '"')
		CALL PUT_GEN(MG_N,"*% INCLUDE 'VALFEC'")
		FEC$ = "TRUE"
	END IF
	IF M_V_FECH(I%) = M_CTE_NOT THEN
		IF M_V_NUME(I%) <> M_CTE_YES THEN
			A$ = " NOT > SPACES"
			B$ = "   MOVE SPACES TO "
		ELSE
			A$ = " = ZEROES"
			B$ = "   MOVE ZEROES TO "
		END IF
 !!! Esta pregunta significa que el campo es obligatorio.
		M_G_IDX$ = ''
		IF M_V_OBLI(I%) = "N" AND &
		   M_V_DSPL(I%) = M_CTE_NOT THEN
			ERRGLS$  = "TRUE"
			IF M_V_TIDX(I%) > 1 THEN
				M_G_IDX$ = "(FRM-IFLD)"
			END IF
			CALL PUT_GEN(MG_B,"IF " + M_V_NRTN(I%) +&
				M_G_DFL +  M_G_IDX$ + A$)
			CALL PUT_GEN(MG_1,"PERFORM ERR-GLS")
			ERRGLS$  = "TRUE"
			CALL PUT_GEN(MG_1,"GO TO FIN-VAL-"+M_V_NRTN(I%)+".")
		ELSE
 !!! Para numeros no es necesario, pues VALNUM lo deja en cero
			IF M_V_NUME(I%) <> M_CTE_YES THEN
				IF M_V_TIDX(I%) > 1 THEN
					M_G_IDX$ = "(FRM-IFLD)"
				END IF
				CALL PUT_GEN(MG_B,"IF " + M_V_NRTN(I%) +&
					M_G_DFL + M_G_IDX$ + A$ )
				CALL PUT_GEN(MG_B,B$ +&
					M_V_NRTN(I%) + M_G_DFL + M_G_IDX$ + ".")
			END IF
		END IF
	END IF

	IF M_V_TVAL(I%) = M_IND_VVRF THEN
		CALL PUT_GEN(MG_N,'*% BUF = "' + M_G_INDI$ + '"')
		CALL PUT_GEN(MG_N,'*% LBL = "' + M_V_RFRM(I%) + "_" +&
			M_V_TIPO(I%) + "_" + M_V_NOMB(I%) + M_G_PBM + '"')
		CALL PUT_GEN(MG_N,'*% KO0 = "K"')
		CALL PUT_GEN(MG_N,'*% ZRO = "S"')
		CALL PUT_GEN(MG_N,'*% FLD = "' + M_V_NRTN(I% - 1) + '"')
		CALL PUT_GEN(MG_N,'*% VRF = "' + M_V_NRTN(I%) + '"')
		CALL PUT_GEN(MG_N,'*% LMX = 7')
		IF M_V_IOV(I%) = M_IND_IDC THEN
			CALL PUT_GEN(MG_N,"*% INCLUDE 'VALRUT'")
		ELSE
			CALL PUT_GEN(MG_N,"*% INCLUDE 'VALVRF'")
		END IF
	END IF
	IF M_V_TVAL(I%) = M_IND_VIND THEN
		CALL PUT_GEN(MG_N,'*% BUF = "' + M_G_INDI$ + '"')
		CALL PUT_GEN(MG_N,'*% FLD = "' + M_V_NRTN(I%) + '"')
		CALL PUT_GEN(MG_N,"*% INCLUDE 'VALIDC'")
	END IF
	IF M_V_TVAL(I%) = M_IND_VGLS THEN
		CALL PUT_GEN(MG_N,'*% BUF = "' + M_G_INDI$ + '"')
		CALL PUT_GEN(MG_N,'*% FLD = "' + M_V_NRTN(I%) + '"')
		CALL PUT_GEN(MG_N,"*% INCLUDE 'VALGLS'")
	END IF
	CALL PUT_GEN(MG_N,"*% INCLUDE " + M_V_RFRM(I%) + "_" +&
		M_V_TIPO(I%) + "_" + M_V_NOMB(I%) + M_G_PBM )
	
	IF M_V_VVAL(I%) > " " AND&
	   M_V_VVAL(I%) <> "NOVAL" AND&
	   M_V_DSPL(I%) <> M_CTE_YES THEN
		M_NUM_FNC = GEN_VAL_FLS_DYR
	END IF
	CALL PUT_GEN(MG_A,"FIN-VAL-" +    M_V_NRTN(I%) + "." )
	CALL PUT_GEN(MG_B,"EXIT." )
   END DEF

   DEF INTEGER GEN_VAL_FLS
	FOR I% = 1 TO  T 
		IF M_V_VALI(I%) = M_CTE_YES THEN
			M_NUM_FNC = GEN_VAL_FLS_ESP
		END IF
	NEXT I%
   END DEF
   
   DEF INTEGER VAL_CON_KEY
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"VAL-CON-KEY-" + M_G_MAPA + " SECTION.")
   CALL PUT_GEN(MG_A,"INI-VAL-CON-KEY-" + M_G_MAPA + ".")
   CALL PUT_GEN(MG_N,"*% INCLUDE INI_VAL_CON_KEY_" +&
            M_G_MAPA + M_G_PBM )
   M_KEY_ABPA$ = "IF     "
   FOR I% = 1 TO  T 
      IF M_V_NUME(I%) = M_CTE_YES THEN
            M_KEY_CIPA$ = " NOT > ZEROES "
      ELSE
            M_KEY_CIPA$ = " NOT > SPACES "
      END IF
      IF M_V_TFLD(I%) = M_IND_IKY OR &
         M_V_TFLD(I%) = M_IND_MKY OR &
         M_V_TFLD(I%) = M_IND_AKY THEN
         IF M_V_TIDX(I%) > 1 THEN
                         FOR ZZ% = 1 TO M_V_TIDX(I%)
            CALL PUT_GEN(MG_B,M_KEY_ABPA$ +&
               M_V_NRTN(I%) + M_G_DFL +&
               M_G_VIX(ZZ%) + M_KEY_CIPA$)
               M_KEY_ABPA$ = "   AND "
               NEXT ZZ%
         ELSE
            CALL PUT_GEN(MG_B,M_KEY_ABPA$ +&
               M_V_NRTN(I%) + M_G_DFL +&
               M_KEY_CIPA$)
         END IF
         M_KEY_ABPA$ = "   AND "
      END IF
   NEXT I%
         
   CALL PUT_GEN(MG_B,"     PERFORM ERR-KEY")
   CALL PUT_GEN(MG_B,"     PERFORM FST-KEY-" + M_G_MAPA + ".")
   CALL PUT_GEN(MG_N,"*% INCLUDE FIN_VAL_CON_KEY_" + M_G_MAPA +&
            M_G_PBM )
   CALL PUT_GEN(MG_A,"FIN-VAL-CON-KEY-" + M_G_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF

   DEF INTEGER VAL_CON_IKY
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"VAL-CON-IKY-" + M_G_MAPA + " SECTION.")
   CALL PUT_GEN(MG_A,"INI-VAL-CON-IKY-" + M_G_MAPA + ".")
   CALL PUT_GEN(MG_N,"*% INCLUDE INI_VAL_CON_IKY_" + M_G_MAPA +&
         M_G_PBM )
   M_IKY_ABPA$ = "IF     "
   FOR I% = 1 TO  T 
      IF M_V_NUME(I%) = M_CTE_YES THEN
            M_IKY_CIPA$ = " NOT > ZEROES "
      ELSE
            M_IKY_CIPA$ = " NOT > SPACES "
      END IF
      IF M_V_TFLD(I%) = M_IND_IKY AND&
	 M_V_DERI(I%) = M_CTE_NOT THEN
           IF M_V_TIDX(I%) > 1 THEN
               FOR ZZ% = 1 TO M_V_TIDX(I%)
                  CALL PUT_GEN(MG_B,M_IKY_ABPA$ +&
                  M_V_NRTN(I%) + M_G_DFL +&
                  M_G_VIX(ZZ%) + M_IKY_CIPA$)
                  M_IKY_ABPA$ = "   AND "
               NEXT ZZ%
           ELSE
               CALL PUT_GEN(MG_B,M_IKY_ABPA$ +&
                   M_V_NRTN(I%) + M_G_DFL +&
                   M_IKY_CIPA$)
           END IF
           M_IKY_ABPA$ = "   AND "
      END IF
   NEXT I%
         
   CALL PUT_GEN(MG_B,"     PERFORM ERR-KEY")
   CALL PUT_GEN(MG_B,"     PERFORM FST-KEY-" + M_G_MAPA + ".")
   CALL PUT_GEN(MG_N,"*% INCLUDE FIN_VAL_CON_IKY_" + M_G_MAPA +&
            M_G_PBM )
   CALL PUT_GEN(MG_A,"FIN-VAL-CON-IKY-" + M_G_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF
   
   DEF INTEGER VAL_CON_FLD
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"VAL-CON-FLD-" + M_G_MAPA + " SECTION.")
   CALL PUT_GEN(MG_A,"INI-VAL-CON-FLD-" + M_G_MAPA + ".")
   CALL PUT_GEN(MG_N,"*% INCLUDE VAL_CON_FLD_" + M_G_MAPA+M_G_PBM )
   CALL PUT_GEN(MG_A,"FIN-VAL-CON-FLD-" + M_G_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF
   
   DEF INTEGER GEN_VAL_CON
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"VAL-CON-" + M_G_MAPA + " SECTION.")
   CALL PUT_GEN(MG_A,"INI-VAL-CON-" + M_G_MAPA + ".")
   CALL PUT_GEN(MG_N,"*% INCLUDE VAL_CON_" + M_G_MAPA + M_G_PBM )
   CALL PUT_GEN(MG_A,"FIN-VAL-CON-" + M_G_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF
   
   
   DEF INTEGER VAL_NUM_KEY
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"VAL-NUM-KEY-" + M_G_MAPA + " SECTION.")
   CALL PUT_GEN(MG_A,"INI-VAL-NUM-KEY-" + M_G_MAPA + ".")
   CALL PUT_GEN(MG_B,"PERFORM VAL-NUM-IKY-" + M_G_MAPA + ".")
   CALL PUT_GEN(MG_B,"PERFORM VAL-NUM-MKY-" + M_G_MAPA + ".")
   CALL PUT_GEN(MG_B,"PERFORM VAL-NUM-AKY-" + M_G_MAPA + ".")
   CALL PUT_GEN(MG_A,"FIN-VAL-NUM-KEY-" + M_G_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF
   
   DEF INTEGER GEN_VAL_FEC
	IF M_V_VALI(I%)  = M_CTE_YES AND&
	   M_V_TFLD(I%)  = M_IND_TFLD AND&
	   M_V_FECH(I%) <> M_CTE_NOT AND&
	   M_V_DSPL(I%)  = M_CTE_YES THEN
		IF M_V_TIDX(I%) > 1 THEN
			FOR M% = 1 TO M_V_TIDX(I%)
				CALL PUT_GEN(MG_B,'MOVE ' +&
				M_V_NRTN(I%) + '-ALF' + M_G_DFL +&
				M_G_VIX(M%) +&
                                ' TO FEC-FECH-EDT.')
				CALL PUT_GEN(MG_B,'PERFORM EDT-FEC-CHR.')
				CALL PUT_GEN(MG_B,'MOVE FEC-FECH-EDT TO ' +&
                                M_V_NRTN(I%) + M_G_DFL +&
				M_G_VIX(M%) + '.' )
			NEXT M%
		ELSE
				CALL PUT_GEN(MG_B,'MOVE ' +&
				M_V_NRTN(I%) + '-ALF' + M_G_DFL +&
                                ' TO FEC-FECH-EDT.')
				CALL PUT_GEN(MG_B,'PERFORM EDT-FEC-CHR.')
				CALL PUT_GEN(MG_B,'MOVE FEC-FECH-EDT TO ' +&
                                M_V_NRTN(I%) + M_G_DFL + '.' )
		END IF
	END IF
   END DEF


   DEF INTEGER GEN_VAL_NUM
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,M_G_SECC + " SECTION.")
   CALL PUT_GEN(MG_A,"INI-" + M_G_SECC + ".")
   FOR I% = 1 TO  T 
	IF M_V_VALI(I%)  = M_CTE_YES AND&
	   M_V_TFLD(I%)  = M_IND_TFLD AND&
	   M_V_NUME(I%)  = M_CTE_YES AND&
	   ( M_G_FOR = 'BMS' OR ( M_G_FOR = 'FMS' AND&
           M_V_TVAL(I%) = M_NUM_VVRF ) ) THEN
		NRO$ = "TRUE"
		IF M_V_TIDX(I%) > 1 THEN
			FOR M% = 1 TO M_V_TIDX(I%)
				CALL PUT_GEN(MG_A,'VAL-NUM-' +&
				M_V_NRTN(I%) + '-' + STR$(M%) + '.')
				IF M_G_IZR > "" THEN
					CALL PUT_GEN(MG_N,'*% IZR = "' +&
					M_G_IZR + '"')
				ELSE
					CALL PUT_GEN(MG_N,'*% IZR = "' +&
					M_V_OBLI(I%) + '"')
				END IF

				CALL PUT_GEN(MG_N,'*% FLD = "' +&
				M_V_NRTN(I%) + '"')
				CALL PUT_GEN(MG_N,'*% BUF = "' +&
				M_G_MAPA + '-FLD' + '(' + STR$(M%) + ')"')
				CALL PUT_GEN(MG_N,'*% ENT = ' +&
				STR$(M_V_ENT(I%)) )
				CALL PUT_GEN(MG_N,'*% DCM = ' +&
				STR$(M_V_DCM(I%)) )
				CALL PUT_GEN(MG_N,'*% NMR = "' +&
				M_V_NMR(I%) + '"')
				CALL PUT_GEN(MG_N,'*% ISG = "' +&
				M_V_ISG(I%) + '"')
	IF M_G_FOR = 'BMS' THEN
		CALL PUT_GEN(MG_N,"*% INCLUDE 'VALNUM'")
	ELSE
		IF M_V_SGN(I%) = M_CTE_YES THEN
			CALL PUT_GEN(MG_N,"*% INCLUDE 'VALNUM'")
		ELSE
			AA$ = M_V_NRTN(I%)
 !!!			CALL PUT_GEN(MG_N,'*% LBL = VAL-NUM-' + AA$  )
 CALL PUT_GEN(MG_N,'*% LBL = "VAL-NUM-' + M_V_NRTN(I%) + '-' + STR$(M%) + '"')
 !!!JSS 22-03-1989 16:17
			CALL PUT_GEN(MG_N,'*% ENT = ' + STR$(M_V_ENT(I%)-1) )
 !!!
			CALL PUT_GEN(MG_N,"*% INCLUDE 'GNSSRCSOP:VALINT.SRCSOP'")
		END IF
	END IF
			NEXT M%
         	ELSE
			CALL PUT_GEN(MG_A,'VAL-NUM-' + M_V_NRTN(I%) + '.')
			IF M_G_IZR > "" THEN
				CALL PUT_GEN(MG_N,'*% IZR = "' +&
				M_G_IZR + '"')
			ELSE
				CALL PUT_GEN(MG_N,'*% IZR = "' +&
				M_V_OBLI(I%) = '"')
			END IF
			CALL PUT_GEN(MG_N,'*% FLD = "' +&
			M_V_NRTN(I%) + '"')
			CALL PUT_GEN(MG_N,'*% BUF = "' + M_G_MAPA + '-FLD"')
			CALL PUT_GEN(MG_N,'*% ENT = ' +&
			STR$(M_V_ENT(I%)) )
			CALL PUT_GEN(MG_N,'*% DCM = ' +&
			STR$(M_V_DCM(I%)) )
			CALL PUT_GEN(MG_N,'*% NMR = "' + M_V_NMR(I%) + '"')
			CALL PUT_GEN(MG_N,'*% ISG = "' + M_V_ISG(I%) + '"')
	IF M_G_FOR = 'BMS' THEN
		CALL PUT_GEN(MG_N,"*% INCLUDE 'VALNUM'")
	ELSE
		IF M_V_SGN(I%) = M_CTE_YES THEN
			CALL PUT_GEN(MG_N,"*% INCLUDE 'VALNUM'")
		ELSE
			AA$ = M_V_NRTN(I%)
 !!!			CALL PUT_GEN(MG_N,'*% LBL = VAL-NUM-' + AA$  )
 CALL PUT_GEN(MG_N,'*% LBL = "VAL-NUM-' + M_V_NRTN(I%) + '-' + STR$(M%) + '"')
 !!!JSS 22-03-1989 16:17
			CALL PUT_GEN(MG_N,'*% ENT = ' + STR$(M_V_ENT(I%)-1) )
 !!!
			CALL PUT_GEN(MG_N,"*% INCLUDE 'GNSSRCSOP:VALINT.SRCSOP'")
		END IF
	END IF
		END IF
		CALL PUT_GEN(MG_B,"IF FRM-SUAR = FRM-SUAR-MAL OR ")
		CALL PUT_GEN(MG_B,"   FRM-SUAR = FRM-SUAR-CLR")
		CALL PUT_GEN(MG_1,"GO TO FIN-" + M_G_SECC + ".")
 !!!	ELSE
 !!! ES IDENTICO A VALNUM PERO PARA FECHAS
 !!!		M_NUM_FNC = GEN_VAL_FEC
	END IF
   NEXT I%
   CALL PUT_GEN(MG_A,"FIN-" + M_G_SECC + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF

   DEF INTEGER VAL_NUM_IKY
	M_IND_TFLD = M_IND_IKY
	M_G_SECC = "VAL-NUM-IKY-" + M_G_MAPA
	M_G_IZR = "S"
	M_NUM_FNC = GEN_VAL_NUM
   END DEF
   
   DEF INTEGER VAL_NUM_MKY
	M_IND_TFLD = M_IND_MKY
	M_G_SECC = "VAL-NUM-MKY-" + M_G_MAPA
	M_G_IZR = "S"
	M_NUM_FNC = GEN_VAL_NUM
   END DEF
   
   DEF INTEGER VAL_NUM_AKY
	M_IND_TFLD = M_IND_AKY
	M_G_SECC = "VAL-NUM-AKY-" + M_G_MAPA
	M_G_IZR = "S"
	M_NUM_FNC = GEN_VAL_NUM
   END DEF
   
   DEF INTEGER VAL_NUM_FLD
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"VAL-NUM-FLD-" + M_G_MAPA + " SECTION.")
   CALL PUT_GEN(MG_A,"INI-VAL-NUM-FLD-" + M_G_MAPA + ".")
   FOR I% = 1 TO  T 
      IF M_V_VALI(I%) = M_CTE_YES AND&
         M_V_TFLD(I%) = M_IND_FLD AND&
         M_V_NUME(I%) = M_CTE_YES AND&
	   ( M_G_FOR = 'BMS' OR ( M_G_FOR = 'FMS' AND&
           M_V_TVAL(I%) = M_NUM_VVRF ) ) THEN
	NRO$ = "TRUE"
      IF M_V_TIDX(I%) > 1 THEN
        FOR M% = 1 TO M_V_TIDX(I%)
         CALL PUT_GEN(MG_A,'VAL-NUM-' + M_V_NRTN(I%) + '-' + STR$(M%) + '.')
 !!!     CALL PUT_GEN(MG_N,'*% IZR = "' + M_V_OBLI(I%) + '"')
         CALL PUT_GEN(MG_N,'*% IZR = "S"')

         CALL PUT_GEN(MG_N,'*% FLD = "' + M_V_NRTN(I%) + '"')
         CALL PUT_GEN(MG_N,'*% BUF = "' + M_G_MAPA + '-FLD'+&
            '(' + STR$(M%) + ')"')
         CALL PUT_GEN(MG_N,'*% ENT = ' + STR$(M_V_ENT(I%)) )
         CALL PUT_GEN(MG_N,'*% DCM = ' + STR$(M_V_DCM(I%)) )
         CALL PUT_GEN(MG_N,'*% NMR = "' + M_V_NMR(I%) + '"')
         CALL PUT_GEN(MG_N,'*% ISG = "' + M_V_ISG(I%) + '"')
	IF M_G_FOR = 'BMS' THEN
		CALL PUT_GEN(MG_N,"*% INCLUDE 'VALNUM'")
	ELSE
		IF M_V_SGN(I%) = M_CTE_YES THEN
			CALL PUT_GEN(MG_N,"*% INCLUDE 'VALNUM'")
		ELSE
			AA$ = M_V_NRTN(I%)
 !!!			CALL PUT_GEN(MG_N,'*% LBL = VAL-NUM-' + AA$  )
 CALL PUT_GEN(MG_N,'*% LBL = "VAL-NUM-' + M_V_NRTN(I%) + '-' + STR$(M%) + '"')
 !!!JSS 22-03-1989 16:17
			CALL PUT_GEN(MG_N,'*% ENT = ' + STR$(M_V_ENT(I%)-1) )
 !!!
			CALL PUT_GEN(MG_N,"*% INCLUDE 'GNSSRCSOP:VALINT.SRCSOP'")
		END IF
	END IF
          NEXT M%
        ELSE
            CALL PUT_GEN(MG_A,'VAL-NUM-' + M_V_NRTN(I%) + '.')
 !!!        CALL PUT_GEN(MG_N,'*% IZR = "' + M_V_OBLI(I%) + '"')
            CALL PUT_GEN(MG_N,'*% IZR = "S"')

            CALL PUT_GEN(MG_N,'*% FLD = "' + M_V_NRTN(I%) + '"')
            CALL PUT_GEN(MG_N,'*% BUF = "' + M_G_MAPA + '-FLD"')
            CALL PUT_GEN(MG_N,'*% ENT = ' + STR$(M_V_ENT(I%)) )
            CALL PUT_GEN(MG_N,'*% DCM = ' + STR$(M_V_DCM(I%)) )
            CALL PUT_GEN(MG_N,'*% NMR = "' + M_V_NMR(I%) + '"')
            CALL PUT_GEN(MG_N,'*% ISG = "' + M_V_ISG(I%) + '"')
	IF M_G_FOR = 'BMS' THEN
		CALL PUT_GEN(MG_N,"*% INCLUDE 'VALNUM'")
	ELSE
		IF M_V_SGN(I%) = M_CTE_YES THEN
			CALL PUT_GEN(MG_N,"*% INCLUDE 'VALNUM'")
		ELSE
			AA$ = M_V_NRTN(I%)
 !!!			CALL PUT_GEN(MG_N,'*% LBL = VAL-NUM-' + AA$  )
 CALL PUT_GEN(MG_N,'*% LBL = "VAL-NUM-' + M_V_NRTN(I%) + '-' + STR$(M%) + '"')
 !!!JSS 22-03-1989 16:17
			CALL PUT_GEN(MG_N,'*% ENT = ' + STR$(M_V_ENT(I%)-1) )
 !!!
			CALL PUT_GEN(MG_N,"*% INCLUDE 'GNSSRCSOP:VALINT.SRCSOP'")
		END IF
	END IF
	END IF
	CALL PUT_GEN(MG_B,"IF FRM-SUAR = FRM-SUAR-MAL OR ")
	CALL PUT_GEN(MG_B,"   FRM-SUAR = FRM-SUAR-CLR")
	CALL PUT_GEN(MG_1,"GO TO FIN-" + M_G_SECC + ".")
 !!!      ELSE
 !!!		M_IND_TFLD = M_IND_FLD
 !!!		M_NUM_FNC = GEN_VAL_FEC
      END IF
   NEXT I%
   CALL PUT_GEN(MG_A,"FIN-VAL-NUM-FLD-" + M_G_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF

   DEF INTEGER GEN_EDT_KEY
   CALL PUT_GEN(MG_C," ")
   CALL PUT_GEN(MG_A,"EDT-KEY-" + M_G_MAPA +" SECTION.")
   CALL PUT_GEN(MG_A,"INI-EDT-KEY-" + M_G_MAPA + ".")
   CALL PUT_GEN(MG_B,"PERFORM EDT-IKY-" + M_G_MAPA + ".")
   CALL PUT_GEN(MG_B,"PERFORM EDT-MKY-" + M_G_MAPA + ".")
   CALL PUT_GEN(MG_B,"PERFORM EDT-AKY-" + M_G_MAPA + ".")
   CALL PUT_GEN(MG_N,"*% INCLUDE EDT_KEY_" + M_G_MAPA + M_G_PBM )
   CALL PUT_GEN(MG_A,"FIN-EDT-KEY-" + M_G_MAPA + ".")
   CALL PUT_GEN(MG_B,"EXIT.")
   END DEF
   
   DEF INTEGER GEN_EDT_NUM_IDX
	FOR PP% = 1 TO M_V_TIDX(I%)
		CALL PUT_GEN(MG_B,"IF " + M_V_NRTN(I%) + "-LEN" +&
			M_G_DFL + M_G_VIX(PP%) + " = -9")
		CALL PUT_GEN(MG_1,"MOVE -1 TO " + M_V_NRTN(I%) + "-LEN" +&
			M_G_DFL + M_G_VIX(PP%))
		CALL PUT_GEN(MG_1,"GO TO FIN-" + M_G_SECC + ".")
		CALL PUT_GEN(MG_B,"MOVE " + M_V_NRTN(I%) + M_G_DFL +&
			M_G_VIX(PP%) + " TO " + M_V_NRTN(I%) +&
			"-EDT" + M_G_DFL + M_G_VIX(PP%) + ".")
	NEXT PP%
   END DEF

   DEF INTEGER GEN_EDT_NUM_ELM
	CALL PUT_GEN(MG_B,"IF " + M_V_NRTN(I%) + "-LEN" +&
		M_G_DFL + " = -9")
	CALL PUT_GEN(MG_1,"MOVE -1 TO " + M_V_NRTN(I%) + "-LEN" +&
		M_G_DFL)
	CALL PUT_GEN(MG_1,"GO TO FIN-" + M_G_SECC + ".")
	CALL PUT_GEN(MG_B,"MOVE " + M_V_NRTN(I%) + M_G_DFL +&
		" TO " + M_V_NRTN(I%) + "-EDT" + M_G_DFL + ".")
   END DEF

   DEF INTEGER GEN_EDT_NUM
	CALL PUT_GEN(MG_C," ")
	CALL PUT_GEN(MG_A,M_G_SECC + " SECTION.")
	CALL PUT_GEN(MG_A,"INI-" + M_G_SECC + ".")
	CALL PUT_GEN(MG_N,"*% INCLUDE " + M_G_PTXL + M_G_PBM )
	FOR I% = 1 TO  T 
 		IF M_V_TFLD(I%) = M_IND_TFLD THEN
			IF M_V_NUME(I%)  = M_CTE_YES THEN
				IF M_V_TIDX(I%) > 1 THEN
					M_NUM_FNC = GEN_EDT_NUM_IDX
				ELSE
					M_NUM_FNC = GEN_EDT_NUM_ELM
				END IF
			END IF
		END IF
	NEXT I%
	CALL PUT_GEN(MG_A,"FIN-" + M_G_SECC + ".")
	CALL PUT_GEN(MG_B,"EXIT.")

   END DEF

   DEF INTEGER GEN_EDT_IKY
	M_IND_TFLD = M_IND_IKY
	M_G_SECC = "EDT-IKY-" + M_G_MAPA
	M_G_PTXL = "EDT_IKY_" + M_G_MAPA
	M_NUM_FNC  = GEN_EDT_NUM
   END DEF
   
   DEF INTEGER GEN_EDT_MKY
	M_IND_TFLD = M_IND_MKY
	M_G_SECC = "EDT-MKY-" + M_G_MAPA
	M_G_PTXL = "EDT_MKY_" + M_G_MAPA
	M_NUM_FNC  = GEN_EDT_NUM
   END DEF
   
   DEF INTEGER GEN_EDT_AKY
	M_IND_TFLD = M_IND_AKY
	M_G_SECC = "EDT-AKY-" + M_G_MAPA
	M_G_PTXL = "EDT_AKY_" + M_G_MAPA
	M_NUM_FNC  = GEN_EDT_NUM
   END DEF
   
   DEF INTEGER GEN_EDT_FLD
	M_IND_TFLD = M_IND_FLD
	M_G_SECC = "EDT-FLD-" + M_G_MAPA
	M_G_PTXL = "EDT_FLD_" + M_G_MAPA
	M_NUM_FNC  = GEN_EDT_NUM

   END DEF

   DEF INTEGER GEN_ATR_LEN
          WTXT_NUM_SOR = 4
          M_G_TXT = M_FNC_WTXT(V_M(MG_B) + "04 " +&
			M_G_MAPA + "-DFLD-ATR.")

          WTXT_NUM_SOR = 6
          M_G_TXT = M_FNC_WTXT(V_M(MG_B) + "04 " +&
			M_G_MAPA + "-DFLD-LEN.")
   FOR J% = 1 TO  T 
      IF M_V_ATR(J%)   =  M_CTE_YES THEN
        WTXT_NUM_SOR = 4
   	M_G_TXT = M_FNC_WTXT(V_M(MG_B) + "   05 " +&
			M_V_RFRM(J%) + "-" +&
			M_V_TIPO(J%) + "-" +&
			M_V_NOMB(J%) + "-ATR" +&
			"                PIC 9(01).")
      ELSE
      IF M_V_ATR(J%)   =  M_CTE_RED THEN
        WTXT_NUM_SOR = 4
   	M_G_TXT = M_FNC_WTXT(V_M(MG_B) + "   05 " +&
			M_V_RFRM(J%) + "-" +&
			M_V_TIPO(J%) + "-" +&
			M_V_NOMB(J%) + "-ATR REDEFINES")
   	M_G_TXT = M_FNC_WTXT(V_M(MG_B) + "      " +&
			M_V_RFRM(J%-1) + "-" +&
			M_V_TIPO(J%-1) + "-" +&
			M_V_NOMB(J%-1) + "-ATR" +&
			"                PIC 9(01).")
      END IF
      END IF
      IF M_V_LEN(J%)   =  M_CTE_YES THEN
        WTXT_NUM_SOR = 6
   	M_G_TXT = M_FNC_WTXT(V_M(MG_B) + "   05 " +&
			M_V_RFRM(J%) + "-" +&
			M_V_TIPO(J%) + "-" +&
			M_V_NOMB(J%) + "-LEN" +&
			"                PIC S9(01).")
      ELSE
      IF M_V_LEN(J%)   =  M_CTE_RED THEN
        WTXT_NUM_SOR = 6
   	M_G_TXT = M_FNC_WTXT(V_M(MG_B) + "   05 " +&
			M_V_RFRM(J%) + "-" +&
			M_V_TIPO(J%) + "-" +&
			M_V_NOMB(J%) + "-LEN REDEFINES")
   	M_G_TXT = M_FNC_WTXT(V_M(MG_B) + "      " +&
			M_V_RFRM(J%-1) + "-" +&
			M_V_TIPO(J%-1) + "-" +&
			M_V_NOMB(J%-1) + "-LEN" +&
			"                PIC S9(01).")
      END IF
      END IF
      IF M_V_N(J%) = M_CTE_YES THEN
        WTXT_NUM_SOR = 1
   	M_G_TXT = M_FNC_WTXT(V_M(MG_B) + "   05 " +&
 			M_V_RFRM(J%) + "-" +&
 			M_V_TIPO_N(J%) + "-" +&
 			M_V_NOMB(J%) + "-N" +&
			"                PIC X(31) VALUE")
   	M_G_TXT = M_FNC_WTXT(V_M(MG_B) + "     '" +&
					M_V_FLD(J%) + "'." )
       END IF
   NEXT J%
        WTXT_NUM_SOR = 4
   	M_G_TXT = M_FNC_WTXT(V_M(MG_B) + "   05 " +&
			M_G_MAPA + "-GLS-MENS-ATR" +&
			"                PIC 9(01).")
        WTXT_NUM_SOR = 6
   	M_G_TXT = M_FNC_WTXT(V_M(MG_B) + "   05 " +&
			M_G_MAPA + "-GLS-MENS-LEN" +&
			"                PIC S9(01).")
   END DEF


   DEF INTEGER M_FNC_GEN
 ! >> BUSCA  VRF  ASOCIADO A IDC
	M_NUM_FNC = M_FNC_BUS

 ! >> PUT
	M_NUM_FNC = GEN_PUT_ALL
	M_NUM_FNC = GEN_PUT_REG

 ! >> RET
	M_NUM_FNC = GEN_RET_ALL
	M_NUM_FNC = GEN_RET_REG

 ! >> KEY
	M_NUM_FNC = GEN_KEY_ALL
	M_NUM_FNC = GEN_KEY_REG

 ! >> CLR
	M_NUM_FNC = GEN_CLR_ALL
	M_NUM_FNC = GEN_CLR_KEY
	M_NUM_FNC = GEN_CLR_FLD
	M_NUM_FNC = GEN_CLR_FLS

 ! >> FST
	M_NUM_FNC = GEN_FST_KEY
	M_NUM_FNC = GEN_FST_FLD

 ! >> PRO
	M_NUM_FNC = GEN_PRO_KEY
	M_NUM_FNC = GEN_PRO_IKY
	M_NUM_FNC = GEN_PRO_MKY
	M_NUM_FNC = GEN_PRO_AKY
	M_NUM_FNC = GEN_PRO_FLD
	M_NUM_FNC = GEN_PRO_FLS

 ! >> UNP
	M_NUM_FNC = GEN_UNP_KEY
	M_NUM_FNC = GEN_UNP_IKY
	M_NUM_GNC = GEN_UNP_MKY
	M_NUM_FNC = GEN_UNP_AKY
	M_NUM_FNC = GEN_UNP_FLD
	M_NUM_FNC = GEN_UNP_FLS

 ! >> VAL
	M_NUM_FNC = GEN_VAL_KEY
	M_NUM_FNC = GEN_VAL_IKY
	M_NUM_FNC = GEN_VAL_MKY
	M_NUM_FNC = GEN_VAL_AKY
	M_NUM_FNC = GEN_VAL_FLD
	M_NUM_FNC = GEN_VAL_FLS
	M_NUM_FNC = VAL_CON_KEY
	M_NUM_FNC = VAL_CON_IKY
	M_NUM_FNC = VAL_CON_FLD
	M_NUM_FNC = GEN_VAL_CON

 ! >> VAL-NUM
	M_NUM_FNC = VAL_NUM_KEY
	M_NUM_FNC = VAL_NUM_IKY
	M_NUM_FNC = VAL_NUM_MKY
	M_NUM_FNC = VAL_NUM_AKY
	M_G_SECC = "VAL-NUM-FLD-" + M_G_MAPA
	M_NUM_FNC = VAL_NUM_FLD

 ! >> EDT-NUM
	IF M_G_FOR = 'BMS' THEN
		M_NUM_FNC = GEN_EDT_KEY
		M_NUM_FNC = GEN_EDT_IKY
		M_NUM_FNC = GEN_EDT_MKY
		M_NUM_FNC = GEN_EDT_AKY
		M_NUM_FNC = GEN_EDT_FLD
	ELSE
		M_NUM_FNC = GEN_ATR_LEN
	END IF

   END DEF

 !============ ESCRIBE EN ARCHIVO BI ELEMENTOS USADOS EN EL MAPA ===========

   DEF INTEGER M_GEN_FIF

      PRINT #M_CNL_FINF,'% FCH = '    + FEC$
      PRINT #M_CNL_FINF,'% NUM = '    + NRO$
      PRINT #M_CNL_FINF,'% VRF = '    + VRF$
      PRINT #M_CNL_FINF,'% IDC = '    + IDC$
      PRINT #M_CNL_FINF,'% BUSTAB = ' + BUSTAB$
      PRINT #M_CNL_FINF,'% VALCOD = ' + VALCOD$
      PRINT #M_CNL_FINF,'% BUSMSC = ' + BUSMSC$
      PRINT #M_CNL_FINF,'% VALIND = ' + VALIND$
      PRINT #M_CNL_FINF,'% BUSOFI = ' + BUSOFI$
      PRINT #M_CNL_FINF,'% VALOFI = ' + VALOFI$
      PRINT #M_CNL_FINF,'% BUSUSR = ' + BUSUSR$
      PRINT #M_CNL_FINF,'% VALUSR = ' + VALUSR$
      PRINT #M_CNL_FINF,'% VALTDU = ' + VALTDU$
      PRINT #M_CNL_FINF,'% ERRGLS = ' + ERRGLS$

   END DEF

 !====================== FINALIZACION ======================

   DEF INTEGER M_FNC_FIN

   WBMS_NUM_SOR = 0
   M_NUM_LINE = 0
   M_NUM_COLU = 0
	IF M_G_FOR = 'BMS' THEN
		M_G_WRIT = M_FNC_WBMS("         PRINT NOGEN")
		M_G_WRIT = M_G_PROY + "A" + M_G_MAPA +&
			M_V_BLK(LEN(M_G_PROY + M_G_MAPA) + 1 ) +&
			"DFHMSD TYPE=&SYSPARM,TERM=3270,MODE=INOUT,LANG=COBOL,"
		CALL M_RUT_SPA(M_G_WRIT,71)
		M_G_WRIT = M_G_WRIT + "X"
		M_G_WRIT = M_FNC_WBMS(M_G_WRIT)
		M_G_WRIT = "               TIOAPFX=YES"
		M_G_WRIT = M_FNC_WBMS(M_G_WRIT)
		M_G_WRIT = M_G_PROY + "F" + M_G_MAPA +&
		M_V_BLK(LEN(M_G_PROY + M_G_MAPA) + 1 ) +&
			"DFHMDI SIZE=(" + STR$(M_NUM_SUPE -&
			M_NUM_INFE + 1 ) + ",80),LINE=" +&
			STR$(M_NUM_INFE) + ",COLUMN=1,CTRL=(FREEKB)"
		M_G_WRIT = M_FNC_WBMS(M_G_WRIT)

		WBMS_NUM_SOR = 5
		M_G_WRIT = "SCRMENS  DFHMDF POS=(" +&
			STR$(24 - M_NUM_INFE + 1) +&
			",01),ATTRB=(ASKIP,BRT),LENGTH=79,"
		CALL M_RUT_SPA(M_G_WRIT,71)
		M_G_WRIT = M_G_WRIT + "X"
		M_G_WRIT = M_FNC_WBMS(M_G_WRIT)
		M_G_WRIT = "               INITIAL=' '"
		M_G_WRIT = M_FNC_WBMS(M_G_WRIT)
		M_G_WRIT = "         DFHMSD TYPE=FINAL"
		M_G_WRIT = M_FNC_WBMS(M_G_WRIT)
		M_G_WRIT = "         END"
		M_G_WRIT = M_FNC_WBMS(M_G_WRIT)
	END IF 
	WTXT_NUM_SOR = 7
	IF M_G_FOR = 'BMS' THEN
		M_G_TXT = M_FNC_WTXT(V_M(MG_C) + " ")
		M_G_TXT = M_FNC_WTXT("      * Linea de Mensajes")
		M_G_TXT = M_FNC_WTXT(V_M(MG_B) + "05 " +&
			M_G_MAPA + "-GLS-MENS-LEN       COMP   PIC S9(04).")
			M_G_TXT = M_FNC_WTXT(V_M(MG_B) +&
			"05 " + M_G_MAPA +&
				"-GLS-MENS-ATR              PIC  X(01).")
	END IF
	IF M_G_FOR = 'FMS' THEN
		WTXT_NUM_SOR = 3
		M_G_TXT = M_FNC_WTXT(V_M(MG_C) + " ")
		M_G_TXT = M_FNC_WTXT("      * Linea de Mensajes")
		M_G_TXT = M_FNC_WTXT(V_M(MG_B) + "   05 " + M_G_MAPA +&
			"-GLS-MENS.")
		M_G_TXT = M_FNC_WTXT(V_M(MG_B) + "      07 " + M_G_MAPA +&
			"-GLS-MEN1               PIC  X(40).")
		M_G_TXT = M_FNC_WTXT(V_M(MG_B) + "      07 " + M_G_MAPA +&
			"-GLS-MEN2               PIC  X(39).")
	ELSE
		M_G_TXT = M_FNC_WTXT(V_M(MG_B) + "05 " + M_G_MAPA +&
			"-GLS-MENS.")
		M_G_TXT = M_FNC_WTXT(V_M(MG_B) + "   07 " + M_G_MAPA +&
			"-GLS-MEN1               PIC  X(40).")
		M_G_TXT = M_FNC_WTXT(V_M(MG_B) + "   07 " + M_G_MAPA +&
			"-GLS-MEN2               PIC  X(39).")
	END IF
	IF M_G_FOR = 'FMS' THEN
		WTXT_NUM_SOR = 0
		M_NUM_LINE = 1
		M_NUM_COLU = 0
		M_NUM_CORR = 0

		M_G_TXT = M_FNC_WTXT(V_M(MG_B) + "03 " +&
			M_G_MAPA + "-CFLD         VALUE " +&
			STR$(M_NUM_CFLD) + "        PIC 9(03).")
	END IF
   END DEF

 !---------------------------- MODULO PRINCIPAL --------------------------------

 !!!   ON ERROR GO TO M_LAB_BAD
   M_NUM_FNC = M_FNC_INI
   M_NUM_FNC = M_FNC_FOR
   M_NUM_FNC = M_FNC_ATC

 LABE_SCRS:
   WBMS_NUM_SOR = 3
      
   WHILE TOKEN <> ETXTOK    
      IF VALTOKEN = "TEXT" THEN
         M_NUM_FNC = M_FNC_TEX
      ELSE
      IF VALTOKEN = "FIELD" THEN
         M_NUM_FNC = M_FNC_FLD
      END IF
      END IF
      TOKEN = NEXTTOKEN
   NEXT

   M_NUM_FNC = M_FNC_FIN
   M_NUM_FNC = M_FNC_COD
   M_NUM_FNC = M_FNC_GEN
   CALL PUT_GEN(MG_N,"*% INCLUDE EOF" + M_G_PBM )
   IF M_G_FOR = 'FMS' THEN
	   CALL PUT_GEN(MG_N,"*% INCLUDE EOF_VAX" + M_G_PBM )
   ELSE
	   CALL PUT_GEN(MG_N,"*% INCLUDE EOF_IBM" + M_G_PBM )
   END IF

   M_NUM_FNC = M_GEN_FIF
   
   IF M_G_MAT = "VSAM" THEN
      GO TO LABE_CONT
   END IF
   M_CNL_AUX% = 8
   M_FIL_AUX$ = M_G_MAPA + "MAT.GEN"
   OPEN M_FIL_AUX$ FOR OUTPUT AS FILE #M_CNL_AUX%,RECORDTYPE ANY, &
      ORGANIZATION SEQUENTIAL VARIABLE,   RECORDSIZE 255

   PRINT #M_CNL_AUX%,'         1         2         3         '+&
           '4         5         6         7         8'  
   PRINT #M_CNL_AUX%,'123456789 123456789 123456789 123456789'+&
           ' 123456789 123456789 123456789 123456789 '
   PRINT #M_CNL_AUX%,'         '
   FOR I% = 1 TO 24
   VARI_AUXI$ = ""
   FOR J% = 1 TO 80
   IF M_MAT_SCRN(I%,J%) <> 0 THEN
      VARI_AUXI$ = VARI_AUXI$ + STR$(M_MAT_SCRN(I%,J%))
   ELSE
      VARI_AUXI$ = VARI_AUXI$ + "."
   END IF
   NEXT J%
   PRINT #M_CNL_AUX%,VARI_AUXI$
   NEXT I%
 LABE_CONT:
 !!!  IF M_SWI_ERRO = M_CTE_YES THEN
 !!!      PRINT ""
 !!!   END IF
   CALL LIB$DO_COMMAND('$ EDTFRM ' + M_G_MAPA)

   GO TO LABE_ATRA
   
 M_LAB_BAD:
   PRINT BEL,BEL
   PRINT "Error(";ERR;") ";ERT$(ERR);" en linea ";erl; ", Modulo ";ern$
   IF ERR = 2 THEN
      PRINT M_FIL_FLG,FILE_WSS, " : Nombre de archivo ilegal"
   ELSE 
   IF ERR = 5 THEN
      PRINT M_FIL_FLG,FILE_WSS, " Archivo inexistente       "
   ELSE
   IF ERR = 55 THEN
      PRINT " Indice fuera de rango "
   END IF
   END IF
   RESUME 999
999
 LABE_ATRA:
 END
1300   SUB M_RUT_SPA(STRING SPA_G_STR BY DESC,REAL SPA_NUM_LMT BY REF)
      WHILE LEN(SPA_G_STR) < SPA_NUM_LMT
         SPA_G_STR = SPA_G_STR + " "
      NEXT
   END SUB

1400   SUB M_RUT_PIC(STRING PIC_G_PIC BY DESC)
      PIC_SWI_ALL$ = "YES"
      PIC_I% = 1
      PIC_J% = LEN(PIC_G_PIC)
      PIC_0$ = ""
      IF PIC_J% < 10 THEN
         PIC_0$ = "0"
      END IF
      PIC_G_FST$ = LEFT$(PIC_G_PIC,1)
      WHILE PIC_I% <= PIC_J%
         IF MID$(PIC_G_PIC,PIC_I%,1) <> PIC_G_FST$ THEN
            PIC_SWI_ALL$ = "NOT"
            PIC_I% = PIC_J% + 1
         END IF
         PIC_I% = PIC_I% + 1
      NEXT
      IF PIC_SWI_ALL$ = "YES" THEN
         PIC_G_PIC = PIC_G_FST$ + "(" +&
                  PIC_0$ + STR$(PIC_J%) + ")"
      END IF
   END SUB

1600   SUB PUT_GEN(INTEGER MARGEN, STRING REGISTRO BY DESC)
      DECLARE STRING REG_GEN   , V_M(6)
      DECLARE INTEGER   CONSTANT          &
         MG_C       =  1,   MG_A       =  2,&
         MG_B       =  3,   MG_1       =  4,&
         MG_2       =  5,   MG_N       =  6
      V_M(MG_C) = "      "
      V_M(MG_A) = "       "
      V_M(MG_B) = "           "
      V_M(MG_1) = "                "
      V_M(MG_2) = "                   "
      V_M(MG_N) = ""
      REG_GEN = V_M(MARGEN) + REGISTRO
      IF LEN(REG_GEN) > 72 THEN
         GEN_I% = 1
         GEN_J% = 3
         WHILE MID$(REG_GEN,GEN_I%,4) <> " TO " AND &
               GEN_I% < LEN(REG_GEN) 
            GEN_I% = GEN_I% + 1
         NEXT
         IF GEN_I% > 72 THEN
            GEN_I% = 71
            GEN_J% = 0
            WHILE MID$(REG_GEN,GEN_I%,1) <> " "
               GEN_I% = GEN_I% - 1
            NEXT
         END IF
         PRINT #3,LEFT$(REG_GEN,GEN_I% + GEN_J%)
         PRINT #3,V_M(MG_1) + RIGHT$(REG_GEN,GEN_I% + 1 +&
                     GEN_J%)
      ELSE
         PRINT #3,REG_GEN
      END IF
   END SUB

1650   SUB WRT_GEN(INTEGER MARGEN, STRING REGISTRO BY DESC)
      DECLARE STRING REG_GEN   , V_M(6)
      DECLARE INTEGER   CONSTANT          &
         MG_C       =  1,   MG_A       =  2,&
         MG_B       =  3,   MG_1       =  4,&
         MG_2       =  5,   MG_N       =  6
      V_M(MG_C) = "      "
      V_M(MG_A) = "       "
      V_M(MG_B) = "           "
      V_M(MG_1) = "                "
      V_M(MG_2) = "                   "
      V_M(MG_N) = ""
      PRINT #3,V_M(MARGEN) + REGISTRO
   END SUB



1700   SUB GENRPTMAN (STRING STRG BY DESC,STRING MANT)
 !
 !  Esta subrutina  recibe en el primer parametro (STRG) la variable a
 !  modificar y mantiene en ella solo aquellos caracteres que aparecen 
 !  en el segundo parametro (MANT)
 !  Ejemplo:
 !   Si PICT_FILD tiene '99.999.999,99' despues de un
 !      CALL GENRPTMAN(PICT_FILD,"9,") 
 !      PICT_FILD tiene '99999999,99'
 !
   DECLARE      INTEGER      SIZE_STRG
   DECLARE      INTEGER      SIZE_MANT
   DECLARE      STRING      VARI_AUXI
   DECLARE      STRING      VARI_MIDD

   SIZE_STRG = LEN(STRG) 
   SIZE_MANT = LEN(MANT)
   VARI_AUXI = ""
   FOR I% = 1 TO SIZE_STRG
      VARI_MIDD = MID$(STRG,I%,1) 
      FOR J% = 1 TO SIZE_MANT
         IF MID$(MANT,J%,1) = VARI_MIDD THEN
             VARI_AUXI = VARI_AUXI + VARI_MIDD 
         END IF
      NEXT J%
   NEXT I%
   STRG = VARI_AUXI
   END SUB



1800   SUB GENRPTREP (STRING ESTR_INGS BY DESC, STRING CRTR_ORIG BY DESC,&
          STRING CRTR_REEM BY DESC)

 !   Reemplaza en ESTR_INGS el CRTR_ORIG(caracter original)
 !   por CRTR_REEM(carater(es) de reemplazo)
 !
 !   Ejemplo de llamada de esta subrutina:
 !       PICT_FILD = 999999,999
 !      CALL GENRPTREP(PICT_FILD,",","V")
 !   Esta subrutina devuelve en PICT_FILD el valor 999999V999

   LARGO_STR% = LEN(ESTR_INGS) 
   VAR_AUX$ = ""
   FOR I% = 1 TO LARGO_STR%
      IF MID$(ESTR_INGS,I%,1) = CRTR_ORIG THEN
         VAR_AUX$ = VAR_AUX$ + CRTR_REEM
      ELSE
         VAR_AUX$ = VAR_AUX$ + MID$(ESTR_INGS,I%,1)
      END IF
   NEXT I%
   ESTR_INGS = VAR_AUX$
   END SUB

