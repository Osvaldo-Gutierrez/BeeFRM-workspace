% IF GEN_VAX
% IF DEFINT
% IF DEFCOM
	COM {TIPO}	{CONST} {NOMVAR}
% ELSE
	DECLARE {TIPO}	{CONST} {NOMVAR}
% END
% END
% ELSE
% IF DEFINT
	GLOBAL {CONST}	{NOMVAR}			{TIPO}
% END
% END
%! A CONTINUACION SE INCLUYEN LAS FUNCIONES GENERICAS
% IF FUNGEN
% IF GEN_VAX
200

      DEF STRING FNC_PRINT(STRING MENS)
	PRINT MENS
      END DEF

      DEF INTEGER FNC_SYSVAL(STRING VAR_STRING)
	FNC_SYSVAL = VAL%(VAR_STRING)
      END DEF

      DEF INTEGER FNC_SYSINTEGER(LONG  VALOR)
		FNC_SYSINTEGER = INTEGER(VALOR)
      END DEF

      DEF STRING FNC_SYS_LIB_GET_SYMBOL(STRING GET_SYMBOL)
          CALL LIB$GET_SYMBOL(GET_SYMBOL,AUX_FNC_CPT_ALF)
          FNC_SYS_LIB_GET_SYMBOL = AUX_FNC_CPT_ALF
      END DEF

      DEF INTEGER FNC_SYSPOS(STRING LINEA,STRING ARGBUSQ,INTEGER POSINIC)
          FNC_SYSPOS = POS(LINEA,ARGBUSQ,POSINIC)
      END DEF


      DEF STRING FNC_SYSFORMAT(INTEGER VALFMT,STRING TOTFMT)

		IF TOTFMT = "#" THEN
			FNC_SYSFORMAT = FORMAT$(VALFMT,"#")
		ELSE
		IF TOTFMT = "##" THEN
			FNC_SYSFORMAT = FORMAT$(VALFMT,"##")
		ELSE
		IF TOTFMT = "###" THEN
			FNC_SYSFORMAT = FORMAT$(VALFMT,"###")
		ELSE
		IF TOTFMT = "####" THEN
			FNC_SYSFORMAT = FORMAT$(VALFMT,"####")
		ELSE
		IF TOTFMT = "#####" THEN
			FNC_SYSFORMAT = FORMAT$(VALFMT,"#####")
		ELSE
		IF TOTFMT = "######" THEN
			FNC_SYSFORMAT = FORMAT$(VALFMT,"######")
		END IF
		END IF
		END IF
		END IF
		END IF
		END IF
   END DEF

   DEF STRING FNC_SYSCHR(INTEGER CHA)
	FNC_SYSCHR = CHR$(CHA)
   END DEF

   DEF STRING EMIT_BIP
	PRINT FNC_SYSCHR(7)
   END DEF

   DEF STRING GET_COM1
	GET_COM1 = FNC_SYSCHR(39)
   END DEF

   DEF STRING GET_COM2
	GET_COM2 = FNC_SYSCHR(34)
   END DEF

   DEF STRING FNC_SYSRIGHT(STRING DER,INTEGER DESDE)
	FNC_SYSRIGHT = RIGHT$(DER,DESDE)
   END DEF

   DEF STRING FNC_SYSLEFT(STRING IZQ,INTEGER HASTA)
	FNC_SYSLEFT = LEFT$(IZQ,HASTA)
   END DEF

   DEF STRING FNC_SYSSTR(INTEGER NUME)
	FNC_SYSSTR = STR$(NUME)
   END DEF

   DEF STRING FNC_SYSMID(STRING CADENA,INTEGER DESDE,INTEGER CUANTOS)
	FNC_SYSMID = MID$(CADENA,DESDE,CUANTOS)
   END DEF

   DEF INTEGER FNC_SYSLEN(STRING CADENA)
	FNC_SYSLEN = LEN(CADENA)
   END DEF

   DEF STRING FNC_SYSTIME(INTEGER PARAM)
	FNC_SYSTIME = TIME$(PARAM)
   END DEF

   DEF STRING FNC_SYSDATE(INTEGER PARAM)
	FNC_SYSDATE = DATE$(PARAM)
   END DEF

   DEF STRING FNC_SYSSTRING(INTEGER PARAM1,INTEGER PARAM2)
	FNC_SYSSTRING = STRING$(PARAM1,PARAM2)
   END DEF

   DEF STRING FNC_SYSEDIT(STRING PARAM1,INTEGER PARAM2)
	FNC_SYSEDIT = EDIT$(PARAM1,PARAM2)
   END DEF

   DEF STRING FG_BAS_Padding (STRING LCStringIn , INTEGER liLargo , STRING LCRelo , STRING LCJustificacion )

    Declare integer LIBlancos
    Declare string  LCString 

    If FNC_SYSLEN(LCStringIn) = liLargo Then
       FG_BAS_Padding = LCStringIn
        GO TO LABE_CHAO
    End If

    LIBLANCOS = liLargo - FNC_SYSLEN(LCStringIn)

    If LIBlancos < 0 Then
       FG_BAS_Padding = LCStringIn
        GO TO LABE_CHAO
    End If

    LCString = LCStringIn

    If LCJustificacion = "D" Then
		FOR II =1 TO LIBLANCOS
			LCString = LCString  + LCRELO
		NEXT II
    Else
		FOR II =1 TO LIBLANCOS
			LCString = LCRELO  + LCString 
		NEXT II
    End If

    FG_BAS_Padding = LCString
 LABE_CHAO:

   END DEF




% ELSE

==================================
Declare Function GetPrivateProfileString Lib "kernel" (ByVal lpApplicationName As String, ByVal lpKeyName As String, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Integer, ByVal lpFileName As String) As Integer               

   FUNCTION FNC_PRINT(MENS AS STRING) AS STRING
     MSGBOX MENS
   END FUNCTION

   FUNCTION FNC_SYSINTEGER (VALOR AS LONG) AS INTEGER
     FNC_SYSINTEGER = INT(VALOR)
   END FUNCTION

   FUNCTION FNC_SYSVAL (VAR_STRING AS STRING) AS INTEGER
     FNC_SYSVAL = VAL(VAR_STRING)
   END FUNCTION

   FUNCTION FNC_SYS_LIB_GET_SYMBOL (GET_SYMBOL AS STRING) AS STRING
     FNC_SYS_LIB_GET_SYMBOL = FG_BAS_GETSYSINI("GENMTX",GET_SYMBOL)
   END FUNCTION

   FUNCTION FNC_SYSPOS (LINEA AS STRING,ARGBUS AS STRING,POSINIC AS INTEGER) AS INTEGER
    FNC_SYSPOS = INSTR(POSINIC + 2,LINEA,ARGBUS) '+ (POSINIC - 1)
   END FUNCTION


   FUNCTION FNC_SYSFORMAT (VALFMT AS INTEGER,TOTFMT AS STRING) AS STRING
    
     SELECT CASE TOTFMT
            CASE "#": FNC_SYSFORMAT = " " + STR(VALFMT)
            CASE "##": FNC_SYSFORMAT = "  " + STR(VALFMT)
            CASE "###": FNC_SYSFORMAT = "   " + STR(VALFMT)
            CASE "####": FNC_SYSFORMAT = "    " + STR(VALFMT)
            CASE "#####": FNC_SYSFORMAT = "     " + STR(VALFMT)
            CASE "######": FNC_SYSFORMAT = "      " + STR(VALFMT)
     END SELECT

   END FUNCTION

   FUNCTION FNC_SYSCHR (CHA AS INTEGER) AS STRING
     FNC_SYSCHR = CHR$(CHA)
   END FUNCTION

   FUNCTION EMIT_BIP () AS STRING
     BEEP
     EMIT_BIP = "OK"
   END FUNCTION

   FUNCTION GET_COM1 () AS STRING
     GET_COM1 = FNC_SYSCHR(39)
   END FUNCTION

   FUNCTION GET_COM2 () AS STRING
     GET_COM2 = FNC_SYSCHR(34)
   END FUNCTION

   FUNCTION FNC_SYSRIGHT (DER AS STRING,DESDE AS INTEGER) AS STRING
     FNC_SYSRIGHT = RIGHT$(DER,LEN(DER) - DESDE + 1)
   END FUNCTION

   FUNCTION FNC_SYSLEFT (IZQ AS STRING,HASTA AS INTEGER) AS STRING
     FNC_SYSLEFT = LEFT$(IZQ,HASTA)
   END FUNCTION

   FUNCTION FNC_SYSSTR (NUME ) AS STRING
    DIM LSPASO  AS STRING
    IF ISNUMERIC(NUME) THEN
        FNC_SYSSTR = TRIM$(STR(NUME))
    ELSE
   FNC_SYSSTR = STR$(NUME)
    END IF
   END FUNCTION

   FUNCTION FNC_SYSMID (CADENA AS STRING,DESDE AS INTEGER,CUANTOS AS INTEGER) AS STRING
    FNC_SYSMID = MID$(CADENA,DESDE,CUANTOS)
   END FUNCTION

   FUNCTION FNC_SYSLEN (CADENA) AS INTEGER
    IF ISNUMERIC(CADENA) THEN
       CADENA = TRIM$(CADENA)
    END IF
    FNC_SYSLEN = LEN(CADENA)
   END FUNCTION

   FUNCTION FNC_SYSTIME (PARAM AS INTEGER) AS STRING
     FNC_SYSTIME = FORMAT$(TIME$,"HH:MM AM/PM")
   END FUNCTION

   FUNCTION FNC_SYSDATE (PARAM AS INTEGER) AS STRING
    FNC_SYSDATE = FORMAT$(NOW,"DD-MMM-YY")
   END FUNCTION

   FUNCTION FNC_SYSSTRING (PARAM1 AS INTEGER,PARAM2 AS INTEGER) AS STRING
    FNC_SYSSTRING = STRING$(PARAM1,PARAM2)
   END FUNCTION

   FUNCTION FNC_SYSEDIT (PARAM1,PARAM2 AS INTEGER) AS STRING

       SELECT CASE PARAM2
   CASE 32: FNC_SYSEDIT = UCASE(PARAM1)
    CASE 128: FNC_SYSEDIT = RTRIM(PARAM1)
   CASE 16:
          CASE ELSE
          MSGBOX "PARAMETRO NO UTILIZADO O NO IMPLEMENTADO EN VAX"
         FNC_SYSEDIT = ""
    END SELECT

   END FUNCTION

   FUNCTION FG_BAS_Padding (LCStringIn AS STRING , liLargo AS INTEGER , LCRelo AS STRING , LCJustificacion AS STRING) AS STRING

    DIM  LIBlancos AS integer
    DIM  LCString  AS STRING

    If FNC_SYSLEN(LCStringIn) = liLargo Then
       FG_BAS_Padding = LCStringIn
        GO TO LABE_CHAO
    End If

    LIBLANCOS = liLargo - FNC_SYSLEN(LCStringIn)

    If LIBlancos < 0 Then
       FG_BAS_Padding = LCStringIn
        GO TO LABE_CHAO
    End If

    LCString = LCStringIn

    If LCJustificacion = "D" Then
		FOR II =1 TO LIBLANCOS
			LCString = LCString  + LCRELO
		NEXT II
    Else
		FOR II =1 TO LIBLANCOS
			LCString = LCRELO  + LCString 
		NEXT II
    End If

    FG_BAS_Padding = LCString
 LABE_CHAO:

   END FUNCTION


   FUNCTION FG_BAS_GETSYSINI (SECTION,KEY)
'***********************************************************************
'*  DESCRIPCION :   FUNCTION QUE OBTIENE DE ARCHIVO GENMTX.INI
'*                  PARAMETROS DE INICIALIZACION PARA LAS
'*                  APLICACIONES
'***********************************************************************
    
DIM RETVAL      AS STRING
DIM APPNAME     AS STRING
DIM WORKED      AS INTEGER

RETVAL = STRING$(255,0)
WORKED = GETPRIVATEPROFILESTRING(SECTION,KEY,"",RETVAL,LEN(RETVAL),"C:\CST\GENMTX.INI")
IF WORKED = 0 THEN
    FG_BAS_GETSYSINI = ""
ELSE
    FG_BAS_GETSYSINI = LEFT(RETVAL,INSTR(RETVAL,CHR(0)) - 1)
END IF

END FUNCTION

% END
% END
