050
 !!!	VSN$ = "Version 2.0.1 JAN-2002
 !!!	TPG_TOT_HST			NUMERO DE HST ESPECIFICADOS
 !!!	TPG_MAT_HST_NUM(I_CPT_NUM,CTE_IDX_TCF)  TOTAL DE CAMPOS PARA HST I_CPT_NUM
 !!!	TPG_MAT_HST_NUM(I_CPT_NUM,CTE_IDX_TSF)  TOTAL DE SRV PARA HST I_CPT_NUM
 !!!	TPG_MAT_NAMEFLDHST(I_CPT_NUM,J_CPT_NUM)	NOMBRE DEL CAMPO J_CPT_NUM DENTRO DEL HST I_CPT_NUM
 !!!	TPG_MAT_IDENFLDHST(I_CPT_NUM,J_CPT_NUM)	IDENTIFICACION(COMENTARIO) DEL CAMPO J_CPT_NUM DENTRO DEL HST I_CPT_NUM
 !!!	TPG_MAT_LRG(I_CPT_NUM,J_CPT_NUM)	       LARGO DEL CAMPO J_CPT_NUM DENTRO DEL HST I_CPT_NUM
 !!!	TPG_MAT_TOTOCCFLDHST(I_CPT_NUM,J_CPT_NUM)      TOTAL DE OCURRENCIAS DEL CAMPO J_CPT_NUM DENTRO DEL HST I_CPT_NUM
 !!!	TPG_MAT_NCP_SRV(I_CPT_NUM,J_CPT_NUM)	   NUMERO DE CAMPOS DEL SRV J_CPT_NUM PARA HST I_CPT_NUM
 !!!	TPG_MAT_NAMEFLDSRV(I_CPT_NUM,J_CPT_NUM,K_CPT_NUM)    NOMBRE DE LOS CAMPOS  K_CPT_NUM  PARA HST  I_CPT_NUM  SRV  J_CPT_NUM
 !!!	TPG_MAT_TOTOCCFLDSRV(I_CPT_NUM,J_CPT_NUM,K_CPT_NUM)  NUMERO DE OCURRENCIAS DEL CAMPOS  K_CPT_NUM  PARA HST  I_CPT_NUM  SRV  J_CPT_NUM
 !!!	TPG_MAT_IDT_FLD(30,180)	    IDENTIFICA  TIPO DE CAMPO EN HST
 !!!	TPG_MAT_IDT_VBC(30,180)	    IDENTIFICA  TIPO DE CAMPO EN VBC
 !!!	TPG_MAT_IDT_DO(30,180)	    IDENTIFICA  TIPO DE CAMPO DISPLAY ONLY
 !!!	TPG_MAT_NCP_SRV(I_CPT_NUM,J_CPT_NUM)	     TOTAL DE CAMPOS DEL SERVER,DONDE I_CPT_NUM N° DE HST,J_CPT_NUM N° DE SRVS PARA EL HST
 !!!	TPG_MAT_NAMEFLDSRV(I_CPT_NUM,J_CPT_NUM,K_CPT_NUM)    NOMBRE DE CAMPOS DE SRV,DONDE I_CPT_NUM N° DE HST,J_CPT_NUM N° DE SRVS PARA EL HOST,K_CPT_NUM N° DE CAMPOS
 !!!	TPG_MAT_NIV_IDPT(TPG_TOT_REQ,TPG_TOT_CAMP,1)  REPRESENTA NIVEL DE INDEXACION DE CAMPOS (EN SRV O HST)VAR_IDX1_CPT_NUM
 !!!	TPG_MAT_NIV_IDPT(TPG_TOT_REQ,TPG_TOT_CAMP,2)  REPRESENTA NIVEL DE INDEXACION DE CAMPOS (EN SRV O HST)VAR_IDX2_CPT_NUM
 !!!
 !!!	TPG_MAT_PTPIG(100,30)	       IDENTIFICA NOMBRE DE PANTALLA VISUAL ASOCIADA,SE UTILIZA,CUANDO SE 
 !!!					   SE INDEXA UNA PANTALLA EN OTRA EJ   (DBC + DIR)
 !!!	TPG_MAT_XTPIG(100,30) 
 !!!
 !!!	TPG_MAT_PTSPR(100,30)		   SE UTILIZA PARA IDENTIFICAR CUANDO UN SERVER REPRESENTA UNA GRILLA
 !!!					  PARA IDENTIFICAR  (SS AS CONTROL EN V.B.)
 !!!	TPG_MAT_XTSPR(100,30)
 !!!
 !!!	TPG_MAT_PTFRM(100,30)		 INDICA LOS NOMBRE DE LOS "FRM" PARA CADA "REQ"
 !!!					MAXIMO 30 "FRM" Y 70 "REQ"
 !!!
 !!!	TPG_MAT_INIIDXPT(100,30)	 INDICA SI EL "FRM" J INICIA UN GRUPO DE INDEXACION
 !!!			(I,J)		PARA EL "REQ" I,PARA QUE NO REFUNDA BAJO UN SOLO
 !!!					GRUPO INDEXADO DOS O MAS INDEXACIONES CON EL MISMO
 !!!					NUMERO DE OCURRENCIAS Y LAS MANEJE EN FORMA
 !!!					INDEPENDIENTE
 !!!
 !!!	TPG_MAT_INIIDXTX(100,30)	 INDICA SI EL "FRM" J INICIA UN GRUPO DE INDEXACION
 !!!			(I,J)		PARA EL "REQ" I,PARA QUE NO REFUNDA BAJO UN SOLO
 !!!					GRUPO INDEXADO DOS O MAS INDEXACIONES CON EL MISMO
 !!!					NUMERO DE OCURRENCIAS Y LAS MANEJE EN FORMA
 !!!					INDEPENDIENTE
 !!!
 !!!       *********  GENERACION DE SERVERS AUTOMATICOS ********
 !!!	901	IKY			"INSTANCIA DE LLAVES EN ING"
 !!!	902     STAT-MSG   FUE ELIMINADO
 !!!	903	FLD + MKY		"INSTANCIA DE CAMPOS EN ING Y MOD"
 !!!	904	FLD + MKY + AKY + IKY   "DATOS DE RESPUESTAS DE CON      "
 !!!	905	IKY + MKY + AKY		"INSTANCIA DE LLAVES EN CON,MOD,ELI "
 !!!	907	""			"INSTANCIA DE ENTER SIN DATOS ELI"

100

	DECLARE INTEGER	 NUMTOKEN
	DECLARE INTEGER	 SC_NUMTOKEN
	DECLARE INTEGER	 SZTOKEN
	DECLARE INTEGER	 SC_SZTOKEN
	DECLARE INTEGER	 TOKEN
	DECLARE INTEGER	 SC_TOKEN
	DECLARE INTEGER	 P_P
	DECLARE INTEGER	 SC_P_P
	DECLARE INTEGER	 P_Q
	DECLARE INTEGER	 SC_P_Q
	DECLARE INTEGER	 P_R
	DECLARE INTEGER	 SZ_I_B
	DECLARE INTEGER	 KK
	DECLARE INTEGER	 LL
	DECLARE INTEGER	 BB
	DECLARE INTEGER	 PONRT
	DECLARE INTEGER	 SEMSUM
	DECLARE INTEGER	 SM
	DECLARE INTEGER	 DL
	DECLARE INTEGER	 FIL_HST
	DECLARE INTEGER	 COL_HST
	DECLARE INTEGER	 FIL_CAM
	DECLARE INTEGER	 COL_CAM
	DECLARE INTEGER	 FIL_NCF
	DECLARE INTEGER	 COL_NCF
	DECLARE INTEGER	 FIL_LRG
	DECLARE INTEGER	 COL_LRG
	DECLARE INTEGER	 FIL_IDX
	DECLARE INTEGER	 TPG_TOT_LEI
	DECLARE INTEGER	 TPG_POS_REQ
	DECLARE INTEGER	 UBI_SRV_TP
	DECLARE INTEGER	 NUM_TRN
	DECLARE INTEGER	 FIO_STAT
	DECLARE INTEGER	 FIO_ACCI
	DECLARE INTEGER	 FIO_RLEN
	DECLARE INTEGER	 C_FILE_MTX
	DECLARE INTEGER	 C_FILE_FMT
	DECLARE INTEGER	 C_FILE_PD1
	DECLARE INTEGER	 C_FILE_PD2
	DECLARE INTEGER	 C_FILE_PD3
	DECLARE INTEGER	 C_FILE_WS1
	DECLARE INTEGER	 C_FILE_WS3
	DECLARE INTEGER	 C_FILE_PI1
	DECLARE INTEGER	 C_FILE_WS2
	DECLARE INTEGER	 C_FILE_DFI
	DECLARE INTEGER	 C_FILE_DFO
	DECLARE INTEGER	 C_FILE_VBC
	DECLARE INTEGER	 INICIA_IDX_PT
	DECLARE INTEGER	 INICIA_IDX_TX
	DECLARE INTEGER	 INICIA_IDX_TP
	DECLARE INTEGER	 INICIA_IDX_XT
	DECLARE INTEGER	 RE
	DECLARE INTEGER	 ACCION
	DECLARE INTEGER	 FST_WSS
	DECLARE INTEGER	 TPG_HDR_SND_CPT_NUM
	DECLARE INTEGER	 TPG_TOT_HST
	DECLARE INTEGER	 TPG_TOT_REQ
	DECLARE INTEGER	 TPG_TOT_TRN
	DECLARE INTEGER	 TPG_CON_TRN
	DECLARE INTEGER	 SEM
	DECLARE INTEGER	 AUX
	DECLARE INTEGER	 CAMP
	DECLARE INTEGER	 LINEA
	DECLARE INTEGER	 QQ
	DECLARE INTEGER	 PP_CPT_NUM
	DECLARE INTEGER	 ANT1_CPT_NUM
	DECLARE INTEGER	 ANT2_CPT_NUM
	DECLARE INTEGER	 CAMP_CPT_NUM
	DECLARE INTEGER	 COL_CPT_NUM
	DECLARE INTEGER	 CONT_SRV_CPT_NUM
	DECLARE INTEGER	 CON_NIV_CPT_NUM
	DECLARE INTEGER	 CON_NIV1_CPT_NUM
	DECLARE INTEGER	 CON_NIV2_CPT_NUM
	DECLARE INTEGER	 CON_NIVV_CPT_NUM
	DECLARE INTEGER	 CON_NIV_ANT_CPT_NUM
	DECLARE INTEGER	 MM_CPT_NUM
	DECLARE INTEGER	 COR_HST_CPT_NUM
	DECLARE INTEGER	 COR_PGM_CPT_NUM
	DECLARE INTEGER	 DD_CPT_NUM
	DECLARE INTEGER	 ENC_CPT_NUM
	DECLARE INTEGER	 FIRST_CPT_NUM
	DECLARE INTEGER	 FUNC_CPT_NUM
	DECLARE INTEGER	 GEN_I_CPT_NUM
	DECLARE INTEGER	 GEN_J_CPT_NUM
	DECLARE INTEGER	 GG_CPT_NUM
	DECLARE INTEGER	 HH_CPT_NUM
	DECLARE INTEGER	 HST_CPT_NUM
	DECLARE INTEGER	 I_CPT_NUM
	DECLARE INTEGER	 IDX_CPT_NUM
	DECLARE INTEGER	 IDX_ERR_CPT_NUM
	DECLARE INTEGER	 II_CPT_NUM
	DECLARE INTEGER	 INDEX_CPT_NUM
	DECLARE INTEGER	 J_CPT_NUM
	DECLARE INTEGER	 JJ_CPT_NUM
	DECLARE INTEGER	 K_CPT_NUM
	DECLARE INTEGER	 LARGO_STR_CPT_NUM
	DECLARE INTEGER	 LL_CPT_NUM
	DECLARE INTEGER	 LRG_PT_TX_CPT_NUM
	DECLARE INTEGER	 LRG_XT_TP_CPT_NUM
	DECLARE INTEGER	 LZ_CPT_NUM
	DECLARE INTEGER	 L_REG_CPT_NUM
	DECLARE INTEGER	 L_RELL_CPT_NUM
	DECLARE INTEGER	 MOV_OKS_CPT_NUM
	DECLARE INTEGER	 MULT_CPT_NUM
	DECLARE INTEGER	 MULT1_CPT_NUM
	DECLARE INTEGER	 MULT2_CPT_NUM
	DECLARE INTEGER	 MUL_NIV_DOS_CPT_NUM
	DECLARE INTEGER	 MUL_NIV_TRE_CPT_NUM
	DECLARE INTEGER	 MUL_NIV_UNO_CPT_NUM
	DECLARE INTEGER	 NIV_ESC_CPT_NUM
	DECLARE INTEGER	 NIV_MOV_PT_MOV_CPT_NUM
	DECLARE INTEGER	 NIV_MOV_TP_MOV_CPT_NUM
	DECLARE INTEGER	 NIV_MOV_TX_MOV_CPT_NUM
	DECLARE INTEGER	 NIV_MOV_XT_MOV_CPT_NUM
	DECLARE INTEGER	 NN_CPT_NUM
	DECLARE INTEGER	 NNN_IDX_CPT_NUM
	DECLARE INTEGER	 NN_IDX_CPT_NUM
	DECLARE INTEGER	 N_IDX_CPT_NUM
	DECLARE INTEGER	 O_CPT_NUM
	DECLARE INTEGER	 OCCUR1_CPT_NUM
	DECLARE INTEGER	 OCCUR2_CPT_NUM
	DECLARE INTEGER	 OCC_SRV_CPT_NUM
	DECLARE INTEGER	 PASO_CPT_NUM
	DECLARE INTEGER	 POS_1ER_FLD_IDX_CPT_NUM
	DECLARE INTEGER	 POS_IDX_CPT_NUM
	DECLARE INTEGER	 POS_ULT_FLD_IDX_CPT_NUM
	DECLARE INTEGER	 REPT1_CPT_NUM
	DECLARE INTEGER	 SEGR_CPL_CPT_NUM
	DECLARE INTEGER	 SEGR_NUM_CPT_NUM
	DECLARE INTEGER	 SEGS_CPL_CPT_NUM
	DECLARE INTEGER	 SEGS_NUM_CPT_NUM
	DECLARE INTEGER	 SEP_CPT_NUM
	DECLARE INTEGER	 SEP_ANT_CPT_NUM
	DECLARE INTEGER	 SRV_CPT_NUM
	DECLARE INTEGER	 SRV_TX_CPT_NUM
	DECLARE INTEGER	 SS_CPT_NUM
	DECLARE INTEGER	 TOT_OCURRENCIAS_CAMPOS_CPT_NUM
	DECLARE INTEGER	 TOT_PGM_CPT_NUM
	DECLARE INTEGER	 TPG_HDR_DAT_CPT_NUM
	DECLARE INTEGER	 TPG_LRG_RCV_CPT_NUM
	DECLARE INTEGER	 TPG_LRG_SND_CPT_NUM
	DECLARE INTEGER	 TPG_LRG_MSG_RCV_NUM
	DECLARE INTEGER	 TPG_LRG_MSG_SND_NUM
	DECLARE INTEGER	 TPG_TOT_SIST_CPT_NUM
	DECLARE INTEGER	 TT_CPT_NUM
	DECLARE INTEGER	 TY_CPT_NUM
	DECLARE INTEGER	 UU_CPT_NUM
	DECLARE INTEGER	 VAR_IDX1_CPT_NUM
	DECLARE INTEGER	 VAR_IDX2_CPT_NUM
	DECLARE INTEGER	 VV_CPT_NUM
	DECLARE INTEGER	 V_L_CPT_NUM
	DECLARE INTEGER	 AA_CPT_NUM
	DECLARE INTEGER	 XX_CPT_NUM
	DECLARE INTEGER	 YY_CPT_NUM
	DECLARE INTEGER	 ZZ_CPT_NUM
	DECLARE INTEGER	 ZZZ_CPT_NUM
	DECLARE INTEGER	 TPG_HDR_RCV
	DECLARE INTEGER	 LRG_ESTR_CPT_NUM
	DECLARE INTEGER	 NIV_MOV_TX_ENT
	DECLARE INTEGER	 NIV_MOV_PT_ENT
	DECLARE INTEGER	 NIV_MOV_XT_ENT
	DECLARE INTEGER	 NIV_MOV_TP_ENT
	DECLARE INTEGER	 SRV_ACT_CPT_NUM
	DECLARE INTEGER	 TPG_CON
	DECLARE INTEGER	 AUX_POS
	DECLARE INTEGER	 AUX_MAT_LRG
	DECLARE INTEGER	 AUX_MAT_TOTOCCFLDHST

	DECLARE INTEGER	 NIV_MRG(9)
	DECLARE INTEGER	 TPG_MAT_HST_NUM(30,30)
	DECLARE INTEGER	 TPG_MAT_INIIDXPT(100,30)
	DECLARE INTEGER	 TPG_MAT_INIIDXTP(100,30)
	DECLARE INTEGER	 TPG_MAT_INIIDXXT(100,30)
	DECLARE INTEGER	 TPG_MAT_INIIDXTX(100,30)
	DECLARE INTEGER	 TPG_MAT_LRG(30,180)
	DECLARE INTEGER	 TPG_MAT_NCP_SRV(30,30)
	DECLARE INTEGER	 TPG_VEC_NUM_TRN(100)
	DECLARE INTEGER	 TPG_MAT_PTFIDX(30,30)
	DECLARE INTEGER	 TPG_MAT_TXFIDX(100,30)
	DECLARE INTEGER	 TPG_MAT_XTFIDX(30,30)
	DECLARE INTEGER	 TPG_MAT_CAM_PT(100)
	DECLARE INTEGER	 TPG_MAT_CAM_TX(100)
	DECLARE INTEGER	 TPG_MAT_CAM_TP(100)
	DECLARE INTEGER	 TPG_MAT_CAM_XT(100)
	DECLARE INTEGER	 TPG_MAT_TOTOCCFLDHST(30,180)
	DECLARE INTEGER	 TPG_MAT_TOTOCCFLDSRV(30,30,180)
	DECLARE INTEGER	 TPG_MAT_NIV_IDPT(100,20,2)
	DECLARE INTEGER	 TPG_MAT_NIV_IDXT(100,20,2)
	DECLARE INTEGER	 TPG_MAT_NIV_IDTX(100,20,3)
	DECLARE INTEGER	 TPG_MAT_NIV_IDTP(100,20,2)


	DECLARE INTEGER	CONSTANT          FIO_STAT_OKS            = 0
	DECLARE INTEGER	CONSTANT  	NO_INICIA_IDX_PT	= 0
	DECLARE INTEGER	CONSTANT  	SI_INICIA_IDX_PT	= 1
	DECLARE INTEGER	CONSTANT  	NO_INICIA_IDX_TP	= 0
	DECLARE INTEGER	CONSTANT  	SI_INICIA_IDX_TP	= 1
	DECLARE INTEGER	CONSTANT  	NO_INICIA_IDX_XT	= 0
	DECLARE INTEGER	CONSTANT  	SI_INICIA_IDX_XT	= 1
	DECLARE INTEGER	CONSTANT  	NO_INICIA_IDX_TX	= 0
	DECLARE INTEGER	CONSTANT  	SI_INICIA_IDX_TX	= 1
	DECLARE INTEGER	CONSTANT  	KEYTOK = 1
	DECLARE INTEGER	CONSTANT  	IDNTOK = 2
	DECLARE INTEGER	CONSTANT  	NUMTOK = 3
	DECLARE INTEGER	CONSTANT  	STRTOK = 4
	DECLARE INTEGER	CONSTANT  	CHRTOK = 5
	DECLARE INTEGER	CONSTANT  	EOLTOK = 6
	DECLARE INTEGER	CONSTANT  	ETXTOK = 7
	DECLARE INTEGER	CONSTANT  	HTAB   = 9
	DECLARE INTEGER	CONSTANT  	TPGTOK = 10
	DECLARE INTEGER	CONSTANT  	CTE_IDX_TCF = 1
	DECLARE INTEGER	CONSTANT  	CTE_IDX_TSF = 2
	DECLARE INTEGER	CONSTANT  	CTE_IDX_NOM = 1
	DECLARE INTEGER	CONSTANT  	CTE_IDX_SIS = 2
	DECLARE INTEGER	CONSTANT  	CTE_IDX_SIM = 3
	DECLARE INTEGER	CONSTANT  	CTE_TRN_FRM = 1
	DECLARE INTEGER	CONSTANT  	CTE_TRN_CMN = 2
	DECLARE INTEGER	CONSTANT  	CTE_TRN_CPP = 3
	DECLARE INTEGER	CONSTANT  	CTE_TRN_SPP = 4
	DECLARE INTEGER	CONSTANT  	CTE_TRN_PGM = 5
	DECLARE INTEGER	CONSTANT  	CTE_TRN_SUB = 6
	DECLARE INTEGER	CONSTANT  	CTE_TRN_INS = 7
	DECLARE INTEGER	CONSTANT  	CTE_TRN_INM = 8
	DECLARE INTEGER	CONSTANT  	CTE_TRN_FIN = 9
	DECLARE INTEGER	CONSTANT  	CTE_TRN_FOU = 10
	DECLARE INTEGER	CONSTANT  	CTE_TRN_CMT = 11
	DECLARE INTEGER	CONSTANT  	CTE_TRN_IDX = 12
	DECLARE INTEGER	CONSTANT  	CTE_TRN_CNF = 13
	DECLARE INTEGER	CONSTANT  	MG_0  = 1
	DECLARE INTEGER	CONSTANT  	MG_7  = 2
	DECLARE INTEGER	CONSTANT  	MG_8  = 3
	DECLARE INTEGER	CONSTANT  	MG_12 = 4
	DECLARE INTEGER	CONSTANT  	MG_16 = 5
	DECLARE INTEGER	CONSTANT  	MG_20 = 6
	DECLARE INTEGER	CONSTANT  	MG_24 = 7
	DECLARE INTEGER	CONSTANT  	MG_28 = 8
	DECLARE INTEGER	CONSTANT  	NIV_00 = MG_0
	DECLARE INTEGER	CONSTANT  	NIV_01 = MG_8
	DECLARE INTEGER	CONSTANT  	NIV_03 = MG_12
	DECLARE INTEGER	CONSTANT  	NIV_05 = MG_16
	DECLARE INTEGER	CONSTANT  	NIV_07 = MG_20
	DECLARE INTEGER	CONSTANT  	NIV_09 = MG_24
	DECLARE INTEGER	CONSTANT  	NIV_11 = MG_28
	DECLARE INTEGER	CONSTANT  	TOT_PASOS = 8
	DECLARE INTEGER	CONSTANT  	ZI	  = 1
	DECLARE INTEGER	CONSTANT  	NO	  = 0
	DECLARE INTEGER	CONSTANT  	NEXT_PAGE = 2
	DECLARE INTEGER	CONSTANT  	VALO_FOUT = 60
	DECLARE INTEGER	CONSTANT  	LINE_USED = 1

	DECLARE STRING	  WSS_USN
	DECLARE STRING	  BIP
	DECLARE STRING	  GNS_PATH
	DECLARE STRING	  TPGMATTPFMT          
	DECLARE STRING	  TPGMATNAMEFLDSRV
	DECLARE STRING	  I_B_STR
	DECLARE STRING	  PRI_IF
	DECLARE STRING	  SEG_IF
	DECLARE STRING	  FIO_BUF0
	DECLARE STRING	  C_Q
	DECLARE STRING	  SC_C_Q
	DECLARE STRING	  VALTOKEN
	DECLARE STRING	  SC_VALTOKEN
	DECLARE STRING	  STRTOKEN
	DECLARE STRING	  ULT_SEC
	DECLARE STRING	  ANTERIOR
	DECLARE STRING	  NEW_PAG
	DECLARE STRING	  ANTE
	DECLARE STRING	  GLS_ERR
	DECLARE STRING	  WSS_DLP
	DECLARE STRING	  WSS_DPP
	DECLARE STRING	  WSS_DFI
	DECLARE STRING	  WSS_GENDFO
	DECLARE STRING	  WSS_DSP00
	DECLARE STRING	  WSS_DSP01
	DECLARE STRING	  WSS_DSP04
	DECLARE STRING	  FILE_FMT
	DECLARE STRING	  FILE_MTX
	DECLARE STRING	  FILE_PD1
	DECLARE STRING	  FILE_PD2
	DECLARE STRING	  FILE_PD3
	DECLARE STRING	  FILE_WS1
	DECLARE STRING	  FILE_WS3
	DECLARE STRING	  FILE_PI1
	DECLARE STRING	  FILE_WS2
	DECLARE STRING	  FILE_DFI
	DECLARE STRING	  FILE_DFO
	DECLARE STRING	  FILE_VBC
	DECLARE STRING	  FILE_RN
	DECLARE STRING	  O_L
	DECLARE STRING	  EXTERNO
	DECLARE STRING	  VARI_ABPA
	DECLARE STRING	  VARI_CIPA
	DECLARE STRING	  BUFOUT
	DECLARE STRING	  RPT_GLS_PRY
	DECLARE STRING	  MAP_GLS_CMP
	DECLARE STRING	  RPT_GLS_SRT
	DECLARE STRING	  MTX_GLS_SOP
	DECLARE STRING	  MTX_GLS_AIU
	DECLARE STRING	  MAP_GLS_IDEN
	DECLARE STRING	  RPT_GLS_PAI
	DECLARE STRING	  RPT_GLS_CLI
	DECLARE STRING	  VARI
	DECLARE STRING	  TPGMATTPFRM_CPT_ALF
	DECLARE STRING	  SWICH_CPT_ALF
	DECLARE STRING	  AA_CPT_ALF
	DECLARE STRING	  ABPAPT_CPT_ALF
	DECLARE STRING	  ABPATP_CPT_ALF
	DECLARE STRING	  ABPATX_CPT_ALF
	DECLARE STRING	  ABPAXT_CPT_ALF
	DECLARE STRING	  ANO_CPT_ALF
	DECLARE STRING	  ANTB_CPT_ALF
	DECLARE STRING	  ANTE_CPT_ALF
	DECLARE STRING	  ARCH_IDEN_CPT_ALF
	DECLARE STRING	  ARCH_SPA_CPT_ALF
	DECLARE STRING	  AUX_FNC_CPT_ALF
	DECLARE STRING	  AUX_CMN_CPT_ALF
	DECLARE STRING	  AUX_CNF_CPT_ALF
	DECLARE STRING	  AUX_CPP_CPT_ALF
	DECLARE STRING	  AUX_PGM_CPT_ALF
	DECLARE STRING	  AUX_SPP_CPT_ALF
	DECLARE STRING	  AUX_SUB_CPT_ALF
	DECLARE STRING	  BB_CPT_ALF
	DECLARE STRING	  BUF_CPT_ALF
	DECLARE STRING	  CAM_VAL_CPT_ALF
	DECLARE STRING	  CIPAPT_CPT_ALF
	DECLARE STRING	  CIPATP_CPT_ALF
	DECLARE STRING	  CIPATX_CPT_ALF
	DECLARE STRING	  CIPAXT_CPT_ALF
	DECLARE STRING	  CL_CPT_ALF
	DECLARE STRING	  COD_CTAB_CPT_ALF
	DECLARE STRING	  COD_TABL_CPT_ALF
	DECLARE STRING	  COMAPT_CPT_ALF
	DECLARE STRING	  COMATP_CPT_ALF
	DECLARE STRING	  COMATX_CPT_ALF
	DECLARE STRING	  COMAXT_CPT_ALF
	DECLARE STRING	  CON_NIV_CPT_ALF
	DECLARE STRING	  CORR_FLD_CPT_ALF
	DECLARE STRING	  DER_CPT_ALF
	DECLARE STRING	  DIA_CPT_ALF
	DECLARE STRING	  DPS_IDX_TX_CPT_ALF
	DECLARE STRING	  DSP_IDX_TX_CPT_ALF
	DECLARE STRING	  DSP_IDX_XT_CPT_ALF
	DECLARE STRING	  DT_CPT_ALF
	DECLARE STRING	  ENC_CPT_ALF
	DECLARE STRING	  ENC_PGM_CPT_ALF
	DECLARE STRING	  ESCR_CPT_ALF
	DECLARE STRING	  ES_FTB_CPT_ALF
	DECLARE STRING	  ES_VAL_CPT_ALF
	DECLARE STRING	  EX_CTAB_CPT_ALF
	DECLARE STRING	  EX_TABL_CPT_ALF
	DECLARE STRING	  FINP_CPT_ALF
	DECLARE STRING	  FIRST_CPT_ALF
	DECLARE STRING	  FLD_VBC_CPT_ALF
	DECLARE STRING	  FOUT_CPT_ALF
	DECLARE STRING	  FRS_LRG_XT_CPT_ALF
	DECLARE STRING	  FUNC_CPT_ALF
	DECLARE STRING	  GLS_1_CPT_ALF
	DECLARE STRING	  HORA_CPT_ALF
	DECLARE STRING	  HRS_CPT_ALF
	DECLARE STRING	  IDX_PT_CPT_ALF
	DECLARE STRING	  IDX_TP_CPT_ALF
	DECLARE STRING	  IDX_TX_CPT_ALF
	DECLARE STRING	  IDX_XT_CPT_ALF
	DECLARE STRING	  IZQ_CPT_ALF
	DECLARE STRING	  LL_CPT_ALF
	DECLARE STRING	  LR_CPT_ALF
	DECLARE STRING	  LRG_PT_TX_CPT_ALF
	DECLARE STRING	  LRG_XT_TP_CPT_ALF
	DECLARE STRING	  MAP_GLS_VBC_CPT_ALF
	DECLARE STRING	  MES_CPT_ALF
	DECLARE STRING	  MNT_CPT_ALF
	DECLARE STRING	  MNU_COD_CMND_CPT_ALF        
	DECLARE STRING	  MNU_COD_FRET_CPT_ALF        
	DECLARE STRING	  MNU_COD_IMEN_CPT_ALF        
	DECLARE STRING	  MNU_COD_INST_CPT_ALF        
	DECLARE STRING	  MNU_COD_NEMO_CPT_ALF        
	DECLARE STRING	  MNU_COD_OPCI_CPT_ALF        
	DECLARE STRING	  MNU_COD_TCTL_CPT_ALF        
	DECLARE STRING	  MNU_COD_TFUN_CPT_ALF        
	DECLARE STRING	  MNU_COD_TINF_CPT_ALF        
	DECLARE STRING	  MNU_GLS_FMEN_CPT_ALF        
	DECLARE STRING	  MNU_GLS_FPRO_CPT_ALF        
	DECLARE STRING	  MNU_GLS_LFRM_CPT_ALF        
	DECLARE STRING	  MNU_GLS_NFRM_CPT_ALF        
	DECLARE STRING	  MNU_GLS_PROG_CPT_ALF        
	DECLARE STRING	  MNU_GLS_TRAN_CPT_ALF        
	DECLARE STRING	  MNU_NUM_COLU_CPT_ALF        
	DECLARE STRING	  MNU_NUM_FILA_CPT_ALF        
	DECLARE STRING	  NEX_CPT_ALF                 
	DECLARE STRING	  NOMB_ARCH_CPT_ALF           
	DECLARE STRING	  NUEVE_CPT_ALF               
	DECLARE STRING	  OCCUR1_CPT_ALF              
	DECLARE STRING	  OCCUR2_CPT_ALF              
	DECLARE STRING	  OLD_IDX_CPT_ALF             
	DECLARE STRING	  PUT_HDR_CPT_ALF             
	DECLARE STRING	  PUT_PTHDR_CPT_ALF           
	DECLARE STRING	  REGMNU_CPT_ALF              
	DECLARE STRING	  REGMNU_1_CPT_ALF            
	DECLARE STRING	  REGMNU_2_CPT_ALF            
	DECLARE STRING	  REG_1_CPT_ALF               
	DECLARE STRING	  REG_2_CPT_ALF               
	DECLARE STRING	  REG_TAB_CPT_ALF             
	DECLARE STRING	  RELL_CPT_ALF                
	DECLARE STRING	  REPT_CPT_ALF                
	DECLARE STRING	  RPF_COD_STPP_CPT_ALF        
	DECLARE STRING	  RPF_COD_CCPP_CPT_ALF        
	DECLARE STRING	  RPF_COD_CMND_CPT_ALF        
	DECLARE STRING	  RPF_COD_CONF_CPT_ALF        
	DECLARE STRING	  RPF_COD_CORR_CPT_ALF        
	DECLARE STRING	  RPF_COD_DARC_CPT_ALF        
	DECLARE STRING	  RPF_COD_DATA_CPT_ALF        
	DECLARE STRING	  RPF_COD_DPRO_CPT_ALF        
	DECLARE STRING	  RPF_COD_TREG_CPT_ALF        
	DECLARE STRING	  RPF_COD_UARC_CPT_ALF        
	DECLARE STRING	  RPF_GLS_DAT1_CPT_ALF        
	DECLARE STRING	  RPF_GLS_DAT2_CPT_ALF        
	DECLARE STRING	  RR_CPT_ALF                  
	DECLARE STRING	  SEC_PT_HDR_CPT_ALF          
	DECLARE STRING	  SEGR_CPT_ALF                
	DECLARE STRING	  SEGR_CPL_CPT_ALF            
	DECLARE STRING	  SEGS_CPT_ALF                
	DECLARE STRING	  SEGS_CPL_CPT_ALF            
	DECLARE STRING	  SGTE_CPT_ALF                
	DECLARE STRING	  SIETE_CPT_ALF               
	DECLARE STRING	  SIS_PAN_CPT_ALF             
	DECLARE STRING	  SIS_PAN_ANT_CPT_ALF         
	DECLARE STRING	  TAB_GLS_DESC_CPT_ALF        
	DECLARE STRING	  TIME_STP_CPT_ALF            
	DECLARE STRING	  TPG_GLS_FRM_CPT_ALF         
	DECLARE STRING	  TPG_GLS_FRQ_CPT_ALF         
	DECLARE STRING	  TPG_GLS_SIM_CPT_ALF         
	DECLARE STRING	  TPG_GLS_SIS_CPT_ALF         
	DECLARE STRING	  VAR_AUX_CPT_ALF             
	DECLARE STRING	  VSN_CPT_ALF                 
	DECLARE STRING	  VV_CPT_ALF                  
	DECLARE STRING	  WRI_CPT_ALF                 
	DECLARE STRING	  XX_CPT_ALF                  
	DECLARE STRING	  YY_CPT_ALF                  
	DECLARE STRING	  GLDIRARCH                   

	COM STRING	 		TPG_MAT_TPFRM(100,30)       
	COM STRING	 		TPG_MAT_PTFMT(100,30)       
	COM STRING	 		TPG_MAT_TRN(100,20,15)      
	COM STRING	 		TPG_MAT_TXFMT(100,30)       
	COM STRING	 		TPG_MAT_XTFMT(100,30)       
	COM STRING	 		TPG_MAT_TIP_NUM(30,180)       
	COM STRING	             TPG_MAT_IDT_DO(30,180)       
	COM STRING	 		TPG_MAT_IDT_FLD(30,180)    
 !!!% NOMVAR = "		TPG_MAT_IDT_VBC(30,180)    "
 !!!% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'
	COM STRING	 		TPG_MAT_NAMEFLDSRV(30,17,180)   
	COM STRING	 		TPG_MAT_NUMFLDSRV(30,17,180)    
	DECLARE STRING	 		TPG_MAT_HST_ALF(30,3)      
	DECLARE STRING	 		TPG_MAT_SRV_ALF(30,30)     
	DECLARE STRING	 		TPG_MAT_TRN_PGM(200,20)    
	DECLARE STRING	 		TPG_VEC_REQ(100)           
	DECLARE STRING	 		TPG_VEC_DEF_REQ(80)        
	DECLARE STRING	 		TAB_GLS_DESC(10)           
	DECLARE STRING	 		TAB_DO_DESC(10)           
	DECLARE STRING	 		TPG_MAT_PTFRM(100,30)       
	DECLARE STRING	 		TPG_MAT_PTPIG(100,30)       
	DECLARE STRING	 		TPG_MAT_XTPIG(100,30)       
	DECLARE STRING	 		TPG_MAT_PTSPR(100,30)       
	DECLARE STRING	 		TPG_MAT_XTSPR(100,30)       
	DECLARE STRING	 		TPG_MAT_TXFRM(100,30)       
	DECLARE STRING	 		TPG_MAT_XTFRM(100,30)       
	DECLARE STRING	 		TPG_MAT_TPFMT(100,30)       
	DECLARE STRING	 		V_MES(12,2)                
	DECLARE STRING	 		TPG_VEC_SIST(30)           
	DECLARE STRING	 		TPG_MAT_NAMEFLDHST(30,180)   
	DECLARE STRING	 		TPG_MAT_NUMFLDHST(30,180)    
	DECLARE STRING	 		V_M(9)	            
	DECLARE STRING	 		NIV_PIC(9)          
	DECLARE STRING	 		NIV_SEP(14)	    
	DECLARE STRING	 		TPG_MAT_IDENFLDHST(30,180)   


200
 !!!===========================================
 !!! DECLARACION DE FUNCIONES PRINT A PANTALLA=
 !!!                 (INI)                  =
 !!!===========================================
   DEF STRING FNC_PRINT(STRING MENS)
	PRINT MENS
   END DEF

 !!!===========================================
 !!! DECLARACION DE FUNCIONES PRINT A PANTALLA=
 !!!                 (FIN)                  =
 !!!===========================================

      DEF INTEGER FNC_SYSINTEGER(LONG  VALOR)
		FNC_SYSINTEGER = INTEGER(VALOR)
      END DEF
      DEF STRING FNC_SYS_LIB_GET_SYMBOL(STRING GET_SYMBOL)
          CALL LIB$GET_SYMBOL(GET_SYMBOL,AUX_FNC_CPT_ALF)
          FNC_SYS_LIB_GET_SYMBOL = AUX_FNC_CPT_ALF
      END DEF

      DEF INTEGER FNC_SYSPOS(STRING LINEA,STRING ARGBUSQ,INTEGER POSINIC)
          FNC_SYSPOS = POS(LINEA,ARGBUSQ,POSINIC)
      END DEF


      DEF STRING FNC_SYSFORMAT(INTEGER VALFMT,STRING TOTFMT)

		IF TOTFMT = "#" THEN
			FNC_SYSFORMAT = FORMAT$(VALFMT,"#")
		ELSE
		IF TOTFMT = "##" THEN
			FNC_SYSFORMAT = FORMAT$(VALFMT,"##")
		ELSE
		IF TOTFMT = "###" THEN
			FNC_SYSFORMAT = FORMAT$(VALFMT,"###")
		ELSE
		IF TOTFMT = "####" THEN
			FNC_SYSFORMAT = FORMAT$(VALFMT,"####")
		ELSE
		IF TOTFMT = "#####" THEN
			FNC_SYSFORMAT = FORMAT$(VALFMT,"#####")
		ELSE
		IF TOTFMT = "######" THEN
			FNC_SYSFORMAT = FORMAT$(VALFMT,"######")
		END IF
		END IF
		END IF
		END IF
		END IF
		END IF
   END DEF

   DEF STRING FNC_SYSCHR(INTEGER CHA)
	FNC_SYSCHR = CHR$(CHA)
   END DEF

   DEF STRING EMIT_BIP
	PRINT FNC_SYSCHR(7)
   END DEF

   DEF STRING GET_COM1
	GET_COM1 = FNC_SYSCHR(39)
   END DEF

   DEF STRING GET_COM2
	GET_COM2 = FNC_SYSCHR(34)
   END DEF

   DEF STRING FNC_SYSRIGHT(STRING DER,INTEGER DESDE)
	FNC_SYSRIGHT = RIGHT$(DER,DESDE)
   END DEF

   DEF STRING FNC_SYSLEFT(STRING IZQ,INTEGER HASTA)
	FNC_SYSLEFT = LEFT$(IZQ,HASTA)
   END DEF

   DEF STRING FNC_SYSSTR(INTEGER NUME)
	FNC_SYSSTR = STR$(NUME)
   END DEF

   DEF STRING FNC_SYSMID(STRING CADENA,INTEGER DESDE,INTEGER CUANTOS)
	FNC_SYSMID = MID$(CADENA,DESDE,CUANTOS)
   END DEF

   DEF INTEGER FNC_SYSLEN(STRING CADENA)
	FNC_SYSLEN = LEN(CADENA)
   END DEF

   DEF STRING FNC_SYSTIME(INTEGER PARAM)
	FNC_SYSTIME = TIME$(PARAM)
   END DEF

   DEF STRING FNC_SYSDATE(INTEGER PARAM)
	FNC_SYSDATE = DATE$(PARAM)
   END DEF

   DEF STRING FNC_SYSSTRING(INTEGER PARAM1,INTEGER PARAM2)
	FNC_SYSSTRING = STRING$(PARAM1,PARAM2)
   END DEF

   DEF STRING FNC_SYSEDIT(STRING PARAM1,INTEGER PARAM2)
	FNC_SYSEDIT = EDIT$(PARAM1,PARAM2)
   END DEF


   DEF STRING GENRPTREP (STRING ESTR_INGS,STRING CRTR_ORIG,STRING CRTR_REEM)
        DECLARE STRING VAR_AUXI_CPT_ALF

 !!!  REEMPLAZA EN ESTR_INGS EL CRTR_ORIG(CARACTER ORIGINAL)
 !!!  POR CRTR_REEM(CARATER(ES) DE REEMPLAZO)

 !!!  EJEMPLO DE LLAMADA DE ESTA SUBRUTINA:
 !!!      PICT_FILD = 999999,999
 !!!     CALL GENRPTREP(PICT_FILD,",","V")
 !!!  ESTA SUBRUTINA DEVUELVE EN PICT_FILD EL VALOR 999999V999

   LARGO_STR_CPT_NUM = FNC_SYSLEN(ESTR_INGS)
   VAR_AUXI_CPT_ALF = ""
   FOR I_CPT_NUM = 1 TO LARGO_STR_CPT_NUM
      IF FNC_SYSMID(ESTR_INGS,I_CPT_NUM,1) = CRTR_ORIG THEN
	 VAR_AUXI_CPT_ALF = VAR_AUXI_CPT_ALF + CRTR_REEM
      ELSE
	 VAR_AUXI_CPT_ALF = VAR_AUXI_CPT_ALF + FNC_SYSMID(ESTR_INGS,I_CPT_NUM,1)
      END IF
   NEXT I_CPT_NUM
   ESTR_INGS = VAR_AUXI_CPT_ALF
   GENRPTREP = VAR_AUXI_CPT_ALF
   END DEF

   DEF STRING GENMTXL72 (STRING P1,STRING P2,INTEGER P3)

 !!!  ENTREGA UNA LINA COBOL DE LARGO 72 CARACTERES
 !!!  INCORPORANDO UN RELLENO ENTRE LOS DOS
 !!!  PARAMETROS INGRESADOS DE INPUT
 !!!  LA RESPUESTA LA ENTREGA EN EL PRIMER PARAMETRO
	DECLARE STRING RELL2_CPT_ALF 
	DECLARE STRING V_M2(9)
	DECLARE INTEGER CONSTANT MG_0 = 1
	DECLARE INTEGER CONSTANT MG_7  = 2
	DECLARE INTEGER CONSTANT MG_8  = 3
	DECLARE INTEGER CONSTANT MG_12 = 4
	DECLARE INTEGER CONSTANT MG_16 = 5
	DECLARE INTEGER CONSTANT MG_20 = 6
	DECLARE INTEGER CONSTANT MG_24 = 7
	DECLARE INTEGER CONSTANT MG_28 = 8
        V_M2(MG_0)  = ""
        V_M2(MG_7)  = "      *"
        V_M2(MG_8)  = "       "
        V_M2(MG_12) = "           "
        V_M2(MG_16) = "               "
        V_M2(MG_20) = "                   "
        V_M2(MG_24) = "                       "
        V_M2(MG_28) = "                           "
	L_REG_CPT_NUM = FNC_SYSLEN(V_M2(P3)) + FNC_SYSLEN(P1) + FNC_SYSLEN(P2)
	RELL2_CPT_ALF = ""
	IF L_REG_CPT_NUM < 72 THEN
		L_RELL2_CPT_NUM = 72 - L_REG_CPT_NUM
		FOR RELL2_CPT_NUM = 1 TO L_RELL2_CPT_NUM
			RELL2_CPT_ALF = RELL2_CPT_ALF + " "
		NEXT RELL2_CPT_NUM
	END IF
	GENMTXL72 = P1 + RELL2_CPT_ALF + P2
   END DEF

   DEF STRING NUM5 (STRING P1)
	IF FNC_SYSLEN(P1) = 1 THEN
		P1 = "0000" + P1
	ELSE
	IF FNC_SYSLEN(P1) = 2 THEN
		P1 = "000" + P1
	ELSE
	IF FNC_SYSLEN(P1) = 3 THEN
		P1 = "00" + P1
	ELSE
	IF FNC_SYSLEN(P1) = 4 THEN
		P1 = "0" + P1
	END IF
	END IF
	END IF
	END IF
	NUM5 = P1
   END DEF
  DEF STRING COMPACT(STRING LIN_LEIDA)
	 LINEA$ = LIN_LEIDA
	 LIN_ESCR$ = ""
	 LARGO% = 0
	 SICLO% = 0
	 BLANCOS% = 0
	 LIN_ESCR$ = ""
	 LARGO% = FNC_SYSLEN(LINEA$)
	 WHILE SICLO% <= LARGO% 
 !!!		 PRINT " SICLO%  " ; SICLO% 
 !!!		 PRINT " LARGO%  " ; LARGO%
		 IF FNC_SYSLEN(LINEA$) > 2 THEN
	         	 RESTO$ = FNC_SYSRIGHT(LINEA$,2)
		 ELSE
	         	 RESTO$ = FNC_SYSRIGHT(LINEA$,1)
		 END IF
	        ANAL_BLCO$ = FNC_SYSLEFT(LINEA$,1)
		 IF ANAL_BLCO$ = " " THEN
			BLANCOS% = BLANCOS% + 1
		 ELSE
			IF BLANCOS% <> 0 THEN
				IF BLANCOS% > 3 THEN
					NUM_BLAN$ = FNC_SYSSTR(BLANCOS%)
					LIN_ESCR$ = LIN_ESCR$ + "@" + NUM_BLAN$ + "@" + ANAL_BLCO$
					BLANCOS% = 0
				ELSE
 					FOR BBI% = 0 TO BLANCOS%
						LIN_ESCR$ = LIN_ESCR$ + " "
 					NEXT BBI%
					BLANCOS% = 0
					LIN_ESCR$ = LIN_ESCR$ + ANAL_BLCO$
				END IF
			ELSE
				LIN_ESCR$ = LIN_ESCR$ + ANAL_BLCO$
			END IF
		 END IF
		 LINEA$ = RESTO$
		 SICLO% = SICLO% + 1
	 NEXT
	 COMPACT = "      * " + LIN_ESCR$ + LINEA$
   END DEF

 !!!===========================================
 !!! DECLARACION DE FUNCIONES I/O             =
 !!!                 (INI)                  =
 !!!===========================================



   DEF INTEGER FIO_WS1_CLO

        ON ERROR GO TO ERR_FIO_WS1_CLO

        CLOSE #C_FILE_WS1

        GO TO OK_FIO_WS1_CLO

 ERR_FIO_WS1_CLO:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_WS1 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_WS1 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_WS1 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_WS1 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_WS1_CLO:

   END DEF


   DEF INTEGER FIO_WS1_OUT

        ON ERROR GO TO ERR_FIO_WS1_OUT

        OPEN FILE_WS1 FOR OUTPUT AS FILE #C_FILE_WS1, ORGANIZATION SEQUENTIAL VARIABLE , RECORDSIZE 255, RECORDTYPE ANY

        GO TO OK_FIO_WS1_OUT
 ERR_FIO_WS1_OUT:
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_WS1 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_WS1 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_WS1 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_WS1 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_WS1_OUT:

   END DEF


   DEF INTEGER FIO_WS1_PUT(INTEGER FIO_STAT, STRING BUF0)

        ON ERROR GO TO ERR_FIO_WS1_PUT

        PRINT #C_FILE_WS1, BUF0

        GO TO OK_FIO_WS1_PUT
 ERR_FIO_WS1_PUT:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_WS1 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_WS1 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_WS1 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_WS1 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        FIO_STAT = 23

        RESUME

 OK_FIO_WS1_PUT:

        FIO_STAT = 0

   END DEF



   DEF INTEGER FIO_WS2_CLO

        ON ERROR GO TO ERR_FIO_WS2_CLO

        CLOSE #C_FILE_WS2

        GO TO OK_FIO_WS2_CLO

 ERR_FIO_WS2_CLO:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_WS2 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_WS2 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_WS2 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_WS2 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_WS2_CLO:

   END DEF


   DEF INTEGER FIO_WS2_OUT

        ON ERROR GO TO ERR_FIO_WS2_OUT

        OPEN FILE_WS2 FOR OUTPUT AS FILE #C_FILE_WS2, ORGANIZATION SEQUENTIAL VARIABLE , RECORDSIZE 255, RECORDTYPE ANY

        GO TO OK_FIO_WS2_OUT
 ERR_FIO_WS2_OUT:
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_WS2 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_WS2 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_WS2 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_WS2 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_WS2_OUT:

   END DEF


   DEF INTEGER FIO_WS2_PUT(INTEGER FIO_STAT, STRING BUF0)

        ON ERROR GO TO ERR_FIO_WS2_PUT

        PRINT #C_FILE_WS2, BUF0

        GO TO OK_FIO_WS2_PUT
 ERR_FIO_WS2_PUT:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_WS2 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_WS2 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_WS2 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_WS2 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        FIO_STAT = 23

        RESUME

 OK_FIO_WS2_PUT:

        FIO_STAT = 0

   END DEF



   DEF INTEGER FIO_WS3_CLO

        ON ERROR GO TO ERR_FIO_WS3_CLO

        CLOSE #C_FILE_WS3

        GO TO OK_FIO_WS3_CLO

 ERR_FIO_WS3_CLO:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_WS3 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_WS3 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_WS3 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_WS3 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_WS3_CLO:

   END DEF


   DEF INTEGER FIO_WS3_OUT

        ON ERROR GO TO ERR_FIO_WS3_OUT

        OPEN FILE_WS3 FOR OUTPUT AS FILE #C_FILE_WS3, ORGANIZATION SEQUENTIAL VARIABLE , RECORDSIZE 255, RECORDTYPE ANY

        GO TO OK_FIO_WS3_OUT
 ERR_FIO_WS3_OUT:
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_WS3 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_WS3 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_WS3 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_WS3 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_WS3_OUT:

   END DEF


   DEF INTEGER FIO_WS3_PUT(INTEGER FIO_STAT, STRING BUF0)

        ON ERROR GO TO ERR_FIO_WS3_PUT

        PRINT #C_FILE_WS3, BUF0

        GO TO OK_FIO_WS3_PUT
 ERR_FIO_WS3_PUT:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_WS3 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_WS3 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_WS3 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_WS3 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        FIO_STAT = 23

        RESUME

 OK_FIO_WS3_PUT:

        FIO_STAT = 0

   END DEF



   DEF INTEGER FIO_PD1_CLO

        ON ERROR GO TO ERR_FIO_PD1_CLO

        CLOSE #C_FILE_PD1

        GO TO OK_FIO_PD1_CLO

 ERR_FIO_PD1_CLO:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_PD1 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_PD1 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_PD1 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_PD1 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_PD1_CLO:

   END DEF


   DEF INTEGER FIO_PD1_OUT

        ON ERROR GO TO ERR_FIO_PD1_OUT

        OPEN FILE_PD1 FOR OUTPUT AS FILE #C_FILE_PD1, ORGANIZATION SEQUENTIAL VARIABLE , RECORDSIZE 255, RECORDTYPE ANY

        GO TO OK_FIO_PD1_OUT
 ERR_FIO_PD1_OUT:
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_PD1 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_PD1 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_PD1 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_PD1 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_PD1_OUT:

   END DEF


   DEF INTEGER FIO_PD1_PUT(INTEGER FIO_STAT, STRING BUF0)

        ON ERROR GO TO ERR_FIO_PD1_PUT

        PRINT #C_FILE_PD1, BUF0

        GO TO OK_FIO_PD1_PUT
 ERR_FIO_PD1_PUT:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_PD1 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_PD1 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_PD1 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_PD1 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        FIO_STAT = 23

        RESUME

 OK_FIO_PD1_PUT:

        FIO_STAT = 0

   END DEF



   DEF INTEGER FIO_PD2_CLO

        ON ERROR GO TO ERR_FIO_PD2_CLO

        CLOSE #C_FILE_PD2

        GO TO OK_FIO_PD2_CLO

 ERR_FIO_PD2_CLO:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_PD2 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_PD2 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_PD2 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_PD2 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_PD2_CLO:

   END DEF


   DEF INTEGER FIO_PD2_OUT

        ON ERROR GO TO ERR_FIO_PD2_OUT

        OPEN FILE_PD2 FOR OUTPUT AS FILE #C_FILE_PD2, ORGANIZATION SEQUENTIAL VARIABLE , RECORDSIZE 255, RECORDTYPE ANY

        GO TO OK_FIO_PD2_OUT
 ERR_FIO_PD2_OUT:
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_PD2 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_PD2 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_PD2 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_PD2 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_PD2_OUT:

   END DEF


   DEF INTEGER FIO_PD2_PUT(INTEGER FIO_STAT, STRING BUF0)

        ON ERROR GO TO ERR_FIO_PD2_PUT

        PRINT #C_FILE_PD2, BUF0

        GO TO OK_FIO_PD2_PUT
 ERR_FIO_PD2_PUT:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_PD2 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_PD2 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_PD2 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_PD2 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        FIO_STAT = 23

        RESUME

 OK_FIO_PD2_PUT:

        FIO_STAT = 0

   END DEF



   DEF INTEGER FIO_PD3_CLO

        ON ERROR GO TO ERR_FIO_PD3_CLO

        CLOSE #C_FILE_PD3

        GO TO OK_FIO_PD3_CLO

 ERR_FIO_PD3_CLO:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_PD3 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_PD3 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_PD3 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_PD3 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_PD3_CLO:

   END DEF


   DEF INTEGER FIO_PD3_OUT

        ON ERROR GO TO ERR_FIO_PD3_OUT

        OPEN FILE_PD3 FOR OUTPUT AS FILE #C_FILE_PD3, ORGANIZATION SEQUENTIAL VARIABLE , RECORDSIZE 255, RECORDTYPE ANY

        GO TO OK_FIO_PD3_OUT
 ERR_FIO_PD3_OUT:
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_PD3 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_PD3 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_PD3 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_PD3 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_PD3_OUT:

   END DEF


   DEF INTEGER FIO_PD3_PUT(INTEGER FIO_STAT, STRING BUF0)

        ON ERROR GO TO ERR_FIO_PD3_PUT

        PRINT #C_FILE_PD3, BUF0

        GO TO OK_FIO_PD3_PUT
 ERR_FIO_PD3_PUT:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_PD3 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_PD3 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_PD3 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_PD3 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        FIO_STAT = 23

        RESUME

 OK_FIO_PD3_PUT:

        FIO_STAT = 0

   END DEF



   DEF INTEGER FIO_PI1_CLO

        ON ERROR GO TO ERR_FIO_PI1_CLO

        CLOSE #C_FILE_PI1

        GO TO OK_FIO_PI1_CLO

 ERR_FIO_PI1_CLO:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_PI1 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_PI1 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_PI1 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_PI1 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_PI1_CLO:

   END DEF


   DEF INTEGER FIO_PI1_OUT

        ON ERROR GO TO ERR_FIO_PI1_OUT

        OPEN FILE_PI1 FOR OUTPUT AS FILE #C_FILE_PI1, ORGANIZATION SEQUENTIAL VARIABLE , RECORDSIZE 255, RECORDTYPE ANY

        GO TO OK_FIO_PI1_OUT
 ERR_FIO_PI1_OUT:
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_PI1 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_PI1 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_PI1 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_PI1 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_PI1_OUT:

   END DEF

   DEF INTEGER FIO_PI1_PUT(INTEGER FIO_STAT,STRING BUF0)

        ON ERROR GO TO ERR_FIO_PI1_PUT

        TXT_MOV$ = "           MOVE"
        PRINT #C_FILE_PI1,TXT_MOV$
        BUF0 = "          '" + BUF0 + "'"
        PRINT #C_FILE_PI1,BUF0
        TXT_MOV$ = "           TO WSS-COD-REGI."
        PRINT #C_FILE_PI1,TXT_MOV$
        TXT_MOV$ = "           PERFORM SET-REGI."
        PRINT #C_FILE_PI1,TXT_MOV$

        GO TO OK_FIO_PI1_PUT
 ERR_FIO_PI1_PUT:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_PI1 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_PI1 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_PI1 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_PI1 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        FIO_STAT = 23

        RESUME

 OK_FIO_PI1_PUT:

        FIO_STAT = 0

   END DEF

   DEF INTEGER FIO_MTX_CLO

        ON ERROR GO TO ERR_FIO_MTX_CLO

        CLOSE #C_FILE_MTX

        GO TO OK_FIO_MTX_CLO

 ERR_FIO_MTX_CLO:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_MTX + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_MTX + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_MTX + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_MTX + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_MTX_CLO:

   END DEF


   DEF INTEGER FIO_MTX_INP

        ON ERROR GO TO ERR_FIO_MTX_INP

        OPEN FILE_MTX FOR INPUT AS FILE #C_FILE_MTX ,RECORDSIZE 255,  ORGANIZATION SEQUENTIAL VARIABLE, RECORDTYPE ANY

        GO TO OK_FIO_MTX_INP

 ERR_FIO_MTX_INP:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_MTX + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_MTX + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_MTX + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_MTX + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_MTX_INP:

   END DEF

   DEF STRING FIO_MTX_GETNXT

        ON ERROR GO TO ERR_FIO_MTX_GETNXT

        GET #C_FILE_MTX
        FIO_RLEN = RECOUNT
        MOVE FROM #C_FILE_MTX,FIO_BUF0 = FIO_RLEN

        FIO_MTX_GETNXT = FIO_BUF0

 !!!        PASS$ = COMPACT(FIO_BUF0)
 !!!	FIO_ACCI = FIO_FMT_PUT(FIO_STAT,PASS$)

        GO TO OK_FIO_MTX_GETNXT

 ERR_FIO_MTX_GETNXT:

        IF ERR = 11 THEN
                FIO_STAT = 10
        ELSE
                BUFOUT = FNC_PRINT(FILE_MTX + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_MTX + "MENSAJE : " + ERT$(ERR) )
        END IF

        RESUME 500

 OK_FIO_MTX_GETNXT:
        FIO_STAT = 0
500
   END DEF





   DEF INTEGER FIO_MTX_OUT

        ON ERROR GO TO ERR_FIO_MTX_OUT

        OPEN FILE_MTX FOR OUTPUT AS FILE #C_FILE_MTX, ORGANIZATION SEQUENTIAL VARIABLE , RECORDSIZE 255, RECORDTYPE ANY

        GO TO OK_FIO_MTX_OUT
 ERR_FIO_MTX_OUT:
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_MTX + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_MTX + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_MTX + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_MTX + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_MTX_OUT:

   END DEF


   DEF INTEGER FIO_MTX_PUT(INTEGER FIO_STAT, STRING BUF0)

        ON ERROR GO TO ERR_FIO_MTX_PUT

        PRINT #C_FILE_MTX, BUF0

        GO TO OK_FIO_MTX_PUT
 ERR_FIO_MTX_PUT:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_MTX + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_MTX + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_MTX + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_MTX + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        FIO_STAT = 23

        RESUME

 OK_FIO_MTX_PUT:

        FIO_STAT = 0

   END DEF


    DEF STRING ESCR_PD1 (INTEGER MARGEN,STRING BUFOUT)
      REG_1_CPT_ALF = ""
      REG_2_CPT_ALF = ""
      BUFOUT = V_M(MARGEN) + BUFOUT
      IF FNC_SYSLEN(BUFOUT) > 72 THEN
         GEN_I_CPT_NUM = 1
         GEN_J_CPT_NUM = 3
         WHILE FNC_SYSMID(BUFOUT,GEN_I_CPT_NUM,4) <> " TO " AND GEN_I_CPT_NUM < FNC_SYSLEN(BUFOUT)
                      GEN_I_CPT_NUM = GEN_I_CPT_NUM + 1
         NEXT
         IF GEN_I_CPT_NUM > 72 THEN
            GEN_I_CPT_NUM = 71
                GEN_J_CPT_NUM = 0
                WHILE FNC_SYSMID(BUFOUT,GEN_I_CPT_NUM,1) <> " "
                    GEN_I_CPT_NUM = GEN_I_CPT_NUM - 1
                NEXT
          END IF
          REG_1_CPT_ALF = FNC_SYSLEFT(BUFOUT,GEN_I_CPT_NUM + GEN_J_CPT_NUM)
          REG_2_CPT_ALF = V_M(MG_16) + " " + FNC_SYSRIGHT(BUFOUT,GEN_I_CPT_NUM + 1 + GEN_J_CPT_NUM)
      ELSE
          REG_1_CPT_ALF = BUFOUT
      END IF

      REG_1_CPT_ALF = FNC_SYSEDIT(REG_1_CPT_ALF,128)
      FIO_ACCI = FIO_PD1_PUT(FIO_STAT,REG_1_CPT_ALF)
      IF REG_2_CPT_ALF > "" THEN
         REG_2_CPT_ALF = FNC_SYSEDIT(REG_2_CPT_ALF,128)
         FIO_ACCI = FIO_PD1_PUT(FIO_STAT,REG_2_CPT_ALF)
      END IF
    END DEF

    DEF STRING ESCR_PD2 (INTEGER MARGEN,STRING BUFOUT)
      REG_1_CPT_ALF = ""
      REG_2_CPT_ALF = ""
      BUFOUT = V_M(MARGEN) + BUFOUT
      IF FNC_SYSLEN(BUFOUT) > 72 THEN
         GEN_I_CPT_NUM = 1
         GEN_J_CPT_NUM = 3
         WHILE FNC_SYSMID(BUFOUT,GEN_I_CPT_NUM,4) <> " TO " AND GEN_I_CPT_NUM < FNC_SYSLEN(BUFOUT)
               GEN_I_CPT_NUM = GEN_I_CPT_NUM + 1
         NEXT         
         IF GEN_I_CPT_NUM > 72 THEN
            GEN_I_CPT_NUM = 71
            GEN_J_CPT_NUM = 0
            WHILE FNC_SYSMID(BUFOUT,GEN_I_CPT_NUM,1) <> " "
                  GEN_I_CPT_NUM = GEN_I_CPT_NUM - 1
            NEXT
         END IF
         REG_1_CPT_ALF = FNC_SYSLEFT(BUFOUT,GEN_I_CPT_NUM + GEN_J_CPT_NUM)
         REG_2_CPT_ALF = V_M(MG_16) + " " + FNC_SYSRIGHT(BUFOUT,GEN_I_CPT_NUM + 1 + GEN_J_CPT_NUM)
      ELSE
         REG_1_CPT_ALF = BUFOUT
      END IF

      REG_1_CPT_ALF = FNC_SYSEDIT(REG_1_CPT_ALF,128)
      FIO_ACCI = FIO_PD2_PUT(FIO_STAT,REG_1_CPT_ALF)
      IF REG_2_CPT_ALF > "" THEN
         REG_2_CPT_ALF = FNC_SYSEDIT(REG_2_CPT_ALF,128)
         FIO_ACCI = FIO_PD2_PUT(FIO_STAT,REG_2_CPT_ALF)
      END IF
    END DEF

    DEF STRING ESCR_PD3 (INTEGER MARGEN,STRING BUFOUT)
      REG_1_CPT_ALF = ""
      REG_2_CPT_ALF = ""
      BUFOUT = V_M(MARGEN) + BUFOUT
      IF FNC_SYSLEN(BUFOUT) > 72 THEN
         GEN_I_CPT_NUM = 1
         GEN_J_CPT_NUM = 3
         WHILE FNC_SYSMID(BUFOUT,GEN_I_CPT_NUM,4) <> " TO " AND GEN_I_CPT_NUM < FNC_SYSLEN(BUFOUT)
              GEN_I_CPT_NUM = GEN_I_CPT_NUM + 1
         NEXT
         IF GEN_I_CPT_NUM > 72 THEN
            GEN_I_CPT_NUM = 71
            GEN_J_CPT_NUM = 0
            WHILE FNC_SYSMID(BUFOUT,GEN_I_CPT_NUM,1) <> " "
               GEN_I_CPT_NUM = GEN_I_CPT_NUM - 1
            NEXT
         END IF
         REG_1_CPT_ALF = FNC_SYSLEFT(BUFOUT,GEN_I_CPT_NUM + GEN_J_CPT_NUM)
         REG_2_CPT_ALF = V_M(MG_16) + " " + FNC_SYSRIGHT(BUFOUT,GEN_I_CPT_NUM + 1 + GEN_J_CPT_NUM)
      ELSE
         REG_1_CPT_ALF = BUFOUT
      END IF

      REG_1_CPT_ALF = FNC_SYSEDIT(REG_1_CPT_ALF,128)
      FIO_ACCI = FIO_PD3_PUT(FIO_STAT,REG_1_CPT_ALF)
      IF REG_2_CPT_ALF > "" THEN
         REG_2_CPT_ALF = FNC_SYSEDIT(REG_2_CPT_ALF,128)
         FIO_ACCI = FIO_PD3_PUT(FIO_STAT,REG_2_CPT_ALF)
      END IF
    END DEF

    DEF STRING ESCR_WS1 (INTEGER MARGEN,STRING BUFOUT)
      IF FNC_SYSLEN(BUFOUT) > 0 THEN
         LL_CPT_ALF = FNC_SYSLEFT(BUFOUT,1)
         IF LL_CPT_ALF = "P" THEN
            RR_CPT_ALF = FNC_SYSRIGHT(BUFOUT,7)
            BUFOUT = "      " + RR_CPT_ALF
         END IF
      END IF
      FIO_ACCI = FIO_WS1_PUT(FIO_STAT,V_M(MARGEN) + BUFOUT)
    END DEF

    DEF STRING ESCR_WS2 (INTEGER MARGEN,STRING BUFOUT)
      IF FNC_SYSLEN(BUFOUT) > 0 THEN
         LL_CPT_ALF = FNC_SYSLEFT(BUFOUT,1)
         IF LL_CPT_ALF = "P" THEN
            RR_CPT_ALF = FNC_SYSRIGHT(BUFOUT,7)
            BUFOUT = "      " + RR_CPT_ALF
         END IF
       END IF
       FIO_ACCI = FIO_WS2_PUT(FIO_STAT,V_M(MARGEN) + BUFOUT)
    END DEF

    DEF STRING ESCR_WS3 (INTEGER MARGEN,STRING BUFOUT)
       IF FNC_SYSLEN(BUFOUT) > 0 THEN
          LL_CPT_ALF = FNC_SYSLEFT(BUFOUT,1)
          IF LL_CPT_ALF = "P" THEN
             RR_CPT_ALF = FNC_SYSRIGHT(BUFOUT,7)
             BUFOUT = "      " + RR_CPT_ALF
          END IF
       END IF
       FIO_ACCI = FIO_WS3_PUT(FIO_STAT,V_M(MARGEN) + BUFOUT)
    END DEF

    DEF STRING ESCR_PI1 (INTEGER MARGEN,STRING BUFOUT)
      FIO_ACCI = FIO_PI1_PUT(FIO_STAT,V_M(MARGEN) + BUFOUT)
    END DEF

   DEF INTEGER AGR_FTB_VAL
	    NOMB_ARCH_CPT_ALF = FNC_SYSMID(VALTOKEN,5,3)
	    ES_VAL_CPT_ALF = "NO"
	    IF NOMB_ARCH_CPT_ALF = "VAL" THEN
		ES_VAL_CPT_ALF = "SI"
		 IZQ_CPT_ALF = FNC_SYSLEFT(VALTOKEN,4)
		 DER_CPT_ALF = FNC_SYSRIGHT(VALTOKEN,5)
		CAM_VAL_CPT_ALF = IZQ_CPT_ALF + "FTB-" + DER_CPT_ALF
	     END IF
    END DEF

    DEF INTEGER NEXTTOKEN
	IF TOKEN = ETXTOK THEN
		NEXTTOKEN = ETXTOK
		GO TO LABE_ASIG
	END IF
	P_P = P_Q 
 LABE_SIGA:
	WHILE (FNC_SYSMID(I_B_STR,P_P,1) = " " OR FNC_SYSMID(I_B_STR,P_P,1) = "	") AND 	P_P <= SZ_I_B
		P_P = P_P + 1
	NEXT
	P_Q = P_P 
	IF P_P > SZ_I_B OR I_B_STR = "" OR FNC_SYSMID(I_B_STR,P_P,1) = "!" THEN
		TPG_TOT_LEI = TPG_TOT_LEI + 1
  		I_B_STR = FIO_MTX_GETNXT
		SZ_I_B = FIO_RLEN
		IF FIO_STAT  <> FIO_STAT_OKS THEN
	                NEXTTOKEN = ETXTOK
		        GO TO LABE_ASIG
		END IF
		P_P  = 1
		P_Q  = 1
		IF WSS_DLP = "S" THEN
			BUFOUT = FNC_PRINT("PROC REG" + FNC_SYSSTR(TPG_TOT_LEI))
		END IF
		GO TO LABE_SIGA
	END IF
	C_Q = FNC_SYSMID(I_B_STR,P_Q,1)
	IF (C_Q >= "A" AND C_Q <= "Z") OR (C_Q >= "A" AND C_Q <= "Z") THEN
		 SWICH_CPT_ALF = "S"
		 WHILE (SWICH_CPT_ALF = "S")
			IF (FNC_SYSMID(I_B_STR,P_P,1) >= "A" AND FNC_SYSMID(I_B_STR,P_P,1) <= "Z")  THEN
					    P_P = P_P + 1
			ELSE
			IF (FNC_SYSMID(I_B_STR,P_P,1)  = "-")   THEN
					    P_P = P_P + 1
			ELSE
			IF (FNC_SYSMID(I_B_STR,P_P,1) >= "A" AND  FNC_SYSMID(I_B_STR,P_P,1) <= "Z")   THEN
					    P_P = P_P + 1
			ELSE
			IF (FNC_SYSMID(I_B_STR,P_P,1) >= "0" AND FNC_SYSMID(I_B_STR,P_P,1) <= "9")   THEN
					    P_P = P_P + 1
			ELSE
				 SWICH_CPT_ALF = "N"
			END IF
			END IF
			END IF
			END IF
	         NEXT

		 SZTOKEN = P_P - P_Q
		 NEXTTOKEN = IDNTOK
		    VALTOKEN = FNC_SYSMID(I_B_STR,P_Q,SZTOKEN)
	ELSE
	IF C_Q >= "0" AND C_Q <= "9" THEN
		  WHILE FNC_SYSMID(I_B_STR,P_P,1) >= "0" AND FNC_SYSMID(I_B_STR,P_P,1) <= "9"
			     P_P = P_P + 1
	          NEXT
		  SZTOKEN = P_P - P_Q
		  NEXTTOKEN = NUMTOK
		  VALTOKEN = FNC_SYSMID(I_B_STR,P_Q,SZTOKEN)
		  NUMTOKEN  = VAL(VALTOKEN)
	ELSE
  	IF C_Q = GET_COM2 OR C_Q = "'" THEN
		P_P = P_P + 1
		WHILE FNC_SYSMID(I_B_STR,P_P,1) <> C_Q
			P_P = P_P + 1
	        NEXT
		SZTOKEN = P_P - (P_Q + 1)
		P_P = P_P + 1
		NEXTTOKEN = STRTOK
		STRTOKEN = FNC_SYSMID(I_B_STR,P_Q + 1,SZTOKEN)
		VALTOKEN = C_Q + STRTOKEN + C_Q
	ELSE
		IF C_Q = "$"  AND FNC_SYSMID(I_B_STR,P_P + 1,1) = "_" THEN
			   P_P = P_P + 2
			 SWICH_CPT_ALF = "S" 
			 WHILE (SWICH_CPT_ALF = "S")
				IF (FNC_SYSMID(I_B_STR,P_P,1) >= "A" AND FNC_SYSMID(I_B_STR,P_P,1) <= "Z") THEN
						    P_P = P_P + 1
				ELSE
				IF FNC_SYSMID(I_B_STR,P_P,1)  = "_" THEN
						    P_P = P_P + 1
				ELSE
				IF  (FNC_SYSMID(I_B_STR,P_P,1) >= "A" AND FNC_SYSMID(I_B_STR,P_P,1) <= "Z") THEN
						    P_P = P_P + 1
				ELSE
					SWICH_CPT_ALF = "N" 
				END IF
				END IF
				END IF
	     		 NEXT
			 SZTOKEN = P_P - P_Q
			 NEXTTOKEN = TPGTOK
			    VALTOKEN = FNC_SYSMID(I_B_STR,P_Q,SZTOKEN)
		ELSE
			NEXTTOKEN = CHRTOK
			VALTOKEN = FNC_SYSMID(I_B_STR,P_P,1)
			P_P = P_P + 1
			SZTOKEN = 1
		END IF
	END IF
	END IF
	END IF

 LABE_ASIG:
	P_R = P_Q
	P_Q = P_P
800
    END DEF


 DEF INTEGER INI_MATR2

	PASO_CPT_NUM = PASO_CPT_NUM + 1
	WSS_DSP00 = "N"
	WSS_DSP01 = "N"
	WSS_DSP04 = "N"			
	V_MES(1,1) = "JAN"
	V_MES(1,2) = "01"
	V_MES(2,1) = "FEB"
	V_MES(2,2) = "02"
	V_MES(3,1) = "MAR"
	V_MES(3,2) = "03"
	V_MES(4,1) = "APR"
	V_MES(4,2) = "04"
	V_MES(5,1) = "MAY"
	V_MES(5,2) = "05"
	V_MES(6,1) = "JUN"
	V_MES(6,2) = "06"
	V_MES(7,1) = "JUL"
	V_MES(7,2) = "07"
	V_MES(8,1) = "AUG"
	V_MES(8,2) = "08"
	V_MES(9,1) = "SEP"
	V_MES(9,2) = "09"
	V_MES(10,1) = "OCT"
	V_MES(10,2) = "10"
	V_MES(11,1) = "NOV"
	V_MES(11,2) = "11"
	V_MES(12,1) = "DEC"
	V_MES(12,2) = "12"
  !!!	 ISP  26-DEC-2000 12:11:55 ( GENERO MAL GAR.MTX )
  !!!	 EL 80 DEPENDE DE OCURRENCIAS DE TPG_MAT_TRN
  !!!		FOR I_CPT_NUM = 1 TO 80
	FOR I_CPT_NUM = 1 TO 100
		FOR J_CPT_NUM = 1 TO 20
 			TPG_MAT_TRN(I_CPT_NUM,J_CPT_NUM,CTE_TRN_MNU) = ""
			TPG_MAT_TRN(I_CPT_NUM,J_CPT_NUM,CTE_TRN_FRM) = "   "
			TPG_MAT_TRN(I_CPT_NUM,J_CPT_NUM,CTE_TRN_CMN) = "   "
			TPG_MAT_TRN(I_CPT_NUM,J_CPT_NUM,CTE_TRN_CPP) = "   "
			TPG_MAT_TRN(I_CPT_NUM,J_CPT_NUM,CTE_TRN_SPP) = " "
			TPG_MAT_TRN(I_CPT_NUM,J_CPT_NUM,CTE_TRN_PGM) = "	"
			TPG_MAT_TRN(I_CPT_NUM,J_CPT_NUM,CTE_TRN_SUB) = "	"
			TPG_MAT_TRN(I_CPT_NUM,J_CPT_NUM,CTE_TRN_INS) = "   "
			TPG_MAT_TRN(I_CPT_NUM,J_CPT_NUM,CTE_TRN_INM) = "   "
			TPG_MAT_TRN(I_CPT_NUM,J_CPT_NUM,CTE_TRN_FIN) = "   "
			TPG_MAT_TRN(I_CPT_NUM,J_CPT_NUM,CTE_TRN_FOU) = "   "
			TPG_MAT_TRN(I_CPT_NUM,J_CPT_NUM,CTE_TRN_CMT) = ""
			TPG_MAT_TRN(I_CPT_NUM,J_CPT_NUM,CTE_TRN_IDX) = ""
			TPG_MAT_TRN(I_CPT_NUM,J_CPT_NUM,CTE_TRN_CNF) = "			 "
		NEXT J_CPT_NUM
		FOR J_CPT_NUM = 1 TO 30
			TPG_MAT_PTPIG(I_CPT_NUM,J_CPT_NUM) = " "
			TPG_MAT_XTPIG(I_CPT_NUM,J_CPT_NUM) = " "
			TPG_MAT_PTSPR(I_CPT_NUM,J_CPT_NUM) = " "
			TPG_MAT_XTSPR(I_CPT_NUM,J_CPT_NUM) = " "
		NEXT J_CPT_NUM
	NEXT I_CPT_NUM
	 FOR I_CPT_NUM = 1 TO 25
		    FOR J_CPT_NUM = 1 TO 180
			  TPG_MAT_IDENFLDHST(I_CPT_NUM,J_CPT_NUM) = ""
 !!!			TPG_MAT_IDT_VBC(I_CPT_NUM,J_CPT_NUM) = "TXT"
		  NEXT J_CPT_NUM
	  NEXT I_CPT_NUM
	  FOR I_CPT_NUM = 1 TO 20
		  FOR J_CPT_NUM = 1 TO 30
			  FOR K_CPT_NUM = 1 TO 180
				  TPG_MAT_TOTOCCFLDSRV(I_CPT_NUM,J_CPT_NUM,K_CPT_NUM) = 1
			  NEXT K_CPT_NUM
		  NEXT J_CPT_NUM
	  NEXT I_CPT_NUM
    END DEF


   DEF INTEGER INIC_IALI

        VSN_CPT_ALF = " VERSION 1.1.0 Mayo 2000 agrega fil.mtx a WS3 "
        VSN_CPT_ALF = " VERSION 1.1.1 JULIO 2001"

        VSN_CPT_ALF = " VERSION 2.0.1 Enero 2002"
 ! Unifica versiones IBM-UYS
 ! Asimilado a generacion de garantias BANAMEX para IBM

        NIV_PIC(NIV_01) = "01  "
        NIV_PIC(NIV_03) = "03  "
        NIV_PIC(NIV_05) = "05  "
        NIV_PIC(NIV_07) = "07  "
        NIV_PIC(NIV_09) = "09  "
        NIV_PIC(NIV_11) = "11  "

        NIV_SEP(NIV_01) = "           "
        NIV_SEP(NIV_03) = "               "
        NIV_SEP(NIV_05) = "            "
        NIV_SEP(NIV_07) = "         "
        NIV_SEP(NIV_09) = "      "
        NIV_SEP(10)     = "     "
        NIV_SEP(11)     = "         "
        NIV_SEP(12)     = "             "
        NIV_SEP(13)     = "                 "
        NIV_SEP(14)     = "                     "

        NIV_MRG(NIV_00) = MG_0
        NIV_MRG(NIV_01) = MG_8
        NIV_MRG(NIV_03) = MG_12
        NIV_MRG(NIV_05) = MG_16
        NIV_MRG(NIV_07) = MG_20
        NIV_MRG(NIV_09) = MG_24
        NIV_MRG(NIV_11) = MG_28

        C_FILE_MTX = 1
        C_FILE_PD1 = 2
        C_FILE_PD2 = 3
        C_FILE_PD3 = 4
        C_FILE_WS1 = 5
        C_FILE_WS2 = 6
        C_FILE_WS3 = 7
        C_FILE_PI1 = 8
        C_FILE_DFI = 9
        C_FILE_DFO = 10
        C_FILE_VBC = 11
        C_FILE_FMT = 12
        FST_WSS = NO
        V_M(MG_0)  = ""
        V_M(MG_7)  = "      *"
        V_M(MG_8)  = "       "
        V_M(MG_12) = "           "
        V_M(MG_16) = "               "
        V_M(MG_20) = "                   "
        V_M(MG_24) = "                       "
        V_M(MG_28) = "                           "
	O_L  = FNC_SYSCHR(13) + FNC_SYSCHR(10)
	P_P = 1
	P_Q = 1
	
	FOR PP% = 1 TO 80 	
		FOR QQ% = 1 TO 30 	
			TPG_MAT_TPFRM(PP%,QQ%) = ""       
		NEXT QQ%
	NEXT PP%

	FOR PP% = 1 TO 25 	
		FOR QQ% = 1 TO 180 	
			TPG_MAT_LRG(PP%,QQ%)  = 0       
		NEXT QQ%
	NEXT PP%

 !!!    ($ MTX$DLP = "S") ==> DESPLIEGA LINEAS LEIDAS DE {FIL}.MTX
	 WSS_DLP = FNC_SYS_LIB_GET_SYMBOL("MTX$DLP")
	 WSS_USN = FNC_SYS_LIB_GET_SYMBOL("GNS$USN")
 !!!    ($ MTX$DPP = "S") ==> DESPLIEGA PASOS DE GENERACION   
	WSS_DPP = FNC_SYS_LIB_GET_SYMBOL("MTX$DPP")
	WSS_DPP = "S"

 !!!    ($ MTX$DFI = "S") ==> GENERA ARCHIVO DFI
	WSS_DFI = FNC_SYS_LIB_GET_SYMBOL("MTX$DFI")

 !!!    ($ MTX$DFO = "S") ==> GENERA ARCHIVO DFO
	WSS_GENDFO = FNC_SYS_LIB_GET_SYMBOL("MTX$DFO")

	 RPT_GLS_PRY = FNC_SYS_LIB_GET_SYMBOL("GNS$PRY")
	 EXTERNO = FNC_SYS_LIB_GET_SYMBOL("GNS$FIL")
	 GNS_PATH = FNC_SYS_LIB_GET_SYMBOL("GNS$PTH")

	 FILE_MTX = FNC_SYS_LIB_GET_SYMBOL("PTH")
	 MTX_GLS_SOP = FNC_SYS_LIB_GET_SYMBOL("GNS$SOP")
	 MTX_GLS_AIU = FNC_SYS_LIB_GET_SYMBOL("GNS$AIU")
	 RPT_GLS_PAI = FNC_SYS_LIB_GET_SYMBOL("GNS$PAI")
	 RPT_GLS_CLI = FNC_SYS_LIB_GET_SYMBOL("GNS$CLI")

	MAP_GLS_IDEN = FNC_SYSDATE(0%) + " " + FNC_SYSTIME(0%) + "    , PAI=" + RPT_GLS_PAI + ", CLI=" + RPT_GLS_CLI + ", SOP=" + MTX_GLS_SOP
	MAP_GLS_IDEN = "      *    " + FNC_SYSEDIT(MAP_GLS_IDEN, 32)
	MAP_GLS_VBC_CPT_ALF = "      '    " + FNC_SYSEDIT(MAP_GLS_IDEN, 32)

         FIO_ACCI = FIO_MTX_INP

	FILE_FMT = EXTERNO + "MX" + "FMT.AIU"
 !!!	FIO_ACCI = FIO_FMT_PUT(FIO_STAT, MAP_GLS_IDEN)
	        GNS_PATH =  "      *    " + GNS_PATH
 !!!	FIO_ACCI = FIO_FMT_PUT(FIO_STAT, GNS_PATH)
  	        GNS_USER$ =  "      *     USUARIO = " + WSS_USN 
 !!!	FIO_ACCI = FIO_FMT_PUT(FIO_STAT, GNS_USER$)
 !!!	FIO_ACCI = FIO_FMT_PUT(FIO_STAT, ARCH_SPA_CPT_ALF)
	ARCH_IDEN_CPT_ALF = "      *    " + FILE_FMT 
 !!!	FIO_ACCI = FIO_FMT_PUT(FIO_STAT, ARCH_IDEN_CPT_ALF + VSN_CPT_ALF)
 !!!	FIO_ACCI = FIO_FMT_PUT(FIO_STAT, ARCH_SPA_CPT_ALF)
	TPG_TOT_LEI = TPG_TOT_LEI + 1
   	    I_B_STR = FIO_MTX_GETNXT
	SZ_I_B = FIO_RLEN
	IF FIO_STAT <> FIO_STAT_OKS THEN
 		BUFOUT = FNC_PRINT("ARCHIVO VACIO " +  FNC_SYSSTR(FIO_STAT))
	END IF
	IF WSS_DLP = "S" THEN
 		BUFOUT = FNC_PRINT("PROC REG " + FNC_SYSSTR(TPG_TOT_LEI) + " #" + I_B_STR)
	END IF

	FILE_PD1 = EXTERNO + "MX" + "PD1.AIU"
	FILE_PD2 = EXTERNO + "MX" + "PD2.AIU"
	FILE_PD3 = EXTERNO + "MX" + "PD3.AIU"
	FILE_WS1 = EXTERNO + "MX" + "WS1.AIU"
	FILE_FMT = EXTERNO + "MX" + "FMT.AIU"
	FILE_WS2 = EXTERNO + "MX" + "WS2.AIU"
	FILE_WS3 = EXTERNO + "MX" + "WS3.AIU"
	FILE_PI1 = EXTERNO + "MX" + "PI1.AIU"

 !!!	 FILE_DFI = EXTERNO + "MX" + "DFI.AIU"
 !!!	FILE_DFO = EXTERNO + "MX" + "DFO.AIU"

	FILE_VBC = EXTERNO + "MX" + "VBC.AIU"

	FILE_RN = RPT_GLS_PRY + "RN" + EXTERNO + ".AIU"
	ARCH_SPA_CPT_ALF = "      *    " 

          FIO_ACCI = FIO_PD1_OUT
	FIO_ACCI = FIO_PD1_PUT(FIO_STAT,MAP_GLS_IDEN)
	FIO_ACCI = FIO_PD1_PUT(FIO_STAT,GNS_PATH)
	FIO_ACCI = FIO_PD1_PUT(FIO_STAT,GNS_USER$)
	FIO_ACCI = FIO_PD1_PUT(FIO_STAT,ARCH_SPA_CPT_ALF)
	ARCH_IDEN_CPT_ALF = "      *    " + FILE_PD1
	FIO_ACCI = FIO_PD1_PUT(FIO_STAT,ARCH_IDEN_CPT_ALF + VSN_CPT_ALF)
	FIO_ACCI = FIO_PD1_PUT(FIO_STAT,ARCH_SPA_CPT_ALF)


          FIO_ACCI = FIO_PD2_OUT
	FIO_ACCI = FIO_PD2_PUT(FIO_STAT,MAP_GLS_IDEN)
	FIO_ACCI = FIO_PD2_PUT(FIO_STAT,GNS_PATH)
	FIO_ACCI = FIO_PD2_PUT(FIO_STAT,GNS_USER$)
	FIO_ACCI = FIO_PD2_PUT(FIO_STAT,ARCH_SPA_CPT_ALF)
	ARCH_IDEN_CPT_ALF = "      *    " + FILE_PD2
	FIO_ACCI = FIO_PD2_PUT(FIO_STAT,ARCH_IDEN_CPT_ALF + VSN_CPT_ALF)
	FIO_ACCI = FIO_PD2_PUT(FIO_STAT,ARCH_SPA_CPT_ALF)

 	        FIO_ACCI = FIO_PD3_OUT
		FIO_ACCI = FIO_PD3_PUT(FIO_STAT,MAP_GLS_IDEN)
		FIO_ACCI = FIO_PD3_PUT(FIO_STAT,GNS_PATH)
		FIO_ACCI = FIO_PD3_PUT(FIO_STAT,GNS_USER$)
		FIO_ACCI = FIO_PD3_PUT(FIO_STAT,ARCH_SPA_CPT_ALF)
		ARCH_IDEN_CPT_ALF = "      *    " + FILE_PD3
		FIO_ACCI = FIO_PD3_PUT(FIO_STAT,ARCH_IDEN_CPT_ALF + VSN_CPT_ALF)
		FIO_ACCI = FIO_PD3_PUT(FIO_STAT,ARCH_SPA_CPT_ALF )


 !!!	IF WSS_GENDFO = "S" THEN
 !!! 	        FIO_ACCI = FIO_DFO_OUT
 !!!		FIO_ACCI = FIO_DFO_PUT(FIO_STAT,ARCH_IDEN_CPT_ALF + VSN_CPT_ALF)
 !!!	END IF

 !!!	IF WSS_DFI = "S" THEN
 !!! 	        FIO_ACCI = FIO_DFI_OUT
 !!!		FIO_ACCI = FIO_DFI_PUT(FIO_STAT,MAP_GLS_IDEN)
 !!!	END IF
 
         FIO_ACCI = FIO_WS1_OUT
	FIO_ACCI = FIO_WS1_PUT(FIO_STAT,MAP_GLS_IDEN)
	FIO_ACCI = FIO_WS1_PUT(FIO_STAT,GNS_PATH)
	FIO_ACCI = FIO_WS1_PUT(FIO_STAT,GNS_USER$)
	FIO_ACCI = FIO_WS1_PUT(FIO_STAT,ARCH_SPA_CPT_ALF)
 	ARCH_IDEN_CPT_ALF = "      *    " + FILE_WS1 
	FIO_ACCI = FIO_WS1_PUT(FIO_STAT,ARCH_IDEN_CPT_ALF + VSN_CPT_ALF)
	FIO_ACCI = FIO_WS1_PUT(FIO_STAT,ARCH_SPA_CPT_ALF)
 
        FIO_ACCI = FIO_WS3_OUT
	FIO_ACCI = FIO_WS3_PUT(FIO_STAT,MAP_GLS_IDEN)
	FIO_ACCI = FIO_WS3_PUT(FIO_STAT,GNS_PATH)
	FIO_ACCI = FIO_WS3_PUT(FIO_STAT,GNS_USER$)
	FIO_ACCI = FIO_WS3_PUT(FIO_STAT,ARCH_SPA_CPT_ALF )
 	ARCH_IDEN_CPT_ALF = "      *    " + FILE_WS3 
	FIO_ACCI = FIO_WS3_PUT(FIO_STAT,ARCH_IDEN_CPT_ALF + VSN_CPT_ALF)
	FIO_ACCI = FIO_WS3_PUT(FIO_STAT,ARCH_SPA_CPT_ALF )


         FIO_ACCI = FIO_WS2_OUT
	FIO_ACCI = FIO_WS2_PUT(FIO_STAT,MAP_GLS_IDEN)
	FIO_ACCI = FIO_WS2_PUT(FIO_STAT,GNS_PATH)
	FIO_ACCI = FIO_WS2_PUT(FIO_STAT,GNS_USER$)
	FIO_ACCI = FIO_WS2_PUT(FIO_STAT,ARCH_SPA_CPT_ALF )
 	ARCH_IDEN_CPT_ALF = "      *    " + FILE_WS2 
	FIO_ACCI = FIO_WS2_PUT(FIO_STAT,ARCH_IDEN_CPT_ALF + VSN_CPT_ALF )
	FIO_ACCI = FIO_WS2_PUT(FIO_STAT,ARCH_SPA_CPT_ALF )

         FIO_ACCI = FIO_PI1_OUT
	FIO_ACCI = FIO_PI1_PUT(FIO_STAT,MAP_GLS_IDEN)
	FIO_ACCI = FIO_PI1_PUT(FIO_STAT,GNS_PATH)
	FIO_ACCI = FIO_PI1_PUT(FIO_STAT,GNS_USER$)
	FIO_ACCI = FIO_PI1_PUT(FIO_STAT,ARCH_SPA_CPT_ALF)
 	ARCH_IDEN_CPT_ALF = "      *    " + FILE_PI1
	FIO_ACCI = FIO_PI1_PUT(FIO_STAT,ARCH_IDEN_CPT_ALF + VSN_CPT_ALF)
	FIO_ACCI = FIO_PI1_PUT(FIO_STAT,ARCH_SPA_CPT_ALF)

 !!!	FIO_ACCI = FIO_VBC_PUT(FIO_STAT,MAP_GLS_VBC_CPT_ALF )

    END DEF

 !!! FUNCION QUE BUSCA UN CAMPO SERVER OCURRENCIAS ANTERIORES
 !!! DE SRV PARA DETECTAR CAMPOS INDEXADOS

   DEF INTEGER TPG_FNC_BCS
	IDX_CPT_NUM = 0
	OCC_SRV_CPT_NUM = 0
	FOR TT_CPT_NUM = 1 TO TPG_MAT_HST_NUM(II_CPT_NUM,CTE_IDX_TCF)
		IF AA_CPT_ALF = TPG_MAT_NAMEFLDHST(II_CPT_NUM,TT_CPT_NUM) THEN
			OCC_SRV_CPT_NUM = OCC_SRV_CPT_NUM + 1
			IF OCC_SRV_CPT_NUM = CONT_SRV_CPT_NUM THEN
				IDX_CPT_NUM = TT_CPT_NUM 
				TT_CPT_NUM = TPG_MAT_HST_NUM(II_CPT_NUM,CTE_IDX_TCF) + 1
			END IF
		END IF
	NEXT TT_CPT_NUM
    END DEF


   DEF INTEGER DSP_ERR

	AA_CPT_ALF = ""
	P_R = P_R - 1
	FOR ZZ_CPT_NUM = 1 TO P_R 
		AA_CPT_ALF = AA_CPT_ALF + " "
	NEXT ZZ_CPT_NUM
	BB_CPT_ALF = AA_CPT_ALF + "^"
	AA_CPT_ALF = AA_CPT_ALF + "|"
	BUFOUT = FNC_PRINT("ERROR DE ABORTO EN LINEA NRO: " + FNC_SYSSTR(TPG_TOT_LEI))
	BUFOUT = FNC_PRINT("EN COLUMNA		  : " + FNC_SYSSTR(P_Q))
	BUFOUT = FNC_PRINT(I_B_STR)
	BUFOUT = FNC_PRINT(BB_CPT_ALF)
	BUFOUT = FNC_PRINT(AA_CPT_ALF)
	BUFOUT = FNC_PRINT(AA_CPT_ALF)
	BUFOUT = FNC_PRINT(GLS_ERR)
	BUFOUT = FNC_PRINT("")
    END DEF


   DEF INTEGER TPG_FNC_ATR_FLD_IDX_HST
 !!!	**COMENTARIO**			" TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF) = NUM DE CAMPOS HST "
	TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF) = TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF) + 1
	IF WSS_DSP00 = "S" THEN
		BUFOUT = FNC_PRINT("TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF) " + FNC_SYSSTR(TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF)))
		BUFOUT = FNC_PRINT(" VALTOKEN " + VALTOKEN) 
	END IF
 !!!	**COMENTARIO**		" TPG_MAT_NAMEFLDHST(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF)) = NOMBRE CAMPOS HST "
  	ACCION = AGR_FTB_VAL

	IF ES_VAL_CPT_ALF = "SI" THEN
		TPG_MAT_NUMFLDHST(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF)) = "S"
	 END IF

 	TPG_MAT_NAMEFLDHST(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF)) = VALTOKEN
 !!!	TPG_MAT_NAMEFLDHST(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF)) = VALTOKEN
	TPG_MAT_TOTOCCFLDHST(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF)) = TOT_OCURRENCIAS_CAMPOS_CPT_NUM

  	TOKEN = NEXTTOKEN
	IF VALTOKEN = "IKY"  OR VALTOKEN = "MKY"  OR VALTOKEN = "AKY"  OR VALTOKEN = "FLD" THEN
		TPG_MAT_IDT_FLD(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF)) = VALTOKEN
  		TOKEN = NEXTTOKEN
	END IF
	IF VALTOKEN = "DO" THEN
	        TPG_MAT_IDT_DO(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF)) = VALTOKEN
  		TOKEN = NEXTTOKEN
	END IF
	IF VALTOKEN = "9"  OR VALTOKEN = "X" THEN
		TPG_MAT_TIP_NUM(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF)) = VALTOKEN
  		TOKEN = NEXTTOKEN
	END IF

	IF VALTOKEN = "DTB"  OR VALTOKEN = "CBX"  OR VALTOKEN = "LBL" THEN
 !!!     	        TPG_MAT_IDT_VBC(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF)) = VALTOKEN
		TOKEN = NEXTTOKEN
	END IF
	IF  VALTOKEN = "FTB" OR VALTOKEN = "TXT" OR VALTOKEN = "ITB" THEN
 !!!		TPG_MAT_IDT_VBC(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF)) = VALTOKEN
		TOKEN = NEXTTOKEN
	END IF
	 IF VALTOKEN <> "(" THEN
		BUFOUT = FNC_PRINT("TOKEN " + FNC_SYSSTR(TOKEN))
		BUFOUT = FNC_PRINT("VALTOKEN %" + VALTOKEN + "%")
		GLS_ERR = "CARACTER " + GET_COM2 + "(" + GET_COM2 + " PARA LARGO DE CAMPO EXPECTED"
  		IDX_ERR_CPT_NUM = DSP_ERR
	END IF
  	TOKEN = NEXTTOKEN
	IF TOKEN <> NUMTOK THEN
		GLS_ERR = "PARA LARGO DE CAMPO EXPECTED"
  		IDX_ERR_CPT_NUM = DSP_ERR
	END IF
 !!!	**COMENTARIO**		"TPG_MAT_LRG(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF))  = LARGO CAMPOS HST "
        TPG_MAT_LRG(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF)) = NUMTOKEN

  	TOKEN = NEXTTOKEN
	IF VALTOKEN <> ")" THEN
		GLS_ERR = "CARACTER) PARA LARGO DE CAMPO EXPECTED"
  		IDX_ERR_CPT_NUM = DSP_ERR
	END IF

    END DEF

   DEF INTEGER TPG_FNC_IDEN_FLD_HST
	IF TOKEN = STRTOK THEN
		  TPG_MAT_IDENFLDHST(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF))  = STRTOKEN
  		TOKEN = NEXTTOKEN
	END IF
    END DEF


   DEF INTEGER TPG_FNC_FLD_IDX_HST
  	 TOKEN = NEXTTOKEN
  	FUNC_CPT_NUM = TPG_FNC_IDEN_FLD_HST

	IF VALTOKEN = "$_IDX_FIN" THEN
		GO TO FIN_TPG_FNC_FLD_IDX_HST
	END IF
	
	IF TOKEN = IDNTOK THEN
  		FUNC_CPT_NUM = TPG_FNC_ATR_FLD_IDX_HST
	ELSE
		GLS_ERR = "IDENTIFICADOR EXPECTED"
  		IDX_ERR_CPT_NUM = DSP_ERR
	END IF

 FIN_TPG_FNC_FLD_IDX_HST:

    END DEF

   DEF INTEGER TPG_FNC_HST_FLD
  	TOKEN = NEXTTOKEN
  	FUNC_CPT_NUM = TPG_FNC_IDEN_FLD_HST
	IF VALTOKEN = "$_FLD_FIN" THEN
		GO TO FIN_TPG_FNC_HST_FLD
	END IF
	IF VALTOKEN = "$_IDX_INI" THEN
  		TOKEN = NEXTTOKEN
		POS_1ER_FLD_IDX_CPT_NUM = 0
		IF VALTOKEN <> "=" THEN
			GLS_ERR = "SIGNO = PARA ASIGNACION FORMULARIO EXPECTED"
  			IDX_ERR_CPT_NUM = DSP_ERR
		END IF
  		TOKEN = NEXTTOKEN
		IF TOKEN <> NUMTOK THEN
			GLS_ERR = "TOTAL DE OCURENCIAS PARA CAMPOS HST EXPECTED"
  			IDX_ERR_CPT_NUM = DSP_ERR
		END IF
		TOT_OCURRENCIAS_CAMPOS_CPT_NUM = NUMTOKEN
		POS_1ER_FLD_IDX_CPT_NUM = TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF) + 1	 

		WHILE VALTOKEN <> "$_IDX_FIN"
  			FUNC_CPT_NUM = TPG_FNC_FLD_IDX_HST
	        NEXT

		POS_ULT_FLD_IDX_CPT_NUM = TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF)	  

		TOT_OCURRENCIAS_CAMPOS_CPT_NUM = TOT_OCURRENCIAS_CAMPOS_CPT_NUM - 1
		FOR AA_CPT_NUM = 1 TO TOT_OCURRENCIAS_CAMPOS_CPT_NUM
			FOR SS_CPT_NUM = POS_1ER_FLD_IDX_CPT_NUM TO POS_ULT_FLD_IDX_CPT_NUM
				TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF) = TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF) + 1
				TPG_MAT_IDENFLDHST(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF)) =	TPG_MAT_IDENFLDHST (TPG_TOT_HST,SS_CPT_NUM) 

				TPG_MAT_NAMEFLDHST(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF)) =	TPG_MAT_NAMEFLDHST (TPG_TOT_HST,SS_CPT_NUM) 

				 TPG_MAT_IDT_FLD(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF)) = TPG_MAT_IDT_FLD(TPG_TOT_HST,SS_CPT_NUM) 

				TPG_MAT_TOTOCCFLDHST(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF)) = TOT_OCURRENCIAS_CAMPOS_CPT_NUM + 1

				TPG_MAT_LRG(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF)) = TPG_MAT_LRG(TPG_TOT_HST,SS_CPT_NUM)
			NEXT SS_CPT_NUM
		NEXT AA_CPT_NUM
		TOT_OCURRENCIAS_CAMPOS_CPT_NUM = 0

 !!!		print " $#$#$#$#$#$#$#$# 1111 ini   "
 !!!		FOR SS% = 1 TO 50
 !!!				print " TPG_MAT_IDENFLDHST (TPG_TOT_HST,ss%) : " ; TPG_MAT_IDENFLDHST (TPG_TOT_HST,ss%)
 !!!				print " TPG_MAT_NAMEFLDHST (TPG_TOT_HST, ss%)  : " ; TPG_MAT_NAMEFLDHST (TPG_TOT_HST, ss%) 
 !!!				print " TPG_MAT_IDT_FLD(TPG_TOT_HST,ss% )      : " ; TPG_MAT_IDT_FLD(TPG_TOT_HST,ss% ) 
 !!!				print " TPG_MAT_TOTOCCFLDHST(TPG_TOT_HST,ss%)  : " ; TPG_MAT_TOTOCCFLDHST(TPG_TOT_HST,ss%)
 !!!				print " TPG_MAT_LRG(TPG_TOT_HST,ss%)           : " ; TPG_MAT_LRG(TPG_TOT_HST,ss%) 
 !!!		NEXT SS%

 !!!		print " $#$#$#$#$#$#$#$# fin "
 
	ELSE
	IF TOKEN = IDNTOK THEN
  		FUNC_CPT_NUM = TPG_FNC_ATR_FLD_IDX_HST
	ELSE
		GLS_ERR = "$_IDX_INI OR IDENTIFICADOR DE CAMPO EXPECTED"
  		IDX_ERR_CPT_NUM = DSP_ERR
	END IF
	END IF

 FIN_TPG_FNC_HST_FLD:

    END DEF

   DEF INTEGER TPG_FNC_HST

  	TOKEN = NEXTTOKEN
	IF VALTOKEN = "$_HST_FIN" THEN
		GO TO FIN_TPG_FNC_HST
	END IF
	IF VALTOKEN = "$_NOM" THEN
  		TOKEN = NEXTTOKEN
		IF VALTOKEN <> "=" THEN
			GLS_ERR = "SIGNO = PARA ASIGNACION FORMULARIO EXPECTED"
  			IDX_ERR_CPT_NUM = DSP_ERR
		END IF
  		TOKEN = NEXTTOKEN
		IF TOKEN <> STRTOK THEN
			GLS_ERR = "STRING CON NOMBRE DE FORMULARIO EXPECTED"
  			IDX_ERR_CPT_NUM = DSP_ERR
		END IF
		TPG_MAT_HST_ALF(TPG_TOT_HST,CTE_IDX_NOM) = STRTOKEN
 !!!	**COMENTARIO**					" TPG_MAT_HST_ALF(TPG_TOT_HST,CTE_IDX_NOM) = NOMBRE DE PANTALLA"
	ELSE
	IF VALTOKEN = "$_SIS" THEN
  		TOKEN = NEXTTOKEN
		IF VALTOKEN <> "=" THEN
			GLS_ERR = "SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED"
  			IDX_ERR_CPT_NUM = DSP_ERR
		END IF
  		TOKEN = NEXTTOKEN
		IF TOKEN <> STRTOK THEN
			GLS_ERR = "STRING CON NOMBRE DE SISTEMA EXPECTED"
  			IDX_ERR_CPT_NUM = DSP_ERR
		END IF
		TPG_MAT_HST_ALF(TPG_TOT_HST,CTE_IDX_SIS) = STRTOKEN
 !!!	**COMENTARIO**					" TPG_MAT_HST_ALF(TPG_TOT_HST,CTE_IDX_SIS) = NOMBRE DE SIST "
		ENC_CPT_ALF = "NO"
		FOR JJ_CPT_NUM = 1 TO TPG_TOT_SIST_CPT_NUM
			IF TPG_VEC_SIST(JJ_CPT_NUM) = STRTOKEN THEN
				ENC_CPT_ALF = "SI"
				JJ_CPT_NUM = TPG_TOT_SIST_CPT_NUM + 1
			END IF
		NEXT JJ_CPT_NUM
		IF ENC_CPT_ALF = "NO" THEN
			TPG_TOT_SIST_CPT_NUM = TPG_TOT_SIST_CPT_NUM + 1
			TPG_VEC_SIST(TPG_TOT_SIST_CPT_NUM) = STRTOKEN
		END IF
	 ELSE
	IF VALTOKEN = "$_SIM" THEN
  		TOKEN = NEXTTOKEN
		IF VALTOKEN <> "=" THEN
			GLS_ERR = "SIGNO = PARA ASIGNACION SISTEMA SIM EXPECTED"
  			IDX_ERR_CPT_NUM = DSP_ERR
		END IF
  		TOKEN = NEXTTOKEN
		IF TOKEN <> STRTOK THEN
			GLS_ERR = "STRING CON NOMBRE DE FORMULARIO EXPECTED"
  			IDX_ERR_CPT_NUM = DSP_ERR
		END IF
		TPG_MAT_HST_ALF(TPG_TOT_HST,CTE_IDX_SIM) = STRTOKEN
	ELSE
	IF VALTOKEN = "$_FLD_INI" THEN
		WHILE VALTOKEN <> "$_FLD_FIN"
  			FUNC_CPT_NUM = TPG_FNC_HST_FLD
			IF WSS_DSP00 = "S" THEN
				BUFOUT = FNC_PRINT("VOLVIO DE TPG_FNC_HST_FLD")
			END IF
	        NEXT
	ELSE
		GLS_ERR = "$_NOM OR $_SIS OR $_FLD_INI EXPECTED"
  		IDX_ERR_CPT_NUM = DSP_ERR
	END IF
	END IF
	END IF
	END IF

 FIN_TPG_FNC_HST:
	IF TPG_MAT_HST_ALF(TPG_TOT_HST,CTE_IDX_SIM) = "" THEN
		TPG_MAT_HST_ALF(TPG_TOT_HST,CTE_IDX_SIM) = TPG_MAT_HST_ALF(TPG_TOT_HST,CTE_IDX_SIS)
	END IF

	IF WSS_DSP00 = "S" THEN
		BUFOUT = FNC_PRINT("EN FIN_TPG_FNC_HST")
	END IF
    END DEF

   DEF INTEGER TPG_FNC_SRV_IDX
	POS_1ER_FLD_IDX_CPT_NUM = 0
  	TOKEN = NEXTTOKEN
	IF VALTOKEN <> "=" THEN
		GLS_ERR = "SIGNO = PARA ASIGNACION FORMULARIO EXPECTED"
  		IDX_ERR_CPT_NUM = DSP_ERR
	END IF
  	TOKEN = NEXTTOKEN
	IF TOKEN <> NUMTOK THEN
		GLS_ERR = "NUMERO DE OCURRENCIAS PARA CAMPOS SRV EXPECTED"
  		IDX_ERR_CPT_NUM = DSP_ERR
	END IF
	TOT_OCURRENCIAS_CAMPOS_CPT_NUM = NUMTOKEN
  	TOKEN = NEXTTOKEN
	POS_1ER_FLD_IDX_CPT_NUM = TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF))  + 1	 
	WHILE VALTOKEN <> "$_IDX_FIN"
		 IF TOKEN <> IDNTOK THEN
			GLS_ERR = "IDENTIFICADOR CON NOMBRE DE CAMPO EXPECTED"
  			IDX_ERR_CPT_NUM = DSP_ERR
		END IF
		TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) = TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) + 1
		INDEX_CPT_NUM = TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF))
  		ACCION = AGR_FTB_VAL

 !!! aaaaa
		IF ES_VAL_CPT_ALF = "SI" THEN
			TPG_MAT_NUMFLDSRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF),INDEX_CPT_NUM) = "S"
		END IF

		TPG_MAT_NAMEFLDSRV (TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF),INDEX_CPT_NUM) = VALTOKEN
		TPG_MAT_TOTOCCFLDSRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF),INDEX_CPT_NUM) = TOT_OCURRENCIAS_CAMPOS_CPT_NUM

  		TOKEN = NEXTTOKEN
        NEXT

	IF WSS_DSP01 = "S" THEN
	 	BUFOUT = FNC_PRINT(" FIN WHILE SRV_IDX POS_1ER_FLD_IDX_CPT_NUM"  + FNC_SYSSTR(POS_1ER_FLD_IDX_CPT_NUM))
	END IF
	POS_ULT_FLD_IDX_CPT_NUM = TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) 
	IF WSS_DSP01 = "S" THEN
		BUFOUT = FNC_PRINT(" FIN WHILE SRV_IDX POS_ULT_FLD_IDX_CPT_NUM"  + FNC_SYSSTR(POS_ULT_FLD_IDX_CPT_NUM))
	END IF
	IF POS_1ER_FLD_IDX_CPT_NUM <> 0 THEN
		TOT_OCURRENCIAS_CAMPOS_CPT_NUM = TOT_OCURRENCIAS_CAMPOS_CPT_NUM - 1
		FOR AA_CPT_NUM = 1 TO TOT_OCURRENCIAS_CAMPOS_CPT_NUM
			IF WSS_DSP01 = "S" THEN
			 	BUFOUT = FNC_PRINT(" GUARDO INDEX VECES :  " + FNC_SYSSTR(TOT_OCURRENCIAS_CAMPOS_CPT_NUM))
			END IF
			FOR SS_CPT_NUM = POS_1ER_FLD_IDX_CPT_NUM TO POS_ULT_FLD_IDX_CPT_NUM
				IF WSS_DSP01 = "S" THEN
					BUFOUT = FNC_PRINT(" EL CAMPO  :  " + FNC_SYSSTR(SS_CPT_NUM))
				END IF
				TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) = TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) + 1
				INDEX_CPT_NUM = TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF))
				TPG_MAT_NAMEFLDSRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF),INDEX_CPT_NUM) = TPG_MAT_NAMEFLDSRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF),SS_CPT_NUM) 
				TPG_MAT_TOTOCCFLDSRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF),INDEX_CPT_NUM) = TOT_OCURRENCIAS_CAMPOS_CPT_NUM + 1
			NEXT SS_CPT_NUM
		NEXT AA_CPT_NUM
		TOT_OCURRENCIAS_CAMPOS_CPT_NUM = 0
	END IF		
    END DEF

 DEF INTEGER TPG_FNC_SRV

  	TOKEN = NEXTTOKEN
	IF VALTOKEN = "$_SRV_FIN" THEN
		GO TO FIN_TPG_FNC_SRV
	END IF

	IF VALTOKEN = "$_NOM" THEN
  		TOKEN = NEXTTOKEN
		IF VALTOKEN <> "=" THEN
			GLS_ERR = "SIGNO = PARA ASIGNACION FORMULARIO EXPECTED"
  			IDX_ERR_CPT_NUM = DSP_ERR
		END IF
  		TOKEN = NEXTTOKEN
		IF TOKEN <> STRTOK THEN
			GLS_ERR = "STRING CON NOMBRE DE FORMULARIO EXPECTED"
  			IDX_ERR_CPT_NUM = DSP_ERR
		END IF
 !!!	**COMENTARIO**	"  TPG_MAT_SRV_ALF(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF))  = NOMBRE DE SRV "
		TPG_MAT_SRV_ALF(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) = STRTOKEN	
	ELSE
	IF VALTOKEN = "$_FLD_INI" THEN
 !!!		BUFOUT = SELEC_FLD_HST
 !!!		PRINT " CARGA SERV EN TPG_TOT_HST   : " ; TPG_TOT_HST
  		TOKEN = NEXTTOKEN
		WHILE VALTOKEN <> "$_FLD_FIN"
			IF VALTOKEN = "$_IDX_INI" THEN
				WHILE VALTOKEN <> "$_IDX_FIN"
  					FUNC_CPT_NUM = TPG_FNC_SRV_IDX
	     			NEXT
			ELSE
			IF TOKEN = IDNTOK THEN
				AA_CPT_ALF = VALTOKEN
				II_CPT_NUM = TPG_TOT_HST
				CONT_SRV_CPT_NUM = 1
  				ENC_CPT_NUM = TPG_FNC_BCS
				IF IDX_CPT_NUM = 0 THEN
					BUFOUT = FNC_PRINT(" NO EXISTE " +  AA_CPT_ALF + " EN TABLA HST => " + TPG_MAT_HST_ALF(TPG_TOT_HST,CTE_IDX_NOM))
				END IF
 !!!	**COMENTARIO**	" TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) = Nª DE CAMPOS DE SRV "
				TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) = TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) + 1
				INDEX_CPT_NUM = TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF))
 !!!	**COMENTARIO**	" TPG_MAT_NAMEFLDSRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF),INDEX_CPT_NUM) = NOMBRE CAMPO SRV "
				ACCION = AGR_FTB_VAL

				IF ES_VAL_CPT_ALF = "SI" THEN
					TPG_MAT_NUMFLDSRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF),INDEX_CPT_NUM) = "S"
				END IF
				 TPG_MAT_NAMEFLDSRV (TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF),INDEX_CPT_NUM) = VALTOKEN

	 		END IF
 			END IF
 			TOKEN = NEXTTOKEN
	        NEXT
	ELSE
		GLS_ERR = "" + GET_COM2 + "NOM" + GET_COM2 + " OR $_FLD_INI PARA SRV EXPECTED"
		IDX_ERR_CPT_NUM = DSP_ERR
	END IF
	END IF

 FIN_TPG_FNC_SRV:

    END DEF

     DEF STRING FNC_SCAN_MTX

     	WHILE TOKEN <> ETXTOK

	IF VALTOKEN = "$_TIME_STP" THEN
 		TOKEN = NEXTTOKEN
		IF VALTOKEN <> "=" THEN
			GLS_ERR = "SIGNO = PARA ASIGNACION FORMULARIO EXPECTED"
 			IDX_ERR_CPT_NUM = DSP_ERR
		END IF
 		TOKEN = NEXTTOKEN
		IF TOKEN <> STRTOK THEN
			GLS_ERR = "STRING CON NOMBRE DE FORMULARIO EXPECTED"
 			IDX_ERR_CPT_NUM = DSP_ERR
		END IF
		TIME_STP_CPT_ALF  = STRTOKEN
	 	BUFOUT = FNC_PRINT(VSN_CPT_ALF)
		IF FNC_SYSLEN(TIME_STP_CPT_ALF) <> 14 THEN
		 	BUFOUT = FNC_PRINT("LARGO DE TIME STAMP DISTINTO DE 14 TIME-STAMP : " + TIME_STP_CPT_ALF)
		ELSE
			BUFOUT = FNC_PRINT("TIME STAMP ESPECIFICADO CORRECTAMENTE ==> SSAAMMDDHHMMSS")
			BUFOUT = FNC_PRINT("                                          " + TIME_STP_CPT_ALF)
			BUFOUT = FNC_PRINT("")
		END IF
 		TOKEN = NEXTTOKEN
	END IF

	IF VALTOKEN = "$_LRG_SND" THEN
 		TOKEN = NEXTTOKEN
		IF VALTOKEN <> "=" THEN
			GLS_ERR = "SIGNO = PARA ASIGNACION FORMULARIO EXPECTED"
 			IDX_ERR_CPT_NUM = DSP_ERR
		END IF
 		TOKEN = NEXTTOKEN
		TPG_LRG_SND_CPT_NUM = NUMTOKEN
	END IF


	IF VALTOKEN = "$_LRG_RCV" THEN
 		TOKEN = NEXTTOKEN
		IF VALTOKEN <> "=" THEN
			GLS_ERR = "SIGNO = PARA ASIGNACION FORMULARIO EXPECTED"
 			IDX_ERR_CPT_NUM = DSP_ERR
		END IF
 		TOKEN = NEXTTOKEN
		TPG_LRG_RCV_CPT_NUM = NUMTOKEN
	END IF

	IF VALTOKEN = "$_LRG_MSG_SND" THEN
 		TOKEN = NEXTTOKEN
		IF VALTOKEN <> "=" THEN
			GLS_ERR = "SIGNO = PARA ASIGNACION FORMULARIO EXPECTED"
 			IDX_ERR_CPT_NUM = DSP_ERR
		END IF
 		TOKEN = NEXTTOKEN
		TPG_LRG_MSG_SND_NUM = NUMTOKEN
	END IF

	IF VALTOKEN = "$_LRG_MSG_RCV" THEN
 		TOKEN = NEXTTOKEN
		IF VALTOKEN <> "=" THEN
			GLS_ERR = "SIGNO = PARA ASIGNACION FORMULARIO EXPECTED"
 			IDX_ERR_CPT_NUM = DSP_ERR
		END IF
 		TOKEN = NEXTTOKEN
		TPG_LRG_MSG_RCV_NUM = NUMTOKEN
	END IF

	IF VALTOKEN = "$_HDR_RCV" THEN
 		TOKEN = NEXTTOKEN
		IF VALTOKEN <> "=" THEN
			GLS_ERR = "SIGNO = PARA ASIGNACION FORMULARIO EXPECTED"
 			IDX_ERR_CPT_NUM = DSP_ERR
		END IF
 		TOKEN = NEXTTOKEN
		TPG_HDR_RCV = NUMTOKEN
	END IF

	IF VALTOKEN = "$_HDR_SND" THEN
 		TOKEN = NEXTTOKEN
		IF VALTOKEN <> "=" THEN
			GLS_ERR = "SIGNO = PARA ASIGNACION FORMULARIO EXPECTED"
 			IDX_ERR_CPT_NUM = DSP_ERR
		END IF
 		TOKEN = NEXTTOKEN
		TPG_HDR_SND_CPT_NUM = NUMTOKEN
	END IF
	IF VALTOKEN = "$_FRM_INI" THEN
		TPG_TOT_HST = TPG_TOT_HST + 1
 !!!	 **COMENTARIO**								" TPG_TOT_HST  =  NUMERO DE HST "
		IF WSS_DSP00 = "S" THEN
			BUFOUT = FNC_PRINT("TPG_TOT_HST " + FNC_SYSSTR(TPG_TOT_HST))
		END IF
		WHILE VALTOKEN <> "$_FRM_FIN"
 			TOKEN = NEXTTOKEN
			IF VALTOKEN = "$_HST_INI" THEN
				WHILE VALTOKEN <> "$_HST_FIN"
 					FUNC_CPT_NUM = TPG_FNC_HST
	     			NEXT
 !!! SIMULA CAMPO {FRM}-GLS-MENS
				TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF) = TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF) + 1
				TPG_MAT_NAMEFLDHST(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF)) = TPG_MAT_HST_ALF(TPG_TOT_HST,CTE_IDX_NOM) + "-GLS-MENS"
				TPG_MAT_LRG(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF)) = 79
			ELSE
			IF VALTOKEN = "$_SRV_INI" THEN
 !!!	**COMENTARIO**		" TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)  = NUM DE SRV PARA HST "
				TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF) = TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF) + 1
				WHILE VALTOKEN <> "$_SRV_FIN"
 					FUNC_CPT_NUM = TPG_FNC_SRV
	     			NEXT
			 ELSE
			IF VALTOKEN <> "$_FRM_FIN" THEN
				GLS_ERR = "HST_INI OR SRV_INI OR FRM_FIN EXPECTED"
 				IDX_ERR_CPT_NUM = DSP_ERR
			END IF
			END IF
			END IF

	        NEXT


 !!! AQUI SE DEBE INCLUIR LA NUEVA PARTE 12312312312312
		 TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF) = TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF) + 1
 !!! NOMBRE DE NUEVO SRV PARA ESTE CASO  "901"
		 TPG_MAT_SRV_ALF(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) = "901"	
		FOR XX_CPT_NUM = 1 TO TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF)
			IF  TPG_MAT_IDT_FLD(TPG_TOT_HST,XX_CPT_NUM)  = "IKY" THEN		 
 !!! SE INCLUYEN CAMPOS IKY 
				 TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) = TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) + 1
				INDEX_CPT_NUM = TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF))
				 TPG_MAT_NAMEFLDSRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF),INDEX_CPT_NUM) = TPG_MAT_NAMEFLDHST(TPG_TOT_HST,XX_CPT_NUM) 
 !!! PARA CMAPOS INDEXADOS EN EL HOST
				   TPG_MAT_TOTOCCFLDSRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF),INDEX_CPT_NUM) = TPG_MAT_TOTOCCFLDHST(TPG_TOT_HST,XX_CPT_NUM)
			END IF
		NEXT XX_CPT_NUM

		  TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF) = TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF) + 1
		 TPG_MAT_SRV_ALF(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) = "903"
		FOR XX_CPT_NUM = 1 TO TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF)
			IF  TPG_MAT_IDT_FLD(TPG_TOT_HST,XX_CPT_NUM)  = "FLD" OR TPG_MAT_IDT_FLD(TPG_TOT_HST,XX_CPT_NUM)  = "MKY" THEN
				TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) = TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) + 1
				INDEX_CPT_NUM = TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF))
				 TPG_MAT_NAMEFLDSRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF),INDEX_CPT_NUM) = TPG_MAT_NAMEFLDHST(TPG_TOT_HST,XX_CPT_NUM) 
 !!! PARA CMAPOS INDEXADOS EN EL HOST
				   TPG_MAT_TOTOCCFLDSRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF),INDEX_CPT_NUM) = TPG_MAT_TOTOCCFLDHST(TPG_TOT_HST,XX_CPT_NUM)
			END IF
		NEXT XX_CPT_NUM

		TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF) = TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF) + 1
		 TPG_MAT_SRV_ALF(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) = "904"


		FOR XX_CPT_NUM = 1 TO TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF)
			IF      TPG_MAT_IDT_FLD(TPG_TOT_HST,XX_CPT_NUM)  = "IKY"  OR TPG_MAT_IDT_FLD(TPG_TOT_HST,XX_CPT_NUM)  = "MKY" THEN
				TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) = TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) + 1

				INDEX_CPT_NUM = TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF))
				 TPG_MAT_NAMEFLDSRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF),INDEX_CPT_NUM) = TPG_MAT_NAMEFLDHST(TPG_TOT_HST,XX_CPT_NUM) 
 !!! PARA CMAPOS INDEXADOS EN EL HOST
				   TPG_MAT_TOTOCCFLDSRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF),INDEX_CPT_NUM) = TPG_MAT_TOTOCCFLDHST(TPG_TOT_HST,XX_CPT_NUM)

			END IF
			IF TPG_MAT_IDT_FLD(TPG_TOT_HST,XX_CPT_NUM)  = "AKY"  OR TPG_MAT_IDT_FLD(TPG_TOT_HST,XX_CPT_NUM)  = "FLD" THEN
				TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) = TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) + 1

				INDEX_CPT_NUM = TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF))
				 TPG_MAT_NAMEFLDSRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF),INDEX_CPT_NUM) = TPG_MAT_NAMEFLDHST(TPG_TOT_HST,XX_CPT_NUM) 
 !!! PARA CMAPOS INDEXADOS EN EL HOST
				   TPG_MAT_TOTOCCFLDSRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF),INDEX_CPT_NUM) = TPG_MAT_TOTOCCFLDHST(TPG_TOT_HST,XX_CPT_NUM)

			END IF
		NEXT XX_CPT_NUM


		 TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF) = TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF) + 1
		 TPG_MAT_SRV_ALF(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) = "905"
		FOR XX_CPT_NUM = 1 TO TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF)
			IF  TPG_MAT_IDT_FLD(TPG_TOT_HST,XX_CPT_NUM)  = "IKY" OR TPG_MAT_IDT_FLD(TPG_TOT_HST,XX_CPT_NUM)  = "MKY" THEN
				 TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) = TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) + 1
				INDEX_CPT_NUM = TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF))
				 TPG_MAT_NAMEFLDSRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF),INDEX_CPT_NUM) = TPG_MAT_NAMEFLDHST(TPG_TOT_HST,XX_CPT_NUM) 
 !!! PARA CMAPOS INDEXADOS EN EL HOST
				   TPG_MAT_TOTOCCFLDSRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF),INDEX_CPT_NUM) = TPG_MAT_TOTOCCFLDHST(TPG_TOT_HST,XX_CPT_NUM)
	
			END IF
			IF TPG_MAT_IDT_FLD(TPG_TOT_HST,XX_CPT_NUM)  = "AKY" THEN
				 TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) = TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) + 1
				INDEX_CPT_NUM = TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF))
				 TPG_MAT_NAMEFLDSRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF),INDEX_CPT_NUM) = TPG_MAT_NAMEFLDHST(TPG_TOT_HST,XX_CPT_NUM) 
 !!! PARA CMAPOS INDEXADOS EN EL HOST
				   TPG_MAT_TOTOCCFLDSRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF),INDEX_CPT_NUM) = TPG_MAT_TOTOCCFLDHST(TPG_TOT_HST,XX_CPT_NUM)
	
			END IF
		NEXT XX_CPT_NUM

		TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF) = TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF) + 1
		 TPG_MAT_SRV_ALF(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) = "907"

	 END IF


 	TOKEN = NEXTTOKEN
	TPG_POS_REQ = 0
	IF VALTOKEN = "$_REQ_INI" THEN

		TPG_TOT_TRN = 0
		TPG_TOT_REQ = TPG_TOT_REQ + 1

 		TOKEN = NEXTTOKEN

		WHILE VALTOKEN <> "$_REQ_FIN"

			IF VALTOKEN = "$_DEF" THEN

 				TOKEN = NEXTTOKEN

				IF VALTOKEN <> "=" THEN
					GLS_ERR = "SIGNO = PARA ASIGNACION $_DEF EXPECTED"
 					IDX_ERR_CPT_NUM = DSP_ERR
				END IF

 				TOKEN = NEXTTOKEN

				IF TOKEN <> STRTOK THEN
					GLS_ERR = "STRING CON NOMBRE DE FORMULARIO EXPECTED"
 					IDX_ERR_CPT_NUM = DSP_ERR
				END IF
				TPG_VEC_DEF_REQ(TPG_TOT_REQ) = STRTOKEN

 				TOKEN = NEXTTOKEN

			END IF


			IF VALTOKEN = "$_NOM" THEN

 				TOKEN = NEXTTOKEN

				IF VALTOKEN <> "=" THEN
					GLS_ERR = "SIGNO = PARA ASIGNACION FORMULARIO EXPECTED"
 					IDX_ERR_CPT_NUM = DSP_ERR
				END IF

 				TOKEN = NEXTTOKEN

				IF TOKEN <> STRTOK THEN
					GLS_ERR = "STRING CON NOMBRE DE FORMULARIO EXPECTED"
 					IDX_ERR_CPT_NUM = DSP_ERR
				END IF
				TPG_VEC_REQ(TPG_TOT_REQ) = STRTOKEN

 				TOKEN = NEXTTOKEN

			END IF
			IF VALTOKEN = "$_TRN_INI" THEN
				TPG_TOT_TRN = TPG_TOT_TRN + 1
 				TOKEN = NEXTTOKEN

				WHILE VALTOKEN <> "$_TRN_FIN"
					IF TOKEN <> TPGTOK THEN
						GLS_ERR = "STRING CON NOMBRE DE SISTEMA EXPECTED"
 						IDX_ERR_CPT_NUM = DSP_ERR
					END IF
					IF VALTOKEN = "$_FRM" THEN
						TPG_POS_REQ = CTE_TRN_FRM
					END IF
					IF VALTOKEN = "$_CMN" THEN
						TPG_POS_REQ = CTE_TRN_CMN
					END IF
					IF VALTOKEN = "$_CPP" THEN
						TPG_POS_REQ = CTE_TRN_CPP
					END IF
					IF VALTOKEN = "$_SPP" THEN
						TPG_POS_REQ = CTE_TRN_SPP
					END IF
					IF VALTOKEN = "$_PGM" THEN
						TPG_POS_REQ = CTE_TRN_PGM
					END IF
					IF VALTOKEN = "$_SUB" THEN
						TPG_POS_REQ = CTE_TRN_SUB
					END IF
					IF VALTOKEN = "$_INS" THEN
						TPG_POS_REQ = CTE_TRN_INS
					END IF
					IF VALTOKEN = "$_INM" THEN
						TPG_POS_REQ = CTE_TRN_INM
					END IF
					IF VALTOKEN = "$_FIN" THEN
						TPG_POS_REQ = CTE_TRN_FIN
					END IF
					IF VALTOKEN = "$_FOU" THEN
						TPG_POS_REQ = CTE_TRN_FOU
					END IF
					IF VALTOKEN = "$_CMT" THEN
						TPG_POS_REQ = CTE_TRN_CMT
					END IF
					IF VALTOKEN = "$_IDX" THEN
						TPG_POS_REQ = CTE_TRN_IDX
					END IF
					IF VALTOKEN = "$_CNF" THEN
						TPG_POS_REQ = CTE_TRN_CNF
					END IF

 					TOKEN = NEXTTOKEN

					IF VALTOKEN <> "=" THEN
						GLS_ERR = "SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED"
 						IDX_ERR_CPT_NUM = DSP_ERR
					END IF
 					TOKEN = NEXTTOKEN
					IF TOKEN <> STRTOK THEN
						GLS_ERR = "STRING CON NOMBRE DE SISTEMA EXPECTED"
 						IDX_ERR_CPT_NUM = DSP_ERR
					END IF

					IF TPG_POS_REQ = CTE_TRN_FRM THEN
						IF STRTOKEN = "" THEN
							GLS_ERR = "EN TRANSACCION: FORMULARIO OBLIGATORIO"
 							IDX_ERR_CPT_NUM = DSP_ERR
						ELSE
							IF FNC_SYSLEN(STRTOKEN) <> 3 THEN
								GLS_ERR = "EN TRANSACCION: FORMULARIO CON LARGO DISTINTO DE 3"
 								IDX_ERR_CPT_NUM = DSP_ERR
							END IF
						END IF
					END IF
					IF TPG_POS_REQ = CTE_TRN_CMN THEN
						IF STRTOKEN = "" THEN
							GLS_ERR = "TRANSACCION: COMANDO " + GET_COM2 + "CMN" + GET_COM2 + " OBLIGATORIO"
 							IDX_ERR_CPT_NUM = DSP_ERR
						ELSE
							IF FNC_SYSLEN(STRTOKEN) <> 3 THEN
								GLS_ERR = "EN TRANSACCION: COMANDO " + GET_COM2 + "CMN" + GET_COM2 + " CON LARGO DISTINTO DE 3"
 								IDX_ERR_CPT_NUM = DSP_ERR
							END IF
						END IF
					END IF
					IF TPG_POS_REQ = CTE_TRN_CPP THEN
						IF STRTOKEN = "" THEN
							GLS_ERR = "EN TRANSACCION: COMANDO " + GET_COM2 + "CPP" + GET_COM2 + " OBLIGATORIO"
 							IDX_ERR_CPT_NUM = DSP_ERR
						ELSE
							IF FNC_SYSLEN(STRTOKEN) <> 3 THEN
								GLS_ERR = "EN TRANSACCION: COMANDO " + GET_COM2 + "CPP" + GET_COM2 + " CON LARGO DISTINTO DE 3"
 								IDX_ERR_CPT_NUM = DSP_ERR
							END IF
						END IF
					END IF
					IF TPG_POS_REQ = CTE_TRN_SPP THEN
						IF STRTOKEN = "" THEN
							GLS_ERR = "EN TRANSACCION: STATUS PARA PROGRAMA " + GET_COM2 + "SPP" + GET_COM2 + " OBLIGATORIO"
 							IDX_ERR_CPT_NUM = DSP_ERR
						ELSE
							IF FNC_SYSLEN(STRTOKEN) <> 1 THEN
								GLS_ERR = "EN TRANSACCION: STATUS PARA PROGRAMA " + GET_COM2 + "SPP" + GET_COM2 + " CON LARGO DISTINTO DE 1"
 								IDX_ERR_CPT_NUM = DSP_ERR
							END IF
						END IF
					END IF
					IF TPG_POS_REQ = CTE_TRN_PGM THEN
						IF STRTOKEN = "" THEN
							GLS_ERR = "EN TRANSACCION: PROGRAMA OBLIGATORIO"
 							IDX_ERR_CPT_NUM = DSP_ERR
						ELSE
							IF FNC_SYSLEN(STRTOKEN) <> 8 THEN
								GLS_ERR = "EN TRANSACCION: PROGRAMA(SUB) CON LARGO DISTINTO DE 8"
 								IDX_ERR_CPT_NUM = DSP_ERR
							END IF
						END IF
					END IF
					IF TPG_POS_REQ = CTE_TRN_INS THEN
						IF STRTOKEN = "" THEN
							GLS_ERR = "EN TRANSACCION: INSTANCIA OBLIGATORIA"
 							IDX_ERR_CPT_NUM = DSP_ERR
						ELSE
							IF FNC_SYSLEN(STRTOKEN) <> 3 THEN
								GLS_ERR = "EN TRANSACCION: INSTANCIA CON LARGO DISTINTO DE 3"
 								IDX_ERR_CPT_NUM = DSP_ERR
							END IF
						END IF
					END IF
					IF TPG_POS_REQ = CTE_TRN_SUB THEN
						IF STRTOKEN = "" THEN
							GLS_ERR = "EN TRANSACCION: PROGRAMA OBLIGATORIO"
 							IDX_ERR_CPT_NUM = DSP_ERR
						ELSE
							IF FNC_SYSLEN(STRTOKEN) <> 8 THEN
								GLS_ERR = "EN TRANSACCION: PROGRAMA CON LARGO DISTINTO DE 8"
 								IDX_ERR_CPT_NUM = DSP_ERR
							END IF
						END IF
					END IF
					IF TPG_POS_REQ = CTE_TRN_FIN THEN
						IF STRTOKEN = "" THEN
							GLS_ERR = "EN TRANSACCION: FORMATO DE INPUT OBLIGATORIO"
 							IDX_ERR_CPT_NUM = DSP_ERR
						ELSE
							IF FNC_SYSLEN(STRTOKEN) <> 3 THEN
								GLS_ERR = "EN TRANSACCION: FORMATO DE INPUT CON LARGO DISTINTO DE 3"
 								IDX_ERR_CPT_NUM = DSP_ERR
							END IF
						END IF
					END IF
					IF TPG_POS_REQ = CTE_TRN_FOU THEN
						IF STRTOKEN = "" THEN
							STRTOKEN = "   "
						ELSE
							IF FNC_SYSLEN(STRTOKEN) <> 3 THEN
								GLS_ERR = "EN TRANSACCION: FORMATO DE OUPUT CON LARGO DISTINTO DE 3"
 								IDX_ERR_CPT_NUM = DSP_ERR
							END IF
						END IF
					END IF
					TPG_MAT_TRN(TPG_TOT_REQ,TPG_TOT_TRN,TPG_POS_REQ) = STRTOKEN
 					TOKEN = NEXTTOKEN
	     			NEXT
				IF TPG_MAT_TRN(TPG_TOT_REQ,TPG_TOT_TRN,CTE_TRN_INM) = "   " THEN
					    TPG_MAT_TRN(TPG_TOT_REQ,TPG_TOT_TRN,CTE_TRN_INM) = TPG_MAT_TRN(TPG_TOT_REQ,TPG_TOT_TRN,CTE_TRN_INS)
				END IF
		END IF	

 !!! INICIO DE LECTURA DE DATOS PARA GENERAR PCAPT  "PT"
			VAR_IDX1_CPT_NUM = 0 
			VAR_IDX2_CPT_NUM = 0 
			IF VALTOKEN = "$_PT_INI" THEN
				INICIA_IDX_PT = NO_INICIA_IDX_PT 
 				TOKEN = NEXTTOKEN
				TPG_TOT_CAMP = 0
				WHILE VALTOKEN <> "$_PT_FIN"
					IF TOKEN <> TPGTOK THEN
						GLS_ERR = "STRING NO CORRESPONDE A UN " + GET_COM2 + " $_ " + GET_COM2 + " EXPECTED"
 						IDX_ERR_CPT_NUM = DSP_ERR
					END IF
					IF VALTOKEN = "$_FRM" THEN
						SEC_PT_HDR_CPT_ALF = "OPEN"
 						TOKEN = NEXTTOKEN
						IF VALTOKEN <> "=" THEN
							GLS_ERR = "SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED" 
 							IDX_ERR_CPT_NUM = DSP_ERR
						END IF
 						TOKEN = NEXTTOKEN
						TPG_TOT_CAMP = TPG_TOT_CAMP + 1
						TPG_MAT_PTFRM(TPG_TOT_REQ,TPG_TOT_CAMP) = STRTOKEN
						TPG_MAT_INIIDXPT(TPG_TOT_REQ,TPG_TOT_CAMP) = INICIA_IDX_PT
						INICIA_IDX_PT = NO_INICIA_IDX_PT 
					END IF
					IF VALTOKEN = "$_PIG" THEN
						SEC_PT_HDR_CPT_ALF = "OPEN"
 						TOKEN = NEXTTOKEN
						IF VALTOKEN <> "=" THEN
							GLS_ERR = "SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED" 
 							IDX_ERR_CPT_NUM = DSP_ERR
						END IF
 						TOKEN = NEXTTOKEN
						TPG_MAT_PTPIG(TPG_TOT_REQ,TPG_TOT_CAMP) = STRTOKEN
					END IF
					IF VALTOKEN = "$_SPR" THEN
						SEC_PT_HDR_CPT_ALF = "OPEN"
 						TOKEN = NEXTTOKEN
						IF VALTOKEN <> "=" THEN
							GLS_ERR = "SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED" 
 							IDX_ERR_CPT_NUM = DSP_ERR
						END IF
 						TOKEN = NEXTTOKEN
						TPG_MAT_PTSPR(TPG_TOT_REQ,TPG_TOT_CAMP) = STRTOKEN
					END IF
					IF VALTOKEN = "$_FMT" THEN
						SEC_PT_HDR_CPT_ALF = "CLOSE"
 						TOKEN = NEXTTOKEN
						IF VALTOKEN <> "=" THEN
							GLS_ERR = "SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED"
 							IDX_ERR_CPT_NUM = DSP_ERR
						END IF
 						TOKEN = NEXTTOKEN

						TPG_MAT_PTFMT(TPG_TOT_REQ,TPG_TOT_CAMP) = STRTOKEN
						TPG_MAT_NIV_IDPT(TPG_TOT_REQ,TPG_TOT_CAMP,1) = VAR_IDX1_CPT_NUM
						TPG_MAT_NIV_IDPT(TPG_TOT_REQ,TPG_TOT_CAMP,2) = VAR_IDX2_CPT_NUM
					END IF
					IF VALTOKEN = "$_IDX_INI" THEN
 						TOKEN = NEXTTOKEN
						IF VALTOKEN <> "=" THEN
							GLS_ERR = "SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED"
 							IDX_ERR_CPT_NUM = DSP_ERR
						END IF
 						TOKEN = NEXTTOKEN
						IF VAR_IDX1_CPT_NUM = 0 THEN 
							VAR_IDX1_CPT_NUM = NUMTOKEN
						ELSE
							VAR_IDX2_CPT_NUM = NUMTOKEN
						END IF
						INICIA_IDX_PT = SI_INICIA_IDX_PT 
					END IF
					IF VALTOKEN = "$_IDX_FIN" THEN
						IF VAR_IDX2_CPT_NUM <> 0 THEN 
							VAR_IDX2_CPT_NUM = 0
						ELSE
							VAR_IDX1_CPT_NUM = 0
						END IF
					END IF

 					TOKEN = NEXTTOKEN
	     			NEXT
				 TPG_MAT_CAM_PT(TPG_TOT_REQ) = TPG_TOT_CAMP
			END IF



 !!! INICIO DE LECTURA DE DATOS PARA GENERAR PTAMX  "TX"
			VAR_IDX1_CPT_NUM = 0 
			VAR_IDX2_CPT_NUM = 0 
			IF VALTOKEN = "$_TX_INI" THEN
				INICIA_IDX_TX = NO_INICIA_IDX_TX 
 				TOKEN = NEXTTOKEN
				TPG_TOT_CAMP = 0
				WHILE VALTOKEN <> "$_TX_FIN"
					IF TOKEN <> TPGTOK THEN
						GLS_ERR = "STRING NO CORRESPONDE A UN " + GET_COM2 + " $_ " + GET_COM2 + " EXPECTED"
 						IDX_ERR_CPT_NUM = DSP_ERR
					END IF
					IF VALTOKEN = "$_FRM" THEN
 						TOKEN = NEXTTOKEN
						IF VALTOKEN <> "=" THEN
							GLS_ERR = "SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED"
 							IDX_ERR_CPT_NUM = DSP_ERR
						END IF
 						TOKEN = NEXTTOKEN
						TPG_TOT_CAMP = TPG_TOT_CAMP + 1
						TPG_MAT_TXFRM(TPG_TOT_REQ,TPG_TOT_CAMP) = STRTOKEN
						TPG_MAT_INIIDXTX(TPG_TOT_REQ,TPG_TOT_CAMP) = INICIA_IDX_TX
						INICIA_IDX_TX = NO_INICIA_IDX_PT 
					END IF
					IF VALTOKEN = "$_FMT" THEN
 						TOKEN = NEXTTOKEN
						IF VALTOKEN <> "=" THEN
							GLS_ERR = "SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED"
 							IDX_ERR_CPT_NUM = DSP_ERR
						END IF
 						TOKEN = NEXTTOKEN
						TPG_MAT_TXFMT(TPG_TOT_REQ,TPG_TOT_CAMP) = STRTOKEN
						TPG_MAT_NIV_IDTX(TPG_TOT_REQ,TPG_TOT_CAMP,1) = VAR_IDX1_CPT_NUM
						TPG_MAT_NIV_IDTX(TPG_TOT_REQ,TPG_TOT_CAMP,2) = VAR_IDX2_CPT_NUM
					END IF
					IF VALTOKEN = "$_IDX_INI" THEN
 						TOKEN = NEXTTOKEN
						IF VALTOKEN <> "=" THEN
							GLS_ERR = "SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED"
 							IDX_ERR_CPT_NUM = DSP_ERR
						END IF
 						TOKEN = NEXTTOKEN
						IF VAR_IDX1_CPT_NUM = 0 THEN 
							VAR_IDX1_CPT_NUM = NUMTOKEN
						ELSE
							VAR_IDX2_CPT_NUM = NUMTOKEN
						END IF
						INICIA_IDX_TX = SI_INICIA_IDX_TX
					END IF
					IF VALTOKEN = "$_IDX_FIN" THEN
						IF VAR_IDX2_CPT_NUM <> 0 THEN 
							VAR_IDX2_CPT_NUM = 0
						ELSE
							VAR_IDX1_CPT_NUM = 0
						END IF
					END IF

 					TOKEN = NEXTTOKEN
	     			NEXT
				TPG_MAT_CAM_TX(TPG_TOT_REQ) = TPG_TOT_CAMP
			END IF



 !!! INICIO DE LECTURA DE DATOS PARA GENERAR MXAPT  "XT"
			VAR_IDX1_CPT_NUM = 0 
			VAR_IDX2_CPT_NUM = 0 
			IF VALTOKEN = "$_XT_INI" THEN
				INICIA_IDX_XT = NO_INICIA_IDX_XT 
 				TOKEN = NEXTTOKEN
				TPG_TOT_CAMP = 0
				WHILE VALTOKEN <> "$_XT_FIN"
					IF TOKEN <> TPGTOK THEN
						GLS_ERR = "STRING NO CORRESPONDE A UN " + GET_COM2 + " $_ " + GET_COM2 + " EXPECTED"
 						IDX_ERR_CPT_NUM = DSP_ERR
					END IF
					IF VALTOKEN = "$_FRM" THEN
 						TOKEN = NEXTTOKEN
						IF VALTOKEN <> "=" THEN
							GLS_ERR = "SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED"
 							IDX_ERR_CPT_NUM = DSP_ERR
						END IF
 						TOKEN = NEXTTOKEN
						TPG_TOT_CAMP = TPG_TOT_CAMP + 1
						TPG_MAT_XTFRM(TPG_TOT_REQ,TPG_TOT_CAMP) = STRTOKEN
						TPG_MAT_INIIDXXT(TPG_TOT_REQ,TPG_TOT_CAMP) = INICIA_IDX_XT
						INICIA_IDX_XT = NO_INICIA_IDX_XT 
					END IF
					IF VALTOKEN = "$_PIG" THEN
						SEC_PT_HDR_CPT_ALF = "OPEN"
 						TOKEN = NEXTTOKEN
						IF VALTOKEN <> "=" THEN
							GLS_ERR = "SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED" 
 							IDX_ERR_CPT_NUM = DSP_ERR
						END IF
 						TOKEN = NEXTTOKEN
						TPG_MAT_XTPIG(TPG_TOT_REQ,TPG_TOT_CAMP) = STRTOKEN
					END IF
					IF VALTOKEN = "$_SPR" THEN
						SEC_PT_HDR_CPT_ALF = "OPEN"
 						TOKEN = NEXTTOKEN
						IF VALTOKEN <> "=" THEN
							GLS_ERR = "SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED" 
 							IDX_ERR_CPT_NUM = DSP_ERR
						END IF
 						TOKEN = NEXTTOKEN
						TPG_MAT_XTSPR(TPG_TOT_REQ,TPG_TOT_CAMP) = STRTOKEN
					END IF
					IF VALTOKEN = "$_FMT" THEN
 						TOKEN = NEXTTOKEN
						IF VALTOKEN <> "=" THEN
							GLS_ERR = "SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED"
 							IDX_ERR_CPT_NUM = DSP_ERR
						END IF
 						TOKEN = NEXTTOKEN
						TPG_MAT_XTFMT(TPG_TOT_REQ,TPG_TOT_CAMP) = STRTOKEN
						TPG_MAT_NIV_IDXT(TPG_TOT_REQ,TPG_TOT_CAMP,1) = VAR_IDX1_CPT_NUM
						TPG_MAT_NIV_IDXT(TPG_TOT_REQ,TPG_TOT_CAMP,2) = VAR_IDX2_CPT_NUM
					END IF
					IF VALTOKEN = "$_IDX_INI" THEN
 						TOKEN = NEXTTOKEN
						IF VALTOKEN <> "=" THEN
							GLS_ERR = "SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED"
 							IDX_ERR_CPT_NUM = DSP_ERR
						END IF
 						TOKEN = NEXTTOKEN
						IF VAR_IDX1_CPT_NUM = 0 THEN 
							VAR_IDX1_CPT_NUM = NUMTOKEN
						ELSE
							VAR_IDX2_CPT_NUM = NUMTOKEN
						END IF
						INICIA_IDX_XT = SI_INICIA_IDX_XT 
					END IF
					IF VALTOKEN = "$_IDX_FIN" THEN
						IF VAR_IDX2_CPT_NUM <> 0 THEN 
							VAR_IDX2_CPT_NUM = 0
						ELSE
							VAR_IDX1_CPT_NUM = 0
						END IF
					END IF

 					TOKEN = NEXTTOKEN
	     			NEXT
				TPG_MAT_CAM_XT(TPG_TOT_REQ) = TPG_TOT_CAMP
			END IF



 !!! INICIO DE LECTURA DE DATOS PARA GENERAR PTAPC   "TP"
			IF VALTOKEN = "$_TP_INI" THEN
				INICIA_IDX_TP = NO_INICIA_IDX_TP 
				VAR_IDX1_CPT_NUM = 0 
				VAR_IDX2_CPT_NUM = 0 
 				TOKEN = NEXTTOKEN
				TPG_TOT_CAMP = 0
				WHILE VALTOKEN <> "$_TP_FIN"
					IF TOKEN <> TPGTOK THEN
						GLS_ERR = "STRING NO CORRESPONDE A UN " + GET_COM2 + " $_ " + GET_COM2 + " EXPECTED"
 						IDX_ERR_CPT_NUM = DSP_ERR
					END IF
					IF VALTOKEN = "$_FRM" THEN
 						TOKEN = NEXTTOKEN
						IF VALTOKEN <> "=" THEN
							GLS_ERR = "SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED"
 							IDX_ERR_CPT_NUM = DSP_ERR
						END IF
 						TOKEN = NEXTTOKEN
						TPG_TOT_CAMP = TPG_TOT_CAMP + 1
						TPG_MAT_TPFRM(TPG_TOT_REQ,TPG_TOT_CAMP) = STRTOKEN
						TPG_MAT_INIIDXTP(TPG_TOT_REQ,TPG_TOT_CAMP) = INICIA_IDX_TP
						INICIA_IDX_TP = NO_INICIA_IDX_TP 
					END IF
					IF VALTOKEN = "$_FMT" THEN
 						TOKEN = NEXTTOKEN
						IF VALTOKEN <> "=" THEN
							GLS_ERR = "SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED"
 							IDX_ERR_CPT_NUM = DSP_ERR
						END IF
 						TOKEN = NEXTTOKEN
						TPG_MAT_TPFMT(TPG_TOT_REQ,TPG_TOT_CAMP) = STRTOKEN
						TPG_MAT_NIV_IDTP(TPG_TOT_REQ,TPG_TOT_CAMP,1) = VAR_IDX1_CPT_NUM
						TPG_MAT_NIV_IDTP(TPG_TOT_REQ,TPG_TOT_CAMP,2) = VAR_IDX2_CPT_NUM
					END IF
					IF VALTOKEN = "$_IDX_INI" THEN
 						TOKEN = NEXTTOKEN
						IF VALTOKEN <> "=" THEN
							GLS_ERR = "SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED"
 							IDX_ERR_CPT_NUM = DSP_ERR
						END IF
 						TOKEN = NEXTTOKEN
						IF VAR_IDX1_CPT_NUM = 0 THEN 
							VAR_IDX1_CPT_NUM = NUMTOKEN
						ELSE
							VAR_IDX2_CPT_NUM = NUMTOKEN
						END IF
						INICIA_IDX_TP = SI_INICIA_IDX_TP 
					END IF
					IF VALTOKEN = "$_IDX_FIN" THEN
						IF VAR_IDX2_CPT_NUM <> 0 THEN 
							VAR_IDX2_CPT_NUM = 0
						ELSE
							VAR_IDX1_CPT_NUM = 0
						END IF
					END IF
 					TOKEN = NEXTTOKEN
	     			NEXT
				TPG_MAT_CAM_TP(TPG_TOT_REQ) = TPG_TOT_CAMP
			END IF

			TPG_VEC_NUM_TRN(TPG_TOT_REQ) = TPG_TOT_TRN 
 			TOKEN = NEXTTOKEN
	        NEXT
	END IF
        NEXT
    END DEF


      DEF STRING FNC_CARG_PAR
	PASO_CPT_NUM = PASO_CPT_NUM + 1
	IF WSS_DPP = "S" THEN
		BUFOUT = FNC_PRINT(" INICIO	   PASO " + FNC_SYSSTR(PASO_CPT_NUM) + "/" + FNC_SYSSTR(TOT_PASOS) + " REGISTROS HST Y SRV")
		BUFOUT = FNC_PRINT(" REGISTROS HST Y SRV")
	END IF
	BB_CPT_ALF = "X"
	NUM_TRN  = 0
 	ARCH_IDEN_CPT_ALF = "      *    SIS = " +  TPG_MAT_HST_ALF(1,CTE_IDX_SIS)
	FIO_ACCI = FIO_PI1_PUT(FIO_STAT,ARCH_IDEN_CPT_ALF)
 	ARCH_IDEN_CPT_ALF = "      *    OPC = C "
	FIO_ACCI = FIO_PI1_PUT(FIO_STAT,ARCH_IDEN_CPT_ALF)
 	ARCH_IDEN_CPT_ALF = "      *    SI OPC = C ==> CARGA DE PARAMETROS"  
	FIO_ACCI = FIO_PI1_PUT(FIO_STAT,ARCH_IDEN_CPT_ALF)
 	ARCH_IDEN_CPT_ALF = "      *    SI OPC = D ==> DESCARGA DE PARAMETROS"  
	FIO_ACCI = FIO_PI1_PUT(FIO_STAT,ARCH_IDEN_CPT_ALF)
		FOR JJ_CPT_NUM = 1 TO TPG_TOT_SIST_CPT_NUM

 !!! *REGTAB "TBLHST"
                        COD_CTAB_CPT_ALF = "HST         "
			COD_TABL_CPT_ALF = "TBL" + COD_CTAB_CPT_ALF
			EX_CTAB_CPT_ALF = "HST  "
			EX_TABL_CPT_ALF = "TBL" +  EX_CTAB_CPT_ALF

			REG_TAB_CPT_ALF = " " + COD_TABL_CPT_ALF + TIME_STP_CPT_ALF + " " + "S" + "    " + "GENTPG      " + COD_TABL_CPT_ALF 
			REG_TAB_CPT_ALF = REG_TAB_CPT_ALF +  EX_TABL_CPT_ALF + COD_CTAB_CPT_ALF + "00000" + "TABLA HST                                         " 
			REG_TAB_CPT_ALF = REG_TAB_CPT_ALF +  "                                                  "    + "      "
			IF FNC_SYSLEN(REG_TAB_CPT_ALF) <> 194 THEN
				BUFOUT = FNC_PRINT("ERROR EN CONSTRUCCION DE REGISTRO TAB ")
				BUFOUT = FNC_PRINT("LARGO " + FNC_SYSSTR(FNC_SYSLEN(REG_TAB_CPT_ALF)))
				BUFOUT = FNC_PRINT(" REGISTRO TAB : ")
				BUFOUT = FNC_PRINT(REG_TAB_CPT_ALF)
			ELSE
				BUFOUT = ESCR_PI1(MG_0,"REGTAB" + TPG_VEC_SIST(JJ_CPT_NUM))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,001,60))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,061,60))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,121,60))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,181,60))
			END IF

 !!! *REGTAB "HST   "
			COD_CTAB_CPT_ALF = "            "
			COD_TABL_CPT_ALF = "HST" + COD_CTAB_CPT_ALF
			EX_CTAB_CPT_ALF = "     "
			EX_TABL_CPT_ALF = "HST" +  EX_CTAB_CPT_ALF

			REG_TAB_CPT_ALF = " " + COD_TABL_CPT_ALF + TIME_STP_CPT_ALF + " " + "S" + "    " + "GENTPG      " + COD_TABL_CPT_ALF 
			REG_TAB_CPT_ALF = REG_TAB_CPT_ALF +  EX_TABL_CPT_ALF + COD_CTAB_CPT_ALF + "00000" + "TABLA HST                                         " 
			REG_TAB_CPT_ALF = REG_TAB_CPT_ALF +   "                                                  "    + "      "
			IF FNC_SYSLEN(REG_TAB_CPT_ALF) <> 194 THEN
				BUFOUT = FNC_PRINT("ERROR EN CONSTRUCCION DE REGISTRO TAB ")
				BUFOUT = FNC_PRINT("LARGO " + FNC_SYSSTR(FNC_SYSLEN(REG_TAB_CPT_ALF)))
				BUFOUT = FNC_PRINT(" REGISTRO TAB : ")
				BUFOUT = FNC_PRINT(REG_TAB_CPT_ALF)
			ELSE
				BUFOUT = ESCR_PI1(MG_0,"REGTAB" + TPG_VEC_SIST(JJ_CPT_NUM))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,001,60))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,061,60))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,121,60))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,181,60))
			END IF

 !!! *REGTAB "TBLDPO"
			IF NOT ( MTX_GLS_SOP = "MCP" AND MTX_GLS_AIU = "ADM" ) THEN
  				    GO TO NO_GEN_TBLDPO
			END IF
                        COD_CTAB_CPT_ALF = "DPO         "
			COD_TABL_CPT_ALF = "TBL" + COD_CTAB_CPT_ALF
			EX_CTAB_CPT_ALF = "DPO  "
			EX_TABL_CPT_ALF = "TBL" +  EX_CTAB_CPT_ALF

			REG_TAB_CPT_ALF = " " + COD_TABL_CPT_ALF + TIME_STP_CPT_ALF + " " + "S" + "    " + "GENTPG      " + COD_TABL_CPT_ALF 
			REG_TAB_CPT_ALF = REG_TAB_CPT_ALF +  EX_TABL_CPT_ALF + COD_CTAB_CPT_ALF + "00000" + "TABLA DPO                                         " 
			REG_TAB_CPT_ALF = REG_TAB_CPT_ALF +  "                                                  "    + "      "
			IF FNC_SYSLEN(REG_TAB_CPT_ALF) <> 194 THEN
				BUFOUT = FNC_PRINT("ERROR EN CONSTRUCCION DE REGISTRO TAB ")
				BUFOUT = FNC_PRINT("LARGO " + FNC_SYSSTR(FNC_SYSLEN(REG_TAB_CPT_ALF)))
				BUFOUT = FNC_PRINT(" REGISTRO TAB : ")
				BUFOUT = FNC_PRINT(REG_TAB_CPT_ALF)
			ELSE
				BUFOUT = ESCR_PI1(MG_0,"REGTAB" + TPG_VEC_SIST(JJ_CPT_NUM))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,001,60))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,061,60))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,121,60))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,181,60))
			END IF

 !!! *REGTAB "DPO   "
			COD_CTAB_CPT_ALF = "            "
			COD_TABL_CPT_ALF = "DPO" + COD_CTAB_CPT_ALF
			EX_CTAB_CPT_ALF = "     "
			EX_TABL_CPT_ALF = "DPO" +  EX_CTAB_CPT_ALF

			REG_TAB_CPT_ALF = " " + COD_TABL_CPT_ALF + TIME_STP_CPT_ALF + " " + "S" + "    " + "GENTPG      " + COD_TABL_CPT_ALF 
			REG_TAB_CPT_ALF = REG_TAB_CPT_ALF +  EX_TABL_CPT_ALF + COD_CTAB_CPT_ALF + "00000" + "TABLA DPO                                         " 
			REG_TAB_CPT_ALF = REG_TAB_CPT_ALF +   "                                                  "    + "      "
			IF FNC_SYSLEN(REG_TAB_CPT_ALF) <> 194 THEN
				BUFOUT = FNC_PRINT("ERROR EN CONSTRUCCION DE REGISTRO TAB ")
				BUFOUT = FNC_PRINT("LARGO " + FNC_SYSSTR(FNC_SYSLEN(REG_TAB_CPT_ALF)))
				BUFOUT = FNC_PRINT(" REGISTRO TAB : ")
 				BUFOUT = FNC_PRINT(REG_TAB_CPT_ALF)
			ELSE
				BUFOUT = ESCR_PI1(MG_0,"REGTAB" + TPG_VEC_SIST(JJ_CPT_NUM))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,001,60))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,061,60))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,121,60))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,181,60))
			END IF
 NO_GEN_TBLDPO:

 !!! *REGTAB "TBLSRV   "
                        COD_CTAB_CPT_ALF = "SRV         "
			COD_TABL_CPT_ALF = "TBL" + COD_CTAB_CPT_ALF
			EX_CTAB_CPT_ALF = "SRV  "
			EX_TABL_CPT_ALF = "TBL" +  EX_CTAB_CPT_ALF

			REG_TAB_CPT_ALF = " " + COD_TABL_CPT_ALF + TIME_STP_CPT_ALF + " " + "S" + "    " + "GENTPG      " + COD_TABL_CPT_ALF 
			REG_TAB_CPT_ALF = REG_TAB_CPT_ALF +  EX_TABL_CPT_ALF + COD_CTAB_CPT_ALF + "00000" + "TABLA SRV                                         " 
			REG_TAB_CPT_ALF = REG_TAB_CPT_ALF +  "                                                  "    + "      "
			IF FNC_SYSLEN(REG_TAB_CPT_ALF) <> 194 THEN
				BUFOUT = FNC_PRINT( "ERROR EN CONSTRUCCION DE REGISTRO TAB ")
				BUFOUT = FNC_PRINT( "LARGO " + FNC_SYSSTR(FNC_SYSLEN(REG_TAB_CPT_ALF)))
				BUFOUT = FNC_PRINT( " REGISTRO TAB : ")
				BUFOUT = FNC_PRINT( REG_TAB_CPT_ALF)
			ELSE
				BUFOUT = ESCR_PI1(MG_0,"REGTAB" + TPG_VEC_SIST(JJ_CPT_NUM) )
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,001,60))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,061,60))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,121,60))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,181,60))
			END IF

 !!! *REGTAB "SRV   "
			COD_CTAB_CPT_ALF = "            "
			COD_TABL_CPT_ALF = "SRV" + COD_CTAB_CPT_ALF
			EX_CTAB_CPT_ALF = "     "
			EX_TABL_CPT_ALF = "SRV" +  EX_CTAB_CPT_ALF

			REG_TAB_CPT_ALF = " " + COD_TABL_CPT_ALF + TIME_STP_CPT_ALF + " " + "S" + "    " + "GENTPG      " + COD_TABL_CPT_ALF 
			REG_TAB_CPT_ALF = REG_TAB_CPT_ALF +  EX_TABL_CPT_ALF + COD_CTAB_CPT_ALF + "00000" + "TABLA SRV                                         " 
			REG_TAB_CPT_ALF = REG_TAB_CPT_ALF + "                                                  "    + "      "
			IF FNC_SYSLEN(REG_TAB_CPT_ALF) <> 194 THEN
				BUFOUT = FNC_PRINT( "ERROR EN CONSTRUCCION DE REGISTRO TAB ")
				BUFOUT = FNC_PRINT( "LARGO " + FNC_SYSSTR(FNC_SYSLEN(REG_TAB_CPT_ALF)))
				BUFOUT = FNC_PRINT( " REGISTRO TAB : ")
				BUFOUT = FNC_PRINT( REG_TAB_CPT_ALF)
			ELSE
				BUFOUT = ESCR_PI1(MG_0,"REGTAB" + TPG_VEC_SIST(JJ_CPT_NUM) )
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,001,60))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,061,60))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,121,60))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,181,60))
			END IF

		NEXT JJ_CPT_NUM
	
	FOR II_CPT_NUM = 1 TO TPG_TOT_HST

		FOR PP_CPT_NUM = 1 TO 10
			TAB_DO_DESC(PP_CPT_NUM) = ""
			TAB_GLS_DESC(PP_CPT_NUM) = ""
		NEXT PP_CPT_NUM

		XX_CPT_NUM = 0
		YY_CPT_NUM = 0
		COR_HST_CPT_NUM = 0
 NXT_TAB_HST :

 !!!		PRINT " 1TPG_MAT_HST_NUM(II_CPT_NUM,CTE_IDX_TCF) : " ; TPG_MAT_HST_NUM(II_CPT_NUM,CTE_IDX_TCF) 
		IF (TPG_MAT_HST_NUM(II_CPT_NUM,CTE_IDX_TCF) - XX_CPT_NUM) < 50 THEN
			ZZ_CPT_NUM = TPG_MAT_HST_NUM(II_CPT_NUM,CTE_IDX_TCF)  - XX_CPT_NUM
		ELSE
			ZZ_CPT_NUM = 50
		END IF

		COR_HST_CPT_NUM = COR_HST_CPT_NUM + 1
		FOR KK_CPT_NUM = 1 TO ZZ_CPT_NUM
			YY_CPT_NUM = YY_CPT_NUM + 1
			AA_CPT_ALF = FNC_SYSSTR(TPG_MAT_LRG(II_CPT_NUM,YY_CPT_NUM))
			IF FNC_SYSLEN(AA_CPT_ALF) < 2 THEN
				AA_CPT_ALF = "0" + AA_CPT_ALF
			END IF
			TAB_GLS_DESC(COR_HST_CPT_NUM) = TAB_GLS_DESC(COR_HST_CPT_NUM) + AA_CPT_ALF
		NEXT KK_CPT_NUM
 !!!		PRINT "  YY_CPT_NUM < TPG_MAT_HST_NUM(II_CPT_NUM,CTE_IDX_TCF) "
 !!!		PRINT "  YY_CPT_NUM " ; YY_CPT_NUM 
 !!!		PRINT " TPG_MAT_HST_NUM(II_CPT_NUM,CTE_IDX_TCF) " ; TPG_MAT_HST_NUM(II_CPT_NUM,CTE_IDX_TCF) 
		IF YY_CPT_NUM < TPG_MAT_HST_NUM(II_CPT_NUM,CTE_IDX_TCF)  THEN
			XX_CPT_NUM = XX_CPT_NUM + 50
 			GO TO NXT_TAB_HST
		ELSE
			IF ZZ_CPT_NUM < 50 THEN
			 ZZ_CPT_NUM = 50 - ZZ_CPT_NUM
				FOR KK_CPT_NUM = 1 TO ZZ_CPT_NUM
					TAB_GLS_DESC(COR_HST_CPT_NUM)  = TAB_GLS_DESC(COR_HST_CPT_NUM)  + "  "
				NEXT KK_CPT_NUM
			END IF
		END IF
		FOR JJ_CPT_NUM = 1 TO COR_HST_CPT_NUM
			SGTE_CPT_ALF = FNC_SYSSTR(JJ_CPT_NUM) 
			IF FNC_SYSLEN(SGTE_CPT_ALF) < 2 THEN
				SGTE_CPT_ALF = "0" + SGTE_CPT_ALF
			END IF
			COD_CTAB_CPT_ALF = TPG_MAT_HST_ALF(II_CPT_NUM,CTE_IDX_SIS) + "F" + TPG_MAT_HST_ALF(II_CPT_NUM,CTE_IDX_NOM) 
			COD_CTAB_CPT_ALF = COD_CTAB_CPT_ALF + SGTE_CPT_ALF + "   "
			COD_TABL_CPT_ALF = "HST" + COD_CTAB_CPT_ALF
			EX_CTAB_CPT_ALF = "F" + TPG_MAT_HST_ALF(II_CPT_NUM,CTE_IDX_NOM) + " "
			EX_TABL_CPT_ALF = "HST" +  EX_CTAB_CPT_ALF

			REG_TAB_CPT_ALF = " " + COD_TABL_CPT_ALF + TIME_STP_CPT_ALF + " " + "S" + "    " + "GENTPG      " + COD_TABL_CPT_ALF 
			REG_TAB_CPT_ALF = REG_TAB_CPT_ALF +  EX_TABL_CPT_ALF + COD_CTAB_CPT_ALF + "00000" + TAB_GLS_DESC(JJ_CPT_NUM) + "      "
			IF FNC_SYSLEN(REG_TAB_CPT_ALF) <> 194 THEN
				BUFOUT = FNC_PRINT( "ERROR EN CONSTRUCCION DE REGISTRO TAB ")
				BUFOUT = FNC_PRINT( "LARGO " + FNC_SYSSTR(FNC_SYSLEN(REG_TAB_CPT_ALF)))
				BUFOUT = FNC_PRINT( " REGISTRO TAB : ")
				BUFOUT = FNC_PRINT( REG_TAB_CPT_ALF)
			ELSE
				BUFOUT = ESCR_PI1(MG_0,"REGTAB" + TPG_MAT_HST_ALF(II_CPT_NUM,CTE_IDX_SIS))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,001,60))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,061,60))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,121,60))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,181,60))
			END IF
		NEXT JJ_CPT_NUM
	NEXT II_CPT_NUM


	FOR II_CPT_NUM = 1 TO TPG_TOT_HST

		FOR PP_CPT_NUM = 1 TO 10
			TAB_DO_DESC(PP_CPT_NUM) = ""
		NEXT PP_CPT_NUM

		XX_CPT_NUM = 0
		YY_CPT_NUM = 0
		COR_HST_CPT_NUM = 0
 NXT_TAB_DPO :

		IF (TPG_MAT_HST_NUM(II_CPT_NUM,CTE_IDX_TCF) - XX_CPT_NUM) < 50 THEN
			ZZ_CPT_NUM = TPG_MAT_HST_NUM(II_CPT_NUM,CTE_IDX_TCF)  - XX_CPT_NUM
		ELSE
			ZZ_CPT_NUM = 50
		END IF

		COR_HST_CPT_NUM = COR_HST_CPT_NUM + 1
		FOR KK_CPT_NUM = 1 TO ZZ_CPT_NUM
			YY_CPT_NUM = YY_CPT_NUM + 1
     		        IF TPG_MAT_IDT_DO(II_CPT_NUM,YY_CPT_NUM) = "DO" THEN
				DO_CPT_ALF$ = FNC_SYSSTR(TPG_MAT_LRG(II_CPT_NUM,YY_CPT_NUM))
				DO_CPT_ALF$ = FNC_SYSSTR(YY_CPT_NUM)
				IF FNC_SYSLEN(DO_CPT_ALF$) = 1 THEN
					DO_CPT_ALF$ = "00" + DO_CPT_ALF$
				END IF
				IF FNC_SYSLEN(DO_CPT_ALF$) = 2 THEN
					DO_CPT_ALF$ = "0" + DO_CPT_ALF$
				END IF
				TAB_DO_DESC(COR_HST_CPT_NUM) = TAB_DO_DESC(COR_HST_CPT_NUM) + DO_CPT_ALF$
				DO_CPT_ALF$ = ""
			END IF
		NEXT KK_CPT_NUM
		IF YY_CPT_NUM < TPG_MAT_HST_NUM(II_CPT_NUM,CTE_IDX_TCF)  THEN
			XX_CPT_NUM = XX_CPT_NUM + 50
			GO TO NXT_TAB_DPO
		ELSE
			IF ZZ_CPT_NUM < 50 THEN
			 ZZ_CPT_NUM = 50 - ZZ_CPT_NUM
				FOR KK_CPT_NUM = 1 TO ZZ_CPT_NUM
					TAB_DO_DESC(COR_HST_CPT_NUM)  = TAB_DO_DESC(COR_HST_CPT_NUM)  + "  "
				NEXT KK_CPT_NUM
			END IF
		END IF

		IF NOT ( MTX_GLS_SOP = "MCP" AND MTX_GLS_AIU = "ADM" ) THEN
			GO TO NO_GEN_REG_DPO
		END IF
		FOR JJ_CPT_NUM = 1 TO COR_HST_CPT_NUM
			SGTE_CPT_ALF = FNC_SYSSTR(JJ_CPT_NUM) 
			IF FNC_SYSLEN(SGTE_CPT_ALF) < 2 THEN
				SGTE_CPT_ALF = "0" + SGTE_CPT_ALF
			END IF
			COD_CTAB_CPT_ALF = TPG_MAT_HST_ALF(II_CPT_NUM,CTE_IDX_SIS) + "F" + TPG_MAT_HST_ALF(II_CPT_NUM,CTE_IDX_NOM) 
			COD_CTAB_CPT_ALF = COD_CTAB_CPT_ALF + SGTE_CPT_ALF + "   "
			COD_TABL_CPT_ALF = "DPO" + COD_CTAB_CPT_ALF
			EX_CTAB_CPT_ALF = "F" + TPG_MAT_HST_ALF(II_CPT_NUM,CTE_IDX_NOM) + " "
			EX_TABL_CPT_ALF = "DPO" +  EX_CTAB_CPT_ALF

			REG_TAB_CPT_ALF = " " + COD_TABL_CPT_ALF + TIME_STP_CPT_ALF + " " + "S" + "    " + "GENTPG      " + COD_TABL_CPT_ALF 
			REG_TAB_CPT_ALF = REG_TAB_CPT_ALF +  EX_TABL_CPT_ALF + COD_CTAB_CPT_ALF + "00000" + TAB_DO_DESC(JJ_CPT_NUM) + "      "
			BUFOUT = ESCR_PI1(MG_0,"REGTAB" + TPG_MAT_HST_ALF(II_CPT_NUM,CTE_IDX_SIS))
			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,001,60))
			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,061,60))
			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,121,60))
			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,181,60))
		NEXT JJ_CPT_NUM
 NO_GEN_REG_DPO:

	NEXT II_CPT_NUM 


 !!! *REGTAB "SRV"FRM-CORR
	FOR II_CPT_NUM = 1 TO TPG_TOT_HST

	FOR LL_CPT_NUM = 1 TO TPG_MAT_HST_NUM(II_CPT_NUM,CTE_IDX_TSF)

		FOR PP_CPT_NUM = 1 TO 10
			TAB_GLS_DESC(PP_CPT_NUM) = ""
		NEXT PP_CPT_NUM

		XX_CPT_NUM = 0
		YY_CPT_NUM = 0
		COR_HST_CPT_NUM = 0
 NXT_TAB_SRV :
		IF (TPG_MAT_NCP_SRV(II_CPT_NUM,LL_CPT_NUM) - XX_CPT_NUM) < 33 THEN
			ZZ_CPT_NUM = TPG_MAT_NCP_SRV(II_CPT_NUM,LL_CPT_NUM) - XX_CPT_NUM
		ELSE
			ZZ_CPT_NUM = 33
		END IF
		
		COR_HST_CPT_NUM = COR_HST_CPT_NUM + 1

		 FOR KK_CPT_NUM = 1 TO ZZ_CPT_NUM
			YY_CPT_NUM = YY_CPT_NUM + 1
			AA_CPT_ALF = FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(II_CPT_NUM,LL_CPT_NUM,YY_CPT_NUM),128)
			CONT_SRV_CPT_NUM = 0

			FOR SRV_ACT_CPT_NUM = 1 TO YY_CPT_NUM
				IF AA_CPT_ALF = FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(II_CPT_NUM,LL_CPT_NUM,SRV_ACT_CPT_NUM),128) THEN
					CONT_SRV_CPT_NUM = CONT_SRV_CPT_NUM + 1
				END IF
			NEXT SRV_ACT_CPT_NUM
			
 			FUNC_CPT_NUM = TPG_FNC_BCS

			AA_CPT_ALF = FNC_SYSSTR(IDX_CPT_NUM)
			IF FNC_SYSLEN(AA_CPT_ALF) = 1 THEN
				AA_CPT_ALF = "00" + AA_CPT_ALF
			ELSE
			IF FNC_SYSLEN(AA_CPT_ALF) = 2 THEN
				AA_CPT_ALF = "0" + AA_CPT_ALF
			END IF
			END IF
			TAB_GLS_DESC(COR_HST_CPT_NUM) = TAB_GLS_DESC(COR_HST_CPT_NUM) + AA_CPT_ALF
		NEXT KK_CPT_NUM

		LZ_CPT_NUM = FNC_SYSLEN(TAB_GLS_DESC(COR_HST_CPT_NUM))
		IF LZ_CPT_NUM < 100 THEN
			LZ_CPT_NUM = 100 - LZ_CPT_NUM
			FOR KK_CPT_NUM = 1 TO LZ_CPT_NUM
				TAB_GLS_DESC(COR_HST_CPT_NUM)  = TAB_GLS_DESC(COR_HST_CPT_NUM)  + " "
			NEXT KK_CPT_NUM
		END IF

		IF YY_CPT_NUM < TPG_MAT_NCP_SRV(II_CPT_NUM,LL_CPT_NUM) THEN
			XX_CPT_NUM = XX_CPT_NUM + 33
			GO TO NXT_TAB_SRV
		END IF

		FOR JJ_CPT_NUM = 1 TO COR_HST_CPT_NUM
			SGTE_CPT_ALF = FNC_SYSSTR(JJ_CPT_NUM) 
			IF FNC_SYSLEN(SGTE_CPT_ALF) < 2 THEN
				SGTE_CPT_ALF = "0" + SGTE_CPT_ALF
			END IF
			COD_CTAB_CPT_ALF = TPG_MAT_HST_ALF(II_CPT_NUM,CTE_IDX_SIS) + "F" + TPG_MAT_HST_ALF(II_CPT_NUM,CTE_IDX_NOM) 
			COD_CTAB_CPT_ALF = COD_CTAB_CPT_ALF +  TPG_MAT_SRV_ALF(II_CPT_NUM,LL_CPT_NUM) + SGTE_CPT_ALF
			COD_TABL_CPT_ALF = "SRV" + COD_CTAB_CPT_ALF
			EX_CTAB_CPT_ALF = "F" + TPG_MAT_HST_ALF(II_CPT_NUM,CTE_IDX_NOM) + " "
			EX_TABL_CPT_ALF = "SRV" +  EX_CTAB_CPT_ALF
				
			REG_TAB_CPT_ALF = " " + COD_TABL_CPT_ALF + TIME_STP_CPT_ALF + " " + "S" + "    " + "GENTPG      " + COD_TABL_CPT_ALF 
			REG_TAB_CPT_ALF = REG_TAB_CPT_ALF +  EX_TABL_CPT_ALF + COD_CTAB_CPT_ALF + "00000" + TAB_GLS_DESC(JJ_CPT_NUM) + "      "
			IF FNC_SYSLEN(REG_TAB_CPT_ALF) <> 194 THEN
				BUFOUT = FNC_PRINT( "ERROR EN CONSTRUCCION DE REGISTRO TAB ")
				BUFOUT = FNC_PRINT( "LARGO " + FNC_SYSSTR(FNC_SYSLEN(REG_TAB_CPT_ALF)))
				BUFOUT = FNC_PRINT( " REGISTRO TAB : ")
				BUFOUT = FNC_PRINT( REG_TAB_CPT_ALF)
			END IF

			BUFOUT = ESCR_PI1(MG_0,"REGTAB" + TPG_MAT_HST_ALF(II_CPT_NUM,CTE_IDX_SIS))
			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,001,60))
			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,061,60))
			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,121,60))
			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,181,60))

		NEXT JJ_CPT_NUM
	NEXT LL_CPT_NUM 
	NEXT II_CPT_NUM 
 !!! *REGTAB "MSG"&&FRM-CORR
	FOR II_CPT_NUM = 1 TO TPG_TOT_HST
	FOR JJ_CPT_NUM = 1 TO TPG_MAT_HST_NUM(II_CPT_NUM,CTE_IDX_TCF)
		IF TPG_MAT_IDENFLDHST(II_CPT_NUM,JJ_CPT_NUM) <> "" THEN
		TAB_GLS_DESC_CPT_ALF = TPG_MAT_IDENFLDHST(II_CPT_NUM,JJ_CPT_NUM)

		IF FNC_SYSLEN(TAB_GLS_DESC_CPT_ALF) > 20 THEN
				BUFOUT = FNC_PRINT("ERROR EN CONSTRUCCION DE MENSAJE DEL TIPO &&")
				BUFOUT = FNC_PRINT("PARA CAMPO " + TPG_MAT_NAMEFLDHST(II_CPT_NUM,JJ_CPT_NUM) + " NRO " +FNC_SYSSTR(JJ_CPT_NUM))
				BUFOUT = FNC_PRINT(" DE HST  "+ FNC_SYSSTR(II_CPT_NUM))
				BUFOUT = FNC_PRINT(" PANTALLA  " + TPG_MAT_HST_ALF(TPG_TOT_HST,CTE_IDX_NOM))
				BUFOUT = FNC_PRINT("MENSAJE TRUCADO")
				BUFOUT = FNC_PRINT( TAB_GLS_DESC_CPT_ALF)
				TAB_GLS_DESC_CPT_ALF = FNC_SYSLEFT(TAB_GLS_DESC_CPT_ALF,40)
		END IF

		LL_CPT_NUM = 100 - FNC_SYSLEN(TAB_GLS_DESC_CPT_ALF) 
		FOR KK_CPT_NUM = 1 TO LL_CPT_NUM
			TAB_GLS_DESC_CPT_ALF = TAB_GLS_DESC_CPT_ALF + " "
		NEXT KK_CPT_NUM
		CORR_FLD_CPT_ALF = FNC_SYSSTR(JJ_CPT_NUM)
		LL_CPT_NUM = 4 - FNC_SYSLEN(CORR_FLD_CPT_ALF) 
		FOR KK_CPT_NUM = 1 TO LL_CPT_NUM
			CORR_FLD_CPT_ALF = "0" + CORR_FLD_CPT_ALF
		NEXT KK_CPT_NUM

		COD_CTAB_CPT_ALF = "&&" + TPG_MAT_HST_ALF(II_CPT_NUM,CTE_IDX_NOM) + CORR_FLD_CPT_ALF + "   "

		COD_TABL_CPT_ALF = "MSG" + COD_CTAB_CPT_ALF

		EX_CTAB_CPT_ALF = "&" + CORR_FLD_CPT_ALF
		EX_TABL_CPT_ALF = "MSG" +  EX_CTAB_CPT_ALF

		REG_TAB_CPT_ALF = " " + COD_TABL_CPT_ALF + TIME_STP_CPT_ALF + " " + "S" + "    " + "GENTPG      " + COD_TABL_CPT_ALF 
		REG_TAB_CPT_ALF = REG_TAB_CPT_ALF +  EX_TABL_CPT_ALF + COD_CTAB_CPT_ALF + EX_CTAB_CPT_ALF + TAB_GLS_DESC_CPT_ALF + "      "

		IF FNC_SYSLEN(REG_TAB_CPT_ALF) <> 194 THEN
				BUFOUT = FNC_PRINT("ERROR EN CONSTRUCCION DE REGISTRO TAB ")
				BUFOUT = FNC_PRINT( "LARGO " + FNC_SYSSTR(FNC_SYSLEN(REG_TAB_CPT_ALF)))
				BUFOUT = FNC_PRINT( " REGISTRO TAB : ")
				BUFOUT = FNC_PRINT( REG_TAB_CPT_ALF)
		ELSE
 !!!			IF CORR_ANT$ <> CORR_FLD_CPT_ALF THEN
				BUFOUT = ESCR_PI1(MG_0,"REGTAB" + TPG_MAT_HST_ALF(II_CPT_NUM,CTE_IDX_SIS))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,001,60))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,061,60))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,121,60))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,181,60))
			END IF
		END IF
 !!!		CORR_ANT$ = CORR_FLD_CPT_ALF
 !!!		END IF

	NEXT JJ_CPT_NUM
	NEXT II_CPT_NUM 

	IF WSS_DPP = "S" THEN
				BUFOUT = FNC_PRINT(" FIN           PASO " + FNC_SYSSTR(PASO_CPT_NUM) + "/" + FNC_SYSSTR(TOT_PASOS) + " REGISTROS HST Y SRV")
				BUFOUT = FNC_PRINT(" REGISTROS HST Y SRV")
	END IF
	PASO_CPT_NUM = PASO_CPT_NUM + 1
	IF WSS_DPP = "S" THEN
		BUFOUT = FNC_PRINT(" INICIO PASO " + FNC_SYSSTR(PASO_CPT_NUM) + "/" + FNC_SYSSTR(TOT_PASOS) + " REGISTROS MNU Y RPF")
		BUFOUT = FNC_PRINT(" REGISTROS MNU Y RPF")
	END IF

	BB_CPT_ALF = "X"
	NUM_TRN  = 0
	FOR II_CPT_NUM = 1 TO TPG_TOT_REQ 
		FOR JJ_CPT_NUM = 1 TO TPG_VEC_NUM_TRN(II_CPT_NUM)
			NUM_TRN = NUM_TRN + 1
			IF NUM_TRN = 100 THEN
				NUM_TRN = 1
				BB_CPT_ALF = "Y"
			END IF
			TPG_GLS_SIS_CPT_ALF  = ""

			TPG_GLS_FRQ_CPT_ALF = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_INS),128)

			TPG_GLS_FRM_CPT_ALF = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_FRM),128)

			FOR NN_CPT_NUM = 1 TO TPG_TOT_HST
				IF TPG_GLS_FRM_CPT_ALF = TPG_MAT_HST_ALF(NN_CPT_NUM,CTE_IDX_NOM) THEN 
					TPG_GLS_SIS_CPT_ALF = TPG_MAT_HST_ALF(NN_CPT_NUM,CTE_IDX_SIS)
					TPG_GLS_SIM_CPT_ALF = TPG_MAT_HST_ALF(NN_CPT_NUM,CTE_IDX_SIM)
					NN_CPT_NUM = TPG_TOT_HST + 1
				END IF
			NEXT NN_CPT_NUM

 !!!			IF FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM, JJ_CPT_NUM,CTE_TRN_MNU),128) = "" THEN
			MNU_COD_NEMO_CPT_ALF = TPG_GLS_SIM_CPT_ALF  + FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM, JJ_CPT_NUM,CTE_TRN_FRM),128) 
			MNU_COD_NEMO_CPT_ALF = MNU_COD_NEMO_CPT_ALF + FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM, JJ_CPT_NUM,CTE_TRN_CMN),128) 
			MNU_COD_NEMO_CPT_ALF = MNU_COD_NEMO_CPT_ALF + FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM, JJ_CPT_NUM,CTE_TRN_INM),128)
 !!!			ELSE
 !!!			MNU_COD_NEMO_CPT_ALF = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM, JJ_CPT_NUM,CTE_TRN_MNU),128) 
 !!!			END IF

			AA_CPT_ALF = FNC_SYSSTR(NUM_TRN)

			IF FNC_SYSLEN(AA_CPT_ALF) = 1 THEN
				AA_CPT_ALF = "0" + AA_CPT_ALF
			END IF

			MNU_COD_OPCI_CPT_ALF = BB_CPT_ALF + AA_CPT_ALF
			MNU_COD_IMEN_CPT_ALF = MNU_COD_OPCI_CPT_ALF  + "   "
			MNU_COD_TFUN_CPT_ALF = "PTC"
			MNU_GLS_FMEN_CPT_ALF = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_CMT),128)
			IF FNC_SYSLEN(MNU_GLS_FMEN_CPT_ALF) < 30 THEN
				LL_CPT_NUM = 30 - FNC_SYSLEN(MNU_GLS_FMEN_CPT_ALF) 
				FOR AA_CPT_NUM = 1  TO LL_CPT_NUM
					MNU_GLS_FMEN_CPT_ALF = MNU_GLS_FMEN_CPT_ALF + " "
				NEXT AA_CPT_NUM
			ELSE
				IF FNC_SYSLEN(MNU_GLS_FMEN_CPT_ALF) > 30 THEN
					MNU_GLS_FMEN_CPT_ALF = FNC_SYSRIGHT(MNU_GLS_FMEN_CPT_ALF,30)
				END IF
			END IF
			MNU_GLS_PROG_CPT_ALF =  FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_PGM),128)
			IF FNC_SYSLEN(MNU_GLS_PROG_CPT_ALF) < 12 THEN
				LL_CPT_NUM = 12 - FNC_SYSLEN(MNU_GLS_PROG_CPT_ALF) 
				FOR AA_CPT_NUM = 1  TO LL_CPT_NUM
					MNU_GLS_PROG_CPT_ALF = MNU_GLS_PROG_CPT_ALF + " "
				NEXT AA_CPT_NUM
			ELSE
				IF FNC_SYSLEN(MNU_GLS_PROG_CPT_ALF) > 12 THEN
					MNU_GLS_PROG_CPT_ALF = FNC_SYSRIGHT(MNU_GLS_PROG_CPT_ALF,12)
				END IF
			END IF
			MNU_GLS_TRAN_CPT_ALF = "XXXX"
			MNU_COD_CMND_CPT_ALF = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_CMN),128)
			MNU_GLS_LFRM_CPT_ALF = TPG_GLS_SIS_CPT_ALF + "A"+ FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_FRM),128)
			MNU_GLS_NFRM_CPT_ALF = TPG_GLS_SIS_CPT_ALF + "F"+ FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_FRM),128)
			MNU_GLS_FPRO_CPT_ALF = MNU_GLS_FMEN_CPT_ALF
			MNU_NUM_FILA_CPT_ALF = "00"
			MNU_NUM_COLU_CPT_ALF = "00"
			MNU_COD_FRET_CPT_ALF = "SIS         "
			MNU_COD_INST_CPT_ALF = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_INS),128)
			MNU_COD_TCTL_CPT_ALF = "LINK"
			MNU_COD_TINF_CPT_ALF = "OT "
			BUFOUT = ESCR_PI1(MG_0,"REGMNU" + TPG_GLS_SIS_CPT_ALF)

			REGMNU_CPT_ALF = " "  + MNU_COD_NEMO_CPT_ALF  + MNU_COD_OPCI_CPT_ALF  + MNU_COD_IMEN_CPT_ALF  + MNU_COD_TFUN_CPT_ALF 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF  + MNU_GLS_FMEN_CPT_ALF  + "            "  + MNU_GLS_PROG_CPT_ALF 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF  + "                             " + MNU_GLS_TRAN_CPT_ALF  + MNU_COD_CMND_CPT_ALF 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF  + "       "  + "                        " + MNU_GLS_LFRM_CPT_ALF  + MNU_GLS_NFRM_CPT_ALF 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF  + MNU_GLS_FPRO_CPT_ALF  + MNU_NUM_FILA_CPT_ALF  + MNU_NUM_COLU_CPT_ALF  + MNU_COD_FRET_CPT_ALF  + " " 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF  + "   "  + " "  + MNU_COD_INST_CPT_ALF  + " "  + "   "  + "   "  + MNU_COD_TCTL_CPT_ALF 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF  + "   " + "            " + "   " + "            " + " " + "       " 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF  + "       " + "        " + "            " + MNU_COD_TINF_CPT_ALF + "   " + " " 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF  + " " + "       " + "       " + " " + "       " + "       " + " " 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF  + "                                                                                 " 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF  + "                                                                                 "
					
			IF FNC_SYSLEN(REGMNU_CPT_ALF) <> 490 THEN
					BUFOUT = FNC_PRINT("MNU_COD_NEMO(12)  #" + MNU_COD_NEMO_CPT_ALF  + "#") 
					BUFOUT = FNC_PRINT("MNU_COD_OPCI(03)  #" + MNU_COD_OPCI_CPT_ALF  + "#") 
					BUFOUT = FNC_PRINT("MNU_COD_IMEN_CPT_ALF(06)  #" + MNU_COD_IMEN_CPT_ALF  + "#") 
					BUFOUT = FNC_PRINT("MNU_COD_TFUN_CPT_ALF(03)  #" + MNU_COD_TFUN_CPT_ALF  + "#") 
					BUFOUT = FNC_PRINT("MNU_GLS_FMEN_CPT_ALF(30)  #" + MNU_GLS_FMEN_CPT_ALF  + "#") 
					BUFOUT = FNC_PRINT("MNU_GLS_PROG_CPT_ALF(12)  #" + MNU_GLS_PROG_CPT_ALF  + "#") 
					BUFOUT = FNC_PRINT("MNU_GLS_TRAN_CPT_ALF(04)  #" + MNU_GLS_TRAN_CPT_ALF  + "#") 
					BUFOUT = FNC_PRINT("MNU_COD_CMND_CPT_ALF(03)  #" + MNU_COD_CMND_CPT_ALF  + "#") 
					BUFOUT = FNC_PRINT("MNU_GLS_LFRM_CPT_ALF(07)  #" + MNU_GLS_LFRM_CPT_ALF  + "#") 
					BUFOUT = FNC_PRINT("MNU_GLS_NFRM_CPT_ALF(07)  #" + MNU_GLS_NFRM_CPT_ALF  + "#") 
					BUFOUT = FNC_PRINT("MNU_GLS_FPRO_CPT_ALF(30)  #" + MNU_GLS_FPRO_CPT_ALF  + "#") 
					BUFOUT = FNC_PRINT("MNU_NUM_FILA_CPT_ALF(02)  #" + MNU_NUM_FILA_CPT_ALF  + "#") 
					BUFOUT = FNC_PRINT("MNU_NUM_COLU_CPT_ALF(02)  #" + MNU_NUM_COLU_CPT_ALF  + "#") 
					BUFOUT = FNC_PRINT("MNU_COD_FRET_CPT_ALF(12)  #" + MNU_COD_FRET_CPT_ALF  + "#") 
					BUFOUT = FNC_PRINT("MNU_COD_INST_CPT_ALF(03)  #" + MNU_COD_INST_CPT_ALF  + "#") 
					BUFOUT = FNC_PRINT("MNU_COD_TCTL_CPT_ALF(04)  #" + MNU_COD_TCTL_CPT_ALF  + "#") 
					BUFOUT = FNC_PRINT("MNU_COD_TINF_CPT_ALF(03)  #" + MNU_COD_TINF_CPT_ALF  + "#") 
					REGMNU_CPT_ALF = " "  +MNU_COD_NEMO_CPT_ALF  + MNU_COD_OPCI_CPT_ALF  + MNU_COD_IMEN_CPT_ALF  + MNU_COD_TFUN_CPT_ALF 
					REGMNU_CPT_ALF = REGMNU_CPT_ALF  + MNU_GLS_FMEN_CPT_ALF  + "            "  + MNU_GLS_PROG_CPT_ALF 
					REGMNU_CPT_ALF = REGMNU_CPT_ALF  + "                             " + MNU_GLS_TRAN_CPT_ALF  + MNU_COD_CMND_CPT_ALF 
					REGMNU_CPT_ALF = REGMNU_CPT_ALF  + "       "  + "                        " + MNU_GLS_LFRM_CPT_ALF  + MNU_GLS_NFRM_CPT_ALF 
					REGMNU_CPT_ALF = REGMNU_CPT_ALF  + MNU_GLS_FPRO_CPT_ALF  + MNU_NUM_FILA_CPT_ALF  + MNU_NUM_COLU_CPT_ALF  + MNU_COD_FRET_CPT_ALF  + " " 
					REGMNU_CPT_ALF = REGMNU_CPT_ALF  + "   "  + " "  + MNU_COD_INST_CPT_ALF  + " "  + "   "  + "   "  + MNU_COD_TCTL_CPT_ALF 
					REGMNU_CPT_ALF = REGMNU_CPT_ALF  + "   " + "            " + "   " + "            " + " " + "       " 
					REGMNU_CPT_ALF = REGMNU_CPT_ALF  + "       " + "        " + "            " + MNU_COD_TINF_CPT_ALF + "   " + " " 
					REGMNU_CPT_ALF = REGMNU_CPT_ALF  + " " + "       " + "       " + " " + "       " + "       " + " " 
					REGMNU_CPT_ALF = REGMNU_CPT_ALF  + "                                                                                 " 
					REGMNU_CPT_ALF = REGMNU_CPT_ALF  + "                                                                                 "

					BUFOUT = FNC_PRINT("ERROR EN CONSTRUCCION DE REGISTRO MNU ")
					BUFOUT = FNC_PRINT("LARGO " + FNC_SYSSTR(FNC_SYSLEN (REGMNU_CPT_ALF)))
					BUFOUT = FNC_PRINT( " REGISTRO MNU : ")
					BUFOUT = FNC_PRINT( REGMNU_CPT_ALF)
			END IF

			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REGMNU_CPT_ALF,001,60))
			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REGMNU_CPT_ALF,061,60))
			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REGMNU_CPT_ALF,121,60))
			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REGMNU_CPT_ALF,181,60))
			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REGMNU_CPT_ALF,241,60))
			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REGMNU_CPT_ALF,301,60))
			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REGMNU_CPT_ALF,361,60))
			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REGMNU_CPT_ALF,421,60))
			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REGMNU_CPT_ALF,481,60))
 !!! GENERACION DE RPF
			RPF_COD_DPRO_CPT_ALF = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_PGM),128)
			IF FNC_SYSLEN(RPF_COD_DPRO_CPT_ALF) < 12 THEN
				LL_CPT_NUM = 12 - FNC_SYSLEN(RPF_COD_DPRO_CPT_ALF) 
				FOR AA_CPT_NUM = 1  TO LL_CPT_NUM
					RPF_COD_DPRO_CPT_ALF   = RPF_COD_DPRO_CPT_ALF  + " "
				NEXT AA_CPT_NUM
			ELSE
				IF FNC_SYSLEN(RPF_COD_DPRO_CPT_ALF) > 12 THEN
					RPF_COD_DPRO_CPT_ALF  = FNC_SYSRIGHT(RPF_COD_DPRO_CPT_ALF,12)
				END IF
			END IF
			RPF_COD_TREG_CPT_ALF = "A"
			RPF_COD_CORR_CPT_ALF = " "
			RPF_COD_DARC_CPT_ALF = "        "
			RPF_COD_DATA_CPT_ALF = "CONSIST                                                               "
			BUFOUT = ESCR_PI1(MG_0,"REGRPF" + TPG_GLS_SIS_CPT_ALF)
			REGMNU_CPT_ALF = RPF_COD_DPRO_CPT_ALF + RPF_COD_TREG_CPT_ALF + RPF_COD_CORR_CPT_ALF  +RPF_COD_DARC_CPT_ALF  + RPF_COD_DATA_CPT_ALF  
			IF FNC_SYSLEN(REGMNU_CPT_ALF) <> 92 THEN
				BUFOUT = FNC_PRINT("ERROR EN CONSTRUCCION DE REGISTRO RPF -A- ")
				BUFOUT = FNC_PRINT( "LARGO " + FNC_SYSSTR(FNC_SYSLEN(REGMNU_CPT_ALF)))
				BUFOUT = FNC_PRINT( " REGISTRO RPF : ")
				BUFOUT = FNC_PRINT( REGMNU_CPT_ALF)
			END IF
			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REGMNU_CPT_ALF,001,60))
			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REGMNU_CPT_ALF,061,60))
			RPF_COD_DPRO_CPT_ALF = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_PGM),128)
			IF FNC_SYSLEN(RPF_COD_DPRO_CPT_ALF) < 12 THEN
				LL_CPT_NUM = 12 - FNC_SYSLEN(RPF_COD_DPRO_CPT_ALF) 
				FOR AA_CPT_NUM = 1  TO LL_CPT_NUM
					RPF_COD_DPRO_CPT_ALF   = RPF_COD_DPRO_CPT_ALF  + " "
				NEXT AA_CPT_NUM
			ELSE
				IF FNC_SYSLEN(RPF_COD_DPRO_CPT_ALF) > 12 THEN
					RPF_COD_DPRO_CPT_ALF  = FNC_SYSRIGHT(RPF_COD_DPRO_CPT_ALF,12)
				END IF
			END IF
			RPF_COD_TREG_CPT_ALF = "B"
			RPF_COD_CORR_CPT_ALF = " "
			RPF_COD_DARC_CPT_ALF = "        "
			RPF_COD_DATA_CPT_ALF = TPG_GLS_SIS_CPT_ALF + FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_FRM),128)
			IF FNC_SYSLEN(RPF_COD_DATA_CPT_ALF ) < 70 THEN
				LL_CPT_NUM = 70 - FNC_SYSLEN(RPF_COD_DATA_CPT_ALF ) 
				FOR AA_CPT_NUM = 1  TO LL_CPT_NUM
					RPF_COD_DATA_CPT_ALF  = RPF_COD_DATA_CPT_ALF   + " "
				NEXT AA_CPT_NUM
			END IF
			BUFOUT = ESCR_PI1(MG_0,"REGRPF" + TPG_GLS_SIS_CPT_ALF)
			REGMNU_CPT_ALF = RPF_COD_DPRO_CPT_ALF + RPF_COD_TREG_CPT_ALF + RPF_COD_CORR_CPT_ALF  +RPF_COD_DARC_CPT_ALF  + RPF_COD_DATA_CPT_ALF 
			IF FNC_SYSLEN(REGMNU_CPT_ALF) <> 92 THEN
				BUFOUT = FNC_PRINT("ERROR EN CONSTRUCCION DE REGISTRO RPF -B-")
				BUFOUT = FNC_PRINT( "LARGO " + FNC_SYSSTR(FNC_SYSLEN(REGMNU_CPT_ALF)))
				BUFOUT = FNC_PRINT( " REGISTRO RPF : ")
				BUFOUT = FNC_PRINT( REGMNU_CPT_ALF)
			END IF
			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REGMNU_CPT_ALF,001,60))
			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REGMNU_CPT_ALF,061,60))
			RPF_COD_DPRO_CPT_ALF = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_PGM),128)
			IF FNC_SYSLEN(RPF_COD_DPRO_CPT_ALF) < 12 THEN
				LL_CPT_NUM = 12 - FNC_SYSLEN(RPF_COD_DPRO_CPT_ALF) 
				FOR AA_CPT_NUM = 1  TO LL_CPT_NUM
					RPF_COD_DPRO_CPT_ALF  = RPF_COD_DPRO_CPT_ALF  + " "
				NEXT AA_CPT_NUM
			ELSE
				IF FNC_SYSLEN(RPF_COD_DPRO_CPT_ALF) > 12 THEN
					RPF_COD_DPRO_CPT_ALF  = FNC_SYSRIGHT(RPF_COD_DPRO_CPT_ALF,12)
				END IF
			END IF
			IF FNC_SYSLEN(RPF_COD_CONF_CPT_ALF) < 25 THEN
				LL_CPT_NUM = 25 - FNC_SYSLEN(RPF_COD_CONF_CPT_ALF) 
				FOR AA_CPT_NUM = 1  TO LL_CPT_NUM
					RPF_COD_CONF_CPT_ALF  = RPF_COD_CONF_CPT_ALF  + " "
				NEXT AA_CPT_NUM
			END IF
			RPF_COD_TREG_CPT_ALF = "C"
			RPF_COD_CORR_CPT_ALF = " "
			RPF_COD_DARC_CPT_ALF = "        "
			RPF_COD_DATA_CPT_ALF = "                                                                      "
			BUFOUT = ESCR_PI1(MG_0,"REGRPF" + TPG_GLS_SIS_CPT_ALF)
			REGMNU_CPT_ALF = RPF_COD_DPRO_CPT_ALF + RPF_COD_TREG_CPT_ALF + RPF_COD_CORR_CPT_ALF  +RPF_COD_DARC_CPT_ALF  + RPF_COD_DATA_CPT_ALF  
			IF FNC_SYSLEN(REGMNU_CPT_ALF) <> 92 THEN
				BUFOUT = FNC_PRINT("ERROR EN CONSTRUCCION DE REGISTRO RPF -C-")
				BUFOUT = FNC_PRINT("LARGO " + FNC_SYSSTR(FNC_SYSLEN(REGMNU_CPT_ALF)))
				BUFOUT = FNC_PRINT( " REGISTRO RPF : ")
				BUFOUT = FNC_PRINT( REGMNU_CPT_ALF)
			END IF
			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REGMNU_CPT_ALF,001,60))
			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REGMNU_CPT_ALF,061,60))
			RPF_COD_DPRO_CPT_ALF = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_PGM),128)
			IF FNC_SYSLEN(RPF_COD_DPRO_CPT_ALF) < 12 THEN
				LL_CPT_NUM = 12 - FNC_SYSLEN(RPF_COD_DPRO_CPT_ALF) 
				FOR AA_CPT_NUM = 1  TO LL_CPT_NUM
					RPF_COD_DPRO_CPT_ALF   = RPF_COD_DPRO_CPT_ALF  + " "
				NEXT AA_CPT_NUM
			ELSE
				IF FNC_SYSLEN(RPF_COD_DPRO_CPT_ALF) > 12 THEN
					RPF_COD_DPRO_CPT_ALF  = FNC_SYSRIGHT(RPF_COD_DPRO_CPT_ALF,12)
				END IF
			END IF
			RPF_COD_TREG_CPT_ALF = "P"
			RPF_COD_CORR_CPT_ALF = "0"
                        RPF_COD_DARC_CPT_ALF = "        "
			RPF_COD_DATA_CPT_ALF = TPG_GLS_SIS_CPT_ALF + FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_FRM),128) 
			RPF_COD_DATA_CPT_ALF = RPF_COD_DATA_CPT_ALF +  TPG_GLS_SIS_CPT_ALF + FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_FRM),128)
			IF FNC_SYSLEN(RPF_COD_DATA_CPT_ALF ) < 70 THEN
				LL_CPT_NUM = 70 - FNC_SYSLEN(RPF_COD_DATA_CPT_ALF ) 
				FOR AA_CPT_NUM = 1  TO LL_CPT_NUM
					RPF_COD_DATA_CPT_ALF  = RPF_COD_DATA_CPT_ALF   + " "
				NEXT AA_CPT_NUM
			END IF
			BUFOUT = ESCR_PI1(MG_0,"REGRPF" + TPG_GLS_SIS_CPT_ALF)
			REGMNU_CPT_ALF = RPF_COD_DPRO_CPT_ALF + RPF_COD_TREG_CPT_ALF + RPF_COD_CORR_CPT_ALF  +RPF_COD_DARC_CPT_ALF  + RPF_COD_DATA_CPT_ALF  
			IF FNC_SYSLEN(REGMNU_CPT_ALF) <> 92 THEN
				BUFOUT = FNC_PRINT( "ERROR EN CONSTRUCCION DE REGISTRO RPF -P0- ")
				BUFOUT = FNC_PRINT( "LARGO " + FNC_SYSSTR(FNC_SYSLEN(REGMNU_CPT_ALF)))
				BUFOUT = FNC_PRINT( " REGISTRO RPF : ")
				BUFOUT = FNC_PRINT( REGMNU_CPT_ALF)
			END IF
			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REGMNU_CPT_ALF,001,60))
			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REGMNU_CPT_ALF,061,60))
		NEXT JJ_CPT_NUM
	NEXT II_CPT_NUM

 !!! GENERACION DE REGISTROS RPF CON COMANDOS
	TOT_PGM_CPT_NUM = 0
	FOR II_CPT_NUM = 1 TO TPG_TOT_REQ 
		FOR JJ_CPT_NUM = 1 TO TPG_VEC_NUM_TRN(II_CPT_NUM)
			ENC_PGM_CPT_ALF = "NO"
			FOR ZZZ_CPT_NUM = 1 TO TOT_PGM_CPT_NUM
				IF TPG_MAT_TRN_PGM(ZZZ_CPT_NUM,CTE_TRN_PGM) = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_PGM),128) THEN
					IF TPG_MAT_TRN_PGM(ZZZ_CPT_NUM,CTE_TRN_CMN) = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_CMN),128) THEN
						IF TPG_MAT_TRN_PGM(ZZZ_CPT_NUM,CTE_TRN_SPP) = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_SPP),128) THEN
					ENC_PGM_CPT_ALF = "SI"
					ZZZ_CPT_NUM = TOT_PGM_CPT_NUM + 1
						END IF
					END IF
				END IF
			NEXT ZZZ_CPT_NUM
			IF ENC_PGM_CPT_ALF = "NO" THEN
				TOT_PGM_CPT_NUM = TOT_PGM_CPT_NUM + 1
				TPG_MAT_TRN_PGM(TOT_PGM_CPT_NUM,CTE_TRN_PGM) = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_PGM),128)
				TPG_MAT_TRN_PGM(TOT_PGM_CPT_NUM,CTE_TRN_CPP) = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_CPP),128)
				TPG_MAT_TRN_PGM(TOT_PGM_CPT_NUM,CTE_TRN_SPP) = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_SPP),128)
				TPG_MAT_TRN_PGM(TOT_PGM_CPT_NUM,CTE_TRN_SUB) = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_SUB),128)
				TPG_MAT_TRN_PGM(TOT_PGM_CPT_NUM,CTE_TRN_CMN) = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_CMN),128)
				TPG_MAT_TRN_PGM(TOT_PGM_CPT_NUM,CTE_TRN_CNF) = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_CNF),128)
			END IF
		NEXT JJ_CPT_NUM
	NEXT II_CPT_NUM

	FOR YYY_CPT_NUM = 1 TO TOT_PGM_CPT_NUM
	FOR ZZZ_CPT_NUM = 1 TO TOT_PGM_CPT_NUM
		IF TPG_MAT_TRN_PGM(YYY_CPT_NUM,CTE_TRN_PGM) > TPG_MAT_TRN_PGM(ZZZ_CPT_NUM,CTE_TRN_PGM) THEN

			AUX_PGM_CPT_ALF = TPG_MAT_TRN_PGM(ZZZ_CPT_NUM,CTE_TRN_PGM)
			AUX_CMN_CPT_ALF = TPG_MAT_TRN_PGM(ZZZ_CPT_NUM,CTE_TRN_CMN)
			AUX_CPP_CPT_ALF = TPG_MAT_TRN_PGM(ZZZ_CPT_NUM,CTE_TRN_CPP)
			AUX_SPP_CPT_ALF = TPG_MAT_TRN_PGM(ZZZ_CPT_NUM,CTE_TRN_SPP)
			AUX_SUB_CPT_ALF = TPG_MAT_TRN_PGM(ZZZ_CPT_NUM,CTE_TRN_SUB)
			AUX_CNF_CPT_ALF = TPG_MAT_TRN_PGM(ZZZ_CPT_NUM,CTE_TRN_CNF)

			TPG_MAT_TRN_PGM(ZZZ_CPT_NUM,CTE_TRN_PGM) = TPG_MAT_TRN_PGM(YYY_CPT_NUM,CTE_TRN_PGM) 
			TPG_MAT_TRN_PGM(ZZZ_CPT_NUM,CTE_TRN_CMN) = TPG_MAT_TRN_PGM(YYY_CPT_NUM,CTE_TRN_CMN) 
			TPG_MAT_TRN_PGM(ZZZ_CPT_NUM,CTE_TRN_CPP) = TPG_MAT_TRN_PGM(YYY_CPT_NUM,CTE_TRN_CPP) 
			TPG_MAT_TRN_PGM(ZZZ_CPT_NUM,CTE_TRN_SPP) = TPG_MAT_TRN_PGM(YYY_CPT_NUM,CTE_TRN_SPP) 
			TPG_MAT_TRN_PGM(ZZZ_CPT_NUM,CTE_TRN_SUB) = TPG_MAT_TRN_PGM(YYY_CPT_NUM,CTE_TRN_SUB) 
			TPG_MAT_TRN_PGM(ZZZ_CPT_NUM,CTE_TRN_CNF) = TPG_MAT_TRN_PGM(YYY_CPT_NUM,CTE_TRN_CNF) 

			TPG_MAT_TRN_PGM(YYY_CPT_NUM,CTE_TRN_PGM) = AUX_PGM_CPT_ALF
			TPG_MAT_TRN_PGM(YYY_CPT_NUM,CTE_TRN_CMN) = AUX_CMN_CPT_ALF
			TPG_MAT_TRN_PGM(YYY_CPT_NUM,CTE_TRN_CPP) = AUX_CPP_CPT_ALF
			TPG_MAT_TRN_PGM(YYY_CPT_NUM,CTE_TRN_SPP) = AUX_SPP_CPT_ALF
			TPG_MAT_TRN_PGM(YYY_CPT_NUM,CTE_TRN_SUB) = AUX_SUB_CPT_ALF
			TPG_MAT_TRN_PGM(YYY_CPT_NUM,CTE_TRN_CNF) = AUX_CNF_CPT_ALF

		END IF
	NEXT ZZZ_CPT_NUM
	NEXT YYY_CPT_NUM

	FOR ZZZ_CPT_NUM = 1 TO TOT_PGM_CPT_NUM
		IF AUX_PGM_CPT_ALF <> TPG_MAT_TRN_PGM(ZZZ_CPT_NUM,CTE_TRN_PGM) THEN
			COR_PGM_CPT_NUM = 0
			AUX_PGM_CPT_ALF = TPG_MAT_TRN_PGM(ZZZ_CPT_NUM,CTE_TRN_PGM)
		ELSE
			COR_PGM_CPT_NUM = COR_PGM_CPT_NUM + 1
		END IF

		RPF_COD_DPRO_CPT_ALF = TPG_MAT_TRN_PGM(ZZZ_CPT_NUM,CTE_TRN_PGM) 
		IF FNC_SYSLEN(RPF_COD_DPRO_CPT_ALF) < 12 THEN
			LL_CPT_NUM = 12 - FNC_SYSLEN(RPF_COD_DPRO_CPT_ALF) 
			FOR AA_CPT_NUM = 1  TO LL_CPT_NUM
				RPF_COD_DPRO_CPT_ALF   = RPF_COD_DPRO_CPT_ALF  + " "
			NEXT AA_CPT_NUM
		ELSE
			IF FNC_SYSLEN(RPF_COD_DPRO_CPT_ALF) > 12 THEN
				RPF_COD_DPRO_CPT_ALF  = FNC_SYSRIGHT(RPF_COD_DPRO_CPT_ALF,12)
			END IF
		END IF

		RPF_COD_CONF_CPT_ALF =  TPG_MAT_TRN_PGM(ZZZ_CPT_NUM,CTE_TRN_CNF)
		IF FNC_SYSLEN(RPF_COD_CONF_CPT_ALF) < 25 THEN
			LL_CPT_NUM = 25 - FNC_SYSLEN(RPF_COD_CONF_CPT_ALF) 
			FOR AA_CPT_NUM = 1  TO LL_CPT_NUM
				RPF_COD_CONF_CPT_ALF  = RPF_COD_CONF_CPT_ALF  + " "
			NEXT AA_CPT_NUM
		END IF

		RPF_COD_TREG_CPT_ALF = "C"
		RPF_COD_CORR_CPT_ALF = FNC_SYSSTR(COR_PGM_CPT_NUM)
		RPF_COD_DARC_CPT_ALF = "        "
		RPF_COD_CMND_CPT_ALF =  TPG_MAT_TRN_PGM(ZZZ_CPT_NUM,CTE_TRN_CMN)
		RPF_COD_UARC_CPT_ALF =  TPG_MAT_TRN_PGM(ZZZ_CPT_NUM,CTE_TRN_SUB) + "    "
		RPF_GLS_DAT1_CPT_ALF = "                         " + RPF_COD_CONF_CPT_ALF  + RPF_COD_UARC_CPT_ALF 
		RPF_COD_CCPP_CPT_ALF =  TPG_MAT_TRN_PGM(ZZZ_CPT_NUM,CTE_TRN_CPP)
		RPF_COD_STPP_CPT_ALF =  TPG_MAT_TRN_PGM(ZZZ_CPT_NUM,CTE_TRN_SPP)
		RPF_GLS_DAT2_CPT_ALF = " "
 


		BUFOUT = ESCR_PI1(MG_0,"REGRPF" + TPG_GLS_SIS_CPT_ALF)
		REGMNU_CPT_ALF = RPF_COD_DPRO_CPT_ALF + RPF_COD_TREG_CPT_ALF + RPF_COD_CORR_CPT_ALF  + RPF_COD_DARC_CPT_ALF  + RPF_COD_CMND_CPT_ALF 
		REGMNU_CPT_ALF = REGMNU_CPT_ALF +  RPF_GLS_DAT1_CPT_ALF + RPF_COD_CCPP_CPT_ALF + RPF_COD_STPP_CPT_ALF + RPF_GLS_DAT2_CPT_ALF 
		IF FNC_SYSLEN(REGMNU_CPT_ALF) <> 92 THEN
				BUFOUT = FNC_PRINT( "ERROR EN CONSTRUCCION DE REGISTRO RPF -P#- ")
				BUFOUT = FNC_PRINT( "LARGO " + FNC_SYSSTR(FNC_SYSLEN(REGMNU_CPT_ALF)))
				BUFOUT = FNC_PRINT( " REGISTRO RPF : ")
				BUFOUT = FNC_PRINT( REGMNU_CPT_ALF)
		END IF
		BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REGMNU_CPT_ALF,001,60))
		BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REGMNU_CPT_ALF,061,60))
	NEXT ZZZ_CPT_NUM

 !!! FIN GENERACION DE REGISTROS RPF CON COMANDOS

	BUFOUT = ESCR_PI1(MG_0,"FINPI1")
	IF WSS_DPP = "S" THEN
		BUFOUT = FNC_PRINT( " FIN           PASO " + FNC_SYSSTR(PASO_CPT_NUM) + "/" + FNC_SYSSTR(TOT_PASOS) + " REGISTROS HST Y SRV")
		BUFOUT = FNC_PRINT(" REGISTROS HST Y SRV")
	END IF

    END DEF


       DEF STRING FNC_FORM_PCAPT
	IF WSS_DPP = "S" THEN
		BUFOUT = FNC_PRINT(" INICIO PASO " + FNC_SYSSTR(PASO_CPT_NUM) + "/" + FNC_SYSSTR(TOT_PASOS) + "FORMATO PCAPT")
		BUFOUT = FNC_PRINT("FORMATO PCAPT")
	END IF
	FIRST_CPT_NUM = 1
 !!!	REGMNU_CPT_ALF = "SEC-DSP-VAR SECTION."
 !!!	BUFOUT = ESCR_DFI(MG_8,REGMNU_CPT_ALF)
 !!!	REGMNU_CPT_ALF = "INI-SEC-DSP-VAR."
 !!!	BUFOUT = ESCR_DFI(MG_8,REGMNU_CPT_ALF)


	FOR II_CPT_NUM = 1 TO TPG_TOT_REQ 
		LRG_ESTR_CPT_NUM = 0
		REGMNU_CPT_ALF = " "
		BUFOUT = ESCR_WS1(MG_7,REGMNU_CPT_ALF)
 !!!		IF FIRST_CPT_NUM <> 1 THEN
 !!!			REGMNU_CPT_ALF = "GO TO FIN-SEC-DSP-VAR."
 !!!			BUFOUT = ESCR_DFI(MG_16,REGMNU_CPT_ALF)
 !!!		END IF
		IF FIRST_CPT_NUM = 1 THEN
			FIRST_CPT_NUM = 0
		END IF 

		REGMNU_CPT_ALF = " "
		BUFOUT = ESCR_WS1(MG_7,REGMNU_CPT_ALF)
		REGMNU_CPT_ALF = "  =========================== PT-" + TPG_VEC_REQ(II_CPT_NUM)  + " ==========================="
		BUFOUT = ESCR_WS1(MG_7,REGMNU_CPT_ALF)
		REGMNU_CPT_ALF = " "
		BUFOUT = ESCR_WS1(MG_7,REGMNU_CPT_ALF)


		NIV_ESC_CPT_NUM = NIV_01
		REGMNU_CPT_ALF = "  DOCSER : " + TPG_VEC_DEF_REQ(II_CPT_NUM) 
		BUFOUT = ESCR_WS1(MG_7,REGMNU_CPT_ALF)

		REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "PT-" + TPG_VEC_REQ(II_CPT_NUM)  + " " + "REDEFINES WSS-RCV."
		BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)

 !!!		REGMNU_CPT_ALF = "IF VAR-COD-REQU = '" + TPG_VEC_REQ(II_CPT_NUM) + "'"
 !!!		BUFOUT = ESCR_DFI(MG_12,REGMNU_CPT_ALF)
 !!!		REGMNU_CPT_ALF = "MOVE VAR-GLS-DATA TO PT-" + TPG_VEC_REQ(II_CPT_NUM) 
 !!!		BUFOUT = ESCR_DFI(MG_16,REGMNU_CPT_ALF)
		ANTE_CPT_ALF = " "

		IF TPG_HDR_RCV <> 0 THEN
			NIV_ESC_CPT_NUM = NIV_03
			REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "PT-" + TPG_VEC_REQ(II_CPT_NUM)  + "-RCV-HDR	   PIC X(" + FNC_SYSSTR(TPG_HDR_RCV) + ")."
			BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
			LRG_ESTR_CPT_NUM = TPG_HDR_RCV
		END IF

		CON_NIV_CPT_NUM = CON_NIV_CPT_NUM  + 1
		CON_NIV_CPT_ALF = FNC_SYSSTR(CON_NIV_CPT_NUM)
		WHILE FNC_SYSLEN(CON_NIV_CPT_ALF) < 5 
			CON_NIV_CPT_ALF = "0" + CON_NIV_CPT_ALF
	        NEXT

		NIV_ESC_CPT_NUM = NIV_03
		 REGMNU_CPT_ALF =  "P" +  CON_NIV_CPT_ALF  + NIV_SEP(10) + NIV_PIC(NIV_ESC_CPT_NUM) + "PT-" 
		 REGMNU_CPT_ALF =  REGMNU_CPT_ALF +   TPG_VEC_REQ(II_CPT_NUM)  + "-CREQ                                 PIC X(00003)."
		 BUFOUT = ESCR_WS1((NIV_00),REGMNU_CPT_ALF)

		CON_NIV_ANT_CPT_NUM = 3  
		 NIV_ESC_CPT_NUM = NIV_03
		REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "PT-" + TPG_VEC_REQ(II_CPT_NUM)  +"-DMSG."
		BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)

		ANT_CPT_NUM = TPG_MAT_NIV_IDPT(II_CPT_NUM,1,1)
		ANT_CPT_NUM = 0
		ANT2_CPT_NUM = 0
		NIV_ESC_CPT_NUM = NIV_05
		TPG_CON_TRN = 0
		TPG_CON  = 0
		OCCUR2_CPT_ALF = "N"
		LRG_ESTR_CPT_NUM = LRG_ESTR_CPT_NUM  + 3
		FOR JJ_CPT_NUM = 1 TO TPG_MAT_CAM_PT(II_CPT_NUM) 
			SIS_PAN_CPT_ALF =  FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_CMN),128) 
			SIS_PAN_CPT_ALF =  SIS_PAN_CPT_ALF +   FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_INS),128)
			REGMNU_CPT_ALF = ""
			REGMNU_CPT_ALF = "      *  " + SIS_PAN_CPT_ALF
 			BUFOUT = ESCR_WS1(NIV_MRG(2),REGMNU_CPT_ALF)

			PUT_PTHDR_CPT_ALF = "SI"
			PUT_HDR_CPT_ALF = "NO"
			OLD_IDX_CPT_ALF = "NO"

			MUL_NIV_UNO_CPT_NUM =  TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,1) 
			IF MUL_NIV_UNO_CPT_NUM =  0 THEN
				MUL_NIV_UNO_CPT_NUM =  1
			END IF

			MUL_NIV_DOS_CPT_NUM = 1
			MUL_NIV_TRE_CPT_NUM = 1
			IF TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,1)  = 0  THEN  
				OCCUR1_CPT_ALF = "N"
				REPT_CPT_ALF = " "   
			END IF
			IF TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,2)  = 0  THEN  
				OCCUR2_CPT_ALF = "N"
			END IF

			TPG_CON  = TPG_CON  + 1
			XX_CPT_ALF = FNC_SYSSTR(TPG_CON) 
			IF FNC_SYSLEN(XX_CPT_ALF) < 2 THEN
				XX_CPT_ALF = "0" + XX_CPT_ALF
			END IF

			IF (TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,1) <> ANT_CPT_NUM  AND TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,1) <> 0) THEN
				PRI_IF = "S"
			END IF
 			IF TPG_MAT_INIIDXPT(II_CPT_NUM,JJ_CPT_NUM) = SI_INICIA_IDX_PT AND TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,2)  = 0  THEN
				SEG_IF = "S"
			END IF
			IF PRI_IF = "S" OR SEG_IF = "S" THEN
					REGMNU_CPT_ALF = "05  PT-" + TPG_VEC_REQ(II_CPT_NUM)  +"-DMSG-IDX-1-" + XX_CPT_ALF + " OCCURS" + " " 
					REGMNU_CPT_ALF = REGMNU_CPT_ALF +  FNC_SYSSTR(TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,1)) + " TIMES."
					BUFOUT = ESCR_WS1(MG_16,REGMNU_CPT_ALF)
					REPT_CPT_ALF = FNC_SYSSTR(TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,1)) 
					REPT1_CPT_NUM = TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,1) 
					OCCUR1_CPT_NUM = TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,1) - 1
					OCCUR1_CPT_ALF = "S"
					PRI_IF = "N" 
					SEG_IF = "N" 
			END IF


			 IF (TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,2) <> ANT2_CPT_NUM  AND TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,2) <> 0) THEN
				PRI_IF = "S"
			END IF

			IF (TPG_MAT_INIIDXPT(II_CPT_NUM,JJ_CPT_NUM) = SI_INICIA_IDX_PT AND TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,2) <> 0) THEN
				SEG_IF = "S"
			END IF
			IF PRI_IF = "S" OR SEG_IF = "S" THEN
					REGMNU_CPT_ALF = "07  PT-" + TPG_VEC_REQ(II_CPT_NUM)  +"-DMSG-IDX-2-" + XX_CPT_ALF + " OCCURS" + " " 
					REGMNU_CPT_ALF = REGMNU_CPT_ALF +  FNC_SYSSTR(TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,2))  + " TIMES."
					BUFOUT = ESCR_WS1(MG_20,REGMNU_CPT_ALF)
					REPT_CPT_ALF = FNC_SYSSTR(TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,2)) 
					OCCUR2_CPT_NUM = TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,2) - 1
					OCCUR2_CPT_ALF = "S"
					PRI_IF = "N" 
					SEG_IF = "N" 
			END IF



			ANT_CPT_NUM = TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,1)
			ANT2_CPT_NUM = TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,2)
			HST_CPT_NUM = 0

			FOR GG_CPT_NUM = 1 TO TPG_TOT_HST
				IF (TPG_MAT_HST_ALF(GG_CPT_NUM,CTE_IDX_NOM) = TPG_MAT_PTFRM(II_CPT_NUM,JJ_CPT_NUM)) THEN
					HST_CPT_NUM = GG_CPT_NUM
					GG_CPT_NUM = TPG_TOT_HST + 1
				END IF
			NEXT GG_CPT_NUM
			SRV_CPT_NUM = 0
			FOR GG_CPT_NUM = 1 TO TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TSF) 
				IF (TPG_MAT_SRV_ALF(HST_CPT_NUM,GG_CPT_NUM) =  FNC_SYSEDIT(TPG_MAT_PTFMT(II_CPT_NUM,JJ_CPT_NUM),128)) THEN
					SRV_CPT_NUM = GG_CPT_NUM
					GG_CPT_NUM = TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TSF) + 1
				END IF
			NEXT GG_CPT_NUM
			FOR GG_CPT_NUM = 1 TO TPG_MAT_NCP_SRV(HST_CPT_NUM,SRV_CPT_NUM)
				
				N_IDX_CPT_NUM = 0
				FOR XX_CPT_NUM = 1 TO TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TCF)
					TPGMATNAMEFLDSRV = FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128)
					IF TPG_MAT_NAMEFLDHST(HST_CPT_NUM,XX_CPT_NUM) = TPGMATNAMEFLDSRV THEN
						N_IDX_CPT_NUM = N_IDX_CPT_NUM + 1
					END IF
				NEXT XX_CPT_NUM
				NN_IDX_CPT_NUM = TPG_MAT_TOTOCCFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM) 
				FOR TT_CPT_NUM = 1 TO TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TCF)
					TPGMATNAMEFLDSRV = FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128)
					IF TPGMATNAMEFLDSRV = TPG_MAT_NAMEFLDHST(HST_CPT_NUM,TT_CPT_NUM) THEN
						CAMP_CPT_NUM = TT_CPT_NUM
						TT_CPT_NUM = TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TCF) + 1
					END IF
				NEXT TT_CPT_NUM
				ESCR_CPT_ALF = "SI"
				IF N_IDX_CPT_NUM > 1 THEN
					UU_CPT_NUM = GG_CPT_NUM - 1
					FOR XX_CPT_NUM = 1 TO UU_CPT_NUM
						TPGMATNAMEFLDSRV = FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,XX_CPT_NUM),128)
						IF TPGMATNAMEFLDSRV = TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM) THEN
							ESCR_CPT_ALF = "NO"
						END IF
					NEXT XX_CPT_NUM
				END IF
				AA_CPT_ALF = FNC_SYSSTR(TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM)) 
				
				IF OCCUR2_CPT_ALF = "S" THEN
					NIV_ESC_CPT_NUM = NIV_09
				ELSE
					IF OCCUR1_CPT_ALF = "S" THEN
						NIV_ESC_CPT_NUM = NIV_07
					ELSE
						NIV_ESC_CPT_NUM  = NIV_05
					END IF			
				END IF			



				IF OCCUR2_CPT_ALF = "S" THEN
					NUEVE_CPT_ALF = "S"
					CON_NIV2_CPT_NUM =  CON_NIV2_CPT_NUM + TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM)
					CON_NIV_CPT_NUM =  CON_NIV_CPT_NUM + CON_NIV_ANT_CPT_NUM 
				ELSE
					IF OCCUR1_CPT_ALF = "S" THEN
						SIETE_CPT_ALF = "S"
						IF NUEVE_CPT_ALF = "S" THEN
							CON_NIV1_CPT_NUM = CON_NIV1_CPT_NUM + (CON_NIV2_CPT_NUM * OCCUR2_CPT_NUM) + TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM)
							CON_NIV_CPT_NUM = CON_NIV_CPT_NUM + (CON_NIV2_CPT_NUM * OCCUR2_CPT_NUM) + CON_NIV_ANT_CPT_NUM 
							CON_NIV2_CPT_NUM = 0
							NUEVE_CPT_ALF = "N"
						ELSE
							CON_NIV1_CPT_NUM = CON_NIV1_CPT_NUM + TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM)
							CON_NIV_CPT_NUM = CON_NIV_CPT_NUM + CON_NIV_ANT_CPT_NUM 
						END IF 
					ELSE
						IF SIETE_CPT_ALF = "S" THEN
							 CON_NIVV_CPT_NUM = CON_NIV_CPT_NUM  +  (CON_NIV1_CPT_NUM * OCCUR1_CPT_NUM) + CON_NIV_ANT_CPT_NUM 
							 CON_NIV_CPT_NUM = CON_NIV_CPT_NUM  +  (CON_NIV1_CPT_NUM * OCCUR1_CPT_NUM) + CON_NIV_ANT_CPT_NUM 
							CON_NIV1_CPT_NUM = 0
							SIETE_CPT_ALF = "N"
						ELSE
							CON_NIVV_CPT_NUM =  CON_NIVV_CPT_NUM + CON_NIV_ANT_CPT_NUM 
							CON_NIV_CPT_NUM =  CON_NIV_CPT_NUM + CON_NIV_ANT_CPT_NUM 
						END IF
					END IF			
				END IF			

				CON_NIV_CPT_ALF = FNC_SYSSTR(CON_NIV_CPT_NUM)
				WHILE FNC_SYSLEN(CON_NIV_CPT_ALF) < 5 
					CON_NIV_CPT_ALF = "0" + CON_NIV_CPT_ALF
	     			NEXT
				CON_NIV_ANT_CPT_NUM  =  TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM)

				IF N_IDX_CPT_NUM  > 1 THEN
					OLD_IDX_CPT_ALF = "SI"
					IF PUT_HDR_CPT_ALF = "NO" THEN
						PUT_HDR_CPT_ALF = "SI"
						YY_CPT_ALF = FNC_SYSSTR(JJ_CPT_NUM)
						IF FNC_SYSLEN(YY_CPT_ALF) = 1 THEN
							YY_CPT_ALF = "0" + YY_CPT_ALF
						END IF
						YY_CPT_ALF = "-" + YY_CPT_ALF
						REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "PT-" + TPG_VEC_REQ(II_CPT_NUM)  
						REGMNU_CPT_ALF = REGMNU_CPT_ALF +  YY_CPT_ALF +	"-FLD-HST OCCURS " + FNC_SYSSTR(N_IDX_CPT_NUM) + " TIMES."
						BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
						MUL_NIV_TRE_CPT_NUM = N_IDX_CPT_NUM

					END IF
					NIV_ESC_CPT_NUM = NIV_ESC_CPT_NUM + 1
				ELSE
					IF OLD_IDX_CPT_ALF = "SI" THEN
						OLD_IDX_CPT_ALF = "NO"
					END IF
				END IF

 !!!				IF ESCR_CPT_ALF = "SI"  AND TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM) <> "" THEN
				IF ESCR_CPT_ALF = "SI"  THEN
					LRG_ESTR_CPT_NUM  = LRG_ESTR_CPT_NUM  + (TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM) *  MUL_NIV_UNO_CPT_NUM  * MUL_NIV_DOS_CPT_NUM *	MUL_NIV_TRE_CPT_NUM)
					YY_CPT_ALF = FNC_SYSSTR(JJ_CPT_NUM)
					IF FNC_SYSLEN(YY_CPT_ALF) = 1 THEN
						YY_CPT_ALF = "0" + YY_CPT_ALF
					END IF
					YY_CPT_ALF = "-" + YY_CPT_ALF
					IF NIV_ESC_CPT_NUM = 5 THEN
						SEP_CPT_NUM = 11
					ELSE
						IF NIV_ESC_CPT_NUM = 6 THEN
							SEP_CPT_NUM = 12
						ELSE
							IF NIV_ESC_CPT_NUM = 7 THEN
								SEP_CPT_NUM = 13
							ELSE
								SEP_CPT_NUM = 14
							END IF
						END IF
					END IF

					GLS_CPT_CMT$ = " DOCFLD : " + FNC_SYSEDIT(TPG_MAT_IDENFLDHST(HST_CPT_NUM,CAMP_CPT_NUM),16%)
					BUFOUT = ESCR_WS1(MG_7,GLS_CPT_CMT$)

					 REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) 
					 REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +  "PT-" + TPG_VEC_REQ(II_CPT_NUM)  
					 REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +   YY_CPT_ALF + "-" 
					 REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +   FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) + " "
					REGMNU_2_CPT_ALF = "PIC X(" +  NUM5(AA_CPT_ALF) + ")." 
					REGMNU_1_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
					REGMNU_CPT_ALF = "P" +  CON_NIV_CPT_ALF  + NIV_SEP(SEP_CPT_NUM)  + REGMNU_1_CPT_ALF
					BUFOUT = ESCR_WS1(MG_0,REGMNU_CPT_ALF)

				END IF
			NEXT GG_CPT_NUM
		NEXT JJ_CPT_NUM
		LRG_ESTR_CPT_NUM = TPG_LRG_RCV_CPT_NUM - LRG_ESTR_CPT_NUM 
		IF LRG_ESTR_CPT_NUM  > 0 THEN
			IF  TPG_LRG_RCV_CPT_NUM = LRG_ESTR_CPT_NUM  THEN
				NIV_ESC_CPT_NUM = NIV_05
			ELSE
				NIV_ESC_CPT_NUM = NIV_03
			END IF
			REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "PT-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" 
			REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +  "FRM-GLS-DISP" + " "
			AA_CPT_ALF = FNC_SYSSTR(LRG_ESTR_CPT_NUM)
			REGMNU_2_CPT_ALF = "PIC X(" +  NUM5(AA_CPT_ALF) + ")." 
			REGMNU_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
			BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
		ELSE
				BUFOUT = FNC_PRINT(" LARGO DE ESTR MAYOR QUE   " + FNC_SYSSTR(LRG_ESTR_CPT_NUM) + " " + FNC_SYSSTR(TPG_LRG_RCV_CPT_NUM))
		END IF
	NEXT II_CPT_NUM

	IF WSS_DPP = "S" THEN
		BUFOUT = FNC_PRINT( " FIN           PASO " + FNC_SYSSTR(PASO_CPT_NUM) + "/" + FNC_SYSSTR(TOT_PASOS) + "FORMATO PCAPT")
		BUFOUT = FNC_PRINT("FORMATO PCAPT")
	END IF
       END DEF

       DEF STRING  FNC_FORM_MXAPT

	PASO_CPT_NUM = PASO_CPT_NUM + 1
	IF WSS_DPP = "S" THEN
		BUFOUT = FNC_PRINT(" INICIO PASO " + FNC_SYSSTR(PASO_CPT_NUM) + "/" + FNC_SYSSTR(TOT_PASOS) + " FORMATO MXAPT ")
		BUFOUT = FNC_PRINT( " FORMATO MXAPT ")
	END IF

	FRS_LRG_XT_CPT_ALF = "SI"
	FOR II_CPT_NUM = 1 TO TPG_TOT_REQ 
		REGMNU_CPT_ALF = " "
		BUFOUT = ESCR_WS1(MG_7,REGMNU_CPT_ALF)
		REGMNU_CPT_ALF = " FORMATO MXAPT"
		BUFOUT = ESCR_WS1(MG_7,REGMNU_CPT_ALF)

		REGMNU_CPT_ALF = " "
		BUFOUT = ESCR_WS1(MG_7,REGMNU_CPT_ALF)
		REGMNU_CPT_ALF = "  =========================== XT-" + TPG_VEC_REQ(II_CPT_NUM)  + " ==========================="
		BUFOUT = ESCR_WS1(MG_7,REGMNU_CPT_ALF)
		REGMNU_CPT_ALF = " "
		BUFOUT = ESCR_WS1(MG_7,REGMNU_CPT_ALF)

		REGMNU_CPT_ALF = " DOCSER :  " + TPG_VEC_DEF_REQ(II_CPT_NUM) 
		BUFOUT = ESCR_WS1(MG_7,REGMNU_CPT_ALF)

		REGMNU_CPT_ALF = "01  XT-" + TPG_VEC_REQ(II_CPT_NUM)  + " " + "REDEFINES WSS-RCV."
		BUFOUT = ESCR_WS1(MG_8,REGMNU_CPT_ALF)

		NIV_ESC_CPT_NUM = NIV_03
		REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "XT-" + TPG_VEC_REQ(II_CPT_NUM)  +"-DMSG."
		BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)

		ANT_CPT_NUM = TPG_MAT_NIV_IDXT(II_CPT_NUM,1,1)
		ANT_CPT_NUM = 0
		OCCUR1_CPT_ALF = "N"
		OCCUR2_CPT_ALF = "N"
		LRG_ESTR_CPT_NUM = 0  
		TPG_CON_TRN = 0

		CON_NIV1_CPT_NUM = 0
		CON_NIV2_CPT_NUM = 0
		CON_NIV_CPT_NUM = 0
		CON_NIV_ANT_CPT_NUM  = 1
		FOR JJ_CPT_NUM = 1 TO TPG_MAT_CAM_XT(II_CPT_NUM)
			SIS_PAN_CPT_ALF =  FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_CMN),128) 
			SIS_PAN_CPT_ALF =  SIS_PAN_CPT_ALF + FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_INS),128)
			REGMNU_CPT_ALF = ""
			REGMNU_CPT_ALF = "      *  " + SIS_PAN_CPT_ALF
			BUFOUT = ESCR_WS1(MG_7,REGMNU_CPT_ALF)
 
			PUT_HDR_CPT_ALF = "NO"
			OLD_IDX_CPT_ALF = "NO"
			MUL_NIV_UNO_CPT_NUM =  TPG_MAT_NIV_IDXT(II_CPT_NUM,JJ_CPT_NUM,1) 
			IF MUL_NIV_UNO_CPT_NUM =  0 THEN
				MUL_NIV_UNO_CPT_NUM =  1
			END IF
			MUL_NIV_DOS_CPT_NUM = 1
			MUL_NIV_TRE_CPT_NUM = 1
			IF TPG_MAT_NIV_IDXT(II_CPT_NUM,JJ_CPT_NUM,1)  = 0  THEN  
				OCCUR1_CPT_ALF = "N"
			END IF
			IF TPG_MAT_NIV_IDXT(II_CPT_NUM,JJ_CPT_NUM,2)  = 0  THEN  
				OCCUR2_CPT_ALF = "N"
			END IF

			TPG_CON_TRN  = TPG_CON_TRN  + 1
			AA_CPT_ALF = FNC_SYSSTR(TPG_CON_TRN) 
			IF FNC_SYSLEN(AA_CPT_ALF) < 2 THEN
				AA_CPT_ALF = "0" + AA_CPT_ALF
			END IF

			 IF (TPG_MAT_NIV_IDXT(II_CPT_NUM,JJ_CPT_NUM,1) <> ANT_CPT_NUM  AND TPG_MAT_NIV_IDXT(II_CPT_NUM,JJ_CPT_NUM,1) <> 0) THEN
				PRI_IF = "S"
			END IF
			 IF TPG_MAT_INIIDXXT(II_CPT_NUM,JJ_CPT_NUM) = SI_INICIA_IDX_XT AND TPG_MAT_NIV_IDXT(II_CPT_NUM,JJ_CPT_NUM,2)  = 0  THEN
				SEG_IF = "S"
			END IF
			IF PRI_IF = "S" OR SEG_IF = "S" THEN
					REGMNU_CPT_ALF = "05  XT-" + TPG_VEC_REQ(II_CPT_NUM)  +"-DMSG-IDX-1-" + AA_CPT_ALF + " OCCURS" + " " 
					REGMNU_CPT_ALF = REGMNU_CPT_ALF +  FNC_SYSSTR(TPG_MAT_NIV_IDXT(II_CPT_NUM,JJ_CPT_NUM,1)) + " TIMES."
					BUFOUT = ESCR_WS1(MG_16,REGMNU_CPT_ALF)
					OCCUR1_CPT_ALF = "S"
					OCCUR1_CPT_NUM = TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,1) - 1
					PRI_IF = "N"
					SEG_IF = "N"
			END IF


			 IF (TPG_MAT_NIV_IDXT(II_CPT_NUM,JJ_CPT_NUM,2) <> ANT2_CPT_NUM  AND TPG_MAT_NIV_IDXT(II_CPT_NUM,JJ_CPT_NUM,2) <> 0) THEN
				PRI_IF = "S" 
			END IF
			 IF (TPG_MAT_INIIDXXT(II_CPT_NUM,JJ_CPT_NUM) = SI_INICIA_IDX_XT AND TPG_MAT_NIV_IDXT(II_CPT_NUM,JJ_CPT_NUM,2) <> 0) THEN
				SEG_IF = "S" 
			END IF
			IF PRI_IF = "S" OR SEG_IF = "S" THEN
					REGMNU_CPT_ALF = "07  XT-" + TPG_VEC_REQ(II_CPT_NUM)  +"-DMSG-IDX-2-" + AA_CPT_ALF + " OCCURS" + " " 
					REGMNU_CPT_ALF = REGMNU_CPT_ALF +  FNC_SYSSTR(TPG_MAT_NIV_IDXT(II_CPT_NUM,JJ_CPT_NUM,2))  + " TIMES."
					BUFOUT = ESCR_WS1(MG_20,REGMNU_CPT_ALF)
					OCCUR2_CPT_ALF = "S"
					OCCUR2_CPT_NUM = TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,2) - 1
					PRI_IF = "N"
					SEG_IF = "N"
			END IF



			ANT_CPT_NUM = TPG_MAT_NIV_IDXT(II_CPT_NUM,JJ_CPT_NUM,1)
			ANT2_CPT_NUM = TPG_MAT_NIV_IDXT(II_CPT_NUM,JJ_CPT_NUM,2)

			FOR GG_CPT_NUM = 1  TO TPG_TOT_HST 
				IF (TPG_MAT_HST_ALF(GG_CPT_NUM,CTE_IDX_NOM) = TPG_MAT_XTFRM(II_CPT_NUM,JJ_CPT_NUM)) THEN
					HST_CPT_NUM = GG_CPT_NUM
					GG_CPT_NUM = TPG_TOT_HST + 1
				END IF
			NEXT GG_CPT_NUM

			FOR GG_CPT_NUM = 1 TO TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TSF) 
				IF (TPG_MAT_SRV_ALF(HST_CPT_NUM,GG_CPT_NUM) =  FNC_SYSEDIT(TPG_MAT_XTFMT(II_CPT_NUM,JJ_CPT_NUM),128)) THEN
					SRV_CPT_NUM = GG_CPT_NUM
					GG_CPT_NUM = TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TSF) + 1
				END IF
			NEXT GG_CPT_NUM
			FOR GG_CPT_NUM = 1 TO TPG_MAT_NCP_SRV(HST_CPT_NUM,SRV_CPT_NUM)

				N_IDX_CPT_NUM = 0
				FOR XX_CPT_NUM = 1 TO TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TCF)
					IF TPG_MAT_NAMEFLDHST(HST_CPT_NUM,XX_CPT_NUM) = FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) THEN
						N_IDX_CPT_NUM = N_IDX_CPT_NUM + 1
					END IF
				NEXT XX_CPT_NUM
				NN_IDX_CPT_NUM = TPG_MAT_TOTOCCFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM) 


				FOR TT_CPT_NUM = 1 TO TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TCF)
					IF FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) = TPG_MAT_NAMEFLDHST(HST_CPT_NUM,TT_CPT_NUM) THEN
						CAMP_CPT_NUM = TT_CPT_NUM
						TT_CPT_NUM = TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TCF) + 1
					END IF
				NEXT TT_CPT_NUM

				ESCR_CPT_ALF = "SI"
				IF N_IDX_CPT_NUM > 1 THEN
					UU_CPT_NUM = GG_CPT_NUM - 1
					FOR XX_CPT_NUM = 1 TO UU_CPT_NUM
						IF FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,XX_CPT_NUM),128) = FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) THEN
							ESCR_CPT_ALF = "NO"
						END IF
					NEXT XX_CPT_NUM
				END IF

				AA_CPT_ALF = FNC_SYSSTR(TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM)) 
 
				IF OCCUR2_CPT_ALF = "S" THEN
					NIV_ESC_CPT_NUM = NIV_09
				ELSE
					IF OCCUR1_CPT_ALF = "S" THEN
						NIV_ESC_CPT_NUM = NIV_07
					ELSE
						NIV_ESC_CPT_NUM  = NIV_05
					END IF			
				END IF			

				IF OCCUR2_CPT_ALF = "S" THEN
					NUEVE_CPT_ALF = "S"
					 CON_NIV2_CPT_NUM =  CON_NIV2_CPT_NUM + TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM)
					CON_NIV_CPT_NUM =  CON_NIV_CPT_NUM + CON_NIV_ANT_CPT_NUM 
				ELSE
					IF OCCUR1_CPT_ALF = "S" THEN
						SIETE_CPT_ALF = "S"
						IF NUEVE_CPT_ALF = "S" THEN
							 CON_NIV1_CPT_NUM = CON_NIV1_CPT_NUM + (CON_NIV2_CPT_NUM * OCCUR2_CPT_NUM) + TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM)
							CON_NIV_CPT_NUM = CON_NIV_CPT_NUM + (CON_NIV2_CPT_NUM * OCCUR2_CPT_NUM) + CON_NIV_ANT_CPT_NUM 
							CON_NIV2_CPT_NUM = 0
							NUEVE_CPT_ALF = "N"
						ELSE
							 CON_NIV1_CPT_NUM = CON_NIV1_CPT_NUM + TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM)
							CON_NIV_CPT_NUM = CON_NIV_CPT_NUM + CON_NIV_ANT_CPT_NUM 
						END IF 
					ELSE
						IF SIETE_CPT_ALF = "S" THEN
							 CON_NIVV_CPT_NUM = CON_NIV_CPT_NUM  +  (CON_NIV1_CPT_NUM * OCCUR1_CPT_NUM) + CON_NIV_ANT_CPT_NUM 
							 CON_NIV_CPT_NUM = CON_NIV_CPT_NUM  +  (CON_NIV1_CPT_NUM * OCCUR1_CPT_NUM) + CON_NIV_ANT_CPT_NUM 
							CON_NIV1_CPT_NUM = 0
							SIETE_CPT_ALF = "N"
						ELSE
							CON_NIVV_CPT_NUM =  CON_NIVV_CPT_NUM + CON_NIV_ANT_CPT_NUM 
							CON_NIV_CPT_NUM =  CON_NIV_CPT_NUM + CON_NIV_ANT_CPT_NUM 
						END IF
					END IF			
				END IF			

				IF N_IDX_CPT_NUM  > 1 THEN
					OLD_IDX_CPT_ALF = "SI"
					IF PUT_HDR_CPT_ALF = "NO" THEN
						PUT_HDR_CPT_ALF = "SI"
						REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "XT-" + TPG_VEC_REQ(II_CPT_NUM)  
						REGMNU_CPT_ALF = REGMNU_CPT_ALF +  "-FLD-HST OCCURS " + FNC_SYSSTR(N_IDX_CPT_NUM) + " TIMES."
						BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
						MUL_NIV_TRE_CPT_NUM = N_IDX_CPT_NUM
					END IF
					NIV_ESC_CPT_NUM = NIV_ESC_CPT_NUM + 1
				ELSE
					IF OLD_IDX_CPT_ALF = "SI" THEN
						OLD_IDX_CPT_ALF = "NO"
					END IF
				END IF

				CON_NIV_CPT_ALF = FNC_SYSSTR(CON_NIV_CPT_NUM)
				WHILE FNC_SYSLEN(CON_NIV_CPT_ALF) < 5 
					CON_NIV_CPT_ALF = "0" + CON_NIV_CPT_ALF
	     			NEXT
				CON_NIV_ANT_CPT_NUM  =  TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM)

				IF NIV_ESC_CPT_NUM = 5 THEN
					SEP_CPT_NUM = 11
				ELSE
					IF NIV_ESC_CPT_NUM = 6 THEN
						SEP_CPT_NUM = 12
					ELSE
						IF NIV_ESC_CPT_NUM = 7 THEN
							SEP_CPT_NUM = 13
						ELSE
							SEP_CPT_NUM = 14
						END IF
					END IF
				END IF

				 IF ESCR_CPT_ALF = "SI" THEN
					LRG_ESTR_CPT_NUM  = LRG_ESTR_CPT_NUM  + (TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM) *  MUL_NIV_UNO_CPT_NUM  * MUL_NIV_DOS_CPT_NUM * MUL_NIV_TRE_CPT_NUM)
					YY_CPT_ALF = FNC_SYSSTR(JJ_CPT_NUM)
					IF FNC_SYSLEN(YY_CPT_ALF) = 1 THEN
						YY_CPT_ALF = "0" + YY_CPT_ALF
					END IF
					YY_CPT_ALF = "-" + YY_CPT_ALF

					GLS_CPT_CMT$ = " DOCFLD : " + FNC_SYSEDIT(TPG_MAT_IDENFLDHST(HST_CPT_NUM,CAMP_CPT_NUM),16%)
					BUFOUT = ESCR_WS1(MG_7,GLS_CPT_CMT$)

					 REGMNU_1_CPT_ALF =  NIV_PIC(NIV_ESC_CPT_NUM) 
					 REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +  "XT-" + TPG_VEC_REQ(II_CPT_NUM) 
					 REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +  YY_CPT_ALF + "-" 
					 REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +  FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) + " "
					 REGMNU_2_CPT_ALF = "PIC X(" +  NUM5(AA_CPT_ALF) + ")." 
					REGMNU_1_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
					 REGMNU_CPT_ALF = "P" +  CON_NIV_CPT_ALF   +  NIV_SEP(SEP_CPT_NUM)  + REGMNU_1_CPT_ALF 
					  BUFOUT = ESCR_WS1(MG_0,REGMNU_CPT_ALF)
				END IF
			NEXT GG_CPT_NUM
		NEXT JJ_CPT_NUM
		LRG_XT_TP_CPT_NUM = LRG_ESTR_CPT_NUM 
		LRG_XT_TP_CPT_ALF = FNC_SYSSTR(LRG_XT_TP_CPT_NUM)
		IF FNC_SYSLEN(LRG_XT_TP_CPT_ALF) = 1 THEN
			LRG_XT_TP_CPT_ALF = "0000" + LRG_XT_TP_CPT_ALF
		ELSE
		IF FNC_SYSLEN(LRG_XT_TP_CPT_ALF) = 2 THEN
			LRG_XT_TP_CPT_ALF = "000" + LRG_XT_TP_CPT_ALF
		ELSE
		IF FNC_SYSLEN(LRG_XT_TP_CPT_ALF) = 3 THEN
			LRG_XT_TP_CPT_ALF = "00" + LRG_XT_TP_CPT_ALF
		ELSE
		IF FNC_SYSLEN(LRG_XT_TP_CPT_ALF) = 4 THEN
			LRG_XT_TP_CPT_ALF = "0" + LRG_XT_TP_CPT_ALF
		END IF
		END IF
		END IF
		END IF

		IF FRS_LRG_XT_CPT_ALF = "SI" THEN
			  NIV_ESC_CPT_NUM = NIV_01
			REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "TPG-LRG-XT."
			BUFOUT = ESCR_WS3(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
			FRS_LRG_XT_CPT_ALF = "NO"
		END IF
		LRG_ESTR_CPT_NUM = TPG_LRG_SND_CPT_NUM - LRG_ESTR_CPT_NUM 
		IF LRG_ESTR_CPT_NUM > 0 THEN
			IF  TPG_LRG_SND_CPT_NUM = LRG_ESTR_CPT_NUM THEN
				NIV_ESC_CPT_NUM = NIV_05
			ELSE
				NIV_ESC_CPT_NUM = NIV_03
			END IF

			REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "XT-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" 
			REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +  "FRM-GLS-DISP" + " "
			AA_CPT_ALF = FNC_SYSSTR(LRG_ESTR_CPT_NUM) 
			REGMNU_2_CPT_ALF = "PIC X(" +  NUM5(AA_CPT_ALF) + ")." 
			REGMNU_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
			BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)

			NIV_ESC_CPT_NUM = NIV_03
			REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "TPG-LRG-XT-" + TPG_VEC_REQ(II_CPT_NUM) + "     VALUE  " + LRG_XT_TP_CPT_ALF 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF +  " PIC 9(05)."
			BUFOUT = ESCR_WS3(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
		ELSE
			BUFOUT = FNC_PRINT( " LARGO DE ESTR MAYOR QUE  TPG_LRG_SND " + FNC_SYSSTR(LRG_ESTR_CPT_NUM) + " " + FNC_SYSSTR(TPG_LRG_SND_CPT_NUM))
		END IF
	NEXT II_CPT_NUM
	IF WSS_DPP = "S" THEN
		BUFOUT = FNC_PRINT( " FIN           PASO " + FNC_SYSSTR(PASO_CPT_NUM) + "/" + FNC_SYSSTR(TOT_PASOS) + " FORMATO MXAPT ")
		BUFOUT = FNC_PRINT(" FORMATO MXAPT ")
	END IF

   END DEF

        DEF STRING  FNC_MOV_PTAMX
	FIRST_CPT_NUM = 1
 !!!	REGMNU_CPT_ALF = "SEC-DSP-RAV SECTION."
 !!!	BUFOUT = ESCR_DFO(MG_8,REGMNU_CPT_ALF)
 !!!	REGMNU_CPT_ALF = "INI-SEC-DSP-RAV."
 !!!	BUFOUT = ESCR_DFO(MG_8,REGMNU_CPT_ALF)

	FOR II_CPT_NUM = 1 TO TPG_TOT_REQ
		 REGMNU_CPT_ALF = " "
		BUFOUT = ESCR_WS2(MG_7,REGMNU_CPT_ALF)
 !!!		IF FIRST_CPT_NUM <> 1 THEN
 !!!			REGMNU_CPT_ALF = "GO TO FIN-SEC-DSP-RAV."
 !!!			BUFOUT = ESCR_DFO(MG_16,REGMNU_CPT_ALF)
 !!!		END IF
		IF FIRST_CPT_NUM = 1 THEN
			FIRST_CPT_NUM = 0
		END IF
 !!!		REGMNU_CPT_ALF = "IF WSS-COD-REQU = '" +   TPG_VEC_REQ(II_CPT_NUM)  + "'"
 !!!		BUFOUT = ESCR_DFO(MG_12,REGMNU_CPT_ALF)
 !!!		REGMNU_CPT_ALF = "MOVE RAV-GLS-DISP TO TP-" +   TPG_VEC_REQ(II_CPT_NUM)
 !!!		BUFOUT = ESCR_DFO(MG_16,REGMNU_CPT_ALF)
		ANTE_CPT_ALF = " "

		REGMNU_CPT_ALF = " "
		BUFOUT = ESCR_WS2(MG_7,REGMNU_CPT_ALF)
		REGMNU_CPT_ALF = "  =========================== TP-" + TPG_VEC_REQ(II_CPT_NUM)  + " ==========================="
		BUFOUT = ESCR_WS2(MG_7,REGMNU_CPT_ALF)
		REGMNU_CPT_ALF = " "
		BUFOUT = ESCR_WS2(MG_7,REGMNU_CPT_ALF)

		REGMNU_CPT_ALF = "  DOCSER " + TPG_VEC_DEF_REQ(II_CPT_NUM)
		BUFOUT = ESCR_WS2(MG_7,REGMNU_CPT_ALF)

		REGMNU_CPT_ALF = "01  TP-" + TPG_VEC_REQ(II_CPT_NUM)  + " " + "REDEFINES WSS-SND."
		BUFOUT = ESCR_WS2(MG_8,REGMNU_CPT_ALF)


		CON_NIV_CPT_NUM = 0
		CON_NIV_CPT_NUM = CON_NIV_CPT_NUM  + 1
		CON_NIV_CPT_ALF = FNC_SYSSTR(CON_NIV_CPT_NUM)
		WHILE FNC_SYSLEN(CON_NIV_CPT_ALF) < 5 
			CON_NIV_CPT_ALF = "0" + CON_NIV_CPT_ALF
	        NEXT

		NIV_ESC_CPT_NUM = NIV_03

		 REGMNU_1_CPT_ALF = "03  TP-" + TPG_VEC_REQ(II_CPT_NUM)  + "-STAT "
		REGMNU_2_CPT_ALF = "PIC X(00001)."
		REGMNU_1_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,MG_12)
		 REGMNU_CPT_ALF =  "P" +  CON_NIV_CPT_ALF  + NIV_SEP(10) + REGMNU_1_CPT_ALF
		   BUFOUT = ESCR_WS2(MG_0,REGMNU_CPT_ALF)
		CON_NIV_ANT_CPT_NUM = 1

		CON_NIV_CPT_NUM = CON_NIV_CPT_NUM  + 1
		CON_NIV_CPT_ALF = FNC_SYSSTR(CON_NIV_CPT_NUM)
		WHILE FNC_SYSLEN(CON_NIV_CPT_ALF) < 5 
			CON_NIV_CPT_ALF = "0" + CON_NIV_CPT_ALF
	        NEXT

		REGMNU_1_CPT_ALF = "03  TP-" + TPG_VEC_REQ(II_CPT_NUM)  + "-MENS "
		REGMNU_2_CPT_ALF = "PIC X(00079)."
		REGMNU_1_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,MG_12)
		 REGMNU_CPT_ALF =  "P" +  CON_NIV_CPT_ALF  + NIV_SEP(10) + REGMNU_1_CPT_ALF
		 BUFOUT = ESCR_WS2(MG_0,REGMNU_CPT_ALF)
		CON_NIV_ANT_CPT_NUM = 79

		REGMNU_CPT_ALF = "03  TP-" + TPG_VEC_REQ(II_CPT_NUM)  +"-DMSG."
		BUFOUT = ESCR_WS2(MG_12,REGMNU_CPT_ALF)
		ANT_CPT_NUM = TPG_MAT_NIV_IDTP(II_CPT_NUM,1,1)
		ANT_CPT_NUM = 0
		TPG_CON_TRN = 0
		OCCUR1_CPT_ALF = "N"
		OCCUR2_CPT_ALF = "N"
		LRG_ESTR_CPT_NUM = 80
		MUL_NIV_UNO_CPT_NUM =  TPG_MAT_NIV_IDTP(II_CPT_NUM, 1, 1) 
		IF MUL_NIV_UNO_CPT_NUM =  0 THEN
			MUL_NIV_UNO_CPT_NUM =  1
		END IF
		MUL_NIV_DOS_CPT_NUM = 1
		MUL_NIV_TRE_CPT_NUM = 1
		FOR JJ_CPT_NUM = 1 TO TPG_MAT_CAM_TP(II_CPT_NUM) 
			SIS_PAN_CPT_ALF =  FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_CMN),128) 
			SIS_PAN_CPT_ALF =  SIS_PAN_CPT_ALF +   FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_INS),128)
			REGMNU_CPT_ALF = ""
			REGMNU_CPT_ALF = "      *  " + SIS_PAN_CPT_ALF
			BUFOUT = ESCR_WS2(NIV_MRG(2),REGMNU_CPT_ALF)

			PUT_HDR_CPT_ALF = "NO"
			OLD_IDX_CPT_ALF = "NO"
			IF TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,1)  = 0  THEN  
				OCCUR1_CPT_ALF = "N"
				REPT_CPT_ALF = " "
			END IF
			IF TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,2)  = 0  THEN  
				OCCUR2_CPT_ALF = "N"
			END IF
			TPG_CON_TRN  = TPG_CON_TRN  + 1
			AA_CPT_ALF = FNC_SYSSTR(TPG_CON_TRN) 
			IF FNC_SYSLEN(AA_CPT_ALF) < 2 THEN
				AA_CPT_ALF = "0" + AA_CPT_ALF
			END IF
			 IF (TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,1) <> ANT_CPT_NUM  AND TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,1) <> 0) THEN
				PRI_IF = "S"
			END IF
			 IF TPG_MAT_INIIDXTP(II_CPT_NUM,JJ_CPT_NUM) = SI_INICIA_IDX_TP AND TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,2)  = 0  THEN
				SEG_IF = "S"
			END IF
			IF PRI_IF = "S" OR SEG_IF = "S" THEN
					REGMNU_CPT_ALF = "05  TP-" + TPG_VEC_REQ(II_CPT_NUM)  +"-DMSG-IDX-1-" + AA_CPT_ALF + " OCCURS" + " " 
					REGMNU_CPT_ALF = REGMNU_CPT_ALF +  FNC_SYSSTR(TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,1)) + " TIMES."
					BUFOUT = ESCR_WS2(MG_16,REGMNU_CPT_ALF)
					REPT_CPT_ALF = FNC_SYSSTR(TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,1)) 
					OCCUR1_CPT_ALF = "S"
					MUL_NIV_UNO_CPT_NUM =  TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,1) 
					MULT1_CPT_NUM = TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,1) - 1
					OCCUR1_CPT_NUM = TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,1) - 1
					PRI_IF = "N"
					SEG_IF = "N"
			END IF



			IF (TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,2) <> ANT2_CPT_NUM  AND TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,2) <> 0) THEN
				PRI_IF = "S"
			END IF
			 IF (TPG_MAT_INIIDXTP(II_CPT_NUM,JJ_CPT_NUM) = SI_INICIA_IDX_TP AND TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,2) <> 0) THEN
				SEG_IF = "S"
			END IF
  
			IF PRI_IF = "S" OR SEG_IF = "S" THEN
					REGMNU_CPT_ALF = "07  TP-" + TPG_VEC_REQ(II_CPT_NUM)  +"-DMSG-IDX-2-" + AA_CPT_ALF + " OCCURS" + " " 
					REGMNU_CPT_ALF = REGMNU_CPT_ALF +  FNC_SYSSTR(TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,2))  + " TIMES."
					BUFOUT = ESCR_WS2(MG_20,REGMNU_CPT_ALF)
					REPT_CPT_ALF = FNC_SYSSTR(TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,2)) 
					OCCUR2_CPT_ALF = "S"
					MUL_NIV_DOS_CPT_NUM =  TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,2) 
					MULT2_CPT_NUM = TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,1) - 1
					OCCUR1_CPT_NUM = TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,1) - 1
					PRI_IF = "N"
					SEG_IF = "N"
			END IF



			ANT_CPT_NUM = TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,1)
			ANT2_CPT_NUM = TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,2)

			FOR GG_CPT_NUM = 1 TO TPG_TOT_HST
				TPGMATTPFRM_CPT_ALF = FNC_SYSEDIT(TPG_MAT_TPFRM(II_CPT_NUM,JJ_CPT_NUM),128)
				IF (TPG_MAT_HST_ALF(GG_CPT_NUM,CTE_IDX_NOM) = TPGMATTPFRM_CPT_ALF) THEN
					HST_CPT_NUM = GG_CPT_NUM
					GG_CPT_NUM = TPG_TOT_HST + 1
				END IF
			NEXT GG_CPT_NUM

			FOR GG_CPT_NUM = 1 TO TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TSF) 
				TPGMATTPFMT = FNC_SYSEDIT(TPG_MAT_TPFMT(II_CPT_NUM,JJ_CPT_NUM),128)
				IF TPG_MAT_SRV_ALF(HST_CPT_NUM,GG_CPT_NUM) =  TPGMATTPFMT THEN
					SRV_CPT_NUM = GG_CPT_NUM
					GG_CPT_NUM = TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TSF) + 1
				END IF
			NEXT GG_CPT_NUM
			FOR GG_CPT_NUM = 1 TO TPG_MAT_NCP_SRV(HST_CPT_NUM,SRV_CPT_NUM)
				N_IDX_CPT_NUM = 0
				FOR XX_CPT_NUM = 1 TO TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TCF)
					IF TPG_MAT_NAMEFLDHST(HST_CPT_NUM,XX_CPT_NUM) = FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) THEN
						N_IDX_CPT_NUM = N_IDX_CPT_NUM + 1
					END IF
				NEXT XX_CPT_NUM
				NN_IDX_CPT_NUM = TPG_MAT_TOTOCCFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM) 

				FOR TT_CPT_NUM = 1 TO TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TCF)
					IF FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) = TPG_MAT_NAMEFLDHST(HST_CPT_NUM,TT_CPT_NUM) THEN
						CAMP_CPT_NUM = TT_CPT_NUM
						TT_CPT_NUM = TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TCF) + 1
					END IF
				NEXT TT_CPT_NUM

				ESCR_CPT_ALF = "SI"
				IF N_IDX_CPT_NUM > 1 THEN
					UU_CPT_NUM = GG_CPT_NUM - 1
					FOR XX_CPT_NUM = 1 TO UU_CPT_NUM
						IF FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,XX_CPT_NUM),128) = FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) THEN
							ESCR_CPT_ALF = "NO"
						END IF
					NEXT XX_CPT_NUM
				END IF


				AA_CPT_ALF = FNC_SYSSTR(TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM)) 
 
				IF OCCUR2_CPT_ALF = "S" THEN
					NIV_ESC_CPT_NUM = NIV_09
				ELSE
					IF OCCUR1_CPT_ALF = "S" THEN
						NIV_ESC_CPT_NUM = NIV_07
					ELSE
						NIV_ESC_CPT_NUM  = NIV_05
					END IF			
				END IF			

				IF OCCUR2_CPT_ALF = "S" THEN
					NUEVE_CPT_ALF = "S"
					 CON_NIV2_CPT_NUM =  CON_NIV2_CPT_NUM + TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM)
					CON_NIV_CPT_NUM =  CON_NIV_CPT_NUM + CON_NIV_ANT_CPT_NUM 
				ELSE
					IF OCCUR1_CPT_ALF = "S" THEN
						SIETE_CPT_ALF = "S"
						IF NUEVE_CPT_ALF = "S" THEN
							CON_NIV1_CPT_NUM = CON_NIV_CPT_NUM + (CON_NIV2_CPT_NUM * OCCUR2_CPT_NUM) + TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM)
							CON_NIV_CPT_NUM = CON_NIV_CPT_NUM + (CON_NIV2_CPT_NUM * OCCUR2_CPT_NUM) + CON_NIV_ANT_CPT_NUM 
							CON_NIV2_CPT_NUM = 0
							NUEVE_CPT_ALF = "N"
						ELSE
							CON_NIV1_CPT_NUM = CON_NIV1_CPT_NUM + TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM)
							CON_NIV_CPT_NUM = CON_NIV_CPT_NUM + CON_NIV_ANT_CPT_NUM 
						END IF 
					ELSE
						IF SIETE_CPT_ALF = "S" THEN
							 CON_NIVV_CPT_NUM = CON_NIV_CPT_NUM  +  (CON_NIV1_CPT_NUM * OCCUR1_CPT_NUM) + CON_NIV_ANT_CPT_NUM 
							 CON_NIV_CPT_NUM = CON_NIV_CPT_NUM  +  (CON_NIV1_CPT_NUM * OCCUR1_CPT_NUM) + CON_NIV_ANT_CPT_NUM 
							CON_NIV1_CPT_NUM = 0
							SIETE_CPT_ALF = "N"
						ELSE
							CON_NIVV_CPT_NUM =  CON_NIVV_CPT_NUM + CON_NIV_ANT_CPT_NUM 
							CON_NIV_CPT_NUM =  CON_NIV_CPT_NUM + CON_NIV_ANT_CPT_NUM 
						END IF
					END IF			
				END IF			

				 CON_NIV_CPT_ALF = FNC_SYSSTR(CON_NIV_CPT_NUM)
				WHILE FNC_SYSLEN(CON_NIV_CPT_ALF) < 5 
					CON_NIV_CPT_ALF = "0" + CON_NIV_CPT_ALF
	     			NEXT
				CON_NIV_ANT_CPT_NUM  =  TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM)

				IF N_IDX_CPT_NUM  > 1 THEN
					OLD_IDX_CPT_ALF = "SI"
					IF PUT_HDR_CPT_ALF = "NO" THEN
						PUT_HDR_CPT_ALF = "SI"
						REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "TP-" + TPG_VEC_REQ(II_CPT_NUM)  
						REGMNU_CPT_ALF = REGMNU_CPT_ALF +  "-FLD-HST OCCURS " + FNC_SYSSTR(N_IDX_CPT_NUM) + " TIMES."
						BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
						MUL_NIV_TRE_CPT_NUM = N_IDX_CPT_NUM
					END IF
					NIV_ESC_CPT_NUM = NIV_ESC_CPT_NUM + 1
				ELSE
					IF OLD_IDX_CPT_ALF = "SI" THEN
						OLD_IDX_CPT_ALF = "NO"
					END IF
				END IF

				IF NIV_ESC_CPT_NUM = 5 THEN
					SEP_CPT_NUM = 11
				ELSE
					IF NIV_ESC_CPT_NUM = 6 THEN
						SEP_CPT_NUM = 12
					ELSE
						IF NIV_ESC_CPT_NUM = 7 THEN
							SEP_CPT_NUM = 13
						ELSE
							SEP_CPT_NUM = 14
						END IF
					END IF
				END IF

				IF ESCR_CPT_ALF = "SI" THEN
					LRG_ESTR_CPT_NUM  = LRG_ESTR_CPT_NUM  + (TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM) *  MUL_NIV_UNO_CPT_NUM  * MUL_NIV_DOS_CPT_NUM * MUL_NIV_TRE_CPT_NUM)
					YY_CPT_ALF = FNC_SYSSTR(JJ_CPT_NUM)
					IF FNC_SYSLEN(YY_CPT_ALF) = 1 THEN
						YY_CPT_ALF = "0" + YY_CPT_ALF
					END IF
					YY_CPT_ALF = "-" + YY_CPT_ALF

					GLS_CPT_CMT$ = " DOCFLD : " + FNC_SYSEDIT(TPG_MAT_IDENFLDHST(HST_CPT_NUM,CAMP_CPT_NUM),16%)
					BUFOUT = ESCR_WS2(MG_7,GLS_CPT_CMT$)

					REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "TP-" + TPG_VEC_REQ(II_CPT_NUM)  
					REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +  YY_CPT_ALF + "-" 
					REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +  FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) + " "
					REGMNU_2_CPT_ALF = "PIC X(" +  NUM5(AA_CPT_ALF) + ")." 
					REGMNU_1_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
					  REGMNU_CPT_ALF =  "P" +  CON_NIV_CPT_ALF  + NIV_SEP(SEP_CPT_NUM) + REGMNU_1_CPT_ALF
					 BUFOUT = ESCR_WS2(MG_0,REGMNU_CPT_ALF)
					SEP_ANT_CPT_NUM = SEP_CPT_NUM

 !!!					 IF YY_CPT_ALF <> ANTE_CPT_ALF THEN
 !!!						 ANTE_CPT_ALF = YY_CPT_ALF
 !!!						IF REPT_CPT_ALF <> " " THEN
 !!!							 REGMNU_CPT_ALF = "PERFORM  DSP-TP-" + TPG_VEC_REQ(II_CPT_NUM)  + YY_CPT_ALF + " VARYING "  
 !!!							 BUFOUT = ESCR_DFO(MG_16,REGMNU_CPT_ALF)
 !!!							REGMNU_CPT_ALF = "TPG-I FROM 1 BY 1 UNTIL TPG-I > " +   REPT_CPT_ALF 
 !!!							BUFOUT = ESCR_DFO(MG_20,REGMNU_CPT_ALF)
 !!!						ELSE
 !!!							 REGMNU_CPT_ALF = "PERFORM  DSP-TP-" + TPG_VEC_REQ(II_CPT_NUM)  + YY_CPT_ALF   
 !!!							 BUFOUT = ESCR_DFO(MG_16,REGMNU_CPT_ALF)
 !!!						END IF
 !!!					END IF
				END IF
			NEXT GG_CPT_NUM
		NEXT JJ_CPT_NUM
		LRG_PT_TX_CPT_NUM = LRG_ESTR_CPT_NUM - 80
		LRG_PT_TX_CPT_ALF = FNC_SYSSTR(LRG_PT_TX_CPT_NUM)
		IF FNC_SYSLEN(LRG_PT_TX_CPT_ALF) = 1 THEN
			LRG_PT_TX_CPT_ALF = "0000" + LRG_PT_TX_CPT_ALF 
		ELSE
		IF FNC_SYSLEN(LRG_PT_TX_CPT_ALF) = 2 THEN
			LRG_PT_TX_CPT_ALF = "000" + LRG_PT_TX_CPT_ALF 
		ELSE
		IF FNC_SYSLEN(LRG_PT_TX_CPT_ALF) = 3 THEN
			LRG_PT_TX_CPT_ALF = "00" + LRG_PT_TX_CPT_ALF 
		ELSE
		IF FNC_SYSLEN(LRG_PT_TX_CPT_ALF) = 4 THEN
			LRG_PT_TX_CPT_ALF = "0" + LRG_PT_TX_CPT_ALF 
		END IF
		END IF
		END IF
		END IF
		LRG_ESTR_CPT_NUM = TPG_LRG_SND_CPT_NUM - LRG_ESTR_CPT_NUM 
		IF LRG_ESTR_CPT_NUM > 0 THEN
			IF  TPG_LRG_SND_CPT_NUM = (LRG_ESTR_CPT_NUM + 80) THEN
				NIV_ESC_CPT_NUM = NIV_05
			ELSE
				NIV_ESC_CPT_NUM = NIV_03
			END IF
			REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "TP-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" 
			REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +  "FRM-GLS-DISP" + " "
			AA_CPT_ALF = FNC_SYSSTR(LRG_ESTR_CPT_NUM) 
			REGMNU_2_CPT_ALF = "PIC X(" +  NUM5(AA_CPT_ALF) + ")." 
			REGMNU_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
			BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
			NIV_ESC_CPT_NUM = NIV_03
			REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) +  "TPG-LRG-TP-" + TPG_VEC_REQ(II_CPT_NUM)  + "     VALUE  " 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF +  LRG_PT_TX_CPT_ALF +  " PIC 9(05)."
			BUFOUT = ESCR_WS3(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
		ELSE
			BUFOUT = FNC_PRINT(" LARGO DE ESTR MAYOR QUE TPG_LRG_SND " + FNC_SYSSTR(LRG_ESTR_CPT_NUM) + " " + FNC_SYSSTR(TPG_LRG_SND_CPT_NUM))
		END IF
	NEXT II_CPT_NUM
 !!!	REGMNU_CPT_ALF = "GO TO FIN-SEC-DSP-RAV."
 !!!	BUFOUT = ESCR_DFO(MG_16,REGMNU_CPT_ALF)
 !!!	REGMNU_CPT_ALF = "FIN-SEC-DSP-RAV."   
 !!!	BUFOUT = ESCR_DFO(MG_8,REGMNU_CPT_ALF)
 !!!	REGMNU_CPT_ALF = "EXIT."   
 !!!	BUFOUT = ESCR_DFO(MG_12,REGMNU_CPT_ALF)
 !!!	REGMNU_CPT_ALF = " "   
 !!!	BUFOUT = ESCR_DFO(MG_12,REGMNU_CPT_ALF)

	FOR II_CPT_NUM = 1 TO TPG_TOT_REQ 
		REGMNU_CPT_ALF = " "
		BUFOUT = ESCR_WS2(MG_7,REGMNU_CPT_ALF)
		REGMNU_CPT_ALF = " FORMATO PTATX"
		BUFOUT = ESCR_WS2(MG_7,REGMNU_CPT_ALF)
		REGMNU_CPT_ALF = " "
		BUFOUT = ESCR_WS2(MG_7,REGMNU_CPT_ALF)
		REGMNU_CPT_ALF = "  =========================== TX-" + TPG_VEC_REQ(II_CPT_NUM)  + " ==========================="
		BUFOUT = ESCR_WS2(MG_7,REGMNU_CPT_ALF)
		REGMNU_CPT_ALF = " "
		BUFOUT = ESCR_WS2(MG_7,REGMNU_CPT_ALF)

		REGMNU_CPT_ALF = "  DOCSER : " + TPG_VEC_DEF_REQ(II_CPT_NUM) 
		BUFOUT = ESCR_WS2(MG_7,REGMNU_CPT_ALF)

		REGMNU_CPT_ALF = "01  TX-" + TPG_VEC_REQ(II_CPT_NUM)  + " " + "REDEFINES WSS-SND."
		BUFOUT = ESCR_WS2(MG_8,REGMNU_CPT_ALF)

		NIV_ESC_CPT_NUM = NIV_03
		REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "TX-" + TPG_VEC_REQ(II_CPT_NUM)  +"-DMSG."
		BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
		ANT_CPT_NUM = TPG_MAT_NIV_IDTX(II_CPT_NUM,1,1)
		ANT_CPT_NUM = 0
		OCCUR1_CPT_ALF = "N"
		OCCUR2_CPT_ALF = "N"
		TPG_CON_TRN = 0
		LRG_ESTR_CPT_NUM = 0  
		CON_NIVV_CPT_NUM = 0
		CON_NIV_CPT_NUM = 0
		CON_NIV1_CPT_NUM = 0
		CON_NIV2_CPT_NUM = 0
		CON_NIV_ANT_CPT_NUM = 0

		FOR JJ_CPT_NUM = 1 TO TPG_MAT_CAM_TX(II_CPT_NUM) 
			SIS_PAN_CPT_ALF =  FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM, JJ_CPT_NUM, CTE_TRN_CMN), 128) 
			SIS_PAN_CPT_ALF =  SIS_PAN_CPT_ALF + FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM, JJ_CPT_NUM, CTE_TRN_INS), 128)
			REGMNU_CPT_ALF = ""
			REGMNU_CPT_ALF = "      *  " + SIS_PAN_CPT_ALF
			BUFOUT = ESCR_WS2(NIV_MRG(2), REGMNU_CPT_ALF)

			MUL_NIV_UNO_CPT_NUM =  TPG_MAT_NIV_IDTX(II_CPT_NUM,JJ_CPT_NUM,1) 
			IF MUL_NIV_UNO_CPT_NUM =  0 THEN
				MUL_NIV_UNO_CPT_NUM = 1
			END IF
			MUL_NIV_DOS_CPT_NUM = 1
			MUL_NIV_TRE_CPT_NUM = 1
			PUT_HDR_CPT_ALF = "NO"
			OLD_IDX_CPT_ALF = "NO"
			IF TPG_MAT_NIV_IDTX(II_CPT_NUM,JJ_CPT_NUM,1)  = 0  THEN  
				OCCUR1_CPT_ALF = "N"
			END IF
			IF TPG_MAT_NIV_IDTX(II_CPT_NUM,JJ_CPT_NUM,2)  = 0  THEN  
				OCCUR2_CPT_ALF = "N"
			END IF

			TPG_CON_TRN  = TPG_CON_TRN  + 1
			AA_CPT_ALF = FNC_SYSSTR(TPG_CON_TRN) 
			IF FNC_SYSLEN(AA_CPT_ALF) < 2 THEN
				AA_CPT_ALF = "0" + AA_CPT_ALF
			END IF

			IF (TPG_MAT_NIV_IDTX(II_CPT_NUM,JJ_CPT_NUM,1) <> ANT_CPT_NUM  AND TPG_MAT_NIV_IDTX(II_CPT_NUM,JJ_CPT_NUM,1) <> 0) THEN
				PRI_IF = "S"
			END IF

			IF TPG_MAT_INIIDXTX(II_CPT_NUM,JJ_CPT_NUM) = SI_INICIA_IDX_TX AND TPG_MAT_NIV_IDTX(II_CPT_NUM,JJ_CPT_NUM,2)  = 0  THEN
				SEG_IF = "S"
			END IF
			IF PRI_IF = "S" OR SEG_IF = "S" THEN
					REGMNU_CPT_ALF = "05  TX-" + TPG_VEC_REQ(II_CPT_NUM)  +"-DMSG-IDX-1-" + AA_CPT_ALF + "  OCCURS" + " " 
					REGMNU_CPT_ALF = REGMNU_CPT_ALF +  FNC_SYSSTR(TPG_MAT_NIV_IDTX(II_CPT_NUM,JJ_CPT_NUM,1)) + " TIMES."
					BUFOUT = ESCR_WS2(MG_16,REGMNU_CPT_ALF)
					OCCUR1_CPT_ALF = "S"
					OCCUR1_CPT_NUM = TPG_MAT_NIV_IDTX(II_CPT_NUM,JJ_CPT_NUM,1) - 1
					PRI_IF = "N"
					SEG_IF = "N"
			END IF


			IF (TPG_MAT_NIV_IDTX(II_CPT_NUM,JJ_CPT_NUM,2) <> ANT2_CPT_NUM  AND TPG_MAT_NIV_IDTX(II_CPT_NUM,JJ_CPT_NUM,2) <> 0) THEN
					PRI_IF = "S"
			END IF
			IF (TPG_MAT_INIIDXTX(II_CPT_NUM,JJ_CPT_NUM) = SI_INICIA_IDX_TX AND TPG_MAT_NIV_IDTX(II_CPT_NUM,JJ_CPT_NUM,2) <> 0) THEN
					SEG_IF = "S"
			END IF

			IF PRI_IF = "S" OR SEG_IF = "S" THEN
					REGMNU_CPT_ALF = "07  TX-" + TPG_VEC_REQ(II_CPT_NUM)  +"-DMSG-IDX-2-" + AA_CPT_ALF + " OCCURS" + " " 
					REGMNU_CPT_ALF = REGMNU_CPT_ALF +  FNC_SYSSTR(TPG_MAT_NIV_IDTX(II_CPT_NUM,JJ_CPT_NUM,2))  + " TIMES."
					BUFOUT = ESCR_WS2(MG_20,REGMNU_CPT_ALF)
					OCCUR2_CPT_ALF = "S"
					MUL_NIV_DOS_CPT_NUM =  TPG_MAT_NIV_IDTX(II_CPT_NUM,JJ_CPT_NUM,2) 
					OCCUR2_CPT_NUM = TPG_MAT_NIV_IDTX(II_CPT_NUM,JJ_CPT_NUM,2) - 1
					PRI_IF = "N"
					SEG_IF = "N"
			END IF


			ANT_CPT_NUM = TPG_MAT_NIV_IDTX(II_CPT_NUM,JJ_CPT_NUM,1)
			ANT2_CPT_NUM = TPG_MAT_NIV_IDTX(II_CPT_NUM,JJ_CPT_NUM,2)

			MNU_GLS_PROG_CPT_ALF =  FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_INS),128) 


				IF OCCUR2_CPT_ALF = "S" THEN
					NIV_ESC_CPT_NUM = NIV_09
				ELSE
					IF OCCUR1_CPT_ALF = "S" THEN
						NIV_ESC_CPT_NUM = NIV_07
					ELSE
						NIV_ESC_CPT_NUM  = NIV_05
					END IF			
				END IF			
  !!! SUMA LOS 21 CARACTERES DE HEADER PARA TX

			LRG_ESTR_CPT_NUM  = LRG_ESTR_CPT_NUM  + (21  *  MUL_NIV_UNO_CPT_NUM  * MUL_NIV_DOS_CPT_NUM)
				IF OCCUR2_CPT_ALF = "S" THEN
					NUEVE_CPT_ALF = "S"
					 CON_NIV2_CPT_NUM =  CON_NIV2_CPT_NUM + TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM)
					CON_NIV_CPT_NUM =  CON_NIV_CPT_NUM + CON_NIV_ANT_CPT_NUM 
				ELSE
					IF OCCUR1_CPT_ALF = "S" THEN
						SIETE_CPT_ALF = "S"
						IF NUEVE_CPT_ALF = "S" THEN
							 CON_NIV1_CPT_NUM = CON_NIV_CPT_NUM + (CON_NIV2_CPT_NUM * OCCUR2_CPT_NUM) + TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM)
							CON_NIV_CPT_NUM = CON_NIV_CPT_NUM + (CON_NIV2_CPT_NUM * OCCUR2_CPT_NUM) + CON_NIV_ANT_CPT_NUM 
							CON_NIV2_CPT_NUM = 0
							NUEVE_CPT_ALF = "N"
						ELSE
							 CON_NIV1_CPT_NUM = CON_NIV1_CPT_NUM + TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM)
							CON_NIV_CPT_NUM = CON_NIV_CPT_NUM + CON_NIV_ANT_CPT_NUM 

						END IF 
					ELSE
						IF SIETE_CPT_ALF = "S" THEN
							 CON_NIVV_CPT_NUM = CON_NIV_CPT_NUM  +  (CON_NIV1_CPT_NUM * OCCUR1_CPT_NUM) + CON_NIV_ANT_CPT_NUM 
							 CON_NIV_CPT_NUM = CON_NIV_CPT_NUM  +  (CON_NIV1_CPT_NUM * OCCUR1_CPT_NUM) + CON_NIV_ANT_CPT_NUM 
							CON_NIV1_CPT_NUM = 0
							SIETE_CPT_ALF = "N"
						ELSE
							CON_NIVV_CPT_NUM =  CON_NIVV_CPT_NUM + CON_NIV_ANT_CPT_NUM 
							CON_NIV_CPT_NUM =  CON_NIV_CPT_NUM + CON_NIV_ANT_CPT_NUM 
						END IF
					END IF			
				END IF			
			 CON_NIV_CPT_ALF = FNC_SYSSTR(CON_NIV_CPT_NUM)
			WHILE FNC_SYSLEN(CON_NIV_CPT_ALF) < 5 
				CON_NIV_CPT_ALF = "0" + CON_NIV_CPT_ALF
	     		NEXT

			IF NIV_ESC_CPT_NUM = 5 THEN
				SEP_CPT_NUM = 11
			ELSE
				IF NIV_ESC_CPT_NUM = 6 THEN
					SEP_CPT_NUM = 12
				ELSE
					IF NIV_ESC_CPT_NUM = 7 THEN
						SEP_CPT_NUM = 13
					ELSE
						SEP_CPT_NUM = 14
					END IF
				END IF
			END IF

			REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "TX-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + "-SIST-" 
			REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +  FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_INS),128)   + "             "
			REGMNU_2_CPT_ALF = "PIC X(00003)."
			REGMNU_1_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
			 REGMNU_CPT_ALF =  "P" +  CON_NIV_CPT_ALF  + NIV_SEP(SEP_CPT_NUM) + REGMNU_1_CPT_ALF
			  BUFOUT = ESCR_WS2(MG_0,REGMNU_CPT_ALF)

			CON_NIV_ANT_CPT_NUM = 3

			CON_NIV_CPT_NUM = CON_NIV_CPT_NUM  + CON_NIV_ANT_CPT_NUM 
			CON_NIV_CPT_ALF = FNC_SYSSTR(CON_NIV_CPT_NUM)
			WHILE FNC_SYSLEN(CON_NIV_CPT_ALF) < 5 
				CON_NIV_CPT_ALF = "0" + CON_NIV_CPT_ALF
	     		NEXT

			REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "TX-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + "-NEMO-" 
			REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +  FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_INS),128) 
			REGMNU_2_CPT_ALF = "PIC X(00012)."
			REGMNU_1_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
			 REGMNU_CPT_ALF =  "P" +  CON_NIV_CPT_ALF  + NIV_SEP(SEP_CPT_NUM) + REGMNU_1_CPT_ALF
			  BUFOUT = ESCR_WS2(MG_0,REGMNU_CPT_ALF)

			CON_NIV_ANT_CPT_NUM = 12

			CON_NIV_CPT_NUM = CON_NIV_CPT_NUM  + CON_NIV_ANT_CPT_NUM 
			CON_NIV_CPT_ALF = FNC_SYSSTR(CON_NIV_CPT_NUM)
			WHILE FNC_SYSLEN(CON_NIV_CPT_ALF) < 5 
				CON_NIV_CPT_ALF = "0" + CON_NIV_CPT_ALF
	     		NEXT
			REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "TX-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" +  AA_CPT_ALF + "-FINP-" 
			REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +  FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_INS),128)
			REGMNU_2_CPT_ALF = "PIC X(00003)."
			REGMNU_1_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
			 REGMNU_CPT_ALF =  "P" +  CON_NIV_CPT_ALF  + NIV_SEP(SEP_CPT_NUM) + REGMNU_1_CPT_ALF
			  BUFOUT = ESCR_WS2(MG_0,REGMNU_CPT_ALF)

			CON_NIV_ANT_CPT_NUM = 3

			CON_NIV_CPT_NUM = CON_NIV_CPT_NUM  + CON_NIV_ANT_CPT_NUM 
			CON_NIV_CPT_ALF = FNC_SYSSTR(CON_NIV_CPT_NUM)
			WHILE FNC_SYSLEN(CON_NIV_CPT_ALF) < 5 
				CON_NIV_CPT_ALF = "0" + CON_NIV_CPT_ALF
	     		NEXT
			REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "TX-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + "-FOUT-" 
			REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +  FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_INS),128)
			REGMNU_2_CPT_ALF = "PIC X(00003)."
			REGMNU_1_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
			 REGMNU_CPT_ALF =  "P" +  CON_NIV_CPT_ALF  + NIV_SEP(SEP_CPT_NUM) + REGMNU_1_CPT_ALF
			   BUFOUT = ESCR_WS2(MG_0,REGMNU_CPT_ALF)
 
			CON_NIV_ANT_CPT_NUM = 3

			REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "TX-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + "-DMSG-" 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF +  FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_INS),128) + "."


			ANT_CPT_NUM = TPG_MAT_NIV_IDTX(II_CPT_NUM,JJ_CPT_NUM,1)
			FOR GG_CPT_NUM = 1 TO TPG_TOT_HST
				IF (TPG_MAT_HST_ALF(GG_CPT_NUM,CTE_IDX_NOM) = TPG_MAT_TXFRM(II_CPT_NUM,JJ_CPT_NUM)) THEN
					HST_CPT_NUM = GG_CPT_NUM
					GG_CPT_NUM = TPG_TOT_HST + 1
				END IF
			NEXT GG_CPT_NUM

			FOR GG_CPT_NUM = 1 TO TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TSF) 
				IF (TPG_MAT_SRV_ALF(HST_CPT_NUM,GG_CPT_NUM) =  FNC_SYSEDIT(TPG_MAT_TXFMT(II_CPT_NUM,JJ_CPT_NUM),128)) THEN
					SRV_CPT_NUM = GG_CPT_NUM
					GG_CPT_NUM = TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TSF) + 1
				END IF
			NEXT GG_CPT_NUM

			IF TPG_MAT_NCP_SRV(HST_CPT_NUM,SRV_CPT_NUM) > 0 THEN
				BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
			END IF

			FOR GG_CPT_NUM = 1 TO TPG_MAT_NCP_SRV(HST_CPT_NUM,SRV_CPT_NUM)

				N_IDX_CPT_NUM = 0
				FOR XX_CPT_NUM = 1 TO TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TCF)
					IF TPG_MAT_NAMEFLDHST(HST_CPT_NUM,XX_CPT_NUM) = FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) THEN
						N_IDX_CPT_NUM = N_IDX_CPT_NUM + 1
					END IF
				NEXT XX_CPT_NUM
				NN_IDX_CPT_NUM = TPG_MAT_TOTOCCFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM) 

				FOR TT_CPT_NUM = 1 TO TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TCF)
					IF FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) = TPG_MAT_NAMEFLDHST(HST_CPT_NUM,TT_CPT_NUM) THEN
						CAMP_CPT_NUM = TT_CPT_NUM
						TT_CPT_NUM = TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TCF) + 1
					END IF
				NEXT TT_CPT_NUM

				ESCR_CPT_ALF = "SI"
				IF N_IDX_CPT_NUM > 1 THEN
					UU_CPT_NUM = GG_CPT_NUM - 1
					FOR XX_CPT_NUM = 1 TO UU_CPT_NUM
						IF FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,XX_CPT_NUM),128) = FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) THEN
							ESCR_CPT_ALF = "NO"
						END IF
					NEXT XX_CPT_NUM
				END IF

				CON_NIV_CPT_NUM = CON_NIV_CPT_NUM  + CON_NIV_ANT_CPT_NUM 
				CON_NIV_CPT_ALF = FNC_SYSSTR(CON_NIV_CPT_NUM)
				WHILE FNC_SYSLEN(CON_NIV_CPT_ALF) < 5 
					CON_NIV_CPT_ALF = "0" + CON_NIV_CPT_ALF
	     			NEXT
				CON_NIV_ANT_CPT_NUM  =  TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM)

				AA_CPT_ALF = FNC_SYSSTR(TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM)) 
 
				IF OCCUR2_CPT_ALF = "S" THEN
					NIV_ESC_CPT_NUM = NIV_11
				ELSE
					IF OCCUR1_CPT_ALF = "S" THEN
						NIV_ESC_CPT_NUM = NIV_09
					ELSE
						NIV_ESC_CPT_NUM  = NIV_07
					END IF			
				END IF			
				IF N_IDX_CPT_NUM  > 1 THEN
					OLD_IDX_CPT_ALF = "SI"
					IF PUT_HDR_CPT_ALF = "NO" THEN
						PUT_HDR_CPT_ALF = "SI"
						REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "TX-" + TPG_VEC_REQ(II_CPT_NUM)  
						REGMNU_CPT_ALF = REGMNU_CPT_ALF +  "-FLD-HST OCCURS " + FNC_SYSSTR(N_IDX_CPT_NUM) + " TIMES."
						BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
						MUL_NIV_TRE_CPT_NUM = N_IDX_CPT_NUM
					END IF
					NIV_ESC_CPT_NUM = NIV_ESC_CPT_NUM + 1
				ELSE
					IF OLD_IDX_CPT_ALF = "SI" THEN
						OLD_IDX_CPT_ALF = "NO"
					END IF
				END IF

				IF NIV_ESC_CPT_NUM = 5 THEN
					SEP_CPT_NUM = 11
				ELSE
					IF NIV_ESC_CPT_NUM = 6 THEN
						SEP_CPT_NUM = 12
					ELSE
						IF NIV_ESC_CPT_NUM = 7 THEN
							SEP_CPT_NUM = 13
						ELSE
							SEP_CPT_NUM = 14
						END IF
					END IF
				END IF

				 IF ESCR_CPT_ALF = "SI" THEN
					LRG_ESTR_CPT_NUM  = LRG_ESTR_CPT_NUM  + (TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM) *  MUL_NIV_UNO_CPT_NUM  * MUL_NIV_DOS_CPT_NUM * MUL_NIV_TRE_CPT_NUM)
					YY_CPT_ALF = FNC_SYSSTR(JJ_CPT_NUM)
					IF FNC_SYSLEN(YY_CPT_ALF) = 1 THEN
						YY_CPT_ALF = "0" + YY_CPT_ALF
					END IF
					YY_CPT_ALF = "-" + YY_CPT_ALF

					GLS_CPT_CMT$ = " DOCFLD : " + FNC_SYSEDIT(TPG_MAT_IDENFLDHST(HST_CPT_NUM,CAMP_CPT_NUM),16%)
					BUFOUT = ESCR_WS2(MG_7,GLS_CPT_CMT$)

					REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "TX-" + TPG_VEC_REQ(II_CPT_NUM) 
					REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +  YY_CPT_ALF + "-" 
					REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +   FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) + " "
					REGMNU_2_CPT_ALF = "PIC X(" +  NUM5(AA_CPT_ALF) + ")." 
					REGMNU_1_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
					 REGMNU_CPT_ALF =  "P" +  CON_NIV_CPT_ALF  + NIV_SEP(SEP_CPT_NUM) + REGMNU_1_CPT_ALF
					 BUFOUT = ESCR_WS2(MG_0,REGMNU_CPT_ALF)
				END IF
			NEXT GG_CPT_NUM
		NEXT JJ_CPT_NUM
		LRG_ESTR_CPT_NUM = TPG_LRG_RCV_CPT_NUM - LRG_ESTR_CPT_NUM 
		IF LRG_ESTR_CPT_NUM > 0 THEN
			IF  TPG_LRG_RCV_CPT_NUM = LRG_ESTR_CPT_NUM THEN
				NIV_ESC_CPT_NUM = NIV_05
			ELSE
				NIV_ESC_CPT_NUM = NIV_03
			END IF
			REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "TX-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" 
			REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +   "FRM-GLS-DISP" + " "
			AA_CPT_ALF = FNC_SYSSTR(LRG_ESTR_CPT_NUM)
			REGMNU_2_CPT_ALF = "PIC X(" +  NUM5(AA_CPT_ALF) + ")." 
			REGMNU_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
			BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)

		ELSE
				BUFOUT = FNC_PRINT(" LARGO DE ESTR MAYOR QUE  TPG_LRG_RCV " + FNC_SYSSTR(LRG_ESTR_CPT_NUM) + " " + FNC_SYSSTR(TPG_LRG_RCV_CPT_NUM))
		END IF

	NEXT II_CPT_NUM

	REGMNU_CPT_ALF = "  FORMATO PARA CONCATENACION DE MENSAJES"
	BUFOUT = ESCR_WS2(MG_7,REGMNU_CPT_ALF)
	REGMNU_CPT_ALF = "01  TX-TAB REDEFINES WSS-SND."
	BUFOUT = ESCR_WS2(NIV_MRG(NIV_01),REGMNU_CPT_ALF)
	REGMNU_CPT_ALF = "03  TX-TAB-ELM."
	BUFOUT = ESCR_WS2(NIV_MRG(NIV_03),REGMNU_CPT_ALF)
	REGMNU_CPT_ALF = "05  TX-TAB-CHR  OCCURS  " + FNC_SYSSTR(TPG_LRG_RCV_CPT_NUM) + "   TIMES   PIC X(00001)."
	BUFOUT = ESCR_WS2(NIV_MRG(NIV_05),REGMNU_CPT_ALF)


	REGMNU_CPT_ALF = " "
	BUFOUT = ESCR_WS3(MG_8,REGMNU_CPT_ALF)
	REGMNU_CPT_ALF = "01  WSS-COD-CREQ       VALUE SPACES    PIC X(03)."
	BUFOUT = ESCR_WS3(MG_8,REGMNU_CPT_ALF)
	REGMNU_CPT_ALF = " "
	BUFOUT = ESCR_WS3(MG_8,REGMNU_CPT_ALF)
	REGMNU_CPT_ALF = "01  WSS-GNS-TVB."
	BUFOUT = ESCR_WS3(MG_8,REGMNU_CPT_ALF)
	REGMNU_CPT_ALF = "03  TPG-I          VALUE ZEROES    PIC 9(05)."
	BUFOUT = ESCR_WS3(MG_12,REGMNU_CPT_ALF)
	REGMNU_CPT_ALF = "03  TPG-J          VALUE ZEROES    PIC 9(05)."
	BUFOUT = ESCR_WS3(MG_12,REGMNU_CPT_ALF)
	REGMNU_CPT_ALF = "03  TPG-K          VALUE ZEROES    PIC 9(05)."
	BUFOUT = ESCR_WS3(MG_12,REGMNU_CPT_ALF)
	REGMNU_CPT_ALF = "03  TPG-L          VALUE ZEROES    PIC 9(05)."
	BUFOUT = ESCR_WS3(MG_12,REGMNU_CPT_ALF)
	REGMNU_CPT_ALF = "03  TPG-M          VALUE ZEROES    PIC 9(05)."
	BUFOUT = ESCR_WS3(MG_12,REGMNU_CPT_ALF)
	REGMNU_CPT_ALF = "03  TPG-N          VALUE ZEROES    PIC 9(05)."
	BUFOUT = ESCR_WS3(MG_12,REGMNU_CPT_ALF)

	PASO_CPT_NUM = PASO_CPT_NUM + 1
	IF WSS_DPP = "S" THEN
		BUFOUT = FNC_PRINT(" INICIO PASO " + FNC_SYSSTR(PASO_CPT_NUM) + "/" + FNC_SYSSTR(TOT_PASOS) + "MOV-GNS")
		BUFOUT = FNC_PRINT("MOV-GNS")
	END IF
	FOR II_CPT_NUM = 1 TO TPG_TOT_REQ 
		FOR JJ_CPT_NUM = 1 TO TPG_MAT_CAM_TX(II_CPT_NUM) 

			AA_CPT_ALF = FNC_SYSSTR(JJ_CPT_NUM)
			IF FNC_SYSLEN(AA_CPT_ALF) = 1 THEN
				AA_CPT_ALF = "0" + AA_CPT_ALF
			END IF
			ANT1_CPT_NUM = TPG_MAT_NIV_IDTX(II_CPT_NUM,JJ_CPT_NUM,1)
			ANT2_CPT_NUM = TPG_MAT_NIV_IDTX(II_CPT_NUM,JJ_CPT_NUM,2)

			BUF_CPT_ALF = "MOV-GNS-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + " SECTION."
			BUFOUT = ESCR_PD3(MG_8,BUF_CPT_ALF)
			BUF_CPT_ALF = "INI-MOV-GNS-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + "."
			BUFOUT = ESCR_PD3(MG_8,BUF_CPT_ALF)

			IF ANT1_CPT_NUM <> 0 OR  ANT2_CPT_NUM <> 0 THEN
				BB_CPT_ALF = "(TPG-I)."
			ELSE
				BB_CPT_ALF = "."
			END IF
			
			TPG_GLS_FRM_CPT_ALF = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_FRM),128)
			FOR NN_CPT_NUM = 1 TO TPG_TOT_HST
				IF TPG_GLS_FRM_CPT_ALF = TPG_MAT_HST_ALF(NN_CPT_NUM,CTE_IDX_NOM) THEN 
					TPG_GLS_SIS_CPT_ALF = TPG_MAT_HST_ALF(NN_CPT_NUM,CTE_IDX_SIS)
					TPG_GLS_SIM_CPT_ALF = TPG_MAT_HST_ALF(NN_CPT_NUM,CTE_IDX_SIM)
					NN_CPT_NUM = TPG_TOT_HST + 1
				END IF
			NEXT NN_CPT_NUM

			MNU_GLS_PROG_CPT_ALF =  FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_INS),128) 
			REGMNU_CPT_ALF = "MOVE WSS-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + "-SIST-" 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF +  MNU_GLS_PROG_CPT_ALF + " TO TX-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + "-SIST-" 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF +   MNU_GLS_PROG_CPT_ALF   + BB_CPT_ALF
			BUFOUT = ESCR_PD3(MG_12,REGMNU_CPT_ALF)
			REGMNU_CPT_ALF = ""
			BUFOUT = ESCR_WS3(MG_12,REGMNU_CPT_ALF)

			REGMNU_CPT_ALF = "03 WSS-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + "-SIST-" 
 			REGMNU_CPT_ALF = REGMNU_CPT_ALF +   MNU_GLS_PROG_CPT_ALF + " PIC X(03) VALUE '" + TPG_GLS_SIS_CPT_ALF +    "'."
			BUFOUT = ESCR_WS3(MG_12,REGMNU_CPT_ALF)

			REGMNU_CPT_ALF = "MOVE WSS-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + "-NEMO-" 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF +   FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_INS),128) 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF +   " TO TX-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + "-NEMO-" 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF +   FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_INS),128)  + BB_CPT_ALF
			BUFOUT = ESCR_PD3(MG_12,REGMNU_CPT_ALF)

			REGMNU_CPT_ALF = "03 WSS-" + TPG_VEC_REQ(II_CPT_NUM) + "-" + AA_CPT_ALF + "-NEMO-" 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF + MNU_GLS_PROG_CPT_ALF + " PIC X(12) VALUE '" 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF + TPG_GLS_SIM_CPT_ALF + FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_FRM),128) 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF + FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_CMN),128) 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF + FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_INM),128) + "'."
			BUFOUT = ESCR_WS3(MG_12,REGMNU_CPT_ALF)

			REGMNU_CPT_ALF = "MOVE WSS-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" +  AA_CPT_ALF + "-FINP-" 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF +   FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_INS),128) 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF +   " TO TX-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" +  AA_CPT_ALF + "-FINP-" 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF +   FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_INS),128)  + BB_CPT_ALF
			BUFOUT = ESCR_PD3(MG_12,REGMNU_CPT_ALF)

			FINP_CPT_ALF = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_FIN),128)
			IF FINP_CPT_ALF = "" THEN
				FINP_CPT_ALF = "   "
			END IF
			REGMNU_CPT_ALF = "03 WSS-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + "-FINP-" 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF +   MNU_GLS_PROG_CPT_ALF + " PIC X(03) VALUE '" + FINP_CPT_ALF   + "'."
			BUFOUT = ESCR_WS3(MG_12,REGMNU_CPT_ALF)

			REGMNU_CPT_ALF = "MOVE WSS-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + "-FOUT-" 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF +   FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_INS),128) 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF +   " TO TX-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + "-FOUT-" 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF +   FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_INS),128) + BB_CPT_ALF
			BUFOUT = ESCR_PD3(MG_12,REGMNU_CPT_ALF)

			FOUT_CPT_ALF = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_FOU),128)
			IF FOUT_CPT_ALF = "" THEN
				FOUT_CPT_ALF = "   "
			END IF
			REGMNU_CPT_ALF = "03 WSS-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + "-FOUT-" 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF +   MNU_GLS_PROG_CPT_ALF + " PIC X(03) VALUE '" + FOUT_CPT_ALF + "'."
			BUFOUT = ESCR_WS3(MG_12,REGMNU_CPT_ALF)

			BUF_CPT_ALF = "FIN-MOV-GNS-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + "."
			BUFOUT = ESCR_PD3(MG_8,BUF_CPT_ALF)
			BUF_CPT_ALF = "EXIT."
			BUFOUT = ESCR_PD3(MG_12,BUF_CPT_ALF)
			BUF_CPT_ALF = ""
			BUFOUT = ESCR_PD3(MG_12,BUF_CPT_ALF)
		NEXT JJ_CPT_NUM
	NEXT II_CPT_NUM
	IF WSS_DPP = "S" THEN
		BUFOUT = FNC_PRINT(" FIN           PASO " + FNC_SYSSTR(PASO_CPT_NUM) + "/" + FNC_SYSSTR(TOT_PASOS) + "MOV-GNS")
		BUFOUT = FNC_PRINT("MOV-GNS")
	END IF
	PASO_CPT_NUM = PASO_CPT_NUM + 1
	IF WSS_DPP = "S" THEN
		BUFOUT = FNC_PRINT(" INICIO PASO " + FNC_SYSSTR(PASO_CPT_NUM) + "/" + FNC_SYSSTR(TOT_PASOS) + "MOV-PTAMX")
		BUFOUT = FNC_PRINT("MOV-PTAMX")
	END IF
	ANTB_CPT_ALF = " "
	 FOR II_CPT_NUM = 1 TO TPG_TOT_REQ 
		SIS_PAN_ANT_CPT_ALF =  " "
		FOR JJ_CPT_NUM = 1 TO TPG_MAT_CAM_TX(II_CPT_NUM) 
		      HH_CPT_NUM = TPG_MAT_CAM_PT(II_CPT_NUM) 
		    SIS_PAN_CPT_ALF = ""
		    IF TPG_MAT_TXFRM(II_CPT_NUM,JJ_CPT_NUM) = TPG_MAT_PTFRM(II_CPT_NUM,JJ_CPT_NUM)  THEN
			 AA_CPT_ALF = FNC_SYSSTR(JJ_CPT_NUM)
			IF FNC_SYSLEN(AA_CPT_ALF) = 1 THEN
				AA_CPT_ALF = "0" + AA_CPT_ALF
			END IF

			BUF_CPT_ALF = "MOV-PT-TX-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + " SECTION."
			BUFOUT = ESCR_PD1(MG_8,BUF_CPT_ALF)
			BUF_CPT_ALF = "INI-MOV-PT-TX-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + "."
			BUFOUT = ESCR_PD1(MG_8,BUF_CPT_ALF)
			SIS_PAN_CPT_ALF = TPG_MAT_HST_ALF(HST_CPT_NUM,CTE_IDX_SIS) + FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_FRM),128)

			IF TPG_MAT_TXFMT(II_CPT_NUM,JJ_CPT_NUM) <> "907"  THEN
 !!!				 BUF_CPT_ALF = " "
 !!!				 BUFOUT = ESCR_VBC(MG_8,BUF_CPT_ALF)

				SIS_PAN_CPT_ALF = SIS_PAN_CPT_ALF + FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_CMN),128) 
				BUF_CPT_ALF = "PC_A_PT_" + TPG_VEC_REQ(II_CPT_NUM)  + "_" + AA_CPT_ALF + " " + SIS_PAN_CPT_ALF
				ANTB_CPT_ALF = TPG_VEC_REQ(II_CPT_NUM)  + "_" + AA_CPT_ALF
				IF SIS_PAN_ANT_CPT_ALF <> SIS_PAN_CPT_ALF THEN
 !!!					BUFOUT = ESCR_VBC(MG_8,BUF_CPT_ALF)
					SIS_PAN_ANT_CPT_ALF = SIS_PAN_CPT_ALF 
					WRI_CPT_ALF = "NO"
				END IF
				FUNC_CPT_ALF = BUF_CPT_ALF
			END IF
 !!!			BUF_CPT_ALF = "DSP-PT-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + " SECTION."
 !!!			BUFOUT = ESCR_DFI(MG_8,BUF_CPT_ALF)
 !!!			BUF_CPT_ALF = "INI-DSP-PT-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + "."
 !!!			BUFOUT = ESCR_DFI(MG_8,BUF_CPT_ALF)

			FOR GG_CPT_NUM = 1 TO TPG_TOT_HST
				 IF (TPG_MAT_HST_ALF(GG_CPT_NUM,CTE_IDX_NOM) = TPG_MAT_PTFRM(II_CPT_NUM,JJ_CPT_NUM)) THEN
					HST_CPT_NUM = GG_CPT_NUM
					GG_CPT_NUM = TPG_TOT_HST + 1
				END IF
			NEXT GG_CPT_NUM

			 SRV_CPT_NUM = 0
			FOR GG_CPT_NUM = 1 TO TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TSF) 
				  IF (TPG_MAT_SRV_ALF(HST_CPT_NUM,GG_CPT_NUM) =  FNC_SYSEDIT(TPG_MAT_PTFMT(II_CPT_NUM,JJ_CPT_NUM),128)) THEN
					SRV_CPT_NUM = GG_CPT_NUM
					GG_CPT_NUM = TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TSF) + 1
				END IF
			NEXT GG_CPT_NUM
			FOR GG_CPT_NUM = 1 TO TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TSF) 
				  IF (TPG_MAT_SRV_ALF(HST_CPT_NUM,GG_CPT_NUM) =  FNC_SYSEDIT(TPG_MAT_TXFMT(II_CPT_NUM,JJ_CPT_NUM),128)) THEN
					 SRV_TX_CPT_NUM = GG_CPT_NUM
					GG_CPT_NUM = TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TSF) + 1
				END IF
			NEXT GG_CPT_NUM

			IF SRV_CPT_NUM = 0 THEN
				V_L_CPT_NUM = SRV_CPT_NUM
			ELSE
				V_L_CPT_NUM = TPG_MAT_NCP_SRV(HST_CPT_NUM,SRV_CPT_NUM)
			END IF

			NIV_MOV_TX_ENT = 0
			NIV_MOV_PT_ENT = 0

			IF  TPG_MAT_NIV_IDTX(II_CPT_NUM,JJ_CPT_NUM,1) <> 0 THEN
				NIV_MOV_TX_ENT = NIV_MOV_TX_ENT + 1
				IF TPG_MAT_NIV_IDTX(II_CPT_NUM,JJ_CPT_NUM,2) <> 0 THEN
					NIV_MOV_TX_ENT = NIV_MOV_TX_ENT + 1
				END IF
			END IF	

			FOR DD_CPT_NUM = 1 TO TPG_MAT_CAM_PT(II_CPT_NUM) 
				IF TPG_MAT_TXFRM(II_CPT_NUM,JJ_CPT_NUM) = TPG_MAT_PTFRM(II_CPT_NUM,DD_CPT_NUM) THEN
					IF  FNC_SYSEDIT(TPG_MAT_TXFMT(II_CPT_NUM,JJ_CPT_NUM),128) = FNC_SYSEDIT(TPG_MAT_PTFMT(II_CPT_NUM,DD_CPT_NUM),128)  THEN 
						TY_CPT_NUM = DD_CPT_NUM
						DD_CPT_NUM = TPG_MAT_CAM_PT(II_CPT_NUM)  + 1
					ELSE
						TY_CPT_NUM = JJ_CPT_NUM
						DD_CPT_NUM = TPG_MAT_CAM_PT(II_CPT_NUM)  + 1
					 END IF
				 END IF
			NEXT DD_CPT_NUM

			IF  TPG_MAT_NIV_IDPT(II_CPT_NUM,TY_CPT_NUM,1)  <> 0 THEN
				NIV_MOV_PT_ENT = NIV_MOV_PT_ENT + 1
				IF  TPG_MAT_NIV_IDPT(II_CPT_NUM,TY_CPT_NUM,2)  <> 0  THEN
					NIV_MOV_PT_ENT = NIV_MOV_PT_ENT + 1
				END IF
			END IF

			NEX_CPT_ALF = "N"
			FIRST_CPT_ALF = "S"
			 FOR GG_CPT_NUM = 1 TO V_L_CPT_NUM
				NIV_MOV_PT_MOV_CPT_NUM = NIV_MOV_PT_ENT 
				NIV_MOV_TX_MOV_CPT_NUM = NIV_MOV_TX_ENT 
				N_IDX_CPT_NUM = 0
				NN_IDX_CPT_NUM = 0
				POS_IDX_CPT_NUM = 0
 
				FOR XX_CPT_NUM = 1 TO TPG_MAT_NCP_SRV(HST_CPT_NUM,SRV_CPT_NUM)
					 IF FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,XX_CPT_NUM),128) =  FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) THEN
						 N_IDX_CPT_NUM = N_IDX_CPT_NUM + 1
						 IF N_IDX_CPT_NUM = 2 THEN
							 POS_IDX_CPT_NUM = XX_CPT_NUM
						 END IF
					 END IF
				 NEXT XX_CPT_NUM

 !!!   BUSCA CAMPO DE SERVER EN HST PARA,IDENTIFICAR SU LARGO
				FOR TT_CPT_NUM = 1 TO TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TCF)
					TPGMATNAMEFLDSRV = FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128)
					IF TPGMATNAMEFLDSRV = TPG_MAT_NAMEFLDHST(HST_CPT_NUM,TT_CPT_NUM) THEN
						CAMP_CPT_NUM = TT_CPT_NUM
						TT_CPT_NUM = TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TCF) + 1
					END IF
				NEXT TT_CPT_NUM
				VV_CPT_ALF = FNC_SYSSTR(TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM)) 

 !!! FIN BUSQUEDA DE  CAMPO
				NN_IDX_CPT_NUM = TPG_MAT_TOTOCCFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM) 
				
				 IF NN_IDX_CPT_NUM <= 1 THEN
					NN_IDX_CPT_NUM = 1
				END IF
			
				IF NIV_MOV_PT_MOV_CPT_NUM = 0 THEN
					IDX_PT_CPT_ALF = ""
				ELSE
				IF NIV_MOV_PT_MOV_CPT_NUM = 1 THEN
					IDX_PT_CPT_ALF = "TPG-I"
				ELSE
				IF NIV_MOV_PT_MOV_CPT_NUM = 2 THEN
					IDX_PT_CPT_ALF = "TPG-I,TPG-J"
				ELSE
				IF NIV_MOV_PT_MOV_CPT_NUM = 3 THEN
					IDX_PT_CPT_ALF = "TPG-I,TPG-J,TPG-K"
				END IF
				END IF
				END IF
				END IF

				IF NIV_MOV_TX_MOV_CPT_NUM = 0 THEN
					IDX_TX_CPT_ALF = ""
					DSP_IDX_TX_CPT_ALF = ""
				ELSE
				IF NIV_MOV_TX_MOV_CPT_NUM = 1 THEN
					IDX_TX_CPT_ALF = "TPG-I"
					DSP_IDX_TX_CPT_ALF = " TPG-I "
				ELSE
				IF NIV_MOV_TX_MOV_CPT_NUM = 2 THEN
					IDX_TX_CPT_ALF = "TPG-I,TPG-J"
					DPS_IDX_TX_CPT_ALF = " TPG-I ',' TPG-J "
				ELSE
				IF NIV_MOV_TX_MOV_CPT_NUM = 3 THEN
					IDX_TX_CPT_ALF = "TPG-I,TPG-J,TPG-K"
					DSP_IDX_TX_CPT_ALF = " TPG-I ',' TPG-J ',' TPG-K"
				END IF
				END IF
				END IF
				END IF

				IF IDX_PT_CPT_ALF > "" OR NN_IDX_CPT_NUM > 1 THEN
					ABPAPT_CPT_ALF = "("
					CIPAPT_CPT_ALF = ")"
				ELSE
					ABPAPT_CPT_ALF = ""
					CIPAPT_CPT_ALF = ""
				END IF

				COMAPT_CPT_ALF = ""
				IF IDX_PT_CPT_ALF > "" AND NN_IDX_CPT_NUM > 1 THEN
					COMAPT_CPT_ALF = ","
				END IF

				IF IDX_TX_CPT_ALF > "" OR NN_IDX_CPT_NUM > 1 THEN
					ABPATX_CPT_ALF = "("
					CIPATX_CPT_ALF = ")"
				ELSE
					ABPATX_CPT_ALF = ""
					CIPATX_CPT_ALF = ""
				END IF
				COMATX_CPT_ALF = ""
				IF IDX_TX_CPT_ALF > "" AND NN_IDX_CPT_NUM > 1 THEN
					COMATX_CPT_ALF = ","
				END IF

				YY_CPT_ALF = FNC_SYSSTR(JJ_CPT_NUM)
				IF FNC_SYSLEN(YY_CPT_ALF) = 1 THEN
					YY_CPT_ALF = "0" + YY_CPT_ALF
				END IF
				YY_CPT_ALF = "-" + YY_CPT_ALF

				IF (NN_IDX_CPT_NUM > 0 AND TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,1)  > 0  AND FIRST_CPT_ALF = "S") THEN
					MULT_CPT_NUM = TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,1)
					NNN_IDX_CPT_NUM = NN_IDX_CPT_NUM  * MULT_CPT_NUM
 !!!					 IF WRI_CPT_ALF = "SI" THEN
 !!!						  BUF_CPT_ALF = " "
 !!!						  BUFOUT = ESCR_VBC(MG_8,BUF_CPT_ALF)
 !!!						   BUF_CPT_ALF = FUNC_CPT_ALF 
 !!!						 BUFOUT = ESCR_VBC(MG_8,BUF_CPT_ALF)
 !!!					 END IF
 !!!					BUF_CPT_ALF = "IDX " + FNC_SYSSTR(NNN_IDX_CPT_NUM)
 !!!					BUFOUT = ESCR_VBC(MG_12,BUF_CPT_ALF)
					COL_CPT_NUM =  0
					FIRST_CPT_ALF = "N"
				 END IF

				 IF ((NN_IDX_CPT_NUM > 1  OR TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,1)  > 0) AND FIRST_CPT_ALF = "S") THEN
					IF TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,1)  > 0 THEN
						MULT_CPT_NUM = TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,1)
						NNN_IDX_CPT_NUM = NN_IDX_CPT_NUM  * MULT_CPT_NUM
					 END IF
 !!!					 IF WRI_CPT_ALF = "SI" THEN
 !!!						 BUF_CPT_ALF = " "
 !!!						 BUFOUT = ESCR_VBC(MG_8,BUF_CPT_ALF)
 !!!						  BUF_CPT_ALF = FUNC_CPT_ALF 
 !!!						 BUFOUT = ESCR_VBC(MG_8,BUF_CPT_ALF)
 !!!					 END IF
 !!!					BUF_CPT_ALF = "IDX " + FNC_SYSSTR(NNN_IDX_CPT_NUM)
 !!!					BUFOUT = ESCR_VBC(MG_12,BUF_CPT_ALF)
					COL_CPT_NUM =  0
					FIRST_CPT_ALF = "N"
				 END IF

				GLS_1_CPT_ALF = FNC_SYSEDIT(TPG_MAT_IDENFLDHST(HST_CPT_NUM ,CAMP_CPT_NUM),16%)

				MOV_OKS_CPT_NUM = 0
				FOR VV_CPT_NUM = 1 TO TPG_MAT_NCP_SRV(HST_CPT_NUM,SRV_TX_CPT_NUM)
				    IF TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM) = TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_TX_CPT_NUM,VV_CPT_NUM) THEN
						 MOV_OKS_CPT_NUM = 1
						 VV_CPT_NUM = TPG_MAT_NCP_SRV(HST_CPT_NUM,SRV_TX_CPT_NUM) + 1
				    END IF
					NEXT VV_CPT_NUM

				IF MOV_OKS_CPT_NUM = 1 THEN
				 IF NN_IDX_CPT_NUM > 1  THEN
					 IF  GG_CPT_NUM < POS_IDX_CPT_NUM THEN
						  COL_CPT_NUM =  COL_CPT_NUM  + 1
						REGMNU_CPT_ALF = ""
						BUFOUT = ESCR_PD1(MG_12,REGMNU_CPT_ALF)
						REGMNU_CPT_ALF = "MOVE 1 TO TPG-L."
						BUFOUT = ESCR_PD1(MG_12,REGMNU_CPT_ALF)
						REGMNU_CPT_ALF = "LUP-" + "PT-" + TPG_VEC_REQ(II_CPT_NUM) + YY_CPT_ALF  + "-" 
						REGMNU_CPT_ALF = REGMNU_CPT_ALF +  FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) + "."
						BUFOUT = ESCR_PD1(MG_8,REGMNU_CPT_ALF)
						REGMNU_CPT_ALF = "MOVE PT-" + TPG_VEC_REQ(II_CPT_NUM) 
						REGMNU_CPT_ALF = REGMNU_CPT_ALF +   YY_CPT_ALF  + "-" 
						REGMNU_CPT_ALF = REGMNU_CPT_ALF +   FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) + ABPAPT_CPT_ALF + IDX_PT_CPT_ALF + COMAPT_CPT_ALF 
						REGMNU_CPT_ALF = REGMNU_CPT_ALF +   "TPG-L" + CIPAPT_CPT_ALF + " TO TX-" + TPG_VEC_REQ(II_CPT_NUM) + YY_CPT_ALF  + "-" 
						REGMNU_CPT_ALF = REGMNU_CPT_ALF +   FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) + ABPATX_CPT_ALF + IDX_TX_CPT_ALF + COMATX_CPT_ALF 
						REGMNU_CPT_ALF = REGMNU_CPT_ALF +   "TPG-L" + CIPATX_CPT_ALF + "." 
						BUFOUT = ESCR_PD1(MG_12,REGMNU_CPT_ALF)
						REGMNU_CPT_ALF = "ADD 1 TO TPG-L."
						BUFOUT = ESCR_PD1(MG_12,REGMNU_CPT_ALF)
						REGMNU_CPT_ALF = "IF TPG-L < " + FNC_SYSSTR(NN_IDX_CPT_NUM + 1)
						BUFOUT = ESCR_PD1(MG_12,REGMNU_CPT_ALF)
						REGMNU_CPT_ALF = "GO TO " + "LUP-" + "PT-" + TPG_VEC_REQ(II_CPT_NUM) + YY_CPT_ALF  
						REGMNU_CPT_ALF = REGMNU_CPT_ALF +   "-" + FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128)+ "."
						BUFOUT = ESCR_PD1(MG_16,REGMNU_CPT_ALF)

					END IF
				ELSE
					REGMNU_CPT_ALF = "MOVE PT-" + TPG_VEC_REQ(II_CPT_NUM) 
					REGMNU_CPT_ALF = REGMNU_CPT_ALF +    YY_CPT_ALF  + "-" 
					REGMNU_CPT_ALF = REGMNU_CPT_ALF +    FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) + ABPAPT_CPT_ALF + IDX_PT_CPT_ALF + CIPAPT_CPT_ALF 
					REGMNU_CPT_ALF = REGMNU_CPT_ALF +    " TO TX-" + TPG_VEC_REQ(II_CPT_NUM) + YY_CPT_ALF  + "-" 
					REGMNU_CPT_ALF = REGMNU_CPT_ALF +    FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) + ABPATX_CPT_ALF + IDX_TX_CPT_ALF + CIPATX_CPT_ALF + "." 
					 BUFOUT = ESCR_PD1(MG_12,REGMNU_CPT_ALF)

				END IF
				END IF
				
				 IF ((NN_IDX_CPT_NUM > 1  OR TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,1)  > 0)) THEN
						 COL_CPT_NUM =  COL_CPT_NUM  + 1
						 FLD_VBC_CPT_ALF = FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) 
						FLD_VBC_CPT_ALF = GENRPTREP(FLD_VBC_CPT_ALF,"-","_")
						WHILE FNC_SYSLEN(FLD_VBC_CPT_ALF) < 15 
							FLD_VBC_CPT_ALF  = FLD_VBC_CPT_ALF  + " " 
	     					NEXT
 !!!						IF TPG_MAT_IDT_VBC(HST_CPT_NUM,CAMP_CPT_NUM) = "CBX" THEN
 !!!							FLD_VBC_CPT_ALF   = FNC_SYSLEFT(FLD_VBC_CPT_ALF,4) + "CBX_" + FNC_SYSRIGHT(FLD_VBC_CPT_ALF,5)
 !!!							  BUF_CPT_ALF = " CBX " +  GLS_1_CPT_ALF 
 !!!						ELSE
 !!!						IF TPG_MAT_IDT_VBC(HST_CPT_NUM,CAMP_CPT_NUM) = "DTB" THEN
 !!!							FLD_VBC_CPT_ALF   = FNC_SYSLEFT(FLD_VBC_CPT_ALF,4) + "DTB_" + FNC_SYSRIGHT(FLD_VBC_CPT_ALF,5)
 !!!							BUF_CPT_ALF =	 " DTB  FECHA REAL " 
 !!!						ELSE
 !!!						IF TPG_MAT_IDT_VBC(HST_CPT_NUM,CAMP_CPT_NUM) = "FTB" THEN
 !!!							ES_FTB_CPT_ALF = FNC_SYSMID(FLD_VBC_CPT_ALF,5,3)
 !!!							IF ES_FTB_CPT_ALF <> "FTB" THEN
 !!!								FLD_VBC_CPT_ALF   = FNC_SYSLEFT(FLD_VBC_CPT_ALF,4) + "FTB_" + FNC_SYSRIGHT(FLD_VBC_CPT_ALF,5)
 !!!							END IF
 !!!							BUF_CPT_ALF =	 " FTB " + GLS_1_CPT_ALF
 !!!						ELSE
 !!!						IF TPG_MAT_IDT_VBC(HST_CPT_NUM,CAMP_CPT_NUM) = "TXT" THEN
 !!!							FLD_VBC_CPT_ALF   = FNC_SYSLEFT(FLD_VBC_CPT_ALF,4) + "TXT_" + FNC_SYSRIGHT(FLD_VBC_CPT_ALF,5)
 !!!							BUF_CPT_ALF = " TXT " + GLS_1_CPT_ALF  
 !!!						ELSE
 !!!						IF TPG_MAT_IDT_VBC(HST_CPT_NUM,CAMP_CPT_NUM) = "ITB" THEN
 !!!							FLD_VBC_CPT_ALF   = FNC_SYSLEFT(FLD_VBC_CPT_ALF,4) + "ITB_" + FNC_SYSRIGHT(FLD_VBC_CPT_ALF,5)
 !!!							BUF_CPT_ALF = " ITB " + GLS_1_CPT_ALF  
 !!!						ELSE
 !!!							BUF_CPT_ALF = " TXT " + GLS_1_CPT_ALF  
 !!!						END IF
 !!!						END IF
 !!!						END IF
 !!!						END IF
 !!!						END IF
 !!!
						LR_CPT_ALF = FNC_SYSSTR(TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM))
						WHILE FNC_SYSLEN(LR_CPT_ALF) < 3
							LR_CPT_ALF = "0" + LR_CPT_ALF
	     					NEXT
						CL_CPT_ALF = FNC_SYSSTR(COL_CPT_NUM)
						IF FNC_SYSLEN(CL_CPT_ALF) < 2 THEN
							CL_CPT_ALF = "0" + CL_CPT_ALF
						END IF
						BUF_CPT_ALF = CL_CPT_ALF +  " " + LR_CPT_ALF + " " + BUF_CPT_ALF 
 !!!						BUFOUT = ESCR_VBC(MG_12,BUF_CPT_ALF)
						NEX_CPT_ALF = "S"
					ELSE
						 IF NEX_CPT_ALF = "S" THEN
							 NEX_CPT_ALF = "N" 
						 END IF
						 FLD_VBC_CPT_ALF = FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) 
						FLD_VBC_CPT_ALF = GENRPTREP(FLD_VBC_CPT_ALF,"-","_")
						WHILE FNC_SYSLEN(FLD_VBC_CPT_ALF) < 15 
							FLD_VBC_CPT_ALF  = FLD_VBC_CPT_ALF  + " " 
	     					NEXT
 !!!						IF TPG_MAT_IDT_VBC(HST_CPT_NUM,CAMP_CPT_NUM) = "CBX" THEN
 !!!							FLD_VBC_CPT_ALF   = FNC_SYSLEFT(FLD_VBC_CPT_ALF,4) + "CBX_" + FNC_SYSRIGHT(FLD_VBC_CPT_ALF,5)
 !!!						END IF
 !!!						IF TPG_MAT_IDT_VBC(HST_CPT_NUM,CAMP_CPT_NUM) = "DTB" THEN
 !!!							FLD_VBC_CPT_ALF   = FNC_SYSLEFT(FLD_VBC_CPT_ALF,4) + "DTB_" + FNC_SYSRIGHT(FLD_VBC_CPT_ALF,5)
 !!!						END IF
 !!!						IF TPG_MAT_IDT_VBC(HST_CPT_NUM,CAMP_CPT_NUM) = "FTB" THEN
 !!!							ES_FTB_CPT_ALF = FNC_SYSMID(FLD_VBC_CPT_ALF,5,3)
 !!!							IF ES_FTB_CPT_ALF <> "FTB" THEN
 !!!								FLD_VBC_CPT_ALF   = FNC_SYSLEFT(FLD_VBC_CPT_ALF,4) + "FTB_" + FNC_SYSRIGHT(FLD_VBC_CPT_ALF,5)
 !!!							END IF
 !!!						END IF
 !!!						IF TPG_MAT_IDT_VBC(HST_CPT_NUM,CAMP_CPT_NUM) = "TXT" THEN
 !!!							FLD_VBC_CPT_ALF   = FNC_SYSLEFT(FLD_VBC_CPT_ALF,4) + "TXT_" + FNC_SYSRIGHT(FLD_VBC_CPT_ALF,5)
 !!!						END IF
 !!!						IF TPG_MAT_IDT_VBC(HST_CPT_NUM,CAMP_CPT_NUM) = "LBL" THEN
 !!!							FLD_VBC_CPT_ALF   = FNC_SYSLEFT(FLD_VBC_CPT_ALF,4) + "LBL_" + FNC_SYSRIGHT(FLD_VBC_CPT_ALF,5)
 !!!						END IF
 !!!						IF TPG_MAT_IDT_VBC(HST_CPT_NUM,CAMP_CPT_NUM) = "ITB" THEN
 !!!							FLD_VBC_CPT_ALF   = FNC_SYSLEFT(FLD_VBC_CPT_ALF,4) + "ITB_" + FNC_SYSRIGHT(FLD_VBC_CPT_ALF,5)
 !!!						END IF
						LR_CPT_ALF = FNC_SYSSTR(TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM))
						WHILE FNC_SYSLEN(LR_CPT_ALF) < 3
							LR_CPT_ALF = "0" + LR_CPT_ALF
	     					NEXT
						BUF_CPT_ALF = FLD_VBC_CPT_ALF + " " + LR_CPT_ALF + " " + GLS_1_CPT_ALF
 !!!						BUFOUT = ESCR_VBC(MG_12,BUF_CPT_ALF)
				END IF
			 NEXT GG_CPT_NUM
			 IF NEX_CPT_ALF = "S" THEN
				 NEX_CPT_ALF = "N" 
			 END IF

			FIRST_CPT_ALF = "S"
			NEX_CPT_ALF = "N" 

			BUF_CPT_ALF = "FIN-MOV-PT-TX-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + "."
			BUFOUT = ESCR_PD1(MG_8,BUF_CPT_ALF)
			BUF_CPT_ALF = "EXIT."
			BUFOUT = ESCR_PD1(MG_12,BUF_CPT_ALF)
 !!!			BUF_CPT_ALF = "FIN-DSP-PT-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + "." 
 !!!			BUFOUT = ESCR_DFI(MG_8,BUF_CPT_ALF)
 !!!			BUF_CPT_ALF = "EXIT."
 !!!			BUFOUT = ESCR_DFI(MG_12,BUF_CPT_ALF)
			BUF_CPT_ALF = ""
			BUFOUT = ESCR_PD1(MG_12,BUF_CPT_ALF)
 !!!			BUF_CPT_ALF = ""
 !!!			BUFOUT = ESCR_DFI(MG_12,BUF_CPT_ALF)
		  END IF
		NEXT JJ_CPT_NUM
	NEXT II_CPT_NUM

	IF WSS_DPP = "S" THEN
		BUFOUT = FNC_PRINT(" FIN           PASO " + FNC_SYSSTR(PASO_CPT_NUM) + "/" + FNC_SYSSTR(TOT_PASOS) + "MOV-PTAMX")
		BUFOUT = FNC_PRINT("MOV-PTAMX")
	END IF

        END DEF 

        DEF STRING FNC_MOV_MXAPT
	PASO_CPT_NUM = PASO_CPT_NUM + 1
	IF WSS_DPP = "S" THEN
		BUFOUT = FNC_PRINT(" INICIO PASO " + FNC_SYSSTR(PASO_CPT_NUM) + "/" + FNC_SYSSTR(TOT_PASOS) + "MOV-MXAPT")
		BUFOUT = FNC_PRINT("MOV-MXAPT")
	END IF

	FOR II_CPT_NUM = 1 TO TPG_TOT_REQ 
		SIS_PAN_ANT_CPT_ALF = " "
		FOR JJ_CPT_NUM = 1 TO TPG_MAT_CAM_XT(II_CPT_NUM) 
 !!!		IF TPG_MAT_TPFRM(II_CPT_NUM, JJ_CPT_NUM) <> "" THEN
			AA_CPT_ALF = FNC_SYSSTR(JJ_CPT_NUM)
			IF FNC_SYSLEN(AA_CPT_ALF) = 1 THEN
				AA_CPT_ALF = "0" + AA_CPT_ALF
			END IF
			BUF_CPT_ALF = "MOV-XT-TP-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + " SECTION."
			BUFOUT = ESCR_PD2(MG_8,BUF_CPT_ALF)
			BUF_CPT_ALF = "INI-MOV-XT-TP-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + "."
			BUFOUT = ESCR_PD2(MG_8,BUF_CPT_ALF)
 !!!			BUF_CPT_ALF = "DSP-TP-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + " SECTION."
 !!!			BUFOUT = ESCR_DFO(MG_8,BUF_CPT_ALF)
 !!!			BUF_CPT_ALF = "INI-DSP-TP-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + "."
 !!!			BUFOUT = ESCR_DFO(MG_8,BUF_CPT_ALF)


			NIV_MOV_XT_ENT = 0
			NIV_MOV_TP_ENT = 0

			IF  TPG_MAT_NIV_IDXT(II_CPT_NUM,JJ_CPT_NUM,1) <> 0 THEN
				NIV_MOV_XT_ENT = NIV_MOV_TX_ENT + 1
				IF TPG_MAT_NIV_IDXT(II_CPT_NUM,JJ_CPT_NUM,2) <> 0 THEN
					NIV_MOV_XT_ENT = NIV_MOV_XT_ENT + 1
				END IF
			END IF	

			FOR GG_CPT_NUM = 1 TO TPG_TOT_HST
				IF (TPG_MAT_HST_ALF(GG_CPT_NUM,CTE_IDX_NOM) = TPG_MAT_XTFRM(II_CPT_NUM,JJ_CPT_NUM)) THEN
					HST_CPT_NUM = GG_CPT_NUM
					GG_CPT_NUM = TPG_TOT_HST + 1
				END IF
			NEXT GG_CPT_NUM	


			MM_CPT_NUM = 0
			FOR GG_CPT_NUM = 1 TO TPG_TOT_HST
				IF (TPG_MAT_HST_ALF(GG_CPT_NUM, CTE_IDX_NOM) = TPG_MAT_TPFRM(II_CPT_NUM, JJ_CPT_NUM)) THEN
					MM_CPT_NUM = GG_CPT_NUM
					GG_CPT_NUM = TPG_TOT_HST + 1
				END IF
			NEXT GG_CPT_NUM	

			FOR AA_CPT_NUM = 1 TO TPG_MAT_HST_NUM(HST_CPT_NUM, CTE_IDX_TSF) 
				  IF (TPG_MAT_SRV_ALF(HST_CPT_NUM, AA_CPT_NUM) =  FNC_SYSEDIT(TPG_MAT_TPFMT(II_CPT_NUM, JJ_CPT_NUM), 128)) THEN
					 UBI_SRV_TP = AA_CPT_NUM
					AA_CPT_NUM = TPG_MAT_HST_NUM(HST_CPT_NUM, CTE_IDX_TSF) + 1
				END IF
			NEXT AA_CPT_NUM

			FOR GG_CPT_NUM = 1 TO TPG_MAT_HST_NUM(HST_CPT_NUM, CTE_IDX_TSF) 
				IF (TPG_MAT_SRV_ALF(HST_CPT_NUM, GG_CPT_NUM) =  FNC_SYSEDIT(TPG_MAT_XTFMT(II_CPT_NUM, JJ_CPT_NUM), 128)) THEN
					SRV_CPT_NUM = GG_CPT_NUM
					GG_CPT_NUM = TPG_MAT_HST_NUM(HST_CPT_NUM, CTE_IDX_TSF) + 1
				END IF
			NEXT GG_CPT_NUM

			SIS_PAN_CPT_ALF = TPG_MAT_HST_ALF(HST_CPT_NUM, CTE_IDX_SIS) + FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM, JJ_CPT_NUM, CTE_TRN_FRM), 128)
			 BUF_CPT_ALF = " "
 !!!			 BUFOUT = ESCR_VBC(MG_8, BUF_CPT_ALF)
			 SIS_PAN_CPT_ALF = SIS_PAN_CPT_ALF + FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM, JJ_CPT_NUM, CTE_TRN_CMN), 128)

			FOR DD_CPT_NUM = 1 TO TPG_MAT_CAM_TP(II_CPT_NUM) 
				TPGMATTPFRM_CPT_ALF = FNC_SYSEDIT(TPG_MAT_TPFRM(II_CPT_NUM, DD_CPT_NUM), 128)
				TPGMATTPFMT = FNC_SYSEDIT(TPG_MAT_TPFMT(II_CPT_NUM, DD_CPT_NUM), 128)  
				IF TPG_MAT_XTFRM(II_CPT_NUM, JJ_CPT_NUM) = TPGMATTPFRM_CPT_ALF  AND FNC_SYSEDIT(TPG_MAT_XTFMT(II_CPT_NUM, JJ_CPT_NUM), 128) = TPGMATTPFMT   THEN 
					TY_CPT_NUM = DD_CPT_NUM
					DD_CPT_NUM = TPG_MAT_CAM_TP(II_CPT_NUM) + 1
				END IF
			NEXT DD_CPT_NUM

			IF  TPG_MAT_NIV_IDTP(II_CPT_NUM,TY_CPT_NUM,1)  <> 0 THEN
				NIV_MOV_TP_ENT = NIV_MOV_TP_ENT + 1
				IF  TPG_MAT_NIV_IDTP(II_CPT_NUM,TY_CPT_NUM,2)  <> 0  THEN
					NIV_MOV_TP_ENT = NIV_MOV_TP_ENT + 1
				END IF
			END IF

			NEX_CPT_ALF = "N"
			FIRST_CPT_ALF = "S"
			FOR GG_CPT_NUM = 1 TO TPG_MAT_NCP_SRV(HST_CPT_NUM,SRV_CPT_NUM)
				NIV_MOV_TP_MOV_CPT_NUM = NIV_MOV_TP_ENT
				NIV_MOV_XT_MOV_CPT_NUM = NIV_MOV_XT_ENT
				NN_IDX_CPT_NUM = 0
				N_IDX_CPT_NUM = 0
				POS_IDX_CPT_NUM = 0
				 FOR XX_CPT_NUM = 1 TO TPG_MAT_NCP_SRV(HST_CPT_NUM,SRV_CPT_NUM)
					 IF FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,XX_CPT_NUM),128) = FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) THEN
						 N_IDX_CPT_NUM = N_IDX_CPT_NUM + 1
						 IF N_IDX_CPT_NUM = 2 THEN
							 POS_IDX_CPT_NUM = XX_CPT_NUM
						 END IF
					 END IF
				 NEXT XX_CPT_NUM
				NN_IDX_CPT_NUM = TPG_MAT_TOTOCCFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM) 

 !!!   BUSCA CAMPO DE SERVER EN HST PARA,IDENTIFICAR SU LARGO
				FOR TT_CPT_NUM = 1 TO TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TCF)
					TPGMATNAMEFLDSRV = FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128)
					IF TPGMATNAMEFLDSRV = TPG_MAT_NAMEFLDHST(HST_CPT_NUM,TT_CPT_NUM) THEN
						CAMP_CPT_NUM = TT_CPT_NUM
						TT_CPT_NUM = TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TCF) + 1
					END IF
				NEXT TT_CPT_NUM
				VV_CPT_ALF = FNC_SYSSTR(TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM)) 
 !!! FIN BUSQUEDA DE  CAMPO
				 IF NN_IDX_CPT_NUM <= 1 THEN
					NN_IDX_CPT_NUM = 1
				END IF
				IF NIV_MOV_TP_MOV_CPT_NUM = 0 THEN
					IDX_TP_CPT_ALF = ""
				ELSE
				IF NIV_MOV_TP_MOV_CPT_NUM = 1 THEN
					IDX_TP_CPT_ALF = "TPG-I"
				ELSE
				IF NIV_MOV_TP_MOV_CPT_NUM = 2 THEN
					IDX_TP_CPT_ALF = "TPG-I,TPG-J"
				ELSE
				IF NIV_MOV_TP_MOV_CPT_NUM = 3 THEN
					IDX_TP_CPT_ALF = "TPG-I,TPG-J,TPG-K"
				END IF
				END IF
				END IF
				END IF

				IF NIV_MOV_XT_MOV_CPT_NUM = 0 THEN
					IDX_XT_CPT_ALF = ""
					DSP_IDX_TX_CPT_ALF = ""
				ELSE
				IF NIV_MOV_XT_MOV_CPT_NUM = 1 THEN
					IDX_XT_CPT_ALF = "TPG-I"
					DSP_IDX_XT_CPT_ALF = "TPG-I"
				ELSE
				IF NIV_MOV_XT_MOV_CPT_NUM = 2 THEN
					IDX_XT_CPT_ALF = "TPG-I,TPG-J"
					DSP_IDX_XT_CPT_ALF = "TPG-I,TPG-J"
				ELSE
				IF NIV_MOV_XT_MOV_CPT_NUM = 3 THEN
					IDX_XT_CPT_ALF = "TPG-I,TPG-J,TPG-K"
					DSP_IDX_XT_CPT_ALF = "TPG-I,TPG-J,TPG-K"
				END IF
				END IF
				END IF
				END IF

				IF IDX_TP_CPT_ALF > "" OR NN_IDX_CPT_NUM > 1 THEN
					ABPATP_CPT_ALF = "("
					CIPATP_CPT_ALF = ")"
				ELSE
					ABPATP_CPT_ALF = ""
					CIPATP_CPT_ALF = ""
				END IF

				COMATP_CPT_ALF = ""
				IF IDX_TP_CPT_ALF > "" AND NN_IDX_CPT_NUM > 1 THEN
					COMATP_CPT_ALF = ","
				END IF

				IF IDX_XT_CPT_ALF > "" OR NN_IDX_CPT_NUM > 1 THEN
					ABPAXT_CPT_ALF = "("
					CIPAXT_CPT_ALF = ")"
				ELSE
					ABPAXT_CPT_ALF = ""
					CIPAXT_CPT_ALF = ""
				END IF
				COMAXT_CPT_ALF = ""
				IF IDX_XT_CPT_ALF > "" AND NN_IDX_CPT_NUM > 1 THEN
					COMAXT_CPT_ALF = ","
				END IF

				YY_CPT_ALF = FNC_SYSSTR(JJ_CPT_NUM)
				IF FNC_SYSLEN(YY_CPT_ALF) = 1 THEN
					YY_CPT_ALF = "0" + YY_CPT_ALF
				END IF
				YY_CPT_ALF = "-" + YY_CPT_ALF

				 IF (NN_IDX_CPT_NUM > 0 AND TPG_MAT_NIV_IDXT(II_CPT_NUM,JJ_CPT_NUM,1)  > 0  AND FIRST_CPT_ALF = "S") THEN
					MULT_CPT_NUM = TPG_MAT_NIV_IDXT(II_CPT_NUM,JJ_CPT_NUM,1)
					NNN_IDX_CPT_NUM = NN_IDX_CPT_NUM  * MULT_CPT_NUM
 !!!					 IF WRI_CPT_ALF = "SI" THEN
 !!!						 BUF_CPT_ALF = " "
 !!!						 BUFOUT = ESCR_VBC(MG_8,BUF_CPT_ALF)
 !!!						  BUF_CPT_ALF = FUNC_CPT_ALF 
 !!!						 BUFOUT = ESCR_VBC(MG_8,BUF_CPT_ALF)
 !!!					 END IF
					COL_CPT_NUM =  0
					FIRST_CPT_ALF = "N"
				 END IF

				IF ((NN_IDX_CPT_NUM > 1  OR TPG_MAT_NIV_IDXT(II_CPT_NUM,JJ_CPT_NUM,1)  > 0) AND FIRST_CPT_ALF = "S") THEN
					IF TPG_MAT_NIV_IDXT(II_CPT_NUM,JJ_CPT_NUM,1)  > 0 THEN
						MULT_CPT_NUM = TPG_MAT_NIV_IDXT(II_CPT_NUM,JJ_CPT_NUM,1)
						NNN_IDX_CPT_NUM = NN_IDX_CPT_NUM  * MULT_CPT_NUM
					 END IF
					COL_CPT_NUM =  0
					FIRST_CPT_ALF = "N"
				 END IF

				GLS_1_CPT_ALF = FNC_SYSEDIT(TPG_MAT_IDENFLDHST(HST_CPT_NUM ,CAMP_CPT_NUM),16%)
				IF NN_IDX_CPT_NUM > 1 THEN
					IF  GG_CPT_NUM < POS_IDX_CPT_NUM THEN
						REGMNU_CPT_ALF = ""
						BUFOUT = ESCR_PD2(MG_12,REGMNU_CPT_ALF)
						REGMNU_CPT_ALF = "MOVE 1 TO TPG-L."
						BUFOUT = ESCR_PD2(MG_12,REGMNU_CPT_ALF)
						REGMNU_CPT_ALF = "LUP-" + "TP-" + TPG_VEC_REQ(II_CPT_NUM) + YY_CPT_ALF  
						REGMNU_CPT_ALF = REGMNU_CPT_ALF +  "-" + FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) + "."
						BUFOUT = ESCR_PD2(MG_8,REGMNU_CPT_ALF)
						REGMNU_CPT_ALF = "MOVE XT-" + TPG_VEC_REQ(II_CPT_NUM) + YY_CPT_ALF  + "-" 
						REGMNU_CPT_ALF = REGMNU_CPT_ALF +   FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) + ABPAXT_CPT_ALF + IDX_XT_CPT_ALF + COMAXT_CPT_ALF 

						REGMNU_CPT_ALF = REGMNU_CPT_ALF +   "TPG-L" + CIPAXT_CPT_ALF + " TO TP-" + TPG_VEC_REQ(II_CPT_NUM) 
						REGMNU_CPT_ALF = REGMNU_CPT_ALF +   YY_CPT_ALF  + "-" 
						REGMNU_CPT_ALF = REGMNU_CPT_ALF +   FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) + ABPATP_CPT_ALF + IDX_TP_CPT_ALF + COMATP_CPT_ALF 
						REGMNU_CPT_ALF = REGMNU_CPT_ALF +   "TPG-L" + CIPATP_CPT_ALF + "." 
						BUFOUT = ESCR_PD2(MG_12,REGMNU_CPT_ALF)
						REGMNU_CPT_ALF = "ADD 1 TO TPG-L."
						BUFOUT = ESCR_PD2(MG_12,REGMNU_CPT_ALF)
						REGMNU_CPT_ALF = "IF TPG-L < " + FNC_SYSSTR(NN_IDX_CPT_NUM + 1)
						BUFOUT = ESCR_PD2(MG_12,REGMNU_CPT_ALF)
						REGMNU_CPT_ALF = "GO TO " + "LUP-" + "TP-" + TPG_VEC_REQ(II_CPT_NUM) + YY_CPT_ALF  
						REGMNU_CPT_ALF = REGMNU_CPT_ALF +   "-" + FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) + "."
						BUFOUT = ESCR_PD2(MG_16,REGMNU_CPT_ALF)
 !!!						REGMNU_CPT_ALF = ""
 !!!						BUFOUT = ESCR_DFO(MG_12,REGMNU_CPT_ALF)
 !!!						REGMNU_CPT_ALF = "MOVE 1 TO TPG-L."
 !!!						BUFOUT = ESCR_DFO(MG_12,REGMNU_CPT_ALF)
 !!!						REGMNU_CPT_ALF = "LUP-" + "TP-" + TPG_VEC_REQ(II_CPT_NUM) + YY_CPT_ALF  
 !!!						REGMNU_CPT_ALF = REGMNU_CPT_ALF +   "-" + FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) + "."
 !!!						BUFOUT = ESCR_DFO(MG_8,REGMNU_CPT_ALF)
 !!!						IF DSP_IDX_TX_CPT_ALF <> "" THEN
 !!!							REGMNU_CPT_ALF = "DISPLAY '" +  DSP_IDX_TX_CPT_ALF + "  : '  " + DSP_IDX_TX_CPT_ALF + "."
 !!!							BUFOUT = ESCR_DFO(MG_12,REGMNU_CPT_ALF)
 !!!						END IF
 !!!						REGMNU_CPT_ALF = "DISPLAY 'TP-" + TPG_VEC_REQ(II_CPT_NUM) 
 !!!						REGMNU_CPT_ALF = REGMNU_CPT_ALF + YY_CPT_ALF + "-" 
 !!!						REGMNU_CPT_ALF = REGMNU_CPT_ALF + FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM, SRV_CPT_NUM, GG_CPT_NUM), 128) + ABPATP_CPT_ALF + IDX_TP_CPT_ALF + COMATP_CPT_ALF 
 !!!						REGMNU_CPT_ALF = REGMNU_CPT_ALF + "TPG-L" + CIPATP_CPT_ALF + " DE LARGO " + VV_CPT_ALF + "'." 
 !!!						BUFOUT = ESCR_DFO(MG_12, REGMNU_CPT_ALF)
 !!!						REGMNU_CPT_ALF = "DISPLAY "
 !!!						BUFOUT = ESCR_DFO(MG_12, REGMNU_CPT_ALF)
 !!!						REGMNU_CPT_ALF = "'123456789*123456789*123456789*123456789*123456789*'"
 !!!						BUFOUT = ESCR_DFO(MG_12, REGMNU_CPT_ALF)
 !!!						REGMNU_CPT_ALF = "DISPLAY  TP-" + TPG_VEC_REQ(II_CPT_NUM) 
 !!!						REGMNU_CPT_ALF = REGMNU_CPT_ALF + YY_CPT_ALF + "-" 
 !!!						REGMNU_CPT_ALF = REGMNU_CPT_ALF + FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM, SRV_CPT_NUM, GG_CPT_NUM), 128) + ABPATP_CPT_ALF + IDX_TP_CPT_ALF + COMATP_CPT_ALF 
 !!!						REGMNU_CPT_ALF = REGMNU_CPT_ALF + "TPG-L" + CIPATP_CPT_ALF + " '##########'." 
 !!!						BUFOUT = ESCR_DFO(MG_12, REGMNU_CPT_ALF)
 !!!						REGMNU_CPT_ALF = "DISPLAY ' '."
 !!!						BUFOUT = ESCR_DFO(MG_12, REGMNU_CPT_ALF)
 !!!						REGMNU_CPT_ALF = "ADD 1 TO TPG-L."
 !!!						BUFOUT = ESCR_DFO(MG_12, REGMNU_CPT_ALF)
 !!!						REGMNU_CPT_ALF = "IF TPG-L < " + FNC_SYSSTR(NN_IDX_CPT_NUM + 1)
 !!!						BUFOUT = ESCR_DFO(MG_12, REGMNU_CPT_ALF)
 !!!						REGMNU_CPT_ALF = "GO TO " + "LUP-" + "TP-" + TPG_VEC_REQ(II_CPT_NUM) + YY_CPT_ALF  
 !!!						REGMNU_CPT_ALF = REGMNU_CPT_ALF + "-" + FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM, SRV_CPT_NUM, GG_CPT_NUM), 128) + "."
 !!!						BUFOUT = ESCR_DFO(MG_16, REGMNU_CPT_ALF)


					END IF
				ELSE
		MOV_OKS_CPT_NUM = 0
		FOR VV_CPT_NUM = 1 TO TPG_MAT_NCP_SRV(HST_CPT_NUM, UBI_SRV_TP)
		    IF TPG_MAT_NAMEFLDSRV(HST_CPT_NUM, SRV_CPT_NUM, GG_CPT_NUM) = TPG_MAT_NAMEFLDSRV(HST_CPT_NUM, UBI_SRV_TP, VV_CPT_NUM) THEN
				 MOV_OKS_CPT_NUM = 1
				 VV_CPT_NUM = TPG_MAT_NCP_SRV(HST_CPT_NUM, UBI_SRV_TP) + 1
		    END IF
		NEXT VV_CPT_NUM
		IF ((MOV_OKS_CPT_NUM = 1) AND  (MM_CPT_NUM = HST_CPT_NUM)) THEN
			REGMNU_CPT_ALF = "MOVE XT-" + TPG_VEC_REQ(II_CPT_NUM) + YY_CPT_ALF + "-" 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF + FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM, SRV_CPT_NUM, GG_CPT_NUM), 128) + ABPAXT_CPT_ALF + IDX_XT_CPT_ALF + CIPAXT_CPT_ALF
 !!!			IF TPG_MAT_TIP_NUM(HST_CPT_NUM,CAMP_CPT_NUM) = "9" THEN
 !!!				REGMNU_CPT_ALF = REGMNU_CPT_ALF + "-ALF "
 !!!			END IF
			REGMNU_CPT_ALF = REGMNU_CPT_ALF + " TO TP-" + TPG_VEC_REQ(II_CPT_NUM) + YY_CPT_ALF + "-" 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF + FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM, SRV_CPT_NUM, GG_CPT_NUM), 128) + ABPATP_CPT_ALF + IDX_TP_CPT_ALF + CIPATP_CPT_ALF + "." 
			BUFOUT = ESCR_PD2(MG_12, REGMNU_CPT_ALF)
 !!!					IF DSP_IDX_TX_CPT_ALF <> "" THEN
 !!!						REGMNU_CPT_ALF = "DISPLAY '" + DSP_IDX_TX_CPT_ALF + "  : ' " + DSP_IDX_TX_CPT_ALF + "."
 !!!						BUFOUT = ESCR_DFO(MG_12, REGMNU_CPT_ALF)
 !!!					END IF
 !!!					REGMNU_CPT_ALF = "DISPLAY 'TP-" + TPG_VEC_REQ(II_CPT_NUM) + YY_CPT_ALF + "-" 
 !!!					REGMNU_CPT_ALF = REGMNU_CPT_ALF + FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM, SRV_CPT_NUM, GG_CPT_NUM), 128) + ABPATP_CPT_ALF + IDX_TP_CPT_ALF 
 !!!					REGMNU_CPT_ALF = REGMNU_CPT_ALF + CIPATP_CPT_ALF + " DE LARGO " + VV_CPT_ALF + " '." 
 !!!					BUFOUT = ESCR_DFO(MG_12, REGMNU_CPT_ALF)
 !!!					REGMNU_CPT_ALF = "DISPLAY "
 !!!					BUFOUT = ESCR_DFO(MG_12, REGMNU_CPT_ALF)
 !!!					REGMNU_CPT_ALF = "'123456789*123456789*123456789*123456789*123456789*'"
 !!!					BUFOUT = ESCR_DFO(MG_12, REGMNU_CPT_ALF)
 !!!					REGMNU_CPT_ALF = "DISPLAY TP-" + TPG_VEC_REQ(II_CPT_NUM) + YY_CPT_ALF + "-" 
 !!!					REGMNU_CPT_ALF = REGMNU_CPT_ALF + FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM, SRV_CPT_NUM, GG_CPT_NUM), 128) + ABPATP_CPT_ALF + IDX_TP_CPT_ALF 
 !!!					REGMNU_CPT_ALF = REGMNU_CPT_ALF + CIPATP_CPT_ALF + " '##########'." 
 !!!					BUFOUT = ESCR_DFO(MG_12, REGMNU_CPT_ALF)
 !!!					REGMNU_CPT_ALF = "DISPLAY ' '. "
 !!!					BUFOUT = ESCR_DFO(MG_12, REGMNU_CPT_ALF)
					END IF
				END IF

			 NEXT GG_CPT_NUM

			IF NEX_CPT_ALF = "S" THEN
				 NEX_CPT_ALF = "N" 
			END IF

			BUF_CPT_ALF = "FIN-MOV-XT-TP-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + "."
			BUFOUT = ESCR_PD2(MG_8,BUF_CPT_ALF)
			BUF_CPT_ALF = "EXIT."
			BUFOUT = ESCR_PD2(MG_12,BUF_CPT_ALF)
			BUF_CPT_ALF = ""
			BUFOUT = ESCR_PD2(MG_12,BUF_CPT_ALF)
 !!!			BUF_CPT_ALF = "FIN-DSP-TP-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + "."
 !!!			BUFOUT = ESCR_DFO(MG_8,BUF_CPT_ALF)
 !!!			BUF_CPT_ALF = "EXIT."
 !!!			BUFOUT = ESCR_DFO(MG_12,BUF_CPT_ALF)
 !!!			BUF_CPT_ALF = ""
 !!!			BUFOUT = ESCR_DFO(MG_12,BUF_CPT_ALF)
 !!!		END IF
		NEXT JJ_CPT_NUM
	NEXT II_CPT_NUM


	FOR II_CPT_NUM = 1 TO TPG_TOT_REQ 
		SIS_PAN_ANT_CPT_ALF = " "
		FOR JJ_CPT_NUM = 1 TO TPG_MAT_CAM_TP(II_CPT_NUM) 
			AA_CPT_ALF = FNC_SYSSTR(JJ_CPT_NUM)
			IF FNC_SYSLEN(AA_CPT_ALF) = 1 THEN
				AA_CPT_ALF = "0" + AA_CPT_ALF
			END IF

			NIV_MOV_XT_ENT = 0
			NIV_MOV_TP_ENT = 0

			IF  TPG_MAT_NIV_IDXT(II_CPT_NUM,JJ_CPT_NUM,1) <> 0 THEN
				NIV_MOV_XT_ENT = NIV_MOV_TX_ENT + 1
				IF TPG_MAT_NIV_IDXT(II_CPT_NUM,JJ_CPT_NUM,2) <> 0 THEN
					NIV_MOV_XT_ENT = NIV_MOV_XT_ENT + 1
				END IF
			END IF	

			FOR GG_CPT_NUM = 1 TO TPG_TOT_HST
				IF (TPG_MAT_HST_ALF(GG_CPT_NUM,CTE_IDX_NOM) = TPG_MAT_XTFRM(II_CPT_NUM,JJ_CPT_NUM)) THEN
					HST_CPT_NUM = GG_CPT_NUM
					GG_CPT_NUM = TPG_TOT_HST + 1
				END IF
			NEXT GG_CPT_NUM	

			FOR GG_CPT_NUM = 1 TO TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TSF) 
				IF (TPG_MAT_SRV_ALF(HST_CPT_NUM,GG_CPT_NUM) =  FNC_SYSEDIT(TPG_MAT_XTFMT(II_CPT_NUM,JJ_CPT_NUM),128)) THEN
					SRV_CPT_NUM = GG_CPT_NUM
					GG_CPT_NUM = TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TSF) + 1
				END IF
			NEXT GG_CPT_NUM

			SIS_PAN_CPT_ALF = TPG_MAT_HST_ALF(HST_CPT_NUM,CTE_IDX_SIS) + FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_FRM),128)
			 BUF_CPT_ALF = " "
 !!!			 BUFOUT = ESCR_VBC(MG_8,BUF_CPT_ALF)
				SIS_PAN_CPT_ALF = SIS_PAN_CPT_ALF + FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_CMN),128)

			BUF_CPT_ALF = "PT_A_PC_" + TPG_VEC_REQ(II_CPT_NUM)  + "_" + AA_CPT_ALF + " " + SIS_PAN_CPT_ALF
			IF SIS_PAN_ANT_CPT_ALF <> SIS_PAN_CPT_ALF THEN
 !!!				BUFOUT = ESCR_VBC(MG_8,BUF_CPT_ALF)
				SIS_PAN_ANT_CPT_ALF = SIS_PAN_CPT_ALF 
				WRI_CPT_ALF = "NO"
			END IF

			FUNC_CPT_ALF = BUF_CPT_ALF
			FOR DD_CPT_NUM = 1 TO TPG_MAT_CAM_TP(II_CPT_NUM) 
				TPGMATTPFRM_CPT_ALF = FNC_SYSEDIT(TPG_MAT_TPFRM(II_CPT_NUM,DD_CPT_NUM),128)
				TPGMATTPFMT = FNC_SYSEDIT(TPG_MAT_TPFMT(II_CPT_NUM,DD_CPT_NUM),128)  
				IF TPG_MAT_XTFRM(II_CPT_NUM,JJ_CPT_NUM) = TPGMATTPFRM_CPT_ALF  AND FNC_SYSEDIT(TPG_MAT_XTFMT(II_CPT_NUM,JJ_CPT_NUM),128) = TPGMATTPFMT   THEN 
					TY_CPT_NUM = DD_CPT_NUM
					DD_CPT_NUM = TPG_MAT_CAM_TP(II_CPT_NUM)  + 1
				END IF
			NEXT DD_CPT_NUM

			IF  TPG_MAT_NIV_IDTP(II_CPT_NUM,TY_CPT_NUM,1)  <> 0 THEN
				NIV_MOV_TP_ENT = NIV_MOV_TP_ENT + 1
				IF  TPG_MAT_NIV_IDTP(II_CPT_NUM,TY_CPT_NUM,2)  <> 0  THEN
					NIV_MOV_TP_ENT = NIV_MOV_TP_ENT + 1
				END IF
			END IF

			NEX_CPT_ALF = "N"
			FIRST_CPT_ALF = "S"
			FOR GG_CPT_NUM = 1 TO TPG_MAT_NCP_SRV(HST_CPT_NUM,SRV_CPT_NUM)
				NIV_MOV_TP_MOV_CPT_NUM = NIV_MOV_TP_ENT
				NIV_MOV_XT_MOV_CPT_NUM = NIV_MOV_XT_ENT
				NN_IDX_CPT_NUM = 0
				N_IDX_CPT_NUM = 0
				POS_IDX_CPT_NUM = 0
				 FOR XX_CPT_NUM = 1 TO TPG_MAT_NCP_SRV(HST_CPT_NUM,SRV_CPT_NUM)
					 IF FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,XX_CPT_NUM),128) = FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) THEN
						 N_IDX_CPT_NUM = N_IDX_CPT_NUM + 1
						 IF N_IDX_CPT_NUM = 2 THEN
							 POS_IDX_CPT_NUM = XX_CPT_NUM
						 END IF
					 END IF
				 NEXT XX_CPT_NUM
				NN_IDX_CPT_NUM = TPG_MAT_TOTOCCFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM) 

 !!!   BUSCA CAMPO DE SERVER EN HST PARA,IDENTIFICAR SU LARGO
				FOR TT_CPT_NUM = 1 TO TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TCF)
					TPGMATNAMEFLDSRV = FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128)
					IF TPGMATNAMEFLDSRV = TPG_MAT_NAMEFLDHST(HST_CPT_NUM,TT_CPT_NUM) THEN
						CAMP_CPT_NUM = TT_CPT_NUM
						TT_CPT_NUM = TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TCF) + 1
					END IF
				NEXT TT_CPT_NUM
				VV_CPT_ALF = FNC_SYSSTR(TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM)) 
 !!! FIN BUSQUEDA DE  CAMPO
				 IF NN_IDX_CPT_NUM <= 1 THEN
					NN_IDX_CPT_NUM = 1
				END IF
				IF NIV_MOV_TP_MOV_CPT_NUM = 0 THEN
					IDX_TP_CPT_ALF = ""
				ELSE
				IF NIV_MOV_TP_MOV_CPT_NUM = 1 THEN
					IDX_TP_CPT_ALF = "TPG-I"
				ELSE
				IF NIV_MOV_TP_MOV_CPT_NUM = 2 THEN
					IDX_TP_CPT_ALF = "TPG-I,TPG-J"
				ELSE
				IF NIV_MOV_TP_MOV_CPT_NUM = 3 THEN
					IDX_TP_CPT_ALF = "TPG-I,TPG-J,TPG-K"
				END IF
				END IF
				END IF
				END IF

				IF NIV_MOV_XT_MOV_CPT_NUM = 0 THEN
					IDX_XT_CPT_ALF = ""
					DSP_IDX_TX_CPT_ALF = ""
				ELSE
				IF NIV_MOV_XT_MOV_CPT_NUM = 1 THEN
					IDX_XT_CPT_ALF = "TPG-I"
					DSP_IDX_XT_CPT_ALF = "TPG-I"
				ELSE
				IF NIV_MOV_XT_MOV_CPT_NUM = 2 THEN
					IDX_XT_CPT_ALF = "TPG-I,TPG-J"
					DSP_IDX_XT_CPT_ALF = "TPG-I,TPG-J"
				ELSE
				IF NIV_MOV_XT_MOV_CPT_NUM = 3 THEN
					IDX_XT_CPT_ALF = "TPG-I,TPG-J,TPG-K"
					DSP_IDX_XT_CPT_ALF = "TPG-I,TPG-J,TPG-K"
				END IF
				END IF
				END IF
				END IF

				IF IDX_TP_CPT_ALF > "" OR NN_IDX_CPT_NUM > 1 THEN
					ABPATP_CPT_ALF = "("
					CIPATP_CPT_ALF = ")"
				ELSE
					ABPATP_CPT_ALF = ""
					CIPATP_CPT_ALF = ""
				END IF

				COMATP_CPT_ALF = ""
				IF IDX_TP_CPT_ALF > "" AND NN_IDX_CPT_NUM > 1 THEN
					COMATP_CPT_ALF = ","
				END IF

				IF IDX_XT_CPT_ALF > "" OR NN_IDX_CPT_NUM > 1 THEN
					ABPAXT_CPT_ALF = "("
					CIPAXT_CPT_ALF = ")"
				ELSE
					ABPAXT_CPT_ALF = ""
					CIPAXT_CPT_ALF = ""
				END IF
				COMAXT_CPT_ALF = ""
				IF IDX_XT_CPT_ALF > "" AND NN_IDX_CPT_NUM > 1 THEN
					COMAXT_CPT_ALF = ","
				END IF

				YY_CPT_ALF = FNC_SYSSTR(JJ_CPT_NUM)
				IF FNC_SYSLEN(YY_CPT_ALF) = 1 THEN
					YY_CPT_ALF = "0" + YY_CPT_ALF
				END IF
				YY_CPT_ALF = "-" + YY_CPT_ALF

				 IF (NN_IDX_CPT_NUM > 0 AND TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,1)  > 0  AND FIRST_CPT_ALF = "S") THEN
					MULT_CPT_NUM = TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,1)
					NNN_IDX_CPT_NUM = NN_IDX_CPT_NUM  * MULT_CPT_NUM
 !!!					 IF WRI_CPT_ALF = "SI" THEN
 !!!						 BUF_CPT_ALF = " "
 !!!						 BUFOUT = ESCR_VBC(MG_8,BUF_CPT_ALF)
 !!!						  BUF_CPT_ALF = FUNC_CPT_ALF 
 !!!						 BUFOUT = ESCR_VBC(MG_8,BUF_CPT_ALF)
 !!!					 END IF
 !!!					BUF_CPT_ALF = "IDX " + FNC_SYSSTR(NNN_IDX_CPT_NUM)
 !!!					BUFOUT = ESCR_VBC(MG_12,BUF_CPT_ALF)
					COL_CPT_NUM =  0
					FIRST_CPT_ALF = "N"
				 END IF

				IF ((NN_IDX_CPT_NUM > 1  OR TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,1)  > 0) AND FIRST_CPT_ALF = "S") THEN
					IF TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,1)  > 0 THEN
						MULT_CPT_NUM = TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,1)
						NNN_IDX_CPT_NUM = NN_IDX_CPT_NUM  * MULT_CPT_NUM
					 END IF
 !!!					 IF WRI_CPT_ALF = "SI" THEN
 !!!						  BUF_CPT_ALF = " "
 !!!						 BUFOUT = ESCR_VBC(MG_8,BUF_CPT_ALF)
 !!!						  BUF_CPT_ALF = FUNC_CPT_ALF 
 !!!						 BUFOUT = ESCR_VBC(MG_8,BUF_CPT_ALF)
 !!!					 END IF
 !!!					BUF_CPT_ALF = "IDX " + FNC_SYSSTR(NNN_IDX_CPT_NUM)
 !!!					BUFOUT = ESCR_VBC(MG_12,BUF_CPT_ALF)
					COL_CPT_NUM =  0
					FIRST_CPT_ALF = "N"
				 END IF
				GLS_1_CPT_ALF = FNC_SYSEDIT(TPG_MAT_IDENFLDHST(HST_CPT_NUM ,CAMP_CPT_NUM),16%)
					IF ((NN_IDX_CPT_NUM > 1)  OR (TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,1)  > 0) OR (TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,2)  > 0)) THEN
					  IF  GG_CPT_NUM < POS_IDX_CPT_NUM  OR POS_IDX_CPT_NUM = 0  THEN
						COL_CPT_NUM =  COL_CPT_NUM  + 1
						 FLD_VBC_CPT_ALF = FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) 
						FLD_VBC_CPT_ALF = GENRPTREP(FLD_VBC_CPT_ALF,"-","_")
						WHILE FNC_SYSLEN(FLD_VBC_CPT_ALF) < 15 
							FLD_VBC_CPT_ALF  = FLD_VBC_CPT_ALF  + " " 
	     					NEXT
 !!!						IF TPG_MAT_IDT_VBC(HST_CPT_NUM,CAMP_CPT_NUM) = "CBX" THEN
 !!!							FLD_VBC_CPT_ALF   = FNC_SYSLEFT(FLD_VBC_CPT_ALF,4) + "CBX_" + FNC_SYSRIGHT(FLD_VBC_CPT_ALF,5)
 !!!							  BUF_CPT_ALF = " CBX " + GLS_1_CPT_ALF 
 !!!						ELSE
 !!!						IF TPG_MAT_IDT_VBC(HST_CPT_NUM,CAMP_CPT_NUM) = "LBL" THEN
 !!!							FLD_VBC_CPT_ALF   = FNC_SYSLEFT(FLD_VBC_CPT_ALF,4) + "LBL_" + FNC_SYSRIGHT(FLD_VBC_CPT_ALF,5)
 !!!							  BUF_CPT_ALF =  " LBL " + GLS_1_CPT_ALF 
 !!!						ELSE
 !!!						IF TPG_MAT_IDT_VBC(HST_CPT_NUM,CAMP_CPT_NUM) = "FTB" THEN
 !!!							ES_FTB_CPT_ALF = FNC_SYSMID(FLD_VBC_CPT_ALF,5,3)
 !!!							IF ES_FTB_CPT_ALF <> "FTB" THEN
 !!!								FLD_VBC_CPT_ALF   = FNC_SYSLEFT(FLD_VBC_CPT_ALF,4) + "FTB_" + FNC_SYSRIGHT(FLD_VBC_CPT_ALF,5)
 !!!							END IF
 !!!							  BUF_CPT_ALF =  " FTB " + GLS_1_CPT_ALF 
 !!!						ELSE
 !!!						IF TPG_MAT_IDT_VBC(HST_CPT_NUM,CAMP_CPT_NUM) = "DTB" THEN
 !!!							FLD_VBC_CPT_ALF   = FNC_SYSLEFT(FLD_VBC_CPT_ALF,4) + "DTB_" + FNC_SYSRIGHT(FLD_VBC_CPT_ALF,5)
 !!!							BUF_CPT_ALF = " DTB " + GLS_1_CPT_ALF 
 !!!						ELSE
 !!!						IF TPG_MAT_IDT_VBC(HST_CPT_NUM,CAMP_CPT_NUM) = "TXT" THEN
 !!!							FLD_VBC_CPT_ALF   =  FNC_SYSLEFT(FLD_VBC_CPT_ALF,4) + "TXT_" + FNC_SYSRIGHT(FLD_VBC_CPT_ALF,5)
 !!!							BUF_CPT_ALF =	 " TXT " +  GLS_1_CPT_ALF 
 !!!						ELSE
 !!!							BUF_CPT_ALF =	 " TXT " +  GLS_1_CPT_ALF 
 !!!						END IF
 !!!						END IF
 !!!						END IF
 !!!						END IF
 !!!						END IF
 !!!						IF TPG_MAT_IDT_VBC(HST_CPT_NUM,CAMP_CPT_NUM) = "ITB" THEN
 !!!							FLD_VBC_CPT_ALF   = FNC_SYSLEFT(FLD_VBC_CPT_ALF,4) + "ITB_" + FNC_SYSRIGHT(FLD_VBC_CPT_ALF,5)
 !!!							BUF_CPT_ALF =	 " ITB "+  GLS_1_CPT_ALF 
 !!!						ELSE
 !!!						END IF
						LR_CPT_ALF = FNC_SYSSTR(TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM))
						WHILE FNC_SYSLEN(LR_CPT_ALF) < 3
							LR_CPT_ALF = "0" + LR_CPT_ALF
	     					NEXT
						CL_CPT_ALF = FNC_SYSSTR(COL_CPT_NUM)
						IF FNC_SYSLEN(CL_CPT_ALF) < 2 THEN
							CL_CPT_ALF = "0" + CL_CPT_ALF
						END IF

						BUF_CPT_ALF =	 CL_CPT_ALF + " " + LR_CPT_ALF + " " + BUF_CPT_ALF
 !!!						BUFOUT = ESCR_VBC(MG_12,BUF_CPT_ALF)
						NEX_CPT_ALF = "S"
					END IF
					ELSE
						  IF NEX_CPT_ALF = "S" THEN
							  NEX_CPT_ALF = "N" 
						  END IF

						 FLD_VBC_CPT_ALF = FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) 
						FLD_VBC_CPT_ALF = GENRPTREP(FLD_VBC_CPT_ALF,"-","_")
						WHILE FNC_SYSLEN(FLD_VBC_CPT_ALF) < 15 
							FLD_VBC_CPT_ALF  = FLD_VBC_CPT_ALF  + " " 
	     					NEXT

						LR_CPT_ALF = FNC_SYSSTR(TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM))
						WHILE FNC_SYSLEN(LR_CPT_ALF) < 3 
							LR_CPT_ALF = "0" + LR_CPT_ALF
	     					NEXT
 !!!						IF TPG_MAT_IDT_VBC(HST_CPT_NUM,CAMP_CPT_NUM) = "CBX" THEN
 !!!							FLD_VBC_CPT_ALF   = FNC_SYSLEFT(FLD_VBC_CPT_ALF,4) + "CBX_" + FNC_SYSRIGHT(FLD_VBC_CPT_ALF,5)
 !!!							  BUF_CPT_ALF = FLD_VBC_CPT_ALF + " " +  LR_CPT_ALF + " " +  GLS_1_CPT_ALF 
 !!!							BUFOUT = ESCR_VBC(MG_12,BUF_CPT_ALF)
 !!!						END IF
 !!!						IF TPG_MAT_IDT_VBC(HST_CPT_NUM,CAMP_CPT_NUM) = "LBL" THEN
 !!!							FLD_VBC_CPT_ALF   = FNC_SYSLEFT(FLD_VBC_CPT_ALF,4) + "LBL_" + FNC_SYSRIGHT(FLD_VBC_CPT_ALF,5)
 !!!								  BUF_CPT_ALF = FLD_VBC_CPT_ALF + " " +  LR_CPT_ALF + " " + GLS_1_CPT_ALF 
 !!!						END IF
 !!!						IF TPG_MAT_IDT_VBC(HST_CPT_NUM,CAMP_CPT_NUM) = "FTB" THEN
 !!!							ES_FTB_CPT_ALF = FNC_SYSMID(FLD_VBC_CPT_ALF,5,3)
 !!!							IF ES_FTB_CPT_ALF <> "FTB" THEN
 !!!								FLD_VBC_CPT_ALF   = FNC_SYSLEFT(FLD_VBC_CPT_ALF,4) + "FTB_" + FNC_SYSRIGHT(FLD_VBC_CPT_ALF,5)
 !!!							END IF
 !!!							BUF_CPT_ALF = FLD_VBC_CPT_ALF + " " +	 LR_CPT_ALF + " " + GLS_1_CPT_ALF 
 !!!							BUFOUT = ESCR_VBC(MG_12,BUF_CPT_ALF)
 !!!						END IF
 !!!						IF TPG_MAT_IDT_VBC(HST_CPT_NUM,CAMP_CPT_NUM) = "DTB" THEN
 !!!							FLD_VBC_CPT_ALF   = FNC_SYSLEFT(FLD_VBC_CPT_ALF,4) + "DTB_" + FNC_SYSRIGHT(FLD_VBC_CPT_ALF,5)
 !!!							BUF_CPT_ALF = FLD_VBC_CPT_ALF + " " + LR_CPT_ALF + " "+ GLS_1_CPT_ALF 
 !!!							BUFOUT = ESCR_VBC(MG_12,BUF_CPT_ALF)
 !!!						END IF
 !!!						IF TPG_MAT_IDT_VBC(HST_CPT_NUM,CAMP_CPT_NUM) = "TXT" THEN
 !!!							FLD_VBC_CPT_ALF   = FNC_SYSLEFT(FLD_VBC_CPT_ALF,4) + "TXT_" + FNC_SYSRIGHT(FLD_VBC_CPT_ALF,5)
 !!!							BUF_CPT_ALF = FLD_VBC_CPT_ALF + " " +	LR_CPT_ALF + " " +  GLS_1_CPT_ALF 
 !!!							BUFOUT = ESCR_VBC(MG_12,BUF_CPT_ALF)
 !!!						END IF
 !!!						IF TPG_MAT_IDT_VBC(HST_CPT_NUM,CAMP_CPT_NUM) = "ITB" THEN
 !!!							FLD_VBC_CPT_ALF   = FNC_SYSLEFT(FLD_VBC_CPT_ALF,4) + "ITB_" + FNC_SYSRIGHT(FLD_VBC_CPT_ALF,5)
 !!!							BUF_CPT_ALF = FLD_VBC_CPT_ALF + " " + LR_CPT_ALF  + " " + GLS_1_CPT_ALF 
 !!!							BUFOUT = ESCR_VBC(MG_12,BUF_CPT_ALF)
 !!!						END IF
				END IF
			 NEXT GG_CPT_NUM

			IF NEX_CPT_ALF = "S" THEN
				 NEX_CPT_ALF = "N" 
			END IF

		NEXT JJ_CPT_NUM
	NEXT II_CPT_NUM
	IF WSS_DPP = "S" THEN
		BUFOUT = FNC_PRINT(" FIN           PASO " + FNC_SYSSTR(PASO_CPT_NUM) + "/" + FNC_SYSSTR(TOT_PASOS) + "MOV-MXAPT")
		BUFOUT = FNC_PRINT("MOV-MXAPT")
	END IF

        END DEF 

 !!!------------------------------------------------------------------
 !!!	      MODULO PRINCIPAL
 !!!__________________________________________________________________
	ON ERROR GO TO  LABE_BADD
 	ACCION = INIC_IALI
	SEMSUM = 0
	PS = 1
	PONRT = 0
	SM = 1
	DL = 0
	KK = 0
	BB = 1
	LL = 1
	NEW_PAG = ""
 !!!  CODIGO PARA GENERADOR PARA PLATAFORMA GRAFICA
	TPG_TOT_HST  = 0
	TPG_TOT_TRN = 0
	COL_SRV = 0
	COL_NCF = 0
	FIL_IND = 0 
	COL_LRG = 0
	CONTAR% = 0
	TPG_LRG_MSG_SND_NUM = 1024
	TPG_LRG_MSG_RCV_NUM = 1024
 	ACCION = INI_MATR2
	DT_CPT_ALF = FNC_SYSDATE(0%)
	HRS_CPT_ALF = FNC_SYSTIME(0%)
	MNT_CPT_ALF = FNC_SYSMID(HRS_CPT_ALF,4,2)
	HRS_CPT_ALF = FNC_SYSMID(HRS_CPT_ALF,1,2)
	HORA_CPT_ALF = HRS_CPT_ALF + MNT_CPT_ALF + "00"
	DIA_CPT_ALF = FNC_SYSMID(DT_CPT_ALF,1,2)
	MES_CPT_ALF = FNC_SYSMID(DT_CPT_ALF,4,3)
	ANO_CPT_ALF = FNC_SYSMID(DT_CPT_ALF,8,4)
	MES_CPT_ALF = FNC_SYSEDIT(MES_CPT_ALF,32%)
	FOR O_CPT_NUM = 1 TO 12
		IF V_MES(O_CPT_NUM,1) = MES_CPT_ALF THEN
			MES_CPT_ALF = V_MES(O_CPT_NUM,2)
			O_CPT_NUM = 13
		END IF
	NEXT O_CPT_NUM 
	TIME_STP_CPT_ALF = "19" + ANO_CPT_ALF + MES_CPT_ALF + DIA_CPT_ALF + HORA_CPT_ALF
	IF FNC_SYSLEN(TIME_STP_CPT_ALF) <> 14 THEN
		BUFOUT = FNC_PRINT("LARGO DE TIME STAMP DISTINTO DE 14 TIME-STAMP : " + TIME_STP_CPT_ALF)
	END IF
 	TOKEN = NEXTTOKEN
	 WHILE TOKEN <> TPGTOK
 	   TOKEN = NEXTTOKEN
        NEXT
   	BUFOUT = FNC_SCAN_MTX

 !!! FIN DE CODIGO PARA GENERADOR DE PLATAFORMA GRAFICA

 	BUFOUT = FNC_CARG_PAR

 !!! *REGTAB "HST"FRM-CORR
		 
		NIV_ESC_CPT_NUM = NIV_01
		REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "WSS-RCV."
		BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
		IF TPG_HDR_RCV <> 0 THEN
			NIV_ESC_CPT_NUM = NIV_03
			REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "WSS-RCV-HDR	   PIC X(" + FNC_SYSSTR(TPG_HDR_RCV) + ")."
			BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
		END IF
		NIV_ESC_CPT_NUM = NIV_03
		REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "WSS-RCV-CREQ."
		BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)

		NIV_ESC_CPT_NUM = NIV_05
		REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "WSS-RCV-CREQ-1 "
		REGMNU_2_CPT_ALF = "PIC X(00001)."
 		REGMNU_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
		BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)

		NIV_ESC_CPT_NUM = NIV_05
		REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "WSS-RCV-CREQ-2 "
		REGMNU_2_CPT_ALF = "PIC X(00002)."
		REGMNU_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
		BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)

		TPG_HDR_DAT_CPT_NUM = TPG_LRG_RCV_CPT_NUM - (TPG_HDR_RCV + 3)
		NIV_ESC_CPT_NUM = NIV_03
		REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "WSS-RCV-DAT           "
		AA_CPT_ALF = FNC_SYSSTR(TPG_HDR_DAT_CPT_NUM)
		REGMNU_2_CPT_ALF = "PIC X(" + NUM5(AA_CPT_ALF) + ")."
		REGMNU_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
		BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)

		REGMNU_CPT_ALF = ""
		BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)

		NIV_ESC_CPT_NUM = NIV_01
	        REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "WSS-SEGR-RCV REDEFINES WSS-RCV."
		BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
		NIV_ESC_CPT_NUM = NIV_03
		SEGR_NUM_CPT_NUM = FNC_SYSINTEGER(TPG_LRG_RCV_CPT_NUM / TPG_LRG_MSG_RCV_NUM)
		SEGR_CPL_CPT_NUM = TPG_LRG_RCV_CPT_NUM  - (SEGR_NUM_CPT_NUM * TPG_LRG_MSG_RCV_NUM)
		SEGR_CPT_ALF = FNC_SYSSTR(SEGR_NUM_CPT_NUM)
		REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "WSS-TAB-SEGR           OCCURS  " + NUM5(SEGR_CPT_ALF)  + "  TIMES."
		BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)

		NIV_ESC_CPT_NUM = NIV_05
		REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "WSS-ELE-SEGR "
		REGMNU_2_CPT_ALF = "PIC X(01024)."
		REGMNU_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
		BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)

		IF SEGR_CPL_CPT_NUM > 0 THEN
			SEGR_CPL_CPT_ALF  = FNC_SYSSTR(SEGR_CPL_CPT_NUM)
			NIV_ESC_CPT_NUM = NIV_03
			REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "WSS-ELE-SEGR-CPL "
			REGMNU_2_CPT_ALF = "PIC X(" + NUM5(SEGR_CPL_CPT_ALF) + ")."
			REGMNU_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
			BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
		END IF

		NIV_ESC_CPT_NUM = NIV_01
		REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "WSS-RCV-RED REDEFINES WSS-RCV."
		BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
		NIV_ESC_CPT_NUM = NIV_03
		REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "WSS-RCV-RED-ELM        OCCURS  " + FNC_SYSSTR(TPG_LRG_RCV_CPT_NUM) + "  TIMES PIC X(00001)."
		BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)

	PASO_CPT_NUM = PASO_CPT_NUM + 1
         BUFOUT = FNC_FORM_PCAPT
         BUFOUT = FNC_FORM_MXAPT

	REGMNU_CPT_ALF = "01  TPG-LRG-NVL."
	BUFOUT = ESCR_WS3(MG_8,REGMNU_CPT_ALF)

	NIV_ESC_CPT_NUM = NIV_01
	REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "WSS-SND."
	BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
	NIV_ESC_CPT_NUM = NIV_03
	REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "WSS-SND-HDR	   PIC X(" + FNC_SYSSTR(TPG_HDR_SND_CPT_NUM) + ")."
	IF TPG_HDR_SND_CPT_NUM > 0 THEN
		BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
	END IF
	NIV_ESC_CPT_NUM = NIV_03
	REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "WSS-SND-DMSG."
	BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)

	NIV_ESC_CPT_NUM = NIV_05
	REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "WSS-SND-STAT "
	REGMNU_2_CPT_ALF = "PIC X(00001)."
	REGMNU_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
	BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)

	REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "WSS-SND-MENS "
	REGMNU_2_CPT_ALF = "."
	REGMNU_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
	BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)

	NIV_ESC_CPT_NUM = NIV_07
	REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "WSS-SND-MENS1 "
	REGMNU_2_CPT_ALF = "PIC X(20)."
	REGMNU_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
	BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)

	REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "WSS-SND-MENS2 "
	REGMNU_2_CPT_ALF = "PIC X(59)."
	REGMNU_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
	BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)

	TPG_HDR_DAT_CPT_NUM = TPG_LRG_SND_CPT_NUM - (TPG_HDR_SND_CPT_NUM + 80)
	NIV_ESC_CPT_NUM = NIV_03
	REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "WSS-SND-DAT "
	AA_CPT_ALF = FNC_SYSSTR(TPG_HDR_DAT_CPT_NUM)
	REGMNU_2_CPT_ALF = "PIC X(" + NUM5(AA_CPT_ALF) + ")."
	REGMNU_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
	BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
	REGMNU_CPT_ALF = ""
	BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)

	NIV_ESC_CPT_NUM = NIV_01
	REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "WSS-SEGR-SND REDEFINES WSS-SND."
	BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
	NIV_ESC_CPT_NUM = NIV_03

	SEGS_NUM_CPT_NUM = FNC_SYSINTEGER(TPG_LRG_SND_CPT_NUM / TPG_LRG_MSG_SND_NUM)
	SEGS_CPL_CPT_NUM = TPG_LRG_SND_CPT_NUM  - (SEGS_NUM_CPT_NUM * TPG_LRG_MSG_SND_NUM)
	SEGS_CPT_ALF = FNC_SYSSTR(SEGS_NUM_CPT_NUM)

	REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "WSS-TAB-SEGS           OCCURS  " + NUM5(SEGS_CPT_ALF) + "  TIMES."
	BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)

	NIV_ESC_CPT_NUM = NIV_05
	REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "WSS-ELE-SEGS "
	REGMNU_2_CPT_ALF = "PIC X(01024)."
	REGMNU_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
	BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)

	IF SEGS_CPL_CPT_NUM > 0 THEN
		SEGS_CPL_CPT_ALF  = FNC_SYSSTR(SEGS_CPL_CPT_NUM)
		NIV_ESC_CPT_NUM = NIV_03
		REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "WSS-ELE-SEGS-CPL "
		REGMNU_2_CPT_ALF = "PIC X(" + NUM5(SEGS_CPL_CPT_ALF) + ")."
		REGMNU_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
		BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
	END IF

         BUFOUT = FNC_MOV_PTAMX
         BUFOUT = FNC_MOV_MXAPT
	GO TO LABE_ATRA
 LABE_BADD:
	RESUME 999
  999
 LABE_ATRA:

 END



