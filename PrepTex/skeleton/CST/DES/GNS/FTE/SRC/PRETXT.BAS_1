100
	DECLARE	REAL  		        VLTOKEN
	DECLARE	REAL		        VLVLTOKEN

	DECLARE INTEGER			PASADA
	DECLARE INTEGER			INX_III
	DECLARE	INTEGER			INX_JJJ
	DECLARE	INTEGER			INX_KKK
	DECLARE	INTEGER			INX_LLL
	DECLARE INTEGER			NRO_SEC
	DECLARE	INTEGER		 	SZTOKEN		
	DECLARE INTEGER			SZSZTOKEN
	DECLARE	INTEGER			PTR_PTOKEN
	DECLARE	INTEGER			PTR_P
	DECLARE	INTEGER			PTR_Q
	DECLARE	INTEGER			ASCII_Q
	DECLARE INTEGER			CAR_LEIDOS
	DECLARE	INTEGER			INX_COL
	DECLARE INTEGER			INX_FIL
	DECLARE	INTEGER			INX_MOD
	DECLARE	INTEGER			INX_ENC
	DECLARE	INTEGER			MAX_COL
	DECLARE INTEGER			MAX_MOD
	DECLARE INTEGER			MAX_SEC(10)
	DECLARE INTEGER			SECUENCIA(10)
	DECLARE	INTEGER			MAX_FIL(10)
	DECLARE	INTEGER			MAT_SEC(10)
	DECLARE	INTEGER			MAT_TIPO(10,10)
	DECLARE INTEGER			MAT_TOPE(10,10)

	DECLARE	STRING			BIP
	DECLARE	STRING			PROGRAMAIN
	DECLARE	STRING			PROGRAMAOUT
	DECLARE STRING			RESPALDO_PROGRAMA
	DECLARE STRING			ANT_VAL_PTR_PTOKEN
	DECLARE STRING			VAL_PTR_PTOKEN
	DECLARE STRING			VAL_STR_PTOKEN
	DECLARE STRING			EXITOSO
	DECLARE STRING			NEW_REG
	DECLARE STRING			BUSCANDO
	DECLARE	STRING			ENCONTRADO
	DECLARE STRING			EXT_PGM_IN(50)
	DECLARE	STRING			NOM_PGM_IN(50)
	DECLARE	STRING			CANDIDATO(10)
	DECLARE STRING			MAT_VALO(10,10)
	DECLARE STRING			MAT_CAMB(10,10)

	DECLARE INTEGER	CONSTANT	IDNTOK		=	1
	DECLARE INTEGER	CONSTANT	KEYTOK		=	2
	DECLARE INTEGER	CONSTANT	NUMTOK		=	3
	DECLARE INTEGER CONSTANT	EOLTOK		=	4
	DECLARE INTEGER	CONSTANT	STRTOK		=	5
	DECLARE INTEGER	CONSTANT	CHRTOK		=	6
	DECLARE INTEGER	CONSTANT	ETXTOK		=	8
	DECLARE INTEGER CONSTANT	TABTOK		=	9

	DECLARE INTEGER	CONSTANT	NEW_LINE	=	10
	DECLARE INTEGER	CONSTANT	CAR_RET		=	13
	DECLARE INTEGER	CONSTANT	CREMILLA	=	34
	DECLARE INTEGER CONSTANT	ASTERISCO	=	42
	DECLARE INTEGER CONSTANT	SIGNO_MENOS	=	45
	DECLARE INTEGER CONSTANT	PUNTO		=	46
	DECLARE INTEGER CONSTANT	NUMERO_CERO	=	48
	DECLARE INTEGER	CONSTANT	NUMERO_NUEVE 	=	57
	DECLARE INTEGER	CONSTANT	LETRA_A		=	65
	DECLARE INTEGER	CONSTANT	LETRA_Z		=	90
	DECLARE INTEGER	CONSTANT	LOWER_A		=	97
	DECLARE INTEGER	CONSTANT	LOWER_Z		=      122	


    DEF INTEGER NEXTTOKEN 

	ON ERROR GO TO LAB_ERROR
	FILLER$ = SPACE$(255%)
 CICLO:	NEW_REG = "NO"

	IF PTR_PTOKEN = ETXTOK THEN
		 GO TO LAB_ASIG
	END IF

        PTR_P = PTR_Q 
	WHILE (MID$(ARR_IB$,PTR_P,1) = " " OR &
		ASCII(MID$(ARR_IB$,PTR_P,1)) = TABTOK ) AND &
		PTR_P <= CAR_LEIDOS


		IF MID$(ARR_IB$,PTR_P,1) =        " " THEN
			ARR_OB$   = ARR_OB$     + " "
			FOR ZZ% = 1 TO MAX_COL 
				CANDIDATO(ZZ%) = CANDIDATO(ZZ%) + " "
			NEXT ZZ%
		ELSE    
			ARR_OB$   = ARR_OB$     + CHR$(TABTOK)
                        FOR ZZ% = 1 TO MAX_COL
                        	CANDIDATO(ZZ%) =   CANDIDATO(ZZ%)  &
						 + CHR$(TABTOK)
                        NEXT ZZ%
		END IF

		PTR_P = PTR_P + 1
	NEXT

	PTR_Q = PTR_P 

	WHILE PTR_P > CAR_LEIDOS OR ARR_IB$ = ""
		IF PASADA <> 1 THEN
			IF BUSCANDO = "NO" THEN
				PRINT	    #CANALOUT% , ARR_OB$
				ARR_OB$   = ""		
				FOR ZZ% = 1 TO MAX_COL 
					CANDIDATO(ZZ%) = ""
				NEXT ZZ%
			ELSE
				ARR_OB$   = ARR_OB$   +   CHR$(NEW_LINE)  &
							+ CHR$(CAR_RET)
				FOR ZZ% = 1 TO MAX_COL 
					CANDIDATO(ZZ%) =  CANDIDATO(ZZ%)  + &
							  CHR$(NEW_LINE)  + &
							  CHR$(CAR_RET)
				NEXT ZZ%
				EXITOSO   = "SI"
			END IF
		END IF

		ARR_IB$,arr_ob$   = ""
		GET #CANALIN%
		CAR_LEIDOS = RECOUNT
	     	MOVE FROM #CANALIN% , ARR_IB$ = CAR_LEIDOS
		PTR_P, PTR_Q  = 1
		NEW_REG       = "SI"
	NEXT

	IF NEW_REG = "SI" THEN
                GO TO CICLO
	END IF


	ASCII_Q = ASCII(MID$(ARR_IB$,PTR_Q,1))  
	IF ((ASCII_Q >= LETRA_A AND ASCII_Q <= LETRA_Z) OR &
           (ASCII_Q >= LOWER_A AND ASCII_Q <= LOWER_Z) ) THEN

	         WHILE(ASCII(MID$(ARR_IB$,PTR_P,1)) >=LETRA_A AND	  &
		       ASCII(MID$(ARR_IB$,PTR_P,1)) <= LETRA_Z) 	  &
	              OR ASCII(MID$(ARR_IB$,PTR_P,1)) = SIGNO_MENOS       &
		      OR (ASCII(MID$(ARR_IB$,PTR_P,1)) >= LOWER_A AND     &
			ASCII(MID$(ARR_IB$,PTR_P,1)) <= LOWER_Z)
	              PTR_P = PTR_P + 1
		 NEXT

	         SZTOKEN = PTR_P - PTR_Q
		 NEXTTOKEN = IDNTOK
	   	 VAL_PTR_PTOKEN = MID$(ARR_IB$,PTR_Q,SZTOKEN)
	         GO TO LAB_ASIG
	END IF

	IF(ASCII_Q >= NUMERO_CERO AND &
	   ASCII_Q <= NUMERO_NUEVE   ) THEN    
	
	          WHILE (ASCII(MID$(ARR_IB$,PTR_P,1)) >= NUMERO_CERO AND &
			 ASCII(MID$(ARR_IB$,PTR_P,1)) <= NUMERO_NUEVE )
		             PTR_P = PTR_P + 1
	          NEXT

	          SZTOKEN = PTR_P - PTR_Q
		  NEXTTOKEN = NUMTOK
		  VAL_PTR_PTOKEN = MID$(ARR_IB$,PTR_Q,SZTOKEN)
	          VLTOKEN  = VAL(VAL_PTR_PTOKEN)
		  GO TO LAB_ASIG
	END IF

	IF (ASCII_Q = CREMILLA ) THEN
		PTR_P = PTR_P + 1

	        WHILE (ASCII(MID$(ARR_IB$,PTR_P,1)) <> CREMILLA)
  	              PTR_P = PTR_P + 1
	        NEXT

	        SZTOKEN = PTR_P - (PTR_Q + 1)
	        PTR_P = PTR_P + 1
		NEXTTOKEN = STRTOK  
		VAL_STR_PTOKEN = MID$(ARR_IB$,PTR_Q+1,SZTOKEN) 
		VAL_PTR_PTOKEN = '"' + VAL_STR_PTOKEN + '"'
		GO TO LAB_ASIG	 
	END IF

	NEXTTOKEN = CHRTOK
	VAL_PTR_PTOKEN = MID$(ARR_IB$,PTR_P,1)


	PTR_P = PTR_P + 1
	SZTOKEN = 1
	GO TO LAB_ASIG

 LAB_ERROR:	
	IF ERR = 11 THEN
		PRINT " FIN DE PROCESO PARA ARCHIVO",PROGRAMAIN, &
			CHR$(NEW_LINE),CHR$(CAR_RET)
		CLOSE #CANALOUT%		
		CLOSE #CANALIN%		
		NEXTTOKEN = ETXTOK
	        RESUME 810		
	ELSE 
		PRINT "ERROR(";err;") ";ert$(err);" en linea ";erl;", MODULO ";ern$
		CLOSE #CANALOUT%		
		CLOSE #CANALIN%		
		RESUME 810
	END IF

 LAB_ASIG:  
	PTR_Q = PTR_P
810


  END DEF !!! FIN NEXTTOKEN	

	! ------------------------------------------------------------------
	!		
	!               MODULO PRINCIPAL
	!		****************		
	! __________________________________________________________________


		!-----------------------------------------------------------
		! INICIO :
		!    SECCION DONDE SE RECONOCE LA SINTAXIS QUE ESPECIFICA
		!    LOS CAMBIOS A REALIZAR
		!
		!-----------------------------------------------------------

             


	BIP = CHR$(07)
	CANALIN%  = 1	
	CANALOUT% = 2
	PRINT BIP,BIP
	INPUT " INGRESE NOMBRE DE ARCHIVO CON SINTAXIS",PROGRAMAIN 
    WHILE PROGRAMAIN <> "" 
	PRINT PROGRAMAIN
	OPEN PROGRAMAIN FOR INPUT AS FILE #CANALIN%,            &
		ORGANIZATION SEQUENTIAL VARIABLE, RECORDSIZE 255, &
		RECORDTYPE ANY
	GET #CANALIN%
	CAR_LEIDOS  = RECOUNT
	MOVE FROM #CANALIN% , ARR_IB$ = CAR_LEIDOS
        PASADA = 1

	FOR ZZ% = 1 TO 10
		CANDIDATO(ZZ%) = ""
	NEXT ZZ%



 LAB_A1 :
	PTR_PTOKEN = NEXTTOKEN

	IF VAL_PTR_PTOKEN = "CAMBIE"  THEN
		PTR_PTOKEN = NEXTTOKEN
	END IF

 LAB_A2 :
	IF VAL_PTR_PTOKEN = "EN"      THEN
		PTR_PTOKEN = NEXTTOKEN
	END IF

 LAB_A3 :
	IF VAL_PTR_PTOKEN = "ARCHIVO" THEN
		PTR_PTOKEN = NEXTTOKEN
	END IF
	MAX_MOD = 0

 LAB_A4 :
	MAX_MOD = MAX_MOD + 1
	IF PTR_PTOKEN = IDNTOK	THEN
		NOM_PGM_IN(MAX_MOD) = VAL_PTR_PTOKEN
		PTR_PTOKEN = NEXTTOKEN
	END IF

	IF VAL_PTR_PTOKEN <> "." THEN
		PRINT BIP,BIP,BIP,BIP,BIP
		PRINT "ERROR EN NOMBRE DE ARCHIVO"
                PRINT NOM_PGM_IN(MAX_MOD),VAL_PTR_PTOKEN
		GO TO ATRAS
	END IF

	PTR_PTOKEN = NEXTTOKEN

	IF PTR_PTOKEN = IDNTOK THEN
		EXT_PGM_IN(MAX_MOD) = VAL_PTR_PTOKEN	
		PTR_PTOKEN = NEXTTOKEN
		IF VAL_PTR_PTOKEN = "," THEN
			PTR_PTOKEN = NEXTTOKEN
			GO TO LAB_A4
		END IF
	END IF

	MAX_COL = 1
	INX_III = 1

 LAB_A5 :
	IF VAL_PTR_PTOKEN <> "POR" THEN

		IF (PTR_PTOKEN <> NUMTOK ) THEN
			MAT_VALO(INX_III,MAX_COL) = VAL_PTR_PTOKEN
			MAT_TIPO (INX_III,MAX_COL) = PTR_PTOKEN
		END IF

		ANT_VAL_PTR_PTOKEN = VAL_PTR_PTOKEN
		PTR_PTOKEN = NEXTTOKEN

		IF PTR_PTOKEN = NUMTOK AND ANT_VAL_PTR_PTOKEN = "#" THEN
			MAT_TOPE(INX_III,MAX_COL) = VLTOKEN
		ELSE
			INX_III = INX_III + 1
		END IF

		GO TO LAB_A5
	END IF

	PTR_PTOKEN = NEXTTOKEN		  
	INX_JJJ = 1

 LAB_A6 : 
	IF VAL_PTR_PTOKEN <> ";" AND VAL_PTR_PTOKEN <> "," THEN

	        IF PTR_PTOKEN = STRTOK THEN
			MAT_CAMB(INX_JJJ,MAX_COL) = VAL_STR_PTOKEN
		ELSE
			MAT_CAMB(INX_JJJ,MAX_COL) = VAL_PTR_PTOKEN
		END IF
	
		INX_JJJ = INX_JJJ + 1
		PTR_PTOKEN = NEXTTOKEN
		GO TO LAB_A6
	END IF

	IF INX_III <> INX_JJJ THEN
		PRINT "ERROR.... : DIFIERE EL NUMERO DE CAMBIOS",INX_III,INX_JJJ
	  	GO TO ATRAS
	END IF

        MAX_SEC(MAX_COL) = INX_III - 1
 LAB_A7 :
	IF VAL_PTR_PTOKEN = "," THEN
		PTR_PTOKEN = NEXTTOKEN
		MAX_COL = MAX_COL + 1
		INX_III, INX_JJJ = 1
		GO TO LAB_A5
	END IF



	CLOSE #CANALIN%
	PASADA = 2

		!-----------------------------------------------------------
		! FIN :
		!    SECCION DONDE SE RECONOCE LA SINTAXIS QUE ESPECIFICA
		!    LOS CAMBIOS A REALIZAR
		!-----------------------------------------------------------
		! INICIO :
		!    SECCION DONDE SE REALIZAN  LOS CAMBIOS
		!
		!-----------------------------------------------------------
    INX_MOD = 0
    WHILE INX_MOD < MAX_MOD
	INX_MOD = INX_MOD + 1
	PTR_P,PTR_Q = 1
	BUSCANDO = "NO"
	ARR_OB$, ARR_IB$, CANDIDATO(1), CANDIDATO(2) ,CANDIDATO(3) = ""	 
	PROGRAMAIN = NOM_PGM_IN(INX_MOD) + "." + EXT_PGM_IN(INX_MOD)
	PRINT " NOMBRE DEL ARCHIVO A MODIFICAR    ";PROGRAMAIN
	OPEN PROGRAMAIN FOR INPUT AS FILE #CANALIN% , &
		ORGANIZATION SEQUENTIAL , RECORDTYPE ANY
	GET #CANALIN% 
	CAR_LEIDOS = RECOUNT   
	MOVE FROM #CANALIN%,ARR_IB$ = CAR_LEIDOS
	PROGRAMAOUT = NOM_PGM_IN(INX_MOD) + "." + "CBL"
	OPEN PROGRAMAOUT FOR OUTPUT AS FILE #CANALOUT%,            &
		ORGANIZATION SEQUENTIAL VARIABLE , RECORDSIZE 255, &
		RECORDTYPE ANY

	
	EXITOSO = "NO"
	WHILE PTR_PTOKEN <> ETXTOK	 

 		IF PTR_PTOKEN = ETXTOK THEN
			GO TO FIN
		ELSE
			PTR_PTOKEN = NEXTTOKEN
			ARR_OB$ = ARR_OB$ + VAL_PTR_PTOKEN
		END IF

		INX_KKK= 0
		NRO_SEC = 0

		WHILE INX_KKK < MAX_COL 

			INX_KKK = INX_KKK + 1
			IF MAT_TIPO (1,INX_KKK )= PTR_PTOKEN AND &
   			   MAT_VALO(1,INX_KKK)= VAL_PTR_PTOKEN THEN
				INX_COL = INX_KKK
				CANDIDATO(INX_COL) =   CANDIDATO(INX_COL) &
						     + MAT_CAMB(1,INX_COL)
				SECUENCIA(INX_KKK) = INX_KKK
				NRO_SEC = NRO_SEC + 1

				IF MAX_SEC(INX_COL) = 1 THEN
					BUSCANDO = "NO"
					EXITOSO = "SI"
					INX_ENC = INX_COL
					FOR WW% = 1 TO MAX_COL
						CANDIDATO(WW%) = CANDIDATO(INX_COL)
					NEXT WW%
					INX_KKK = MAX_COL + 1

				ELSE
					BUSCANDO = "SI"
				END IF

			ELSE 
				CANDIDATO(INX_KKK) = CANDIDATO(INX_KKK) + &
						     VAL_PTR_PTOKEN
				SECUENCIA(INX_KKK) = 0
			END IF

		NEXT	
 
	
		INX_FIL = 1

		WHILE BUSCANDO = "SI"
			INX_FIL = INX_FIL + 1

			IF PTR_PTOKEN = ETXTOK THEN
				GO TO FIN
			ELSE
				PTR_PTOKEN = NEXTTOKEN
				ARR_OB$ = ARR_OB$ + VAL_PTR_PTOKEN
			END IF

			INX_LLL = 0

			WHILE INX_LLL < MAX_COL
				INX_LLL = INX_LLL + 1
				IF INX_LLL <> SECUENCIA(INX_LLL) THEN
					CANDIDATO(INX_LLL) = &
					CANDIDATO(INX_LLL) + &
					VAL_PTR_PTOKEN
				END IF
			NEXT

			INX_LLL = 0
				
	                WHILE INX_LLL < MAX_COL

		        INX_LLL = INX_LLL + 1

		        IF INX_LLL = SECUENCIA(INX_LLL) THEN
				
			IF INX_FIL > MAX_SEC(INX_LLL) THEN
				EXITOSO = "SI"
				BUSCANDO = "NO"
				INX_ENC = INX_LLL
				FOR WW% = 1 TO MAX_COL
					CANDIDATO(WW%) = CANDIDATO(INX_ENC)
				NEXT WW%
			ELSE
				IF MAT_CAMB(INX_FIL,INX_LLL) = "#" THEN
					CANDIDATO(INX_LLL) = CANDIDATO(INX_LLL) +          &
					VAL_PTR_PTOKEN
				ELSE
					CANDIDATO(INX_LLL) = CANDIDATO(INX_LLL) +          &
					MAT_CAMB(INX_FIL,INX_LLL)
				END IF
	
	
				IF ( MAT_TIPO (INX_FIL,INX_LLL) = PTR_PTOKEN      AND  &
					MAT_VALO(INX_FIL,INX_LLL) = VAL_PTR_PTOKEN        &
			           )						       &
					  OR   					       &
				   ( MAT_VALO(INX_FIL,INX_LLL) = "#" 	          AND  &
				     MAT_TOPE (INX_FIL,INX_LLL) = 0 		       &
			           )					               &
					  OR   					       &
				   ( MAT_VALO(INX_FIL,INX_LLL) = "#" 		  AND  &
				     MAT_TOPE (INX_FIL,INX_LLL) <> 0  		  AND  &
	 			     MAT_TOPE (INX_FIL,INX_LLL) = SZTOKEN ) THEN
						
					IF INX_FIL = MAX_SEC(INX_LLL) THEN
						EXITOSO = "SI"
						BUSCANDO = "NO"
						INX_ENC = INX_LLL
						FOR WW% = 1 TO MAX_COL
							CANDIDATO(WW%) = CANDIDATO(INX_ENC)
						NEXT WW%
					END IF

				ELSE				
					SECUENCIA(INX_LLL) = 0
					NRO_SEC = NRO_SEC - 1

					IF NRO_SEC = 0
						THEN BUSCANDO = "NO"
					END IF

					
				END IF
			  END IF
	      	          END IF			
		          NEXT
		NEXT
		IF EXITOSO = "SI" THEN
			ARR_OB$ =  CANDIDATO(INX_ENC)
		END IF
		EXITOSO = "NO"

	NEXT


 FIN :  CLOSE #CANALOUT%
 PTR_PTOKEN = 0 
 VAL_PTR_PTOKEN = ""
 ARR_OB$ = ""
 FOR SS% = 1 TO 10
	CANDIDATO(SS%) = ""
 NEXT SS%
 VAL_STR_PTOKEN = ""

 NEXT 
	PRINT BIP,BIP
	INPUT "INGRESE NOMBRE DE ARCHIVO CON SINTAXIS",PROGRAMAIN 
	PASADA = 1
 NEXT
 ATRAS:
 END
