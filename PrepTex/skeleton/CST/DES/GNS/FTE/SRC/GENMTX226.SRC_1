050
 !!! Optimizaciones pendientes
 !!!		aborto cuando no existe archivo no termina programa
 !!!	VSN$ = "Version 1.1.0 	Mayo 2000 agrega fil.mtx a WS3 "
 !!!	VSN$ = "Version 2.0.1	Enero 2002 Unifica versiones IBM-UYS Asimilado a generacion de garantias BANAMEX para IBM
 !!!	VSN$ = "Version 2.0.2	Enero 2002  Maneja Multiples archivos, Genera ( archivo preptex para documentacion,
 !!!					    tabla DPO solo para UYS, campos numer.segun especific.
 !!!					    NUM(enteros, decimales, ("S"i signo/"N"o signo) )
 !!!	VSN$ = "Version 2.0.3	 7-FEB-2002
 !!!	VSN$ = "Version 2.0.3   30-APR-2002 INCLUYE ESPECIFICACION TRANCODE EN DEF DE TRN "TRX"
 !!!	VSN$ = "Version 2.0.4    4-JUN-2002 13:18:54 
 !!!	VSN$ = "Version 2.0.4    4-JUN-2002 13:19:03 Parametriza la generacion archivo PI1, MOVE o parametros para pgm batch
 !!!	VSN$ = "Version 2.0.5   10-JUN-2002 13:19:03 Optimiza despliege de lineas leidas ( desplegaba solo la primera )
 !!!                                                 y amplia cantidad de servers de 17 a 25
 !!!	VSN$ = "Version 2.0.6   11-JUN-2002 14:59:28 resuelve aborto de col.mtx
 !!!	VSN$ = "Version 2.0.8   16-SEP-2002 14:41:25 Incorpora HDR, atributos de campos, incorpora campo de usuario dentro de hdr
 !!!	VSN$ = "Version 2.0.9   23-SEP-2002 10:20:20 Incorpora definiciones y validacion numerica
 !!!	VSN$ = "Version 2.1.0   27-SEP-2002 18:23:23 Corrige validacion/edicion numerica indexada
 !!!	VSN$ = "Version 2.1.1   01-OCT-2002 18:23:23 Corrige ocurrencias en tablas DPO
 !!!	VSN$ = "Version 2.1.2   02-OCT-2002 10:15:45 Reune en una misma area todas las matrices que se deben modificar
 !!!	VSN$ = "Version 2.1.3   02-OCT-2002 15:16:45 Incorpora HDR a TX
 !!!	VSN$ = "Version 2.1.4   03-OCT-2002 10:15:43 Corrige ultimos detalles de manejo 500 campos
 !!!					  	     para generar version que maneja 3 host, 5 server, 500 campos
 !!!	VSN$ = "Version 2.1.5   03-OCT-2002 20:10:05 Optimiza ciclo while nextoken ( permite tokens no en orden ) y
 !!!						     reconoce $_CMD_INI/FIN como token nulos
 !!!	VSN$ = "Version 2.1.6   21-NOV-2002 10:12:13 No genera WSS-SND-HDR, pues genera problema en BRA
 !!!						     
 !!!	VSN$ = "Version 2.1.7   21-NOV-2002 13:12:13 Optimiza despliegue de mensajes en avance de proceso
 !!!						     
 !!!	VSN$ = "Version 2.1.7   22-NOV-2002 15:23:43 Implementa ocurrencias variables
 !!!	VSN$ = "Version 2.1.8   25-NOV-2002 15:23:43 Implementa Header en PT
 !!!	VSN$ = "Version 2.1.9   27-NOV-2002 15:23:43 Define Values de Header en WS3 y no en WS1
 !!!	VSN$ = "Version 2.2.0   03-DIC-2002 12:36:39 Mejora documentacion de requerimientos
 !!!	VSN$ = "Version 2.2.1   29-ENE-2003 12:36:39 Independendiza nombre interno v/s externo de archivo
 !!!	VSN$ = "Version 2.2.2   29-ENE-2003 19:15:23 No crea loop cuando no esta cerrado un string
 !!!						     Despliega mejor informacion para largos excedidos
 !!!	VSN$ = "Version 2.2.4    26-MAR-2003 16:37:25 Se salta 2.2.3 y corrige manejo numerico
 !!!						     
 !!!       VSN$ = "Version 2.2.5    29-MAR-2003 20:37:25 Genera complemento numerico atras
 !!!                                                  atras o delante segun parametro, nunca puesta en produccion
 !!!                                                     
 !!!       VSN$ = "Version 2.2.6     30-MAR-2003 09:33:23 VERSION 2.2.5 CON OPTIMIZACION DE TABS POR PROBLEMA GENERADO EN TRASPASO
 !!!                                                     
 !!!	TPG_TOT_HST			NUMERO DE HST ESPECIFICADOS
 !!!	TPG_MAT_NCP_SRV(I_CPT_NUM,J_CPT_NUM)	   NUMERO DE CAMPOS DEL SRV J_CPT_NUM PARA HST I_CPT_NUM
 !!!	TPG_MAT_NCP_SRV(I_CPT_NUM,J_CPT_NUM)	     TOTAL DE CAMPOS DEL SERVER,DONDE I_CPT_NUM N° DE HST,J_CPT_NUM N° DE SRVS PARA EL HST
 !!!	TPG_MAT_IDT_VBC(30,180)	    IDENTIFICA  TIPO DE CAMPO   EN VBC
 !!!	TPG_MAT_IDT_DO(30,180)	    IDENTIFICA  TIPO DE CAMPO DISPLAY ONLY
 !!!	TPG_MAT_NIV_IDPT(TPG_TOT_REQ,TPG_TOT_CAMP,1)  REPRESENTA NIVEL DE INDEXACION DE CAMPOS (EN SRV O HST)VAR_IDX1_CPT_NUM
 !!!	TPG_MAT_NIV_IDPT(TPG_TOT_REQ,TPG_TOT_CAMP,2)  REPRESENTA NIVEL DE INDEXACION DE CAMPOS (EN SRV O HST)VAR_IDX2_CPT_NUM
 !!!
 !!!	TPG_MAT_PTPIG(100,30)	       IDENTIFICA NOMBRE DE PANTALLA VISUAL ASOCIADA,SE UTILIZA,CUANDO SE 
 !!!					   SE INDEXA UNA PANTALLA EN OTRA EJ   (DBC + DIR)
 !!!	TPG_MAT_XTPIG(100,30) 
 !!!
 !!!	TPG_MAT_PTSPR(100,30)		   SE UTILIZA PARA IDENTIFICAR CUANDO UN SERVER REPRESENTA UNA GRILLA
 !!!					  PARA IDENTIFICAR  (SS AS CONTROL EN V.B.)
 !!!	TPG_MAT_XTSPR(100,30)
 !!!
 !!!	TPG_MAT_PTFRM(100,30)		 INDICA LOS NOMBRE DE LOS "FRM" PARA CADA "REQ"
 !!!					MAXIMO 30 "FRM" Y 100 "REQ"
 !!!
 !!!	TPG_MAT_INIIDXPT(100,30)	 INDICA SI EL "FRM" J INICIA UN GRUPO DE INDEXACION
 !!!			(I,J)		PARA EL "REQ" I,PARA QUE NO REFUNDA BAJO UN SOLO
 !!!					GRUPO INDEXADO DOS O MAS INDEXACIONES CON EL MISMO
 !!!					NUMERO DE OCURRENCIAS Y LAS MANEJE EN FORMA
 !!!					INDEPENDIENTE
 !!!
 !!!	TPG_MAT_INIIDXTX(100,30)	INDICA SI EL "FRM" J INICIA UN GRUPO DE INDEXACION PARA EL "REQ" I,PARA QUE NO REFUNDA 
 !!!			(I,J)		BAJO UN SOLO GRUPO INDEXADO DOS O MAS INDEXACIONES CON EL MISMO
 !!!					NUMERO DE OCURRENCIAS Y LAS MANEJE EN FORMA INDEPENDIENTE
 !!!
 !!!       *********  GENERACION DE SERVERS AUTOMATICOS ********
 !!!	901	IKY			"INSTANCIA DE LLAVES EN ING"
 !!!	902     STAT-MSG   FUE ELIMINADO
 !!!	903	FLD + MKY		"INSTANCIA DE CAMPOS EN ING Y MOD"
 !!!	904	FLD + MKY + AKY + IKY   "DATOS DE RESPUESTAS DE CON      "
 !!!	905	IKY + MKY + AKY		"INSTANCIA DE LLAVES EN CON,MOD,ELI "
 !!!	907	""			"INSTANCIA DE ENTER SIN DATOS ELI"

100

 !!! *** INI vectores y matrices que deben modificarse para soportar 500 campos por pantallas ***
 
 !!!    VARIABLES QUE PERMITEN NO MODIFICAR EL CODIGO EN INICIALIZACION DE MATRICES

 !!!	CANTIDAD MAXIMA DE HST 				30 --> 3
 !!!	DECLARE INTEGER	CONSTANT        MAX_HST = 	       3
	DECLARE INTEGER	CONSTANT        MAX_HST = 	30

 !!!	CANTIDAD MAXIMA DE SRV 				30 --> 5
 !!!	DECLARE INTEGER	CONSTANT        MAX_SRV = 	       5
	DECLARE INTEGER	CONSTANT        MAX_SRV = 	30

 !!!	CANTIDAD MAXIMA DE CAMPOS			200 --> 500
 !!!	DECLARE INTEGER	CONSTANT        MAX_FLD = 	        500
	DECLARE INTEGER	CONSTANT        MAX_FLD = 	200

 !!!	CANTIDAD MAXIMA DE PROGRAMAS			200 --> 20
 !!!	DECLARE INTEGER	CONSTANT        MAX_PGM = 	        20
	DECLARE INTEGER	CONSTANT        MAX_PGM = 	200

 !!!	CANTIDAD MAXIMA DE TRANSACCIONES		100 --> 40
 !!!	DECLARE INTEGER	CONSTANT        MAX_TRN = 	        40
	DECLARE INTEGER	CONSTANT        MAX_TRN = 	100


 !!!	TPG_MAT_HST_NUM(I_CPT_NUM,CTE_IDX_TCF)  TOTAL DE CAMPOS PARA HST I_CPT_NUM
 !!!	TPG_MAT_HST_NUM(I_CPT_NUM,CTE_IDX_TSF)  TOTAL DE SRV PARA HST I_CPT_NUM
 !!!							(30,30) -->  (30,500)
 !!!	DECLARE INTEGER	TPG_MAT_HST_NUM				     (30,500)
	DECLARE INTEGER	TPG_MAT_HST_NUM			(30,30)

 !!!	TPG_MAT_LRG(I_CPT_NUM,J_CPT_NUM) LARGO DEL CAMPO J_CPT_NUM DENTRO DEL HST I_CPT_NUM
 !!!							(30,200) --> (3,500)
 !!!	DECLARE INTEGER	 TPG_MAT_LRG			             (3,500)
	DECLARE INTEGER	 TPG_MAT_LRG			(30,200)

 !!!	IDENTIFICA TIPO DE CAMPO EN HST			(30,200) --> (30,500)
 !!!	COM STRING TPG_MAT_IDT_FLD				     (30,500) 
	COM STRING TPG_MAT_IDT_FLD			(30,200) 

 !!!	TPG_MAT_TOTOCCFLDHST(I_CPT_NUM,J_CPT_NUM) total de OCURRS del campo J_CPT_NUM dentro del HST I_CPT_NUM
 !!!							(30,200) --> (3,500)
 !!!	DECLARE INTEGER	 TPG_MAT_TOTOCCFLDHST		             (3,500)
	DECLARE INTEGER	 TPG_MAT_TOTOCCFLDHST		(30,200)

 !!!	TPG_MAT_TOTOCCFLDSRV(I_CPT_NUM,J_CPT_NUM,K_CPT_NUM) total de OCURS del campo  K_CPT_NUM para HST I_CPT_NUM SRV J_CPT_NUM
 !!!                                                    (30,30,200) --> (3,5,500)
 !!!	DECLARE INTEGER	 TPG_MAT_TOTOCCFLDSRV		                (3,5,500)
	DECLARE INTEGER	 TPG_MAT_TOTOCCFLDSRV		(30,30,200)

 !!!							(30,200) --> (3,200)
 !!!	COM STRING	TPG_MAT_TIP_NUM			             (3,200)
	COM STRING	TPG_MAT_TIP_NUM			(30,200)

 !!!							(30,200) --> (3,200)
 !!!	COM STRING	TPG_MAT_IDT_DO			             (3,200)
	COM STRING	TPG_MAT_IDT_DO			(30,200)

 !!!	TPG_MAT_NAMEFLDSRV(I_CPT_NUM,J_CPT_NUM,K_CPT_NUM) nombre de los campos  K_CPT_NUM  para HST  I_CPT_NUM SRV J_CPT_NUM
 !!!							(30,25,200) --> (3,5,500)
 !!!	COM STRING	TPG_MAT_NAMEFLDSRV		                (3,5,500)
	COM STRING	TPG_MAT_NAMEFLDSRV		(30,25,200)

 !!!							(30,25,200) --> (3,5,500)
 !!!	COM STRING	TPG_MAT_NUMFLDSRV		                (3,5,500)
	COM STRING	TPG_MAT_NUMFLDSRV		(30,25,200)

 !!!	TPG_MAT_NUM_FLD Identifica Campo Numericos en HST 
 !!!   ( [correlativo hst], [correlativo campo en hst], [VAR_IND_ENT, VAR_IND_DEC , VAR_IND_SIG ] )
 !!!							(30,200,3) --> (3,500,3)
 !!!	COM STRING	TPG_MAT_NUM_FLD			               (3,500,3)
	COM STRING	TPG_MAT_NUM_FLD			(30,200,3)

 !!!	matriz de programas				(200,20) --> (40,20) 
 !!!	DECLARE STRING	TPG_MAT_TRN_PGM			             (40,20)
	DECLARE STRING	TPG_MAT_TRN_PGM			(200,20)
 !!!	matriz de pantallas PT con ocurs variables	(200,20) --> (40,20) 
 !!!	COM     STRING	PTREQ_ENT_VAR			             (40,20)
	COM     STRING	PTREQ_ENT_VAR			(200,20)

 !!!	TPG_MAT_NAMEFLDHST(I_CPT_NUM,J_CPT_NUM)	NOMBRE DEL CAMPO J_CPT_NUM DENTRO DEL HST I_CPT_NUM
 !!!							(30,200) --> (3,500) 
 !!!	DECLARE STRING	TPG_MAT_NAMEFLDHST		             (3,500)
	DECLARE STRING	TPG_MAT_NAMEFLDHST		(30,200)

 !!!	REVISAR ESTA MATRIZ CANDIDATA A ELIMINARSE	(30,200) --> (3,500)
 !!!	DECLARE STRING	TPG_MAT_NUMFLDHST		             (3,500)
	DECLARE STRING	TPG_MAT_NUMFLDHST		(30,200)

 !!!	TPG_MAT_IDENFLDHST(I_CPT_NUM,J_CPT_NUM)	IDENTIFICACION(COMENTARIO) DEL CAMPO J_CPT_NUM DENTRO DEL HST I_CPT_NUM
 !!!							(30,200) --> (3,500)
 !!!	DECLARE STRING	TPG_MAT_IDENFLDHST		             (3,500)
	DECLARE STRING	TPG_MAT_IDENFLDHST		(30,200)

 !!!							(100,20,15) --> (40,20,15)
 !!!	COM STRING	 		TPG_MAT_TRN	                (40,20,15)
	COM STRING	 		TPG_MAT_TRN	(100,20,15)

 !!! FIN vectores y matrices que deben modificarse para soportar 500 campos por pantallas

	DECLARE REAL UNO_POR_CNT
	DECLARE INTEGER	 NUMTOKEN,	SZTOKEN,	TOKEN,	P_P,	P_Q,	P_R,	SZ_I_B,	LL,	FIL_HST
	DECLARE INTEGER	 COL_HST,	FIL_CAM,	COL_CAM,	FIL_NCF,	COL_NCF,	FIL_LRG
	DECLARE INTEGER	 COL_LRG,	FIL_IDX,	TPG_TOT_LEI,	TPG_POS_REQ,	UBI_SRV_TP,	NUM_TRN
	DECLARE INTEGER	 FIO_STAT,	FIO_ACCI,	FIO_RLEN,	C_FILE_MTX,	C_FILE_FMT,	C_FILE_PD1
	DECLARE INTEGER	 C_FILE_PD2,	C_FILE_PD3,	C_FILE_PD4,	C_FILE_PTX,	C_FILE_WS1,	C_FILE_WS2
	DECLARE INTEGER	 C_FILE_WS3,	C_FILE_PI1,	C_FILE_DFI,	C_FILE_DFO,	C_FILE_VBC,	INICIA_IDX_PT
	DECLARE INTEGER	 INICIA_IDX_TX,	INICIA_IDX_TP,	INICIA_IDX_XT,	RE,		ACCION,		FST_WSS
	DECLARE INTEGER	 TPG_HDR_SND_CPT_NUM,		TPG_TOT_HST,	TPG_TOT_REQ,	TPG_TOT_TRN,	TPG_CON_TRN
	DECLARE INTEGER	 SEM,		AUX,		CAMP,		LINEA,		PP_CPT_NUM,	ANT1_CPT_NUM
	DECLARE INTEGER	 ANT2_CPT_NUM,	CAMP_CPT_NUM,	COL_CPT_NUM,	CONT_SRV_CPT_NUM,		CON_NIV_CPT_NUM
	DECLARE INTEGER	 CON_NIV1_CPT_NUM,		CON_NIV2_CPT_NUM,		CON_NIVV_CPT_NUM
	DECLARE INTEGER	 CON_NIV_ANT_CPT_NUM,		MM_CPT_NUM,	COR_HST_CPT_NUM,		COR_PGM_CPT_NUM
	DECLARE INTEGER	 DD_CPT_NUM,	ENC_CPT_NUM,	FIRST_CPT_NUM,	FUNC_CPT_NUM,	GEN_I_CPT_NUM,	GEN_J_CPT_NUM
	DECLARE INTEGER	 GG_CPT_NUM,	HH_CPT_NUM,	HST_CPT_NUM,	I_CPT_NUM,	IDX_CPT_NUM,	IDX_ERR_CPT_NUM
	DECLARE INTEGER	 II_CPT_NUM,	INDEX_CPT_NUM,	J_CPT_NUM,	JJ_CPT_NUM,	K_CPT_NUM,	LARGO_STR_CPT_NUM
	DECLARE INTEGER	 LL_CPT_NUM,	LRG_PT_TX_CPT_NUM,		LRG_XT_TP_CPT_NUM,		LZ_CPT_NUM
	DECLARE INTEGER	 L_REG_CPT_NUM,	L_RELL_CPT_NUM,	MOV_OKS_CPT_NUM,		MULT_CPT_NUM,	MULT1_CPT_NUM
	DECLARE INTEGER	 MULT2_CPT_NUM,	MUL_NIV_DOS_CPT_NUM,		MUL_NIV_TRE_CPT_NUM,		MUL_NIV_UNO_CPT_NUM
	DECLARE INTEGER	 NIV_ESC_CPT_NUM,		NIV_MOV_PT_MOV_CPT_NUM,		NIV_MOV_TP_MOV_CPT_NUM
	DECLARE INTEGER	 NIV_MOV_TX_MOV_CPT_NUM,	NIV_MOV_XT_MOV_CPT_NUM,		NN_CPT_NUM,	NNN_IDX_CPT_NUM
	DECLARE INTEGER	 NN_IDX_CPT_NUM,		N_IDX_CPT_NUM,	O_CPT_NUM,	OCCUR1_CPT_NUM,	OCCUR2_CPT_NUM
	DECLARE INTEGER	 OCC_SRV_CPT_NUM,		PASO_CPT_NUM,	POS_1ER_FLD_IDX_CPT_NUM,	POS_IDX_CPT_NUM
	DECLARE INTEGER	 POS_ULT_FLD_IDX_CPT_NUM,	REPT1_CPT_NUM,	SEGR_CPL_CPT_NUM,		SEGR_NUM_CPT_NUM
	DECLARE INTEGER	 SEGS_CPL_CPT_NUM,		SEGS_NUM_CPT_NUM,		SEP_CPT_NUM,	SEP_ANT_CPT_NUM
	DECLARE INTEGER	 SRV_CPT_NUM,	SRV_TX_CPT_NUM,	SS_CPT_NUM,	TOT_OCURRENCIAS_CAMPOS_CPT_NUM,	TOT_PGM_CPT_NUM
	DECLARE INTEGER	 TPG_HDR_DAT_CPT_NUM,		TPG_LRG_RCV_CPT_NUM,		TPG_LRG_SND_CPT_NUM
	DECLARE INTEGER	 TPG_LRG_MSG_RCV_NUM,		TPG_LRG_MSG_SND_NUM,		TPG_TOT_SIST_CPT_NUM
	DECLARE INTEGER	 TT_CPT_NUM,	TY_CPT_NUM,	UU_CPT_NUM,	VAR_IDX1_CPT_NUM,		VAR_IDX2_CPT_NUM
	DECLARE INTEGER	 VV_CPT_NUM,	V_L_CPT_NUM,	AA_CPT_NUM,	XX_CPT_NUM,	YY_CPT_NUM,	ZZ_CPT_NUM
	DECLARE INTEGER	 ZZZ_CPT_NUM,	TPG_HDR_RCV,	LRG_ESTR_CPT_NUM,		NIV_MOV_TX_ENT,	NIV_MOV_PT_ENT
	DECLARE INTEGER	 NIV_MOV_XT_ENT,		NIV_MOV_TP_ENT,	SRV_ACT_CPT_NUM,		TPG_CON
	DECLARE INTEGER	 AUX_POS,	AUX_MAT_LRG,	AUX_MAT_TOTOCCFLDHST,		PRCJE_DESP(100)
	DECLARE INTEGER	 NIV_MRG(9),	TPG_MAT_INIIDXPT(100,30),	TPG_MAT_INIIDXTP(100,30),	TPG_MAT_INIIDXXT(100,30)
	DECLARE INTEGER	 TPG_MAT_INIIDXTX(100,30),	TPG_MAT_NCP_SRV(30,30),		TPG_VEC_NUM_TRN(100)
	DECLARE INTEGER	 TPG_MAT_CAM_PT(100),		TPG_MAT_CAM_TX(100),		TPG_MAT_CAM_TP(100)
	DECLARE INTEGER	 TPG_MAT_CAM_XT(100),		TPG_MAT_NIV_IDPT(100,20,2),	TPG_MAT_NIV_IDXT(100,20,2)
	DECLARE INTEGER	 TPG_MAT_NIV_IDTX(100,20,3),	TPG_MAT_NIV_IDTP(100,20,2)
	DECLARE INTEGER	CONSTANT  	FIO_STAT_OKS            = 0
	DECLARE INTEGER	CONSTANT  	NO_INICIA_IDX_PT	= 0
	DECLARE INTEGER	CONSTANT  	SI_INICIA_IDX_PT	= 1
	DECLARE INTEGER	CONSTANT  	NO_INICIA_IDX_TP	= 0
	DECLARE INTEGER	CONSTANT  	SI_INICIA_IDX_TP	= 1
	DECLARE INTEGER	CONSTANT  	NO_INICIA_IDX_XT	= 0
	DECLARE INTEGER	CONSTANT  	SI_INICIA_IDX_XT	= 1
	DECLARE INTEGER	CONSTANT  	NO_INICIA_IDX_TX	= 0
	DECLARE INTEGER	CONSTANT  	SI_INICIA_IDX_TX	= 1
	DECLARE INTEGER	CONSTANT  	KEYTOK = 1
	DECLARE INTEGER	CONSTANT  	IDNTOK = 2
	DECLARE INTEGER	CONSTANT  	NUMTOK = 3
	DECLARE INTEGER	CONSTANT  	STRTOK = 4
	DECLARE INTEGER	CONSTANT  	CHRTOK = 5
	DECLARE INTEGER	CONSTANT  	EOLTOK = 6
	DECLARE INTEGER	CONSTANT  	ETXTOK = 7
	DECLARE INTEGER	CONSTANT  	HTAB   = 9
	DECLARE INTEGER	CONSTANT  	TPGTOK = 10
	DECLARE INTEGER	CONSTANT  	CTE_IDX_TCF = 1
	DECLARE INTEGER	CONSTANT  	CTE_IDX_TSF = 2
	DECLARE INTEGER	CONSTANT  	CTE_IDX_NOM = 1
	DECLARE INTEGER	CONSTANT  	CTE_IDX_SIS = 2
	DECLARE INTEGER	CONSTANT  	CTE_IDX_SIM = 3
	DECLARE INTEGER	CONSTANT  	CTE_TRN_FRM = 1
	DECLARE INTEGER	CONSTANT  	CTE_TRN_CMN = 2
	DECLARE INTEGER	CONSTANT  	CTE_TRN_CPP = 3
	DECLARE INTEGER	CONSTANT  	CTE_TRN_SPP = 4
	DECLARE INTEGER	CONSTANT  	CTE_TRN_PGM = 5
	DECLARE INTEGER	CONSTANT  	CTE_TRN_SUB = 6
	DECLARE INTEGER	CONSTANT  	CTE_TRN_INS = 7
	DECLARE INTEGER	CONSTANT  	CTE_TRN_INM = 8
	DECLARE INTEGER	CONSTANT  	CTE_TRN_FIN = 9
	DECLARE INTEGER	CONSTANT  	CTE_TRN_FOU = 10
	DECLARE INTEGER	CONSTANT  	CTE_TRN_CMT = 11
	DECLARE INTEGER	CONSTANT  	CTE_TRN_IDX = 12
	DECLARE INTEGER	CONSTANT  	CTE_TRN_CNF = 13
	DECLARE INTEGER	CONSTANT  	CTE_TRN_TRX = 14
	DECLARE INTEGER	CONSTANT  	MG_0  = 1
	DECLARE INTEGER	CONSTANT  	MG_7  = 2
	DECLARE INTEGER	CONSTANT  	MG_8  = 3
	DECLARE INTEGER	CONSTANT  	MG_12 = 4
	DECLARE INTEGER	CONSTANT  	MG_16 = 5
	DECLARE INTEGER	CONSTANT  	MG_20 = 6
	DECLARE INTEGER	CONSTANT  	MG_24 = 7
	DECLARE INTEGER	CONSTANT  	MG_28 = 8
	DECLARE INTEGER	CONSTANT  	NIV_00 = MG_0
	DECLARE INTEGER	CONSTANT  	NIV_CC = MG_7
	DECLARE INTEGER	CONSTANT  	NIV_01 = MG_8
	DECLARE INTEGER	CONSTANT  	NIV_03 = MG_12
	DECLARE INTEGER	CONSTANT  	NIV_05 = MG_16
	DECLARE INTEGER	CONSTANT  	NIV_07 = MG_20
	DECLARE INTEGER	CONSTANT  	NIV_09 = MG_24
	DECLARE INTEGER	CONSTANT  	NIV_11 = MG_28
	DECLARE INTEGER	CONSTANT  	TOT_PASOS = 8
	DECLARE INTEGER	CONSTANT  	TPG_CTE_TRUE = 1
	DECLARE INTEGER	CONSTANT  	NO	  = 0

	DECLARE STRING	WSS_USN,	VAR_IND_NVL1,	BIP, GNS_PATH,	TPGMATTPFMT	,TPGMATNAMEFLDSRV
	DECLARE STRING	I_B_STR,	PRI_IF,	SEG_IF,	FIO_BUF0,	C_Q
	DECLARE STRING	SC_C_Q, VALTOKEN,	SC_VALTOKEN,	STRTOKEN,	ANTE,GLS_ERR
	DECLARE STRING	WSS_DLP,	WSS_DPP,	WSS_DFI,	WSS_GENDFO,	WSS_DSP00
	DECLARE STRING	WSS_DSP01,	WSS_DSP04,	FILE_FMT,	FILE_MTX,	FILE_PD1
	DECLARE STRING	FILE_PD2,	FILE_PD3,	FILE_PD4,	FILE_PTX,	FILE_WS1
	DECLARE STRING	FILE_WS2,	FILE_WS3,	FILE_PI1,	FILE_DFI,	FILE_DFO
	DECLARE STRING	FILE_VBC,	O_L,		EXTERNO,	VARI_ABPA,	VARI_CIPA
	DECLARE STRING	BUFOUT, RPT_GLS_PRY,	MAP_GLS_CMP,	RPT_GLS_SRT,	MTX_GLS_SOP
	DECLARE STRING	MTX_GLS_AIU,	MAP_GLS_IDEN,	RPT_GLS_PAI,	RPT_GLS_CLI,	VARI
	DECLARE STRING	TPGMATTPFRM_CPT_ALF,		SWICH_CPT_ALF,	AA_CPT_ALF,	ABPAPT_CPT_ALF
	DECLARE STRING	ABPATP_CPT_ALF,	ABPATX_CPT_ALF, ABPAXT_CPT_ALF, ANO_CPT_ALF
	DECLARE STRING	ANTB_CPT_ALF,	ANTE_CPT_ALF,	ARCH_IDEN_CPT_ALF,		ARCH_SPA_CPT_ALF
	DECLARE STRING	AUX_FNC_CPT_ALF,		AUX_CMN_CPT_ALF,		AUX_CNF_CPT_ALF
	DECLARE STRING	AUX_CPP_CPT_ALF,		AUX_PGM_CPT_ALF,		AUX_SPP_CPT_ALF
	DECLARE STRING	AUX_SUB_CPT_ALF,		BB_CPT_ALF,	BUF_CPT_ALF,	CAM_VAL_CPT_ALF
	DECLARE STRING	CIPAPT_CPT_ALF,	CIPATP_CPT_ALF, CIPATX_CPT_ALF, CIPAXT_CPT_ALF
	DECLARE STRING	CL_CPT_ALF,	COD_CTAB_CPT_ALF,		COD_TABL_CPT_ALF
	DECLARE STRING	COMAPT_CPT_ALF,	COMATP_CPT_ALF, COMATX_CPT_ALF, COMAXT_CPT_ALF
	DECLARE STRING	CON_NIV_CPT_ALF,		CORR_FLD_CPT_ALF,		DER_CPT_ALF
	DECLARE STRING	DIA_CPT_ALF,	DPS_IDX_TX_CPT_ALF,		DSP_IDX_TX_CPT_ALF
	DECLARE STRING	DSP_IDX_XT_CPT_ALF,		DT_CPT_ALF,	ENC_CPT_ALF,	ENC_PGM_CPT_ALF
	DECLARE STRING	ESCR_CPT_ALF,	ES_FTB_CPT_ALF, ES_VAL_CPT_ALF, EX_CTAB_CPT_ALF,EX_TABL_CPT_ALF
	DECLARE STRING	FINP_CPT_ALF,	FIRST_CPT_ALF,	FLD_VBC_CPT_ALF,FOUT_CPT_ALF,	FRS_LRG_XT_CPT_ALF
	DECLARE STRING	FUNC_CPT_ALF,	GLS_1_CPT_ALF,	HORA_CPT_ALF,	HRS_CPT_ALF,	IDX_PT_CPT_ALF
	DECLARE STRING	IDX_TP_CPT_ALF,	IDX_TX_CPT_ALF, IDX_XT_CPT_ALF, IZQ_CPT_ALF
	DECLARE STRING	LL_CPT_ALF,	LR_CPT_ALF,	LRG_PT_TX_CPT_ALF,		LRG_XT_TP_CPT_ALF
	DECLARE STRING	MAP_GLS_VBC_CPT_ALF,		MES_CPT_ALF,	MNT_CPT_ALF,	MNU_COD_CMND_CPT_ALF
	DECLARE STRING	MNU_COD_FRET_CPT_ALF,		MNU_COD_IMEN_CPT_ALF,		MNU_COD_INST_CPT_ALF
	DECLARE STRING	MNU_COD_NEMO_CPT_ALF,		MNU_COD_OPCI_CPT_ALF,		MNU_COD_TCTL_CPT_ALF
	DECLARE STRING	MNU_COD_TFUN_CPT_ALF,		MNU_COD_TINF_CPT_ALF,		MNU_GLS_FMEN_CPT_ALF
	DECLARE STRING	MNU_GLS_FPRO_CPT_ALF,		MNU_GLS_LFRM_CPT_ALF,		MNU_GLS_NFRM_CPT_ALF
	DECLARE STRING	MNU_GLS_PROG_CPT_ALF,		MNU_GLS_TRAN_CPT_ALF	
	DECLARE STRING	MNU_NUM_COLU_CPT_ALF,		MNU_NUM_FILA_CPT_ALF,		NEX_CPT_ALF
	DECLARE STRING	NOMB_ARCH_CPT_ALF,		NUEVE_CPT_ALF,	OCCUR1_CPT_ALF, OCCUR2_CPT_ALF
	DECLARE STRING	OLD_IDX_CPT_ALF,	PUT_HDR_CPT_ALF,	PUT_PTHDR_CPT_ALF,	REGMNU_CPT_ALF
	DECLARE STRING	REGMNU_1_CPT_ALF,	REGMNU_2_CPT_ALF,	REG_1_CPT_ALF,	REG_2_CPT_ALF
	DECLARE STRING	REG_TAB_CPT_ALF,	¿RELL_CPT_ALF,	REPT_CPT_ALF,	RPF_COD_STPP_CPT_ALF
	DECLARE STRING	RPF_COD_CCPP_CPT_ALF,	RPF_COD_CMND_CPT_ALF,	RPF_COD_CONF_CPT_ALF
	DECLARE STRING	RPF_COD_CORR_CPT_ALF,	RPF_COD_DARC_CPT_ALF,	RPF_COD_DATA_CPT_ALF
	DECLARE STRING	RPF_COD_DPRO_CPT_ALF,	RPF_COD_TREG_CPT_ALF,	RPF_COD_UARC_CPT_ALF
	DECLARE STRING	RPF_GLS_DAT1_CPT_ALF,	RPF_GLS_DAT2_CPT_ALF,	RR_CPT_ALF,	SEC_PT_HDR_CPT_ALF
	DECLARE STRING	SEGR_CPT_ALF,SEGR_CPL_CPT_ALF,	SEGS_CPT_ALF,	SEGS_CPL_CPT_ALF
	DECLARE STRING	SGTE_CPT_ALF,	SIETE_CPT_ALF,	SIS_PAN_CPT_ALF,	SIS_PAN_ANT_CPT_ALF
	DECLARE STRING	TAB_GLS_DESC_CPT_ALF,	TIME_STP_CPT_ALF,	TPG_GLS_FRM_CPT_ALF,	TPG_GLS_FRQ_CPT_ALF
	DECLARE STRING	TPG_GLS_SIM_CPT_ALF,	TPG_GLS_SIS_CPT_ALF,	VAR_AUX_CPT_ALF,	VSN_CPT_ALF
	DECLARE STRING	VV_CPT_ALF,	WRI_CPT_ALF,	XX_CPT_ALF,	YY_CPT_ALF,	GLDIRARCH,	CPL_NUM_INI

	COM STRING	 		TPG_MAT_TPFRM(100,30)       
	COM STRING	 		TPG_MAT_PTFMT(100,30)       
	COM STRING	 		TPG_MAT_TXFMT(100,30)       
	COM STRING	 		TPG_MAT_XTFMT(100,30)       
 !!!% NOMVAR = "		TPG_MAT_IDT_VBC(30,180)    "
 !!!% INCLUDE DEFINT OF 'GNSSRC:GENMTX.SKL'

	DECLARE INTEGER	CONSTANT        VAR_IND_ENT             = 1
	DECLARE INTEGER	CONSTANT        VAR_IND_DEC             = 2
	DECLARE INTEGER	CONSTANT        VAR_IND_SIG             = 3

	DECLARE INTEGER	CONSTANT        CTE_NUMER_NAME	= 1
	DECLARE INTEGER	CONSTANT        CTE_NUMER_ENTER	= 2
	DECLARE INTEGER	CONSTANT        CTE_NUMER_DECIM	= 3
	DECLARE INTEGER	CONSTANT        CTE_NUMER_SIGNO	= 4
	DECLARE INTEGER	CONSTANT        CTE_NUMER_REQU	= 5
	DECLARE INTEGER	CONSTANT        CTE_NUMER_PTOTP	= 6
	DECLARE INTEGER	CONSTANT        CTE_NUMER_OCCX  = 7
	DECLARE INTEGER	CONSTANT        CTE_NUMER_OCCY  = 8
	DECLARE INTEGER	CONSTANT        CTE_NUMER_OCCZ  = 9

	DECLARE STRING	 		VEC_NUMER(600,9)
	DECLARE STRING	 		TPG_MAT_HST_ALF(30,3)      
	DECLARE STRING	 		TPG_MAT_SRV_ALF(30,30)     
	DECLARE STRING	 		TPG_VEC_REQ(100)           
	DECLARE STRING	 		TPG_VEC_DEF_REQ(80)        
	DECLARE STRING	 		TAB_GLS_DESC(10)           
	DECLARE STRING	 		TAB_DO_DESC(10)           
	DECLARE STRING	 		TPG_MAT_PTFRM(100,30)       
	DECLARE STRING	 		TPG_MAT_PTPIG(100,30)       
	DECLARE STRING	 		TPG_MAT_XTPIG(100,30)       
	DECLARE STRING	 		TPG_MAT_PTSPR(100,30)       
	DECLARE STRING	 		TPG_MAT_XTSPR(100,30)       
	DECLARE STRING	 		TPG_MAT_TXFRM(100,30)       
	DECLARE STRING	 		TPG_MAT_XTFRM(100,30)       
	DECLARE STRING	 		TPG_MAT_TPFMT(100,30)       
	DECLARE STRING	 		V_MES(12,2)                
	DECLARE STRING	 		TPG_VEC_SIST(30)           
	DECLARE STRING	 		V_M(9)	            
	DECLARE STRING	 		NIV_PIC(9)          
	DECLARE STRING	 		NIV_SEP(14)	    


200
 !!!===========================================
 !!! DECLARACION DE FUNCIONES PRINT A PANTALLA=
 !!!                 (INI)                  =
 !!!===========================================
   DEF STRING FNC_PRINT(STRING MENS)
	PRINT MENS
   END DEF

 !!!===========================================
 !!! DECLARACION DE FUNCIONES PRINT A PANTALLA=
 !!!                 (FIN)                  =
 !!!===========================================

      DEF INTEGER FNC_SYSINTEGER(LONG  VALOR)
		FNC_SYSINTEGER = INTEGER(VALOR)
      END DEF

      DEF STRING FNC_SYS_LIB_GET_SYMBOL(STRING GET_SYMBOL)
          CALL LIB$GET_SYMBOL(GET_SYMBOL,AUX_FNC_CPT_ALF)
          FNC_SYS_LIB_GET_SYMBOL = AUX_FNC_CPT_ALF
      END DEF

      DEF INTEGER FNC_SYSPOS(STRING LINEA,STRING ARGBUSQ,INTEGER POSINIC)
          FNC_SYSPOS = POS(LINEA,ARGBUSQ,POSINIC)
      END DEF

      DEF STRING FNC_SYSFORMAT(INTEGER VALFMT,STRING TOTFMT)

		IF TOTFMT = "#" THEN
			FNC_SYSFORMAT = FORMAT$(VALFMT,"#")
		ELSE
		IF TOTFMT = "##" THEN
			FNC_SYSFORMAT = FORMAT$(VALFMT,"##")
		ELSE
		IF TOTFMT = "###" THEN
			FNC_SYSFORMAT = FORMAT$(VALFMT,"###")
		ELSE
		IF TOTFMT = "####" THEN
			FNC_SYSFORMAT = FORMAT$(VALFMT,"####")
		ELSE
		IF TOTFMT = "#####" THEN
			FNC_SYSFORMAT = FORMAT$(VALFMT,"#####")
		ELSE
		IF TOTFMT = "######" THEN
			FNC_SYSFORMAT = FORMAT$(VALFMT,"######")
		END IF
		END IF
		END IF
		END IF
		END IF
		END IF
   END DEF

   DEF STRING FNC_SYSCHR(INTEGER CHA)
	FNC_SYSCHR = CHR$(CHA)
   END DEF

   DEF STRING EMIT_BIP
	PRINT FNC_SYSCHR(7)
   END DEF

   DEF STRING GET_COM1
	GET_COM1 = FNC_SYSCHR(39)
   END DEF

   DEF STRING GET_COM2
	GET_COM2 = FNC_SYSCHR(34)
   END DEF

   DEF STRING FNC_SYSRIGHT(STRING DER,INTEGER DESDE)
	FNC_SYSRIGHT = RIGHT$(DER,DESDE)
   END DEF

   DEF STRING FNC_SYSLEFT(STRING IZQ,INTEGER HASTA)
	FNC_SYSLEFT = LEFT$(IZQ,HASTA)
   END DEF

   DEF STRING FNC_SYSSTR(INTEGER NUME)
	FNC_SYSSTR = STR$(NUME)
   END DEF

   DEF STRING FNC_SYSMID(STRING CADENA,INTEGER DESDE,INTEGER CUANTOS)
	FNC_SYSMID = MID$(CADENA,DESDE,CUANTOS)
   END DEF

   DEF INTEGER FNC_SYSLEN(STRING CADENA)
	FNC_SYSLEN = LEN(CADENA)
   END DEF

   DEF STRING FNC_SYSTIME(INTEGER PARAM)
	FNC_SYSTIME = TIME$(PARAM)
   END DEF

   DEF STRING FNC_SYSDATE(INTEGER PARAM)
	FNC_SYSDATE = DATE$(PARAM)
   END DEF

   DEF STRING FNC_SYSSTRING(INTEGER PARAM1,INTEGER PARAM2)
	FNC_SYSSTRING = STRING$(PARAM1,PARAM2)
   END DEF

   DEF STRING FNC_SYSEDIT(STRING PARAM1,INTEGER PARAM2)
	FNC_SYSEDIT = EDIT$(PARAM1,PARAM2)
   END DEF

   DEF STRING GENRPTREP (STRING ESTR_INGS,STRING CRTR_ORIG,STRING CRTR_REEM)
        DECLARE STRING VAR_AUXI_CPT_ALF

 !!!  REEMPLAZA EN ESTR_INGS EL CRTR_ORIG(CARACTER ORIGINAL)
 !!!  POR CRTR_REEM(CARATER(ES) DE REEMPLAZO)

 !!!  EJEMPLO DE LLAMADA DE ESTA SUBRUTINA:
 !!!      PICT_FILD = 999999,999
 !!!     CALL GENRPTREP(PICT_FILD,",","V")
 !!!  ESTA SUBRUTINA DEVUELVE EN PICT_FILD EL VALOR 999999V999

   LARGO_STR_CPT_NUM = FNC_SYSLEN(ESTR_INGS)
   VAR_AUXI_CPT_ALF = ""
   FOR I_CPT_NUM = 1 TO LARGO_STR_CPT_NUM
      IF FNC_SYSMID(ESTR_INGS,I_CPT_NUM,1) = CRTR_ORIG THEN
	 VAR_AUXI_CPT_ALF = VAR_AUXI_CPT_ALF + CRTR_REEM
      ELSE
	 VAR_AUXI_CPT_ALF = VAR_AUXI_CPT_ALF + FNC_SYSMID(ESTR_INGS,I_CPT_NUM,1)
      END IF
   NEXT I_CPT_NUM
   ESTR_INGS = VAR_AUXI_CPT_ALF
   GENRPTREP = VAR_AUXI_CPT_ALF
   END DEF

   DEF STRING GENMTXL72 (STRING P1,STRING P2,INTEGER P3)

 !!!  ENTREGA UNA LINA COBOL DE LARGO 72 CARACTERES INCORPORANDO UN RELLENO ENTRE LOS DOS
 !!!  PARAMETROS INGRESADOS DE INPUT LA RESPUESTA LA ENTREGA EN EL PRIMER PARAMETRO
	DECLARE STRING RELL2_CPT_ALF 
	DECLARE STRING V_M2(9)
	DECLARE INTEGER CONSTANT MG_0 = 1
	DECLARE INTEGER CONSTANT MG_7  = 2
	DECLARE INTEGER CONSTANT MG_8  = 3
	DECLARE INTEGER CONSTANT MG_12 = 4
	DECLARE INTEGER CONSTANT MG_16 = 5
	DECLARE INTEGER CONSTANT MG_20 = 6
	DECLARE INTEGER CONSTANT MG_24 = 7
	DECLARE INTEGER CONSTANT MG_28 = 8
        V_M2(MG_0)  = ""
        V_M2(MG_7)  = "      *"
        V_M2(MG_8)  = "       "
        V_M2(MG_12) = "           "
        V_M2(MG_16) = "               "
        V_M2(MG_20) = "                   "
        V_M2(MG_24) = "                       "
        V_M2(MG_28) = "                           "
	L_REG_CPT_NUM = FNC_SYSLEN(V_M2(P3)) + FNC_SYSLEN(P1) + FNC_SYSLEN(P2)
	RELL2_CPT_ALF = ""
	IF L_REG_CPT_NUM < 72 THEN
		L_RELL2_CPT_NUM = 72 - L_REG_CPT_NUM
		FOR RELL2_CPT_NUM = 1 TO L_RELL2_CPT_NUM
			RELL2_CPT_ALF = RELL2_CPT_ALF + " "
		NEXT RELL2_CPT_NUM
	END IF
	GENMTXL72 = P1 + RELL2_CPT_ALF + P2
   END DEF

   DEF STRING PRT_ESTAD_LEE
	IF ESCRIBE_LOG$ = "" THEN
		avance_etapa$ = avance_etapa$ + "a"
	  	PRINT lin_ant$ ; "% Lectura   " ; " (0" ; avance_etapa$ ; " (B" 
	END IF
   END DEF

   DEF STRING PRT_ESTAD
	IF ESCRIBE_LOG$ = "" THEN
		avance_proceso$ = avance_proceso$ + "aaaaaaaaaaa"
	 	PRINT lin_ant$ ; "Etapa     [5m" ; FNC_SYSFORMAT(paso_cpt_num + 1 ,"##")  ; "[0m (0" ; avance_proceso$ ; " (B" ; FNC_SYSFORMAT(paso_cpt_num,"#")
	END IF
   END DEF

   DEF STRING NUM_2 (STRING P1)
	IF FNC_SYSLEN(P1) = 1 THEN
		P1 = "0" + P1
	END IF
	NUM_2 = P1
   END DEF

   DEF STRING NUM_5 (STRING P1)
	IF FNC_SYSLEN(P1) = 1 THEN
		P1 = "0000" + P1
	ELSE
	IF FNC_SYSLEN(P1) = 2 THEN
		P1 = "000" + P1
	ELSE
	IF FNC_SYSLEN(P1) = 3 THEN
		P1 = "00" + P1
	ELSE
	IF FNC_SYSLEN(P1) = 4 THEN
		P1 = "0" + P1
	END IF
	END IF
	END IF
	END IF
	NUM_5 = P1
   END DEF

  DEF STRING COMPACT(STRING LIN_LEIDA)
	 LINEA$ = LIN_LEIDA
	 LIN_ESCR$ = ""
	 LARGO% = 0
	 SICLO% = 0
	 BLANCOS% = 0
	 LIN_ESCR$ = ""
	 LARGO% = FNC_SYSLEN(LINEA$)
	 WHILE SICLO% <= LARGO% 
		 IF FNC_SYSLEN(LINEA$) > 2 THEN
	         	 RESTO$ = FNC_SYSRIGHT(LINEA$,2)
		 ELSE
	         	 RESTO$ = FNC_SYSRIGHT(LINEA$,1)
		 END IF
	        ANAL_BLCO$ = FNC_SYSLEFT(LINEA$,1)
		 IF ANAL_BLCO$ = " " THEN
			BLANCOS% = BLANCOS% + 1
		 ELSE
			IF BLANCOS% <> 0 THEN
				IF BLANCOS% > 3 THEN
					NUM_BLAN$ = FNC_SYSSTR(BLANCOS%)
					LIN_ESCR$ = LIN_ESCR$ + "@" + NUM_BLAN$ + "@" + ANAL_BLCO$
					BLANCOS% = 0
				ELSE
 					FOR BBI% = 0 TO BLANCOS%
						LIN_ESCR$ = LIN_ESCR$ + " "
 					NEXT BBI%
					BLANCOS% = 0
					LIN_ESCR$ = LIN_ESCR$ + ANAL_BLCO$
				END IF
			ELSE
				LIN_ESCR$ = LIN_ESCR$ + ANAL_BLCO$
			END IF
		 END IF
		 LINEA$ = RESTO$
		 SICLO% = SICLO% + 1
	 NEXT
	 COMPACT = "      * " + LIN_ESCR$ + LINEA$
   END DEF

 !!!===========================================
 !!! DECLARACION DE FUNCIONES I/O             =
 !!!                 (INI)                  =
 !!!===========================================

   DEF INTEGER FIO_PTX_CLO

        ON ERROR GO TO ERR_FIO_PTX_CLO

        CLOSE #C_FILE_PTX

        GO TO OK_FIO_PTX_CLO

 ERR_FIO_PTX_CLO:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_PTX + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_PTX + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_PTX + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_PTX + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_PTX_CLO:

   END DEF



   DEF INTEGER FIO_PTX_OUT

        ON ERROR GO TO ERR_FIO_PTX_OUT

        OPEN FILE_PTX FOR OUTPUT AS FILE #C_FILE_PTX, ORGANIZATION SEQUENTIAL VARIABLE , RECORDSIZE 255, RECORDTYPE ANY

        GO TO OK_FIO_PTX_OUT
 ERR_FIO_PTX_OUT:
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_PTX + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_PTX + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_PTX + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_PTX + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_PTX_OUT:

   END DEF

   DEF INTEGER FIO_PTX_PUT(INTEGER FIO_STAT, STRING BUF0)

        ON ERROR GO TO ERR_FIO_PTX_PUT

        PRINT #C_FILE_PTX, BUF0

        GO TO OK_FIO_PTX_PUT
 ERR_FIO_PTX_PUT:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_PTX + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_PTX + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_PTX + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_PTX + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        FIO_STAT = 23

        RESUME

 OK_FIO_PTX_PUT:

        FIO_STAT = 0

   END DEF

   DEF INTEGER FIO_WS1_CLO

        ON ERROR GO TO ERR_FIO_WS1_CLO

        CLOSE #C_FILE_WS1

        GO TO OK_FIO_WS1_CLO

 ERR_FIO_WS1_CLO:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_WS1 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_WS1 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_WS1 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_WS1 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_WS1_CLO:

   END DEF

   DEF INTEGER FIO_WS1_OUT

        ON ERROR GO TO ERR_FIO_WS1_OUT

        OPEN FILE_WS1 FOR OUTPUT AS FILE #C_FILE_WS1, ORGANIZATION SEQUENTIAL VARIABLE , RECORDSIZE 255, RECORDTYPE ANY

        GO TO OK_FIO_WS1_OUT
 ERR_FIO_WS1_OUT:
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_WS1 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_WS1 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_WS1 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_WS1 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_WS1_OUT:

   END DEF

   DEF INTEGER FIO_WS1_PUT(INTEGER FIO_STAT, STRING BUF0)

        ON ERROR GO TO ERR_FIO_WS1_PUT

        PRINT #C_FILE_WS1, BUF0

        GO TO OK_FIO_WS1_PUT
 ERR_FIO_WS1_PUT:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_WS1 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_WS1 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_WS1 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_WS1 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        FIO_STAT = 23

        RESUME

 OK_FIO_WS1_PUT:

        FIO_STAT = 0

   END DEF

   DEF INTEGER FIO_WS2_CLO

        ON ERROR GO TO ERR_FIO_WS2_CLO

        CLOSE #C_FILE_WS2

        GO TO OK_FIO_WS2_CLO

 ERR_FIO_WS2_CLO:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_WS2 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_WS2 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_WS2 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_WS2 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_WS2_CLO:

   END DEF

   DEF INTEGER FIO_WS2_OUT

        ON ERROR GO TO ERR_FIO_WS2_OUT

        OPEN FILE_WS2 FOR OUTPUT AS FILE #C_FILE_WS2, ORGANIZATION SEQUENTIAL VARIABLE , RECORDSIZE 255, RECORDTYPE ANY

        GO TO OK_FIO_WS2_OUT
 ERR_FIO_WS2_OUT:
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_WS2 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_WS2 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_WS2 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_WS2 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_WS2_OUT:

   END DEF

   DEF INTEGER FIO_WS2_PUT(INTEGER FIO_STAT, STRING BUF0)

        ON ERROR GO TO ERR_FIO_WS2_PUT

        PRINT #C_FILE_WS2, BUF0

        GO TO OK_FIO_WS2_PUT
 ERR_FIO_WS2_PUT:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_WS2 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_WS2 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_WS2 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_WS2 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        FIO_STAT = 23

        RESUME

 OK_FIO_WS2_PUT:

        FIO_STAT = 0

   END DEF

   DEF INTEGER FIO_WS3_CLO

        ON ERROR GO TO ERR_FIO_WS3_CLO

        CLOSE #C_FILE_WS3

        GO TO OK_FIO_WS3_CLO

 ERR_FIO_WS3_CLO:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_WS3 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_WS3 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_WS3 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_WS3 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_WS3_CLO:

   END DEF

   DEF INTEGER FIO_WS3_OUT

        ON ERROR GO TO ERR_FIO_WS3_OUT

        OPEN FILE_WS3 FOR OUTPUT AS FILE #C_FILE_WS3, ORGANIZATION SEQUENTIAL VARIABLE , RECORDSIZE 255, RECORDTYPE ANY

        GO TO OK_FIO_WS3_OUT
 ERR_FIO_WS3_OUT:
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_WS3 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_WS3 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_WS3 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_WS3 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_WS3_OUT:

   END DEF

   DEF INTEGER FIO_WS3_PUT(INTEGER FIO_STAT, STRING BUF0)

        ON ERROR GO TO ERR_FIO_WS3_PUT

        PRINT #C_FILE_WS3, BUF0

        GO TO OK_FIO_WS3_PUT
 ERR_FIO_WS3_PUT:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_WS3 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_WS3 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_WS3 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_WS3 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        FIO_STAT = 23

        RESUME

 OK_FIO_WS3_PUT:

        FIO_STAT = 0

   END DEF

   DEF INTEGER FIO_PD1_CLO

        ON ERROR GO TO ERR_FIO_PD1_CLO

        CLOSE #C_FILE_PD1

        GO TO OK_FIO_PD1_CLO

 ERR_FIO_PD1_CLO:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_PD1 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_PD1 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_PD1 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_PD1 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_PD1_CLO:

   END DEF

   DEF INTEGER FIO_PD1_OUT

        ON ERROR GO TO ERR_FIO_PD1_OUT

        OPEN FILE_PD1 FOR OUTPUT AS FILE #C_FILE_PD1, ORGANIZATION SEQUENTIAL VARIABLE , RECORDSIZE 255, RECORDTYPE ANY

        GO TO OK_FIO_PD1_OUT
 ERR_FIO_PD1_OUT:
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_PD1 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_PD1 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_PD1 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_PD1 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_PD1_OUT:

   END DEF

   DEF INTEGER FIO_PD1_PUT(INTEGER FIO_STAT, STRING BUF0)

        ON ERROR GO TO ERR_FIO_PD1_PUT

        PRINT #C_FILE_PD1, BUF0

        GO TO OK_FIO_PD1_PUT
 ERR_FIO_PD1_PUT:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_PD1 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_PD1 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_PD1 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_PD1 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        FIO_STAT = 23

        RESUME

 OK_FIO_PD1_PUT:

        FIO_STAT = 0

   END DEF

   DEF INTEGER FIO_PD2_CLO

        ON ERROR GO TO ERR_FIO_PD2_CLO

        CLOSE #C_FILE_PD2

        GO TO OK_FIO_PD2_CLO

 ERR_FIO_PD2_CLO:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_PD2 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_PD2 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_PD2 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_PD2 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_PD2_CLO:

   END DEF

   DEF INTEGER FIO_PD2_OUT

        ON ERROR GO TO ERR_FIO_PD2_OUT

        OPEN FILE_PD2 FOR OUTPUT AS FILE #C_FILE_PD2, ORGANIZATION SEQUENTIAL VARIABLE , RECORDSIZE 255, RECORDTYPE ANY

        GO TO OK_FIO_PD2_OUT
 ERR_FIO_PD2_OUT:
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_PD2 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_PD2 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_PD2 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_PD2 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_PD2_OUT:

   END DEF

   DEF INTEGER FIO_PD2_PUT(INTEGER FIO_STAT, STRING BUF0)

        ON ERROR GO TO ERR_FIO_PD2_PUT

        PRINT #C_FILE_PD2, BUF0

        GO TO OK_FIO_PD2_PUT
 ERR_FIO_PD2_PUT:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_PD2 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_PD2 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_PD2 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_PD2 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        FIO_STAT = 23

        RESUME

 OK_FIO_PD2_PUT:

        FIO_STAT = 0

   END DEF

   DEF INTEGER FIO_PD3_CLO

        ON ERROR GO TO ERR_FIO_PD3_CLO

        CLOSE #C_FILE_PD3

        GO TO OK_FIO_PD3_CLO

 ERR_FIO_PD3_CLO:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_PD3 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_PD3 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_PD3 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_PD3 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_PD3_CLO:

   END DEF

   DEF INTEGER FIO_PD3_OUT

        ON ERROR GO TO ERR_FIO_PD3_OUT

        OPEN FILE_PD3 FOR OUTPUT AS FILE #C_FILE_PD3, ORGANIZATION SEQUENTIAL VARIABLE , RECORDSIZE 255, RECORDTYPE ANY

        GO TO OK_FIO_PD3_OUT
 ERR_FIO_PD3_OUT:
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_PD3 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_PD3 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_PD3 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_PD3 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_PD3_OUT:

   END DEF

   DEF INTEGER FIO_PD3_PUT(INTEGER FIO_STAT, STRING BUF0)

        ON ERROR GO TO ERR_FIO_PD3_PUT

        PRINT #C_FILE_PD3, BUF0

        GO TO OK_FIO_PD3_PUT
 ERR_FIO_PD3_PUT:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_PD3 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_PD3 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_PD3 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_PD3 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        FIO_STAT = 23

        RESUME

 OK_FIO_PD3_PUT:

        FIO_STAT = 0

   END DEF

   DEF INTEGER FIO_PD4_CLO

        ON ERROR GO TO ERR_FIO_PD4_CLO

        CLOSE #C_FILE_PD4

        GO TO OK_FIO_PD4_CLO

 ERR_FIO_PD4_CLO:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_PD4 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_PD4 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_PD4 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_PD4 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_PD4_CLO:

   END DEF


   DEF INTEGER FIO_PD4_OUT

        ON ERROR GO TO ERR_FIO_PD4_OUT

        OPEN FILE_PD4 FOR OUTPUT AS FILE #C_FILE_PD4, ORGANIZATION SEQUENTIAL VARIABLE , RECORDSIZE 255, RECORDTYPE ANY

        GO TO OK_FIO_PD4_OUT
 ERR_FIO_PD4_OUT:
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_PD4 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_PD4 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_PD4 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_PD4 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_PD4_OUT:

   END DEF

   DEF INTEGER FIO_PD4_PUT(INTEGER FIO_STAT, STRING BUF0)

        ON ERROR GO TO ERR_FIO_PD4_PUT

        PRINT #C_FILE_PD4, BUF0

        GO TO OK_FIO_PD4_PUT
 ERR_FIO_PD4_PUT:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_PD4 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_PD4 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_PD4 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_PD4 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        FIO_STAT = 23

        RESUME

 OK_FIO_PD4_PUT:

        FIO_STAT = 0

   END DEF

   DEF INTEGER FIO_PI1_CLO

        ON ERROR GO TO ERR_FIO_PI1_CLO

        CLOSE #C_FILE_PI1

        GO TO OK_FIO_PI1_CLO

 ERR_FIO_PI1_CLO:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_PI1 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_PI1 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_PI1 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_PI1 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_PI1_CLO:

   END DEF

   DEF INTEGER FIO_PI1_OUT

        ON ERROR GO TO ERR_FIO_PI1_OUT

        OPEN FILE_PI1 FOR OUTPUT AS FILE #C_FILE_PI1, ORGANIZATION SEQUENTIAL VARIABLE , RECORDSIZE 255, RECORDTYPE ANY

        GO TO OK_FIO_PI1_OUT
 ERR_FIO_PI1_OUT:
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_PI1 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_PI1 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_PI1 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_PI1 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_PI1_OUT:

   END DEF

   DEF INTEGER FIO_PI1_PUT(INTEGER FIO_STAT,STRING BUF0)

        ON ERROR GO TO ERR_FIO_PI1_PUT
	IF PI_MOVE$ = "SI" THEN
            TXT_MOV$ = "           MOVE"
            PRINT #C_FILE_PI1,TXT_MOV$
            BUF0 = "          '" + BUF0 + "'"
	END IF
 !!! este es la unica linea que debe quedar, version (Unisys y BCI) PRINT #C_FILE_PI1,BUF0
        PRINT #C_FILE_PI1,BUF0
	IF PI_MOVE$ = "SI" THEN
	 	TXT_MOV$ = "           TO WSS-COD-REGI."
	 	PRINT #C_FILE_PI1,TXT_MOV$
	 	TXT_MOV$ = "           PERFORM SET-REGI."
	 	PRINT #C_FILE_PI1,TXT_MOV$
	END IF

        GO TO OK_FIO_PI1_PUT
 ERR_FIO_PI1_PUT:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_PI1 + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_PI1 + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_PI1 + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_PI1 + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        FIO_STAT = 23

        RESUME

 OK_FIO_PI1_PUT:

        FIO_STAT = 0

   END DEF

   DEF INTEGER FIO_MTX_CLO

        ON ERROR GO TO ERR_FIO_MTX_CLO

        CLOSE #C_FILE_MTX

        GO TO OK_FIO_MTX_CLO

 ERR_FIO_MTX_CLO:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_MTX + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_MTX + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_MTX + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_MTX + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_MTX_CLO:

   END DEF

   DEF INTEGER FIO_MTX_INP

        ON ERROR GO TO ERR_FIO_MTX_INP

        OPEN FILE_MTX FOR INPUT AS FILE #C_FILE_MTX ,RECORDSIZE 255,  ORGANIZATION SEQUENTIAL VARIABLE, RECORDTYPE ANY

        GO TO OK_FIO_MTX_INP

 ERR_FIO_MTX_INP:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_MTX + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_MTX + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_MTX + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_MTX + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_MTX_INP:

   END DEF

   DEF STRING FIO_MTX_GETNXT

        ON ERROR GO TO ERR_FIO_MTX_GETNXT

        GET #C_FILE_MTX
        FIO_RLEN = RECOUNT
        MOVE FROM #C_FILE_MTX,FIO_BUF0 = FIO_RLEN

        FIO_MTX_GETNXT = FIO_BUF0
 !!! INPRIMIR LINEA LEIDA
 !!! PRINT  FIO_BUF0


        GO TO OK_FIO_MTX_GETNXT

 ERR_FIO_MTX_GETNXT:

        IF ERR = 11 THEN
                FIO_STAT = 10
        ELSE
                BUFOUT = FNC_PRINT(FILE_MTX + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_MTX + "MENSAJE : " + ERT$(ERR) )
        END IF

        RESUME 500

 OK_FIO_MTX_GETNXT:
        FIO_STAT = 0
500
   END DEF

   DEF INTEGER FIO_MTX_OUT

        ON ERROR GO TO ERR_FIO_MTX_OUT

        OPEN FILE_MTX FOR OUTPUT AS FILE #C_FILE_MTX, ORGANIZATION SEQUENTIAL VARIABLE , RECORDSIZE 255, RECORDTYPE ANY

        GO TO OK_FIO_MTX_OUT
 ERR_FIO_MTX_OUT:
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_MTX + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_MTX + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_MTX + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_MTX + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        RESUME

 OK_FIO_MTX_OUT:

   END DEF

   DEF INTEGER FIO_MTX_PUT(INTEGER FIO_STAT, STRING BUF0)

        ON ERROR GO TO ERR_FIO_MTX_PUT

        PRINT #C_FILE_MTX, BUF0

        GO TO OK_FIO_MTX_PUT
 ERR_FIO_MTX_PUT:

        BIP = EMIT_BIP
        BIP = EMIT_BIP
        BIP = EMIT_BIP
        IF ERR = 2 THEN
                BUFOUT = FNC_PRINT(FILE_MTX + " : NOMBRE DE ARCHIVO ILEGAL")
        ELSE 
        IF ERR = 5 THEN
                BUFOUT = FNC_PRINT(FILE_MTX + " ARCHIVO INEXISTENTE")
        ELSE
                BUFOUT = FNC_PRINT(FILE_MTX + "CODIGO : " + ERT$(ERR) )
                BUFOUT = FNC_PRINT(FILE_MTX + "MENSAJE : " + ERT$(ERR) )
        END IF
        END IF

        FIO_STAT = 23

        RESUME

 OK_FIO_MTX_PUT:

        FIO_STAT = 0

   END DEF

    DEF STRING ESCR_PD1 (INTEGER MARGEN,STRING BUFOUT)
      REG_1_CPT_ALF = ""
      REG_2_CPT_ALF = ""
      BUFOUT = V_M(MARGEN) + BUFOUT
      IF FNC_SYSLEN(BUFOUT) > 72 THEN
         GEN_I_CPT_NUM = 1
         GEN_J_CPT_NUM = 3
         WHILE FNC_SYSMID(BUFOUT,GEN_I_CPT_NUM,4) <> " TO " AND GEN_I_CPT_NUM < FNC_SYSLEN(BUFOUT)
                      GEN_I_CPT_NUM = GEN_I_CPT_NUM + 1
         NEXT
         IF GEN_I_CPT_NUM > 72 THEN
            GEN_I_CPT_NUM = 71
                GEN_J_CPT_NUM = 0
                WHILE FNC_SYSMID(BUFOUT,GEN_I_CPT_NUM,1) <> " "
                    GEN_I_CPT_NUM = GEN_I_CPT_NUM - 1
                NEXT
          END IF
          REG_1_CPT_ALF = FNC_SYSLEFT(BUFOUT,GEN_I_CPT_NUM + GEN_J_CPT_NUM)
          REG_2_CPT_ALF = V_M(MG_16) + " " + FNC_SYSRIGHT(BUFOUT,GEN_I_CPT_NUM + 1 + GEN_J_CPT_NUM)
      ELSE
          REG_1_CPT_ALF = BUFOUT
      END IF

      REG_1_CPT_ALF = FNC_SYSEDIT(REG_1_CPT_ALF,128)
      FIO_ACCI = FIO_PD1_PUT(FIO_STAT,REG_1_CPT_ALF)
      IF REG_2_CPT_ALF > "" THEN
         REG_2_CPT_ALF = FNC_SYSEDIT(REG_2_CPT_ALF,128)
         FIO_ACCI = FIO_PD1_PUT(FIO_STAT,REG_2_CPT_ALF)
      END IF
    END DEF

    DEF STRING ESCR_PD2 (INTEGER MARGEN,STRING BUFOUT)
      REG_1_CPT_ALF = ""
      REG_2_CPT_ALF = ""
      BUFOUT = V_M(MARGEN) + BUFOUT
      IF FNC_SYSLEN(BUFOUT) > 72 THEN
         GEN_I_CPT_NUM = 1
         GEN_J_CPT_NUM = 3
         WHILE FNC_SYSMID(BUFOUT,GEN_I_CPT_NUM,4) <> " TO " AND GEN_I_CPT_NUM < FNC_SYSLEN(BUFOUT)
               GEN_I_CPT_NUM = GEN_I_CPT_NUM + 1
         NEXT         
         IF GEN_I_CPT_NUM > 72 THEN
            GEN_I_CPT_NUM = 71
            GEN_J_CPT_NUM = 0
            WHILE FNC_SYSMID(BUFOUT,GEN_I_CPT_NUM,1) <> " "
                  GEN_I_CPT_NUM = GEN_I_CPT_NUM - 1
            NEXT
         END IF
         REG_1_CPT_ALF = FNC_SYSLEFT(BUFOUT,GEN_I_CPT_NUM + GEN_J_CPT_NUM)
         REG_2_CPT_ALF = V_M(MG_16) + " " + FNC_SYSRIGHT(BUFOUT,GEN_I_CPT_NUM + 1 + GEN_J_CPT_NUM)
      ELSE
         REG_1_CPT_ALF = BUFOUT
      END IF

      REG_1_CPT_ALF = FNC_SYSEDIT(REG_1_CPT_ALF,128)
      FIO_ACCI = FIO_PD2_PUT(FIO_STAT,REG_1_CPT_ALF)
      IF REG_2_CPT_ALF > "" THEN
         REG_2_CPT_ALF = FNC_SYSEDIT(REG_2_CPT_ALF,128)
         FIO_ACCI = FIO_PD2_PUT(FIO_STAT,REG_2_CPT_ALF)
      END IF
    END DEF

    DEF STRING ESCR_PD3 (INTEGER MARGEN,STRING BUFOUT)
      REG_1_CPT_ALF = ""
      REG_2_CPT_ALF = ""
      BUFOUT = V_M(MARGEN) + BUFOUT
      IF FNC_SYSLEN(BUFOUT) > 72 THEN
         GEN_I_CPT_NUM = 1
         GEN_J_CPT_NUM = 3
         WHILE FNC_SYSMID(BUFOUT,GEN_I_CPT_NUM,4) <> " TO " AND GEN_I_CPT_NUM < FNC_SYSLEN(BUFOUT)
              GEN_I_CPT_NUM = GEN_I_CPT_NUM + 1
         NEXT
         IF GEN_I_CPT_NUM > 72 THEN
            GEN_I_CPT_NUM = 71
            GEN_J_CPT_NUM = 0
            WHILE FNC_SYSMID(BUFOUT,GEN_I_CPT_NUM,1) <> " "
               GEN_I_CPT_NUM = GEN_I_CPT_NUM - 1
            NEXT
         END IF
         REG_1_CPT_ALF = FNC_SYSLEFT(BUFOUT,GEN_I_CPT_NUM + GEN_J_CPT_NUM)
         REG_2_CPT_ALF = V_M(MG_16) + " " + FNC_SYSRIGHT(BUFOUT,GEN_I_CPT_NUM + 1 + GEN_J_CPT_NUM)
      ELSE
         REG_1_CPT_ALF = BUFOUT
      END IF

      REG_1_CPT_ALF = FNC_SYSEDIT(REG_1_CPT_ALF,128)
      FIO_ACCI = FIO_PD3_PUT(FIO_STAT,REG_1_CPT_ALF)
      IF REG_2_CPT_ALF > "" THEN
         REG_2_CPT_ALF = FNC_SYSEDIT(REG_2_CPT_ALF,128)
         FIO_ACCI = FIO_PD3_PUT(FIO_STAT,REG_2_CPT_ALF)
      END IF
    END DEF

    DEF STRING ESCR_PD4 (INTEGER MARGEN,STRING BUFOUT)
      REG_1_CPT_ALF = ""
      REG_2_CPT_ALF = ""
      BUFOUT = V_M(MARGEN) + BUFOUT
      IF FNC_SYSLEN(BUFOUT) > 72 THEN
         GEN_I_CPT_NUM = 1
         GEN_J_CPT_NUM = 3
         WHILE FNC_SYSMID(BUFOUT,GEN_I_CPT_NUM,4) <> " TO " AND GEN_I_CPT_NUM < FNC_SYSLEN(BUFOUT)
              GEN_I_CPT_NUM = GEN_I_CPT_NUM + 1
         NEXT
         IF GEN_I_CPT_NUM > 72 THEN
            GEN_I_CPT_NUM = 71
            GEN_J_CPT_NUM = 0
            WHILE FNC_SYSMID(BUFOUT,GEN_I_CPT_NUM,1) <> " "
               GEN_I_CPT_NUM = GEN_I_CPT_NUM - 1
            NEXT
         END IF
         REG_1_CPT_ALF = FNC_SYSLEFT(BUFOUT,GEN_I_CPT_NUM + GEN_J_CPT_NUM)
         REG_2_CPT_ALF = V_M(MG_16) + " " + FNC_SYSRIGHT(BUFOUT,GEN_I_CPT_NUM + 1 + GEN_J_CPT_NUM)
      ELSE
         REG_1_CPT_ALF = BUFOUT
      END IF

      REG_1_CPT_ALF = FNC_SYSEDIT(REG_1_CPT_ALF,128)
      FIO_ACCI = FIO_PD4_PUT(FIO_STAT,REG_1_CPT_ALF)
      IF REG_2_CPT_ALF > "" THEN
         REG_2_CPT_ALF = FNC_SYSEDIT(REG_2_CPT_ALF,128)
         FIO_ACCI = FIO_PD4_PUT(FIO_STAT,REG_2_CPT_ALF)
      END IF
    END DEF

    DEF STRING ESCR_PTX (INTEGER MARGEN,STRING BUFOUT)
      IF FNC_SYSLEN(BUFOUT) > 0 THEN
         LL_CPT_ALF = FNC_SYSLEFT(BUFOUT,1)
         IF LL_CPT_ALF = "P" THEN
            RR_CPT_ALF = FNC_SYSRIGHT(BUFOUT,7)
            BUFOUT = "      " + RR_CPT_ALF
         END IF
      END IF
      FIO_ACCI = FIO_PTX_PUT(FIO_STAT,V_M(MARGEN) + BUFOUT)
    END DEF

    DEF STRING ESCR_WS1 (INTEGER MARGEN,STRING BUFOUT)
      IF FNC_SYSLEN(BUFOUT) > 0 THEN
         LL_CPT_ALF = FNC_SYSLEFT(BUFOUT,1)
         IF LL_CPT_ALF = "P" THEN
            RR_CPT_ALF = FNC_SYSRIGHT(BUFOUT,7)
            BUFOUT = "      " + RR_CPT_ALF
         END IF
      END IF
      FIO_ACCI = FIO_WS1_PUT(FIO_STAT,V_M(MARGEN) + BUFOUT)
    END DEF

    DEF STRING ESCR_WS2 (INTEGER MARGEN,STRING BUFOUT)
	IF FNC_SYSLEN(BUFOUT) > 0 THEN
		LL_CPT_ALF = FNC_SYSLEFT(BUFOUT,1)
		IF LL_CPT_ALF = "P" THEN
			RR_CPT_ALF = FNC_SYSRIGHT(BUFOUT,7)
			BUFOUT = "      " + RR_CPT_ALF
		END IF
	END IF
	FIO_ACCI = FIO_WS2_PUT(FIO_STAT,V_M(MARGEN) + BUFOUT)
    END DEF

    DEF STRING ESCR_WS3 (INTEGER MARGEN,STRING BUFOUT)
       IF FNC_SYSLEN(BUFOUT) > 0 THEN
          LL_CPT_ALF = FNC_SYSLEFT(BUFOUT,1)
          IF LL_CPT_ALF = "P" THEN
             RR_CPT_ALF = FNC_SYSRIGHT(BUFOUT,7)
             BUFOUT = "      " + RR_CPT_ALF
          END IF
       END IF
       FIO_ACCI = FIO_WS3_PUT(FIO_STAT,V_M(MARGEN) + BUFOUT)
    END DEF

    DEF STRING ESCR_PI1 (INTEGER MARGEN,STRING BUFOUT)
      FIO_ACCI = FIO_PI1_PUT(FIO_STAT,V_M(MARGEN) + BUFOUT)
    END DEF

   DEF INTEGER AGR_FTB_VAL
	    NOMB_ARCH_CPT_ALF = FNC_SYSMID(VALTOKEN,5,3)
	    ES_VAL_CPT_ALF = "NO"
	    IF NOMB_ARCH_CPT_ALF = "VAL" THEN
		ES_VAL_CPT_ALF = "SI"
		 IZQ_CPT_ALF = FNC_SYSLEFT(VALTOKEN,4)
		 DER_CPT_ALF = FNC_SYSRIGHT(VALTOKEN,5)
		CAM_VAL_CPT_ALF = IZQ_CPT_ALF + "FTB-" + DER_CPT_ALF
	     END IF
    END DEF

    DEF INTEGER NEXTTOKEN
	IF TOKEN = ETXTOK THEN
		NEXTTOKEN = ETXTOK
		GO TO LABE_ASIG
	END IF
	P_P = P_Q 
 LABE_SIGA:
	WHILE (FNC_SYSMID(I_B_STR,P_P,1) = " " OR FNC_SYSMID(I_B_STR,P_P,1) = "	") AND 	P_P <= SZ_I_B
		P_P = P_P + 1
	NEXT
	P_Q = P_P 
	IF P_P > SZ_I_B OR I_B_STR = "" OR FNC_SYSMID(I_B_STR,P_P,1) = "!" THEN
		TPG_TOT_LEI = TPG_TOT_LEI + 1
  		I_B_STR = FIO_MTX_GETNXT
		SZ_I_B = FIO_RLEN
		IF FIO_STAT  <> FIO_STAT_OKS THEN
	                NEXTTOKEN = ETXTOK
 CPL_100:
			IF TOT_BLO_DSP < 101 THEN
                                BUFOUT = PRT_ESTAD_LEE
				TOT_BLO_DSP = TOT_BLO_DSP + 1
				GO TO CPL_100
			END IF
			print ""

	BUFOUT = PRT_ESTAD
                         IF WSS_DLP = "S" THEN 
		 		BUFOUT = FNC_PRINT("DETECTO ETXTOK EN REGISTRO NRO " + FNC_SYSFORMAT(TPG_TOT_LEI,"####") )
                        END IF
		        GO TO LABE_ASIG
		END IF
		P_P  = 1
		P_Q  = 1
                IF WSS_DLP = "S" THEN 
	 		BUFOUT = FNC_PRINT("REG NRO " + FNC_SYSFORMAT(TPG_TOT_LEI,"####") + " >>" + I_B_STR)
                ELSE
			TOT_LEI_DSP_BLO = TOT_LEI_DSP_BLO + 1
			IF TOT_LEI_DSP_BLO = PRCJE_DESP(TOT_BLO_DSP) THEN
				IMP_ESTAD$ = PRT_ESTAD_LEE
				TOT_BLO_DSP = TOT_BLO_DSP + 1
			END IF
		END IF
		GO TO LABE_SIGA
	END IF
	C_Q = FNC_SYSMID(I_B_STR,P_Q,1)
	IF (C_Q >= "A" AND C_Q <= "Z") OR (C_Q >= "A" AND C_Q <= "Z") THEN
		 SWICH_CPT_ALF = "S"
		 WHILE (SWICH_CPT_ALF = "S")
			IF (FNC_SYSMID(I_B_STR,P_P,1) >= "A" AND FNC_SYSMID(I_B_STR,P_P,1) <= "Z")  THEN
					    P_P = P_P + 1
			ELSE
			IF (FNC_SYSMID(I_B_STR,P_P,1)  = "-")   THEN
					    P_P = P_P + 1
			ELSE
			IF (FNC_SYSMID(I_B_STR,P_P,1) >= "A" AND  FNC_SYSMID(I_B_STR,P_P,1) <= "Z")   THEN
					    P_P = P_P + 1
			ELSE
			IF (FNC_SYSMID(I_B_STR,P_P,1) >= "0" AND FNC_SYSMID(I_B_STR,P_P,1) <= "9")   THEN
					    P_P = P_P + 1
			ELSE
				 SWICH_CPT_ALF = "N"
			END IF
			END IF
			END IF
			END IF
	         NEXT

		 SZTOKEN = P_P - P_Q
		 NEXTTOKEN = IDNTOK
		    VALTOKEN = FNC_SYSMID(I_B_STR,P_Q,SZTOKEN)
	ELSE
	IF C_Q >= "0" AND C_Q <= "9" THEN
		  WHILE FNC_SYSMID(I_B_STR,P_P,1) >= "0" AND FNC_SYSMID(I_B_STR,P_P,1) <= "9"
			     P_P = P_P + 1
	          NEXT
		  SZTOKEN = P_P - P_Q
		  NEXTTOKEN = NUMTOK
		  VALTOKEN = FNC_SYSMID(I_B_STR,P_Q,SZTOKEN)
		  NUMTOKEN  = VAL(VALTOKEN)
	ELSE
  	IF C_Q = GET_COM2 OR C_Q = "'" THEN
		P_P = P_P + 1
		WHILE FNC_SYSMID(I_B_STR,P_P,1) <> C_Q AND P_P <= SZ_I_B
			P_P = P_P + 1
	        NEXT
		IF P_P > SZ_I_B THEN
			ESCRIBE_LOG$ = "N"
	 		BUFOUT = FNC_PRINT("ERROR DETECTO STRING SIN TERMINO EN REGISTRO NRO " + FNC_SYSFORMAT(TPG_TOT_LEI,"####") )
	 		BUFOUT = FNC_PRINT("LINEA >> " + I_B_STR )
		END IF

		SZTOKEN = P_P - (P_Q + 1)
		P_P = P_P + 1
		NEXTTOKEN = STRTOK
		STRTOKEN = FNC_SYSMID(I_B_STR,P_Q + 1,SZTOKEN)
		VALTOKEN = C_Q + STRTOKEN + C_Q
	ELSE
		IF C_Q = "$"  AND FNC_SYSMID(I_B_STR,P_P + 1,1) = "_" THEN
			   P_P = P_P + 2
			 SWICH_CPT_ALF = "S" 
			 WHILE (SWICH_CPT_ALF = "S")
				IF (FNC_SYSMID(I_B_STR,P_P,1) >= "A" AND FNC_SYSMID(I_B_STR,P_P,1) <= "Z") THEN
						    P_P = P_P + 1
				ELSE
				IF FNC_SYSMID(I_B_STR,P_P,1)  = "_" THEN
						    P_P = P_P + 1
				ELSE
				IF  (FNC_SYSMID(I_B_STR,P_P,1) >= "A" AND FNC_SYSMID(I_B_STR,P_P,1) <= "Z") THEN
						    P_P = P_P + 1
				ELSE
					SWICH_CPT_ALF = "N" 
				END IF
				END IF
				END IF
	     		 NEXT
			 SZTOKEN = P_P - P_Q
			 NEXTTOKEN = TPGTOK
			    VALTOKEN = FNC_SYSMID(I_B_STR,P_Q,SZTOKEN)
		ELSE
			NEXTTOKEN = CHRTOK
			VALTOKEN = FNC_SYSMID(I_B_STR,P_P,1)
			P_P = P_P + 1
			SZTOKEN = 1
		END IF
	END IF
	END IF
	END IF

 LABE_ASIG:
	P_R = P_Q
	P_Q = P_P
800
    END DEF


 DEF INTEGER INI_MATR2

	WSS_DSP00 = "N"
	WSS_DSP01 = "N"
	WSS_DSP04 = "N"			
	V_MES(1,1) = "JAN"
	V_MES(1,2) = "01"
	V_MES(2,1) = "FEB"
	V_MES(2,2) = "02"
	V_MES(3,1) = "MAR"
	V_MES(3,2) = "03"
	V_MES(4,1) = "APR"
	V_MES(4,2) = "04"
	V_MES(5,1) = "MAY"
	V_MES(5,2) = "05"
	V_MES(6,1) = "JUN"
	V_MES(6,2) = "06"
	V_MES(7,1) = "JUL"
	V_MES(7,2) = "07"
	V_MES(8,1) = "AUG"
	V_MES(8,2) = "08"
	V_MES(9,1) = "SEP"
	V_MES(9,2) = "09"
	V_MES(10,1) = "OCT"
	V_MES(10,2) = "10"
	V_MES(11,1) = "NOV"
	V_MES(11,2) = "11"
	V_MES(12,1) = "DEC"
	V_MES(12,2) = "12"

	FOR I_CPT_NUM = 1 TO MAX_TRN
		FOR J_CPT_NUM = 1 TO 20
 			TPG_MAT_TRN(I_CPT_NUM,J_CPT_NUM,CTE_TRN_MNU) = ""
			TPG_MAT_TRN(I_CPT_NUM,J_CPT_NUM,CTE_TRN_FRM) = "   "
			TPG_MAT_TRN(I_CPT_NUM,J_CPT_NUM,CTE_TRN_CMN) = "   "
			TPG_MAT_TRN(I_CPT_NUM,J_CPT_NUM,CTE_TRN_CPP) = "   "
			TPG_MAT_TRN(I_CPT_NUM,J_CPT_NUM,CTE_TRN_SPP) = " "
			TPG_MAT_TRN(I_CPT_NUM,J_CPT_NUM,CTE_TRN_PGM) = "	"
			TPG_MAT_TRN(I_CPT_NUM,J_CPT_NUM,CTE_TRN_SUB) = "	"
			TPG_MAT_TRN(I_CPT_NUM,J_CPT_NUM,CTE_TRN_INS) = "   "
			TPG_MAT_TRN(I_CPT_NUM,J_CPT_NUM,CTE_TRN_INM) = "   "
			TPG_MAT_TRN(I_CPT_NUM,J_CPT_NUM,CTE_TRN_FIN) = "   "
			TPG_MAT_TRN(I_CPT_NUM,J_CPT_NUM,CTE_TRN_FOU) = "   "
			TPG_MAT_TRN(I_CPT_NUM,J_CPT_NUM,CTE_TRN_CMT) = ""
			TPG_MAT_TRN(I_CPT_NUM,J_CPT_NUM,CTE_TRN_IDX) = ""
			TPG_MAT_TRN(I_CPT_NUM,J_CPT_NUM,CTE_TRN_CNF) = "			 "
			TPG_MAT_TRN(I_CPT_NUM,J_CPT_NUM,CTE_TRN_TRX) = "XXXX"
		NEXT J_CPT_NUM
		FOR J_CPT_NUM = 1 TO 30
			TPG_MAT_PTPIG(I_CPT_NUM,J_CPT_NUM) = " "
			TPG_MAT_XTPIG(I_CPT_NUM,J_CPT_NUM) = " "
			TPG_MAT_PTSPR(I_CPT_NUM,J_CPT_NUM) = " "
			TPG_MAT_XTSPR(I_CPT_NUM,J_CPT_NUM) = " "
		NEXT J_CPT_NUM
	NEXT I_CPT_NUM
	 FOR I_CPT_NUM = 1 TO MAX_HST
		    FOR J_CPT_NUM = 1 TO MAX_FLD
			  TPG_MAT_IDENFLDHST(I_CPT_NUM,J_CPT_NUM) = ""
 		  NEXT J_CPT_NUM
	  NEXT I_CPT_NUM

	  FOR I_CPT_NUM = 1 TO MAX_HST
		  FOR J_CPT_NUM = 1 TO MAX_SRV
			  FOR K_CPT_NUM = 1 TO MAX_FLD
				  TPG_MAT_TOTOCCFLDSRV(I_CPT_NUM,J_CPT_NUM,K_CPT_NUM) = 1
			  NEXT K_CPT_NUM
		  NEXT J_CPT_NUM
	  NEXT I_CPT_NUM
    END DEF

   DEF INTEGER INIC_IALI

     CPL_NUM_INI = ""
	TOT_BLO_DSP = 1
	lin_ant$ = "[A[2K"

 !!!    ($ MTX$DLP = "S") ==> DESPLIEGA LINEAS LEIDAS DE {FIL}.MTX
	 WSS_DLP = FNC_SYS_LIB_GET_SYMBOL("MTX$DLP")
	IF WSS_DLP <> "S" THEN
	    WSS_DLP = "N"
	END IF
        VSN_CPT_ALF = " GENMTX : Version 2.2.6 29 Marzo 2003"
        PRINT lin_ant$ ; VSN_CPT_ALF 
        PRINT ""

	PRINT ' Valor de variable para desplegar lineas MTX$DLP = "' ; WSS_DLP ; '"'

	BUFOUT = FNC_PRINT("   ")
	BUFOUT = FNC_PRINT("   Etapa 1 Lectura de archivo a procesar")
	BUFOUT = FNC_PRINT("   Etapa 2 Generacion de Parametros HST Y SRV")
	BUFOUT = FNC_PRINT("   Etapa 3 Generacion de Parametros MNU Y RPF")
	BUFOUT = FNC_PRINT("   Etapa 4 Generacion de formato PCAPT")
	BUFOUT = FNC_PRINT("   Etapa 5 Generacion de formato MXAPT ")
	BUFOUT = FNC_PRINT("   Etapa 6 Generacion de SECTION MOV-GNS")
	BUFOUT = FNC_PRINT("   Etapa 7 Generacion de SECTION MOV-PTAMX")
	BUFOUT = FNC_PRINT("   Etapa 8 Generacion de SECTION MOV-MXAPT")
	BUFOUT = FNC_PRINT("   ")

	LRG_HDR = 0
	LRG_HDR_ALF$ = FNC_SYSSTR(LRG_HDR)

        NIV_PIC(NIV_01) = "01  "
        NIV_PIC(NIV_03) = "03  "
        NIV_PIC(NIV_05) = "05  "
        NIV_PIC(NIV_07) = "07  "
        NIV_PIC(NIV_09) = "09  "
        NIV_PIC(NIV_11) = "11  "

        NIV_SEP(NIV_01) = "           "
        NIV_SEP(NIV_03) = "               "
        NIV_SEP(NIV_05) = "            "
        NIV_SEP(NIV_07) = "         "
        NIV_SEP(NIV_09) = "      "
        NIV_SEP(10)     = "     "
        NIV_SEP(11)     = "         "
        NIV_SEP(12)     = "             "
        NIV_SEP(13)     = "                 "
        NIV_SEP(14)     = "                     "

        NIV_MRG(NIV_00) = MG_0
        NIV_MRG(NIV_CC) = MG_7
        NIV_MRG(NIV_01) = MG_8
        NIV_MRG(NIV_03) = MG_12
        NIV_MRG(NIV_05) = MG_16
        NIV_MRG(NIV_07) = MG_20
        NIV_MRG(NIV_09) = MG_24
        NIV_MRG(NIV_11) = MG_28

        C_FILE_MTX = 1
        C_FILE_PD1 = 2
        C_FILE_PD2 = 3
        C_FILE_PD3 = 4
        C_FILE_PD4 = 5
        C_FILE_WS1 = 6
        C_FILE_WS2 = 7
        C_FILE_WS3 = 8
        C_FILE_PI1 = 9
        C_FILE_PTX = 10
        FST_WSS = NO
        V_M(MG_0)  = ""
        V_M(MG_7)  = "      *"
        V_M(MG_8)  = "       "
        V_M(MG_12) = "           "
        V_M(MG_16) = "               "
        V_M(MG_20) = "                   "
        V_M(MG_24) = "                       "
        V_M(MG_28) = "                           "
	O_L  = FNC_SYSCHR(13) + FNC_SYSCHR(10)
	P_P = 1
	P_Q = 1
	
	FOR PP% = 1 TO MAX_HST
		FOR QQ% = 1 TO MAX_FLD
			TPG_MAT_NUM_FLD(PP%,QQ%,1) = "0"       
			TPG_MAT_NUM_FLD(PP%,QQ%,2) = "0"       
			TPG_MAT_NUM_FLD(PP%,QQ%,3) = "N"       
		NEXT QQ%
	NEXT PP%

	FOR PP% = 1 TO 80 	
		FOR QQ% = 1 TO 30 	
			TPG_MAT_TPFRM(PP%,QQ%) = ""       
		NEXT QQ%
	NEXT PP%

	FOR PP% = 1 TO MAX_HSR
		FOR QQ% = 1 TO MAX_SRV
			TPG_MAT_LRG(PP%,QQ%)  = 0       
		NEXT QQ%
	NEXT PP%

	 WSS_USN = FNC_SYS_LIB_GET_SYMBOL("GNS$USN")
 !!!    ($ MTX$DPP = "S") ==> DESPLIEGA PASOS DE GENERACION   
	WSS_DPP = FNC_SYS_LIB_GET_SYMBOL("MTX$DPP")
	WSS_DPP = "S"

 !!!    ($ MTX$DFI = "S") ==> GENERA ARCHIVO DFI
	WSS_DFI = FNC_SYS_LIB_GET_SYMBOL("MTX$DFI")

 !!!    ($ MTX$DFO = "S") ==> GENERA ARCHIVO DFO
	WSS_GENDFO = FNC_SYS_LIB_GET_SYMBOL("MTX$DFO")

	 RPT_GLS_PRY = FNC_SYS_LIB_GET_SYMBOL("GNS$PRY")
	 GNS_PATH = FNC_SYS_LIB_GET_SYMBOL("GNS$PTH")

	 FILE_MTX = FNC_SYS_LIB_GET_SYMBOL("PTH")
	 MTX_GLS_SOP = FNC_SYS_LIB_GET_SYMBOL("GNS$SOP")
	 MTX_GLS_AIU = FNC_SYS_LIB_GET_SYMBOL("GNS$AIU")
	 RPT_GLS_PAI = FNC_SYS_LIB_GET_SYMBOL("GNS$PAI")
	 RPT_GLS_CLI = FNC_SYS_LIB_GET_SYMBOL("GNS$CLI")

	MAP_GLS_IDEN = FNC_SYSDATE(0%) + " " + FNC_SYSTIME(0%) + "    , PAI=" + RPT_GLS_PAI + ", CLI=" + RPT_GLS_CLI + ", SOP=" + MTX_GLS_SOP
	MAP_GLS_IDEN = "      *    " + FNC_SYSEDIT(MAP_GLS_IDEN, 32)
	MAP_GLS_VBC_CPT_ALF = "      '    " + FNC_SYSEDIT(MAP_GLS_IDEN, 32)

	TPG_TOT_REG = 0
	PASO_CPT_NUM = PASO_CPT_NUM + 1

	FIO_ACCI = FIO_MTX_INP
 !!! PRIMERA LECTURA PARA CONTAR REGISTROS
        EXTERNO = ""
 LEE_INP:
	I_B_STR = FIO_MTX_GETNXT
	IF FIO_STAT <> FIO_STAT_OKS THEN
		GO TO CLO_INP
	END IF

	IF FNC_SYSLEFT(I_B_STR,11) = "$_SIS_FIL =" THEN
		EXTERNO = FNC_SYSMID(I_B_STR,13,3)
	END IF
	TPG_TOT_REG = TPG_TOT_REG + 1
	GO TO LEE_INP
 CLO_INP:
	FIO_ACCI = FIO_MTX_CLO

	IF EXTERNO = "" THEN
		EXTERNO = FNC_SYS_LIB_GET_SYMBOL("GNS$FIL")
	END IF

	UNO_POR_CNT = TPG_TOT_REG / 100
	FOR I% = 1 TO 100
		PRCJE_DESP(I%) = UNO_POR_CNT * I%
	NEXT I%
	TOT_BLO_PRT = 0
	TOT_LEI_DSP_BLO = 0

        FIO_ACCI = FIO_MTX_INP

	PRINT "             +--------------------------------------------------------------------------------------------------+" ; TPG_TOT_REG ; " Regs."
	PRINT "             0       10        20        30        40        50        60        70        80        90       100"
	BUFOUT = FNC_PRINT("[5m[1m   ****[0m Inicializando ambiente para generacion [5m[1m****[0m")


	FILE_FMT = EXTERNO + "MX" + "FMT.AIU"
	GNS_PATH =  "      *    " + GNS_PATH
	GNS_USER$ =  "      *     USUARIO = " + WSS_USN 
	ARCH_IDEN_CPT_ALF = "      *    " + FILE_FMT 
	TPG_TOT_LEI = TPG_TOT_LEI + 1
	I_B_STR = FIO_MTX_GETNXT
	SZ_I_B = FIO_RLEN
	IF FIO_STAT <> FIO_STAT_OKS THEN
 		BUFOUT = FNC_PRINT("ARCHIVO VACIO " +  FNC_SYSSTR(FIO_STAT))
	END IF
	IF WSS_DLP = "S" THEN
		BUFOUT = FNC_PRINT("REG NRO " + FNC_SYSFORMAT(TPG_TOT_LEI,"####") + " >>" + I_B_STR)
	END IF




	FILE_PD1 = EXTERNO + "MX" + "PD1.AIU"
	FILE_PD2 = EXTERNO + "MX" + "PD2.AIU"
	FILE_PD3 = EXTERNO + "MX" + "PD3.AIU"
	FILE_PD4 = EXTERNO + "MX" + "PD4.AIU"
	FILE_WS1 = EXTERNO + "MX" + "WS1.AIU"
	FILE_WS2 = EXTERNO + "MX" + "WS2.AIU"
	FILE_WS3 = EXTERNO + "MX" + "WS3.AIU"
	FILE_PI1 = EXTERNO + "MX" + "PI1.AIU"
	FILE_FMT = EXTERNO + "MX" + "FMT.AIU"
	FILE_PTX = EXTERNO + "MX" + "PTX.PTX"

	FILE_VBC = EXTERNO + "MX" + "VBC.AIU"

	ARCH_SPA_CPT_ALF = "      *    " 

          FIO_ACCI = FIO_PD1_OUT
	FIO_ACCI = FIO_PD1_PUT(FIO_STAT,MAP_GLS_IDEN)
	FIO_ACCI = FIO_PD1_PUT(FIO_STAT,GNS_PATH)
	FIO_ACCI = FIO_PD1_PUT(FIO_STAT,GNS_USER$)
	FIO_ACCI = FIO_PD1_PUT(FIO_STAT,ARCH_SPA_CPT_ALF)
	ARCH_IDEN_CPT_ALF = "      *    " + FILE_PD1
	FIO_ACCI = FIO_PD1_PUT(FIO_STAT,ARCH_IDEN_CPT_ALF + VSN_CPT_ALF)
	FIO_ACCI = FIO_PD1_PUT(FIO_STAT,ARCH_SPA_CPT_ALF)

          FIO_ACCI = FIO_PD2_OUT
	FIO_ACCI = FIO_PD2_PUT(FIO_STAT,MAP_GLS_IDEN)
	FIO_ACCI = FIO_PD2_PUT(FIO_STAT,GNS_PATH)
	FIO_ACCI = FIO_PD2_PUT(FIO_STAT,GNS_USER$)
	FIO_ACCI = FIO_PD2_PUT(FIO_STAT,ARCH_SPA_CPT_ALF)
	ARCH_IDEN_CPT_ALF = "      *    " + FILE_PD2
	FIO_ACCI = FIO_PD2_PUT(FIO_STAT,ARCH_IDEN_CPT_ALF + VSN_CPT_ALF)
	FIO_ACCI = FIO_PD2_PUT(FIO_STAT,ARCH_SPA_CPT_ALF)

 	        FIO_ACCI = FIO_PD3_OUT
		FIO_ACCI = FIO_PD3_PUT(FIO_STAT,MAP_GLS_IDEN)
		FIO_ACCI = FIO_PD3_PUT(FIO_STAT,GNS_PATH)
		FIO_ACCI = FIO_PD3_PUT(FIO_STAT,GNS_USER$)
		FIO_ACCI = FIO_PD3_PUT(FIO_STAT,ARCH_SPA_CPT_ALF)
		ARCH_IDEN_CPT_ALF = "      *    " + FILE_PD3
		FIO_ACCI = FIO_PD3_PUT(FIO_STAT,ARCH_IDEN_CPT_ALF + VSN_CPT_ALF)
		FIO_ACCI = FIO_PD3_PUT(FIO_STAT,ARCH_SPA_CPT_ALF )

 	        FIO_ACCI = FIO_PD4_OUT
		FIO_ACCI = FIO_PD4_PUT(FIO_STAT,MAP_GLS_IDEN)
		FIO_ACCI = FIO_PD4_PUT(FIO_STAT,GNS_PATH)
		FIO_ACCI = FIO_PD4_PUT(FIO_STAT,GNS_USER$)
		FIO_ACCI = FIO_PD4_PUT(FIO_STAT,ARCH_SPA_CPT_ALF)
		ARCH_IDEN_CPT_ALF = "      *    " + FILE_PD4
		FIO_ACCI = FIO_PD4_PUT(FIO_STAT,ARCH_IDEN_CPT_ALF + VSN_CPT_ALF)
		FIO_ACCI = FIO_PD4_PUT(FIO_STAT,ARCH_SPA_CPT_ALF )

        FIO_ACCI = FIO_PTX_OUT
	FIO_ACCI = FIO_PTX_PUT(FIO_STAT,"%! " + MAP_GLS_IDEN)
	FIO_ACCI = FIO_PTX_PUT(FIO_STAT,"%! " + GNS_PATH)
	FIO_ACCI = FIO_PTX_PUT(FIO_STAT,"%! " + GNS_USER$)
	FIO_ACCI = FIO_PTX_PUT(FIO_STAT,"%! " + ARCH_SPA_CPT_ALF)
 	ARCH_IDEN_CPT_ALF = "      *    " + FILE_PTX 
	FIO_ACCI = FIO_PTX_PUT(FIO_STAT,"%! " + ARCH_IDEN_CPT_ALF + VSN_CPT_ALF)
	FIO_ACCI = FIO_PTX_PUT(FIO_STAT,"%! " + ARCH_SPA_CPT_ALF)

         FIO_ACCI = FIO_WS1_OUT
	FIO_ACCI = FIO_WS1_PUT(FIO_STAT,MAP_GLS_IDEN)
	FIO_ACCI = FIO_WS1_PUT(FIO_STAT,GNS_PATH)
	FIO_ACCI = FIO_WS1_PUT(FIO_STAT,GNS_USER$)
	FIO_ACCI = FIO_WS1_PUT(FIO_STAT,ARCH_SPA_CPT_ALF)
 	ARCH_IDEN_CPT_ALF = "      *    " + FILE_WS1 
	FIO_ACCI = FIO_WS1_PUT(FIO_STAT,ARCH_IDEN_CPT_ALF + VSN_CPT_ALF)
	FIO_ACCI = FIO_WS1_PUT(FIO_STAT,ARCH_SPA_CPT_ALF)
 
        FIO_ACCI = FIO_WS3_OUT
	FIO_ACCI = FIO_WS3_PUT(FIO_STAT,MAP_GLS_IDEN)
	FIO_ACCI = FIO_WS3_PUT(FIO_STAT,GNS_PATH)
	FIO_ACCI = FIO_WS3_PUT(FIO_STAT,GNS_USER$)
	FIO_ACCI = FIO_WS3_PUT(FIO_STAT,ARCH_SPA_CPT_ALF )
 	ARCH_IDEN_CPT_ALF = "      *    " + FILE_WS3 
	FIO_ACCI = FIO_WS3_PUT(FIO_STAT,ARCH_IDEN_CPT_ALF + VSN_CPT_ALF)
	FIO_ACCI = FIO_WS3_PUT(FIO_STAT,ARCH_SPA_CPT_ALF )

         FIO_ACCI = FIO_WS2_OUT
	FIO_ACCI = FIO_WS2_PUT(FIO_STAT,MAP_GLS_IDEN)
	FIO_ACCI = FIO_WS2_PUT(FIO_STAT,GNS_PATH)
	FIO_ACCI = FIO_WS2_PUT(FIO_STAT,GNS_USER$)
	FIO_ACCI = FIO_WS2_PUT(FIO_STAT,ARCH_SPA_CPT_ALF )
 	ARCH_IDEN_CPT_ALF = "      *    " + FILE_WS2 
	FIO_ACCI = FIO_WS2_PUT(FIO_STAT,ARCH_IDEN_CPT_ALF + VSN_CPT_ALF )
	FIO_ACCI = FIO_WS2_PUT(FIO_STAT,ARCH_SPA_CPT_ALF )

         FIO_ACCI = FIO_PI1_OUT
	FIO_ACCI = FIO_PI1_PUT(FIO_STAT,MAP_GLS_IDEN)
	FIO_ACCI = FIO_PI1_PUT(FIO_STAT,GNS_PATH)
	FIO_ACCI = FIO_PI1_PUT(FIO_STAT,GNS_USER$)
	FIO_ACCI = FIO_PI1_PUT(FIO_STAT,ARCH_SPA_CPT_ALF)
 	ARCH_IDEN_CPT_ALF = "      *    " + FILE_PI1
	FIO_ACCI = FIO_PI1_PUT(FIO_STAT,ARCH_IDEN_CPT_ALF + VSN_CPT_ALF)
	FIO_ACCI = FIO_PI1_PUT(FIO_STAT,ARCH_SPA_CPT_ALF)

    END DEF

 !!! FUNCION QUE BUSCA UN CAMPO SERVER OCURRENCIAS ANTERIORES DE SRV PARA DETECTAR CAMPOS INDEXADOS
   DEF INTEGER TPG_FNC_BCS
	IDX_CPT_NUM = 0
	OCC_SRV_CPT_NUM = 0
	FOR TT_CPT_NUM = 1 TO TPG_MAT_HST_NUM(II_CPT_NUM,CTE_IDX_TCF)
		IF AA_CPT_ALF = TPG_MAT_NAMEFLDHST(II_CPT_NUM,TT_CPT_NUM) THEN
			OCC_SRV_CPT_NUM = OCC_SRV_CPT_NUM + 1
			IF OCC_SRV_CPT_NUM = CONT_SRV_CPT_NUM THEN
				IDX_CPT_NUM = TT_CPT_NUM 
				TT_CPT_NUM = TPG_MAT_HST_NUM(II_CPT_NUM,CTE_IDX_TCF) + 1
			END IF
		END IF
	NEXT TT_CPT_NUM
    END DEF

   DEF INTEGER DSP_ERR

	AA_CPT_ALF = ""
	P_R = P_R - 1
	FOR ZZ_CPT_NUM = 1 TO P_R 
		AA_CPT_ALF = AA_CPT_ALF + " "
	NEXT ZZ_CPT_NUM
	BB_CPT_ALF = AA_CPT_ALF + "^"
	AA_CPT_ALF = AA_CPT_ALF + "|"
	BUFOUT = FNC_PRINT("ERROR DE ABORTO EN LINEA NRO: " + FNC_SYSSTR(TPG_TOT_LEI))
	BUFOUT = FNC_PRINT("EN COLUMNA		  : " + FNC_SYSSTR(P_Q))
	BUFOUT = FNC_PRINT(I_B_STR)
	BUFOUT = FNC_PRINT(BB_CPT_ALF)
	BUFOUT = FNC_PRINT(AA_CPT_ALF)
	BUFOUT = FNC_PRINT(AA_CPT_ALF)
	BUFOUT = FNC_PRINT(GLS_ERR)
	BUFOUT = FNC_PRINT("")
    END DEF

   DEF INTEGER TPG_FNC_ATR_FLD_IDX_HST
	TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF) = TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF) + 1
	IF WSS_DSP00 = "S" THEN
		BUFOUT = FNC_PRINT("TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF) " + FNC_SYSSTR(TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF)))
		BUFOUT = FNC_PRINT(" VALTOKEN " + VALTOKEN) 
	END IF
  	ACCION = AGR_FTB_VAL

	IF ES_VAL_CPT_ALF = "SI" THEN
		TPG_MAT_NUMFLDHST(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF)) = "S"
	 END IF

 	TPG_MAT_NAMEFLDHST(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF)) = VALTOKEN
 !!!	TPG_MAT_NAMEFLDHST(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF)) = VALTOKEN
	TPG_MAT_TOTOCCFLDHST(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF)) = TOT_OCURRENCIAS_CAMPOS_CPT_NUM

  	TOKEN = NEXTTOKEN
	IF VALTOKEN = "IKY"  OR VALTOKEN = "MKY"  OR VALTOKEN = "AKY"  OR VALTOKEN = "FLD" THEN
		TPG_MAT_IDT_FLD(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF)) = VALTOKEN
  		TOKEN = NEXTTOKEN
	END IF
	IF VALTOKEN = "DO" THEN
	        TPG_MAT_IDT_DO(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF)) = VALTOKEN
  		TOKEN = NEXTTOKEN
	END IF

	IF VALTOKEN = "DTB"  OR VALTOKEN = "CBX"  OR VALTOKEN = "LBL" THEN
 !!!     	        TPG_MAT_IDT_VBC(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF)) = VALTOKEN
		TOKEN = NEXTTOKEN
	END IF
	IF  VALTOKEN = "FTB" OR VALTOKEN = "TXT" OR VALTOKEN = "ITB" THEN
 !!!		TPG_MAT_IDT_VBC(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF)) = VALTOKEN
		TOKEN = NEXTTOKEN
	END IF

	IF VALTOKEN = "9"  OR VALTOKEN = "X" THEN
		TPG_MAT_TIP_NUM(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF)) = VALTOKEN
  		TOKEN = NEXTTOKEN
		 IF VALTOKEN <> "(" THEN
			BUFOUT = FNC_PRINT("TOKEN NUM 2.0.9 " + FNC_SYSSTR(TOKEN))
			BUFOUT = FNC_PRINT("VALTOKEN %" + VALTOKEN + "%")
			GLS_ERR = "CARACTER " + GET_COM2 + "(" + GET_COM2 + " PARA LARGO DE CAMPO EXPECTED"
	  		IDX_ERR_CPT_NUM = DSP_ERR
		END IF
	
	  	TOKEN = NEXTTOKEN
		IF TOKEN <> NUMTOK THEN
			GLS_ERR = "PARA LARGO DE CAMPO EXPECTED"
	  		IDX_ERR_CPT_NUM = DSP_ERR
		END IF
		TPG_MAT_NUM_FLD(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF),VAR_IND_ENT) = VALTOKEN

	  	TOKEN = NEXTTOKEN
		 IF VALTOKEN <> "," THEN
			BUFOUT = FNC_PRINT("TOKEN " + FNC_SYSSTR(TOKEN))
			BUFOUT = FNC_PRINT("VALTOKEN %" + VALTOKEN + "%")
			GLS_ERR = "CARACTER " + GET_COM2 + "(" + GET_COM2 + " PARA LARGO DE CAMPO EXPECTED"
	  		IDX_ERR_CPT_NUM = DSP_ERR
		END IF
	  	TOKEN = NEXTTOKEN
		IF TOKEN <> NUMTOK THEN
			GLS_ERR = "PARA LARGO DE CAMPO EXPECTED"
	  		IDX_ERR_CPT_NUM = DSP_ERR
		END IF

		TPG_MAT_NUM_FLD(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF),VAR_IND_DEC) = VALTOKEN

	  	TOKEN = NEXTTOKEN
		 IF VALTOKEN <> "," THEN
			BUFOUT = FNC_PRINT("TOKEN " + FNC_SYSSTR(TOKEN))
			BUFOUT = FNC_PRINT("VALTOKEN %" + VALTOKEN + "%")
			GLS_ERR = "CARACTER " + GET_COM2 + "(" + GET_COM2 + " PARA LARGO DE CAMPO EXPECTED"
	  		IDX_ERR_CPT_NUM = DSP_ERR
		END IF
	  	TOKEN = NEXTTOKEN
		 IF VALTOKEN <> "S" AND VALTOKEN <> "N" THEN
			GLS_ERR = "PARA LARGO DE CAMPO EXPECTED"
	  		IDX_ERR_CPT_NUM = DSP_ERR
		END IF

		TPG_MAT_NUM_FLD(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF),VAR_IND_SIG) = VALTOKEN

	  	TOKEN = NEXTTOKEN
		IF VALTOKEN <> ")" THEN
			GLS_ERR = "CARACTER) PARA LARGO DE CAMPO EXPECTED"
	  		IDX_ERR_CPT_NUM = DSP_ERR
		END IF
	  	TOKEN = NEXTTOKEN
	END IF

	 IF VALTOKEN = "(" THEN
 
	  	TOKEN = NEXTTOKEN
		IF TOKEN <> NUMTOK THEN
			GLS_ERR = "PARA LARGO DE CAMPO EXPECTED"
	  		IDX_ERR_CPT_NUM = DSP_ERR
		END IF
	        TPG_MAT_LRG(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF)) = NUMTOKEN

	  	TOKEN = NEXTTOKEN
		IF VALTOKEN <> ")" THEN
			GLS_ERR = "CARACTER) PARA LARGO DE CAMPO EXPECTED"
	  		IDX_ERR_CPT_NUM = DSP_ERR
		END IF
	END IF

    END DEF

   DEF INTEGER TPG_FNC_IDEN_FLD_HST
	IF TOKEN = STRTOK THEN
		  TPG_MAT_IDENFLDHST(TPG_TOT_HST, TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF))  = STRTOKEN
  		TOKEN = NEXTTOKEN
		IF VALTOKEN = "[" THEN
			WHILE VALTOKEN <> "]"
		  		TOKEN = NEXTTOKEN
		        NEXT
	  		TOKEN = NEXTTOKEN
		END IF
	END IF
    END DEF

   DEF INTEGER TPG_FNC_FLD_IDX_HST
  	 TOKEN = NEXTTOKEN
  	FUNC_CPT_NUM = TPG_FNC_IDEN_FLD_HST

	IF VALTOKEN = "$_IDX_FIN" THEN
		GO TO FIN_TPG_FNC_FLD_IDX_HST
	END IF
	
	IF TOKEN = IDNTOK THEN
  		FUNC_CPT_NUM = TPG_FNC_ATR_FLD_IDX_HST
	ELSE
		GLS_ERR = "IDENTIFICADOR EXPECTED"
  		IDX_ERR_CPT_NUM = DSP_ERR
	END IF

 FIN_TPG_FNC_FLD_IDX_HST:

    END DEF

   DEF INTEGER TPG_FNC_HST_FLD
  	TOKEN = NEXTTOKEN
  	FUNC_CPT_NUM = TPG_FNC_IDEN_FLD_HST
	IF VALTOKEN = "$_FLD_FIN" THEN
		GO TO FIN_TPG_FNC_HST_FLD
	END IF
	IF VALTOKEN = "$_IDX_INI" THEN
  		TOKEN = NEXTTOKEN
		POS_1ER_FLD_IDX_CPT_NUM = 0
		IF VALTOKEN <> "=" THEN
			GLS_ERR = "SIGNO = PARA ASIGNACION FORMULARIO EXPECTED"
  			IDX_ERR_CPT_NUM = DSP_ERR
		END IF
  		TOKEN = NEXTTOKEN
		IF TOKEN <> NUMTOK THEN
			GLS_ERR = "TOTAL DE OCURENCIAS PARA CAMPOS HST EXPECTED"
  			IDX_ERR_CPT_NUM = DSP_ERR
		END IF
		TOT_OCURRENCIAS_CAMPOS_CPT_NUM = NUMTOKEN
		POS_1ER_FLD_IDX_CPT_NUM = TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF) + 1	 

		WHILE VALTOKEN <> "$_IDX_FIN"
  			FUNC_CPT_NUM = TPG_FNC_FLD_IDX_HST
	        NEXT

		POS_ULT_FLD_IDX_CPT_NUM = TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF)	  

		TOT_OCURRENCIAS_CAMPOS_CPT_NUM = TOT_OCURRENCIAS_CAMPOS_CPT_NUM - 1
		FOR AA_CPT_NUM = 1 TO TOT_OCURRENCIAS_CAMPOS_CPT_NUM
			FOR SS_CPT_NUM = POS_1ER_FLD_IDX_CPT_NUM TO POS_ULT_FLD_IDX_CPT_NUM
				TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF) = TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF) + 1
				TPG_MAT_IDENFLDHST(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF)) =	TPG_MAT_IDENFLDHST (TPG_TOT_HST,SS_CPT_NUM) 

				TPG_MAT_NAMEFLDHST(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF)) =	TPG_MAT_NAMEFLDHST (TPG_TOT_HST,SS_CPT_NUM) 

				 TPG_MAT_IDT_FLD(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF)) = TPG_MAT_IDT_FLD(TPG_TOT_HST,SS_CPT_NUM) 

				TPG_MAT_TOTOCCFLDHST(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF)) = TOT_OCURRENCIAS_CAMPOS_CPT_NUM + 1

				TPG_MAT_LRG(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF)) = TPG_MAT_LRG(TPG_TOT_HST,SS_CPT_NUM)
			NEXT SS_CPT_NUM
		NEXT AA_CPT_NUM
		TOT_OCURRENCIAS_CAMPOS_CPT_NUM = 0

	ELSE
	IF TOKEN = IDNTOK THEN
  		FUNC_CPT_NUM = TPG_FNC_ATR_FLD_IDX_HST
	ELSE
		GLS_ERR = "$_IDX_INI OR IDENTIFICADOR DE CAMPO EXPECTED"
  		IDX_ERR_CPT_NUM = DSP_ERR
	END IF
	END IF

 FIN_TPG_FNC_HST_FLD:

    END DEF

   DEF INTEGER TPG_FNC_HST

  	TOKEN = NEXTTOKEN
	IF VALTOKEN = "$_HST_FIN" THEN
		GO TO FIN_TPG_FNC_HST
	END IF
	IF VALTOKEN = "$_NOM" THEN
  		TOKEN = NEXTTOKEN
		IF VALTOKEN <> "=" THEN
			GLS_ERR = "SIGNO = PARA ASIGNACION FORMULARIO EXPECTED"
  			IDX_ERR_CPT_NUM = DSP_ERR
		END IF
  		TOKEN = NEXTTOKEN
		IF TOKEN <> STRTOK THEN
			GLS_ERR = "STRING CON NOMBRE DE FORMULARIO EXPECTED"
  			IDX_ERR_CPT_NUM = DSP_ERR
		END IF
		TPG_MAT_HST_ALF(TPG_TOT_HST,CTE_IDX_NOM) = STRTOKEN
	ELSE
	IF VALTOKEN = "$_SIS" THEN
  		TOKEN = NEXTTOKEN
		IF VALTOKEN <> "=" THEN
			GLS_ERR = "SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED"
  			IDX_ERR_CPT_NUM = DSP_ERR
		END IF
  		TOKEN = NEXTTOKEN
		IF TOKEN <> STRTOK THEN
			GLS_ERR = "STRING CON NOMBRE DE SISTEMA EXPECTED"
  			IDX_ERR_CPT_NUM = DSP_ERR
		END IF
		TPG_MAT_HST_ALF(TPG_TOT_HST,CTE_IDX_SIS) = STRTOKEN
		ENC_CPT_ALF = "NO"
		FOR JJ_CPT_NUM = 1 TO TPG_TOT_SIST_CPT_NUM
			IF TPG_VEC_SIST(JJ_CPT_NUM) = STRTOKEN THEN
				ENC_CPT_ALF = "SI"
				JJ_CPT_NUM = TPG_TOT_SIST_CPT_NUM + 1
			END IF
		NEXT JJ_CPT_NUM
		IF ENC_CPT_ALF = "NO" THEN
			TPG_TOT_SIST_CPT_NUM = TPG_TOT_SIST_CPT_NUM + 1
			TPG_VEC_SIST(TPG_TOT_SIST_CPT_NUM) = STRTOKEN
		END IF
	 ELSE
	IF VALTOKEN = "$_SIM" THEN
  		TOKEN = NEXTTOKEN
		IF VALTOKEN <> "=" THEN
			GLS_ERR = "SIGNO = PARA ASIGNACION SISTEMA SIM EXPECTED"
  			IDX_ERR_CPT_NUM = DSP_ERR
		END IF
  		TOKEN = NEXTTOKEN
		IF TOKEN <> STRTOK THEN
			GLS_ERR = "STRING CON NOMBRE DE FORMULARIO EXPECTED"
  			IDX_ERR_CPT_NUM = DSP_ERR
		END IF
		TPG_MAT_HST_ALF(TPG_TOT_HST,CTE_IDX_SIM) = STRTOKEN
	ELSE
	IF VALTOKEN = "$_FLD_INI" THEN
		WHILE VALTOKEN <> "$_FLD_FIN"
  			FUNC_CPT_NUM = TPG_FNC_HST_FLD
			IF WSS_DSP00 = "S" THEN
				BUFOUT = FNC_PRINT("VOLVIO DE TPG_FNC_HST_FLD")
			END IF
	        NEXT
	ELSE
		GLS_ERR = "$_NOM OR $_SIS OR $_FLD_INI EXPECTED"
  		IDX_ERR_CPT_NUM = DSP_ERR
	END IF
	END IF
	END IF
	END IF

 FIN_TPG_FNC_HST:
	IF TPG_MAT_HST_ALF(TPG_TOT_HST,CTE_IDX_SIM) = "" THEN
		TPG_MAT_HST_ALF(TPG_TOT_HST,CTE_IDX_SIM) = TPG_MAT_HST_ALF(TPG_TOT_HST,CTE_IDX_SIS)
	END IF

	IF WSS_DSP00 = "S" THEN
		BUFOUT = FNC_PRINT("EN FIN_TPG_FNC_HST")
	END IF
    END DEF

   DEF INTEGER TPG_FNC_SRV_IDX
	POS_1ER_FLD_IDX_CPT_NUM = 0
  	TOKEN = NEXTTOKEN
	IF VALTOKEN <> "=" THEN
		GLS_ERR = "SIGNO = PARA ASIGNACION FORMULARIO EXPECTED"
  		IDX_ERR_CPT_NUM = DSP_ERR
	END IF
  	TOKEN = NEXTTOKEN
	IF TOKEN <> NUMTOK THEN
		GLS_ERR = "NUMERO DE OCURRENCIAS PARA CAMPOS SRV EXPECTED"
  		IDX_ERR_CPT_NUM = DSP_ERR
	END IF
	TOT_OCURRENCIAS_CAMPOS_CPT_NUM = NUMTOKEN
  	TOKEN = NEXTTOKEN
	POS_1ER_FLD_IDX_CPT_NUM = TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF))  + 1	 
	WHILE VALTOKEN <> "$_IDX_FIN"
		 IF TOKEN <> IDNTOK THEN
			GLS_ERR = "IDENTIFICADOR CON NOMBRE DE CAMPO EXPECTED"
  			IDX_ERR_CPT_NUM = DSP_ERR
		END IF
		TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) = TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) + 1
		INDEX_CPT_NUM = TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF))
  		ACCION = AGR_FTB_VAL

		IF ES_VAL_CPT_ALF = "SI" THEN
			TPG_MAT_NUMFLDSRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF),INDEX_CPT_NUM) = "S"
		END IF

		TPG_MAT_NAMEFLDSRV (TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF),INDEX_CPT_NUM) = VALTOKEN
		TPG_MAT_TOTOCCFLDSRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF),INDEX_CPT_NUM) = TOT_OCURRENCIAS_CAMPOS_CPT_NUM

  		TOKEN = NEXTTOKEN
        NEXT

	IF WSS_DSP01 = "S" THEN
	 	BUFOUT = FNC_PRINT(" FIN WHILE SRV_IDX POS_1ER_FLD_IDX_CPT_NUM"  + FNC_SYSSTR(POS_1ER_FLD_IDX_CPT_NUM))
	END IF
	POS_ULT_FLD_IDX_CPT_NUM = TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) 
	IF WSS_DSP01 = "S" THEN
		BUFOUT = FNC_PRINT(" FIN WHILE SRV_IDX POS_ULT_FLD_IDX_CPT_NUM"  + FNC_SYSSTR(POS_ULT_FLD_IDX_CPT_NUM))
	END IF
	IF POS_1ER_FLD_IDX_CPT_NUM <> 0 THEN
		TOT_OCURRENCIAS_CAMPOS_CPT_NUM = TOT_OCURRENCIAS_CAMPOS_CPT_NUM - 1
		FOR AA_CPT_NUM = 1 TO TOT_OCURRENCIAS_CAMPOS_CPT_NUM
			IF WSS_DSP01 = "S" THEN
			 	BUFOUT = FNC_PRINT(" GUARDO INDEX VECES :  " + FNC_SYSSTR(TOT_OCURRENCIAS_CAMPOS_CPT_NUM))
			END IF
			FOR SS_CPT_NUM = POS_1ER_FLD_IDX_CPT_NUM TO POS_ULT_FLD_IDX_CPT_NUM
				TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) = TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) + 1
				INDEX_CPT_NUM = TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF))
				TPG_MAT_NAMEFLDSRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF),INDEX_CPT_NUM) = TPG_MAT_NAMEFLDSRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF),SS_CPT_NUM) 
				TPG_MAT_TOTOCCFLDSRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF),INDEX_CPT_NUM) = TOT_OCURRENCIAS_CAMPOS_CPT_NUM + 1
			NEXT SS_CPT_NUM
		NEXT AA_CPT_NUM
		TOT_OCURRENCIAS_CAMPOS_CPT_NUM = 0
	END IF		
    END DEF

 DEF INTEGER TPG_FNC_SRV

  	TOKEN = NEXTTOKEN
	IF VALTOKEN = "$_SRV_FIN" THEN
		GO TO FIN_TPG_FNC_SRV
	END IF

	IF VALTOKEN = "$_NOM" THEN
  		TOKEN = NEXTTOKEN
		IF VALTOKEN <> "=" THEN
			GLS_ERR = "SIGNO = PARA ASIGNACION FORMULARIO EXPECTED"
  			IDX_ERR_CPT_NUM = DSP_ERR
		END IF
  		TOKEN = NEXTTOKEN
		IF TOKEN <> STRTOK THEN
			GLS_ERR = "STRING CON NOMBRE DE FORMULARIO EXPECTED"
  			IDX_ERR_CPT_NUM = DSP_ERR
		END IF
		TPG_MAT_SRV_ALF(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) = STRTOKEN	
	ELSE
	IF VALTOKEN = "$_FLD_INI" THEN
  		TOKEN = NEXTTOKEN
		WHILE VALTOKEN <> "$_FLD_FIN"
			IF VALTOKEN = "$_IDX_INI" THEN
				WHILE VALTOKEN <> "$_IDX_FIN"
  					FUNC_CPT_NUM = TPG_FNC_SRV_IDX
	     			NEXT
			ELSE
			IF TOKEN = IDNTOK THEN
				AA_CPT_ALF = VALTOKEN
				II_CPT_NUM = TPG_TOT_HST
				CONT_SRV_CPT_NUM = 1
  				ENC_CPT_NUM = TPG_FNC_BCS
				IF IDX_CPT_NUM = 0 THEN
					BUFOUT = FNC_PRINT(" NO EXISTE " +  AA_CPT_ALF + " EN TABLA HST => " + TPG_MAT_HST_ALF(TPG_TOT_HST,CTE_IDX_NOM))
				END IF
				TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) = TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) + 1
				INDEX_CPT_NUM = TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF))
				ACCION = AGR_FTB_VAL

				IF ES_VAL_CPT_ALF = "SI" THEN
					TPG_MAT_NUMFLDSRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF),INDEX_CPT_NUM) = "S"
				END IF
				 TPG_MAT_NAMEFLDSRV (TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF),INDEX_CPT_NUM) = VALTOKEN

	 		END IF
 			END IF
 			TOKEN = NEXTTOKEN
	        NEXT
	ELSE
		GLS_ERR = "" + GET_COM2 + "NOM" + GET_COM2 + " OR $_FLD_INI PARA SRV EXPECTED"
		IDX_ERR_CPT_NUM = DSP_ERR
	END IF
	END IF

 FIN_TPG_FNC_SRV:

    END DEF

     DEF STRING FNC_SCAN_MTX

     	WHILE TOKEN <> ETXTOK

	IF VALTOKEN = "$_CMD_INI" THEN
		WHILE VALTOKEN <> "$_CMD_FIN"
 			TOKEN = NEXTTOKEN
	        NEXT
	END IF

	IF VALTOKEN = "$_TIME_STP" THEN
 		TOKEN = NEXTTOKEN
		IF VALTOKEN <> "=" THEN
			GLS_ERR = "SIGNO = PARA ASIGNACION FORMULARIO EXPECTED"
 			IDX_ERR_CPT_NUM = DSP_ERR
		END IF
 		TOKEN = NEXTTOKEN
		IF TOKEN <> STRTOK THEN
			GLS_ERR = "STRING CON NOMBRE DE FORMULARIO EXPECTED"
 			IDX_ERR_CPT_NUM = DSP_ERR
		END IF
		TIME_STP_CPT_ALF  = STRTOKEN
	END IF

	IF VALTOKEN = "$_PI_MOVE" THEN
 		PI_MOVE$ = "SI" 
	END IF

	IF VALTOKEN = "$_LRG_SND" THEN
 		TOKEN = NEXTTOKEN
		IF VALTOKEN <> "=" THEN
			GLS_ERR = "SIGNO = PARA ASIGNACION FORMULARIO EXPECTED"
 			IDX_ERR_CPT_NUM = DSP_ERR
		END IF
 		TOKEN = NEXTTOKEN
		TPG_LRG_SND_CPT_NUM = NUMTOKEN
		TPG_LRG_SND_CPT_NUM_PRT = NUMTOKEN
	END IF

	IF VALTOKEN = "$_CPL_NUM_INI" THEN
		TOKEN = NEXTTOKEN
		IF VALTOKEN <> "=" THEN
			GLS_ERR = "SIGNO = PARA ASIGNACION CPL_NUM EXPECTED"
			IDX_ERR_CPT_NUM = DSP_ERR
		END IF
		TOKEN = NEXTTOKEN
		CPL_NUM_INI = STRTOKEN
	END IF

	IF VALTOKEN = "$_LRG_RCV" THEN
 		TOKEN = NEXTTOKEN
		IF VALTOKEN <> "=" THEN
			GLS_ERR = "SIGNO = PARA ASIGNACION FORMULARIO EXPECTED"
 			IDX_ERR_CPT_NUM = DSP_ERR
		END IF
 		TOKEN = NEXTTOKEN
		TPG_LRG_RCV_CPT_NUM = NUMTOKEN
		TPG_LRG_RCV_CPT_NUM_PRT = NUMTOKEN
	END IF

	IF VALTOKEN = "$_LRG_HDR" THEN
 		TOKEN = NEXTTOKEN
		IF VALTOKEN <> "=" THEN
			GLS_ERR = "SIGNO = PARA ASIGNACION LARGO HEADER"
 			IDX_ERR_CPT_NUM = DSP_ERR
		END IF
 		TOKEN = NEXTTOKEN
		LRG_HDR = NUMTOKEN
		LRG_HDR_ALF$ = FNC_SYSSTR(LRG_HDR)
	END IF

	IF VALTOKEN = "$_ATR_PRT" THEN
 		TOKEN = NEXTTOKEN
		IF VALTOKEN <> "=" THEN
			GLS_ERR = "SIGNO = PARA ASIGNACION LARGO ATR_PRT"
 			IDX_ERR_CPT_NUM = DSP_ERR
		END IF
 		TOKEN = NEXTTOKEN
		IF VALTOKEN = "TRUE" THEN
			ATR_PRT = TPG_CTE_TRUE
		END IF
	END IF

	IF VALTOKEN = "$_LRG_MSG_SND" THEN
 		TOKEN = NEXTTOKEN
		IF VALTOKEN <> "=" THEN
			GLS_ERR = "SIGNO = PARA ASIGNACION FORMULARIO EXPECTED"
 			IDX_ERR_CPT_NUM = DSP_ERR
		END IF
 		TOKEN = NEXTTOKEN
		TPG_LRG_MSG_SND_NUM = NUMTOKEN
	END IF

	IF VALTOKEN = "$_LRG_MSG_RCV" THEN
 		TOKEN = NEXTTOKEN
		IF VALTOKEN <> "=" THEN
			GLS_ERR = "SIGNO = PARA ASIGNACION FORMULARIO EXPECTED"
 			IDX_ERR_CPT_NUM = DSP_ERR
		END IF
 		TOKEN = NEXTTOKEN
		TPG_LRG_MSG_RCV_NUM = NUMTOKEN
	END IF

	IF VALTOKEN = "$_HDR_SND" THEN
 		TOKEN = NEXTTOKEN
		IF VALTOKEN <> "=" THEN
			GLS_ERR = "SIGNO = PARA ASIGNACION FORMULARIO EXPECTED"
 			IDX_ERR_CPT_NUM = DSP_ERR
		END IF
 		TOKEN = NEXTTOKEN
		TPG_HDR_SND_CPT_NUM = NUMTOKEN
	END IF

	IF VALTOKEN = "$_IND_ARCH_FST" THEN
 		TOKEN = NEXTTOKEN
		IF VALTOKEN <> "=" THEN
			GLS_ERR = "SIGNO = PARA ASIGNACION FORMULARIO EXPECTED"
 			IDX_ERR_CPT_NUM = DSP_ERR
		END IF
 		TOKEN = NEXTTOKEN
		VAR_IND_NVL1 = STRTOKEN 
	END IF

	IF VALTOKEN = "$_FRM_INI" THEN
		TPG_TOT_HST = TPG_TOT_HST + 1
		IF WSS_DSP00 = "S" THEN
			BUFOUT = FNC_PRINT("TPG_TOT_HST " + FNC_SYSSTR(TPG_TOT_HST))
		END IF
		WHILE VALTOKEN <> "$_FRM_FIN"
 			TOKEN = NEXTTOKEN
			IF VALTOKEN = "$_HST_INI" THEN
				WHILE VALTOKEN <> "$_HST_FIN"
 					FUNC_CPT_NUM = TPG_FNC_HST
	     			NEXT
				TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF) = TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF) + 1

				TPG_MAT_NAMEFLDHST(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF)) = TPG_MAT_HST_ALF(TPG_TOT_HST,CTE_IDX_NOM) + "-GLS-MENS"
				TPG_MAT_LRG(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF)) = 79
			ELSE
			IF VALTOKEN = "$_SRV_INI" THEN
				TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF) = TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF) + 1
				WHILE VALTOKEN <> "$_SRV_FIN"
 					FUNC_CPT_NUM = TPG_FNC_SRV
	     			NEXT
			 ELSE
			IF VALTOKEN <> "$_FRM_FIN" THEN
				GLS_ERR = "HST_INI OR SRV_INI OR FRM_FIN EXPECTED"
 				IDX_ERR_CPT_NUM = DSP_ERR
			END IF
			END IF
			END IF

	        NEXT

		 TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF) = TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF) + 1
 !!! NOMBRE DE NUEVO SRV PARA ESTE CASO  "901"
		 TPG_MAT_SRV_ALF(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) = "901"	
		FOR XX_CPT_NUM = 1 TO TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF)
			IF  TPG_MAT_IDT_FLD(TPG_TOT_HST,XX_CPT_NUM)  = "IKY" THEN		 
 !!! SE INCLUYEN CAMPOS IKY 
				 TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) = TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) + 1
				INDEX_CPT_NUM = TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF))
				 TPG_MAT_NAMEFLDSRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF),INDEX_CPT_NUM) = TPG_MAT_NAMEFLDHST(TPG_TOT_HST,XX_CPT_NUM) 
 !!! PARA CMAPOS INDEXADOS EN EL HOST
				   TPG_MAT_TOTOCCFLDSRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF),INDEX_CPT_NUM) = TPG_MAT_TOTOCCFLDHST(TPG_TOT_HST,XX_CPT_NUM)
			END IF
		NEXT XX_CPT_NUM

		  TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF) = TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF) + 1
		 TPG_MAT_SRV_ALF(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) = "903"
		FOR XX_CPT_NUM = 1 TO TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF)
			IF  TPG_MAT_IDT_FLD(TPG_TOT_HST,XX_CPT_NUM)  = "FLD" OR TPG_MAT_IDT_FLD(TPG_TOT_HST,XX_CPT_NUM)  = "MKY" THEN
				TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) = TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) + 1
				INDEX_CPT_NUM = TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF))
				 TPG_MAT_NAMEFLDSRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF),INDEX_CPT_NUM) = TPG_MAT_NAMEFLDHST(TPG_TOT_HST,XX_CPT_NUM) 
 !!! PARA CMAPOS INDEXADOS EN EL HOST
				   TPG_MAT_TOTOCCFLDSRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF),INDEX_CPT_NUM) = TPG_MAT_TOTOCCFLDHST(TPG_TOT_HST,XX_CPT_NUM)
			END IF
		NEXT XX_CPT_NUM

		TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF) = TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF) + 1
		 TPG_MAT_SRV_ALF(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) = "904"


		FOR XX_CPT_NUM = 1 TO TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF)
			IF      TPG_MAT_IDT_FLD(TPG_TOT_HST,XX_CPT_NUM)  = "IKY"  OR TPG_MAT_IDT_FLD(TPG_TOT_HST,XX_CPT_NUM)  = "MKY" THEN
				TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) = TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) + 1

				INDEX_CPT_NUM = TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF))
				 TPG_MAT_NAMEFLDSRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF),INDEX_CPT_NUM) = TPG_MAT_NAMEFLDHST(TPG_TOT_HST,XX_CPT_NUM) 
 !!! PARA CMAPOS INDEXADOS EN EL HOST
				   TPG_MAT_TOTOCCFLDSRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF),INDEX_CPT_NUM) = TPG_MAT_TOTOCCFLDHST(TPG_TOT_HST,XX_CPT_NUM)

			END IF
			IF TPG_MAT_IDT_FLD(TPG_TOT_HST,XX_CPT_NUM)  = "AKY"  OR TPG_MAT_IDT_FLD(TPG_TOT_HST,XX_CPT_NUM)  = "FLD" THEN
				TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) = TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) + 1

				INDEX_CPT_NUM = TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF))
				 TPG_MAT_NAMEFLDSRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF),INDEX_CPT_NUM) = TPG_MAT_NAMEFLDHST(TPG_TOT_HST,XX_CPT_NUM) 
 !!! PARA CMAPOS INDEXADOS EN EL HOST
				   TPG_MAT_TOTOCCFLDSRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF),INDEX_CPT_NUM) = TPG_MAT_TOTOCCFLDHST(TPG_TOT_HST,XX_CPT_NUM)

			END IF
		NEXT XX_CPT_NUM


		 TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF) = TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF) + 1
		 TPG_MAT_SRV_ALF(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) = "905"

		FOR XX_CPT_NUM = 1 TO TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TCF)
			IF  TPG_MAT_IDT_FLD(TPG_TOT_HST,XX_CPT_NUM)  = "IKY" OR TPG_MAT_IDT_FLD(TPG_TOT_HST,XX_CPT_NUM)  = "MKY" THEN
				 TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) = TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) + 1
				INDEX_CPT_NUM = TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF))
	 TPG_MAT_NAMEFLDSRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF),INDEX_CPT_NUM) = TPG_MAT_NAMEFLDHST(TPG_TOT_HST,XX_CPT_NUM) 
 !!! PARA CMAPOS INDEXADOS EN EL HOST
				   TPG_MAT_TOTOCCFLDSRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF),INDEX_CPT_NUM) = TPG_MAT_TOTOCCFLDHST(TPG_TOT_HST,XX_CPT_NUM)
	
			END IF
			IF TPG_MAT_IDT_FLD(TPG_TOT_HST,XX_CPT_NUM)  = "AKY" THEN
				 TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) = TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) + 1
				INDEX_CPT_NUM = TPG_MAT_NCP_SRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF))
				 TPG_MAT_NAMEFLDSRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF),INDEX_CPT_NUM) = TPG_MAT_NAMEFLDHST(TPG_TOT_HST,XX_CPT_NUM) 
 !!! PARA CMAPOS INDEXADOS EN EL HOST
				   TPG_MAT_TOTOCCFLDSRV(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF),INDEX_CPT_NUM) = TPG_MAT_TOTOCCFLDHST(TPG_TOT_HST,XX_CPT_NUM)
	
			END IF
		NEXT XX_CPT_NUM

		TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF) = TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF) + 1
		 TPG_MAT_SRV_ALF(TPG_TOT_HST,TPG_MAT_HST_NUM(TPG_TOT_HST,CTE_IDX_TSF)) = "907"

	 END IF

	TPG_POS_REQ = 0
	IF VALTOKEN = "$_REQ_INI" THEN
		TPG_TOT_TRN = 0
		TPG_TOT_REQ = TPG_TOT_REQ + 1

 		TOKEN = NEXTTOKEN

		WHILE VALTOKEN <> "$_REQ_FIN"

			IF VALTOKEN = "$_DEF" THEN

 				TOKEN = NEXTTOKEN

				IF VALTOKEN <> "=" THEN
					GLS_ERR = "SIGNO = PARA ASIGNACION $_DEF EXPECTED"
 					IDX_ERR_CPT_NUM = DSP_ERR
				END IF

 				TOKEN = NEXTTOKEN

				IF TOKEN <> STRTOK THEN
					GLS_ERR = "STRING CON NOMBRE DE FORMULARIO EXPECTED"
 					IDX_ERR_CPT_NUM = DSP_ERR
				END IF
				TPG_VEC_DEF_REQ(TPG_TOT_REQ) = STRTOKEN

 				TOKEN = NEXTTOKEN

			END IF


			IF VALTOKEN = "$_NOM" THEN

 				TOKEN = NEXTTOKEN

				IF VALTOKEN <> "=" THEN
					GLS_ERR = "SIGNO = PARA ASIGNACION FORMULARIO EXPECTED"
 					IDX_ERR_CPT_NUM = DSP_ERR
				END IF

 				TOKEN = NEXTTOKEN

				IF TOKEN <> STRTOK THEN
					GLS_ERR = "STRING CON NOMBRE DE FORMULARIO EXPECTED"
 					IDX_ERR_CPT_NUM = DSP_ERR
				END IF
				TPG_VEC_REQ(TPG_TOT_REQ) = STRTOKEN

 				TOKEN = NEXTTOKEN

			END IF
			IF VALTOKEN = "$_TRN_INI" THEN
				TPG_TOT_TRN = TPG_TOT_TRN + 1
 				TOKEN = NEXTTOKEN

				WHILE VALTOKEN <> "$_TRN_FIN"
					IF TOKEN <> TPGTOK THEN
						GLS_ERR = "STRING CON NOMBRE DE SISTEMA EXPECTED"
 						IDX_ERR_CPT_NUM = DSP_ERR
					END IF
					IF VALTOKEN = "$_FRM" THEN
						TPG_POS_REQ = CTE_TRN_FRM
					END IF
					IF VALTOKEN = "$_CMN" THEN
						TPG_POS_REQ = CTE_TRN_CMN
					END IF
					IF VALTOKEN = "$_CPP" THEN
						TPG_POS_REQ = CTE_TRN_CPP
					END IF
					IF VALTOKEN = "$_SPP" THEN
						TPG_POS_REQ = CTE_TRN_SPP
					END IF
					IF VALTOKEN = "$_PGM" THEN
						TPG_POS_REQ = CTE_TRN_PGM
					END IF
					IF VALTOKEN = "$_SUB" THEN
						TPG_POS_REQ = CTE_TRN_SUB
					END IF
					IF VALTOKEN = "$_INS" THEN
						TPG_POS_REQ = CTE_TRN_INS
					END IF
					IF VALTOKEN = "$_INM" THEN
						TPG_POS_REQ = CTE_TRN_INM
					END IF
					IF VALTOKEN = "$_FIN" THEN
						TPG_POS_REQ = CTE_TRN_FIN
					END IF
					IF VALTOKEN = "$_FOU" THEN
						TPG_POS_REQ = CTE_TRN_FOU
					END IF
					IF VALTOKEN = "$_CMT" THEN
						TPG_POS_REQ = CTE_TRN_CMT
					END IF
					IF VALTOKEN = "$_IDX" THEN
						TPG_POS_REQ = CTE_TRN_IDX
					END IF
					IF VALTOKEN = "$_CNF" THEN
						TPG_POS_REQ = CTE_TRN_CNF
					END IF
					IF VALTOKEN = "$_TRX" THEN
						TPG_POS_REQ = CTE_TRN_TRX
					END IF

 					TOKEN = NEXTTOKEN

					IF VALTOKEN <> "=" THEN
						GLS_ERR = "SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED"
 						IDX_ERR_CPT_NUM = DSP_ERR
					END IF
 					TOKEN = NEXTTOKEN
					IF TOKEN <> STRTOK THEN
						GLS_ERR = "STRING CON NOMBRE DE SISTEMA EXPECTED"
 						IDX_ERR_CPT_NUM = DSP_ERR
					END IF

					IF TPG_POS_REQ = CTE_TRN_FRM THEN
						IF STRTOKEN = "" THEN
							GLS_ERR = "EN TRANSACCION: FORMULARIO OBLIGATORIO"
 							IDX_ERR_CPT_NUM = DSP_ERR
						ELSE
							IF FNC_SYSLEN(STRTOKEN) <> 3 THEN
								GLS_ERR = "EN TRANSACCION: FORMULARIO CON LARGO DISTINTO DE 3"
 								IDX_ERR_CPT_NUM = DSP_ERR
							END IF
						END IF
					END IF

					IF TPG_POS_REQ = CTE_TRN_TRX THEN
						IF FNC_SYSLEN(STRTOKEN) <> 4 AND FNC_SYSLEN(STRTOKEN) <> 6 THEN
							GLS_ERR = "EN TRANSACCION: $_TRX CON LARGO DISTINTO DE 4 / 6"
								IDX_ERR_CPT_NUM = DSP_ERR
						END IF
					END IF

					IF TPG_POS_REQ = CTE_TRN_CMN THEN
						IF STRTOKEN = "" THEN
							GLS_ERR = "TRANSACCION: COMANDO " + GET_COM2 + "CMN" + GET_COM2 + " OBLIGATORIO"
 							IDX_ERR_CPT_NUM = DSP_ERR
						ELSE
							IF FNC_SYSLEN(STRTOKEN) <> 3 THEN
								GLS_ERR = "EN TRANSACCION: COMANDO " + GET_COM2 + "CMN" + GET_COM2 + " CON LARGO DISTINTO DE 3"
 								IDX_ERR_CPT_NUM = DSP_ERR
							END IF
						END IF
					END IF
					IF TPG_POS_REQ = CTE_TRN_CPP THEN
						IF STRTOKEN = "" THEN
							GLS_ERR = "EN TRANSACCION: COMANDO " + GET_COM2 + "CPP" + GET_COM2 + " OBLIGATORIO"
 							IDX_ERR_CPT_NUM = DSP_ERR
						ELSE
							IF FNC_SYSLEN(STRTOKEN) <> 3 THEN
								GLS_ERR = "EN TRANSACCION: COMANDO " + GET_COM2 + "CPP" + GET_COM2 + " CON LARGO DISTINTO DE 3"
 								IDX_ERR_CPT_NUM = DSP_ERR
							END IF
						END IF
					END IF
					IF TPG_POS_REQ = CTE_TRN_SPP THEN
						IF STRTOKEN = "" THEN
							GLS_ERR = "EN TRANSACCION: STATUS PARA PROGRAMA " + GET_COM2 + "SPP" + GET_COM2 + " OBLIGATORIO"
 							IDX_ERR_CPT_NUM = DSP_ERR
						ELSE
							IF FNC_SYSLEN(STRTOKEN) <> 1 THEN
								GLS_ERR = "EN TRANSACCION: STATUS PARA PROGRAMA " + GET_COM2 + "SPP" + GET_COM2 + " CON LARGO DISTINTO DE 1"
 								IDX_ERR_CPT_NUM = DSP_ERR
							END IF
						END IF
					END IF
					IF TPG_POS_REQ = CTE_TRN_PGM THEN
						IF STRTOKEN = "" THEN
							GLS_ERR = "EN TRANSACCION: PROGRAMA OBLIGATORIO"
 							IDX_ERR_CPT_NUM = DSP_ERR
						ELSE
							IF FNC_SYSLEN(STRTOKEN) <> 8 THEN
								GLS_ERR = "EN TRANSACCION: PROGRAMA(SUB) CON LARGO DISTINTO DE 8"
 								IDX_ERR_CPT_NUM = DSP_ERR
							END IF
						END IF
					END IF
					IF TPG_POS_REQ = CTE_TRN_INS THEN
						IF STRTOKEN = "" THEN
							GLS_ERR = "EN TRANSACCION: INSTANCIA OBLIGATORIA"
 							IDX_ERR_CPT_NUM = DSP_ERR
						ELSE
							IF FNC_SYSLEN(STRTOKEN) <> 3 THEN
								GLS_ERR = "EN TRANSACCION: INSTANCIA CON LARGO DISTINTO DE 3"
 								IDX_ERR_CPT_NUM = DSP_ERR
							END IF
						END IF
					END IF
					IF TPG_POS_REQ = CTE_TRN_SUB THEN
						IF STRTOKEN = "" THEN
							GLS_ERR = "EN TRANSACCION: PROGRAMA OBLIGATORIO"
 							IDX_ERR_CPT_NUM = DSP_ERR
						ELSE
							IF FNC_SYSLEN(STRTOKEN) <> 8 THEN
								GLS_ERR = "EN TRANSACCION: PROGRAMA CON LARGO DISTINTO DE 8"
 								IDX_ERR_CPT_NUM = DSP_ERR
							END IF
						END IF
					END IF
					IF TPG_POS_REQ = CTE_TRN_FIN THEN
						IF STRTOKEN = "" THEN
							GLS_ERR = "EN TRANSACCION: FORMATO DE INPUT OBLIGATORIO"
 							IDX_ERR_CPT_NUM = DSP_ERR
						ELSE
							IF FNC_SYSLEN(STRTOKEN) <> 3 THEN
								GLS_ERR = "EN TRANSACCION: FORMATO DE INPUT CON LARGO DISTINTO DE 3"
 								IDX_ERR_CPT_NUM = DSP_ERR
							END IF
						END IF
					END IF
					IF TPG_POS_REQ = CTE_TRN_FOU THEN
						IF STRTOKEN = "" THEN
							STRTOKEN = "   "
						ELSE
							IF FNC_SYSLEN(STRTOKEN) <> 3 THEN
								GLS_ERR = "EN TRANSACCION: FORMATO DE OUPUT CON LARGO DISTINTO DE 3"
 								IDX_ERR_CPT_NUM = DSP_ERR
							END IF
						END IF
					END IF
					TPG_MAT_TRN(TPG_TOT_REQ,TPG_TOT_TRN,TPG_POS_REQ) = STRTOKEN
 					TOKEN = NEXTTOKEN
	     			NEXT
				IF TPG_MAT_TRN(TPG_TOT_REQ,TPG_TOT_TRN,CTE_TRN_INM) = "   " THEN
					    TPG_MAT_TRN(TPG_TOT_REQ,TPG_TOT_TRN,CTE_TRN_INM) = TPG_MAT_TRN(TPG_TOT_REQ,TPG_TOT_TRN,CTE_TRN_INS)
				END IF
		END IF	

 !!! INICIO DE LECTURA DE DATOS PARA GENERAR PCAPT  "PT"
			VAR_IDX1_CPT_NUM = 0 
			VAR_IDX2_CPT_NUM = 0 
			IF VALTOKEN = "$_PT_INI" THEN
				INICIA_IDX_PT = NO_INICIA_IDX_PT 
 				TOKEN = NEXTTOKEN
				TPG_TOT_CAMP = 0
				WHILE VALTOKEN <> "$_PT_FIN"
					IF VALTOKEN = "$_ENT_VAR" THEN
						PTREQ_ENT_VAR(TPG_TOT_REQ,TPG_TOT_CAMP) = "SI"
		 				TOKEN = NEXTTOKEN
					END IF
					IF TOKEN <> TPGTOK THEN
						GLS_ERR = "STRING NO CORRESPONDE A UN " + GET_COM2 + " $_ " + GET_COM2 + " EXPECTED"
 						IDX_ERR_CPT_NUM = DSP_ERR
					END IF
					IF VALTOKEN = "$_FRM" THEN
						SEC_PT_HDR_CPT_ALF = "OPEN"
 						TOKEN = NEXTTOKEN
						IF VALTOKEN <> "=" THEN
							GLS_ERR = "SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED" 
 							IDX_ERR_CPT_NUM = DSP_ERR
						END IF
 						TOKEN = NEXTTOKEN
						TPG_TOT_CAMP = TPG_TOT_CAMP + 1
						PTREQ_ENT_VAR(TPG_TOT_REQ,TPG_TOT_CAMP) = "NO"
						TPG_MAT_PTFRM(TPG_TOT_REQ,TPG_TOT_CAMP) = STRTOKEN
						TPG_MAT_INIIDXPT(TPG_TOT_REQ,TPG_TOT_CAMP) = INICIA_IDX_PT
						INICIA_IDX_PT = NO_INICIA_IDX_PT 
					END IF
					IF VALTOKEN = "$_PIG" THEN
						SEC_PT_HDR_CPT_ALF = "OPEN"
 						TOKEN = NEXTTOKEN
						IF VALTOKEN <> "=" THEN
							GLS_ERR = "SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED" 
 							IDX_ERR_CPT_NUM = DSP_ERR
						END IF
 						TOKEN = NEXTTOKEN
						TPG_MAT_PTPIG(TPG_TOT_REQ,TPG_TOT_CAMP) = STRTOKEN
					END IF
					IF VALTOKEN = "$_SPR" THEN
						SEC_PT_HDR_CPT_ALF = "OPEN"
 						TOKEN = NEXTTOKEN
						IF VALTOKEN <> "=" THEN
							GLS_ERR = "SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED" 
 							IDX_ERR_CPT_NUM = DSP_ERR
						END IF
 						TOKEN = NEXTTOKEN
						TPG_MAT_PTSPR(TPG_TOT_REQ,TPG_TOT_CAMP) = STRTOKEN
					END IF
					IF VALTOKEN = "$_FMT" THEN
						SEC_PT_HDR_CPT_ALF = "CLOSE"
 						TOKEN = NEXTTOKEN
						IF VALTOKEN <> "=" THEN
							GLS_ERR = "SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED"
 							IDX_ERR_CPT_NUM = DSP_ERR
						END IF
 						TOKEN = NEXTTOKEN

						TPG_MAT_PTFMT(TPG_TOT_REQ,TPG_TOT_CAMP) = STRTOKEN
						TPG_MAT_NIV_IDPT(TPG_TOT_REQ,TPG_TOT_CAMP,1) = VAR_IDX1_CPT_NUM
						TPG_MAT_NIV_IDPT(TPG_TOT_REQ,TPG_TOT_CAMP,2) = VAR_IDX2_CPT_NUM
					END IF
					IF VALTOKEN = "$_IDX_INI" THEN
 						TOKEN = NEXTTOKEN
						IF VALTOKEN <> "=" THEN
							GLS_ERR = "SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED"
 							IDX_ERR_CPT_NUM = DSP_ERR
						END IF
 						TOKEN = NEXTTOKEN
						IF VAR_IDX1_CPT_NUM = 0 THEN 
							VAR_IDX1_CPT_NUM = NUMTOKEN
						ELSE
							VAR_IDX2_CPT_NUM = NUMTOKEN
						END IF
						INICIA_IDX_PT = SI_INICIA_IDX_PT 
					END IF
					IF VALTOKEN = "$_IDX_FIN" THEN
						IF VAR_IDX2_CPT_NUM <> 0 THEN 
							VAR_IDX2_CPT_NUM = 0
						ELSE
							VAR_IDX1_CPT_NUM = 0
						END IF
					END IF

				TOKEN = NEXTTOKEN
	     			NEXT

				TPG_MAT_CAM_PT(TPG_TOT_REQ) = TPG_TOT_CAMP

			END IF
 !!! INICIO DE LECTURA DE DATOS PARA GENERAR PTAMX  "TX"
			VAR_IDX1_CPT_NUM = 0 
			VAR_IDX2_CPT_NUM = 0 
			IF VALTOKEN = "$_TX_INI" THEN
				INICIA_IDX_TX = NO_INICIA_IDX_TX 
 				TOKEN = NEXTTOKEN
				TPG_TOT_CAMP = 0
				WHILE VALTOKEN <> "$_TX_FIN"
					IF TOKEN <> TPGTOK THEN
						GLS_ERR = "STRING NO CORRESPONDE A UN " + GET_COM2 + " $_ " + GET_COM2 + " EXPECTED"
 						IDX_ERR_CPT_NUM = DSP_ERR
					END IF
					IF VALTOKEN = "$_FRM" THEN
 						TOKEN = NEXTTOKEN
						IF VALTOKEN <> "=" THEN
							GLS_ERR = "SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED"
 							IDX_ERR_CPT_NUM = DSP_ERR
						END IF
 						TOKEN = NEXTTOKEN
						TPG_TOT_CAMP = TPG_TOT_CAMP + 1
						TPG_MAT_TXFRM(TPG_TOT_REQ,TPG_TOT_CAMP) = STRTOKEN
						TPG_MAT_INIIDXTX(TPG_TOT_REQ,TPG_TOT_CAMP) = INICIA_IDX_TX
						INICIA_IDX_TX = NO_INICIA_IDX_PT 
					END IF
					IF VALTOKEN = "$_FMT" THEN
 						TOKEN = NEXTTOKEN
						IF VALTOKEN <> "=" THEN
							GLS_ERR = "SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED"
 							IDX_ERR_CPT_NUM = DSP_ERR
						END IF
 						TOKEN = NEXTTOKEN
						TPG_MAT_TXFMT(TPG_TOT_REQ,TPG_TOT_CAMP) = STRTOKEN
						TPG_MAT_NIV_IDTX(TPG_TOT_REQ,TPG_TOT_CAMP,1) = VAR_IDX1_CPT_NUM
						TPG_MAT_NIV_IDTX(TPG_TOT_REQ,TPG_TOT_CAMP,2) = VAR_IDX2_CPT_NUM
					END IF
					IF VALTOKEN = "$_IDX_INI" THEN
 						TOKEN = NEXTTOKEN
						IF VALTOKEN <> "=" THEN
							GLS_ERR = "SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED"
 							IDX_ERR_CPT_NUM = DSP_ERR
						END IF
 						TOKEN = NEXTTOKEN
						IF VAR_IDX1_CPT_NUM = 0 THEN 
							VAR_IDX1_CPT_NUM = NUMTOKEN
						ELSE
							VAR_IDX2_CPT_NUM = NUMTOKEN
						END IF
						INICIA_IDX_TX = SI_INICIA_IDX_TX
					END IF
					IF VALTOKEN = "$_IDX_FIN" THEN
						IF VAR_IDX2_CPT_NUM <> 0 THEN 
							VAR_IDX2_CPT_NUM = 0
						ELSE
							VAR_IDX1_CPT_NUM = 0
						END IF
					END IF

 					TOKEN = NEXTTOKEN
	     			NEXT
				TPG_MAT_CAM_TX(TPG_TOT_REQ) = TPG_TOT_CAMP
			END IF
 !!! INICIO DE LECTURA DE DATOS PARA GENERAR MXAPT  "XT"
			VAR_IDX1_CPT_NUM = 0 
			VAR_IDX2_CPT_NUM = 0 
			IF VALTOKEN = "$_XT_INI" THEN
				INICIA_IDX_XT = NO_INICIA_IDX_XT 
 				TOKEN = NEXTTOKEN
				TPG_TOT_CAMP = 0
				WHILE VALTOKEN <> "$_XT_FIN"
					IF TOKEN <> TPGTOK THEN
						GLS_ERR = "STRING NO CORRESPONDE A UN " + GET_COM2 + " $_ " + GET_COM2 + " EXPECTED"
 						IDX_ERR_CPT_NUM = DSP_ERR
					END IF
					IF VALTOKEN = "$_FRM" THEN
 						TOKEN = NEXTTOKEN
						IF VALTOKEN <> "=" THEN
							GLS_ERR = "SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED"
 							IDX_ERR_CPT_NUM = DSP_ERR
						END IF
 						TOKEN = NEXTTOKEN
						TPG_TOT_CAMP = TPG_TOT_CAMP + 1
						TPG_MAT_XTFRM(TPG_TOT_REQ,TPG_TOT_CAMP) = STRTOKEN
						TPG_MAT_INIIDXXT(TPG_TOT_REQ,TPG_TOT_CAMP) = INICIA_IDX_XT
						INICIA_IDX_XT = NO_INICIA_IDX_XT 
					END IF
					IF VALTOKEN = "$_PIG" THEN
						SEC_PT_HDR_CPT_ALF = "OPEN"
 						TOKEN = NEXTTOKEN
						IF VALTOKEN <> "=" THEN
							GLS_ERR = "SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED" 
 							IDX_ERR_CPT_NUM = DSP_ERR
						END IF
 						TOKEN = NEXTTOKEN
						TPG_MAT_XTPIG(TPG_TOT_REQ,TPG_TOT_CAMP) = STRTOKEN
					END IF
					IF VALTOKEN = "$_SPR" THEN
						SEC_PT_HDR_CPT_ALF = "OPEN"
 						TOKEN = NEXTTOKEN
						IF VALTOKEN <> "=" THEN
							GLS_ERR = "SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED" 
 							IDX_ERR_CPT_NUM = DSP_ERR
						END IF
 						TOKEN = NEXTTOKEN
						TPG_MAT_XTSPR(TPG_TOT_REQ,TPG_TOT_CAMP) = STRTOKEN
					END IF
					IF VALTOKEN = "$_FMT" THEN
 						TOKEN = NEXTTOKEN
						IF VALTOKEN <> "=" THEN
							GLS_ERR = "SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED"
 							IDX_ERR_CPT_NUM = DSP_ERR
						END IF
 						TOKEN = NEXTTOKEN
						TPG_MAT_XTFMT(TPG_TOT_REQ,TPG_TOT_CAMP) = STRTOKEN
						TPG_MAT_NIV_IDXT(TPG_TOT_REQ,TPG_TOT_CAMP,1) = VAR_IDX1_CPT_NUM
						TPG_MAT_NIV_IDXT(TPG_TOT_REQ,TPG_TOT_CAMP,2) = VAR_IDX2_CPT_NUM
					END IF
					IF VALTOKEN = "$_IDX_INI" THEN
 						TOKEN = NEXTTOKEN
						IF VALTOKEN <> "=" THEN
							GLS_ERR = "SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED"
 							IDX_ERR_CPT_NUM = DSP_ERR
						END IF
 						TOKEN = NEXTTOKEN
						IF VAR_IDX1_CPT_NUM = 0 THEN 
							VAR_IDX1_CPT_NUM = NUMTOKEN
						ELSE
							VAR_IDX2_CPT_NUM = NUMTOKEN
						END IF
						INICIA_IDX_XT = SI_INICIA_IDX_XT 
					END IF
					IF VALTOKEN = "$_IDX_FIN" THEN
						IF VAR_IDX2_CPT_NUM <> 0 THEN 
							VAR_IDX2_CPT_NUM = 0
						ELSE
							VAR_IDX1_CPT_NUM = 0
						END IF
					END IF

 					TOKEN = NEXTTOKEN
	     			NEXT
				TPG_MAT_CAM_XT(TPG_TOT_REQ) = TPG_TOT_CAMP
			END IF
 !!! INICIO DE LECTURA DE DATOS PARA GENERAR PTAPC   "TP"
			IF VALTOKEN = "$_TP_INI" THEN
				INICIA_IDX_TP = NO_INICIA_IDX_TP 
				VAR_IDX1_CPT_NUM = 0 
				VAR_IDX2_CPT_NUM = 0 
 				TOKEN = NEXTTOKEN
				TPG_TOT_CAMP = 0
				WHILE VALTOKEN <> "$_TP_FIN"
					IF TOKEN <> TPGTOK THEN
						GLS_ERR = "STRING NO CORRESPONDE A UN " + GET_COM2 + " $_ " + GET_COM2 + " EXPECTED"
 						IDX_ERR_CPT_NUM = DSP_ERR
					END IF
					IF VALTOKEN = "$_FRM" THEN
 						TOKEN = NEXTTOKEN
						IF VALTOKEN <> "=" THEN
							GLS_ERR = "SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED"
 							IDX_ERR_CPT_NUM = DSP_ERR
						END IF
 						TOKEN = NEXTTOKEN
						TPG_TOT_CAMP = TPG_TOT_CAMP + 1
						TPG_MAT_TPFRM(TPG_TOT_REQ,TPG_TOT_CAMP) = STRTOKEN
						TPG_MAT_INIIDXTP(TPG_TOT_REQ,TPG_TOT_CAMP) = INICIA_IDX_TP
						INICIA_IDX_TP = NO_INICIA_IDX_TP 
					END IF
					IF VALTOKEN = "$_FMT" THEN
 						TOKEN = NEXTTOKEN
						IF VALTOKEN <> "=" THEN
							GLS_ERR = "SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED"
 							IDX_ERR_CPT_NUM = DSP_ERR
						END IF
 						TOKEN = NEXTTOKEN
						TPG_MAT_TPFMT(TPG_TOT_REQ,TPG_TOT_CAMP) = STRTOKEN
						TPG_MAT_NIV_IDTP(TPG_TOT_REQ,TPG_TOT_CAMP,1) = VAR_IDX1_CPT_NUM
						TPG_MAT_NIV_IDTP(TPG_TOT_REQ,TPG_TOT_CAMP,2) = VAR_IDX2_CPT_NUM
					END IF
					IF VALTOKEN = "$_IDX_INI" THEN
 						TOKEN = NEXTTOKEN
						IF VALTOKEN <> "=" THEN
							GLS_ERR = "SIGNO PARA ASIGNACION DE SISTEMA = EXPECTED"
 							IDX_ERR_CPT_NUM = DSP_ERR
						END IF
 						TOKEN = NEXTTOKEN
						IF VAR_IDX1_CPT_NUM = 0 THEN 
							VAR_IDX1_CPT_NUM = NUMTOKEN
						ELSE
							VAR_IDX2_CPT_NUM = NUMTOKEN
						END IF
						INICIA_IDX_TP = SI_INICIA_IDX_TP 
					END IF
					IF VALTOKEN = "$_IDX_FIN" THEN
						IF VAR_IDX2_CPT_NUM <> 0 THEN 
							VAR_IDX2_CPT_NUM = 0
						ELSE
							VAR_IDX1_CPT_NUM = 0
						END IF
					END IF
 					TOKEN = NEXTTOKEN
	     			NEXT
				TPG_MAT_CAM_TP(TPG_TOT_REQ) = TPG_TOT_CAMP
			END IF

			TPG_VEC_NUM_TRN(TPG_TOT_REQ) = TPG_TOT_TRN 
 			TOKEN = NEXTTOKEN
	        NEXT
	END IF
	TOKEN = NEXTTOKEN
        NEXT
    END DEF

      DEF STRING FNC_CARG_PAR
	PASO_CPT_NUM = PASO_CPT_NUM + 1

	BB_CPT_ALF = "X"
	NUM_TRN  = 0
 	ARCH_IDEN_CPT_ALF = "      *    SIS = " +  TPG_MAT_HST_ALF(1,CTE_IDX_SIS)
	FIO_ACCI = FIO_PI1_PUT(FIO_STAT,ARCH_IDEN_CPT_ALF)
 	ARCH_IDEN_CPT_ALF = "      *    OPC = C "
	FIO_ACCI = FIO_PI1_PUT(FIO_STAT,ARCH_IDEN_CPT_ALF)
 	ARCH_IDEN_CPT_ALF = "      *    SI OPC = C ==> CARGA DE PARAMETROS"  
	FIO_ACCI = FIO_PI1_PUT(FIO_STAT,ARCH_IDEN_CPT_ALF)
 	ARCH_IDEN_CPT_ALF = "      *    SI OPC = D ==> DESCARGA DE PARAMETROS"  
	FIO_ACCI = FIO_PI1_PUT(FIO_STAT,ARCH_IDEN_CPT_ALF)

		FOR JJ_CPT_NUM = 1 TO TPG_TOT_SIST_CPT_NUM

 !!! *REGTAB "TBLHST"
                        COD_CTAB_CPT_ALF = "HST         "
			COD_TABL_CPT_ALF = "TBL" + COD_CTAB_CPT_ALF
			EX_CTAB_CPT_ALF = "HST  "
			EX_TABL_CPT_ALF = "TBL" +  EX_CTAB_CPT_ALF

			REG_TAB_CPT_ALF = " " + COD_TABL_CPT_ALF + TIME_STP_CPT_ALF + " " + "S" + "    " + "GENTPG      " + COD_TABL_CPT_ALF 
			REG_TAB_CPT_ALF = REG_TAB_CPT_ALF +  EX_TABL_CPT_ALF + COD_CTAB_CPT_ALF + "00000" + "TABLA HST                                         " 
			REG_TAB_CPT_ALF = REG_TAB_CPT_ALF +  "                                                  "    + "      "
			IF FNC_SYSLEN(REG_TAB_CPT_ALF) <> 194 THEN
				BUFOUT = FNC_PRINT("ERROR EN CONSTRUCCION DE REGISTRO TAB ")
				BUFOUT = FNC_PRINT("LARGO " + FNC_SYSSTR(FNC_SYSLEN(REG_TAB_CPT_ALF)))
				BUFOUT = FNC_PRINT(" REGISTRO TAB : ")
				BUFOUT = FNC_PRINT(REG_TAB_CPT_ALF)
			ELSE
				BUFOUT = ESCR_PI1(MG_0,"REGTAB" + TPG_VEC_SIST(JJ_CPT_NUM))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,001,60))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,061,60))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,121,60))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,181,60))
			END IF

 !!! *REGTAB "HST   "
			COD_CTAB_CPT_ALF = "            "
			COD_TABL_CPT_ALF = "HST" + COD_CTAB_CPT_ALF
			EX_CTAB_CPT_ALF = "     "
			EX_TABL_CPT_ALF = "HST" +  EX_CTAB_CPT_ALF

			REG_TAB_CPT_ALF = " " + COD_TABL_CPT_ALF + TIME_STP_CPT_ALF + " " + "S" + "    " + "GENTPG      " + COD_TABL_CPT_ALF 
			REG_TAB_CPT_ALF = REG_TAB_CPT_ALF +  EX_TABL_CPT_ALF + COD_CTAB_CPT_ALF + "00000" + "TABLA HST                                         " 
			REG_TAB_CPT_ALF = REG_TAB_CPT_ALF +   "                                                  "    + "      "
			IF FNC_SYSLEN(REG_TAB_CPT_ALF) <> 194 THEN
				BUFOUT = FNC_PRINT("ERROR EN CONSTRUCCION DE REGISTRO TAB ")
				BUFOUT = FNC_PRINT("LARGO " + FNC_SYSSTR(FNC_SYSLEN(REG_TAB_CPT_ALF)))
				BUFOUT = FNC_PRINT(" REGISTRO TAB : ")
				BUFOUT = FNC_PRINT(REG_TAB_CPT_ALF)
			ELSE
				BUFOUT = ESCR_PI1(MG_0,"REGTAB" + TPG_VEC_SIST(JJ_CPT_NUM))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,001,60))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,061,60))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,121,60))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,181,60))
			END IF

 !!! *REGTAB "TBLDPO"
			IF NOT ( MTX_GLS_SOP = "MCP" AND ( MTX_GLS_AIU = "SDF" OR MTX_GLS_AIU = "ADM" ) ) THEN
  				    GO TO NO_GEN_TBLDPO
			END IF
                        COD_CTAB_CPT_ALF = "DPO         "
			COD_TABL_CPT_ALF = "TBL" + COD_CTAB_CPT_ALF
			EX_CTAB_CPT_ALF = "DPO  "
			EX_TABL_CPT_ALF = "TBL" +  EX_CTAB_CPT_ALF

			REG_TAB_CPT_ALF = " " + COD_TABL_CPT_ALF + TIME_STP_CPT_ALF + " " + "S" + "    " + "GENTPG      " + COD_TABL_CPT_ALF 
			REG_TAB_CPT_ALF = REG_TAB_CPT_ALF +  EX_TABL_CPT_ALF + COD_CTAB_CPT_ALF + "00000" + "TABLA DPO                                         " 
			REG_TAB_CPT_ALF = REG_TAB_CPT_ALF +  "                                                  "    + "      "
			IF FNC_SYSLEN(REG_TAB_CPT_ALF) <> 194 THEN
				BUFOUT = FNC_PRINT("ERROR EN CONSTRUCCION DE REGISTRO TAB ")
				BUFOUT = FNC_PRINT("LARGO " + FNC_SYSSTR(FNC_SYSLEN(REG_TAB_CPT_ALF)))
				BUFOUT = FNC_PRINT(" REGISTRO TAB : ")
				BUFOUT = FNC_PRINT(REG_TAB_CPT_ALF)
			ELSE
				BUFOUT = ESCR_PI1(MG_0,"REGTAB" + TPG_VEC_SIST(JJ_CPT_NUM))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,001,60))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,061,60))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,121,60))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,181,60))
			END IF

 !!! *REGTAB "DPO   "
			COD_CTAB_CPT_ALF = "            "
			COD_TABL_CPT_ALF = "DPO" + COD_CTAB_CPT_ALF
			EX_CTAB_CPT_ALF = "     "
			EX_TABL_CPT_ALF = "DPO" +  EX_CTAB_CPT_ALF

			REG_TAB_CPT_ALF = " " + COD_TABL_CPT_ALF + TIME_STP_CPT_ALF + " " + "S" + "    " + "GENTPG      " + COD_TABL_CPT_ALF 
			REG_TAB_CPT_ALF = REG_TAB_CPT_ALF +  EX_TABL_CPT_ALF + COD_CTAB_CPT_ALF + "00000" + "TABLA DPO                                         " 
			REG_TAB_CPT_ALF = REG_TAB_CPT_ALF +   "                                                  "    + "      "
			IF FNC_SYSLEN(REG_TAB_CPT_ALF) <> 194 THEN
				BUFOUT = FNC_PRINT("ERROR EN CONSTRUCCION DE REGISTRO TAB ")
				BUFOUT = FNC_PRINT("LARGO " + FNC_SYSSTR(FNC_SYSLEN(REG_TAB_CPT_ALF)))
				BUFOUT = FNC_PRINT(" REGISTRO TAB : ")
 				BUFOUT = FNC_PRINT(REG_TAB_CPT_ALF)
			ELSE
				BUFOUT = ESCR_PI1(MG_0,"REGTAB" + TPG_VEC_SIST(JJ_CPT_NUM))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,001,60))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,061,60))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,121,60))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,181,60))
			END IF
 NO_GEN_TBLDPO:

 !!! *REGTAB "TBLSRV   "
                        COD_CTAB_CPT_ALF = "SRV         "
			COD_TABL_CPT_ALF = "TBL" + COD_CTAB_CPT_ALF
			EX_CTAB_CPT_ALF = "SRV  "
			EX_TABL_CPT_ALF = "TBL" +  EX_CTAB_CPT_ALF

			REG_TAB_CPT_ALF = " " + COD_TABL_CPT_ALF + TIME_STP_CPT_ALF + " " + "S" + "    " + "GENTPG      " + COD_TABL_CPT_ALF 
			REG_TAB_CPT_ALF = REG_TAB_CPT_ALF +  EX_TABL_CPT_ALF + COD_CTAB_CPT_ALF + "00000" + "TABLA SRV                                         " 
			REG_TAB_CPT_ALF = REG_TAB_CPT_ALF +  "                                                  "    + "      "
			IF FNC_SYSLEN(REG_TAB_CPT_ALF) <> 194 THEN
				BUFOUT = FNC_PRINT( "ERROR EN CONSTRUCCION DE REGISTRO TAB ")
				BUFOUT = FNC_PRINT( "LARGO " + FNC_SYSSTR(FNC_SYSLEN(REG_TAB_CPT_ALF)))
				BUFOUT = FNC_PRINT( " REGISTRO TAB : ")
				BUFOUT = FNC_PRINT( REG_TAB_CPT_ALF)
			ELSE
				BUFOUT = ESCR_PI1(MG_0,"REGTAB" + TPG_VEC_SIST(JJ_CPT_NUM) )
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,001,60))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,061,60))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,121,60))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,181,60))
			END IF

 !!! *REGTAB "SRV   "
			COD_CTAB_CPT_ALF = "            "
			COD_TABL_CPT_ALF = "SRV" + COD_CTAB_CPT_ALF
			EX_CTAB_CPT_ALF = "     "
			EX_TABL_CPT_ALF = "SRV" +  EX_CTAB_CPT_ALF

			REG_TAB_CPT_ALF = " " + COD_TABL_CPT_ALF + TIME_STP_CPT_ALF + " " + "S" + "    " + "GENTPG      " + COD_TABL_CPT_ALF 
			REG_TAB_CPT_ALF = REG_TAB_CPT_ALF +  EX_TABL_CPT_ALF + COD_CTAB_CPT_ALF + "00000" + "TABLA SRV                                         " 
			REG_TAB_CPT_ALF = REG_TAB_CPT_ALF + "                                                  "    + "      "
			IF FNC_SYSLEN(REG_TAB_CPT_ALF) <> 194 THEN
				BUFOUT = FNC_PRINT( "ERROR EN CONSTRUCCION DE REGISTRO TAB ")
				BUFOUT = FNC_PRINT( "LARGO " + FNC_SYSSTR(FNC_SYSLEN(REG_TAB_CPT_ALF)))
				BUFOUT = FNC_PRINT( " REGISTRO TAB : ")
				BUFOUT = FNC_PRINT( REG_TAB_CPT_ALF)
			ELSE
				BUFOUT = ESCR_PI1(MG_0,"REGTAB" + TPG_VEC_SIST(JJ_CPT_NUM) )
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,001,60))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,061,60))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,121,60))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,181,60))
			END IF

		NEXT JJ_CPT_NUM
	
	FOR II_CPT_NUM = 1 TO TPG_TOT_HST

		FOR PP_CPT_NUM = 1 TO 10
			TAB_DO_DESC(PP_CPT_NUM) = ""
			TAB_GLS_DESC(PP_CPT_NUM) = ""
		NEXT PP_CPT_NUM

		XX_CPT_NUM = 0
		YY_CPT_NUM = 0
		COR_HST_CPT_NUM = 0
 NXT_TAB_HST :

		IF (TPG_MAT_HST_NUM(II_CPT_NUM,CTE_IDX_TCF) - XX_CPT_NUM) < 50 THEN
			ZZ_CPT_NUM = TPG_MAT_HST_NUM(II_CPT_NUM,CTE_IDX_TCF)  - XX_CPT_NUM
		ELSE
			ZZ_CPT_NUM = 50
		END IF

		COR_HST_CPT_NUM = COR_HST_CPT_NUM + 1
		FOR KK_CPT_NUM = 1 TO ZZ_CPT_NUM
			YY_CPT_NUM = YY_CPT_NUM + 1
			AA_CPT_ALF = FNC_SYSSTR(TPG_MAT_LRG(II_CPT_NUM,YY_CPT_NUM))
			IF FNC_SYSLEN(AA_CPT_ALF) < 2 THEN
				AA_CPT_ALF = "0" + AA_CPT_ALF
			END IF
			TAB_GLS_DESC(COR_HST_CPT_NUM) = TAB_GLS_DESC(COR_HST_CPT_NUM) + AA_CPT_ALF
		NEXT KK_CPT_NUM
 		IF YY_CPT_NUM < TPG_MAT_HST_NUM(II_CPT_NUM,CTE_IDX_TCF)  THEN
			XX_CPT_NUM = XX_CPT_NUM + 50
 			GO TO NXT_TAB_HST
		ELSE
			IF ZZ_CPT_NUM < 50 THEN
			 ZZ_CPT_NUM = 50 - ZZ_CPT_NUM
				FOR KK_CPT_NUM = 1 TO ZZ_CPT_NUM
					TAB_GLS_DESC(COR_HST_CPT_NUM)  = TAB_GLS_DESC(COR_HST_CPT_NUM)  + "  "
				NEXT KK_CPT_NUM
			END IF
		END IF
		FOR JJ_CPT_NUM = 1 TO COR_HST_CPT_NUM
			SGTE_CPT_ALF = FNC_SYSSTR(JJ_CPT_NUM) 
			IF FNC_SYSLEN(SGTE_CPT_ALF) < 2 THEN
				SGTE_CPT_ALF = "0" + SGTE_CPT_ALF
			END IF
			COD_CTAB_CPT_ALF = TPG_MAT_HST_ALF(II_CPT_NUM,CTE_IDX_SIS) + "F" + TPG_MAT_HST_ALF(II_CPT_NUM,CTE_IDX_NOM) 
			COD_CTAB_CPT_ALF = COD_CTAB_CPT_ALF + SGTE_CPT_ALF + "   "
			COD_TABL_CPT_ALF = "HST" + COD_CTAB_CPT_ALF
			EX_CTAB_CPT_ALF = "F" + TPG_MAT_HST_ALF(II_CPT_NUM,CTE_IDX_NOM) + " "
			EX_TABL_CPT_ALF = "HST" +  EX_CTAB_CPT_ALF

			REG_TAB_CPT_ALF = " " + COD_TABL_CPT_ALF + TIME_STP_CPT_ALF + " " + "S" + "    " + "GENTPG      " + COD_TABL_CPT_ALF 
			REG_TAB_CPT_ALF = REG_TAB_CPT_ALF +  EX_TABL_CPT_ALF + COD_CTAB_CPT_ALF + "00000" + TAB_GLS_DESC(JJ_CPT_NUM) + "      "
			IF FNC_SYSLEN(REG_TAB_CPT_ALF) <> 194 THEN
				BUFOUT = FNC_PRINT( "ERROR EN CONSTRUCCION DE REGISTRO TAB ")
				BUFOUT = FNC_PRINT( "LARGO " + FNC_SYSSTR(FNC_SYSLEN(REG_TAB_CPT_ALF)))
				BUFOUT = FNC_PRINT( " REGISTRO TAB : ")
				BUFOUT = FNC_PRINT( REG_TAB_CPT_ALF)
			ELSE
				BUFOUT = ESCR_PI1(MG_0,"REGTAB" + TPG_MAT_HST_ALF(II_CPT_NUM,CTE_IDX_SIS))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,001,60))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,061,60))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,121,60))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,181,60))
			END IF
		NEXT JJ_CPT_NUM
	NEXT II_CPT_NUM

	ES_INDEX$ = "NO"
        NUM_DE_OCC% = 0 
	POS_PRIM_IDX% = 0 
	POS_ULTM_IDX% = 0 

	FOR II_CPT_NUM = 1 TO TPG_TOT_HST

		FOR PP_CPT_NUM = 1 TO 10
			TAB_DO_DESC(PP_CPT_NUM) = ""
		NEXT PP_CPT_NUM

		KK_CPT_NUM = 0
		XX_CPT_NUM = 0
		YY_CPT_NUM = 0
		COR_HST_CPT_NUM = 1
 		ES_INDEX$ = "NO" 
                POS_PRIM_IDX% = 0
                POS_ULTM_IDX% = 0
		NUM_DE_OCC% = 0 
	        CANT_DE_IDX% = 0 

		FOR YY_CPT_NUM = 1 TO 180
		        IF TPG_MAT_TOTOCCFLDHST(II_CPT_NUM,YY_CPT_NUM) > 1 THEN
				IF NUM_DE_OCC% = 0 THEN
					ES_INDEX$ = "SI"
					NUM_DE_OCC% = TPG_MAT_TOTOCCFLDHST(II_CPT_NUM,YY_CPT_NUM)
					POS_PRIM_IDX% = YY_CPT_NUM
				END IF
                        ELSE
				IF ES_INDEX$ = "SI" THEN
					POS_ULTM_IDX% = YY_CPT_NUM
				END IF
                        END IF
			CONTADOR% = 0
      		        IF ES_INDEX$ = "SI" AND POS_ULTM_IDX% > 0 THEN
	      		        ES_INDEX$ = "NO" 
	                        CANT_DE_IDX% = ((POS_ULTM_IDX% - POS_PRIM_IDX%) / NUM_DE_OCC%)
			        FOR INDICE_I% = 2 TO NUM_DE_OCC%
				        FOR INDICE_J% = POS_PRIM_IDX% TO (POS_PRIM_IDX% + CANT_DE_IDX% - 1)
						CONTADOR% = CONTADOR% + 1
			     		        IF TPG_MAT_IDT_DO(II_CPT_NUM,INDICE_J%) = "DO" THEN
							DO_CPT_ALF$ = FNC_SYSSTR(TPG_MAT_LRG(II_CPT_NUM,INDICE_J%))
							DO_CPT_ALF$ = FNC_SYSSTR((INDICE_J%) +  ((INDICE_I% - 1) * CANT_DE_IDX%))
							IF FNC_SYSLEN(DO_CPT_ALF$) = 1 THEN
								DO_CPT_ALF$ = "00" + DO_CPT_ALF$
							END IF
							IF FNC_SYSLEN(DO_CPT_ALF$) = 2 THEN
								DO_CPT_ALF$ = "0" + DO_CPT_ALF$
							END IF
							KK_CPT_NUM = KK_CPT_NUM + 1
 !!!                                                        PRINT "EN CICLO  LLEVA CANIDAD DE CAMPOS DPO : " ; KK_CPT_NUM
	                                                IF KK_CPT_NUM > 50 THEN
 !!!								PRINT " EN CICLO TUVO QUE AUMENTER CORELATIVO DE DPO"
								COR_HST_CPT_NUM = COR_HST_CPT_NUM + 1
								KK_CPT_NUM = 0
							END IF
							TAB_DO_DESC(COR_HST_CPT_NUM) = TAB_DO_DESC(COR_HST_CPT_NUM) + DO_CPT_ALF$
							DO_CPT_ALF$ = ""
						END IF
 !!!						YY_CPT_NUM = YY_CPT_NUM + 1
				        NEXT INDICE_J%
			        NEXT INDICE_I%
			END IF

     		        IF TPG_MAT_IDT_DO(II_CPT_NUM,YY_CPT_NUM) = "DO" THEN
				DO_CPT_ALF$ = FNC_SYSSTR(YY_CPT_NUM)
				IF FNC_SYSLEN(DO_CPT_ALF$) = 1 THEN
					DO_CPT_ALF$ = "00" + DO_CPT_ALF$
				END IF
				IF FNC_SYSLEN(DO_CPT_ALF$) = 2 THEN
					DO_CPT_ALF$ = "0" + DO_CPT_ALF$
				END IF
				KK_CPT_NUM = KK_CPT_NUM + 1
 !!!				PRINT "ENPROCESO NORMAL  LLEVA CANIDAD DE CAMPOS DPO : " ; KK_CPT_NUM
				IF KK_CPT_NUM > 50 THEN
 !!!					PRINT " EN PROCESO TUVO QUE AUMENTER CORELATIVO DE DPO"
					COR_HST_CPT_NUM = COR_HST_CPT_NUM + 1
					KK_CPT_NUM = 0
				END IF
				TAB_DO_DESC(COR_HST_CPT_NUM) = TAB_DO_DESC(COR_HST_CPT_NUM) + DO_CPT_ALF$
				DO_CPT_ALF$ = ""
			END IF
		NEXT YY_CPT_NUM
		IF KK_CPT_NUM < 50 THEN
 !!!                        PRINT " VA A RELLENAR CON BLANCOS DOP NUMERO : " ; COR_HST_CPT_NUM
			KK_CPT_NUM = 50 - KK_CPT_NUM
			FOR PP% = 1 TO KK_CPT_NUM
				TAB_DO_DESC(COR_HST_CPT_NUM)  = TAB_DO_DESC(COR_HST_CPT_NUM)  + "  "
			NEXT PP%
		END IF

		IF NOT ( MTX_GLS_SOP = "MCP" AND ( MTX_GLS_AIU = "SDF" OR MTX_GLS_AIU = "ADM" ) ) THEN
			GO TO NO_GEN_REG_DPO
		END IF
 !!!                PRINT " VA A ESCRIBIR REGISTRO DPO  CANTIDAD : " ; COR_HST_CPT_NUM
		FOR JJ_CPT_NUM = 1 TO COR_HST_CPT_NUM
			SGTE_CPT_ALF = FNC_SYSSTR(JJ_CPT_NUM) 
			IF FNC_SYSLEN(SGTE_CPT_ALF) < 2 THEN
				SGTE_CPT_ALF = "0" + SGTE_CPT_ALF
			END IF
			COD_CTAB_CPT_ALF = TPG_MAT_HST_ALF(II_CPT_NUM,CTE_IDX_SIS) + "F" + TPG_MAT_HST_ALF(II_CPT_NUM,CTE_IDX_NOM) 
			COD_CTAB_CPT_ALF = COD_CTAB_CPT_ALF + SGTE_CPT_ALF + "   "
			COD_TABL_CPT_ALF = "DPO" + COD_CTAB_CPT_ALF
			EX_CTAB_CPT_ALF = "F" + TPG_MAT_HST_ALF(II_CPT_NUM,CTE_IDX_NOM) + " "
			EX_TABL_CPT_ALF = "DPO" +  EX_CTAB_CPT_ALF

			REG_TAB_CPT_ALF = " " + COD_TABL_CPT_ALF + TIME_STP_CPT_ALF + " " + "S" + "    " + "GENTPG      " + COD_TABL_CPT_ALF 
			REG_TAB_CPT_ALF = REG_TAB_CPT_ALF +  EX_TABL_CPT_ALF + COD_CTAB_CPT_ALF + "00000" + TAB_DO_DESC(JJ_CPT_NUM) + "      "
			BUFOUT = ESCR_PI1(MG_0,"REGTAB" + TPG_MAT_HST_ALF(II_CPT_NUM,CTE_IDX_SIS))
			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,001,60))
			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,061,60))
			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,121,60))
			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,181,60))
		NEXT JJ_CPT_NUM
 NO_GEN_REG_DPO:

	NEXT II_CPT_NUM 


 !!! *REGTAB "SRV"FRM-CORR
	FOR II_CPT_NUM = 1 TO TPG_TOT_HST

	FOR LL_CPT_NUM = 1 TO TPG_MAT_HST_NUM(II_CPT_NUM,CTE_IDX_TSF)

		FOR PP_CPT_NUM = 1 TO 10
			TAB_GLS_DESC(PP_CPT_NUM) = ""
		NEXT PP_CPT_NUM

		XX_CPT_NUM = 0
		YY_CPT_NUM = 0
		COR_HST_CPT_NUM = 0
 NXT_TAB_SRV :
		IF (TPG_MAT_NCP_SRV(II_CPT_NUM,LL_CPT_NUM) - XX_CPT_NUM) < 33 THEN
			ZZ_CPT_NUM = TPG_MAT_NCP_SRV(II_CPT_NUM,LL_CPT_NUM) - XX_CPT_NUM
		ELSE
			ZZ_CPT_NUM = 33
		END IF
		
		COR_HST_CPT_NUM = COR_HST_CPT_NUM + 1

		 FOR KK_CPT_NUM = 1 TO ZZ_CPT_NUM
			YY_CPT_NUM = YY_CPT_NUM + 1
			AA_CPT_ALF = FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(II_CPT_NUM,LL_CPT_NUM,YY_CPT_NUM),128)
			CONT_SRV_CPT_NUM = 0

			FOR SRV_ACT_CPT_NUM = 1 TO YY_CPT_NUM
				IF AA_CPT_ALF = FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(II_CPT_NUM,LL_CPT_NUM,SRV_ACT_CPT_NUM),128) THEN
					CONT_SRV_CPT_NUM = CONT_SRV_CPT_NUM + 1
				END IF
			NEXT SRV_ACT_CPT_NUM
			
 			FUNC_CPT_NUM = TPG_FNC_BCS

			AA_CPT_ALF = FNC_SYSSTR(IDX_CPT_NUM)
			IF FNC_SYSLEN(AA_CPT_ALF) = 1 THEN
				AA_CPT_ALF = "00" + AA_CPT_ALF
			ELSE
			IF FNC_SYSLEN(AA_CPT_ALF) = 2 THEN
				AA_CPT_ALF = "0" + AA_CPT_ALF
			END IF
			END IF
			TAB_GLS_DESC(COR_HST_CPT_NUM) = TAB_GLS_DESC(COR_HST_CPT_NUM) + AA_CPT_ALF
		NEXT KK_CPT_NUM

		LZ_CPT_NUM = FNC_SYSLEN(TAB_GLS_DESC(COR_HST_CPT_NUM))
		IF LZ_CPT_NUM < 100 THEN
			LZ_CPT_NUM = 100 - LZ_CPT_NUM
			FOR KK_CPT_NUM = 1 TO LZ_CPT_NUM
				TAB_GLS_DESC(COR_HST_CPT_NUM)  = TAB_GLS_DESC(COR_HST_CPT_NUM)  + " "
			NEXT KK_CPT_NUM
		END IF

		IF YY_CPT_NUM < TPG_MAT_NCP_SRV(II_CPT_NUM,LL_CPT_NUM) THEN
			XX_CPT_NUM = XX_CPT_NUM + 33
			GO TO NXT_TAB_SRV
		END IF

		FOR JJ_CPT_NUM = 1 TO COR_HST_CPT_NUM
			SGTE_CPT_ALF = FNC_SYSSTR(JJ_CPT_NUM) 
			IF FNC_SYSLEN(SGTE_CPT_ALF) < 2 THEN
				SGTE_CPT_ALF = "0" + SGTE_CPT_ALF
			END IF
			COD_CTAB_CPT_ALF = TPG_MAT_HST_ALF(II_CPT_NUM,CTE_IDX_SIS) + "F" + TPG_MAT_HST_ALF(II_CPT_NUM,CTE_IDX_NOM) 
			COD_CTAB_CPT_ALF = COD_CTAB_CPT_ALF +  TPG_MAT_SRV_ALF(II_CPT_NUM,LL_CPT_NUM) + SGTE_CPT_ALF
			COD_TABL_CPT_ALF = "SRV" + COD_CTAB_CPT_ALF
			EX_CTAB_CPT_ALF = "F" + TPG_MAT_HST_ALF(II_CPT_NUM,CTE_IDX_NOM) + " "
			EX_TABL_CPT_ALF = "SRV" +  EX_CTAB_CPT_ALF
				
			REG_TAB_CPT_ALF = " " + COD_TABL_CPT_ALF + TIME_STP_CPT_ALF + " " + "S" + "    " + "GENTPG      " + COD_TABL_CPT_ALF 
			REG_TAB_CPT_ALF = REG_TAB_CPT_ALF +  EX_TABL_CPT_ALF + COD_CTAB_CPT_ALF + "00000" + TAB_GLS_DESC(JJ_CPT_NUM) + "      "
			IF FNC_SYSLEN(REG_TAB_CPT_ALF) <> 194 THEN
				BUFOUT = FNC_PRINT( "ERROR EN CONSTRUCCION DE REGISTRO TAB ")
				BUFOUT = FNC_PRINT( "LARGO " + FNC_SYSSTR(FNC_SYSLEN(REG_TAB_CPT_ALF)))
				BUFOUT = FNC_PRINT( " REGISTRO TAB : ")
				BUFOUT = FNC_PRINT( REG_TAB_CPT_ALF)
			END IF

			BUFOUT = ESCR_PI1(MG_0,"REGTAB" + TPG_MAT_HST_ALF(II_CPT_NUM,CTE_IDX_SIS))
			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,001,60))
			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,061,60))
			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,121,60))
			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,181,60))

		NEXT JJ_CPT_NUM
	NEXT LL_CPT_NUM 
	NEXT II_CPT_NUM 
 !!! *REGTAB "MSG"&&FRM-CORR
	FOR II_CPT_NUM = 1 TO TPG_TOT_HST
	FOR JJ_CPT_NUM = 1 TO TPG_MAT_HST_NUM(II_CPT_NUM,CTE_IDX_TCF)
		IF TPG_MAT_IDENFLDHST(II_CPT_NUM,JJ_CPT_NUM) <> "" THEN
		TAB_GLS_DESC_CPT_ALF = TPG_MAT_IDENFLDHST(II_CPT_NUM,JJ_CPT_NUM)

		IF FNC_SYSLEN(TAB_GLS_DESC_CPT_ALF) > 20 THEN
				BUFOUT = FNC_PRINT("ERROR EN CONSTRUCCION DE MENSAJE DEL TIPO &&")
				BUFOUT = FNC_PRINT("PARA CAMPO " + TPG_MAT_NAMEFLDHST(II_CPT_NUM,JJ_CPT_NUM) + " NRO " +FNC_SYSSTR(JJ_CPT_NUM))
				BUFOUT = FNC_PRINT(" DE HST  "+ FNC_SYSSTR(II_CPT_NUM))
				BUFOUT = FNC_PRINT(" PANTALLA  " + TPG_MAT_HST_ALF(TPG_TOT_HST,CTE_IDX_NOM))
				BUFOUT = FNC_PRINT("MENSAJE TRUCADO")
				BUFOUT = FNC_PRINT( TAB_GLS_DESC_CPT_ALF)
				TAB_GLS_DESC_CPT_ALF = FNC_SYSLEFT(TAB_GLS_DESC_CPT_ALF,40)
		END IF

		LL_CPT_NUM = 100 - FNC_SYSLEN(TAB_GLS_DESC_CPT_ALF) 
		FOR KK_CPT_NUM = 1 TO LL_CPT_NUM
			TAB_GLS_DESC_CPT_ALF = TAB_GLS_DESC_CPT_ALF + " "
		NEXT KK_CPT_NUM
		CORR_FLD_CPT_ALF = FNC_SYSSTR(JJ_CPT_NUM)
		LL_CPT_NUM = 4 - FNC_SYSLEN(CORR_FLD_CPT_ALF) 
		FOR KK_CPT_NUM = 1 TO LL_CPT_NUM
			CORR_FLD_CPT_ALF = "0" + CORR_FLD_CPT_ALF
		NEXT KK_CPT_NUM

		COD_CTAB_CPT_ALF = "&&" + TPG_MAT_HST_ALF(II_CPT_NUM,CTE_IDX_NOM) + CORR_FLD_CPT_ALF + "   "

		COD_TABL_CPT_ALF = "MSG" + COD_CTAB_CPT_ALF

		EX_CTAB_CPT_ALF = "&" + CORR_FLD_CPT_ALF
		EX_TABL_CPT_ALF = "MSG" +  EX_CTAB_CPT_ALF

		REG_TAB_CPT_ALF = " " + COD_TABL_CPT_ALF + TIME_STP_CPT_ALF + " " + "S" + "    " + "GENTPG      " + COD_TABL_CPT_ALF 
		REG_TAB_CPT_ALF = REG_TAB_CPT_ALF +  EX_TABL_CPT_ALF + COD_CTAB_CPT_ALF + EX_CTAB_CPT_ALF + TAB_GLS_DESC_CPT_ALF + "      "

		IF FNC_SYSLEN(REG_TAB_CPT_ALF) <> 194 THEN
				BUFOUT = FNC_PRINT("ERROR EN CONSTRUCCION DE REGISTRO TAB ")
				BUFOUT = FNC_PRINT( "LARGO " + FNC_SYSSTR(FNC_SYSLEN(REG_TAB_CPT_ALF)))
				BUFOUT = FNC_PRINT( " REGISTRO TAB : ")
				BUFOUT = FNC_PRINT( REG_TAB_CPT_ALF)
		ELSE
 !!!			IF CORR_ANT$ <> CORR_FLD_CPT_ALF THEN
				BUFOUT = ESCR_PI1(MG_0,"REGTAB" + TPG_MAT_HST_ALF(II_CPT_NUM,CTE_IDX_SIS))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,001,60))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,061,60))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,121,60))
				BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REG_TAB_CPT_ALF,181,60))
			END IF
		END IF
 !!!		CORR_ANT$ = CORR_FLD_CPT_ALF
 !!!		END IF

	NEXT JJ_CPT_NUM
	NEXT II_CPT_NUM 

	BUFOUT = PRT_ESTAD

	PASO_CPT_NUM = PASO_CPT_NUM + 1



	BB_CPT_ALF = "X"
	NUM_TRN  = 0
	FOR II_CPT_NUM = 1 TO TPG_TOT_REQ 
		FOR JJ_CPT_NUM = 1 TO TPG_VEC_NUM_TRN(II_CPT_NUM)
			NUM_TRN = NUM_TRN + 1
			IF NUM_TRN = 100 THEN
				NUM_TRN = 1
				BB_CPT_ALF = "Y"
			END IF
			TPG_GLS_SIS_CPT_ALF  = ""

			TPG_GLS_FRQ_CPT_ALF = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_INS),128)

			TPG_GLS_FRM_CPT_ALF = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_FRM),128)

			FOR NN_CPT_NUM = 1 TO TPG_TOT_HST
				IF TPG_GLS_FRM_CPT_ALF = TPG_MAT_HST_ALF(NN_CPT_NUM,CTE_IDX_NOM) THEN 
					TPG_GLS_SIS_CPT_ALF = TPG_MAT_HST_ALF(NN_CPT_NUM,CTE_IDX_SIS)
					TPG_GLS_SIM_CPT_ALF = TPG_MAT_HST_ALF(NN_CPT_NUM,CTE_IDX_SIM)
					NN_CPT_NUM = TPG_TOT_HST + 1
				END IF
			NEXT NN_CPT_NUM

 !!!			IF FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM, JJ_CPT_NUM,CTE_TRN_MNU),128) = "" THEN
			MNU_COD_NEMO_CPT_ALF = TPG_GLS_SIM_CPT_ALF  + FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM, JJ_CPT_NUM,CTE_TRN_FRM),128) 
			MNU_COD_NEMO_CPT_ALF = MNU_COD_NEMO_CPT_ALF + FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM, JJ_CPT_NUM,CTE_TRN_CMN),128) 
			MNU_COD_NEMO_CPT_ALF = MNU_COD_NEMO_CPT_ALF + FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM, JJ_CPT_NUM,CTE_TRN_INM),128)
 !!!			ELSE
 !!!			MNU_COD_NEMO_CPT_ALF = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM, JJ_CPT_NUM,CTE_TRN_MNU),128) 
 !!!			END IF

			AA_CPT_ALF = FNC_SYSSTR(NUM_TRN)

			IF FNC_SYSLEN(AA_CPT_ALF) = 1 THEN
				AA_CPT_ALF = "0" + AA_CPT_ALF
			END IF

			MNU_COD_OPCI_CPT_ALF = BB_CPT_ALF + AA_CPT_ALF
			MNU_COD_IMEN_CPT_ALF = MNU_COD_OPCI_CPT_ALF  + "   "
			MNU_COD_TFUN_CPT_ALF = "PTC"
			MNU_GLS_FMEN_CPT_ALF = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_CMT),128)
			IF FNC_SYSLEN(MNU_GLS_FMEN_CPT_ALF) < 30 THEN
				LL_CPT_NUM = 30 - FNC_SYSLEN(MNU_GLS_FMEN_CPT_ALF) 
				FOR AA_CPT_NUM = 1  TO LL_CPT_NUM
					MNU_GLS_FMEN_CPT_ALF = MNU_GLS_FMEN_CPT_ALF + " "
				NEXT AA_CPT_NUM
			ELSE
				IF FNC_SYSLEN(MNU_GLS_FMEN_CPT_ALF) > 30 THEN
					MNU_GLS_FMEN_CPT_ALF = FNC_SYSRIGHT(MNU_GLS_FMEN_CPT_ALF,30)
				END IF
			END IF
			MNU_GLS_PROG_CPT_ALF =  FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_PGM),128)
			IF FNC_SYSLEN(MNU_GLS_PROG_CPT_ALF) < 12 THEN
				LL_CPT_NUM = 12 - FNC_SYSLEN(MNU_GLS_PROG_CPT_ALF) 
				FOR AA_CPT_NUM = 1  TO LL_CPT_NUM
					MNU_GLS_PROG_CPT_ALF = MNU_GLS_PROG_CPT_ALF + " "
				NEXT AA_CPT_NUM
			ELSE
				IF FNC_SYSLEN(MNU_GLS_PROG_CPT_ALF) > 12 THEN
					MNU_GLS_PROG_CPT_ALF = FNC_SYSRIGHT(MNU_GLS_PROG_CPT_ALF,12)
				END IF
			END IF
			IF FNC_SYSLEN(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_TRX)) = 4 THEN
				MNU_GLS_TRAN_CPT_ALF = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_TRX),128)
			ELSE
				MNU_GLS_TRAN_CPT_ALF = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_TRX),128)
			END IF
			MNU_COD_CMND_CPT_ALF = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_CMN),128)
			MNU_GLS_LFRM_CPT_ALF = TPG_GLS_SIS_CPT_ALF + "A"+ FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_FRM),128)
			MNU_GLS_NFRM_CPT_ALF = TPG_GLS_SIS_CPT_ALF + "F"+ FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_FRM),128)
			MNU_GLS_FPRO_CPT_ALF = MNU_GLS_FMEN_CPT_ALF
			MNU_NUM_FILA_CPT_ALF = "00"
			MNU_NUM_COLU_CPT_ALF = "00"
			MNU_COD_FRET_CPT_ALF = "SIS         "
			MNU_COD_INST_CPT_ALF = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_INS),128)
			MNU_COD_TCTL_CPT_ALF = "LINK"
			MNU_COD_TINF_CPT_ALF = "OT "
			BUFOUT = ESCR_PI1(MG_0,"REGMNU" + TPG_GLS_SIS_CPT_ALF)

			REGMNU_CPT_ALF = " "  + MNU_COD_NEMO_CPT_ALF  + MNU_COD_OPCI_CPT_ALF  + MNU_COD_IMEN_CPT_ALF  + MNU_COD_TFUN_CPT_ALF 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF  + MNU_GLS_FMEN_CPT_ALF  + "            "  + MNU_GLS_PROG_CPT_ALF 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF  + "                             " + MNU_GLS_TRAN_CPT_ALF  + MNU_COD_CMND_CPT_ALF 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF  + "       "  + "                        " + MNU_GLS_LFRM_CPT_ALF  + MNU_GLS_NFRM_CPT_ALF 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF  + MNU_GLS_FPRO_CPT_ALF  + MNU_NUM_FILA_CPT_ALF  + MNU_NUM_COLU_CPT_ALF  + MNU_COD_FRET_CPT_ALF  + " " 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF  + "   "  + " "  + MNU_COD_INST_CPT_ALF  + " "  + "   "  + "   "  + MNU_COD_TCTL_CPT_ALF 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF  + "   " + "            " + "   " + "            " + " " + "       " 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF  + "       " + "        " + "            " + MNU_COD_TINF_CPT_ALF + "   " + " " 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF  + " " + "       " + "       " + " " + "       " + "       " + " " 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF  + "                                                                                 " 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF  + "                                                                                 "
					
			IF ((FNC_SYSLEN(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_TRX)) = 4 AND &
			     FNC_SYSLEN(REGMNU_CPT_ALF) <> 490) OR &
			    (FNC_SYSLEN(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_TRX)) = 6 AND &
			     FNC_SYSLEN(REGMNU_CPT_ALF) <> 492)) THEN

					BUFOUT = FNC_PRINT("MNU_COD_NEMO(12)  #" + MNU_COD_NEMO_CPT_ALF  + "#") 
					BUFOUT = FNC_PRINT("MNU_COD_OPCI(03)  #" + MNU_COD_OPCI_CPT_ALF  + "#") 
					BUFOUT = FNC_PRINT("MNU_COD_IMEN_CPT_ALF(06)  #" + MNU_COD_IMEN_CPT_ALF  + "#") 
					BUFOUT = FNC_PRINT("MNU_COD_TFUN_CPT_ALF(03)  #" + MNU_COD_TFUN_CPT_ALF  + "#") 
					BUFOUT = FNC_PRINT("MNU_GLS_FMEN_CPT_ALF(30)  #" + MNU_GLS_FMEN_CPT_ALF  + "#") 
					BUFOUT = FNC_PRINT("MNU_GLS_PROG_CPT_ALF(12)  #" + MNU_GLS_PROG_CPT_ALF  + "#") 
					BUFOUT = FNC_PRINT("MNU_GLS_TRAN_CPT_ALF(04)  #" + MNU_GLS_TRAN_CPT_ALF  + "#") 
					BUFOUT = FNC_PRINT("MNU_COD_CMND_CPT_ALF(03)  #" + MNU_COD_CMND_CPT_ALF  + "#") 
					BUFOUT = FNC_PRINT("MNU_GLS_LFRM_CPT_ALF(07)  #" + MNU_GLS_LFRM_CPT_ALF  + "#") 
					BUFOUT = FNC_PRINT("MNU_GLS_NFRM_CPT_ALF(07)  #" + MNU_GLS_NFRM_CPT_ALF  + "#") 
					BUFOUT = FNC_PRINT("MNU_GLS_FPRO_CPT_ALF(30)  #" + MNU_GLS_FPRO_CPT_ALF  + "#") 
					BUFOUT = FNC_PRINT("MNU_NUM_FILA_CPT_ALF(02)  #" + MNU_NUM_FILA_CPT_ALF  + "#") 
					BUFOUT = FNC_PRINT("MNU_NUM_COLU_CPT_ALF(02)  #" + MNU_NUM_COLU_CPT_ALF  + "#") 
					BUFOUT = FNC_PRINT("MNU_COD_FRET_CPT_ALF(12)  #" + MNU_COD_FRET_CPT_ALF  + "#") 
					BUFOUT = FNC_PRINT("MNU_COD_INST_CPT_ALF(03)  #" + MNU_COD_INST_CPT_ALF  + "#") 
					BUFOUT = FNC_PRINT("MNU_COD_TCTL_CPT_ALF(04)  #" + MNU_COD_TCTL_CPT_ALF  + "#") 
					BUFOUT = FNC_PRINT("MNU_COD_TINF_CPT_ALF(03)  #" + MNU_COD_TINF_CPT_ALF  + "#") 
					REGMNU_CPT_ALF = " "  +MNU_COD_NEMO_CPT_ALF  + MNU_COD_OPCI_CPT_ALF  + MNU_COD_IMEN_CPT_ALF  + MNU_COD_TFUN_CPT_ALF 
					REGMNU_CPT_ALF = REGMNU_CPT_ALF  + MNU_GLS_FMEN_CPT_ALF  + "            "  + MNU_GLS_PROG_CPT_ALF 
					REGMNU_CPT_ALF = REGMNU_CPT_ALF  + "                             " + MNU_GLS_TRAN_CPT_ALF  + MNU_COD_CMND_CPT_ALF 
					REGMNU_CPT_ALF = REGMNU_CPT_ALF  + "       "  + "                        " + MNU_GLS_LFRM_CPT_ALF  + MNU_GLS_NFRM_CPT_ALF 
					REGMNU_CPT_ALF = REGMNU_CPT_ALF  + MNU_GLS_FPRO_CPT_ALF  + MNU_NUM_FILA_CPT_ALF  + MNU_NUM_COLU_CPT_ALF  + MNU_COD_FRET_CPT_ALF  + " " 
					REGMNU_CPT_ALF = REGMNU_CPT_ALF  + "   "  + " "  + MNU_COD_INST_CPT_ALF  + " "  + "   "  + "   "  + MNU_COD_TCTL_CPT_ALF 
					REGMNU_CPT_ALF = REGMNU_CPT_ALF  + "   " + "            " + "   " + "            " + " " + "       " 
					REGMNU_CPT_ALF = REGMNU_CPT_ALF  + "       " + "        " + "            " + MNU_COD_TINF_CPT_ALF + "   " + " " 
					REGMNU_CPT_ALF = REGMNU_CPT_ALF  + " " + "       " + "       " + " " + "       " + "       " + " " 
					REGMNU_CPT_ALF = REGMNU_CPT_ALF  + "                                                                                 " 
					REGMNU_CPT_ALF = REGMNU_CPT_ALF  + "                                                                                 "

					BUFOUT = FNC_PRINT("ERROR EN CONSTRUCCION DE REGISTRO MNU ")
					BUFOUT = FNC_PRINT("LARGO " + FNC_SYSSTR(FNC_SYSLEN (REGMNU_CPT_ALF)))
					BUFOUT = FNC_PRINT( " REGISTRO MNU : ")
					BUFOUT = FNC_PRINT( REGMNU_CPT_ALF)
				END IF

			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REGMNU_CPT_ALF,001,60))
			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REGMNU_CPT_ALF,061,60))
			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REGMNU_CPT_ALF,121,60))
			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REGMNU_CPT_ALF,181,60))
			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REGMNU_CPT_ALF,241,60))
			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REGMNU_CPT_ALF,301,60))
			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REGMNU_CPT_ALF,361,60))
			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REGMNU_CPT_ALF,421,60))
			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REGMNU_CPT_ALF,481,60))
 !!! GENERACION DE RPF
			RPF_COD_DPRO_CPT_ALF = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_PGM),128)
			IF FNC_SYSLEN(RPF_COD_DPRO_CPT_ALF) < 12 THEN
				LL_CPT_NUM = 12 - FNC_SYSLEN(RPF_COD_DPRO_CPT_ALF) 
				FOR AA_CPT_NUM = 1  TO LL_CPT_NUM
					RPF_COD_DPRO_CPT_ALF   = RPF_COD_DPRO_CPT_ALF  + " "
				NEXT AA_CPT_NUM
			ELSE
				IF FNC_SYSLEN(RPF_COD_DPRO_CPT_ALF) > 12 THEN
					RPF_COD_DPRO_CPT_ALF  = FNC_SYSRIGHT(RPF_COD_DPRO_CPT_ALF,12)
				END IF
			END IF
			RPF_COD_TREG_CPT_ALF = "A"
			RPF_COD_CORR_CPT_ALF = " "
			RPF_COD_DARC_CPT_ALF = "        "
			RPF_COD_DATA_CPT_ALF = "CONSIST                                                               "
			BUFOUT = ESCR_PI1(MG_0,"REGRPF" + TPG_GLS_SIS_CPT_ALF)
			REGMNU_CPT_ALF = RPF_COD_DPRO_CPT_ALF + RPF_COD_TREG_CPT_ALF + RPF_COD_CORR_CPT_ALF  +RPF_COD_DARC_CPT_ALF  + RPF_COD_DATA_CPT_ALF  
			IF FNC_SYSLEN(REGMNU_CPT_ALF) <> 92 THEN
				BUFOUT = FNC_PRINT("ERROR EN CONSTRUCCION DE REGISTRO RPF -A- ")
				BUFOUT = FNC_PRINT( "LARGO " + FNC_SYSSTR(FNC_SYSLEN(REGMNU_CPT_ALF)))
				BUFOUT = FNC_PRINT( " REGISTRO RPF : ")
				BUFOUT = FNC_PRINT( REGMNU_CPT_ALF)
			END IF
			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REGMNU_CPT_ALF,001,60))
			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REGMNU_CPT_ALF,061,60))
			RPF_COD_DPRO_CPT_ALF = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_PGM),128)
			IF FNC_SYSLEN(RPF_COD_DPRO_CPT_ALF) < 12 THEN
				LL_CPT_NUM = 12 - FNC_SYSLEN(RPF_COD_DPRO_CPT_ALF) 
				FOR AA_CPT_NUM = 1  TO LL_CPT_NUM
					RPF_COD_DPRO_CPT_ALF   = RPF_COD_DPRO_CPT_ALF  + " "
				NEXT AA_CPT_NUM
			ELSE
				IF FNC_SYSLEN(RPF_COD_DPRO_CPT_ALF) > 12 THEN
					RPF_COD_DPRO_CPT_ALF  = FNC_SYSRIGHT(RPF_COD_DPRO_CPT_ALF,12)
				END IF
			END IF
			RPF_COD_TREG_CPT_ALF = "B"
			RPF_COD_CORR_CPT_ALF = " "
			RPF_COD_DARC_CPT_ALF = "        "
			RPF_COD_DATA_CPT_ALF = TPG_GLS_SIS_CPT_ALF + FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_FRM),128)
			IF FNC_SYSLEN(RPF_COD_DATA_CPT_ALF ) < 70 THEN
				LL_CPT_NUM = 70 - FNC_SYSLEN(RPF_COD_DATA_CPT_ALF ) 
				FOR AA_CPT_NUM = 1  TO LL_CPT_NUM
					RPF_COD_DATA_CPT_ALF  = RPF_COD_DATA_CPT_ALF   + " "
				NEXT AA_CPT_NUM
			END IF
			BUFOUT = ESCR_PI1(MG_0,"REGRPF" + TPG_GLS_SIS_CPT_ALF)
			REGMNU_CPT_ALF = RPF_COD_DPRO_CPT_ALF + RPF_COD_TREG_CPT_ALF + RPF_COD_CORR_CPT_ALF  +RPF_COD_DARC_CPT_ALF  + RPF_COD_DATA_CPT_ALF 
			IF FNC_SYSLEN(REGMNU_CPT_ALF) <> 92 THEN
				BUFOUT = FNC_PRINT("ERROR EN CONSTRUCCION DE REGISTRO RPF -B-")
				BUFOUT = FNC_PRINT( "LARGO " + FNC_SYSSTR(FNC_SYSLEN(REGMNU_CPT_ALF)))
				BUFOUT = FNC_PRINT( " REGISTRO RPF : ")
				BUFOUT = FNC_PRINT( REGMNU_CPT_ALF)
			END IF
			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REGMNU_CPT_ALF,001,60))
			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REGMNU_CPT_ALF,061,60))
			RPF_COD_DPRO_CPT_ALF = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_PGM),128)
			IF FNC_SYSLEN(RPF_COD_DPRO_CPT_ALF) < 12 THEN
				LL_CPT_NUM = 12 - FNC_SYSLEN(RPF_COD_DPRO_CPT_ALF) 
				FOR AA_CPT_NUM = 1  TO LL_CPT_NUM
					RPF_COD_DPRO_CPT_ALF  = RPF_COD_DPRO_CPT_ALF  + " "
				NEXT AA_CPT_NUM
			ELSE
				IF FNC_SYSLEN(RPF_COD_DPRO_CPT_ALF) > 12 THEN
					RPF_COD_DPRO_CPT_ALF  = FNC_SYSRIGHT(RPF_COD_DPRO_CPT_ALF,12)
				END IF
			END IF
			IF FNC_SYSLEN(RPF_COD_CONF_CPT_ALF) < 25 THEN
				LL_CPT_NUM = 25 - FNC_SYSLEN(RPF_COD_CONF_CPT_ALF) 
				FOR AA_CPT_NUM = 1  TO LL_CPT_NUM
					RPF_COD_CONF_CPT_ALF  = RPF_COD_CONF_CPT_ALF  + " "
				NEXT AA_CPT_NUM
			END IF
			RPF_COD_TREG_CPT_ALF = "C"
			RPF_COD_CORR_CPT_ALF = " "
			RPF_COD_DARC_CPT_ALF = "        "
			RPF_COD_DATA_CPT_ALF = "                                                                      "
			BUFOUT = ESCR_PI1(MG_0,"REGRPF" + TPG_GLS_SIS_CPT_ALF)
			REGMNU_CPT_ALF = RPF_COD_DPRO_CPT_ALF + RPF_COD_TREG_CPT_ALF + RPF_COD_CORR_CPT_ALF  +RPF_COD_DARC_CPT_ALF  + RPF_COD_DATA_CPT_ALF  
			IF FNC_SYSLEN(REGMNU_CPT_ALF) <> 92 THEN
				BUFOUT = FNC_PRINT("ERROR EN CONSTRUCCION DE REGISTRO RPF -C-")
				BUFOUT = FNC_PRINT("LARGO " + FNC_SYSSTR(FNC_SYSLEN(REGMNU_CPT_ALF)))
				BUFOUT = FNC_PRINT( " REGISTRO RPF : ")
				BUFOUT = FNC_PRINT( REGMNU_CPT_ALF)
			END IF
			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REGMNU_CPT_ALF,001,60))
			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REGMNU_CPT_ALF,061,60))
			RPF_COD_DPRO_CPT_ALF = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_PGM),128)
			IF FNC_SYSLEN(RPF_COD_DPRO_CPT_ALF) < 12 THEN
				LL_CPT_NUM = 12 - FNC_SYSLEN(RPF_COD_DPRO_CPT_ALF) 
				FOR AA_CPT_NUM = 1  TO LL_CPT_NUM
					RPF_COD_DPRO_CPT_ALF   = RPF_COD_DPRO_CPT_ALF  + " "
				NEXT AA_CPT_NUM
			ELSE
				IF FNC_SYSLEN(RPF_COD_DPRO_CPT_ALF) > 12 THEN
					RPF_COD_DPRO_CPT_ALF  = FNC_SYSRIGHT(RPF_COD_DPRO_CPT_ALF,12)
				END IF
			END IF
			RPF_COD_TREG_CPT_ALF = "P"
			RPF_COD_CORR_CPT_ALF = "0"
                        RPF_COD_DARC_CPT_ALF = "        "
			RPF_COD_DATA_CPT_ALF = TPG_GLS_SIS_CPT_ALF + FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_FRM),128) 
			RPF_COD_DATA_CPT_ALF = RPF_COD_DATA_CPT_ALF +  TPG_GLS_SIS_CPT_ALF + FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_FRM),128)
			IF FNC_SYSLEN(RPF_COD_DATA_CPT_ALF ) < 70 THEN
				LL_CPT_NUM = 70 - FNC_SYSLEN(RPF_COD_DATA_CPT_ALF ) 
				FOR AA_CPT_NUM = 1  TO LL_CPT_NUM
					RPF_COD_DATA_CPT_ALF  = RPF_COD_DATA_CPT_ALF   + " "
				NEXT AA_CPT_NUM
			END IF
			BUFOUT = ESCR_PI1(MG_0,"REGRPF" + TPG_GLS_SIS_CPT_ALF)
			REGMNU_CPT_ALF = RPF_COD_DPRO_CPT_ALF + RPF_COD_TREG_CPT_ALF + RPF_COD_CORR_CPT_ALF  +RPF_COD_DARC_CPT_ALF  + RPF_COD_DATA_CPT_ALF  
			IF FNC_SYSLEN(REGMNU_CPT_ALF) <> 92 THEN
				BUFOUT = FNC_PRINT( "ERROR EN CONSTRUCCION DE REGISTRO RPF -P0- ")
				BUFOUT = FNC_PRINT( "LARGO " + FNC_SYSSTR(FNC_SYSLEN(REGMNU_CPT_ALF)))
				BUFOUT = FNC_PRINT( " REGISTRO RPF : ")
				BUFOUT = FNC_PRINT( REGMNU_CPT_ALF)
			END IF
			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REGMNU_CPT_ALF,001,60))
			BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REGMNU_CPT_ALF,061,60))
		NEXT JJ_CPT_NUM
	NEXT II_CPT_NUM

 !!! GENERACION DE REGISTROS RPF CON COMANDOS
	TOT_PGM_CPT_NUM = 0
	FOR II_CPT_NUM = 1 TO TPG_TOT_REQ 
		FOR JJ_CPT_NUM = 1 TO TPG_VEC_NUM_TRN(II_CPT_NUM)
			ENC_PGM_CPT_ALF = "NO"
			FOR ZZZ_CPT_NUM = 1 TO TOT_PGM_CPT_NUM
				IF TPG_MAT_TRN_PGM(ZZZ_CPT_NUM,CTE_TRN_PGM) = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_PGM),128) THEN
					IF TPG_MAT_TRN_PGM(ZZZ_CPT_NUM,CTE_TRN_CMN) = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_CMN),128) THEN
						IF TPG_MAT_TRN_PGM(ZZZ_CPT_NUM,CTE_TRN_SPP) = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_SPP),128) THEN
							ENC_PGM_CPT_ALF = "SI"
							ZZZ_CPT_NUM = TOT_PGM_CPT_NUM + 1
						END IF
					END IF
				END IF
			NEXT ZZZ_CPT_NUM
			IF ENC_PGM_CPT_ALF = "NO" THEN
				TOT_PGM_CPT_NUM = TOT_PGM_CPT_NUM + 1
				TPG_MAT_TRN_PGM(TOT_PGM_CPT_NUM,CTE_TRN_PGM) = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_PGM),128)
				TPG_MAT_TRN_PGM(TOT_PGM_CPT_NUM,CTE_TRN_CPP) = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_CPP),128)
				TPG_MAT_TRN_PGM(TOT_PGM_CPT_NUM,CTE_TRN_SPP) = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_SPP),128)
				TPG_MAT_TRN_PGM(TOT_PGM_CPT_NUM,CTE_TRN_SUB) = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_SUB),128)
				TPG_MAT_TRN_PGM(TOT_PGM_CPT_NUM,CTE_TRN_CMN) = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_CMN),128)
				TPG_MAT_TRN_PGM(TOT_PGM_CPT_NUM,CTE_TRN_CNF) = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_CNF),128)
			END IF
		NEXT JJ_CPT_NUM
	NEXT II_CPT_NUM

	FOR YYY_CPT_NUM = 1 TO TOT_PGM_CPT_NUM

	FOR ZZZ_CPT_NUM = 1 TO TOT_PGM_CPT_NUM
		IF TPG_MAT_TRN_PGM(YYY_CPT_NUM,CTE_TRN_PGM) > TPG_MAT_TRN_PGM(ZZZ_CPT_NUM,CTE_TRN_PGM) THEN

			AUX_PGM_CPT_ALF = TPG_MAT_TRN_PGM(ZZZ_CPT_NUM,CTE_TRN_PGM)
			AUX_CMN_CPT_ALF = TPG_MAT_TRN_PGM(ZZZ_CPT_NUM,CTE_TRN_CMN)
			AUX_CPP_CPT_ALF = TPG_MAT_TRN_PGM(ZZZ_CPT_NUM,CTE_TRN_CPP)
			AUX_SPP_CPT_ALF = TPG_MAT_TRN_PGM(ZZZ_CPT_NUM,CTE_TRN_SPP)
			AUX_SUB_CPT_ALF = TPG_MAT_TRN_PGM(ZZZ_CPT_NUM,CTE_TRN_SUB)
			AUX_CNF_CPT_ALF = TPG_MAT_TRN_PGM(ZZZ_CPT_NUM,CTE_TRN_CNF)

			TPG_MAT_TRN_PGM(ZZZ_CPT_NUM,CTE_TRN_PGM) = TPG_MAT_TRN_PGM(YYY_CPT_NUM,CTE_TRN_PGM) 
			TPG_MAT_TRN_PGM(ZZZ_CPT_NUM,CTE_TRN_CMN) = TPG_MAT_TRN_PGM(YYY_CPT_NUM,CTE_TRN_CMN) 
			TPG_MAT_TRN_PGM(ZZZ_CPT_NUM,CTE_TRN_CPP) = TPG_MAT_TRN_PGM(YYY_CPT_NUM,CTE_TRN_CPP) 
			TPG_MAT_TRN_PGM(ZZZ_CPT_NUM,CTE_TRN_SPP) = TPG_MAT_TRN_PGM(YYY_CPT_NUM,CTE_TRN_SPP) 
			TPG_MAT_TRN_PGM(ZZZ_CPT_NUM,CTE_TRN_SUB) = TPG_MAT_TRN_PGM(YYY_CPT_NUM,CTE_TRN_SUB) 
			TPG_MAT_TRN_PGM(ZZZ_CPT_NUM,CTE_TRN_CNF) = TPG_MAT_TRN_PGM(YYY_CPT_NUM,CTE_TRN_CNF) 

			TPG_MAT_TRN_PGM(YYY_CPT_NUM,CTE_TRN_PGM) = AUX_PGM_CPT_ALF
			TPG_MAT_TRN_PGM(YYY_CPT_NUM,CTE_TRN_CMN) = AUX_CMN_CPT_ALF
			TPG_MAT_TRN_PGM(YYY_CPT_NUM,CTE_TRN_CPP) = AUX_CPP_CPT_ALF
			TPG_MAT_TRN_PGM(YYY_CPT_NUM,CTE_TRN_SPP) = AUX_SPP_CPT_ALF
			TPG_MAT_TRN_PGM(YYY_CPT_NUM,CTE_TRN_SUB) = AUX_SUB_CPT_ALF
			TPG_MAT_TRN_PGM(YYY_CPT_NUM,CTE_TRN_CNF) = AUX_CNF_CPT_ALF

		END IF
	NEXT ZZZ_CPT_NUM
	NEXT YYY_CPT_NUM

	FOR ZZZ_CPT_NUM = 1 TO TOT_PGM_CPT_NUM
		IF AUX_PGM_CPT_ALF <> TPG_MAT_TRN_PGM(ZZZ_CPT_NUM,CTE_TRN_PGM) THEN
			COR_PGM_CPT_NUM = 0
			AUX_PGM_CPT_ALF = TPG_MAT_TRN_PGM(ZZZ_CPT_NUM,CTE_TRN_PGM)
		ELSE
			COR_PGM_CPT_NUM = COR_PGM_CPT_NUM + 1
		END IF

		RPF_COD_DPRO_CPT_ALF = TPG_MAT_TRN_PGM(ZZZ_CPT_NUM,CTE_TRN_PGM) 
		IF FNC_SYSLEN(RPF_COD_DPRO_CPT_ALF) < 12 THEN
			LL_CPT_NUM = 12 - FNC_SYSLEN(RPF_COD_DPRO_CPT_ALF) 
			FOR AA_CPT_NUM = 1  TO LL_CPT_NUM
				RPF_COD_DPRO_CPT_ALF   = RPF_COD_DPRO_CPT_ALF  + " "
			NEXT AA_CPT_NUM
		ELSE
			IF FNC_SYSLEN(RPF_COD_DPRO_CPT_ALF) > 12 THEN
				RPF_COD_DPRO_CPT_ALF  = FNC_SYSRIGHT(RPF_COD_DPRO_CPT_ALF,12)
			END IF
		END IF

		RPF_COD_CONF_CPT_ALF =  TPG_MAT_TRN_PGM(ZZZ_CPT_NUM,CTE_TRN_CNF)
		IF FNC_SYSLEN(RPF_COD_CONF_CPT_ALF) < 25 THEN
			LL_CPT_NUM = 25 - FNC_SYSLEN(RPF_COD_CONF_CPT_ALF) 
			FOR AA_CPT_NUM = 1  TO LL_CPT_NUM
				RPF_COD_CONF_CPT_ALF  = RPF_COD_CONF_CPT_ALF  + " "
			NEXT AA_CPT_NUM
		END IF

		RPF_COD_TREG_CPT_ALF = "C"
		RPF_COD_CORR_CPT_ALF = FNC_SYSSTR(COR_PGM_CPT_NUM)
		RPF_COD_DARC_CPT_ALF = "        "
		RPF_COD_CMND_CPT_ALF =  TPG_MAT_TRN_PGM(ZZZ_CPT_NUM,CTE_TRN_CMN)
		RPF_COD_UARC_CPT_ALF =  TPG_MAT_TRN_PGM(ZZZ_CPT_NUM,CTE_TRN_SUB) + "    "
		RPF_GLS_DAT1_CPT_ALF = "                         " + RPF_COD_CONF_CPT_ALF  + RPF_COD_UARC_CPT_ALF 
		RPF_COD_CCPP_CPT_ALF =  TPG_MAT_TRN_PGM(ZZZ_CPT_NUM,CTE_TRN_CPP)
		RPF_COD_STPP_CPT_ALF =  TPG_MAT_TRN_PGM(ZZZ_CPT_NUM,CTE_TRN_SPP)
		RPF_GLS_DAT2_CPT_ALF = " "
 


		BUFOUT = ESCR_PI1(MG_0,"REGRPF" + TPG_GLS_SIS_CPT_ALF)
		REGMNU_CPT_ALF = RPF_COD_DPRO_CPT_ALF + RPF_COD_TREG_CPT_ALF + RPF_COD_CORR_CPT_ALF  + RPF_COD_DARC_CPT_ALF  + RPF_COD_CMND_CPT_ALF 
		REGMNU_CPT_ALF = REGMNU_CPT_ALF +  RPF_GLS_DAT1_CPT_ALF + RPF_COD_CCPP_CPT_ALF + RPF_COD_STPP_CPT_ALF + RPF_GLS_DAT2_CPT_ALF 
		IF FNC_SYSLEN(REGMNU_CPT_ALF) <> 92 THEN
				BUFOUT = FNC_PRINT( "ERROR EN CONSTRUCCION DE REGISTRO RPF -P#- ")
				BUFOUT = FNC_PRINT( "LARGO " + FNC_SYSSTR(FNC_SYSLEN(REGMNU_CPT_ALF)))
				BUFOUT = FNC_PRINT( " REGISTRO RPF : ")
				BUFOUT = FNC_PRINT( REGMNU_CPT_ALF)
		END IF
		BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REGMNU_CPT_ALF,001,60))
		BUFOUT = ESCR_PI1(MG_0,FNC_SYSMID(REGMNU_CPT_ALF,061,60))
	NEXT ZZZ_CPT_NUM

 !!! FIN GENERACION DE REGISTROS RPF CON COMANDOS

	BUFOUT = ESCR_PI1(MG_0,"FINPI1")
	BUFOUT = PRT_ESTAD

    END DEF

	DEF STRING PUT_CPL_NUM_TP
		REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) 
		REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF + "TP-" + TPG_VEC_REQ(II_CPT_NUM)  
		REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF + YY_CPT_ALF + "-" 
		REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF + FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) + "-CPL" + " "
		REGMNU_2_CPT_ALF = "PIC X(" +  NUM_5(COMPLE$) + ")." 
		REGMNU_1_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
		REGMNU_CPT_ALF = "P" +  CON_NIV_CPT_ALF  + NIV_SEP(SEP_CPT_NUM)  + REGMNU_1_CPT_ALF
		BUFOUT = ESCR_WS2(MG_0,REGMNU_CPT_ALF)
	END DEF

	DEF STRING PUT_CPL_NUM_PT
		REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) 
		REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF + "PT-" + TPG_VEC_REQ(II_CPT_NUM)  
		REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF + YY_CPT_ALF + "-" 
		REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF + FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) + "-CPL" + " "
		REGMNU_2_CPT_ALF = "PIC X(" +  NUM_5(COMPLE$) + ")." 
		REGMNU_1_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
		REGMNU_CPT_ALF = "P" +  CON_NIV_CPT_ALF  + NIV_SEP(SEP_CPT_NUM)  + REGMNU_1_CPT_ALF
		BUFOUT = ESCR_WS1(MG_0,REGMNU_CPT_ALF)
    END DEF

       DEF STRING FNC_FORM_PCAPT

	FIRST_CPT_NUM = 1
 !!!	REGMNU_CPT_ALF = "SEC-DSP-VAR SECTION."
 !!!	BUFOUT = ESCR_DFI(MG_8,REGMNU_CPT_ALF)
 !!!	REGMNU_CPT_ALF = "INI-SEC-DSP-VAR."
 !!!	BUFOUT = ESCR_DFI(MG_8,REGMNU_CPT_ALF)

	FOR II_CPT_NUM = 1 TO TPG_TOT_REQ 
		OCC_X$ = ""
		OCC_Y$ = ""
		OCC_Z$ = ""
		LRG_ESTR_CPT_NUM = LRG_HDR
		LRG_ESTR_CPT_NUM_OLD = LRG_ESTR_CPT_NUM 
		REGMNU_CPT_ALF = " "
		BUFOUT = ESCR_WS1(MG_7,REGMNU_CPT_ALF)
 !!!		IF FIRST_CPT_NUM <> 1 THEN
 !!!			REGMNU_CPT_ALF = "GO TO FIN-SEC-DSP-VAR."
 !!!			BUFOUT = ESCR_DFI(MG_16,REGMNU_CPT_ALF)
 !!!		END IF
		IF FIRST_CPT_NUM = 1 THEN
			FIRST_CPT_NUM = 0
		END IF 

		REGMNU_CPT_ALF = " "
		BUFOUT = ESCR_WS1(MG_7,REGMNU_CPT_ALF)
		REGMNU_CPT_ALF = "  =========================== PT-" + TPG_VEC_REQ(II_CPT_NUM)  + " ==========================="
		BUFOUT = ESCR_WS1(MG_7,REGMNU_CPT_ALF)
		REGMNU_CPT_ALF = " "
		BUFOUT = ESCR_WS1(MG_7,REGMNU_CPT_ALF)

		NIV_ESC_CPT_NUM = NIV_01
		REGMNU_CPT_ALF = "  DOCSER " + TPG_VEC_REQ(II_CPT_NUM)  + " : " + TPG_VEC_DEF_REQ(II_CPT_NUM) 
		BUFOUT = ESCR_WS1(MG_7,REGMNU_CPT_ALF)

		REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "PT-" + TPG_VEC_REQ(II_CPT_NUM)  + " " + "REDEFINES WSS-RCV."
		BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
		IF LRG_HDR > 0 THEN
			NIV_ESC_CPT_NUM = NIV_03
			REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "PT-" + TPG_VEC_REQ(II_CPT_NUM)  + "-AHDR" +&
				"                                 PIC X(" + NUM_5(LRG_HDR_ALF$ ) + ")."
			BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
			NIV_ESC_CPT_NUM = NIV_01
		END IF

		BUFOUT = ESCR_PTX(NIV_MRG(0), "%!" )
		BUFOUT = ESCR_PTX(NIV_MRG(0), '% REQ = "' + TPG_VEC_REQ(II_CPT_NUM) + '"')
		BUFOUT = ESCR_PTX(NIV_MRG(0), "% TIP_INP = TRUE" )
		BUFOUT = ESCR_PTX(NIV_MRG(0), "%!" )

 !!!		REGMNU_CPT_ALF = "IF VAR-COD-REQU = '" + TPG_VEC_REQ(II_CPT_NUM) + "'"
 !!!		BUFOUT = ESCR_DFI(MG_12,REGMNU_CPT_ALF)
 !!!		REGMNU_CPT_ALF = "MOVE VAR-GLS-DATA TO PT-" + TPG_VEC_REQ(II_CPT_NUM) 
 !!!		BUFOUT = ESCR_DFI(MG_16,REGMNU_CPT_ALF)
		ANTE_CPT_ALF = " "

		IF TPG_HDR_RCV <> 0 THEN
			NIV_ESC_CPT_NUM = NIV_03
			REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "PT-" + TPG_VEC_REQ(II_CPT_NUM)  +&
				"-RCV-HDR	   PIC X(" + FNC_SYSSTR(TPG_HDR_RCV) + ")."
			BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
			LRG_ESTR_CPT_NUM = TPG_HDR_RCV
			LRG_ESTR_CPT_NUM_OLD = LRG_ESTR_CPT_NUM
		END IF

		CON_NIV_CPT_NUM = CON_NIV_CPT_NUM  + 1
		CON_NIV_CPT_ALF = FNC_SYSSTR(CON_NIV_CPT_NUM)
		WHILE FNC_SYSLEN(CON_NIV_CPT_ALF) < 5 
			CON_NIV_CPT_ALF = "0" + CON_NIV_CPT_ALF
	        NEXT

		NIV_ESC_CPT_NUM = NIV_03
		 REGMNU_CPT_ALF =  "P" +  CON_NIV_CPT_ALF  + NIV_SEP(10) + NIV_PIC(NIV_ESC_CPT_NUM) + "PT-" 
		 REGMNU_CPT_ALF =  REGMNU_CPT_ALF +   TPG_VEC_REQ(II_CPT_NUM)  + "-CREQ                                 PIC X(00003)."
		 BUFOUT = ESCR_WS1((NIV_00),REGMNU_CPT_ALF)

		CON_NIV_ANT_CPT_NUM = 3  
		 NIV_ESC_CPT_NUM = NIV_03
		REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "PT-" + TPG_VEC_REQ(II_CPT_NUM)  +"-DMSG."
		BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)

		ANT_CPT_NUM = TPG_MAT_NIV_IDPT(II_CPT_NUM,1,1)
		ANT_CPT_NUM = 0
		ANT2_CPT_NUM = 0
		NIV_ESC_CPT_NUM = NIV_05
		TPG_CON_TRN = 0
		TPG_CON  = 0
		OCCUR2_CPT_ALF = "N"
		LRG_ESTR_CPT_NUM = LRG_ESTR_CPT_NUM  + 3
		LRG_ESTR_CPT_NUM_OLD = LRG_ESTR_CPT_NUM
		FOR JJ_CPT_NUM = 1 TO TPG_MAT_CAM_PT(II_CPT_NUM)

			TPG_GLS_SIS_CPT_ALF = "&&&"
			TPG_GLS_FRM_CPT_ALF = TPG_MAT_PTFRM(II_CPT_NUM,JJ_CPT_NUM)
			FOR NN_CPT_NUM = 1 TO TPG_TOT_HST
				IF TPG_GLS_FRM_CPT_ALF = TPG_MAT_HST_ALF(NN_CPT_NUM,CTE_IDX_NOM) THEN 
					TPG_GLS_SIS_CPT_ALF = TPG_MAT_HST_ALF(NN_CPT_NUM,CTE_IDX_SIS)
					NN_CPT_NUM = TPG_TOT_HST + 1
				END IF
			NEXT NN_CPT_NUM
	
			SIS_PAN_CPT_ALF =                          ">> " + TPG_GLS_SIS_CPT_ALF 
			SIS_PAN_CPT_ALF =  SIS_PAN_CPT_ALF + "-" + TPG_GLS_FRM_CPT_ALF 

			AA$ =  FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_CMN),128)
                        IF AA$ = "" THEN
				AA$ = "..."
			END IF
			SIS_PAN_CPT_ALF =  SIS_PAN_CPT_ALF + "-" + AA$
			AA$ = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_INS),128)
                        IF AA$ = "" THEN
				AA$ = "+++"
			END IF
			SIS_PAN_CPT_ALF =  SIS_PAN_CPT_ALF + "-" + AA$


			SIS_PAN_CPT_ALF =  SIS_PAN_CPT_ALF + " ( " + FNC_SYSEDIT(TPG_MAT_PTFMT(II_CPT_NUM, JJ_CPT_NUM ) ,128)+ " )"
			REGMNU_CPT_ALF = SIS_PAN_CPT_ALF
 			BUFOUT = ESCR_WS1(MG_7,REGMNU_CPT_ALF)
 			BUFOUT = ESCR_PTX(NIV_MRG(0),"%!" + SIS_PAN_CPT_ALF)

			PUT_PTHDR_CPT_ALF = "SI"
			PUT_HDR_CPT_ALF = "NO"
			OLD_IDX_CPT_ALF = "NO"

			MUL_NIV_UNO_CPT_NUM =  TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,1) 
			IF MUL_NIV_UNO_CPT_NUM =  0 THEN
				MUL_NIV_UNO_CPT_NUM =  1
			END IF

			MUL_NIV_DOS_CPT_NUM = 1
			MUL_NIV_TRE_CPT_NUM = 1
			IF TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,1)  = 0  THEN  
				OCCUR1_CPT_ALF = "N"
				REPT_CPT_ALF = " "   
			END IF
			IF TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,2)  = 0  THEN  
				OCCUR2_CPT_ALF = "N"
			END IF

			TPG_CON  = TPG_CON  + 1
			XX_CPT_ALF = FNC_SYSSTR(TPG_CON) 
			IF FNC_SYSLEN(XX_CPT_ALF) < 2 THEN
				XX_CPT_ALF = "0" + XX_CPT_ALF
			END IF

			IF (TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,1) <> ANT_CPT_NUM  AND TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,1) <> 0) THEN
				PRI_IF = "S"
			END IF
 			IF TPG_MAT_INIIDXPT(II_CPT_NUM,JJ_CPT_NUM) = SI_INICIA_IDX_PT AND TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,2)  = 0  THEN
				SEG_IF = "S"
			END IF
			IF PRI_IF = "S" OR SEG_IF = "S" THEN
				OCC_X$ = FNC_SYSSTR(TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,1))
					REGMNU_CPT_ALF = "05  PT-" + TPG_VEC_REQ(II_CPT_NUM)  +"-DMSG-IDX-1-" + XX_CPT_ALF + " OCCURS" + " " 
					REGMNU_CPT_ALF = REGMNU_CPT_ALF +  FNC_SYSSTR(TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,1)) + " TIMES."
					BUFOUT = ESCR_WS1(MG_16,REGMNU_CPT_ALF)
					REPT_CPT_ALF = FNC_SYSSTR(TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,1)) 
					REPT1_CPT_NUM = TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,1) 
					OCCUR1_CPT_NUM = TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,1) - 1
					OCCUR1_CPT_ALF = "S"
					PRI_IF = "N" 
					SEG_IF = "N" 
			END IF


			 IF (TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,2) <> ANT2_CPT_NUM  AND TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,2) <> 0) THEN
				PRI_IF = "S"
			END IF

			IF (TPG_MAT_INIIDXPT(II_CPT_NUM,JJ_CPT_NUM) = SI_INICIA_IDX_PT AND TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,2) <> 0) THEN
				SEG_IF = "S"
			END IF
			IF PRI_IF = "S" OR SEG_IF = "S" THEN
				IF OCC_X$ = "" THEN
					OCC_X$ = FNC_SYSSTR(TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,2))  
				ELSE
					OCC_Y$ = FNC_SYSSTR(TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,2))  
				END IF
					REGMNU_CPT_ALF = "07  PT-" + TPG_VEC_REQ(II_CPT_NUM)  +"-DMSG-IDX-2-" + XX_CPT_ALF + " OCCURS" + " " 
					REGMNU_CPT_ALF = REGMNU_CPT_ALF +  FNC_SYSSTR(TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,2))  + " TIMES."
					BUFOUT = ESCR_WS1(MG_20,REGMNU_CPT_ALF)
					REPT_CPT_ALF = FNC_SYSSTR(TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,2)) 
					OCCUR2_CPT_NUM = TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,2) - 1
					OCCUR2_CPT_ALF = "S"
					PRI_IF = "N" 
					SEG_IF = "N" 
			END IF



			ANT_CPT_NUM = TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,1)
			ANT2_CPT_NUM = TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,2)
			HST_CPT_NUM = 0

			FOR GG_CPT_NUM = 1 TO TPG_TOT_HST
				IF (TPG_MAT_HST_ALF(GG_CPT_NUM,CTE_IDX_NOM) = TPG_MAT_PTFRM(II_CPT_NUM,JJ_CPT_NUM)) THEN
					HST_CPT_NUM = GG_CPT_NUM
					GG_CPT_NUM = TPG_TOT_HST + 1
				END IF
			NEXT GG_CPT_NUM
			SRV_CPT_NUM = 0
			FOR GG_CPT_NUM = 1 TO TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TSF) 
				IF (TPG_MAT_SRV_ALF(HST_CPT_NUM,GG_CPT_NUM) =  FNC_SYSEDIT(TPG_MAT_PTFMT(II_CPT_NUM,JJ_CPT_NUM),128)) THEN
					SRV_CPT_NUM = GG_CPT_NUM
					GG_CPT_NUM = TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TSF) + 1
				END IF
			NEXT GG_CPT_NUM
			FOR GG_CPT_NUM = 1 TO TPG_MAT_NCP_SRV(HST_CPT_NUM,SRV_CPT_NUM)
				
				N_IDX_CPT_NUM = 0
				FOR XX_CPT_NUM = 1 TO TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TCF)
					TPGMATNAMEFLDSRV = FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128)
					IF TPG_MAT_NAMEFLDHST(HST_CPT_NUM,XX_CPT_NUM) = TPGMATNAMEFLDSRV THEN
						N_IDX_CPT_NUM = N_IDX_CPT_NUM + 1
					END IF
				NEXT XX_CPT_NUM
				NN_IDX_CPT_NUM = TPG_MAT_TOTOCCFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM) 
				FOR TT_CPT_NUM = 1 TO TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TCF)
					TPGMATNAMEFLDSRV = FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128)
					IF TPGMATNAMEFLDSRV = TPG_MAT_NAMEFLDHST(HST_CPT_NUM,TT_CPT_NUM) THEN
						CAMP_CPT_NUM = TT_CPT_NUM
						TT_CPT_NUM = TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TCF) + 1
					END IF
				NEXT TT_CPT_NUM
				ESCR_CPT_ALF = "SI"
				IF N_IDX_CPT_NUM > 1 THEN
					UU_CPT_NUM = GG_CPT_NUM - 1
					FOR XX_CPT_NUM = 1 TO UU_CPT_NUM
						TPGMATNAMEFLDSRV = FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,XX_CPT_NUM),128)
						IF TPGMATNAMEFLDSRV = TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM) THEN
							ESCR_CPT_ALF = "NO"
						END IF
					NEXT XX_CPT_NUM
				END IF
				AA_CPT_ALF = FNC_SYSSTR(TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM))
				LARGO_FLD_PT% =         TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM)
				
				IF OCCUR2_CPT_ALF = "S" THEN
					NIV_ESC_CPT_NUM = NIV_09
				ELSE
					IF OCCUR1_CPT_ALF = "S" THEN
						NIV_ESC_CPT_NUM = NIV_07
					ELSE
						NIV_ESC_CPT_NUM  = NIV_05
					END IF			
				END IF			



				IF OCCUR2_CPT_ALF = "S" THEN
					NUEVE_CPT_ALF = "S"
					CON_NIV2_CPT_NUM =  CON_NIV2_CPT_NUM + TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM)
					CON_NIV_CPT_NUM =  CON_NIV_CPT_NUM + CON_NIV_ANT_CPT_NUM 
				ELSE
					IF OCCUR1_CPT_ALF = "S" THEN
						SIETE_CPT_ALF = "S"
						IF NUEVE_CPT_ALF = "S" THEN
							CON_NIV1_CPT_NUM = CON_NIV1_CPT_NUM + (CON_NIV2_CPT_NUM * OCCUR2_CPT_NUM) + TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM)
							CON_NIV_CPT_NUM = CON_NIV_CPT_NUM + (CON_NIV2_CPT_NUM * OCCUR2_CPT_NUM) + CON_NIV_ANT_CPT_NUM 
							CON_NIV2_CPT_NUM = 0
							NUEVE_CPT_ALF = "N"
						ELSE
							CON_NIV1_CPT_NUM = CON_NIV1_CPT_NUM + TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM)
							CON_NIV_CPT_NUM = CON_NIV_CPT_NUM + CON_NIV_ANT_CPT_NUM 
						END IF 
					ELSE
						IF SIETE_CPT_ALF = "S" THEN
							 CON_NIVV_CPT_NUM = CON_NIV_CPT_NUM  +  (CON_NIV1_CPT_NUM * OCCUR1_CPT_NUM) + CON_NIV_ANT_CPT_NUM 
							 CON_NIV_CPT_NUM = CON_NIV_CPT_NUM  +  (CON_NIV1_CPT_NUM * OCCUR1_CPT_NUM) + CON_NIV_ANT_CPT_NUM 
							CON_NIV1_CPT_NUM = 0
							SIETE_CPT_ALF = "N"
						ELSE
							CON_NIVV_CPT_NUM =  CON_NIVV_CPT_NUM + CON_NIV_ANT_CPT_NUM 
							CON_NIV_CPT_NUM =  CON_NIV_CPT_NUM + CON_NIV_ANT_CPT_NUM 
						END IF
					END IF			
				END IF			

				CON_NIV_CPT_ALF = FNC_SYSSTR(CON_NIV_CPT_NUM)
				WHILE FNC_SYSLEN(CON_NIV_CPT_ALF) < 5 
					CON_NIV_CPT_ALF = "0" + CON_NIV_CPT_ALF
	     			NEXT
				CON_NIV_ANT_CPT_NUM  =  TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM)


				IF N_IDX_CPT_NUM  > 1 THEN
					OLD_IDX_CPT_ALF = "SI"
					IF PUT_HDR_CPT_ALF = "NO" THEN
						PUT_HDR_CPT_ALF = "SI"
						YY_CPT_ALF = FNC_SYSSTR(JJ_CPT_NUM)
						IF FNC_SYSLEN(YY_CPT_ALF) = 1 THEN
							YY_CPT_ALF = "0" + YY_CPT_ALF
						END IF
						YY_CPT_ALF = "-" + YY_CPT_ALF
						REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "PT-" + TPG_VEC_REQ(II_CPT_NUM)  
						IF OCC_x$ = "" THEN
							OCC_x$ = FNC_SYSSTR(N_IDX_CPT_NUM) 
						ELSE
						IF OCC_Y$ = "" THEN
							OCC_Y$ = FNC_SYSSTR(N_IDX_CPT_NUM) 
						ELSE
							OCC_Z$ = FNC_SYSSTR(N_IDX_CPT_NUM) 
						END IF
						END IF
						REGMNU_CPT_ALF = REGMNU_CPT_ALF +  YY_CPT_ALF +	"-FLD-HST OCCURS " + FNC_SYSSTR(N_IDX_CPT_NUM) + " TIMES."
						BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
						MUL_NIV_TRE_CPT_NUM = N_IDX_CPT_NUM

					END IF
					NIV_ESC_CPT_NUM = NIV_ESC_CPT_NUM + 1
				ELSE
					IF OLD_IDX_CPT_ALF = "SI" THEN
						OLD_IDX_CPT_ALF = "NO"
					END IF
				END IF

 !!!				IF ESCR_CPT_ALF = "SI"  AND TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM) <> "" THEN
				IF ESCR_CPT_ALF = "SI"  THEN

					YY_CPT_ALF = FNC_SYSSTR(JJ_CPT_NUM)
					IF FNC_SYSLEN(YY_CPT_ALF) = 1 THEN
						YY_CPT_ALF = "0" + YY_CPT_ALF
					END IF
					YY_CPT_ALF = "-" + YY_CPT_ALF

					LRG_ESTR_CPT_NUM_OLD  = LRG_ESTR_CPT_NUM  
					LRG_ESTR_CPT_NUM  =&
						LRG_ESTR_CPT_NUM  + ( TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM) *&
						MUL_NIV_UNO_CPT_NUM  * MUL_NIV_DOS_CPT_NUM *	MUL_NIV_TRE_CPT_NUM)

					IF PTREQ_ENT_VAR(II_CPT_NUM,JJ_CPT_NUM) = "SI" THEN
 					IF REQ_OLD$ <> TPG_VEC_REQ(II_CPT_NUM) OR&
 					   YY_CPT_ALF_OLD$ <> YY_CPT_ALF THEN

						REQ_OLD$ = TPG_VEC_REQ(II_CPT_NUM)
						YY_CPT_ALF_OLD$ = YY_CPT_ALF

						REGMNU_1_CPT_ALF = "       77  PT-PIN-HDR-" + TPG_VEC_REQ(II_CPT_NUM)  
						REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +   YY_CPT_ALF + "      VALUE       "
						AA$ = FNC_SYSSTR( LRG_ESTR_CPT_NUM_OLD  + 1 )
						IF LEN(AA$) = 1  THEN
							AA$ = "     " + AA$
						ELSE
						IF LEN(AA$) = 2  THEN
							AA$ = "    " + AA$
						ELSE
						IF LEN(AA$) = 3  THEN
							AA$ = "   " + AA$
						ELSE
						IF LEN(AA$) = 4  THEN
							AA$ = "  " + AA$
						ELSE
						IF LEN(AA$) = 5  THEN
							AA$ = " " + AA$
						END IF
						END IF
						END IF
						END IF
						END IF

						REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +  AA$
						REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF + "      PIC 9(00005)." 
						BUFOUT = ESCR_WS3(MG_0,REGMNU_1_CPT_ALF)


 					END IF
 					END IF

					IF NIV_ESC_CPT_NUM = 5 THEN
						SEP_CPT_NUM = 11
					ELSE
					IF NIV_ESC_CPT_NUM = 6 THEN
						SEP_CPT_NUM = 12
					ELSE
					IF NIV_ESC_CPT_NUM = 7 THEN
						SEP_CPT_NUM = 13
					ELSE
						SEP_CPT_NUM = 14
					END IF
					END IF
					END IF

					IF PTREQ_ENT_VAR(II_CPT_NUM,JJ_CPT_NUM) = "SI" THEN
						REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) 
						REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +  "PT-HDR-" + TPG_VEC_REQ(II_CPT_NUM)  
						REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +   YY_CPT_ALF
						IF REGMNU_1_CPT_ALF <> PTREQ_ENT_VAR_PRT$ THEN
							PTREQ_ENT_VAR_PRT$ = REGMNU_1_CPT_ALF
							REGMNU_2_CPT_ALF = "PIC X(00012)." 
							REGMNU_1_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
							REGMNU_CPT_ALF = "P" +  CON_NIV_CPT_ALF  + NIV_SEP(SEP_CPT_NUM)  + REGMNU_1_CPT_ALF
							BUFOUT = ESCR_WS1(MG_0,REGMNU_CPT_ALF)

							LRG_ESTR_CPT_NUM_OLD  = LRG_ESTR_CPT_NUM  
							LRG_ESTR_CPT_NUM  =&
							LRG_ESTR_CPT_NUM  + ( 12 *&
							MUL_NIV_UNO_CPT_NUM  * MUL_NIV_DOS_CPT_NUM *	MUL_NIV_TRE_CPT_NUM)

							REGMNU_1_CPT_ALF = "       77  PT-IDN-HDR-" + TPG_VEC_REQ(II_CPT_NUM)  
							REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +   YY_CPT_ALF + "      VALUE "
							AA$ = "'" + TPG_VEC_REQ(II_CPT_NUM)  + YY_CPT_ALF + "-" +&
								TPG_MAT_PTFRM(II_CPT_NUM,JJ_CPT_NUM) + "' "
							REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +  AA$
							REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF + "     PIC X(00012)." 
							BUFOUT = ESCR_WS3(MG_0,REGMNU_1_CPT_ALF)

						END IF
					END IF
					GLS_CPT_CMT$ = " DOCFLD : " + FNC_SYSEDIT(TPG_MAT_IDENFLDHST(HST_CPT_NUM,CAMP_CPT_NUM),16%)
					BUFOUT = ESCR_WS1(MG_7,GLS_CPT_CMT$)
					XX$ = FNC_SYSEDIT(TPG_MAT_IDENFLDHST(HST_CPT_NUM,CAMP_CPT_NUM),16%) 
					BUFOUT = ESCR_PTX(MG_0,"%!")
					BUFOUT = ESCR_PTX(MG_0,'% GLS     = "' + XX$ + '"')
					IF N_IDX_CPT_NUM > 1 THEN
						BUFOUT = ESCR_PTX(NIV_MRG(0),"% IND_IDX =  TRUE ")
					ELSE
						BUFOUT = ESCR_PTX(NIV_MRG(0),"% IND_IDX =  FALSE ")
					END IF
					XX$ = FNC_SYSSTR(N_IDX_CPT_NUM)
					BUFOUT = ESCR_PTX(NIV_MRG(0),"% IDX     = " +  XX$)

 !!!					PRINT "EN PT CAMPO " ; FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) ;&
 !!!						"OCC_X*";  OCC_X$ ; "*   OCC_Y*";  OCC_Y$ ; "*    OCC_Z  *";  OCC_Z$ ;&
 !!!					"*   --> " ; NIV_PIC(NIV_ESC_CPT_NUM) ; " NIVEL --> " ; NIV_ESC_CPT_NUM

					IF NIV_ESC_CPT_NUM = 5 THEN
						OCC_X$ = ""
						OCC_Y$ = ""
						OCC_Z$ = ""
					ELSE
					IF NIV_ESC_CPT_NUM = 6 THEN
						OCC_Y$ = ""
						OCC_Z$ = ""
					ELSE
					IF NIV_ESC_CPT_NUM = 7 THEN
						OCC_Z$ = ""
					END IF
					END IF
					END IF


					REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) 
					REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +  "PT-" + TPG_VEC_REQ(II_CPT_NUM)  
					REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +   YY_CPT_ALF + "-" 
					REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +   FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) + " "
					REGMNU_2_CPT_ALF = "PIC X(" +  NUM_5(AA_CPT_ALF) + ")." 
					REGMNU_1_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
					REGMNU_CPT_ALF = "P" +  CON_NIV_CPT_ALF  + NIV_SEP(SEP_CPT_NUM)  + REGMNU_1_CPT_ALF
					BUFOUT = ESCR_WS1(MG_0,REGMNU_CPT_ALF)

 !!! INI - REDEFINICION DE CAMPOS NUMERICOS PT

					NIV_ESC_CPT_NUM_BKP = NIV_ESC_CPT_NUM
					SEP_CPT_NUM_BKP = SEP_CPT_NUM 

					IF TPG_MAT_TIP_NUM(HST_CPT_NUM,CAMP_CPT_NUM) = "9" THEN

						REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) 
						REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF + "PT-" + TPG_VEC_REQ(II_CPT_NUM)  
						REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF + YY_CPT_ALF + "-" 
						REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +&
							FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) +&
							"-R REDEFINES"

						REGMNU_2_CPT_ALF = ""
						REGMNU_1_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
						REGMNU_CPT_ALF = "P" +  CON_NIV_CPT_ALF  + NIV_SEP(SEP_CPT_NUM)  + REGMNU_1_CPT_ALF
						BUFOUT = ESCR_WS1(MG_0,REGMNU_CPT_ALF)

						REGMNU_1_CPT_ALF = "    PT-" + TPG_VEC_REQ(II_CPT_NUM) +&
								YY_CPT_ALF + "-" +&
							FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(  HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128)+&
							"."
						REGMNU_2_CPT_ALF = ""

 						REGMNU_1_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
 						REGMNU_CPT_ALF = "P" +  CON_NIV_CPT_ALF  + NIV_SEP(SEP_CPT_NUM)  + REGMNU_1_CPT_ALF
						BUFOUT = ESCR_WS1(MG_0,REGMNU_CPT_ALF)

						NIV_ESC_CPT_NUM = NIV_ESC_CPT_NUM + 1
						IF NIV_ESC_CPT_NUM = 5 THEN
							SEP_CPT_NUM = 11
						ELSE
						IF NIV_ESC_CPT_NUM = 6 THEN
							SEP_CPT_NUM = 12
						ELSE
						IF NIV_ESC_CPT_NUM = 7 THEN
							SEP_CPT_NUM = 13
						ELSE
							SEP_CPT_NUM = 14
						END IF
						END IF
						END IF

						ENTER$ = FNC_SYSEDIT(TPG_MAT_NUM_FLD( hst_cpt_num, camp_cpt_num ,VAR_IND_ENT),128)
						LARGO_ENT% = INTEGER(ENTER$)
						DECIM$ = FNC_SYSEDIT(TPG_MAT_NUM_FLD( hst_cpt_num, camp_cpt_num ,VAR_IND_dec),128)
						LARGO_DEC% = INTEGER(DECIM$)
						SIGNO$ = FNC_SYSEDIT(TPG_MAT_NUM_FLD( hst_cpt_num, camp_cpt_num ,VAR_IND_sig),128)
						IF SIGNO$ <> "S" THEN
							SIGNO$ = " "
						END IF

						IF LARGO_ENT% + LARGO_DEC% < LARGO_FLD_PT% THEN
							COMPLE$ = STR$(LARGO_FLD_PT% - ( LARGO_ENT% + LARGO_DEC% ))
						ELSE
							COMPLE$ = ""
						END IF

						IF DECIM$ <> "0" THEN
							DECIM_EDIT$ = "V9(" + NUM_2(DECIM$) + ")."
						ELSE
							DECIM_EDIT$ = "."
						END IF

						IF COMPLE$ <> "" AND CPL_NUM_INI = "S" THEN
							BUFOUT = PUT_CPL_NUM_PT
						END IF
						REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) 
						REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF + "PT-" + TPG_VEC_REQ(II_CPT_NUM)  
						REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF + YY_CPT_ALF + "-" 
						REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +&
							FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) +&
							"-NUM"
						REGMNU_2_CPT_ALF = ""
 						REGMNU_1_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
 						REGMNU_CPT_ALF = "P" +  CON_NIV_CPT_ALF  + NIV_SEP(SEP_CPT_NUM)  + REGMNU_1_CPT_ALF
						BUFOUT = ESCR_WS1(MG_0,REGMNU_CPT_ALF)

						REGMNU_2_CPT_ALF = ""
						REGMNU_1_CPT_ALF =  V_M2(MG_12) + "    PIC " + SIGNO$ + "9(" + NUM_2(ENTER$) + ")" + DECIM_EDIT$
 						REGMNU_1_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
 						REGMNU_CPT_ALF = "P" +  CON_NIV_CPT_ALF  + NIV_SEP(SEP_CPT_NUM)  + REGMNU_1_CPT_ALF
						BUFOUT = ESCR_WS1(MG_0,REGMNU_CPT_ALF)

						IF COMPLE$ <> "" AND CPL_NUM_INI <> "S" THEN
							BUFOUT = PUT_CPL_NUM_PT
						END IF

 !!! INI - GUARDA VECTOR DE EDICION
						TOT_NUMER = TOT_NUMER + 1
						VEC_NUMER(TOT_NUMER,CTE_NUMER_REQU) = TPG_VEC_REQ(II_CPT_NUM)
						VEC_NUMER(TOT_NUMER,CTE_NUMER_PTOTP) = "PT"
						VEC_NUMER(TOT_NUMER,CTE_NUMER_NAME) =  "PT-" + TPG_VEC_REQ(II_CPT_NUM) +&
						YY_CPT_ALF + "-" +&
						FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128)
						VEC_NUMER(TOT_NUMER,CTE_NUMER_ENTER) = ENTER$
						VEC_NUMER(TOT_NUMER,CTE_NUMER_DECIM) = DECIM$
						VEC_NUMER(TOT_NUMER,CTE_NUMER_SIGNO) = SIGNO$
						VEC_NUMER(TOT_NUMER,CTE_NUMER_OCCX) = OCC_X$
						VEC_NUMER(TOT_NUMER,CTE_NUMER_OCCY) = OCC_Y$
						VEC_NUMER(TOT_NUMER,CTE_NUMER_OCCZ) = OCC_Z$

 !!! FIN - GUARDA VECTOR DE EDICION
						
					END IF
					NIV_ESC_CPT_NUM = NIV_ESC_CPT_NUM_BKP
					SEP_CPT_NUM = SEP_CPT_NUM_BKP 

 !!! FIN - REDEFINICION DE CAMPOS NUMERICOS PT

					BUFOUT = ESCR_PTX(MG_0,'% NOM     = "' + FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) + '"')
					BUFOUT = ESCR_PTX(MG_0,"% LRG     = " +  NUM_5(AA_CPT_ALF) )
					BUFOUT = ESCR_PTX(MG_0,'% LRG_ALF = "' +  AA_CPT_ALF + '"')

 					IF TPG_MAT_NUM_FLD(HST_CPT_NUM,CAMP_CPT_NUM,VAR_IND_ENT) <> "0" THEN
						BUFOUT = ESCR_PTX(MG_0,'% NUM     = TRUE ') 
					ELSE
						BUFOUT = ESCR_PTX(MG_0,'% NUM     = FALSE ')
					END IF
 !!!					IF TPG_MAT_NUM_FLD(HST_CPT_NUM,CAMP_CPT_NUM,VAR_IND_ENT) <> " " THEN
						BUFOUT = ESCR_PTX(MG_0,'% ENT     = ' + TPG_MAT_NUM_FLD(HST_CPT_NUM,CAMP_CPT_NUM,VAR_IND_ENT))
						IF FNC_SYSRIGHT(TPG_MAT_NUM_FLD(HST_CPT_NUM,CAMP_CPT_NUM,VAR_IND_ENT),2) = "" THEN
							IZQ$ = FNC_SYSLEFT(TPG_MAT_NUM_FLD(HST_CPT_NUM,CAMP_CPT_NUM,VAR_IND_ENT),1)
						ELSE
						IF FNC_SYSRIGHT(TPG_MAT_NUM_FLD(HST_CPT_NUM,CAMP_CPT_NUM,VAR_IND_ENT),3) = "" THEN
							IZQ$ = FNC_SYSLEFT(TPG_MAT_NUM_FLD(HST_CPT_NUM,CAMP_CPT_NUM,VAR_IND_ENT),2)
						END IF
						END IF
						BUFOUT = ESCR_PTX(MG_0,'% ENT_ALF = "' + IZQ$ + '"')
 !!!					END IF

 !!!					IF TPG_MAT_NUM_FLD(HST_CPT_NUM,CAMP_CPT_NUM,VAR_IND_DEC) <> " " THEN
						BUFOUT = ESCR_PTX(MG_0,"% DEC     = " + TPG_MAT_NUM_FLD(HST_CPT_NUM,CAMP_CPT_NUM,VAR_IND_DEC))
						IF FNC_SYSRIGHT(TPG_MAT_NUM_FLD(HST_CPT_NUM,CAMP_CPT_NUM,VAR_IND_DEC),2) = "" THEN
							DEC$ = FNC_SYSLEFT(TPG_MAT_NUM_FLD(HST_CPT_NUM,CAMP_CPT_NUM,VAR_IND_DEC),1)
						ELSE
							IF FNC_SYSRIGHT(TPG_MAT_NUM_FLD(HST_CPT_NUM,CAMP_CPT_NUM,VAR_IND_DEC),3) = "" THEN
								DEC$ = FNC_SYSLEFT(TPG_MAT_NUM_FLD(HST_CPT_NUM,CAMP_CPT_NUM,VAR_IND_DEC),2)
							END IF
						END IF
						BUFOUT = ESCR_PTX(MG_0,'% DEC_ALF = "' + DEC$ + '"')
 !!!					END IF

 !!!					IF TPG_MAT_NUM_FLD(HST_CPT_NUM,CAMP_CPT_NUM,VAR_IND_SIG) <> " " THEN
						SIG$ = FNC_SYSLEFT(TPG_MAT_NUM_FLD(HST_CPT_NUM,CAMP_CPT_NUM,VAR_IND_SIG),1)
						BUFOUT = ESCR_PTX(MG_0,'% SIG     = "' + SIG$ + '"')
						BUFOUT = ESCR_PTX(MG_0,"% INCLUDE  'GNSSRC:FLDMTX.SRC'")
 !!!					END IF
				END IF
			NEXT GG_CPT_NUM
		NEXT JJ_CPT_NUM
		   LRG_ESTR_CPT_NUM = TPG_LRG_RCV_CPT_NUM - LRG_ESTR_CPT_NUM 
		IF LRG_ESTR_CPT_NUM  > 0 THEN
			IF  TPG_LRG_RCV_CPT_NUM = LRG_ESTR_CPT_NUM  THEN
				NIV_ESC_CPT_NUM = NIV_05
			ELSE
				NIV_ESC_CPT_NUM = NIV_03
			END IF
			REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "PT-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" 
			REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +  "FRM-GLS-DISP" + " "
			AA_CPT_ALF = FNC_SYSSTR(LRG_ESTR_CPT_NUM)
			REGMNU_2_CPT_ALF = "PIC X(" +  NUM_5(AA_CPT_ALF) + ")." 
			REGMNU_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
			BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
		ELSE
			ESCRIBE_LOG$ = "N"
			BUFOUT = FNC_PRINT(" ERROR EN PT- PARA REQUERIMIENTO " + TPG_VEC_REQ(II_CPT_NUM)  )
			BUFOUT = FNC_PRINT(" LARGO CALCULADO MAYOR QUE " + FNC_SYSSTR(LRG_ESTR_CPT_NUM) + " " + FNC_SYSSTR(TPG_LRG_RCV_CPT_NUM_PRT))
		END IF
	NEXT II_CPT_NUM

	BUFOUT = PRT_ESTAD
       END DEF

       DEF STRING  FNC_FORM_MXAPT

	PASO_CPT_NUM = PASO_CPT_NUM + 1


	FRS_LRG_XT_CPT_ALF = "SI"
	FOR II_CPT_NUM = 1 TO TPG_TOT_REQ 
		REGMNU_CPT_ALF = " "
		BUFOUT = ESCR_WS1(MG_7,REGMNU_CPT_ALF)
		REGMNU_CPT_ALF = " FORMATO MXAPT"
		BUFOUT = ESCR_WS1(MG_7,REGMNU_CPT_ALF)

		REGMNU_CPT_ALF = " "
		BUFOUT = ESCR_WS1(MG_7,REGMNU_CPT_ALF)
		REGMNU_CPT_ALF = "  =========================== XT-" + TPG_VEC_REQ(II_CPT_NUM)  + " ==========================="
		BUFOUT = ESCR_WS1(MG_7,REGMNU_CPT_ALF)
		REGMNU_CPT_ALF = " "
		BUFOUT = ESCR_WS1(MG_7,REGMNU_CPT_ALF)

		REGMNU_CPT_ALF = "  DOCSER " + TPG_VEC_REQ(II_CPT_NUM)  + " : " + TPG_VEC_DEF_REQ(II_CPT_NUM) 
		BUFOUT = ESCR_WS1(MG_7,REGMNU_CPT_ALF)

		REGMNU_CPT_ALF = "01  XT-" + TPG_VEC_REQ(II_CPT_NUM)  + " " + "REDEFINES WSS-RCV."
		BUFOUT = ESCR_WS1(MG_8,REGMNU_CPT_ALF)

		NIV_ESC_CPT_NUM = NIV_03
		REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "XT-" + TPG_VEC_REQ(II_CPT_NUM)  +"-DMSG."
		BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)

		ANT_CPT_NUM = TPG_MAT_NIV_IDXT(II_CPT_NUM,1,1)
		ANT_CPT_NUM = 0
		OCCUR1_CPT_ALF = "N"
		OCCUR2_CPT_ALF = "N"
		LRG_ESTR_CPT_NUM = 0  
		TPG_CON_TRN = 0

		CON_NIV1_CPT_NUM = 0
		CON_NIV2_CPT_NUM = 0
		CON_NIV_CPT_NUM = 0
		CON_NIV_ANT_CPT_NUM  = 1
		FOR JJ_CPT_NUM = 1 TO TPG_MAT_CAM_XT(II_CPT_NUM)

			TPG_GLS_SIS_CPT_ALF = "&&&"
			TPG_GLS_FRM_CPT_ALF = TPG_MAT_XTFRM(II_CPT_NUM,JJ_CPT_NUM)
			FOR NN_CPT_NUM = 1 TO TPG_TOT_HST
				IF TPG_GLS_FRM_CPT_ALF = TPG_MAT_HST_ALF(NN_CPT_NUM,CTE_IDX_NOM) THEN 
					TPG_GLS_SIS_CPT_ALF = TPG_MAT_HST_ALF(NN_CPT_NUM,CTE_IDX_SIS)
					NN_CPT_NUM = TPG_TOT_HST + 1
				END IF
			NEXT NN_CPT_NUM

			SIS_PAN_CPT_ALF =                          ">> " + TPG_GLS_SIS_CPT_ALF 
			SIS_PAN_CPT_ALF =  SIS_PAN_CPT_ALF + "-" + TPG_GLS_FRM_CPT_ALF 
			AA$ =  FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_CMN),128)
                        IF AA$ = "" THEN
				AA$ = "..."
			END IF
			SIS_PAN_CPT_ALF =  SIS_PAN_CPT_ALF + "-" + AA$
			AA$ = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_INS),128)
                        IF AA$ = "" THEN
				AA$ = "+++"
			END IF
			SIS_PAN_CPT_ALF =  SIS_PAN_CPT_ALF + "-" + AA$
			SIS_PAN_CPT_ALF =  SIS_PAN_CPT_ALF + " ( " + FNC_SYSEDIT(TPG_MAT_XTFMT(II_CPT_NUM, JJ_CPT_NUM ) ,128)+ " )"
			REGMNU_CPT_ALF = SIS_PAN_CPT_ALF
			BUFOUT = ESCR_WS1(MG_7,REGMNU_CPT_ALF)
 
			PUT_HDR_CPT_ALF = "NO"
			OLD_IDX_CPT_ALF = "NO"
			MUL_NIV_UNO_CPT_NUM =  TPG_MAT_NIV_IDXT(II_CPT_NUM,JJ_CPT_NUM,1) 
			IF MUL_NIV_UNO_CPT_NUM =  0 THEN
				MUL_NIV_UNO_CPT_NUM =  1
			END IF
			MUL_NIV_DOS_CPT_NUM = 1
			MUL_NIV_TRE_CPT_NUM = 1
			IF TPG_MAT_NIV_IDXT(II_CPT_NUM,JJ_CPT_NUM,1)  = 0  THEN  
				OCCUR1_CPT_ALF = "N"
			END IF
			IF TPG_MAT_NIV_IDXT(II_CPT_NUM,JJ_CPT_NUM,2)  = 0  THEN  
				OCCUR2_CPT_ALF = "N"
			END IF

			TPG_CON_TRN  = TPG_CON_TRN  + 1
			AA_CPT_ALF = FNC_SYSSTR(TPG_CON_TRN) 
			IF FNC_SYSLEN(AA_CPT_ALF) < 2 THEN
				AA_CPT_ALF = "0" + AA_CPT_ALF
			END IF

			 IF (TPG_MAT_NIV_IDXT(II_CPT_NUM,JJ_CPT_NUM,1) <> ANT_CPT_NUM  AND TPG_MAT_NIV_IDXT(II_CPT_NUM,JJ_CPT_NUM,1) <> 0) THEN
				PRI_IF = "S"
			END IF
			 IF TPG_MAT_INIIDXXT(II_CPT_NUM,JJ_CPT_NUM) = SI_INICIA_IDX_XT AND TPG_MAT_NIV_IDXT(II_CPT_NUM,JJ_CPT_NUM,2)  = 0  THEN
				SEG_IF = "S"
			END IF
			IF PRI_IF = "S" OR SEG_IF = "S" THEN
					REGMNU_CPT_ALF = "05  XT-" + TPG_VEC_REQ(II_CPT_NUM)  +"-DMSG-IDX-1-" + AA_CPT_ALF + " OCCURS" + " " 
					REGMNU_CPT_ALF = REGMNU_CPT_ALF +  FNC_SYSSTR(TPG_MAT_NIV_IDXT(II_CPT_NUM,JJ_CPT_NUM,1)) + " TIMES."
					BUFOUT = ESCR_WS1(MG_16,REGMNU_CPT_ALF)
					OCCUR1_CPT_ALF = "S"
					OCCUR1_CPT_NUM = TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,1) - 1
					PRI_IF = "N"
					SEG_IF = "N"
			END IF


			 IF (TPG_MAT_NIV_IDXT(II_CPT_NUM,JJ_CPT_NUM,2) <> ANT2_CPT_NUM  AND TPG_MAT_NIV_IDXT(II_CPT_NUM,JJ_CPT_NUM,2) <> 0) THEN
				PRI_IF = "S" 
			END IF
			 IF (TPG_MAT_INIIDXXT(II_CPT_NUM,JJ_CPT_NUM) = SI_INICIA_IDX_XT AND TPG_MAT_NIV_IDXT(II_CPT_NUM,JJ_CPT_NUM,2) <> 0) THEN
				SEG_IF = "S" 
			END IF
			IF PRI_IF = "S" OR SEG_IF = "S" THEN
					REGMNU_CPT_ALF = "07  XT-" + TPG_VEC_REQ(II_CPT_NUM)  +"-DMSG-IDX-2-" + AA_CPT_ALF + " OCCURS" + " " 
					REGMNU_CPT_ALF = REGMNU_CPT_ALF +  FNC_SYSSTR(TPG_MAT_NIV_IDXT(II_CPT_NUM,JJ_CPT_NUM,2))  + " TIMES."
					BUFOUT = ESCR_WS1(MG_20,REGMNU_CPT_ALF)
					OCCUR2_CPT_ALF = "S"
					OCCUR2_CPT_NUM = TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,2) - 1
					PRI_IF = "N"
					SEG_IF = "N"
			END IF



			ANT_CPT_NUM = TPG_MAT_NIV_IDXT(II_CPT_NUM,JJ_CPT_NUM,1)
			ANT2_CPT_NUM = TPG_MAT_NIV_IDXT(II_CPT_NUM,JJ_CPT_NUM,2)

			FOR GG_CPT_NUM = 1  TO TPG_TOT_HST 
				IF (TPG_MAT_HST_ALF(GG_CPT_NUM,CTE_IDX_NOM) = TPG_MAT_XTFRM(II_CPT_NUM,JJ_CPT_NUM)) THEN
					HST_CPT_NUM = GG_CPT_NUM
					GG_CPT_NUM = TPG_TOT_HST + 1
				END IF
			NEXT GG_CPT_NUM

			FOR GG_CPT_NUM = 1 TO TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TSF) 
				IF (TPG_MAT_SRV_ALF(HST_CPT_NUM,GG_CPT_NUM) =  FNC_SYSEDIT(TPG_MAT_XTFMT(II_CPT_NUM,JJ_CPT_NUM),128)) THEN
					SRV_CPT_NUM = GG_CPT_NUM
					GG_CPT_NUM = TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TSF) + 1
				END IF
			NEXT GG_CPT_NUM
			FOR GG_CPT_NUM = 1 TO TPG_MAT_NCP_SRV(HST_CPT_NUM,SRV_CPT_NUM)

				N_IDX_CPT_NUM = 0
				FOR XX_CPT_NUM = 1 TO TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TCF)
					IF TPG_MAT_NAMEFLDHST(HST_CPT_NUM,XX_CPT_NUM) = FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) THEN
						N_IDX_CPT_NUM = N_IDX_CPT_NUM + 1
					END IF
				NEXT XX_CPT_NUM
				NN_IDX_CPT_NUM = TPG_MAT_TOTOCCFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM) 


				FOR TT_CPT_NUM = 1 TO TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TCF)
					IF FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) = TPG_MAT_NAMEFLDHST(HST_CPT_NUM,TT_CPT_NUM) THEN
						CAMP_CPT_NUM = TT_CPT_NUM
						TT_CPT_NUM = TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TCF) + 1
					END IF
				NEXT TT_CPT_NUM

				ESCR_CPT_ALF = "SI"
				IF N_IDX_CPT_NUM > 1 THEN
					UU_CPT_NUM = GG_CPT_NUM - 1
					FOR XX_CPT_NUM = 1 TO UU_CPT_NUM
						IF FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,XX_CPT_NUM),128) = FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) THEN
							ESCR_CPT_ALF = "NO"
						END IF
					NEXT XX_CPT_NUM
				END IF

				AA_CPT_ALF = FNC_SYSSTR(TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM)) 
 
				IF OCCUR2_CPT_ALF = "S" THEN
					NIV_ESC_CPT_NUM = NIV_09
				ELSE
					IF OCCUR1_CPT_ALF = "S" THEN
						NIV_ESC_CPT_NUM = NIV_07
					ELSE
						NIV_ESC_CPT_NUM  = NIV_05
					END IF			
				END IF			

				IF OCCUR2_CPT_ALF = "S" THEN
					NUEVE_CPT_ALF = "S"
					 CON_NIV2_CPT_NUM =  CON_NIV2_CPT_NUM + TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM)
					CON_NIV_CPT_NUM =  CON_NIV_CPT_NUM + CON_NIV_ANT_CPT_NUM 
				ELSE
					IF OCCUR1_CPT_ALF = "S" THEN
						SIETE_CPT_ALF = "S"
						IF NUEVE_CPT_ALF = "S" THEN
							 CON_NIV1_CPT_NUM = CON_NIV1_CPT_NUM + (CON_NIV2_CPT_NUM * OCCUR2_CPT_NUM) + TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM)
							CON_NIV_CPT_NUM = CON_NIV_CPT_NUM + (CON_NIV2_CPT_NUM * OCCUR2_CPT_NUM) + CON_NIV_ANT_CPT_NUM 
							CON_NIV2_CPT_NUM = 0
							NUEVE_CPT_ALF = "N"
						ELSE
							 CON_NIV1_CPT_NUM = CON_NIV1_CPT_NUM + TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM)
							CON_NIV_CPT_NUM = CON_NIV_CPT_NUM + CON_NIV_ANT_CPT_NUM 
						END IF 
					ELSE
						IF SIETE_CPT_ALF = "S" THEN
							 CON_NIVV_CPT_NUM = CON_NIV_CPT_NUM  +  (CON_NIV1_CPT_NUM * OCCUR1_CPT_NUM) + CON_NIV_ANT_CPT_NUM 
							 CON_NIV_CPT_NUM = CON_NIV_CPT_NUM  +  (CON_NIV1_CPT_NUM * OCCUR1_CPT_NUM) + CON_NIV_ANT_CPT_NUM 
							CON_NIV1_CPT_NUM = 0
							SIETE_CPT_ALF = "N"
						ELSE
							CON_NIVV_CPT_NUM =  CON_NIVV_CPT_NUM + CON_NIV_ANT_CPT_NUM 
							CON_NIV_CPT_NUM =  CON_NIV_CPT_NUM + CON_NIV_ANT_CPT_NUM 
						END IF
					END IF			
				END IF			

				IF N_IDX_CPT_NUM  > 1 THEN
					OLD_IDX_CPT_ALF = "SI"
					IF PUT_HDR_CPT_ALF = "NO" THEN
						PUT_HDR_CPT_ALF = "SI"
						REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "XT-" + TPG_VEC_REQ(II_CPT_NUM)  
						REGMNU_CPT_ALF = REGMNU_CPT_ALF +  "-FLD-HST OCCURS " + FNC_SYSSTR(N_IDX_CPT_NUM) + " TIMES."
						BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
						MUL_NIV_TRE_CPT_NUM = N_IDX_CPT_NUM
					END IF
					NIV_ESC_CPT_NUM = NIV_ESC_CPT_NUM + 1
				ELSE
					IF OLD_IDX_CPT_ALF = "SI" THEN
						OLD_IDX_CPT_ALF = "NO"
					END IF
				END IF

				CON_NIV_CPT_ALF = FNC_SYSSTR(CON_NIV_CPT_NUM)
				WHILE FNC_SYSLEN(CON_NIV_CPT_ALF) < 5 
					CON_NIV_CPT_ALF = "0" + CON_NIV_CPT_ALF
	     			NEXT
				CON_NIV_ANT_CPT_NUM  =  TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM)

				IF NIV_ESC_CPT_NUM = 5 THEN
					SEP_CPT_NUM = 11
				ELSE
					IF NIV_ESC_CPT_NUM = 6 THEN
						SEP_CPT_NUM = 12
					ELSE
						IF NIV_ESC_CPT_NUM = 7 THEN
							SEP_CPT_NUM = 13
						ELSE
							SEP_CPT_NUM = 14
						END IF
					END IF
				END IF

				 IF ESCR_CPT_ALF = "SI" THEN
					IF ATR_PRT = TPG_CTE_TRUE THEN
						LRG_ATR_PRT = 1
					ELSE
						LRG_ATR_PRT = 0
					END IF

					LRG_ESTR_CPT_NUM  = LRG_ESTR_CPT_NUM  +&
						( ( TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM) + LRG_ATR_PRT ) *&
						  MUL_NIV_UNO_CPT_NUM  * MUL_NIV_DOS_CPT_NUM * MUL_NIV_TRE_CPT_NUM)
					YY_CPT_ALF = FNC_SYSSTR(JJ_CPT_NUM)
					IF FNC_SYSLEN(YY_CPT_ALF) = 1 THEN
						YY_CPT_ALF = "0" + YY_CPT_ALF
					END IF
					YY_CPT_ALF = "-" + YY_CPT_ALF

					GLS_CPT_CMT$ = " DOCFLD : " + FNC_SYSEDIT(TPG_MAT_IDENFLDHST(HST_CPT_NUM,CAMP_CPT_NUM),16%)
					BUFOUT = ESCR_WS1(MG_7,GLS_CPT_CMT$)

					IF ATR_PRT = TPG_CTE_TRUE THEN
						REGMNU_1_CPT_ALF =  NIV_PIC(NIV_ESC_CPT_NUM) 
						REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +  "XT-" + TPG_VEC_REQ(II_CPT_NUM) 
						REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +  YY_CPT_ALF + "-" 
						REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +&
							FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) +&
							"-ATR"
						REGMNU_2_CPT_ALF = "    PIC X(00001)." 
						REGMNU_1_CPT_ALF =&
							GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
						REGMNU_CPT_ALF = "P" +  CON_NIV_CPT_ALF   +&
							NIV_SEP(SEP_CPT_NUM)  + REGMNU_1_CPT_ALF 
						BUFOUT = ESCR_WS1(MG_0,REGMNU_CPT_ALF )
					END IF

					REGMNU_1_CPT_ALF =  NIV_PIC(NIV_ESC_CPT_NUM) 
					REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +  "XT-" + TPG_VEC_REQ(II_CPT_NUM) 
					REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +  YY_CPT_ALF + "-" 
					REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +&
						FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) + " "
					REGMNU_2_CPT_ALF = "PIC X(" +  NUM_5(AA_CPT_ALF) + ")." 
					REGMNU_1_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
					REGMNU_CPT_ALF = "P" +  CON_NIV_CPT_ALF   +  NIV_SEP(SEP_CPT_NUM)  + REGMNU_1_CPT_ALF 
					BUFOUT = ESCR_WS1(MG_0,REGMNU_CPT_ALF )
				END IF
			NEXT GG_CPT_NUM
		NEXT JJ_CPT_NUM
		LRG_XT_TP_CPT_NUM = LRG_ESTR_CPT_NUM 
		LRG_XT_TP_CPT_ALF = FNC_SYSSTR(LRG_XT_TP_CPT_NUM)
		IF FNC_SYSLEN(LRG_XT_TP_CPT_ALF) = 1 THEN
			LRG_XT_TP_CPT_ALF = "0000" + LRG_XT_TP_CPT_ALF
		ELSE
		IF FNC_SYSLEN(LRG_XT_TP_CPT_ALF) = 2 THEN
			LRG_XT_TP_CPT_ALF = "000" + LRG_XT_TP_CPT_ALF
		ELSE
		IF FNC_SYSLEN(LRG_XT_TP_CPT_ALF) = 3 THEN
			LRG_XT_TP_CPT_ALF = "00" + LRG_XT_TP_CPT_ALF
		ELSE
		IF FNC_SYSLEN(LRG_XT_TP_CPT_ALF) = 4 THEN
			LRG_XT_TP_CPT_ALF = "0" + LRG_XT_TP_CPT_ALF
		END IF
		END IF
		END IF
		END IF

		IF FRS_LRG_XT_CPT_ALF = "SI" THEN
			NIV_ESC_CPT_NUM = NIV_01
			REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "TPG-LRG-XT-" + EXTERNO + "."
			BUFOUT = ESCR_WS3(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
			FRS_LRG_XT_CPT_ALF = "NO"
		END IF
		LRG_ESTR_CPT_NUM = TPG_LRG_SND_CPT_NUM - LRG_ESTR_CPT_NUM 
		IF LRG_ESTR_CPT_NUM > 0 THEN
			IF  TPG_LRG_SND_CPT_NUM = LRG_ESTR_CPT_NUM THEN
				NIV_ESC_CPT_NUM = NIV_05
			ELSE
				NIV_ESC_CPT_NUM = NIV_03
			END IF

			REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "XT-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" 
			REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +  "FRM-GLS-DISP" + " "
			AA_CPT_ALF = FNC_SYSSTR(LRG_ESTR_CPT_NUM) 
			REGMNU_2_CPT_ALF = "PIC X(" +  NUM_5(AA_CPT_ALF) + ")." 
			REGMNU_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
			BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
	
			NIV_ESC_CPT_NUM = NIV_03
			REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "TPG-LRG-XT-" + TPG_VEC_REQ(II_CPT_NUM) + "     VALUE  " + LRG_XT_TP_CPT_ALF 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF +  " PIC 9(05)."
			BUFOUT = ESCR_WS3(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
		ELSE
			ESCRIBE_LOG$ = "N"
			BUFOUT = FNC_PRINT(" ERROR EN XT- PARA REQUERIMIENTO " + TPG_VEC_REQ(II_CPT_NUM)  )
			BUFOUT = FNC_PRINT(" LARGO CALCULADO MAYOR QUE " + FNC_SYSSTR(LRG_ESTR_CPT_NUM) + " " + FNC_SYSSTR(TPG_LRG_SND_CPT_NUM))
		END IF
	NEXT II_CPT_NUM
	BUFOUT = PRT_ESTAD

   END DEF

        DEF STRING  FNC_MOV_PTAMX
	FIRST_CPT_NUM = 1

	FOR II_CPT_NUM = 1 TO TPG_TOT_REQ
		OCC_X$ = ""
		OCC_Y$ = ""
		OCC_Z$ = ""
		 REGMNU_CPT_ALF = " "
		BUFOUT = ESCR_WS2(MG_7,REGMNU_CPT_ALF)
		IF FIRST_CPT_NUM = 1 THEN
			FIRST_CPT_NUM = 0
		END IF
		ANTE_CPT_ALF = " "

		REGMNU_CPT_ALF = " "
		BUFOUT = ESCR_WS2(MG_7,REGMNU_CPT_ALF)
		REGMNU_CPT_ALF = "  =========================== TP-" + TPG_VEC_REQ(II_CPT_NUM)  + " ==========================="
		BUFOUT = ESCR_WS2(MG_7,REGMNU_CPT_ALF)
		REGMNU_CPT_ALF = " "
		BUFOUT = ESCR_WS2(MG_7,REGMNU_CPT_ALF)

		REGMNU_CPT_ALF = "  DOCSER " + TPG_VEC_REQ(II_CPT_NUM)  + " : " + TPG_VEC_DEF_REQ(II_CPT_NUM) 
		BUFOUT = ESCR_WS2(MG_7,REGMNU_CPT_ALF)
		BUFOUT = ESCR_PTX(MG_0,'% NOM = "' + REGMNU_CPT_ALF + '"')

		REGMNU_CPT_ALF = "01  TP-" + TPG_VEC_REQ(II_CPT_NUM)  + " " + "REDEFINES WSS-SND."
		BUFOUT = ESCR_WS2(MG_8,REGMNU_CPT_ALF)

		BUFOUT = ESCR_PTX(NIV_MRG(0), "%!" )
		BUFOUT = ESCR_PTX(NIV_MRG(0), "% REQ = " + TPG_VEC_REQ(II_CPT_NUM))
		BUFOUT = ESCR_PTX(NIV_MRG(0), "% TIP_INP = FALSE" )
		BUFOUT = ESCR_PTX(NIV_MRG(0), "%!" )

		CON_NIV_CPT_NUM = 0
		CON_NIV_CPT_NUM = CON_NIV_CPT_NUM  + 1
		CON_NIV_CPT_ALF = FNC_SYSSTR(CON_NIV_CPT_NUM)
		WHILE FNC_SYSLEN(CON_NIV_CPT_ALF) < 5 
			CON_NIV_CPT_ALF = "0" + CON_NIV_CPT_ALF
	        NEXT

		NIV_ESC_CPT_NUM = NIV_03

		 REGMNU_1_CPT_ALF = "03  TP-" + TPG_VEC_REQ(II_CPT_NUM)  + "-STAT "
		REGMNU_2_CPT_ALF = "PIC X(00001)."
		REGMNU_1_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,MG_12)
		 REGMNU_CPT_ALF =  "P" +  CON_NIV_CPT_ALF  + NIV_SEP(10) + REGMNU_1_CPT_ALF
		   BUFOUT = ESCR_WS2(MG_0,REGMNU_CPT_ALF)
		CON_NIV_ANT_CPT_NUM = 1

		CON_NIV_CPT_NUM = CON_NIV_CPT_NUM  + 1
		CON_NIV_CPT_ALF = FNC_SYSSTR(CON_NIV_CPT_NUM)
		WHILE FNC_SYSLEN(CON_NIV_CPT_ALF) < 5 
			CON_NIV_CPT_ALF = "0" + CON_NIV_CPT_ALF
	        NEXT

		REGMNU_1_CPT_ALF = "03  TP-" + TPG_VEC_REQ(II_CPT_NUM)  + "-MENS "
		REGMNU_2_CPT_ALF = "PIC X(00079)."
		REGMNU_1_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,MG_12)
		 REGMNU_CPT_ALF =  "P" +  CON_NIV_CPT_ALF  + NIV_SEP(10) + REGMNU_1_CPT_ALF
		 BUFOUT = ESCR_WS2(MG_0,REGMNU_CPT_ALF)
		CON_NIV_ANT_CPT_NUM = 79

		REGMNU_CPT_ALF = "03  TP-" + TPG_VEC_REQ(II_CPT_NUM)  +"-DMSG."
		BUFOUT = ESCR_WS2(MG_12,REGMNU_CPT_ALF)
		ANT_CPT_NUM = TPG_MAT_NIV_IDTP(II_CPT_NUM,1,1)
		ANT_CPT_NUM = 0
		TPG_CON_TRN = 0
		OCCUR1_CPT_ALF = "N"
		OCCUR2_CPT_ALF = "N"
		LRG_ESTR_CPT_NUM = 80
		MUL_NIV_UNO_CPT_NUM =  TPG_MAT_NIV_IDTP(II_CPT_NUM, 1, 1) 
		IF MUL_NIV_UNO_CPT_NUM =  0 THEN
			MUL_NIV_UNO_CPT_NUM =  1
		END IF
		MUL_NIV_DOS_CPT_NUM = 1
		MUL_NIV_TRE_CPT_NUM = 1
		FOR JJ_CPT_NUM = 1 TO TPG_MAT_CAM_TP(II_CPT_NUM) 

			TPG_GLS_SIS_CPT_ALF = "&&&"
			TPG_GLS_FRM_CPT_ALF = FNC_SYSEDIT(TPG_MAT_TPFRM(II_CPT_NUM,JJ_CPT_NUM),128) 
			FOR NN_CPT_NUM = 1 TO TPG_TOT_HST
				IF TPG_GLS_FRM_CPT_ALF = TPG_MAT_HST_ALF(NN_CPT_NUM,CTE_IDX_NOM) THEN 
					TPG_GLS_SIS_CPT_ALF = TPG_MAT_HST_ALF(NN_CPT_NUM,CTE_IDX_SIS)
					NN_CPT_NUM = TPG_TOT_HST + 1
				END IF
			NEXT NN_CPT_NUM

			SIS_PAN_CPT_ALF =                          ">> " + TPG_GLS_SIS_CPT_ALF 
			SIS_PAN_CPT_ALF =  SIS_PAN_CPT_ALF + "-" + TPG_GLS_FRM_CPT_ALF 
			AA$ =  FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_CMN),128)
                        IF AA$ = "" THEN
				AA$ = "..."
			END IF
			SIS_PAN_CPT_ALF =  SIS_PAN_CPT_ALF + "-" + AA$
			AA$ = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_INS),128)
                        IF AA$ = "" THEN
				AA$ = "+++"
			END IF
			SIS_PAN_CPT_ALF =  SIS_PAN_CPT_ALF + "-" + AA$
			SIS_PAN_CPT_ALF =  SIS_PAN_CPT_ALF + " ( " + FNC_SYSEDIT(TPG_MAT_TPFMT(II_CPT_NUM, JJ_CPT_NUM ) ,128)+ " )"

			REGMNU_CPT_ALF = SIS_PAN_CPT_ALF
			BUFOUT = ESCR_WS2(MG_7,REGMNU_CPT_ALF)
			BUFOUT = ESCR_PTX(NIV_MRG(0),"%! " + SIS_PAN_CPT_ALF)

			PUT_HDR_CPT_ALF = "NO"
			OLD_IDX_CPT_ALF = "NO"
			IF TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,1)  = 0  THEN  
				OCCUR1_CPT_ALF = "N"
				REPT_CPT_ALF = " "
			END IF
			IF TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,2)  = 0  THEN  
				OCCUR2_CPT_ALF = "N"
			END IF
			TPG_CON_TRN  = TPG_CON_TRN  + 1
			AA_CPT_ALF = FNC_SYSSTR(TPG_CON_TRN) 
			IF FNC_SYSLEN(AA_CPT_ALF) < 2 THEN
				AA_CPT_ALF = "0" + AA_CPT_ALF
			END IF
			 IF (TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,1) <> ANT_CPT_NUM  AND TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,1) <> 0) THEN
				PRI_IF = "S"
			END IF
			 IF TPG_MAT_INIIDXTP(II_CPT_NUM,JJ_CPT_NUM) = SI_INICIA_IDX_TP AND TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,2)  = 0  THEN
				SEG_IF = "S"
			END IF
			IF PRI_IF = "S" OR SEG_IF = "S" THEN
					OCC_X$ = FNC_SYSSTR(TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,1)) 
					REGMNU_CPT_ALF = "05  TP-" + TPG_VEC_REQ(II_CPT_NUM)  +"-DMSG-IDX-1-" + AA_CPT_ALF + " OCCURS" + " " 
					REGMNU_CPT_ALF = REGMNU_CPT_ALF +  FNC_SYSSTR(TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,1)) + " TIMES."
					BUFOUT = ESCR_WS2(MG_16,REGMNU_CPT_ALF)
					REPT_CPT_ALF = FNC_SYSSTR(TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,1)) 
					OCCUR1_CPT_ALF = "S"
					MUL_NIV_UNO_CPT_NUM =  TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,1) 
					MULT1_CPT_NUM = TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,1) - 1
					OCCUR1_CPT_NUM = TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,1) - 1
					PRI_IF = "N"
					SEG_IF = "N"
			END IF



			IF (TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,2) <> ANT2_CPT_NUM  AND TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,2) <> 0) THEN
				PRI_IF = "S"
			END IF
			 IF (TPG_MAT_INIIDXTP(II_CPT_NUM,JJ_CPT_NUM) = SI_INICIA_IDX_TP AND TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,2) <> 0) THEN
				SEG_IF = "S"
			END IF
  
			IF PRI_IF = "S" OR SEG_IF = "S" THEN
				IF OCC_X$ = "" THEN
					OCC_X$ = FNC_SYSSTR(TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,2))  
				ELSE
					OCC_Y$ = FNC_SYSSTR(TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,2))  
				END IF
					REGMNU_CPT_ALF = "07  TP-" + TPG_VEC_REQ(II_CPT_NUM)  +"-DMSG-IDX-2-" + AA_CPT_ALF + " OCCURS" + " " 
					REGMNU_CPT_ALF = REGMNU_CPT_ALF +  FNC_SYSSTR(TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,2))  + " TIMES."
					BUFOUT = ESCR_WS2(MG_20,REGMNU_CPT_ALF)
					REPT_CPT_ALF = FNC_SYSSTR(TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,2)) 
					OCCUR2_CPT_ALF = "S"
					MUL_NIV_DOS_CPT_NUM =  TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,2) 
					MULT2_CPT_NUM = TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,1) - 1
					OCCUR1_CPT_NUM = TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,1) - 1
					PRI_IF = "N"
					SEG_IF = "N"
			END IF



			ANT_CPT_NUM = TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,1)
			ANT2_CPT_NUM = TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,2)

			FOR GG_CPT_NUM = 1 TO TPG_TOT_HST
				TPGMATTPFRM_CPT_ALF = FNC_SYSEDIT(TPG_MAT_TPFRM(II_CPT_NUM,JJ_CPT_NUM),128)
				IF (TPG_MAT_HST_ALF(GG_CPT_NUM,CTE_IDX_NOM) = TPGMATTPFRM_CPT_ALF) THEN
					HST_CPT_NUM = GG_CPT_NUM
					GG_CPT_NUM = TPG_TOT_HST + 1
				END IF
			NEXT GG_CPT_NUM

			FOR GG_CPT_NUM = 1 TO TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TSF) 
				TPGMATTPFMT = FNC_SYSEDIT(TPG_MAT_TPFMT(II_CPT_NUM,JJ_CPT_NUM),128)
				IF TPG_MAT_SRV_ALF(HST_CPT_NUM,GG_CPT_NUM) =  TPGMATTPFMT THEN
					SRV_CPT_NUM = GG_CPT_NUM
					GG_CPT_NUM = TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TSF) + 1
				END IF
			NEXT GG_CPT_NUM
			FOR GG_CPT_NUM = 1 TO TPG_MAT_NCP_SRV(HST_CPT_NUM,SRV_CPT_NUM)
				N_IDX_CPT_NUM = 0
				FOR XX_CPT_NUM = 1 TO TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TCF)
					IF TPG_MAT_NAMEFLDHST(HST_CPT_NUM,XX_CPT_NUM) = FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) THEN
						N_IDX_CPT_NUM = N_IDX_CPT_NUM + 1
					END IF
				NEXT XX_CPT_NUM
				NN_IDX_CPT_NUM = TPG_MAT_TOTOCCFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM) 

				FOR TT_CPT_NUM = 1 TO TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TCF)
					IF FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) = TPG_MAT_NAMEFLDHST(HST_CPT_NUM,TT_CPT_NUM) THEN
						CAMP_CPT_NUM = TT_CPT_NUM
						TT_CPT_NUM = TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TCF) + 1
					END IF
				NEXT TT_CPT_NUM

				ESCR_CPT_ALF = "SI"
				IF N_IDX_CPT_NUM > 1 THEN
					UU_CPT_NUM = GG_CPT_NUM - 1
					FOR XX_CPT_NUM = 1 TO UU_CPT_NUM
						IF FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,XX_CPT_NUM),128) = FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) THEN
							ESCR_CPT_ALF = "NO"
						END IF
					NEXT XX_CPT_NUM
				END IF


				AA_CPT_ALF = FNC_SYSSTR(TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM)) 
				LARGO_FLD_TP% =         TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM)

				IF OCCUR2_CPT_ALF = "S" THEN
					NIV_ESC_CPT_NUM = NIV_09
				ELSE
					IF OCCUR1_CPT_ALF = "S" THEN
						NIV_ESC_CPT_NUM = NIV_07
					ELSE
						NIV_ESC_CPT_NUM  = NIV_05
					END IF			
				END IF			

				IF OCCUR2_CPT_ALF = "S" THEN
					NUEVE_CPT_ALF = "S"
					 CON_NIV2_CPT_NUM =  CON_NIV2_CPT_NUM + TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM)
					CON_NIV_CPT_NUM =  CON_NIV_CPT_NUM + CON_NIV_ANT_CPT_NUM 
				ELSE
					IF OCCUR1_CPT_ALF = "S" THEN
						SIETE_CPT_ALF = "S"
						IF NUEVE_CPT_ALF = "S" THEN
							CON_NIV1_CPT_NUM = CON_NIV_CPT_NUM + (CON_NIV2_CPT_NUM * OCCUR2_CPT_NUM) + TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM)
							CON_NIV_CPT_NUM = CON_NIV_CPT_NUM + (CON_NIV2_CPT_NUM * OCCUR2_CPT_NUM) + CON_NIV_ANT_CPT_NUM 
							CON_NIV2_CPT_NUM = 0
							NUEVE_CPT_ALF = "N"
						ELSE
							CON_NIV1_CPT_NUM = CON_NIV1_CPT_NUM + TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM)
							CON_NIV_CPT_NUM = CON_NIV_CPT_NUM + CON_NIV_ANT_CPT_NUM 
						END IF 
					ELSE
						IF SIETE_CPT_ALF = "S" THEN
							 CON_NIVV_CPT_NUM = CON_NIV_CPT_NUM  +  (CON_NIV1_CPT_NUM * OCCUR1_CPT_NUM) + CON_NIV_ANT_CPT_NUM 
							 CON_NIV_CPT_NUM = CON_NIV_CPT_NUM  +  (CON_NIV1_CPT_NUM * OCCUR1_CPT_NUM) + CON_NIV_ANT_CPT_NUM 
							CON_NIV1_CPT_NUM = 0
							SIETE_CPT_ALF = "N"
						ELSE
							CON_NIVV_CPT_NUM =  CON_NIVV_CPT_NUM + CON_NIV_ANT_CPT_NUM 
							CON_NIV_CPT_NUM =  CON_NIV_CPT_NUM + CON_NIV_ANT_CPT_NUM 
						END IF
					END IF			
				END IF			

				 CON_NIV_CPT_ALF = FNC_SYSSTR(CON_NIV_CPT_NUM)
				WHILE FNC_SYSLEN(CON_NIV_CPT_ALF) < 5 
					CON_NIV_CPT_ALF = "0" + CON_NIV_CPT_ALF
	     			NEXT
				CON_NIV_ANT_CPT_NUM  =  TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM)

				IF N_IDX_CPT_NUM  > 1 THEN
					OLD_IDX_CPT_ALF = "SI"
					IF PUT_HDR_CPT_ALF = "NO" THEN
						IF OCC_X$ = "" THEN
							OCC_X$ = FNC_SYSSTR(N_IDX_CPT_NUM) 
						ELSE
						IF OCC_Y$ = "" THEN
							OCC_Y$ = FNC_SYSSTR(N_IDX_CPT_NUM) 
						ELSE
							OCC_Z$ = FNC_SYSSTR(N_IDX_CPT_NUM) 
						END IF
						END IF
						PUT_HDR_CPT_ALF = "SI"
						REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "TP-" + TPG_VEC_REQ(II_CPT_NUM)  
						REGMNU_CPT_ALF = REGMNU_CPT_ALF +  "-FLD-HST OCCURS " + FNC_SYSSTR(N_IDX_CPT_NUM) + " TIMES."
						BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
						MUL_NIV_TRE_CPT_NUM = N_IDX_CPT_NUM
					END IF
					NIV_ESC_CPT_NUM = NIV_ESC_CPT_NUM + 1
				ELSE
					IF OLD_IDX_CPT_ALF = "SI" THEN
						OLD_IDX_CPT_ALF = "NO"
					END IF
				END IF

 !!!					PRINT "EN TP CAMPO " ; FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) ;&
 !!!						"OCC_X*";  OCC_X$ ; "*   OCC_Y*";  OCC_Y$ ; "*    OCC_Z  *";  OCC_Z$ ;&
 !!!					"*   --> " ; NIV_PIC(NIV_ESC_CPT_NUM) ; " NIVEL --> " ; NIV_ESC_CPT_NUM

					IF NIV_ESC_CPT_NUM = 5 THEN
						OCC_X$ = ""
						OCC_Y$ = ""
						OCC_Z$ = ""
					ELSE
					IF NIV_ESC_CPT_NUM = 6 THEN
						OCC_Y$ = ""
						OCC_Z$ = ""
					ELSE
					IF NIV_ESC_CPT_NUM = 7 THEN
						OCC_Z$ = ""
					END IF
					END IF
					END IF
				IF NIV_ESC_CPT_NUM = 5 THEN
					SEP_CPT_NUM = 11
				ELSE
					IF NIV_ESC_CPT_NUM = 6 THEN
						SEP_CPT_NUM = 12
					ELSE
						IF NIV_ESC_CPT_NUM = 7 THEN
							SEP_CPT_NUM = 13
						ELSE
							SEP_CPT_NUM = 14
						END IF
					END IF
				END IF

				IF ESCR_CPT_ALF = "SI" THEN
					IF ATR_PRT = TPG_CTE_TRUE THEN
						LRG_ATR_PRT = 1
					ELSE
						LRG_ATR_PRT = 0
					END IF

					LRG_ESTR_CPT_NUM  = LRG_ESTR_CPT_NUM  +&
						(( TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM) + LRG_ATR_PRT ) *&
						MUL_NIV_UNO_CPT_NUM  * MUL_NIV_DOS_CPT_NUM * MUL_NIV_TRE_CPT_NUM)
					YY_CPT_ALF = FNC_SYSSTR(JJ_CPT_NUM)
					IF FNC_SYSLEN(YY_CPT_ALF) = 1 THEN
						YY_CPT_ALF = "0" + YY_CPT_ALF
					END IF
					YY_CPT_ALF = "-" + YY_CPT_ALF

					GLS_CPT_CMT$ = " DOCFLD : " + FNC_SYSEDIT(TPG_MAT_IDENFLDHST(HST_CPT_NUM,CAMP_CPT_NUM),16%)
					BUFOUT = ESCR_WS2(MG_7,GLS_CPT_CMT$)
					BUFOUT = ESCR_PTX(MG_0,"%!")
					BUFOUT = ESCR_PTX(MG_0,'% GLS     = "' + FNC_SYSEDIT(TPG_MAT_IDENFLDHST(HST_CPT_NUM,CAMP_CPT_NUM),16%) + '"')
					IF N_IDX_CPT_NUM > 1 THEN
						BUFOUT = ESCR_PTX(NIV_MRG(0),"% IND_IDX =  TRUE ")
					ELSE
						BUFOUT = ESCR_PTX(NIV_MRG(0),"% IND_IDX =  FALSE ")
					END IF
					XX$ =  FNC_SYSSTR(N_IDX_CPT_NUM)
					BUFOUT = ESCR_PTX(NIV_MRG(0),"% IDX     = " + XX$)

					IF ATR_PRT = TPG_CTE_TRUE THEN
						REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "TP-" + TPG_VEC_REQ(II_CPT_NUM)  
						REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF + YY_CPT_ALF + "-" 
						REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +&
							FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) +&
								"-ATR"
						REGMNU_2_CPT_ALF = "PIC X(00001)." 
						REGMNU_1_CPT_ALF =&
							GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
						REGMNU_CPT_ALF =  "P" +  CON_NIV_CPT_ALF  + NIV_SEP(SEP_CPT_NUM) + REGMNU_1_CPT_ALF

						BUFOUT = ESCR_WS2(MG_0,REGMNU_CPT_ALF)
					END IF

					REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "TP-" + TPG_VEC_REQ(II_CPT_NUM)  
					REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +  YY_CPT_ALF + "-" 
					REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +&
						FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) + " "
					REGMNU_2_CPT_ALF = "PIC X(" +  NUM_5(AA_CPT_ALF) + ")." 
					REGMNU_1_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
					REGMNU_CPT_ALF =  "P" +  CON_NIV_CPT_ALF  + NIV_SEP(SEP_CPT_NUM) + REGMNU_1_CPT_ALF

					BUFOUT = ESCR_WS2(MG_0,REGMNU_CPT_ALF)



 !!! INI - REDEFINICION DE CAMPOS NUMERICOS TP

					NIV_ESC_CPT_NUM_BKP = NIV_ESC_CPT_NUM
					SEP_CPT_NUM_BKP = SEP_CPT_NUM 

					IF TPG_MAT_TIP_NUM(HST_CPT_NUM,CAMP_CPT_NUM) = "9" THEN

						REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) 
						REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF + "TP-" + TPG_VEC_REQ(II_CPT_NUM)  
						REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF + YY_CPT_ALF + "-" 
						REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +&
							FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) +&
							"-R REDEFINES"
						REGMNU_2_CPT_ALF = ""
						REGMNU_1_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
						REGMNU_CPT_ALF = "P" +  CON_NIV_CPT_ALF  + NIV_SEP(SEP_CPT_NUM)  + REGMNU_1_CPT_ALF
						BUFOUT = ESCR_WS2(MG_0,REGMNU_CPT_ALF)

						REGMNU_1_CPT_ALF = "    TP-" + TPG_VEC_REQ(II_CPT_NUM) +&
								YY_CPT_ALF + "-" +&
							FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(  HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128)+&
							"."
						REGMNU_2_CPT_ALF = ""

 						REGMNU_1_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
 						REGMNU_CPT_ALF = "P" +  CON_NIV_CPT_ALF  + NIV_SEP(SEP_CPT_NUM)  + REGMNU_1_CPT_ALF
						BUFOUT = ESCR_WS2(MG_0,REGMNU_CPT_ALF)

						NIV_ESC_CPT_NUM = NIV_ESC_CPT_NUM + 1
						IF NIV_ESC_CPT_NUM = 5 THEN
							SEP_CPT_NUM = 11
						ELSE
						IF NIV_ESC_CPT_NUM = 6 THEN
							SEP_CPT_NUM = 12
						ELSE
						IF NIV_ESC_CPT_NUM = 7 THEN
							SEP_CPT_NUM = 13
						ELSE
							SEP_CPT_NUM = 14
						END IF
						END IF
						END IF

						ENTER$ = FNC_SYSEDIT(TPG_MAT_NUM_FLD( hst_cpt_num, camp_cpt_num ,VAR_IND_ENT),128)
						LARGO_ENT% = INTEGER(ENTER$)
						DECIM$ = FNC_SYSEDIT(TPG_MAT_NUM_FLD( hst_cpt_num, camp_cpt_num ,VAR_IND_dec),128)
						LARGO_DEC% = INTEGER(DECIM$)
						SIGNO$ = FNC_SYSEDIT(TPG_MAT_NUM_FLD( hst_cpt_num, camp_cpt_num ,VAR_IND_sig),128)
						IF SIGNO$ <> "S" THEN
							SIGNO$ = " "
						END IF

						IF LARGO_ENT% + LARGO_DEC% < LARGO_FLD_TP% THEN
							COMPLE$ = STR$(LARGO_FLD_TP% - ( LARGO_ENT% + LARGO_DEC% ))
						ELSE
							COMPLE$ = ""
						END IF

						IF DECIM$ <> "0" THEN
							DECIM_EDIT$ = "V9(" + NUM_2(DECIM$) + ")."
						ELSE
							DECIM_EDIT$ = "."
						END IF

						IF COMPLE$ <> "" AND CPL_NUM_INI = "S" THEN
							BUFOUT = PUT_CPL_NUM_TP
						END IF
						REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) 
						REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF + "TP-" + TPG_VEC_REQ(II_CPT_NUM)  
						REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF + YY_CPT_ALF + "-" 
						REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +&
							FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) +&
							"-NUM  "
						REGMNU_2_CPT_ALF = ""
 						REGMNU_1_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
 						REGMNU_CPT_ALF = "P" +  CON_NIV_CPT_ALF  + NIV_SEP(SEP_CPT_NUM)  + REGMNU_1_CPT_ALF
						BUFOUT = ESCR_WS2(MG_0,REGMNU_CPT_ALF)

						REGMNU_1_CPT_ALF =  V_M2(MG_12) + "    PIC " + SIGNO$ + "9(" + NUM_2(ENTER$) + ")" + DECIM_EDIT$
						REGMNU_2_CPT_ALF = ""

 						REGMNU_1_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
 						REGMNU_CPT_ALF = "P" +  CON_NIV_CPT_ALF  + NIV_SEP(SEP_CPT_NUM)  + REGMNU_1_CPT_ALF
						BUFOUT = ESCR_WS2(MG_0,REGMNU_CPT_ALF)

						IF COMPLE$ <> "" AND CPL_NUM_INI <> "S" THEN
							BUFOUT = PUT_CPL_NUM_TP
						END IF
 !!! INI - GUARDA VECTOR DE EDICION
						TOT_NUMER = TOT_NUMER + 1
						VEC_NUMER(TOT_NUMER,CTE_NUMER_REQU) = TPG_VEC_REQ(II_CPT_NUM)
						VEC_NUMER(TOT_NUMER,CTE_NUMER_PTOTP) = "TP"
						VEC_NUMER(TOT_NUMER,CTE_NUMER_NAME) =  "TP-" + TPG_VEC_REQ(II_CPT_NUM) +&
						YY_CPT_ALF + "-" +&
						FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128)
						VEC_NUMER(TOT_NUMER,CTE_NUMER_ENTER) = ENTER$
						VEC_NUMER(TOT_NUMER,CTE_NUMER_DECIM) = DECIM$
						VEC_NUMER(TOT_NUMER,CTE_NUMER_SIGNO) = SIGNO$
						VEC_NUMER(TOT_NUMER,CTE_NUMER_OCCX) = OCC_X$
						VEC_NUMER(TOT_NUMER,CTE_NUMER_OCCY) = OCC_Y$
						VEC_NUMER(TOT_NUMER,CTE_NUMER_OCCZ) = OCC_Z$
 !!! FIN - GUARDA VECTOR DE EDICION
						
					END IF
					NIV_ESC_CPT_NUM = NIV_ESC_CPT_NUM_BKP
					SEP_CPT_NUM = SEP_CPT_NUM_BKP 

 !!! FIN - REDEFINICION DE CAMPOS NUMERICOS TP

					BUFOUT = ESCR_PTX(MG_0,'% NOM     = "' + FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) + '"')
					BUFOUT = ESCR_PTX(MG_0,"% LRG     = " +  NUM_5(AA_CPT_ALF) )
					BUFOUT = ESCR_PTX(MG_0,'% LRG     = "' +  AA_CPT_ALF + '"' )

 !!!					IF TPG_MAT_NUM_FLD(HST_CPT_NUM,CAMP_CPT_NUM,VAR_IND_ENT) <> " " THEN
						BUFOUT = ESCR_PTX(MG_0,"% ENT     = " + TPG_MAT_NUM_FLD(HST_CPT_NUM,CAMP_CPT_NUM,VAR_IND_ENT))
						IF FNC_SYSRIGHT(TPG_MAT_NUM_FLD(HST_CPT_NUM,CAMP_CPT_NUM,VAR_IND_ENT),2) = "" THEN
							DEC$ = FNC_SYSLEFT(TPG_MAT_NUM_FLD(HST_CPT_NUM,CAMP_CPT_NUM,VAR_IND_ENT),1)
						ELSE
							IF FNC_SYSRIGHT(TPG_MAT_NUM_FLD(HST_CPT_NUM,CAMP_CPT_NUM,VAR_IND_ENT),3) = "" THEN
								DEC$ = FNC_SYSLEFT(TPG_MAT_NUM_FLD(HST_CPT_NUM,CAMP_CPT_NUM,VAR_IND_ENT),2)
							END IF
						END IF
						BUFOUT = ESCR_PTX(MG_0,'% ENT_ALF = "' + DEC$ + '"')
 !!!					END IF

 !!!					IF TPG_MAT_NUM_FLD(HST_CPT_NUM,CAMP_CPT_NUM,VAR_IND_DEC) <> " " THEN
						BUFOUT = ESCR_PTX(MG_0,"% DEC     = " + TPG_MAT_NUM_FLD(HST_CPT_NUM,CAMP_CPT_NUM,VAR_IND_DEC))
						IF FNC_SYSRIGHT(TPG_MAT_NUM_FLD(HST_CPT_NUM,CAMP_CPT_NUM,VAR_IND_DEC),2) = "" THEN
							DEC$ = FNC_SYSLEFT(TPG_MAT_NUM_FLD(HST_CPT_NUM,CAMP_CPT_NUM,VAR_IND_DEC),1)
						ELSE
							IF FNC_SYSRIGHT(TPG_MAT_NUM_FLD(HST_CPT_NUM,CAMP_CPT_NUM,VAR_IND_DEC),3) = "" THEN
								DEC$ = FNC_SYSLEFT(TPG_MAT_NUM_FLD(HST_CPT_NUM,CAMP_CPT_NUM,VAR_IND_DEC),2)
							END IF
						END IF
						BUFOUT = ESCR_PTX(MG_0,'% DEC_ALF = "' + DEC$ + '"')
 !!!					END IF

 !!!					IF TPG_MAT_NUM_FLD(HST_CPT_NUM,CAMP_CPT_NUM,VAR_IND_SIG) <> " " THEN
						SIG$ = FNC_SYSLEFT(TPG_MAT_NUM_FLD(HST_CPT_NUM,CAMP_CPT_NUM,VAR_IND_SIG),1)
						BUFOUT = ESCR_PTX(MG_0,'% SIG     = "' + SIG$ + '"')
						BUFOUT = ESCR_PTX(MG_0,"% INCLUDE  'GNSSRC:FLDMTX.SRC'")
 !!!					END IF


					SEP_ANT_CPT_NUM = SEP_CPT_NUM

				END IF
			NEXT GG_CPT_NUM
		NEXT JJ_CPT_NUM
		LRG_PT_TX_CPT_NUM = LRG_ESTR_CPT_NUM - 80
		LRG_PT_TX_CPT_ALF = FNC_SYSSTR(LRG_PT_TX_CPT_NUM)
		IF FNC_SYSLEN(LRG_PT_TX_CPT_ALF) = 1 THEN
			LRG_PT_TX_CPT_ALF = "0000" + LRG_PT_TX_CPT_ALF 
		ELSE
		IF FNC_SYSLEN(LRG_PT_TX_CPT_ALF) = 2 THEN
			LRG_PT_TX_CPT_ALF = "000" + LRG_PT_TX_CPT_ALF 
		ELSE
		IF FNC_SYSLEN(LRG_PT_TX_CPT_ALF) = 3 THEN
			LRG_PT_TX_CPT_ALF = "00" + LRG_PT_TX_CPT_ALF 
		ELSE
		IF FNC_SYSLEN(LRG_PT_TX_CPT_ALF) = 4 THEN
			LRG_PT_TX_CPT_ALF = "0" + LRG_PT_TX_CPT_ALF 
		END IF
		END IF
		END IF
		END IF
		LRG_ESTR_CPT_NUM = TPG_LRG_SND_CPT_NUM - LRG_ESTR_CPT_NUM 
		IF LRG_ESTR_CPT_NUM > 0 THEN
			IF  TPG_LRG_SND_CPT_NUM = (LRG_ESTR_CPT_NUM + 80) THEN
				NIV_ESC_CPT_NUM = NIV_05
			ELSE
				NIV_ESC_CPT_NUM = NIV_03
			END IF
			REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "TP-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" 
			REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +  "FRM-GLS-DISP" + " "
			AA_CPT_ALF = FNC_SYSSTR(LRG_ESTR_CPT_NUM) 
			REGMNU_2_CPT_ALF = "PIC X(" +  NUM_5(AA_CPT_ALF) + ")." 
			REGMNU_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
			BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
			NIV_ESC_CPT_NUM = NIV_03
			REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) +  "TPG-LRG-TP-" + TPG_VEC_REQ(II_CPT_NUM)  + "     VALUE  " 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF +  LRG_PT_TX_CPT_ALF +  " PIC 9(05)."
			BUFOUT = ESCR_WS3(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
		ELSE
			ESCRIBE_LOG$ = "N"
			BUFOUT = FNC_PRINT(" ERROR EN TP- PARA REQUERIMIENTO " + TPG_VEC_REQ(II_CPT_NUM)  )
			BUFOUT = FNC_PRINT(" LARGO CALCULADO MAYOR QUE " + FNC_SYSSTR(LRG_ESTR_CPT_NUM) + " " + FNC_SYSSTR(TPG_LRG_SND_CPT_NUM_PRT))
		END IF
	NEXT II_CPT_NUM

	FOR II_CPT_NUM = 1 TO TPG_TOT_REQ 
		REGMNU_CPT_ALF = " "
		BUFOUT = ESCR_WS2(MG_7,REGMNU_CPT_ALF)
		REGMNU_CPT_ALF = " FORMATO PTATX"
		BUFOUT = ESCR_WS2(MG_7,REGMNU_CPT_ALF)
		REGMNU_CPT_ALF = " "
		BUFOUT = ESCR_WS2(MG_7,REGMNU_CPT_ALF)
		REGMNU_CPT_ALF = "  =========================== TX-" + TPG_VEC_REQ(II_CPT_NUM)  + " ==========================="
		BUFOUT = ESCR_WS2(MG_7,REGMNU_CPT_ALF)
		REGMNU_CPT_ALF = " "
		BUFOUT = ESCR_WS2(MG_7,REGMNU_CPT_ALF)

		REGMNU_CPT_ALF = "  DOCSER " + TPG_VEC_REQ(II_CPT_NUM)  + " : " + TPG_VEC_DEF_REQ(II_CPT_NUM) 
		BUFOUT = ESCR_WS2(MG_7,REGMNU_CPT_ALF)

		REGMNU_CPT_ALF = "01  TX-" + TPG_VEC_REQ(II_CPT_NUM)  + " " + "REDEFINES WSS-SND."
		BUFOUT = ESCR_WS2(MG_8,REGMNU_CPT_ALF)

		IF LRG_HDR > 0 THEN
			NIV_ESC_CPT_NUM = NIV_03
			REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "TX-" + TPG_VEC_REQ(II_CPT_NUM)  + "-AHDR" +&
				"                                 PIC X(" + NUM_5(LRG_HDR_ALF$ ) + ")."
			BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
			NIV_ESC_CPT_NUM = NIV_01
		END IF


		NIV_ESC_CPT_NUM = NIV_03
		REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "TX-" + TPG_VEC_REQ(II_CPT_NUM)  +"-DMSG."
		BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
		ANT_CPT_NUM = TPG_MAT_NIV_IDTX(II_CPT_NUM,1,1)
		ANT_CPT_NUM = 0
		OCCUR1_CPT_ALF = "N"
		OCCUR2_CPT_ALF = "N"
		TPG_CON_TRN = 0
		LRG_ESTR_CPT_NUM = LRG_HDR
		CON_NIVV_CPT_NUM = 0
		CON_NIV_CPT_NUM = 0
		CON_NIV1_CPT_NUM = 0
		CON_NIV2_CPT_NUM = 0
		CON_NIV_ANT_CPT_NUM = 0

		FOR JJ_CPT_NUM = 1 TO TPG_MAT_CAM_TX(II_CPT_NUM) 

			TPG_GLS_SIS_CPT_ALF = "&&&"
			TPG_GLS_FRM_CPT_ALF = TPG_MAT_TXFRM(II_CPT_NUM,JJ_CPT_NUM)
			FOR NN_CPT_NUM = 1 TO TPG_TOT_HST
				IF TPG_GLS_FRM_CPT_ALF = TPG_MAT_HST_ALF(NN_CPT_NUM,CTE_IDX_NOM) THEN 
					TPG_GLS_SIS_CPT_ALF = TPG_MAT_HST_ALF(NN_CPT_NUM,CTE_IDX_SIS)
					NN_CPT_NUM = TPG_TOT_HST + 1
				END IF
			NEXT NN_CPT_NUM

			SIS_PAN_CPT_ALF =                          ">> " + TPG_GLS_SIS_CPT_ALF 
			SIS_PAN_CPT_ALF =  SIS_PAN_CPT_ALF + "-" + TPG_GLS_FRM_CPT_ALF
			AA$ =  FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_CMN),128)
                        IF AA$ = "" THEN
				AA$ = "..."
			END IF
			SIS_PAN_CPT_ALF =  SIS_PAN_CPT_ALF + "-" + AA$
			AA$ = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_INS),128)
                        IF AA$ = "" THEN
				AA$ = "+++"
			END IF
			SIS_PAN_CPT_ALF =  SIS_PAN_CPT_ALF + "-" + AA$
			SIS_PAN_CPT_ALF =  SIS_PAN_CPT_ALF + " ( " + FNC_SYSEDIT(TPG_MAT_TXFMT(II_CPT_NUM, JJ_CPT_NUM ) ,128)+ " )"
			REGMNU_CPT_ALF = SIS_PAN_CPT_ALF
			BUFOUT = ESCR_WS2(MG_7, REGMNU_CPT_ALF)

			MUL_NIV_UNO_CPT_NUM =  TPG_MAT_NIV_IDTX(II_CPT_NUM,JJ_CPT_NUM,1) 
			IF MUL_NIV_UNO_CPT_NUM =  0 THEN
				MUL_NIV_UNO_CPT_NUM = 1
			END IF
			MUL_NIV_DOS_CPT_NUM = 1
			MUL_NIV_TRE_CPT_NUM = 1
			PUT_HDR_CPT_ALF = "NO"
			OLD_IDX_CPT_ALF = "NO"
			IF TPG_MAT_NIV_IDTX(II_CPT_NUM,JJ_CPT_NUM,1)  = 0  THEN  
				OCCUR1_CPT_ALF = "N"
			END IF
			IF TPG_MAT_NIV_IDTX(II_CPT_NUM,JJ_CPT_NUM,2)  = 0  THEN  
				OCCUR2_CPT_ALF = "N"
			END IF

			TPG_CON_TRN  = TPG_CON_TRN  + 1
			AA_CPT_ALF = FNC_SYSSTR(TPG_CON_TRN) 
			IF FNC_SYSLEN(AA_CPT_ALF) < 2 THEN
				AA_CPT_ALF = "0" + AA_CPT_ALF
			END IF

			IF (TPG_MAT_NIV_IDTX(II_CPT_NUM,JJ_CPT_NUM,1) <> ANT_CPT_NUM  AND TPG_MAT_NIV_IDTX(II_CPT_NUM,JJ_CPT_NUM,1) <> 0) THEN
				PRI_IF = "S"
			END IF

			IF TPG_MAT_INIIDXTX(II_CPT_NUM,JJ_CPT_NUM) = SI_INICIA_IDX_TX AND TPG_MAT_NIV_IDTX(II_CPT_NUM,JJ_CPT_NUM,2)  = 0  THEN
				SEG_IF = "S"
			END IF
			IF PRI_IF = "S" OR SEG_IF = "S" THEN
					REGMNU_CPT_ALF = "05  TX-" + TPG_VEC_REQ(II_CPT_NUM)  +"-DMSG-IDX-1-" + AA_CPT_ALF + "  OCCURS" + " " 
					REGMNU_CPT_ALF = REGMNU_CPT_ALF +  FNC_SYSSTR(TPG_MAT_NIV_IDTX(II_CPT_NUM,JJ_CPT_NUM,1)) + " TIMES."
					BUFOUT = ESCR_WS2(MG_16,REGMNU_CPT_ALF)
					OCCUR1_CPT_ALF = "S"
					OCCUR1_CPT_NUM = TPG_MAT_NIV_IDTX(II_CPT_NUM,JJ_CPT_NUM,1) - 1
					PRI_IF = "N"
					SEG_IF = "N"
			END IF


			IF (TPG_MAT_NIV_IDTX(II_CPT_NUM,JJ_CPT_NUM,2) <> ANT2_CPT_NUM  AND TPG_MAT_NIV_IDTX(II_CPT_NUM,JJ_CPT_NUM,2) <> 0) THEN
					PRI_IF = "S"
			END IF
			IF (TPG_MAT_INIIDXTX(II_CPT_NUM,JJ_CPT_NUM) = SI_INICIA_IDX_TX AND TPG_MAT_NIV_IDTX(II_CPT_NUM,JJ_CPT_NUM,2) <> 0) THEN
					SEG_IF = "S"
			END IF

			IF PRI_IF = "S" OR SEG_IF = "S" THEN
					REGMNU_CPT_ALF = "07  TX-" + TPG_VEC_REQ(II_CPT_NUM)  +"-DMSG-IDX-2-" + AA_CPT_ALF + " OCCURS" + " " 
					REGMNU_CPT_ALF = REGMNU_CPT_ALF +  FNC_SYSSTR(TPG_MAT_NIV_IDTX(II_CPT_NUM,JJ_CPT_NUM,2))  + " TIMES."
					BUFOUT = ESCR_WS2(MG_20,REGMNU_CPT_ALF)
					OCCUR2_CPT_ALF = "S"
					MUL_NIV_DOS_CPT_NUM =  TPG_MAT_NIV_IDTX(II_CPT_NUM,JJ_CPT_NUM,2) 
					OCCUR2_CPT_NUM = TPG_MAT_NIV_IDTX(II_CPT_NUM,JJ_CPT_NUM,2) - 1
					PRI_IF = "N"
					SEG_IF = "N"
			END IF


			ANT_CPT_NUM = TPG_MAT_NIV_IDTX(II_CPT_NUM,JJ_CPT_NUM,1)
			ANT2_CPT_NUM = TPG_MAT_NIV_IDTX(II_CPT_NUM,JJ_CPT_NUM,2)

			MNU_GLS_PROG_CPT_ALF =  FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_INS),128) 


				IF OCCUR2_CPT_ALF = "S" THEN
					NIV_ESC_CPT_NUM = NIV_09
				ELSE
					IF OCCUR1_CPT_ALF = "S" THEN
						NIV_ESC_CPT_NUM = NIV_07
					ELSE
						NIV_ESC_CPT_NUM  = NIV_05
					END IF			
				END IF			
  !!! SUMA LOS 21 CARACTERES DE HEADER PARA TX

			LRG_ESTR_CPT_NUM  = LRG_ESTR_CPT_NUM  + (21  *  MUL_NIV_UNO_CPT_NUM  * MUL_NIV_DOS_CPT_NUM)
				IF OCCUR2_CPT_ALF = "S" THEN
					NUEVE_CPT_ALF = "S"
					 CON_NIV2_CPT_NUM =  CON_NIV2_CPT_NUM + TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM)
					CON_NIV_CPT_NUM =  CON_NIV_CPT_NUM + CON_NIV_ANT_CPT_NUM 
				ELSE
					IF OCCUR1_CPT_ALF = "S" THEN
						SIETE_CPT_ALF = "S"
						IF NUEVE_CPT_ALF = "S" THEN
							 CON_NIV1_CPT_NUM = CON_NIV_CPT_NUM + (CON_NIV2_CPT_NUM * OCCUR2_CPT_NUM) + TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM)
							CON_NIV_CPT_NUM = CON_NIV_CPT_NUM + (CON_NIV2_CPT_NUM * OCCUR2_CPT_NUM) + CON_NIV_ANT_CPT_NUM 
							CON_NIV2_CPT_NUM = 0
							NUEVE_CPT_ALF = "N"
						ELSE
							 CON_NIV1_CPT_NUM = CON_NIV1_CPT_NUM + TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM)
							CON_NIV_CPT_NUM = CON_NIV_CPT_NUM + CON_NIV_ANT_CPT_NUM 

						END IF 
					ELSE
						IF SIETE_CPT_ALF = "S" THEN
							 CON_NIVV_CPT_NUM = CON_NIV_CPT_NUM  +  (CON_NIV1_CPT_NUM * OCCUR1_CPT_NUM) + CON_NIV_ANT_CPT_NUM 
							 CON_NIV_CPT_NUM = CON_NIV_CPT_NUM  +  (CON_NIV1_CPT_NUM * OCCUR1_CPT_NUM) + CON_NIV_ANT_CPT_NUM 
							CON_NIV1_CPT_NUM = 0
							SIETE_CPT_ALF = "N"
						ELSE
							CON_NIVV_CPT_NUM =  CON_NIVV_CPT_NUM + CON_NIV_ANT_CPT_NUM 
							CON_NIV_CPT_NUM =  CON_NIV_CPT_NUM + CON_NIV_ANT_CPT_NUM 
						END IF
					END IF			
				END IF			
			 CON_NIV_CPT_ALF = FNC_SYSSTR(CON_NIV_CPT_NUM)
			WHILE FNC_SYSLEN(CON_NIV_CPT_ALF) < 5 
				CON_NIV_CPT_ALF = "0" + CON_NIV_CPT_ALF
	     		NEXT

			IF NIV_ESC_CPT_NUM = 5 THEN
				SEP_CPT_NUM = 11
			ELSE
				IF NIV_ESC_CPT_NUM = 6 THEN
					SEP_CPT_NUM = 12
				ELSE
					IF NIV_ESC_CPT_NUM = 7 THEN
						SEP_CPT_NUM = 13
					ELSE
						SEP_CPT_NUM = 14
					END IF
				END IF
			END IF

			REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "TX-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + "-SIST-" 
			REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +  FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_INS),128)   + "             "
			REGMNU_2_CPT_ALF = "PIC X(00003)."
			REGMNU_1_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
			 REGMNU_CPT_ALF =  "P" +  CON_NIV_CPT_ALF  + NIV_SEP(SEP_CPT_NUM) + REGMNU_1_CPT_ALF
			  BUFOUT = ESCR_WS2(MG_0,REGMNU_CPT_ALF)

			CON_NIV_ANT_CPT_NUM = 3

			CON_NIV_CPT_NUM = CON_NIV_CPT_NUM  + CON_NIV_ANT_CPT_NUM 
			CON_NIV_CPT_ALF = FNC_SYSSTR(CON_NIV_CPT_NUM)
			WHILE FNC_SYSLEN(CON_NIV_CPT_ALF) < 5 
				CON_NIV_CPT_ALF = "0" + CON_NIV_CPT_ALF
	     		NEXT

			REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "TX-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + "-NEMO-" 
			REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +  FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_INS),128) 
			REGMNU_2_CPT_ALF = "PIC X(00012)."
			REGMNU_1_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
			 REGMNU_CPT_ALF =  "P" +  CON_NIV_CPT_ALF  + NIV_SEP(SEP_CPT_NUM) + REGMNU_1_CPT_ALF
			  BUFOUT = ESCR_WS2(MG_0,REGMNU_CPT_ALF)

			CON_NIV_ANT_CPT_NUM = 12

			CON_NIV_CPT_NUM = CON_NIV_CPT_NUM  + CON_NIV_ANT_CPT_NUM 
			CON_NIV_CPT_ALF = FNC_SYSSTR(CON_NIV_CPT_NUM)
			WHILE FNC_SYSLEN(CON_NIV_CPT_ALF) < 5 
				CON_NIV_CPT_ALF = "0" + CON_NIV_CPT_ALF
	     		NEXT
			REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "TX-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" +  AA_CPT_ALF + "-FINP-" 
			REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +  FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_INS),128)
			REGMNU_2_CPT_ALF = "PIC X(00003)."
			REGMNU_1_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
			 REGMNU_CPT_ALF =  "P" +  CON_NIV_CPT_ALF  + NIV_SEP(SEP_CPT_NUM) + REGMNU_1_CPT_ALF
			  BUFOUT = ESCR_WS2(MG_0,REGMNU_CPT_ALF)

			CON_NIV_ANT_CPT_NUM = 3

			CON_NIV_CPT_NUM = CON_NIV_CPT_NUM  + CON_NIV_ANT_CPT_NUM 
			CON_NIV_CPT_ALF = FNC_SYSSTR(CON_NIV_CPT_NUM)
			WHILE FNC_SYSLEN(CON_NIV_CPT_ALF) < 5 
				CON_NIV_CPT_ALF = "0" + CON_NIV_CPT_ALF
	     		NEXT
			REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "TX-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + "-FOUT-" 
			REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +  FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_INS),128)
			REGMNU_2_CPT_ALF = "PIC X(00003)."
			REGMNU_1_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
			 REGMNU_CPT_ALF =  "P" +  CON_NIV_CPT_ALF  + NIV_SEP(SEP_CPT_NUM) + REGMNU_1_CPT_ALF
			   BUFOUT = ESCR_WS2(MG_0,REGMNU_CPT_ALF)
 
			CON_NIV_ANT_CPT_NUM = 3

			REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "TX-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + "-DMSG-" 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF +  FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_INS),128) + "."


			ANT_CPT_NUM = TPG_MAT_NIV_IDTX(II_CPT_NUM,JJ_CPT_NUM,1)
			FOR GG_CPT_NUM = 1 TO TPG_TOT_HST
				IF (TPG_MAT_HST_ALF(GG_CPT_NUM,CTE_IDX_NOM) = TPG_MAT_TXFRM(II_CPT_NUM,JJ_CPT_NUM)) THEN
					HST_CPT_NUM = GG_CPT_NUM
					GG_CPT_NUM = TPG_TOT_HST + 1
				END IF
			NEXT GG_CPT_NUM

			FOR GG_CPT_NUM = 1 TO TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TSF) 
				IF (TPG_MAT_SRV_ALF(HST_CPT_NUM,GG_CPT_NUM) =  FNC_SYSEDIT(TPG_MAT_TXFMT(II_CPT_NUM,JJ_CPT_NUM),128)) THEN
					SRV_CPT_NUM = GG_CPT_NUM
					GG_CPT_NUM = TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TSF) + 1
				END IF
			NEXT GG_CPT_NUM

			IF TPG_MAT_NCP_SRV(HST_CPT_NUM,SRV_CPT_NUM) > 0 THEN
				BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
			END IF

			FOR GG_CPT_NUM = 1 TO TPG_MAT_NCP_SRV(HST_CPT_NUM,SRV_CPT_NUM)

				N_IDX_CPT_NUM = 0
				FOR XX_CPT_NUM = 1 TO TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TCF)
					IF TPG_MAT_NAMEFLDHST(HST_CPT_NUM,XX_CPT_NUM) = FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) THEN
						N_IDX_CPT_NUM = N_IDX_CPT_NUM + 1
					END IF
				NEXT XX_CPT_NUM
				NN_IDX_CPT_NUM = TPG_MAT_TOTOCCFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM) 

				FOR TT_CPT_NUM = 1 TO TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TCF)
					IF FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) = TPG_MAT_NAMEFLDHST(HST_CPT_NUM,TT_CPT_NUM) THEN
						CAMP_CPT_NUM = TT_CPT_NUM
						TT_CPT_NUM = TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TCF) + 1
					END IF
				NEXT TT_CPT_NUM

				ESCR_CPT_ALF = "SI"
				IF N_IDX_CPT_NUM > 1 THEN
					UU_CPT_NUM = GG_CPT_NUM - 1
					FOR XX_CPT_NUM = 1 TO UU_CPT_NUM
						IF FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,XX_CPT_NUM),128) = FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) THEN
							ESCR_CPT_ALF = "NO"
						END IF
					NEXT XX_CPT_NUM
				END IF

				CON_NIV_CPT_NUM = CON_NIV_CPT_NUM  + CON_NIV_ANT_CPT_NUM 
				CON_NIV_CPT_ALF = FNC_SYSSTR(CON_NIV_CPT_NUM)
				WHILE FNC_SYSLEN(CON_NIV_CPT_ALF) < 5 
					CON_NIV_CPT_ALF = "0" + CON_NIV_CPT_ALF
	     			NEXT
				CON_NIV_ANT_CPT_NUM  =  TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM)

				AA_CPT_ALF = FNC_SYSSTR(TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM)) 
 
				IF OCCUR2_CPT_ALF = "S" THEN
					NIV_ESC_CPT_NUM = NIV_11
				ELSE
					IF OCCUR1_CPT_ALF = "S" THEN
						NIV_ESC_CPT_NUM = NIV_09
					ELSE
						NIV_ESC_CPT_NUM  = NIV_07
					END IF			
				END IF			
				IF N_IDX_CPT_NUM  > 1 THEN
					OLD_IDX_CPT_ALF = "SI"
					IF PUT_HDR_CPT_ALF = "NO" THEN
						PUT_HDR_CPT_ALF = "SI"
						REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "TX-" + TPG_VEC_REQ(II_CPT_NUM)  
						REGMNU_CPT_ALF = REGMNU_CPT_ALF +  "-FLD-HST OCCURS " + FNC_SYSSTR(N_IDX_CPT_NUM) + " TIMES."
						BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
						MUL_NIV_TRE_CPT_NUM = N_IDX_CPT_NUM
					END IF
					NIV_ESC_CPT_NUM = NIV_ESC_CPT_NUM + 1
				ELSE
					IF OLD_IDX_CPT_ALF = "SI" THEN
						OLD_IDX_CPT_ALF = "NO"
					END IF
				END IF

				IF NIV_ESC_CPT_NUM = 5 THEN
					SEP_CPT_NUM = 11
				ELSE
					IF NIV_ESC_CPT_NUM = 6 THEN
						SEP_CPT_NUM = 12
					ELSE
						IF NIV_ESC_CPT_NUM = 7 THEN
							SEP_CPT_NUM = 13
						ELSE
							SEP_CPT_NUM = 14
						END IF
					END IF
				END IF

				 IF ESCR_CPT_ALF = "SI" THEN
					LRG_ESTR_CPT_NUM  = LRG_ESTR_CPT_NUM  + (TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM) *  MUL_NIV_UNO_CPT_NUM  * MUL_NIV_DOS_CPT_NUM * MUL_NIV_TRE_CPT_NUM)
					YY_CPT_ALF = FNC_SYSSTR(JJ_CPT_NUM)
					IF FNC_SYSLEN(YY_CPT_ALF) = 1 THEN
						YY_CPT_ALF = "0" + YY_CPT_ALF
					END IF
					YY_CPT_ALF = "-" + YY_CPT_ALF

					GLS_CPT_CMT$ = " DOCFLD : " + FNC_SYSEDIT(TPG_MAT_IDENFLDHST(HST_CPT_NUM,CAMP_CPT_NUM),16%)
					BUFOUT = ESCR_WS2(MG_7,GLS_CPT_CMT$)

					REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "TX-" + TPG_VEC_REQ(II_CPT_NUM) 
					REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +  YY_CPT_ALF + "-" 
					REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +   FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) + " "
					REGMNU_2_CPT_ALF = "PIC X(" +  NUM_5(AA_CPT_ALF) + ")." 
					REGMNU_1_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
					 REGMNU_CPT_ALF =  "P" +  CON_NIV_CPT_ALF  + NIV_SEP(SEP_CPT_NUM) + REGMNU_1_CPT_ALF
					 BUFOUT = ESCR_WS2(MG_0,REGMNU_CPT_ALF)
				END IF
			NEXT GG_CPT_NUM
		NEXT JJ_CPT_NUM
		LRG_ESTR_CPT_NUM = TPG_LRG_RCV_CPT_NUM - LRG_ESTR_CPT_NUM 
		IF LRG_ESTR_CPT_NUM > 0 THEN
			IF  TPG_LRG_RCV_CPT_NUM = LRG_ESTR_CPT_NUM THEN
				NIV_ESC_CPT_NUM = NIV_05
			ELSE
				NIV_ESC_CPT_NUM = NIV_03
			END IF
			REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "TX-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" 
			REGMNU_1_CPT_ALF = REGMNU_1_CPT_ALF +   "FRM-GLS-DISP" + " "
			AA_CPT_ALF = FNC_SYSSTR(LRG_ESTR_CPT_NUM)
			REGMNU_2_CPT_ALF = "PIC X(" +  NUM_5(AA_CPT_ALF) + ")." 
			REGMNU_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
			BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)

		ELSE
			ESCRIBE_LOG$ = "N"
			BUFOUT = FNC_PRINT(" ERROR EN TX- PARA REQUERIMIENTO " + TPG_VEC_REQ(II_CPT_NUM)  )
			BUFOUT = FNC_PRINT(" LARGO CALCULADO MAYOR QUE " + FNC_SYSSTR(LRG_ESTR_CPT_NUM) + " " + FNC_SYSSTR(TPG_LRG_RCV_CPT_NUM_PRT))
		END IF

	NEXT II_CPT_NUM

	IF VAR_IND_NVL1 = "S" THEN	
		REGMNU_CPT_ALF = "  FORMATO PARA CONCATENACION DE MENSAJES"
		BUFOUT = ESCR_WS2(MG_7,REGMNU_CPT_ALF)
		REGMNU_CPT_ALF = "01  TX-TAB REDEFINES WSS-SND."
		BUFOUT = ESCR_WS2(NIV_MRG(NIV_01),REGMNU_CPT_ALF)
		REGMNU_CPT_ALF = "03  TX-TAB-ELM."
		BUFOUT = ESCR_WS2(NIV_MRG(NIV_03),REGMNU_CPT_ALF)
		REGMNU_1_CPT_ALF = "05  TX-TAB-CHR  OCCURS  " + FNC_SYSSTR(TPG_LRG_RCV_CPT_NUM) + "   TIMES "
		REGMNU_2_CPT_ALF = "PIC X(00001)."
		REGMNU_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_05))
		BUFOUT = ESCR_WS2(NIV_MRG(NIV_05),REGMNU_CPT_ALF)
	END IF


	REGMNU_CPT_ALF = " "
	BUFOUT = ESCR_WS3(MG_8,REGMNU_CPT_ALF)
	IF VAR_IND_NVL1 = "S" THEN	
		REGMNU_CPT_ALF = "01  WSS-COD-CREQ       VALUE SPACES    PIC X(03)."
		BUFOUT = ESCR_WS3(MG_8,REGMNU_CPT_ALF)
		REGMNU_CPT_ALF = " "
		BUFOUT = ESCR_WS3(MG_8,REGMNU_CPT_ALF)
		REGMNU_CPT_ALF = "01  WSS-GNS-TVB."
		BUFOUT = ESCR_WS3(MG_8,REGMNU_CPT_ALF)
		REGMNU_CPT_ALF = "03  TPG-I          VALUE ZEROES    PIC 9(05)."
		BUFOUT = ESCR_WS3(MG_12,REGMNU_CPT_ALF)
		REGMNU_CPT_ALF = "03  TPG-J          VALUE ZEROES    PIC 9(05)."
		BUFOUT = ESCR_WS3(MG_12,REGMNU_CPT_ALF)
		REGMNU_CPT_ALF = "03  TPG-K          VALUE ZEROES    PIC 9(05)."
		BUFOUT = ESCR_WS3(MG_12,REGMNU_CPT_ALF)
		REGMNU_CPT_ALF = "03  TPG-L          VALUE ZEROES    PIC 9(05)."
		BUFOUT = ESCR_WS3(MG_12,REGMNU_CPT_ALF)
		REGMNU_CPT_ALF = "03  TPG-M          VALUE ZEROES    PIC 9(05)."
		BUFOUT = ESCR_WS3(MG_12,REGMNU_CPT_ALF)
		REGMNU_CPT_ALF = "03  TPG-N          VALUE ZEROES    PIC 9(05)."
		BUFOUT = ESCR_WS3(MG_12,REGMNU_CPT_ALF)
	END IF

	PASO_CPT_NUM = PASO_CPT_NUM + 1


	FOR II_CPT_NUM = 1 TO TPG_TOT_REQ 
		FOR JJ_CPT_NUM = 1 TO TPG_MAT_CAM_TX(II_CPT_NUM) 

			AA_CPT_ALF = FNC_SYSSTR(JJ_CPT_NUM)
			IF FNC_SYSLEN(AA_CPT_ALF) = 1 THEN
				AA_CPT_ALF = "0" + AA_CPT_ALF
			END IF
			ANT1_CPT_NUM = TPG_MAT_NIV_IDTX(II_CPT_NUM,JJ_CPT_NUM,1)
			ANT2_CPT_NUM = TPG_MAT_NIV_IDTX(II_CPT_NUM,JJ_CPT_NUM,2)

			BUF_CPT_ALF = "MOV-GNS-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + " SECTION."
			BUFOUT = ESCR_PD3(MG_8,BUF_CPT_ALF)
			BUF_CPT_ALF = "INI-MOV-GNS-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + "."
			BUFOUT = ESCR_PD3(MG_8,BUF_CPT_ALF)

			IF ANT1_CPT_NUM <> 0 OR  ANT2_CPT_NUM <> 0 THEN
				BB_CPT_ALF = "(TPG-I)."
			ELSE
				BB_CPT_ALF = "."
			END IF
			
			TPG_GLS_FRM_CPT_ALF = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_FRM),128)
			FOR NN_CPT_NUM = 1 TO TPG_TOT_HST
				IF TPG_GLS_FRM_CPT_ALF = TPG_MAT_HST_ALF(NN_CPT_NUM,CTE_IDX_NOM) THEN 
					TPG_GLS_SIS_CPT_ALF = TPG_MAT_HST_ALF(NN_CPT_NUM,CTE_IDX_SIS)
					TPG_GLS_SIM_CPT_ALF = TPG_MAT_HST_ALF(NN_CPT_NUM,CTE_IDX_SIM)
					NN_CPT_NUM = TPG_TOT_HST + 1
				END IF
			NEXT NN_CPT_NUM

			MNU_GLS_PROG_CPT_ALF =  FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_INS),128) 
			REGMNU_CPT_ALF = "MOVE WSS-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + "-SIST-" 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF +  MNU_GLS_PROG_CPT_ALF + " TO TX-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + "-SIST-" 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF +   MNU_GLS_PROG_CPT_ALF   + BB_CPT_ALF
			BUFOUT = ESCR_PD3(MG_12,REGMNU_CPT_ALF)
			REGMNU_CPT_ALF = ""
			BUFOUT = ESCR_WS3(MG_12,REGMNU_CPT_ALF)

			REGMNU_CPT_ALF = "03 WSS-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + "-SIST-" 
 			REGMNU_CPT_ALF = REGMNU_CPT_ALF +   MNU_GLS_PROG_CPT_ALF + " PIC X(03) VALUE '" + TPG_GLS_SIS_CPT_ALF +    "'."
			BUFOUT = ESCR_WS3(MG_12,REGMNU_CPT_ALF)

			REGMNU_CPT_ALF = "MOVE WSS-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + "-NEMO-" 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF +   FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_INS),128) 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF +   " TO TX-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + "-NEMO-" 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF +   FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_INS),128)  + BB_CPT_ALF
			BUFOUT = ESCR_PD3(MG_12,REGMNU_CPT_ALF)

			REGMNU_CPT_ALF = "03 WSS-" + TPG_VEC_REQ(II_CPT_NUM) + "-" + AA_CPT_ALF + "-NEMO-" 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF + MNU_GLS_PROG_CPT_ALF + " PIC X(12) VALUE '" 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF + TPG_GLS_SIM_CPT_ALF + FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_FRM),128) 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF + FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_CMN),128) 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF + FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_INM),128) + "'."
			BUFOUT = ESCR_WS3(MG_12,REGMNU_CPT_ALF)

			REGMNU_CPT_ALF = "MOVE WSS-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" +  AA_CPT_ALF + "-FINP-" 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF +   FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_INS),128) 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF +   " TO TX-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" +  AA_CPT_ALF + "-FINP-" 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF +   FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_INS),128)  + BB_CPT_ALF
			BUFOUT = ESCR_PD3(MG_12,REGMNU_CPT_ALF)

			FINP_CPT_ALF = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_FIN),128)
			IF FINP_CPT_ALF = "" THEN
				FINP_CPT_ALF = "   "
			END IF
			REGMNU_CPT_ALF = "03 WSS-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + "-FINP-" 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF +   MNU_GLS_PROG_CPT_ALF + " PIC X(03) VALUE '" + FINP_CPT_ALF   + "'."
			BUFOUT = ESCR_WS3(MG_12,REGMNU_CPT_ALF)

			REGMNU_CPT_ALF = "MOVE WSS-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + "-FOUT-" 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF +   FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_INS),128) 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF +   " TO TX-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + "-FOUT-" 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF +   FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_INS),128) + BB_CPT_ALF
			BUFOUT = ESCR_PD3(MG_12,REGMNU_CPT_ALF)

			FOUT_CPT_ALF = FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_FOU),128)
			IF FOUT_CPT_ALF = "" THEN
				FOUT_CPT_ALF = "   "
			END IF
			REGMNU_CPT_ALF = "03 WSS-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + "-FOUT-" 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF +   MNU_GLS_PROG_CPT_ALF + " PIC X(03) VALUE '" + FOUT_CPT_ALF + "'."
			BUFOUT = ESCR_WS3(MG_12,REGMNU_CPT_ALF)

			BUF_CPT_ALF = "FIN-MOV-GNS-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + "."
			BUFOUT = ESCR_PD3(MG_8,BUF_CPT_ALF)
			BUF_CPT_ALF = "EXIT."
			BUFOUT = ESCR_PD3(MG_12,BUF_CPT_ALF)
			BUF_CPT_ALF = ""
			BUFOUT = ESCR_PD3(MG_12,BUF_CPT_ALF)
		NEXT JJ_CPT_NUM
	NEXT II_CPT_NUM

	FOR II_CPT_NUM = 1 TO TOT_NUMER

		ZENT$ = ""
		FOR JJ% = 1 TO INTEGER( VEC_NUMER(II_CPT_NUM, CTE_NUMER_ENTER) )
			ZENT$ = ZENT$ + "Z"
		NEXT JJ%

		ZDEC$ = ""

		FOR JJ% = 1 TO INTEGER( VEC_NUMER(II_CPT_NUM, CTE_NUMER_DECIM))
			ZDEC$ = ZDEC$ + "Z"
		NEXT JJ%
		SEPAR$ = ""
		IF ZDEC$ > "" THEN
			SEPAR$ = ","
		END IF
		REGMNU_CPT_ALF = "77  " + VEC_NUMER(II_CPT_NUM,CTE_NUMER_NAME) + "-EDT PIC " + ZENT$ + SEPAR$ + ZDEC$ + "."
		BUFOUT = ESCR_WS3(MG_8,REGMNU_CPT_ALF)
	NEXT II_CPT_NUM


	FOR II_CPT_NUM = 1 TO TPG_TOT_REQ

		REGMNU_CPT_ALF = " "
		BUFOUT = ESCR_PD4(MG_8,REGMNU_CPT_ALF)
		REGMNU_CPT_ALF = "VAL-NUM-TP-REQ-" + TPG_VEC_REQ(II_CPT_NUM)  + " SECTION."
		BUFOUT = ESCR_PD4(MG_8,REGMNU_CPT_ALF)
		REGMNU_CPT_ALF = "INI-VAL-NUM-TP-REQ-" + TPG_VEC_REQ(II_CPT_NUM)  + "."
		BUFOUT = ESCR_PD4(MG_8,REGMNU_CPT_ALF)
		FOR JJ_CPT_NUM = 1 TO TOT_NUMER
			IF VEC_NUMER(JJ_CPT_NUM, CTE_NUMER_REQU) = TPG_VEC_REQ(II_CPT_NUM) AND&
			   VEC_NUMER(JJ_CPT_NUM, CTE_NUMER_PTOTP) = "TP"	THEN
				REGMNU_CPT_ALF = "PERFORM VN-" + VEC_NUMER(JJ_CPT_NUM,CTE_NUMER_NAME) + "."
				BUFOUT = ESCR_PD4(MG_12,REGMNU_CPT_ALF)
			END IF
		NEXT JJ_CPT_NUM
		REGMNU_CPT_ALF = "FIN-VAL-NUM-TP-REQ-" + TPG_VEC_REQ(II_CPT_NUM)  + "."
		BUFOUT = ESCR_PD4(MG_8,REGMNU_CPT_ALF)
		REGMNU_CPT_ALF = "EXIT."
		BUFOUT = ESCR_PD4(MG_12,REGMNU_CPT_ALF)

		REGMNU_CPT_ALF = " "
		BUFOUT = ESCR_PD4(MG_8,REGMNU_CPT_ALF)
		REGMNU_CPT_ALF = "EDT-NUM-PT-REQ-" + TPG_VEC_REQ(II_CPT_NUM)  + " SECTION."
		BUFOUT = ESCR_PD4(MG_8,REGMNU_CPT_ALF)
		REGMNU_CPT_ALF = "INI-EDT-NUM-PT-REQ" + TPG_VEC_REQ(II_CPT_NUM)  + "."
		BUFOUT = ESCR_PD4(MG_8,REGMNU_CPT_ALF)
		FOR JJ_CPT_NUM = 1 TO TOT_NUMER
			IF VEC_NUMER(JJ_CPT_NUM, CTE_NUMER_REQU) = TPG_VEC_REQ(II_CPT_NUM) AND&
			   VEC_NUMER(JJ_CPT_NUM, CTE_NUMER_PTOTP) = "PT"	THEN
				REGMNU_CPT_ALF = "PERFORM EN-" + VEC_NUMER(JJ_CPT_NUM,CTE_NUMER_NAME) + "."
				BUFOUT = ESCR_PD4(MG_12,REGMNU_CPT_ALF)
			END IF
		NEXT JJ_CPT_NUM
		REGMNU_CPT_ALF = "FIN-EDT-NUM-PT-REQ" + TPG_VEC_REQ(II_CPT_NUM)  + "."
		BUFOUT = ESCR_PD4(MG_8,REGMNU_CPT_ALF)
		REGMNU_CPT_ALF = "EXIT."
		BUFOUT = ESCR_PD4(MG_12,REGMNU_CPT_ALF)
		
		FOR JJ_CPT_NUM = 1 TO TOT_NUMER
			IF VEC_NUMER(JJ_CPT_NUM, CTE_NUMER_REQU) = TPG_VEC_REQ(II_CPT_NUM) AND&
			   VEC_NUMER(JJ_CPT_NUM, CTE_NUMER_PTOTP) = "PT" THEN


				REGMNU_CPT_ALF = " "
				PT_EN_SRV$ = VEC_NUMER(JJ_CPT_NUM,CTE_NUMER_NAME)

 !!!				PRINT "CONSTRUYEnDO RUTINA PARA " ; PT_EN_SRV$ ; " INDICE X " ;&
 !!!					VEC_NUMER(JJ_CPT_NUM, CTE_NUMER_OCCX) ; " INDICE Y " ;&
 !!!					VEC_NUMER(JJ_CPT_NUM, CTE_NUMER_OCCY) ; "*FIN"

				IF VEC_NUMER(JJ_CPT_NUM, CTE_NUMER_OCCY) > "" THEN
					IDX_PT_CPT_ALF = "( TPG-L , TPG-M )"
				ELSE
				IF VEC_NUMER(JJ_CPT_NUM, CTE_NUMER_OCCX) > "" THEN
					IDX_PT_CPT_ALF = "( TPG-L )"
				ELSE
					IDX_PT_CPT_ALF = ""
				END IF
				END IF

				BUFOUT = ESCR_PD4(MG_8,REGMNU_CPT_ALF)
				REGMNU_CPT_ALF = "EN-" + PT_EN_SRV$ + " SECTION."
				BUFOUT = ESCR_PD4(MG_8,REGMNU_CPT_ALF)
				REGMNU_CPT_ALF = "ENI-" + PT_EN_SRV$ + "."
				BUFOUT = ESCR_PD4(MG_8,REGMNU_CPT_ALF)

				IF VEC_NUMER(JJ_CPT_NUM, CTE_NUMER_OCCY) > "" THEN
					REGMNU_CPT_ALF = "MOVE 1 TO TPG-M."
					BUFOUT = ESCR_PD4(MG_12,REGMNU_CPT_ALF)
				END IF
				IF VEC_NUMER(JJ_CPT_NUM, CTE_NUMER_OCCX) > "" THEN
					REGMNU_CPT_ALF = "MOVE 1 TO TPG-L."
					BUFOUT = ESCR_PD4(MG_12,REGMNU_CPT_ALF)
					REGMNU_CPT_ALF = "CEN-" + PT_EN_SRV$ + "."
					BUFOUT = ESCR_PD4(MG_8,REGMNU_CPT_ALF)
				END IF
				REGMNU_CPT_ALF = "MOVE " + PT_EN_SRV$ + "-NUM " + IDX_PT_CPT_ALF
				REGMNU_CPT_ALF = REGMNU_CPT_ALF + " TO "
				BUFOUT = ESCR_PD4(MG_12,REGMNU_CPT_ALF)

				REGMNU_CPT_ALF = "     " + VEC_NUMER(JJ_CPT_NUM,CTE_NUMER_NAME) + "-EDT."
				BUFOUT = ESCR_PD4(MG_12,REGMNU_CPT_ALF)
				REGMNU_CPT_ALF = "MOVE " + PT_EN_SRV$ + "-EDT "
				BUFOUT = ESCR_PD4(MG_12,REGMNU_CPT_ALF)

				REGMNU_CPT_ALF = "     TO " + PT_EN_SRV$ + IDX_PT_CPT_ALF + "."
				BUFOUT = ESCR_PD4(MG_12,REGMNU_CPT_ALF)

				IF VEC_NUMER(JJ_CPT_NUM, CTE_NUMER_OCCY) > "" THEN
					REGMNU_CPT_ALF = "ADD 1 TO TPG-M."
					BUFOUT = ESCR_PD4(MG_12,REGMNU_CPT_ALF)
					REGMNU_CPT_ALF = "IF TPG-M NOT > " + VEC_NUMER(JJ_CPT_NUM, CTE_NUMER_OCCY)
					BUFOUT = ESCR_PD4(MG_12,REGMNU_CPT_ALF)
					REGMNU_CPT_ALF = "   GO TO CEN-" + PT_EN_SRV$
					BUFOUT = ESCR_PD4(MG_12,REGMNU_CPT_ALF)
					REGMNU_CPT_ALF = "ELSE"
					BUFOUT = ESCR_PD4(MG_12,REGMNU_CPT_ALF)
					REGMNU_CPT_ALF = "   ADD 1 TO  TPG-L"
					BUFOUT = ESCR_PD4(MG_12,REGMNU_CPT_ALF)
					REGMNU_CPT_ALF = "   MOVE 1 TO  TPG-M"
					BUFOUT = ESCR_PD4(MG_12,REGMNU_CPT_ALF)
					REGMNU_CPT_ALF = "   IF TPG-L NOT > " + VEC_NUMER(JJ_CPT_NUM, CTE_NUMER_OCCX)
					BUFOUT = ESCR_PD4(MG_12,REGMNU_CPT_ALF)
					REGMNU_CPT_ALF = "        GO TO CEN-" + PT_EN_SRV$ + "."
					BUFOUT = ESCR_PD4(MG_12,REGMNU_CPT_ALF)
				ELSE
				IF VEC_NUMER(JJ_CPT_NUM, CTE_NUMER_OCCX) > "" THEN
					REGMNU_CPT_ALF = "ADD 1 TO TPG-L."
					BUFOUT = ESCR_PD4(MG_12,REGMNU_CPT_ALF)
					REGMNU_CPT_ALF = "IF TPG-L NOT > " + VEC_NUMER(JJ_CPT_NUM, CTE_NUMER_OCCX)
					BUFOUT = ESCR_PD4(MG_12,REGMNU_CPT_ALF)
					REGMNU_CPT_ALF = "    GO TO CEN-" + PT_EN_SRV$ + "."
					BUFOUT = ESCR_PD4(MG_16,REGMNU_CPT_ALF)
				END IF
				END IF

				REGMNU_CPT_ALF = "ENF-" + PT_EN_SRV$ + "."
				BUFOUT = ESCR_PD4(MG_8,REGMNU_CPT_ALF)
				REGMNU_CPT_ALF = "EXIT."
				BUFOUT = ESCR_PD4(MG_12,REGMNU_CPT_ALF)

			END IF
		NEXT JJ_CPT_NUM

	NEXT II_CPT_NUM 

	FOR II_CPT_NUM = 1 TO TPG_TOT_REQ
		FOR JJ_CPT_NUM = 1 TO TOT_NUMER
			IF VEC_NUMER(JJ_CPT_NUM, CTE_NUMER_REQU) = TPG_VEC_REQ(II_CPT_NUM) AND&
			   VEC_NUMER(JJ_CPT_NUM, CTE_NUMER_PTOTP) = "TP"	THEN
		 		TP_EN_SRV$ = VEC_NUMER(JJ_CPT_NUM, CTE_NUMER_NAME) 

				REGMNU_CPT_ALF = " "
				PT_EN_SRV$ = VEC_NUMER(JJ_CPT_NUM,CTE_NUMER_NAME)

 !!!				PRINT "CONSTRUYENDO RUTINA PARA " ; PT_EN_SRV$ ; " INDICE X " ;&
 !!!					VEC_NUMER(JJ_CPT_NUM, CTE_NUMER_OCCX) ; " INDICE Y " ;&
 !!!					VEC_NUMER(JJ_CPT_NUM, CTE_NUMER_OCCY) ; "*FIN"

				IF VEC_NUMER(JJ_CPT_NUM, CTE_NUMER_OCCY) > "" THEN
					IDX_TP_CPT_ALF = "( TPG-L , TPG-M )"
				ELSE
				IF VEC_NUMER(JJ_CPT_NUM, CTE_NUMER_OCCX) > "" THEN
					IDX_TP_CPT_ALF = "( TPG-L )"
				ELSE
					IDX_TP_CPT_ALF = ""
				END IF
				END IF

		 		BUFOUT = ESCR_PD4(MG_8,REGMNU_CPT_ALF)
		 		REGMNU_CPT_ALF = "VN-" + TP_EN_SRV$ + " SECTION."
		 		BUFOUT = ESCR_PD4(MG_8,REGMNU_CPT_ALF)
		 		REGMNU_CPT_ALF = "VNI-" + TP_EN_SRV$ + "."
		 		BUFOUT = ESCR_PD4(MG_8,REGMNU_CPT_ALF)
 
				IF VEC_NUMER(JJ_CPT_NUM, CTE_NUMER_OCCY) > "" THEN
					REGMNU_CPT_ALF = "MOVE 1 TO TPG-M."
					BUFOUT = ESCR_PD4(MG_12,REGMNU_CPT_ALF)
				END IF
				IF VEC_NUMER(JJ_CPT_NUM, CTE_NUMER_OCCX) > "" THEN
					REGMNU_CPT_ALF = "MOVE 1 TO TPG-L."
					BUFOUT = ESCR_PD4(MG_12,REGMNU_CPT_ALF)
					REGMNU_CPT_ALF = "CVN-" + PT_EN_SRV$ + "."
					BUFOUT = ESCR_PD4(MG_8,REGMNU_CPT_ALF)
				END IF

		 		REGMNU_CPT_ALF = "MOVE " + TP_EN_SRV$ + IDX_TP_CPT_ALF 
		 		REGMNU_CPT_ALF = REGMNU_CPT_ALF + " TO NUM-NUME."
		 		BUFOUT = ESCR_PD4(MG_12,REGMNU_CPT_ALF)
 
		 		REGMNU_CPT_ALF = "MOVE NUM-ZERO-S TO NUM-ZERO."
		 		BUFOUT = ESCR_PD4(MG_12,REGMNU_CPT_ALF)
		 		REGMNU_CPT_ALF = "MOVE NUM-SGNO-S TO NUM-SGNO."
		 		BUFOUT = ESCR_PD4(MG_12,REGMNU_CPT_ALF)
		 		REGMNU_CPT_ALF = "MOVE " + VEC_NUMER(JJ_CPT_NUM, CTE_NUMER_ENTER) + " TO NUM-NENT."
		 		BUFOUT = ESCR_PD4(MG_12,REGMNU_CPT_ALF)
		 		REGMNU_CPT_ALF = "MOVE " + VEC_NUMER(JJ_CPT_NUM, CTE_NUMER_DECIM) + " TO NUM-NDCM."
		 		BUFOUT = ESCR_PD4(MG_12,REGMNU_CPT_ALF)
		 		REGMNU_CPT_ALF = "PERFORM VAL-NUM."
		 		BUFOUT = ESCR_PD4(MG_12,REGMNU_CPT_ALF)
		 		REGMNU_CPT_ALF = "IF NUM-STAT-OKS"
		 		BUFOUT = ESCR_PD4(MG_12,REGMNU_CPT_ALF)
 
	 			REGMNU_CPT_ALF = "MOVE SPACES TO " + TP_EN_SRV$ + IDX_TP_CPT_ALF 
	 			BUFOUT = ESCR_PD4(MG_16,REGMNU_CPT_ALF)
	 			REGMNU_CPT_ALF = "MOVE NUM-NN9V TO " + TP_EN_SRV$ + "-NUM" + IDX_TP_CPT_ALF  + "."
	 			BUFOUT = ESCR_PD4(MG_16,REGMNU_CPT_ALF)

 				IF VEC_NUMER(JJ_CPT_NUM, CTE_NUMER_OCCY) > "" THEN
					REGMNU_CPT_ALF = "ADD 1 TO TPG-M."
					BUFOUT = ESCR_PD4(MG_12,REGMNU_CPT_ALF)
					REGMNU_CPT_ALF = "IF TPG-M NOT > " + VEC_NUMER(JJ_CPT_NUM, CTE_NUMER_OCCY)
					BUFOUT = ESCR_PD4(MG_12,REGMNU_CPT_ALF)
					REGMNU_CPT_ALF = "   GO TO CVN-" + PT_EN_SRV$ 
					BUFOUT = ESCR_PD4(MG_12,REGMNU_CPT_ALF)
					REGMNU_CPT_ALF = "ELSE"
					BUFOUT = ESCR_PD4(MG_12,REGMNU_CPT_ALF)
					REGMNU_CPT_ALF = "   ADD 1 TO  TPG-L"
					BUFOUT = ESCR_PD4(MG_12,REGMNU_CPT_ALF)
					REGMNU_CPT_ALF = "   MOVE 1 TO  TPG-M"
					BUFOUT = ESCR_PD4(MG_12,REGMNU_CPT_ALF)
					REGMNU_CPT_ALF = "   IF TPG-L NOT > " + VEC_NUMER(JJ_CPT_NUM, CTE_NUMER_OCCX)
					BUFOUT = ESCR_PD4(MG_12,REGMNU_CPT_ALF)
					REGMNU_CPT_ALF = "       GO TO CVN-" + PT_EN_SRV$ + "."
					BUFOUT = ESCR_PD4(MG_12,REGMNU_CPT_ALF)
				ELSE
				IF VEC_NUMER(JJ_CPT_NUM, CTE_NUMER_OCCX) > "" THEN
					REGMNU_CPT_ALF = "ADD 1 TO TPG-L."
					BUFOUT = ESCR_PD4(MG_12,REGMNU_CPT_ALF)
					REGMNU_CPT_ALF = "IF TPG-L NOT > " + VEC_NUMER(JJ_CPT_NUM, CTE_NUMER_OCCX)
					BUFOUT = ESCR_PD4(MG_12,REGMNU_CPT_ALF)
					REGMNU_CPT_ALF = "   GO TO CVN-" + PT_EN_SRV$ + "."
					BUFOUT = ESCR_PD4(MG_16,REGMNU_CPT_ALF)
				END IF
				END IF

		 		REGMNU_CPT_ALF = "VNF-" + TP_EN_SRV$ + "."
		 		BUFOUT = ESCR_PD4(MG_8,REGMNU_CPT_ALF)
		 		REGMNU_CPT_ALF = "EXIT."
		 		BUFOUT = ESCR_PD4(MG_12,REGMNU_CPT_ALF)
			END IF
 
		NEXT JJ_CPT_NUM

	NEXT II_CPT_NUM

	BUFOUT = PRT_ESTAD
	PASO_CPT_NUM = PASO_CPT_NUM + 1


	ANTB_CPT_ALF = " "
	 FOR II_CPT_NUM = 1 TO TPG_TOT_REQ 
		SIS_PAN_ANT_CPT_ALF =  " "
		FOR JJ_CPT_NUM = 1 TO TPG_MAT_CAM_TX(II_CPT_NUM) 
		      HH_CPT_NUM = TPG_MAT_CAM_PT(II_CPT_NUM) 
		    SIS_PAN_CPT_ALF = ""
		    IF TPG_MAT_TXFRM(II_CPT_NUM,JJ_CPT_NUM) = TPG_MAT_PTFRM(II_CPT_NUM,JJ_CPT_NUM)  THEN
			 AA_CPT_ALF = FNC_SYSSTR(JJ_CPT_NUM)
			IF FNC_SYSLEN(AA_CPT_ALF) = 1 THEN
				AA_CPT_ALF = "0" + AA_CPT_ALF
			END IF

			BUF_CPT_ALF = "MOV-PT-TX-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + " SECTION."
			BUFOUT = ESCR_PD1(MG_8,BUF_CPT_ALF)
			BUF_CPT_ALF = "INI-MOV-PT-TX-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + "."
			BUFOUT = ESCR_PD1(MG_8,BUF_CPT_ALF)
			SIS_PAN_CPT_ALF = TPG_MAT_HST_ALF(HST_CPT_NUM,CTE_IDX_SIS) + FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_FRM),128)

			IF TPG_MAT_TXFMT(II_CPT_NUM,JJ_CPT_NUM) <> "907"  THEN
 !!!				 BUF_CPT_ALF = " "
 !!!				 BUFOUT = ESCR_VBC(MG_8,BUF_CPT_ALF)

				SIS_PAN_CPT_ALF = SIS_PAN_CPT_ALF + FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_CMN),128) 
				BUF_CPT_ALF = "PC_A_PT_" + TPG_VEC_REQ(II_CPT_NUM)  + "_" + AA_CPT_ALF + " " + SIS_PAN_CPT_ALF
				ANTB_CPT_ALF = TPG_VEC_REQ(II_CPT_NUM)  + "_" + AA_CPT_ALF
				IF SIS_PAN_ANT_CPT_ALF <> SIS_PAN_CPT_ALF THEN
 !!!					BUFOUT = ESCR_VBC(MG_8,BUF_CPT_ALF)
					SIS_PAN_ANT_CPT_ALF = SIS_PAN_CPT_ALF 
					WRI_CPT_ALF = "NO"
				END IF
				FUNC_CPT_ALF = BUF_CPT_ALF
			END IF

			FOR GG_CPT_NUM = 1 TO TPG_TOT_HST
				 IF (TPG_MAT_HST_ALF(GG_CPT_NUM,CTE_IDX_NOM) = TPG_MAT_PTFRM(II_CPT_NUM,JJ_CPT_NUM)) THEN
					HST_CPT_NUM = GG_CPT_NUM
					GG_CPT_NUM = TPG_TOT_HST + 1
				END IF
			NEXT GG_CPT_NUM

			 SRV_CPT_NUM = 0
			FOR GG_CPT_NUM = 1 TO TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TSF) 
				  IF (TPG_MAT_SRV_ALF(HST_CPT_NUM,GG_CPT_NUM) =  FNC_SYSEDIT(TPG_MAT_PTFMT(II_CPT_NUM,JJ_CPT_NUM),128)) THEN
					SRV_CPT_NUM = GG_CPT_NUM
					GG_CPT_NUM = TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TSF) + 1
				END IF
			NEXT GG_CPT_NUM
			FOR GG_CPT_NUM = 1 TO TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TSF) 
				  IF (TPG_MAT_SRV_ALF(HST_CPT_NUM,GG_CPT_NUM) =  FNC_SYSEDIT(TPG_MAT_TXFMT(II_CPT_NUM,JJ_CPT_NUM),128)) THEN
					 SRV_TX_CPT_NUM = GG_CPT_NUM
					GG_CPT_NUM = TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TSF) + 1
				END IF
			NEXT GG_CPT_NUM

			IF SRV_CPT_NUM = 0 THEN
				V_L_CPT_NUM = SRV_CPT_NUM
			ELSE
				V_L_CPT_NUM = TPG_MAT_NCP_SRV(HST_CPT_NUM,SRV_CPT_NUM)
			END IF

			NIV_MOV_TX_ENT = 0
			NIV_MOV_PT_ENT = 0

			IF  TPG_MAT_NIV_IDTX(II_CPT_NUM,JJ_CPT_NUM,1) <> 0 THEN
				NIV_MOV_TX_ENT = NIV_MOV_TX_ENT + 1
				IF TPG_MAT_NIV_IDTX(II_CPT_NUM,JJ_CPT_NUM,2) <> 0 THEN
					NIV_MOV_TX_ENT = NIV_MOV_TX_ENT + 1
				END IF
			END IF	

			FOR DD_CPT_NUM = 1 TO TPG_MAT_CAM_PT(II_CPT_NUM) 
				IF TPG_MAT_TXFRM(II_CPT_NUM,JJ_CPT_NUM) = TPG_MAT_PTFRM(II_CPT_NUM,DD_CPT_NUM) THEN
					IF  FNC_SYSEDIT(TPG_MAT_TXFMT(II_CPT_NUM,JJ_CPT_NUM),128) = FNC_SYSEDIT(TPG_MAT_PTFMT(II_CPT_NUM,DD_CPT_NUM),128)  THEN 
						TY_CPT_NUM = DD_CPT_NUM
						DD_CPT_NUM = TPG_MAT_CAM_PT(II_CPT_NUM)  + 1
					ELSE
						TY_CPT_NUM = JJ_CPT_NUM
						DD_CPT_NUM = TPG_MAT_CAM_PT(II_CPT_NUM)  + 1
					 END IF
				 END IF
			NEXT DD_CPT_NUM

			IF  TPG_MAT_NIV_IDPT(II_CPT_NUM,TY_CPT_NUM,1)  <> 0 THEN
				NIV_MOV_PT_ENT = NIV_MOV_PT_ENT + 1
				IF  TPG_MAT_NIV_IDPT(II_CPT_NUM,TY_CPT_NUM,2)  <> 0  THEN
					NIV_MOV_PT_ENT = NIV_MOV_PT_ENT + 1
				END IF
			END IF

			NEX_CPT_ALF = "N"
			FIRST_CPT_ALF = "S"
			 FOR GG_CPT_NUM = 1 TO V_L_CPT_NUM
				NIV_MOV_PT_MOV_CPT_NUM = NIV_MOV_PT_ENT 
				NIV_MOV_TX_MOV_CPT_NUM = NIV_MOV_TX_ENT 
				N_IDX_CPT_NUM = 0
				NN_IDX_CPT_NUM = 0
				POS_IDX_CPT_NUM = 0
 
				FOR XX_CPT_NUM = 1 TO TPG_MAT_NCP_SRV(HST_CPT_NUM,SRV_CPT_NUM)
					 IF FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,XX_CPT_NUM),128) =  FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) THEN
						 N_IDX_CPT_NUM = N_IDX_CPT_NUM + 1
						 IF N_IDX_CPT_NUM = 2 THEN
							 POS_IDX_CPT_NUM = XX_CPT_NUM
						 END IF
					 END IF
				 NEXT XX_CPT_NUM

 !!!   BUSCA CAMPO DE SERVER EN HST PARA,IDENTIFICAR SU LARGO
				FOR TT_CPT_NUM = 1 TO TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TCF)
					TPGMATNAMEFLDSRV = FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128)
					IF TPGMATNAMEFLDSRV = TPG_MAT_NAMEFLDHST(HST_CPT_NUM,TT_CPT_NUM) THEN
						CAMP_CPT_NUM = TT_CPT_NUM
						TT_CPT_NUM = TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TCF) + 1
					END IF
				NEXT TT_CPT_NUM
				VV_CPT_ALF = FNC_SYSSTR(TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM)) 

 !!! FIN BUSQUEDA DE  CAMPO
				NN_IDX_CPT_NUM = TPG_MAT_TOTOCCFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM) 
				
				 IF NN_IDX_CPT_NUM <= 1 THEN
					NN_IDX_CPT_NUM = 1
				END IF
			
				IF NIV_MOV_PT_MOV_CPT_NUM = 0 THEN
					IDX_PT_CPT_ALF = ""
				ELSE
				IF NIV_MOV_PT_MOV_CPT_NUM = 1 THEN
					IDX_PT_CPT_ALF = "TPG-I"
				ELSE
				IF NIV_MOV_PT_MOV_CPT_NUM = 2 THEN
					IDX_PT_CPT_ALF = "TPG-I,TPG-J"
				ELSE
				IF NIV_MOV_PT_MOV_CPT_NUM = 3 THEN
					IDX_PT_CPT_ALF = "TPG-I,TPG-J,TPG-K"
				END IF
				END IF
				END IF
				END IF

				IF NIV_MOV_TX_MOV_CPT_NUM = 0 THEN
					IDX_TX_CPT_ALF = ""
					DSP_IDX_TX_CPT_ALF = ""
				ELSE
				IF NIV_MOV_TX_MOV_CPT_NUM = 1 THEN
					IDX_TX_CPT_ALF = "TPG-I"
					DSP_IDX_TX_CPT_ALF = " TPG-I "
				ELSE
				IF NIV_MOV_TX_MOV_CPT_NUM = 2 THEN
					IDX_TX_CPT_ALF = "TPG-I,TPG-J"
					DPS_IDX_TX_CPT_ALF = " TPG-I ',' TPG-J "
				ELSE
				IF NIV_MOV_TX_MOV_CPT_NUM = 3 THEN
					IDX_TX_CPT_ALF = "TPG-I,TPG-J,TPG-K"
					DSP_IDX_TX_CPT_ALF = " TPG-I ',' TPG-J ',' TPG-K"
				END IF
				END IF
				END IF
				END IF

				IF IDX_PT_CPT_ALF > "" OR NN_IDX_CPT_NUM > 1 THEN
					ABPAPT_CPT_ALF = "("
					CIPAPT_CPT_ALF = ")"
				ELSE
					ABPAPT_CPT_ALF = ""
					CIPAPT_CPT_ALF = ""
				END IF

				COMAPT_CPT_ALF = ""
				IF IDX_PT_CPT_ALF > "" AND NN_IDX_CPT_NUM > 1 THEN
					COMAPT_CPT_ALF = ","
				END IF

				IF IDX_TX_CPT_ALF > "" OR NN_IDX_CPT_NUM > 1 THEN
					ABPATX_CPT_ALF = "("
					CIPATX_CPT_ALF = ")"
				ELSE
					ABPATX_CPT_ALF = ""
					CIPATX_CPT_ALF = ""
				END IF
				COMATX_CPT_ALF = ""
				IF IDX_TX_CPT_ALF > "" AND NN_IDX_CPT_NUM > 1 THEN
					COMATX_CPT_ALF = ","
				END IF

				YY_CPT_ALF = FNC_SYSSTR(JJ_CPT_NUM)
				IF FNC_SYSLEN(YY_CPT_ALF) = 1 THEN
					YY_CPT_ALF = "0" + YY_CPT_ALF
				END IF
				YY_CPT_ALF = "-" + YY_CPT_ALF

				IF (NN_IDX_CPT_NUM > 0 AND TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,1)  > 0  AND FIRST_CPT_ALF = "S") THEN
					MULT_CPT_NUM = TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,1)
					NNN_IDX_CPT_NUM = NN_IDX_CPT_NUM  * MULT_CPT_NUM
					COL_CPT_NUM =  0
					FIRST_CPT_ALF = "N"
				 END IF

				 IF ((NN_IDX_CPT_NUM > 1  OR TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,1)  > 0) AND FIRST_CPT_ALF = "S") THEN
					IF TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,1)  > 0 THEN
						MULT_CPT_NUM = TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,1)
						NNN_IDX_CPT_NUM = NN_IDX_CPT_NUM  * MULT_CPT_NUM
					 END IF
					COL_CPT_NUM =  0
					FIRST_CPT_ALF = "N"
				 END IF

				GLS_1_CPT_ALF = FNC_SYSEDIT(TPG_MAT_IDENFLDHST(HST_CPT_NUM ,CAMP_CPT_NUM),16%)

				MOV_OKS_CPT_NUM = 0
				FOR VV_CPT_NUM = 1 TO TPG_MAT_NCP_SRV(HST_CPT_NUM,SRV_TX_CPT_NUM)
				    IF TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM) = TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_TX_CPT_NUM,VV_CPT_NUM) THEN
						 MOV_OKS_CPT_NUM = 1
						 VV_CPT_NUM = TPG_MAT_NCP_SRV(HST_CPT_NUM,SRV_TX_CPT_NUM) + 1
				    END IF
					NEXT VV_CPT_NUM

				IF MOV_OKS_CPT_NUM = 1 THEN
				 IF NN_IDX_CPT_NUM > 1  THEN
					 IF  GG_CPT_NUM < POS_IDX_CPT_NUM THEN
						COL_CPT_NUM =  COL_CPT_NUM  + 1
						REGMNU_CPT_ALF = ""
						BUFOUT = ESCR_PD1(MG_12,REGMNU_CPT_ALF)
						REGMNU_CPT_ALF = "MOVE 1 TO TPG-L."
						BUFOUT = ESCR_PD1(MG_12,REGMNU_CPT_ALF)
						REGMNU_CPT_ALF = "LUP-" + "PT-" + TPG_VEC_REQ(II_CPT_NUM) + YY_CPT_ALF  + "-" 
						REGMNU_CPT_ALF = REGMNU_CPT_ALF + FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) + "."
						BUFOUT = ESCR_PD1(MG_8,REGMNU_CPT_ALF)
						REGMNU_CPT_ALF = "MOVE PT-" + TPG_VEC_REQ(II_CPT_NUM) 
						REGMNU_CPT_ALF = REGMNU_CPT_ALF + YY_CPT_ALF  + "-" 
						REGMNU_CPT_ALF = REGMNU_CPT_ALF +&
							FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) +&
							ABPAPT_CPT_ALF + IDX_PT_CPT_ALF + COMAPT_CPT_ALF 
						REGMNU_CPT_ALF = REGMNU_CPT_ALF + "TPG-L" + CIPAPT_CPT_ALF + " TO TX-" +&
							TPG_VEC_REQ(II_CPT_NUM) + YY_CPT_ALF  + "-" 
						REGMNU_CPT_ALF = REGMNU_CPT_ALF +&
							FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) +&
							ABPATX_CPT_ALF + IDX_TX_CPT_ALF + COMATX_CPT_ALF 
						REGMNU_CPT_ALF = REGMNU_CPT_ALF + "TPG-L" + CIPATX_CPT_ALF + "." 
						BUFOUT = ESCR_PD1(MG_12,REGMNU_CPT_ALF)
						REGMNU_CPT_ALF = "ADD 1 TO TPG-L."
						BUFOUT = ESCR_PD1(MG_12,REGMNU_CPT_ALF)
						REGMNU_CPT_ALF = "IF TPG-L < " + FNC_SYSSTR(NN_IDX_CPT_NUM + 1)
						BUFOUT = ESCR_PD1(MG_12,REGMNU_CPT_ALF)
						REGMNU_CPT_ALF = "GO TO " + "LUP-" + "PT-" + TPG_VEC_REQ(II_CPT_NUM) + YY_CPT_ALF  
						REGMNU_CPT_ALF = REGMNU_CPT_ALF +   "-" + FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128)+ "."
						BUFOUT = ESCR_PD1(MG_16,REGMNU_CPT_ALF)

 !!!	NUMIDX$ = "NO"
 !!!	PT_EN_SRV$ = "PT-" + TPG_VEC_REQ(II_CPT_NUM) + YY_CPT_ALF  + "-" + FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) 
 !!!	FOR WWW% = 1 TO TOT_NUMER
 !!!		IF PT_EN_SRV$ = VEC_NUMER(WWW%,CTE_NUMER_NAME) THEN
 !!!			NUMIDX$ = "SI"
 !!!			WWW% = TOT_NUMER + 1
 !!!			FFF% = EDT_NUM
 !!!		END IF
 !!!	NEXT WWW%
					END IF
				ELSE

					REGMNU_CPT_ALF = "MOVE PT-" + TPG_VEC_REQ(II_CPT_NUM) 
					REGMNU_CPT_ALF = REGMNU_CPT_ALF +    YY_CPT_ALF  + "-" 
					REGMNU_CPT_ALF = REGMNU_CPT_ALF +    FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) + ABPAPT_CPT_ALF + IDX_PT_CPT_ALF + CIPAPT_CPT_ALF 
					REGMNU_CPT_ALF = REGMNU_CPT_ALF +    " TO TX-" + TPG_VEC_REQ(II_CPT_NUM) + YY_CPT_ALF  + "-" 
					REGMNU_CPT_ALF = REGMNU_CPT_ALF +    FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) + ABPATX_CPT_ALF + IDX_TX_CPT_ALF + CIPATX_CPT_ALF + "." 
					BUFOUT = ESCR_PD1(MG_12,REGMNU_CPT_ALF)

 !!!	PT_EN_SRV$ = "PT-" + TPG_VEC_REQ(II_CPT_NUM) + YY_CPT_ALF  + "-" + FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) 
 !!!	NUMIDX$ = "NO"
 !!!	FOR WWW% = 1 TO TOT_NUMER
 !!!		IF PT_EN_SRV$ = VEC_NUMER(WWW%,CTE_NUMER_NAME) THEN
 !!!			WWW% = TOT_NUMER + 1
 !!!			FFF% = EDT_NUM
 !!!		END IF
 !!!	NEXT WWW%

				END IF
				END IF
				
				 IF ((NN_IDX_CPT_NUM > 1  OR TPG_MAT_NIV_IDPT(II_CPT_NUM,JJ_CPT_NUM,1)  > 0)) THEN
						 COL_CPT_NUM =  COL_CPT_NUM  + 1
						 FLD_VBC_CPT_ALF = FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) 
						FLD_VBC_CPT_ALF = GENRPTREP(FLD_VBC_CPT_ALF,"-","_")
						WHILE FNC_SYSLEN(FLD_VBC_CPT_ALF) < 15 
							FLD_VBC_CPT_ALF  = FLD_VBC_CPT_ALF  + " " 
	     					NEXT
						LR_CPT_ALF = FNC_SYSSTR(TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM))
						WHILE FNC_SYSLEN(LR_CPT_ALF) < 3
							LR_CPT_ALF = "0" + LR_CPT_ALF
	     					NEXT
						CL_CPT_ALF = FNC_SYSSTR(COL_CPT_NUM)
						IF FNC_SYSLEN(CL_CPT_ALF) < 2 THEN
							CL_CPT_ALF = "0" + CL_CPT_ALF
						END IF
						BUF_CPT_ALF = CL_CPT_ALF +  " " + LR_CPT_ALF + " " + BUF_CPT_ALF 
 !!!						BUFOUT = ESCR_VBC(MG_12,BUF_CPT_ALF)
						NEX_CPT_ALF = "S"
					ELSE
						 IF NEX_CPT_ALF = "S" THEN
							 NEX_CPT_ALF = "N" 
						 END IF
						 FLD_VBC_CPT_ALF = FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) 
						FLD_VBC_CPT_ALF = GENRPTREP(FLD_VBC_CPT_ALF,"-","_")
						WHILE FNC_SYSLEN(FLD_VBC_CPT_ALF) < 15 
							FLD_VBC_CPT_ALF  = FLD_VBC_CPT_ALF  + " " 
	     					NEXT
						LR_CPT_ALF = FNC_SYSSTR(TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM))
						WHILE FNC_SYSLEN(LR_CPT_ALF) < 3
							LR_CPT_ALF = "0" + LR_CPT_ALF
	     					NEXT
						BUF_CPT_ALF = FLD_VBC_CPT_ALF + " " + LR_CPT_ALF + " " + GLS_1_CPT_ALF
 !!!						BUFOUT = ESCR_VBC(MG_12,BUF_CPT_ALF)
				END IF
			 NEXT GG_CPT_NUM
			 IF NEX_CPT_ALF = "S" THEN
				 NEX_CPT_ALF = "N" 
			 END IF

			FIRST_CPT_ALF = "S"
			NEX_CPT_ALF = "N" 

			BUF_CPT_ALF = "FIN-MOV-PT-TX-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + "."
			BUFOUT = ESCR_PD1(MG_8,BUF_CPT_ALF)
			BUF_CPT_ALF = "EXIT."
			BUFOUT = ESCR_PD1(MG_12,BUF_CPT_ALF)
			BUF_CPT_ALF = ""
			BUFOUT = ESCR_PD1(MG_12,BUF_CPT_ALF)
 !!!			BUF_CPT_ALF = ""
 !!!			BUFOUT = ESCR_DFI(MG_12,BUF_CPT_ALF)
		  END IF
		NEXT JJ_CPT_NUM
	NEXT II_CPT_NUM

	BUFOUT = PRT_ESTAD

        END DEF

        DEF STRING FNC_MOV_MXAPT
	PASO_CPT_NUM = PASO_CPT_NUM + 1


	FOR II_CPT_NUM = 1 TO TPG_TOT_REQ 
		SIS_PAN_ANT_CPT_ALF = " "
		FOR JJ_CPT_NUM = 1 TO TPG_MAT_CAM_XT(II_CPT_NUM) 
			AA_CPT_ALF = FNC_SYSSTR(JJ_CPT_NUM)
			IF FNC_SYSLEN(AA_CPT_ALF) = 1 THEN
				AA_CPT_ALF = "0" + AA_CPT_ALF
			END IF
			BUF_CPT_ALF = "MOV-XT-TP-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + " SECTION."
			BUFOUT = ESCR_PD2(MG_8,BUF_CPT_ALF)
			BUF_CPT_ALF = "INI-MOV-XT-TP-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + "."
			BUFOUT = ESCR_PD2(MG_8,BUF_CPT_ALF)

			NIV_MOV_XT_ENT = 0
			NIV_MOV_TP_ENT = 0

			IF  TPG_MAT_NIV_IDXT(II_CPT_NUM,JJ_CPT_NUM,1) <> 0 THEN
				NIV_MOV_XT_ENT = NIV_MOV_TX_ENT + 1
				IF TPG_MAT_NIV_IDXT(II_CPT_NUM,JJ_CPT_NUM,2) <> 0 THEN
					NIV_MOV_XT_ENT = NIV_MOV_XT_ENT + 1
				END IF
			END IF	

			FOR GG_CPT_NUM = 1 TO TPG_TOT_HST
				IF (TPG_MAT_HST_ALF(GG_CPT_NUM,CTE_IDX_NOM) = TPG_MAT_XTFRM(II_CPT_NUM,JJ_CPT_NUM)) THEN
					HST_CPT_NUM = GG_CPT_NUM
					GG_CPT_NUM = TPG_TOT_HST + 1
				END IF
			NEXT GG_CPT_NUM	


			MM_CPT_NUM = 0
			FOR GG_CPT_NUM = 1 TO TPG_TOT_HST
				IF (TPG_MAT_HST_ALF(GG_CPT_NUM, CTE_IDX_NOM) = TPG_MAT_TPFRM(II_CPT_NUM, JJ_CPT_NUM)) THEN
					MM_CPT_NUM = GG_CPT_NUM
					GG_CPT_NUM = TPG_TOT_HST + 1
				END IF
			NEXT GG_CPT_NUM	

			FOR AA_CPT_NUM = 1 TO TPG_MAT_HST_NUM(HST_CPT_NUM, CTE_IDX_TSF) 
				  IF (TPG_MAT_SRV_ALF(HST_CPT_NUM, AA_CPT_NUM) =  FNC_SYSEDIT(TPG_MAT_TPFMT(II_CPT_NUM, JJ_CPT_NUM), 128)) THEN
					 UBI_SRV_TP = AA_CPT_NUM
					AA_CPT_NUM = TPG_MAT_HST_NUM(HST_CPT_NUM, CTE_IDX_TSF) + 1
				END IF
			NEXT AA_CPT_NUM

			FOR GG_CPT_NUM = 1 TO TPG_MAT_HST_NUM(HST_CPT_NUM, CTE_IDX_TSF) 
				IF (TPG_MAT_SRV_ALF(HST_CPT_NUM, GG_CPT_NUM) =  FNC_SYSEDIT(TPG_MAT_XTFMT(II_CPT_NUM, JJ_CPT_NUM), 128)) THEN
					SRV_CPT_NUM = GG_CPT_NUM
					GG_CPT_NUM = TPG_MAT_HST_NUM(HST_CPT_NUM, CTE_IDX_TSF) + 1
				END IF
			NEXT GG_CPT_NUM

			SIS_PAN_CPT_ALF = TPG_MAT_HST_ALF(HST_CPT_NUM, CTE_IDX_SIS) + FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM, JJ_CPT_NUM, CTE_TRN_FRM), 128)
			 BUF_CPT_ALF = " "
 !!!			 BUFOUT = ESCR_VBC(MG_8, BUF_CPT_ALF)
			 SIS_PAN_CPT_ALF = SIS_PAN_CPT_ALF + FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM, JJ_CPT_NUM, CTE_TRN_CMN), 128)

			FOR DD_CPT_NUM = 1 TO TPG_MAT_CAM_TP(II_CPT_NUM) 
				TPGMATTPFRM_CPT_ALF = FNC_SYSEDIT(TPG_MAT_TPFRM(II_CPT_NUM, DD_CPT_NUM), 128)
				TPGMATTPFMT = FNC_SYSEDIT(TPG_MAT_TPFMT(II_CPT_NUM, DD_CPT_NUM), 128)  
				IF TPG_MAT_XTFRM(II_CPT_NUM, JJ_CPT_NUM) = TPGMATTPFRM_CPT_ALF  AND FNC_SYSEDIT(TPG_MAT_XTFMT(II_CPT_NUM, JJ_CPT_NUM), 128) = TPGMATTPFMT   THEN 
					TY_CPT_NUM = DD_CPT_NUM
					DD_CPT_NUM = TPG_MAT_CAM_TP(II_CPT_NUM) + 1
				END IF
			NEXT DD_CPT_NUM

			IF  TPG_MAT_NIV_IDTP(II_CPT_NUM,TY_CPT_NUM,1)  <> 0 THEN
				NIV_MOV_TP_ENT = NIV_MOV_TP_ENT + 1
				IF  TPG_MAT_NIV_IDTP(II_CPT_NUM,TY_CPT_NUM,2)  <> 0  THEN
					NIV_MOV_TP_ENT = NIV_MOV_TP_ENT + 1
				END IF
			END IF

			NEX_CPT_ALF = "N"
			FIRST_CPT_ALF = "S"
			FOR GG_CPT_NUM = 1 TO TPG_MAT_NCP_SRV(HST_CPT_NUM,SRV_CPT_NUM)
				NIV_MOV_TP_MOV_CPT_NUM = NIV_MOV_TP_ENT
				NIV_MOV_XT_MOV_CPT_NUM = NIV_MOV_XT_ENT
				NN_IDX_CPT_NUM = 0
				N_IDX_CPT_NUM = 0
				POS_IDX_CPT_NUM = 0
				 FOR XX_CPT_NUM = 1 TO TPG_MAT_NCP_SRV(HST_CPT_NUM,SRV_CPT_NUM)
					 IF FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,XX_CPT_NUM),128) = FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) THEN
						 N_IDX_CPT_NUM = N_IDX_CPT_NUM + 1
						 IF N_IDX_CPT_NUM = 2 THEN
							 POS_IDX_CPT_NUM = XX_CPT_NUM
						 END IF
					 END IF
				 NEXT XX_CPT_NUM
				NN_IDX_CPT_NUM = TPG_MAT_TOTOCCFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM) 

 !!!   BUSCA CAMPO DE SERVER EN HST PARA,IDENTIFICAR SU LARGO
				FOR TT_CPT_NUM = 1 TO TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TCF)
					TPGMATNAMEFLDSRV = FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128)
					IF TPGMATNAMEFLDSRV = TPG_MAT_NAMEFLDHST(HST_CPT_NUM,TT_CPT_NUM) THEN
						CAMP_CPT_NUM = TT_CPT_NUM
						TT_CPT_NUM = TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TCF) + 1
					END IF
				NEXT TT_CPT_NUM
				VV_CPT_ALF = FNC_SYSSTR(TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM)) 
 !!! FIN BUSQUEDA DE  CAMPO
				 IF NN_IDX_CPT_NUM <= 1 THEN
					NN_IDX_CPT_NUM = 1
				END IF
				IF NIV_MOV_TP_MOV_CPT_NUM = 0 THEN
					IDX_TP_CPT_ALF = ""
				ELSE
				IF NIV_MOV_TP_MOV_CPT_NUM = 1 THEN
					IDX_TP_CPT_ALF = "TPG-I"
				ELSE
				IF NIV_MOV_TP_MOV_CPT_NUM = 2 THEN
					IDX_TP_CPT_ALF = "TPG-I,TPG-J"
				ELSE
				IF NIV_MOV_TP_MOV_CPT_NUM = 3 THEN
					IDX_TP_CPT_ALF = "TPG-I,TPG-J,TPG-K"
				END IF
				END IF
				END IF
				END IF

				IF NIV_MOV_XT_MOV_CPT_NUM = 0 THEN
					IDX_XT_CPT_ALF = ""
					DSP_IDX_TX_CPT_ALF = ""
				ELSE
				IF NIV_MOV_XT_MOV_CPT_NUM = 1 THEN
					IDX_XT_CPT_ALF = "TPG-I"
					DSP_IDX_XT_CPT_ALF = "TPG-I"
				ELSE
				IF NIV_MOV_XT_MOV_CPT_NUM = 2 THEN
					IDX_XT_CPT_ALF = "TPG-I,TPG-J"
					DSP_IDX_XT_CPT_ALF = "TPG-I,TPG-J"
				ELSE
				IF NIV_MOV_XT_MOV_CPT_NUM = 3 THEN
					IDX_XT_CPT_ALF = "TPG-I,TPG-J,TPG-K"
					DSP_IDX_XT_CPT_ALF = "TPG-I,TPG-J,TPG-K"
				END IF
				END IF
				END IF
				END IF

				IF IDX_TP_CPT_ALF > "" OR NN_IDX_CPT_NUM > 1 THEN
					ABPATP_CPT_ALF = "("
					CIPATP_CPT_ALF = ")"
				ELSE
					ABPATP_CPT_ALF = ""
					CIPATP_CPT_ALF = ""
				END IF

				COMATP_CPT_ALF = ""
				IF IDX_TP_CPT_ALF > "" AND NN_IDX_CPT_NUM > 1 THEN
					COMATP_CPT_ALF = ","
				END IF

				IF IDX_XT_CPT_ALF > "" OR NN_IDX_CPT_NUM > 1 THEN
					ABPAXT_CPT_ALF = "("
					CIPAXT_CPT_ALF = ")"
				ELSE
					ABPAXT_CPT_ALF = ""
					CIPAXT_CPT_ALF = ""
				END IF
				COMAXT_CPT_ALF = ""
				IF IDX_XT_CPT_ALF > "" AND NN_IDX_CPT_NUM > 1 THEN
					COMAXT_CPT_ALF = ","
				END IF

				YY_CPT_ALF = FNC_SYSSTR(JJ_CPT_NUM)
				IF FNC_SYSLEN(YY_CPT_ALF) = 1 THEN
					YY_CPT_ALF = "0" + YY_CPT_ALF
				END IF
				YY_CPT_ALF = "-" + YY_CPT_ALF

				 IF (NN_IDX_CPT_NUM > 0 AND TPG_MAT_NIV_IDXT(II_CPT_NUM,JJ_CPT_NUM,1)  > 0  AND FIRST_CPT_ALF = "S") THEN
					MULT_CPT_NUM = TPG_MAT_NIV_IDXT(II_CPT_NUM,JJ_CPT_NUM,1)
					NNN_IDX_CPT_NUM = NN_IDX_CPT_NUM  * MULT_CPT_NUM
					COL_CPT_NUM =  0
					FIRST_CPT_ALF = "N"
				 END IF

				IF ((NN_IDX_CPT_NUM > 1  OR TPG_MAT_NIV_IDXT(II_CPT_NUM,JJ_CPT_NUM,1)  > 0) AND FIRST_CPT_ALF = "S") THEN
					IF TPG_MAT_NIV_IDXT(II_CPT_NUM,JJ_CPT_NUM,1)  > 0 THEN
						MULT_CPT_NUM = TPG_MAT_NIV_IDXT(II_CPT_NUM,JJ_CPT_NUM,1)
						NNN_IDX_CPT_NUM = NN_IDX_CPT_NUM  * MULT_CPT_NUM
					 END IF
					COL_CPT_NUM =  0
					FIRST_CPT_ALF = "N"
				 END IF

				GLS_1_CPT_ALF = FNC_SYSEDIT(TPG_MAT_IDENFLDHST(HST_CPT_NUM ,CAMP_CPT_NUM),16%)
				IF NN_IDX_CPT_NUM > 1 THEN
					IF  GG_CPT_NUM < POS_IDX_CPT_NUM THEN
						REGMNU_CPT_ALF = ""
						BUFOUT = ESCR_PD2(MG_12,REGMNU_CPT_ALF)
						REGMNU_CPT_ALF = "MOVE 1 TO TPG-L."
						BUFOUT = ESCR_PD2(MG_12,REGMNU_CPT_ALF)
						REGMNU_CPT_ALF = "LUP-" + "TP-" + TPG_VEC_REQ(II_CPT_NUM) + YY_CPT_ALF  
						REGMNU_CPT_ALF = REGMNU_CPT_ALF +  "-" + FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) + "."
						BUFOUT = ESCR_PD2(MG_8,REGMNU_CPT_ALF)
 !!! INI move de atributos
					   IF ATR_PRT = TPG_CTE_TRUE THEN
						REGMNU_CPT_ALF = "MOVE XT-" + TPG_VEC_REQ(II_CPT_NUM) + YY_CPT_ALF  + "-" 
						REGMNU_CPT_ALF = REGMNU_CPT_ALF +&
							 FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) +&
								"-ATR" + ABPAXT_CPT_ALF + IDX_XT_CPT_ALF + COMAXT_CPT_ALF 
						REGMNU_CPT_ALF = REGMNU_CPT_ALF + "TPG-L" + CIPAXT_CPT_ALF + " TO TP-" +&
									TPG_VEC_REQ(II_CPT_NUM) 
						REGMNU_CPT_ALF = REGMNU_CPT_ALF + YY_CPT_ALF  + "-" 
						REGMNU_CPT_ALF = REGMNU_CPT_ALF +&
							FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) +&
							"-ATR" + ABPATP_CPT_ALF + IDX_TP_CPT_ALF + COMATP_CPT_ALF 
						REGMNU_CPT_ALF = REGMNU_CPT_ALF + "TPG-L" + CIPATP_CPT_ALF + "." 
						BUFOUT = ESCR_PD2(MG_12,REGMNU_CPT_ALF)
					   END IF
 !!! FIN move de atributos

 !!!	TP_EN_SRV$ = "TP-" + TPG_VEC_REQ(II_CPT_NUM) + YY_CPT_ALF  + "-" + FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) 
 !!!	NUMIDX$ = "NO"
 !!!	FOR WWW% = 1 TO TOT_NUMER
 !!!		IF TP_EN_SRV$ = VEC_NUMER(WWW%,CTE_NUMER_NAME) THEN
 !!!			NUMIDX$ = "SI"
 !!!			IDX_NUM% = WWW%
 !!!			WWW% = TOT_NUMER + 1
 !!!			FFF% = VAL_NUM
 !!!		END IF
 !!!	NEXT WWW%

						REGMNU_CPT_ALF = "MOVE XT-" + TPG_VEC_REQ(II_CPT_NUM) + YY_CPT_ALF  + "-" 
						REGMNU_CPT_ALF = REGMNU_CPT_ALF + FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) + ABPAXT_CPT_ALF + IDX_XT_CPT_ALF + COMAXT_CPT_ALF 
						REGMNU_CPT_ALF = REGMNU_CPT_ALF + "TPG-L" + CIPAXT_CPT_ALF + " TO TP-" +&
									TPG_VEC_REQ(II_CPT_NUM) 
						REGMNU_CPT_ALF = REGMNU_CPT_ALF + YY_CPT_ALF  + "-" 
						REGMNU_CPT_ALF = REGMNU_CPT_ALF +&
							FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) +&
							ABPATP_CPT_ALF + IDX_TP_CPT_ALF + COMATP_CPT_ALF 
						REGMNU_CPT_ALF = REGMNU_CPT_ALF + "TPG-L" + CIPATP_CPT_ALF + "." 
						BUFOUT = ESCR_PD2(MG_12,REGMNU_CPT_ALF)

						REGMNU_CPT_ALF = "ADD 1 TO TPG-L."
						BUFOUT = ESCR_PD2(MG_12,REGMNU_CPT_ALF)
						REGMNU_CPT_ALF = "IF TPG-L < " + FNC_SYSSTR(NN_IDX_CPT_NUM + 1)
						BUFOUT = ESCR_PD2(MG_12,REGMNU_CPT_ALF)
						REGMNU_CPT_ALF = "GO TO " + "LUP-" + "TP-" + TPG_VEC_REQ(II_CPT_NUM) + YY_CPT_ALF  
						REGMNU_CPT_ALF = REGMNU_CPT_ALF +   "-" + FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) + "."
						BUFOUT = ESCR_PD2(MG_16,REGMNU_CPT_ALF)
					END IF
				ELSE
		MOV_OKS_CPT_NUM = 0
		FOR VV_CPT_NUM = 1 TO TPG_MAT_NCP_SRV(HST_CPT_NUM, UBI_SRV_TP)
		    IF TPG_MAT_NAMEFLDSRV(HST_CPT_NUM, SRV_CPT_NUM, GG_CPT_NUM) = TPG_MAT_NAMEFLDSRV(HST_CPT_NUM, UBI_SRV_TP, VV_CPT_NUM) THEN
				 MOV_OKS_CPT_NUM = 1
				 VV_CPT_NUM = TPG_MAT_NCP_SRV(HST_CPT_NUM, UBI_SRV_TP) + 1
		    END IF
		NEXT VV_CPT_NUM
		IF ((MOV_OKS_CPT_NUM = 1) AND  (MM_CPT_NUM = HST_CPT_NUM)) THEN
 !!! INI move de atributos
		   IF ATR_PRT = TPG_CTE_TRUE THEN
			REGMNU_CPT_ALF = "MOVE XT-" + TPG_VEC_REQ(II_CPT_NUM) + YY_CPT_ALF + "-" 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF +&
				FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM, SRV_CPT_NUM, GG_CPT_NUM), 128) +&
				"-ATR" + ABPAXT_CPT_ALF + IDX_XT_CPT_ALF + CIPAXT_CPT_ALF
 !!!			IF TPG_MAT_TIP_NUM(HST_CPT_NUM,CAMP_CPT_NUM) = "9" THEN
 !!!				REGMNU_CPT_ALF = REGMNU_CPT_ALF + "-ALF "
 !!!			END IF
			REGMNU_CPT_ALF = REGMNU_CPT_ALF + " TO TP-" + TPG_VEC_REQ(II_CPT_NUM) + YY_CPT_ALF + "-" 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF +&
				FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM, SRV_CPT_NUM, GG_CPT_NUM), 128) +&
				"-ATR" + ABPATP_CPT_ALF + IDX_TP_CPT_ALF + CIPATP_CPT_ALF + "." 
			BUFOUT = ESCR_PD2(MG_12, REGMNU_CPT_ALF)
		   END IF
 !!! FIN move de atributos
 !!!	TP_EN_SRV$ = "TP-" + TPG_VEC_REQ(II_CPT_NUM) + YY_CPT_ALF  + "-" + FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) 
 !!!	NUMIDX$ = "NO"
 !!!	FOR WWW% = 1 TO TOT_NUMER
 !!!		IF TP_EN_SRV$ = VEC_NUMER(WWW%,CTE_NUMER_NAME) THEN
 !!!			IDX_NUM% = WWW%
 !!!			WWW% = TOT_NUMER + 1
 !!!			FFF% = VAL_NUM
 !!!		END IF
 !!!	NEXT WWW%
			REGMNU_CPT_ALF = "MOVE XT-" + TPG_VEC_REQ(II_CPT_NUM) + YY_CPT_ALF + "-" 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF + FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM, SRV_CPT_NUM, GG_CPT_NUM), 128) + ABPAXT_CPT_ALF + IDX_XT_CPT_ALF + CIPAXT_CPT_ALF
 !!!			IF TPG_MAT_TIP_NUM(HST_CPT_NUM,CAMP_CPT_NUM) = "9" THEN
 !!!				REGMNU_CPT_ALF = REGMNU_CPT_ALF + "-ALF "
 !!!			END IF
			REGMNU_CPT_ALF = REGMNU_CPT_ALF + " TO TP-" + TPG_VEC_REQ(II_CPT_NUM) + YY_CPT_ALF + "-" 
			REGMNU_CPT_ALF = REGMNU_CPT_ALF + FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM, SRV_CPT_NUM, GG_CPT_NUM), 128) + ABPATP_CPT_ALF + IDX_TP_CPT_ALF + CIPATP_CPT_ALF + "." 
			BUFOUT = ESCR_PD2(MG_12, REGMNU_CPT_ALF)
					END IF
				END IF

			 NEXT GG_CPT_NUM

			IF NEX_CPT_ALF = "S" THEN
				 NEX_CPT_ALF = "N" 
			END IF

			BUF_CPT_ALF = "FIN-MOV-XT-TP-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + "."
			BUFOUT = ESCR_PD2(MG_8,BUF_CPT_ALF)
			BUF_CPT_ALF = "EXIT."
			BUFOUT = ESCR_PD2(MG_12,BUF_CPT_ALF)
			BUF_CPT_ALF = ""
			BUFOUT = ESCR_PD2(MG_12,BUF_CPT_ALF)
 !!! BUF_CPT_ALF = "FIN-DSP-TP-" + TPG_VEC_REQ(II_CPT_NUM)  + "-" + AA_CPT_ALF + "." / BUFOUT = ESCR_DFO(MG_8,BUF_CPT_ALF)
 !!! BUF_CPT_ALF = "EXIT." / BUFOUT = ESCR_DFO(MG_12,BUF_CPT_ALF) / BUF_CPT_ALF = "" / BUFOUT = ESCR_DFO(MG_12,BUF_CPT_ALF)
 !!!		END IF
		NEXT JJ_CPT_NUM
	NEXT II_CPT_NUM


	FOR II_CPT_NUM = 1 TO TPG_TOT_REQ 
		SIS_PAN_ANT_CPT_ALF = " "
		FOR JJ_CPT_NUM = 1 TO TPG_MAT_CAM_TP(II_CPT_NUM) 
			AA_CPT_ALF = FNC_SYSSTR(JJ_CPT_NUM)
			IF FNC_SYSLEN(AA_CPT_ALF) = 1 THEN
				AA_CPT_ALF = "0" + AA_CPT_ALF
			END IF

			NIV_MOV_XT_ENT = 0
			NIV_MOV_TP_ENT = 0

			IF  TPG_MAT_NIV_IDXT(II_CPT_NUM,JJ_CPT_NUM,1) <> 0 THEN
				NIV_MOV_XT_ENT = NIV_MOV_TX_ENT + 1
				IF TPG_MAT_NIV_IDXT(II_CPT_NUM,JJ_CPT_NUM,2) <> 0 THEN
					NIV_MOV_XT_ENT = NIV_MOV_XT_ENT + 1
				END IF
			END IF	

			FOR GG_CPT_NUM = 1 TO TPG_TOT_HST
				IF (TPG_MAT_HST_ALF(GG_CPT_NUM,CTE_IDX_NOM) = TPG_MAT_XTFRM(II_CPT_NUM,JJ_CPT_NUM)) THEN
					HST_CPT_NUM = GG_CPT_NUM
					GG_CPT_NUM = TPG_TOT_HST + 1
				END IF
			NEXT GG_CPT_NUM	

			FOR GG_CPT_NUM = 1 TO TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TSF) 
				IF (TPG_MAT_SRV_ALF(HST_CPT_NUM,GG_CPT_NUM) =  FNC_SYSEDIT(TPG_MAT_XTFMT(II_CPT_NUM,JJ_CPT_NUM),128)) THEN
					SRV_CPT_NUM = GG_CPT_NUM
					GG_CPT_NUM = TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TSF) + 1
				END IF
			NEXT GG_CPT_NUM

			SIS_PAN_CPT_ALF = TPG_MAT_HST_ALF(HST_CPT_NUM,CTE_IDX_SIS) + FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_FRM),128)
			 BUF_CPT_ALF = " "
 !!!			 BUFOUT = ESCR_VBC(MG_8,BUF_CPT_ALF)
				SIS_PAN_CPT_ALF = SIS_PAN_CPT_ALF + FNC_SYSEDIT(TPG_MAT_TRN(II_CPT_NUM,JJ_CPT_NUM,CTE_TRN_CMN),128)

			BUF_CPT_ALF = "PT_A_PC_" + TPG_VEC_REQ(II_CPT_NUM)  + "_" + AA_CPT_ALF + " " + SIS_PAN_CPT_ALF
			IF SIS_PAN_ANT_CPT_ALF <> SIS_PAN_CPT_ALF THEN
 !!!				BUFOUT = ESCR_VBC(MG_8,BUF_CPT_ALF)
				SIS_PAN_ANT_CPT_ALF = SIS_PAN_CPT_ALF 
				WRI_CPT_ALF = "NO"
			END IF

			FUNC_CPT_ALF = BUF_CPT_ALF
			FOR DD_CPT_NUM = 1 TO TPG_MAT_CAM_TP(II_CPT_NUM) 
				TPGMATTPFRM_CPT_ALF = FNC_SYSEDIT(TPG_MAT_TPFRM(II_CPT_NUM,DD_CPT_NUM),128)
				TPGMATTPFMT = FNC_SYSEDIT(TPG_MAT_TPFMT(II_CPT_NUM,DD_CPT_NUM),128)  
				IF TPG_MAT_XTFRM(II_CPT_NUM,JJ_CPT_NUM) = TPGMATTPFRM_CPT_ALF  AND FNC_SYSEDIT(TPG_MAT_XTFMT(II_CPT_NUM,JJ_CPT_NUM),128) = TPGMATTPFMT   THEN 
					TY_CPT_NUM = DD_CPT_NUM
					DD_CPT_NUM = TPG_MAT_CAM_TP(II_CPT_NUM)  + 1
				END IF
			NEXT DD_CPT_NUM

			IF  TPG_MAT_NIV_IDTP(II_CPT_NUM,TY_CPT_NUM,1)  <> 0 THEN
				NIV_MOV_TP_ENT = NIV_MOV_TP_ENT + 1
				IF  TPG_MAT_NIV_IDTP(II_CPT_NUM,TY_CPT_NUM,2)  <> 0  THEN
					NIV_MOV_TP_ENT = NIV_MOV_TP_ENT + 1
				END IF
			END IF

			NEX_CPT_ALF = "N"
			FIRST_CPT_ALF = "S"
			FOR GG_CPT_NUM = 1 TO TPG_MAT_NCP_SRV(HST_CPT_NUM,SRV_CPT_NUM)
				NIV_MOV_TP_MOV_CPT_NUM = NIV_MOV_TP_ENT
				NIV_MOV_XT_MOV_CPT_NUM = NIV_MOV_XT_ENT
				NN_IDX_CPT_NUM = 0
				N_IDX_CPT_NUM = 0
				POS_IDX_CPT_NUM = 0
				 FOR XX_CPT_NUM = 1 TO TPG_MAT_NCP_SRV(HST_CPT_NUM,SRV_CPT_NUM)
					 IF FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,XX_CPT_NUM),128) = FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) THEN
						 N_IDX_CPT_NUM = N_IDX_CPT_NUM + 1
						 IF N_IDX_CPT_NUM = 2 THEN
							 POS_IDX_CPT_NUM = XX_CPT_NUM
						 END IF
					 END IF
				 NEXT XX_CPT_NUM
				NN_IDX_CPT_NUM = TPG_MAT_TOTOCCFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM) 

 !!!   BUSCA CAMPO DE SERVER EN HST PARA,IDENTIFICAR SU LARGO
				FOR TT_CPT_NUM = 1 TO TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TCF)
					TPGMATNAMEFLDSRV = FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128)
					IF TPGMATNAMEFLDSRV = TPG_MAT_NAMEFLDHST(HST_CPT_NUM,TT_CPT_NUM) THEN
						CAMP_CPT_NUM = TT_CPT_NUM
						TT_CPT_NUM = TPG_MAT_HST_NUM(HST_CPT_NUM,CTE_IDX_TCF) + 1
					END IF
				NEXT TT_CPT_NUM
				VV_CPT_ALF = FNC_SYSSTR(TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM)) 
 !!! FIN BUSQUEDA DE  CAMPO
				 IF NN_IDX_CPT_NUM <= 1 THEN
					NN_IDX_CPT_NUM = 1
				END IF
				IF NIV_MOV_TP_MOV_CPT_NUM = 0 THEN
					IDX_TP_CPT_ALF = ""
				ELSE
				IF NIV_MOV_TP_MOV_CPT_NUM = 1 THEN
					IDX_TP_CPT_ALF = "TPG-I"
				ELSE
				IF NIV_MOV_TP_MOV_CPT_NUM = 2 THEN
					IDX_TP_CPT_ALF = "TPG-I,TPG-J"
				ELSE
				IF NIV_MOV_TP_MOV_CPT_NUM = 3 THEN
					IDX_TP_CPT_ALF = "TPG-I,TPG-J,TPG-K"
				END IF
				END IF
				END IF
				END IF

				IF NIV_MOV_XT_MOV_CPT_NUM = 0 THEN
					IDX_XT_CPT_ALF = ""
					DSP_IDX_TX_CPT_ALF = ""
				ELSE
				IF NIV_MOV_XT_MOV_CPT_NUM = 1 THEN
					IDX_XT_CPT_ALF = "TPG-I"
					DSP_IDX_XT_CPT_ALF = "TPG-I"
				ELSE
				IF NIV_MOV_XT_MOV_CPT_NUM = 2 THEN
					IDX_XT_CPT_ALF = "TPG-I,TPG-J"
					DSP_IDX_XT_CPT_ALF = "TPG-I,TPG-J"
				ELSE
				IF NIV_MOV_XT_MOV_CPT_NUM = 3 THEN
					IDX_XT_CPT_ALF = "TPG-I,TPG-J,TPG-K"
					DSP_IDX_XT_CPT_ALF = "TPG-I,TPG-J,TPG-K"
				END IF
				END IF
				END IF
				END IF

				IF IDX_TP_CPT_ALF > "" OR NN_IDX_CPT_NUM > 1 THEN
					ABPATP_CPT_ALF = "("
					CIPATP_CPT_ALF = ")"
				ELSE
					ABPATP_CPT_ALF = ""
					CIPATP_CPT_ALF = ""
				END IF

				COMATP_CPT_ALF = ""
				IF IDX_TP_CPT_ALF > "" AND NN_IDX_CPT_NUM > 1 THEN
					COMATP_CPT_ALF = ","
				END IF

				IF IDX_XT_CPT_ALF > "" OR NN_IDX_CPT_NUM > 1 THEN
					ABPAXT_CPT_ALF = "("
					CIPAXT_CPT_ALF = ")"
				ELSE
					ABPAXT_CPT_ALF = ""
					CIPAXT_CPT_ALF = ""
				END IF
				COMAXT_CPT_ALF = ""
				IF IDX_XT_CPT_ALF > "" AND NN_IDX_CPT_NUM > 1 THEN
					COMAXT_CPT_ALF = ","
				END IF

				YY_CPT_ALF = FNC_SYSSTR(JJ_CPT_NUM)
				IF FNC_SYSLEN(YY_CPT_ALF) = 1 THEN
					YY_CPT_ALF = "0" + YY_CPT_ALF
				END IF
				YY_CPT_ALF = "-" + YY_CPT_ALF

				 IF (NN_IDX_CPT_NUM > 0 AND TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,1)  > 0  AND FIRST_CPT_ALF = "S") THEN
					MULT_CPT_NUM = TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,1)
					NNN_IDX_CPT_NUM = NN_IDX_CPT_NUM  * MULT_CPT_NUM
					COL_CPT_NUM =  0
					FIRST_CPT_ALF = "N"
				 END IF

				IF ((NN_IDX_CPT_NUM > 1  OR TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,1)  > 0) AND FIRST_CPT_ALF = "S") THEN
					IF TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,1)  > 0 THEN
						MULT_CPT_NUM = TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,1)
						NNN_IDX_CPT_NUM = NN_IDX_CPT_NUM  * MULT_CPT_NUM
					 END IF
					COL_CPT_NUM =  0
					FIRST_CPT_ALF = "N"
				 END IF
				GLS_1_CPT_ALF = FNC_SYSEDIT(TPG_MAT_IDENFLDHST(HST_CPT_NUM ,CAMP_CPT_NUM),16%)
					IF ((NN_IDX_CPT_NUM > 1)  OR (TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,1)  > 0) OR (TPG_MAT_NIV_IDTP(II_CPT_NUM,JJ_CPT_NUM,2)  > 0)) THEN
					  IF  GG_CPT_NUM < POS_IDX_CPT_NUM  OR POS_IDX_CPT_NUM = 0  THEN
						COL_CPT_NUM =  COL_CPT_NUM  + 1
						 FLD_VBC_CPT_ALF = FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) 
						FLD_VBC_CPT_ALF = GENRPTREP(FLD_VBC_CPT_ALF,"-","_")
						WHILE FNC_SYSLEN(FLD_VBC_CPT_ALF) < 15 
							FLD_VBC_CPT_ALF  = FLD_VBC_CPT_ALF  + " " 
	     					NEXT
						LR_CPT_ALF = FNC_SYSSTR(TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM))
						WHILE FNC_SYSLEN(LR_CPT_ALF) < 3
							LR_CPT_ALF = "0" + LR_CPT_ALF
	     					NEXT
						CL_CPT_ALF = FNC_SYSSTR(COL_CPT_NUM)
						IF FNC_SYSLEN(CL_CPT_ALF) < 2 THEN
							CL_CPT_ALF = "0" + CL_CPT_ALF
						END IF

						BUF_CPT_ALF =	 CL_CPT_ALF + " " + LR_CPT_ALF + " " + BUF_CPT_ALF
 !!!						BUFOUT = ESCR_VBC(MG_12,BUF_CPT_ALF)
						NEX_CPT_ALF = "S"
					END IF
					ELSE
						  IF NEX_CPT_ALF = "S" THEN
							  NEX_CPT_ALF = "N" 
						  END IF

						 FLD_VBC_CPT_ALF = FNC_SYSEDIT(TPG_MAT_NAMEFLDSRV(HST_CPT_NUM,SRV_CPT_NUM,GG_CPT_NUM),128) 
						FLD_VBC_CPT_ALF = GENRPTREP(FLD_VBC_CPT_ALF,"-","_")
						WHILE FNC_SYSLEN(FLD_VBC_CPT_ALF) < 15 
							FLD_VBC_CPT_ALF  = FLD_VBC_CPT_ALF  + " " 
	     					NEXT

						LR_CPT_ALF = FNC_SYSSTR(TPG_MAT_LRG(HST_CPT_NUM,CAMP_CPT_NUM))
						WHILE FNC_SYSLEN(LR_CPT_ALF) < 3 
							LR_CPT_ALF = "0" + LR_CPT_ALF
	     					NEXT
				END IF
			 NEXT GG_CPT_NUM

			IF NEX_CPT_ALF = "S" THEN
				 NEX_CPT_ALF = "N" 
			END IF

		NEXT JJ_CPT_NUM
	NEXT II_CPT_NUM
	BUFOUT = PRT_ESTAD
	IF LEN(AVANCE_PROCESO$) < 100 THEN
 CIC_100:
		IF LEN(AVANCE_PROCESO$) < 100 THEN
			AVANCE_PROCESO$ = AVANCE_PROCESO$ + "a"
			GO TO CIC_100
		END IF

		PRINT lin_ant$ ; "Proceso   " ; FNC_SYSFORMAT(paso_cpt_num,"##")  ; " (0" ; avance_proceso$ ; " (B" 
	END IF


	IF FNC_SYSLEN(TIME_STP_CPT_ALF) <> 14 THEN
	 	BUFOUT = FNC_PRINT("LARGO DE TIME STAMP DISTINTO DE 14 TIME-STAMP : " + TIME_STP_CPT_ALF)
	ELSE
		BUFOUT = FNC_PRINT("")
		BUFOUT = FNC_PRINT("Time Stamp especificado correctamente ==> SSAAMMDDHHMMSS")
		BUFOUT = FNC_PRINT("                                          " + TIME_STP_CPT_ALF)
		BUFOUT = FNC_PRINT("")
	END IF

        END DEF 

 !!!	      MODULO PRINCIPAL

	ON ERROR GO TO  LABE_BADD
 	VAR_IND_NVL1 = "S"  
 	ACCION = INIC_IALI
	LL = 1
	TPG_TOT_HST  = 0
	TPG_TOT_TRN = 0
	COL_SRV = 0
	COL_NCF = 0
	FIL_IND = 0 
	COL_LRG = 0
	CONTAR% = 0
	TPG_LRG_MSG_SND_NUM = 1024
	TPG_LRG_MSG_RCV_NUM = 1024
 	ACCION = INI_MATR2
	DT_CPT_ALF = FNC_SYSDATE(0%)
	HRS_CPT_ALF = FNC_SYSTIME(0%)
	MNT_CPT_ALF = FNC_SYSMID(HRS_CPT_ALF,4,2)
	HRS_CPT_ALF = FNC_SYSMID(HRS_CPT_ALF,1,2)
	HORA_CPT_ALF = HRS_CPT_ALF + MNT_CPT_ALF + "00"
	DIA_CPT_ALF = FNC_SYSMID(DT_CPT_ALF,1,2)
	MES_CPT_ALF = FNC_SYSMID(DT_CPT_ALF,4,3)
	ANO_CPT_ALF = FNC_SYSMID(DT_CPT_ALF,8,4)
	MES_CPT_ALF = FNC_SYSEDIT(MES_CPT_ALF,32%)
	FOR O_CPT_NUM = 1 TO 12
		IF V_MES(O_CPT_NUM,1) = MES_CPT_ALF THEN
			MES_CPT_ALF = V_MES(O_CPT_NUM,2)
			O_CPT_NUM = 13
		END IF
	NEXT O_CPT_NUM 
	TIME_STP_CPT_ALF = "19" + ANO_CPT_ALF + MES_CPT_ALF + DIA_CPT_ALF + HORA_CPT_ALF
	IF FNC_SYSLEN(TIME_STP_CPT_ALF) <> 14 THEN
		BUFOUT = FNC_PRINT("LARGO DE TIME STAMP DISTINTO DE 14 TIME-STAMP : " + TIME_STP_CPT_ALF)
	END IF
        IF LEYO_PRIMER_TOKEN$ = "N" THEN
	 	TOKEN = NEXTTOKEN
	END IF

	 WHILE TOKEN <> TPGTOK
 	   TOKEN = NEXTTOKEN
        NEXT
   	BUFOUT = FNC_SCAN_MTX

 !!! FIN DE CODIGO PARA GENERADOR DE PLATAFORMA GRAFICA

 	BUFOUT = FNC_CARG_PAR

 !!! *REGTAB "HST"FRM-CORR
	IF VAR_IND_NVL1 = "S" THEN 
		NIV_ESC_CPT_NUM = NIV_01
		REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "WSS-RCV."
		BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)

		IF LRG_HDR <> 0 THEN
			NIV_ESC_CPT_NUM = NIV_03
			REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "WSS-RCV-HDR "
			REGMNU_2_CPT_ALF = "PIC X(" + NUM_5(LRG_HDR_ALF$) + ")."
			REGMNU_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
			BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
		END IF

		NIV_ESC_CPT_NUM = NIV_03
		REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "WSS-RCV-CREQ."
		BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
	
		NIV_ESC_CPT_NUM = NIV_05
		REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "WSS-RCV-CREQ-1 "
		REGMNU_2_CPT_ALF = "PIC X(00001)."
		REGMNU_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
		BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)

		NIV_ESC_CPT_NUM = NIV_05
		REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "WSS-RCV-CREQ-2 "
		REGMNU_2_CPT_ALF = "PIC X(00002)."
		REGMNU_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
		BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
	
		TPG_HDR_DAT_CPT_NUM = TPG_LRG_RCV_CPT_NUM - (TPG_HDR_RCV + 3)
		NIV_ESC_CPT_NUM = NIV_03
		REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "WSS-RCV-DAT           "
		AA_CPT_ALF = FNC_SYSSTR(TPG_HDR_DAT_CPT_NUM - LRG_HDR )
		REGMNU_2_CPT_ALF = "PIC X(" + NUM_5(AA_CPT_ALF) + ")."
		REGMNU_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
		BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)

		REGMNU_CPT_ALF = ""
		BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)

		NIV_ESC_CPT_NUM = NIV_01
	        REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "WSS-SEGR-RCV REDEFINES WSS-RCV."
		BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
		NIV_ESC_CPT_NUM = NIV_03
		SEGR_NUM_CPT_NUM = FNC_SYSINTEGER(TPG_LRG_RCV_CPT_NUM / TPG_LRG_MSG_RCV_NUM)
		SEGR_CPL_CPT_NUM = TPG_LRG_RCV_CPT_NUM  - (SEGR_NUM_CPT_NUM * TPG_LRG_MSG_RCV_NUM)
		SEGR_CPT_ALF = FNC_SYSSTR(SEGR_NUM_CPT_NUM)
		REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "WSS-TAB-SEGR           OCCURS  " + NUM_5(SEGR_CPT_ALF)  + "  TIMES."
		BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)

		NIV_ESC_CPT_NUM = NIV_05
		REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "WSS-ELE-SEGR "
		REGMNU_2_CPT_ALF = "PIC X(01024)."
		REGMNU_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
		BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)

		IF SEGR_CPL_CPT_NUM > 0 THEN
			SEGR_CPL_CPT_ALF  = FNC_SYSSTR(SEGR_CPL_CPT_NUM)
			NIV_ESC_CPT_NUM = NIV_03
			REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "WSS-ELE-SEGR-CPL "
			REGMNU_2_CPT_ALF = "PIC X(" + NUM_5(SEGR_CPL_CPT_ALF) + ")."
			REGMNU_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
			BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
		END IF

		NIV_ESC_CPT_NUM = NIV_01
		REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "WSS-RCV-RED REDEFINES WSS-RCV."
		BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
		NIV_ESC_CPT_NUM = NIV_03

		REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "WSS-RCV-RED-ELM        OCCURS  " +&
			FNC_SYSSTR(TPG_LRG_RCV_CPT_NUM) + "  TIMES "
		REGMNU_2_CPT_ALF = "PIC X(00001)."
		REGMNU_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
		BUFOUT = ESCR_WS1(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
	END IF


	PASO_CPT_NUM = PASO_CPT_NUM + 1
         BUFOUT = FNC_FORM_PCAPT
         BUFOUT = FNC_FORM_MXAPT

	REGMNU_CPT_ALF = "01  TPG-LRG-NVL-" + EXTERNO + "."
	BUFOUT = ESCR_WS3(MG_8,REGMNU_CPT_ALF)

	IF VAR_IND_NVL1 = "S" THEN 
		NIV_ESC_CPT_NUM = NIV_01
		REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "WSS-SND."
		BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)

		IF LRG_HDR <> 0 THEN
			NIV_ESC_CPT_NUM = NIV_CC
			REGMNU_1_CPT_ALF = "    03  WSS-SND-HDR "
			REGMNU_2_CPT_ALF = "PIC X(" + NUM_5(LRG_HDR_ALF$) + ")."
			REGMNU_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
			BUFOUT = ESCR_WS2(NIV_MRG(NIV_CC),REGMNU_CPT_ALF)
		END IF

		NIV_ESC_CPT_NUM = NIV_03
		REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "WSS-SND-HDR	   PIC X(" + FNC_SYSSTR(TPG_HDR_SND_CPT_NUM) + ")."
		IF TPG_HDR_SND_CPT_NUM > 0 THEN
			BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
		END IF
		NIV_ESC_CPT_NUM = NIV_03
		REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "WSS-SND-DMSG."
		BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)

		NIV_ESC_CPT_NUM = NIV_05
		REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "WSS-SND-STAT "
		REGMNU_2_CPT_ALF = "PIC X(00001)."
		REGMNU_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
		BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)

		REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "WSS-SND-MENS."
		REGMNU_2_CPT_ALF = ""
		REGMNU_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
		BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)

		NIV_ESC_CPT_NUM = NIV_07
		REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "WSS-SND-MENS1 " 
		REGMNU_2_CPT_ALF = "PIC X(" + NUM_5("20") + ")."
		REGMNU_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
		BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)

		REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "WSS-SND-MENS2 "
		REGMNU_2_CPT_ALF = "PIC X(" + NUM_5("59") + ")."
		REGMNU_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
		BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)

		TPG_HDR_DAT_CPT_NUM = TPG_LRG_SND_CPT_NUM - (TPG_HDR_SND_CPT_NUM + 80)
		NIV_ESC_CPT_NUM = NIV_03
		REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "WSS-SND-DAT "
		AA_CPT_ALF = FNC_SYSSTR(TPG_HDR_DAT_CPT_NUM - LRG_HDR )
		REGMNU_2_CPT_ALF = "PIC X(" + NUM_5(AA_CPT_ALF) + ")."
		REGMNU_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
		BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
		REGMNU_CPT_ALF = ""
		BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)

		NIV_ESC_CPT_NUM = NIV_01
		REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "WSS-SEGR-SND REDEFINES WSS-SND."
		BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
		NIV_ESC_CPT_NUM = NIV_03

		SEGS_NUM_CPT_NUM = FNC_SYSINTEGER(TPG_LRG_SND_CPT_NUM / TPG_LRG_MSG_SND_NUM)
		SEGS_CPL_CPT_NUM = TPG_LRG_SND_CPT_NUM  - (SEGS_NUM_CPT_NUM * TPG_LRG_MSG_SND_NUM)
		SEGS_CPT_ALF = FNC_SYSSTR(SEGS_NUM_CPT_NUM)

		REGMNU_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "WSS-TAB-SEGS           OCCURS  " + NUM_5(SEGS_CPT_ALF) + "  TIMES."
		BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
	
		NIV_ESC_CPT_NUM = NIV_05
		REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "WSS-ELE-SEGS "
		REGMNU_2_CPT_ALF = "PIC X(01024)."
		REGMNU_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
		BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)

		IF SEGS_CPL_CPT_NUM > 0 THEN
			SEGS_CPL_CPT_ALF  = FNC_SYSSTR(SEGS_CPL_CPT_NUM)
			NIV_ESC_CPT_NUM = NIV_03
			REGMNU_1_CPT_ALF = NIV_PIC(NIV_ESC_CPT_NUM) + "WSS-ELE-SEGS-CPL "
			REGMNU_2_CPT_ALF = "PIC X(" + NUM_5(SEGS_CPL_CPT_ALF) + ")."
			REGMNU_CPT_ALF = GENMTXL72(REGMNU_1_CPT_ALF,REGMNU_2_CPT_ALF,NIV_MRG(NIV_ESC_CPT_NUM))
			BUFOUT = ESCR_WS2(NIV_MRG(NIV_ESC_CPT_NUM),REGMNU_CPT_ALF)
		END IF
	END IF

         BUFOUT = FNC_MOV_PTAMX
         BUFOUT = FNC_MOV_MXAPT
	GO TO LABE_ATRA
 LABE_BADD:
	RESUME 999
  999
 LABE_ATRA:
 END
