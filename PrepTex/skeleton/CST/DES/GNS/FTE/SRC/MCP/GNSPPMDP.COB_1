      $SET LIST LINEINFO SUMMARY ERRORLIST
       IDENTIFICATION DIVISION.
      *========================
       PROGRAM-ID. GNSPPMDP.
       AUTHOR. CST.
       DATE-WRITTEN.      15-DEC-1995 17:12:38.
      *
      * PROCESA MENUS Y COMANDOS CON MANEJO DE PRIVILEGIOS.
      *
       ENVIRONMENT DIVISION.
      *=====================
       CONFIGURATION SECTION.
      *----------------------
       SPECIAL-NAMES.
               DECIMAL-POINT IS COMMA.
      
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
       COPY GNSW1TSX OF GNS.
      
      
       DATA DIVISION.
      *==============
      
       FILE SECTION.
       COPY GNSW2TSX OF GNS.
       DATA-BASE SECTION.
       DB  BDCST.
       01  AUDITAREA.
       01  GNSMNU.
       01  GNSRPF.
      *LOP-INI 21-08-1998
       01  GNSTAB USING GNSMSG00 = GNSTAB00, GNSMSG01 = GNSTAB01,
                        GNSMSG02 = GNSTAB02,
                        GNSTAB00, GNSTAB01, GNSTAB02.
      *LOP-FIN 21-08-1998
       01  GNSRUG.
       01  GNSPDP.
       01  GNSRUP.
       01  GNSTSF.
       01  GNSTSM.
      *
       WORKING-STORAGE SECTION.
      *------------------------
       77  WSS-MEN-EN-MATR-IDX VALUE ZEROES  PIC 9(05).
      *VERSION 3.1.1 = OPTIMIZA MATRICES DE MEMORIA PARA MENU
      *VERSION 3.1.2 = OPTIMIZA RUTINA CRGMATRIZ SOBRE VERSION 3.1.1
      *VERSION 3.1.3 = OPTIMIZA DESPLIEGUE DE MENSAJE SOBRE 3.1.2
       77  WSS-GLS-VERS VALUE "VERSION 3.1.2 AL 07-11-2000" PIC X(40).
      *
       77  WSS-HEX-COL-C                    PIC X(01).
       77  WSS-HEX-FIL-C                    PIC X(01).
       77  WSS-TAB-GLS-ABRV-NUM             PIC 9(05).
       01  VEC-HEX-COFI              VALUE
           @404F7F7B5B6C507D4D5D5C4E6B604B61F0F1F2F3F4F5F6F7F8F97A5E4C7E
      -    @6E6F7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6D7D8D9E2E3E4E5E6E7E8E94A
      -    @E05A5F6D79818283848586878889919293949596@.
           03 VEC-HEX-COFI-TBL OCCURS 80 TIMES.
              05 VEC-HEX-COFI-ELM               PIC X(01).
      *
       77  WSS-PUT-MSK                          PIC X(01).
       77  WSS-IND-DABT                         PIC X(01).
       77  WSS-IND-BGTN                         PIC X(01).
      
      
      * VARIABLE DE MENU EN MEMORIA
       77  WSS-IDX-AUXI-0   VALUE ZEROES PIC 9(05).
       77  WSS-IDX-AUXI-1   VALUE ZEROES PIC 9(05).
       77  WSS-IDX-AUXI-2   VALUE ZEROES PIC 9(05).
       77  WSS-IDX-AUXI-3   VALUE ZEROES PIC 9(05).
       77  WSS-IDX-AUXI-4   VALUE ZEROES PIC 9(05).
       01  WSS-HEX.
           03 WSS-HEX-256 OCCURS 256 TIMES.
              05 WSS-ELM-HEX        PIC X(01).
      
       01  WSS-AUXI-D1         PIC X(09).
      
       01  DPP-RC1.
           03 DPP-RC1-OCC OCCURS 1271 TIMES.
              05 DPP-RC1-ELM              PIC X(001).
       01  WSSM-MNU-COD-NEMS       PIC X(15).
       01  MATR-OPCI.
           03 MATR-OPCI-MENU OCCURS 20 TIMES.
              05 MATR-OPCI-OCCU OCCURS 38 TIMES.
                 07 MATR-OPCI-TFUN     PIC X(03).
                 07 MATR-OPCI-NEMO     PIC X(12).
      * CODIGO DE SISTEMA PARA VERIFCAR PRV CUANDO ES MEN, PERO SISTEMA
                 07 MATR-OPCI-SIST     PIC X(03).
       01  MEM-MATR.
           03 MEM-MATR-ELM    OCCURS 20 TIMES.
              05 MEM-MATR-KEY.
                 07 MEM-MATR-IDX-NEMS.
                    09 MEM-MATR-IDX-SISF        PIC X(03).
                    09 MEM-MATR-IDX-NEMO        PIC X(12).
                 07 MEM-MATR-IDX-CMEN           PIC X(03).
                 07 MEM-MATR-TOT-OPCI           PIC 9(05).
      
      *RRM-INI 30-OCT-2000
      *01  MEM-MENU.
      *    03 MEN-MENU-IDX     OCCURS 20 TIMES.
      *       05 MEM-MENU-ELM                   PIC X(2000).
      *RRM-FIN 30-OCT-2000
      
       77  PRV-RESULT          PIC S9(11) BINARY.
           88 PRV-RESULT-OK         VALUE 1.
      
       01  PRV-PARAM.
           05 FILLER             PIC X(12).
           05 PRV-USER-CODE      PIC X(12).
           05 PRV-SISTEMA        PIC X(03).
           05 PRV-COD-OPCI       PIC X(12).
           05 PRV-COMANDO        PIC X(03).
      
      
       77  MEM-TOPC-EN-MENU    VALUE ZEROES     PIC 9(05).
       77  MEM-IDX-PRIV        VALUE ZEROES     PIC 9(05).
       77  MEM-TOT-MENU        VALUE ZEROES     PIC 9(05).
       77  MEM-TOT-OPCI        VALUE ZEROES     PIC 9(05).
       77  MEM-IDX-MENU        VALUE ZEROES     PIC 9(05).
       77  MEM-IDX-MEN1        VALUE ZEROES     PIC 9(05).
       77  MEM-IDX-MEN2        VALUE ZEROES     PIC 9(05).
       77  MEM-IDX-MEN3        VALUE ZEROES     PIC 9(05).
       77  MEM-IDX-MEN4        VALUE ZEROES     PIC 9(05).
       77  MEM-RCX-MENU        VALUE ZEROES     PIC 9(05).
      
      * INI-DEFINICIONES NECESARIAS PARA MODULO USUARIO-PASSWORD
       COPY GNSBRRUP OF GNS.
       01  WSS-VARI-PSW.
           03 WSS-ERR-PSWD                       PIC X(01).
       01  WSS-RCV-MTD.
           03 WSS-RCV-1                          PIC X(15).
           03 WSS-RCV-2                          PIC X(12).
           03 WSS-RCV-3                          PIC X(20).
      
       01  WSS-COD-FIN      VALUE "N"            PIC X(01).
      * AREA DONDE SE RECIVE EL FORMULARIO CUS
       01  CUS-RCV.
           05 CUS-RCV-SDF-HDR-COD-TRCD VALUE SPACES PIC X(04).
           05 CUS-RCV-RUP-COD-USER     VALUE SPACES PIC X(12).
           05 CUS-RCV-RUP-COD-PSWD     VALUE SPACES PIC X(12).
      
       COPY GNSWFCUS OF GNS.
      
       01 BKP-LRCV      COMP VALUE +0       PIC S9(04).
      * FIN-DEFINICIONES NECESARIAS PARA MODULO USUARIO-PASSWORD
      
       01 WSS-GLS-MDSP                VALUE SPACES PIC X(60).
       01 WSS-DSP-INI-PSWD            VALUE "S" PIC X(01).
       01 WSS-DSP-BUS-GLOS            VALUE "S" PIC X(01).
       01 WSS-DSP-PRO-AUTO            VALUE "S" PIC X(01).
       01 WSS-DSP-CHK-RC3             VALUE "S" PIC X(01).
       01 WSS-DSP-BUS-FUNC            VALUE "S" PIC X(01).
       01 WSS-DSP-VID-RPF             VALUE "S" PIC X(01).
       01 WSS-DSP-VID-MNU             VALUE "S" PIC X(01).
       01 WSS-DSP-INI-OPCD            VALUE "S" PIC X(01).
       01 WSS-DSP-BUS-LIMI            VALUE "S" PIC X(01).
       01 WSS-DSP-PUT-TITU            VALUE "S" PIC X(01).
       01 WSS-DSP-PUT-CMND            VALUE "S" PIC X(01).
       01 WSS-DSP-BUS-CRPF            VALUE "S" PIC X(01).
       01 WSS-DSP-LEE-CRPF            VALUE "S" PIC X(01).
       01 WSS-DSP-PUT-MHDR            VALUE "S" PIC X(01).
       01 WSS-DSP-BUS-CMND            VALUE "S" PIC X(01).
       01 WSS-DSP-PUT-DCMN            VALUE "S" PIC X(01).
       01 WSS-DSP-CHK-RCV             VALUE "S" PIC X(01).
       01 WSS-DSP-CAL-PRV             VALUE "S" PIC X(01).
       01 WSS-DSP-BUS-PRV             VALUE "S" PIC X(01).
       01 WSS-DSP-DET-PRV             VALUE "S" PIC X(01).
      
       01 WSS-GO-TO-A-LEE-CMND            PIC X(03).
       01 WSS-FRM-DFLD.
              05 WSS-FRM-NTRN-0           PIC X(0004).
              05 WSS-FRM-NTRN-1           PIC X(0002).
              05 WSS-FRM-NTRN             PIC X(0004).
              05 WSS-FRM-RESTO            PIC X(20).
      *01  SYS-EXIT            PIC X(01)   VALUE "N".
      * REGISTRO IMAGEN PARA DESPLEGAR ERROR EN "WF"
      * NO ENCONTRADO
       COPY GNSWFEMU OF GNS.
      * INDICADOR DE USUARIO SUPER PRIVILEGIADO
      *MHM INI 26-JUN-1998
      *01  WSS-IND-USSP             PIC X(01)    VALUE "N".
      * CODIGO DE USUARIO SUPER PRIVILEGIADO
      *01  WSS-COD-USSP             PIC X(12)    VALUE "BCADS016".
       COPY GNSWGSPV OF GNS.
      *MHM FIN 26-JUN-1998
      *
       01  WSS-GLS-TRAN             PIC X(04)    VALUE "EJE0".
       01  WSS-AUX-TRAN             PIC X(04).
       01  WSS-AUX-CACC.
           03 WSS-AUX-CACC-SIST     PIC X(03).
           03 FILLER VALUE "/"      PIC X(01).
           03 WSS-AUX-CACC-OPCI     PIC X(03).
       01  WSS-ATR.
           03 WSS-ATR-TENU     PIC X(01)    VALUE @26@.
      *    03 WSS-ATR-ES-TENUE PIC X(01)    VALUE "T".
           03 WSS-ATR-BOLD  PIC X(01)    VALUE @3F@.
           03 WSS-ATR-RC1 VALUE SPACES.
              05 WSS-ATR-RC1-ELM OCCURS 19 TIMES   PIC X(01).
           03 WSS-ATR-RC2 VALUE SPACES.
              05 WSS-ATR-RC2-ELM OCCURS 38 TIMES   PIC X(01).
      * INI-PRV
       COPY GNSLGUYP OF GNS.
       COPY GNSBRRUG OF GNS.
       COPY GNSBRPDP OF GNS.
       COPY GNSWGTPU OF GNS.
      *<<<<< Fin RAA
       01  WSS-VARI-PRV.
      *     03 WSS-COD-TCON                              PIC X(03).
      *     03 WSS-I      VALUE ZEROES                   PIC 9(04).
           03 WSS-T      VALUE ZEROES                   PIC 9(04).
      *     03 WSS-J      VALUE ZEROES                   PIC 9(03).
      *     03 WSS-L      VALUE ZEROES                   PIC 9(03).
      *     03 WSS-K      VALUE ZEROES                   PIC 9(03).
           03 WSS-PDP-CMP-NEMO.
              05 WSS-PDP-CMP-NEMO-IDX OCCURS 12 TIMES   PIC X(01).
           03 WSS-UYP-CMP-NEMO.
              05 WSS-UYP-CMP-NEMO-IDX OCCURS 12 TIMES   PIC X(01).
      
       01  WSS-VARI-PFL.
           03 WSS-ESTA-EN-RUG        VALUE "N"            PIC X(01).
           03 WSS-CERRAR-RUG         VALUE "N"            PIC X(01).
           03 WSS-CERRAR-PDP         VALUE "N"            PIC X(01).
           03 WSS-COD-TCON                                PIC X(03).
           03 WSS-STAT-AST           VALUE SPACES         PIC X(03).
           03 WSS-STAT-RUG           VALUE SPACES         PIC X(03).
           03 WSS-STAT-PDP           VALUE SPACES         PIC X(03).
       COPY GNSWGUYP OF GNS.
      * FIN-PRV
       01  WSS-DFRM-FUNC.
           03 WSS-DFRM-FUNC-ELM OCCURS 11                PIC X(01).
       77  WSS-DFRM-FUNC-IDX   VALUE ZEROES              PIC 9(04).
       77  WSS-DFRM-LEYO-MAPA-BD   VALUE "N"             PIC X(01).
       01  WSS-DFRM-ITEM.
           05 WSS-DFRM-IKEY    VALUE SPACES              PIC  X(03).
      * LARGO DEL ENVIO INCLUYE CARACTERES DE CONTROL A ENVIAR
      * POR EJEMPLO POSICIONAMIENTO Y DELIMITADORES
           05 WSS-DFRM-LENV    COMP VALUE +0             PIC S9(04).
      * LARGO DE RECEPCION, SOLO INCLUYE LOS CAMPOS RECIBIDOS,
      * ES DECIR AQUELLOS ENTRE DELIMITADORES
           05 WSS-DFRM-LRCV    COMP VALUE +0             PIC S9(04).
           05 WSS-DFRM-DATA.
              06 WSS-DFRM-DATA-1.
                 07 WSS-DFRM-HDR-GLS-FIL1            PIC X(70).
                 07 WSS-DFRM-HDR-COD-SIST            PIC X(03).
                 07 WSS-DFRM-HDR-GLS-FIL2            PIC X(04).
                 07 WSS-DFRM-HDR-GLS-NFRM            PIC X(03).
                 07 WSS-DFRM-HDR-GLS-FIL3            PIC X(04).
                 07 WSS-DFRM-HDR-GLS-FPRO            PIC X(60).
                 07 WSS-DFRM-HDR-GLS-FIL4            PIC X(04).
                 07 WSS-DFRM-HDR-FEC-DMSA.
                    09 WSS-DFRM-HDR-NUM-DMSA         PIC X(02).
                    09 FILLER VALUE "/"              PIC X(01).
                    09 WSS-DFRM-HDR-NUM-MMSA         PIC X(02).
                    09 FILLER VALUE "/"              PIC X(01).
                    09 WSS-DFRM-HDR-NUM-SMSA         PIC X(02).
                    09 WSS-DFRM-HDR-NUM-AMSA         PIC X(02).
                 07 WSS-DFRM-HDR-GLS-FIL5            PIC X(255).
      *          07 WSS-DFRM-HDR-GLS-0C              PIC X(01).
              06 WSS-DFRM-DATA-2                     PIC X(2587).
      
      
       77  CHK-FRM-COD-TFUN                              PIC X(03).
       77  CHK-FRM-GLS-NFRM                              PIC X(07).
      
       77  PDK-IDX-PDK1                                  PIC 9(05).
       77  PDK-IDX-PDK2                                  PIC 9(05).
       77  PDK-IDX-PDK3                                  PIC 9(05).
       77  PDK-IDX-PDK4                                  PIC 9(05).
       77  WSS-CHR-HEX-COL                               PIC X(01).
       77  WSS-CHR-HEX-FIL                               PIC X(01).
       01  PDK-COD-CTAB.
           03 PDK-FRM-GLS-NFRM                           PIC X(07).
           03 PDK-FRM-COD-CMND                           PIC X(03).
           03 PDK-FRM-COD-RSTO                           PIC X(02).
       01  PDK-TBL-PDK.
           03 PDK-TBL-PDK-OCC    OCCURS 10 TIMES.
              05 PDK-TBL-PDK-ELM         PIC 9(04).
              05 PDK-TBL-PDK-ELM-RED  REDEFINES
                 PDK-TBL-PDK-ELM         PIC X(04).
      
       01  PHK-COD-CTAB.
           03 PHK-FRM-GLS-NFRM                           PIC X(07).
           03 PHK-FRM-COD-CMND                           PIC X(03).
           03 PHK-FRM-COD-RSTO                           PIC X(02).
       01  PHK-TBL-PHK.
           03 PHK-TBL-PHK-OCC    OCCURS 25 TIMES.
              05 PHK-TBL-PHK-ELM-COL     PIC 9(02).
              05 PHK-TBL-PHK-ELM-COL-RED   REDEFINES
                 PHK-TBL-PHK-ELM-COL     PIC X(02).
              05 PHK-TBL-PHK-ELM-FIL     PIC 9(02).
              05 PHK-TBL-PHK-ELM-FIL-RED   REDEFINES
                 PHK-TBL-PHK-ELM-FIL     PIC X(02).
      
      
      
       77  WSS-TERMIN-R    PIC S9(11) USAGE BINARY.
       77  WSS-TERMIN-L    PIC S9(11) USAGE BINARY.
       77  WSS-TERMIN-N    REAL.
       01  WSS-TERMIN                            PIC X(30).
       01  WSS-DSP-TRC VALUE "S" PIC X(01).
       01  WSS-DSP-SEC VALUE "S" PIC X(01).
       COPY GNSWGDRC OF GNS.
       COPY GNSWRTAB OF GNS.
       COPY GNSWRMSG OF GNS.
       COPY GNSWSFIO OF GNS.
       COPY GNSWIRC1 OF GNS.
       COPY GNSWIRC2 OF GNS.
       COPY GNSWFHYT OF GNS.
       COPY GNSWGACI OF GNS.
       COPY GNSBRMNU OF GNS.
       COPY GNSBRRPF OF GNS.
       COPY GNSWGOSC OF GNS.
       COPY GNSWCSCR OF GNS.
       COPY GNSWVSCR OF GNS.
       COPY GNSWVIDD OF GNS.
       COPY GNSWGTSC OF GNS.
       COPY GNSBRTSM OF GNS.
       01  CMN-VARI.
           03 CMN-SIND.
              05 CMN-I                PIC 9(02).
              05 CMN-K                PIC 9(02).
           03 CMN-IDX-CCMN    VALUE SPACES.
              05 CMN-VEC-CCMN OCCURS 10.
                 07 CMN-COD-CCMN      PIC X(03).
                 07 FILLER            PIC X(01).
       COPY GNSWVFIO OF GNS.
       COPY GNSWCFIO OF GNS.
       COPY GNSWGFRM OF GNS.
       COPY GNSWITRL OF GNS.
       COPY GNSWIOPC OF GNS.
       COPY GNSWIOP1 OF GNS.
       COPY GNSBRTAB OF GNS.
       COPY GNSBRMSG OF GNS.
       01  RFN-VARI.
           03  RFN-COLA.
               05  RFN-TYPE VALUE "GRET"            PIC X(04).
               05  RFN-TERM                         PIC X(04).
           03  RFN-LITM     COMP                    PIC S9(04).
           03  RFN-ITEM.
               05  RFN-PROG                         PIC X(08).
               05  RFN-FUNC.
                   07  RFN-SIST                     PIC X(03).
                   07  RFN-SISG                     PIC X(03).
                   07  RFN-NEMO                     PIC X(12).
                   07  RFN-CMND                     PIC X(03).
      *
       01  WSS-VARI.
      *RRM-INI 26-OCT-2000
           03 WSS-DSPL-OCC-MEN.
              05 WSS-OCC-MEN-1     VALUE "&&"    PIC X(02).
              05 WSS-OCC-MEN-2     VALUE SPACES  PIC X(45).
              05 WSS-OCC-MEN-3     VALUE ZEROES  PIC 9(07).
      *RRM-FIN 26-OCT-2000
      * ISP:  17-MAR-1993 07:54:47
           03 WSS-COD-MSG0.
              05 WSS-COD-MSG1                         PIC X(01).
              05 WSS-COD-MSG2                         PIC X(08).
              05 WSS-COD-MSG3                         PIC X(03).
      * ISP:  17-MAR-1993 07:54:47
      
           03 WSS-SCOD                                PIC X(02).
           03 WSS-SEFN                                PIC X(02).
           03 WSS-SXCT                    VALUE  3588 PIC  9(04).
           03 WSS-SXCT-RED         REDEFINES WSS-SXCT PIC X(04).
           03 WSS-QIDD.
              05 WSS-NIDD VALUE "GIDD"    PIC X(04).
              05 WSS-TIDD                 PIC X(04).
           03 WSS-CCOD                   VALUE SPACES PIC X(05).
              88 WSS-CCOD-APCT           VALUE "APCT".
              88 WSS-CCOD-ABM0           VALUE "ABM0".
           03 WSS-DFLD.
              05 WSS-NTRN                             PIC X(04).
              05 WSS-CAXC.
                 07 WSS-SIST.
                    09 WSS-CSIS OCCURS 3              PIC X(01).
                 07 WSS-FILL                          PIC X(01).
                 07 WSS-SISG                          PIC X(03).
           03 WSS-FUNC.
              05 WSS-FCHR OCCURS 11                   PIC X(01).
           03 WSS-AFUN.
              05 WSS-ACHR OCCURS 11                   PIC X(01).
           03 WSS-OPCI.
              05 WSS-COPC OCCURS 3                    PIC X(01).
           03 WSS-CMND.
              05 WSS-CCMD OCCURS 3                    PIC X(01).
           03 WSS-MAUT.
              05 WSS-FILA OCCURS 12.
                 07 WSS-COLU OCCURS 09.
                    09 WSS-AUTO                  PIC 9(02).
           03 WSS-MAUT-RED REDEFINES WSS-MAUT.
              05 WSS-ITM1                        PIC X(18).
              05 WSS-ITM2                        PIC X(18).
              05 WSS-ITM3                        PIC X(18).
              05 WSS-ITM4                        PIC X(18).
              05 WSS-ITM5                        PIC X(18).
              05 WSS-ITM6                        PIC X(18).
              05 WSS-ITM7                        PIC X(18).
              05 WSS-ITM8                        PIC X(18).
              05 WSS-ITM9                        PIC X(18).
              05 WSS-ITMA                        PIC X(18).
              05 WSS-ITMB                        PIC X(18).
              05 WSS-ITMC                        PIC X(18).
           03 WSS-STDO                   VALUE 1 PIC 9(02).
           03 WSS-ISIS                   VALUE 0 PIC 9(02).
           03 WSS-IOPC                   VALUE 0 PIC 9(02).
           03 WSS-ICMD                   VALUE 0 PIC 9(02).
           03 WSS-IMAX                   VALUE 0 PIC 9(02).
           03 WSS-IVAL                   VALUE 9 PIC 9(02).
              88 FUNCION-INVALIDA        VALUE 0.
              88 FUNCION-VALIDA          VALUE 1.
           03 WSS-SIND.
      * WSS-I SE "CHOCO" CON WSS-I DEL MODULO DE PRV
              05 WSS-I-CMN                           PIC 9(02).
              05 WSS-I                           PIC 9(02).
              05 WSS-J                           PIC 9(02).
              05 WSS-K                           PIC 9(02).
              05 WSS-L                           PIC 9(02).
              05 WSS-M                           PIC 9(02).
           03 WSS-AUXI                           PIC X(03).
           03 UYP-PRTA.
              05 UYP-PROG                        PIC X(08).
              05 FILLER                VALUE "/" PIC X(01).
              05 UYP-CMND                        PIC X(03).
           03 WSS-MENS.
              05 WSS-MEN1                        PIC X(40).
              05 WSS-MEN2                        PIC X(39).
      
            03  WSS-NUM-COR-CUR               PIC 9(05).
            03  WSS-NUM-COR-H03               PIC 9(05).
            03  WSS-TBL-ATR.
                05 WSS-TBL-ATR-OCC OCCURS 24 TIMES.
                  07 WSS-TBL-ATR-ELM    PIC X(01).
            03  WSS-TBL-ATR-RED REDEFINES WSS-TBL-ATR.
                05 WSS-TBL-ATR-RED1      PIC X(12).
                05 WSS-TBL-ATR-RED2      PIC X(12).
            03  WSS-TAB-AUX.
                05 WSS-TAB-100.
                   07 WSS-TAB-40                      PIC X(40).
                   07 WSS-TAB-60                      PIC X(60).
            03  WSS-COD-MENS.
                05 WSS-COD-TMSG.
                   07 WSS-COD-TMN1                 PIC X(03).
                   07 WSS-COD-TMN2                 PIC X(03).
                   07 WSS-COD-TMN3                 PIC X(01).
                05 WSS-COD-CMSG                    PIC X(05).
           03 WSS-ICMN                           PIC X(01).
              88 WSS-DESDE-CMN VALUE "K".
      *************************************************************
           03 WSS-IND-CMND             VALUE 0   PIC 9(01).
              88 WSS-EXISTE-COMANDO    VALUE 1.
              88 WSS-COMANDO-SINPRV    VALUE 2.
      *
           03 WSS-AUX-CMNP                       PIC X(08).
           03 WSS-AUX-PRMC                       PIC X(25).
           03 WSS-AUX-CMND                       PIC X(03).
           03 WSS-AUX-CRPF.
              05 WSS-TABL OCCURS 10.
                 07 WSS-COD-CMND                 PIC X(03).
                 07 WSS-COD-CCPP                 PIC X(03).
                 07 WSS-IND-STPP                 PIC X(01).
                 07 WSS-GLS-PRMT                 PIC X(25).
                 07 WSS-GLS-CONF                 PIC X(25).
                 07 WSS-GLS-UARC                 PIC X(12).
           03 WSS-IPRV                           PIC X(01).
              88 WSS-IPRV-TODO        VALUE "*".
              88 WSS-IPRV-TODOS-MENUS VALUE "*", "O", "U", "Q".
              88 WSS-IPRV-TODOS-MAN   VALUE "*", "U", "M".
              88 WSS-IPRV-TODOS-CON   VALUE "*", "Q", "C".
           03 WSS-KNMO VALUE SPACES.
              05 WSS-KNMO-SIST                   PIC X(03).
              05 WSS-KNMO-SISG                   PIC X(03).
              05 WSS-KNMO-NEMO                   PIC X(12).
              05 WSS-KNMO-CMND                   PIC X(03).
              05 WSS-KNMO-PROG                   PIC X(08).
              05 WSS-KNMO-USER                   PIC X(12).
      
      * Variables que vienen de GNSPPMDP
       01  WSS-VOPC.
           03 WSS-STAT              VALUE 0        PIC 9(01).
              88 WSS-STAT-OKS       VALUE 0.
              88 WSS-STAT-WRN       VALUE 1.
              88 WSS-STAT-MAL       VALUE 2.
           03 WSS-SIND.
              05 I                                 PIC 9(02).
              05 J                                 PIC 9(02).
              05 K                  VALUE 0        PIC 9(02).
              05 L                  VALUE 0        PIC 9(02).
              05 IMIN               VALUE 0        PIC 9(02).
              05 IMAX               VALUE 0        PIC 9(02).
           03 WSS-RMNU                             PIC X(490).
           03 WSS-NSIS                             PIC X(003).
           03 WSS-MENU                             PIC X(003).
           03 WSS-NEMO                             PIC X(012).
           03 WSS-NEMO-RED REDEFINES WSS-NEMO.
              05 WSS-NEMO-CHR OCCURS 12            PIC X(01).
           03 WSS-IFRM                   VALUE "0" PIC X(01).
      *Variables para GNSSCRHDR
       01  HEA-VARI.
           03 HEA-SIMP              VALUE SPACES.
              05 HEA-GLS-SIMP       OCCURS 31      PIC X(01).
           03 HEA-DOBL              VALUE SPACES.
              05 HEA-GLS-DOBL       OCCURS 61      PIC X(01).
           03 HEA-FEC-DMSA.
              05 HEA-NUM-DMSA                      PIC 9(02).
              05 HEA-GLS-SLA1                      PIC X(01).
              05 HEA-NUM-MMSA                      PIC 9(02).
              05 HEA-GLS-SLA2                      PIC X(01).
              05 HEA-NUM-SMSA                      PIC 9(02).
              05 HEA-NUM-AMSA                      PIC 9(02).
       COPY GNSWGHOY OF GNS.
       COPY GNSWGSYS OF GNS.
      
       COPY GNSWIHDR OF GNS.
      * Variables para Manejo de Usuarios y privilegios.
       01  AUX-VARI.
           03 AUX-UARC.
              05 AUX-RPRG                        PIC X(08).
              05 AUX-RTRN                        PIC X(04).
           03 AUX-PRGM.
              05 AUX-PROG                        PIC X(08).
              05 AUX-NTRN                        PIC X(04).
       COPY GNSBRIDD OF GNS.
      *POR MIENTRAS POR EL XCONTROL QUE SE HACE DESDE MENU
       01  WSS-CMMA.
           03 WSS-RFUN                             PIC X(300).
           03 WSS-NSXC                             PIC X(003).
           03 WSS-GSXC                             PIC X(003).
           03 FILLER                               PIC X(011).
      *
       01  WSS-CHK-SIST                  VALUE " " PIC X(01).
           88 WSS-CHK-SIST-SI            VALUE "S".
       01  IFD.
           03  FILLER                            PIC X(01).
           03  IFD-COD-CIFD                      PIC X(12).
           03  IFD-GLS-DATA                      PIC X(210).
           03  FILLER                            PIC X(18).
       COPY GNSWGQUE OF GNS.
      *PARA TFUN = "PTC"
       01  WSS-PPPV.
           03 WSS-PROV                                  PIC X(08).
           03 FILLER                                    PIC X(01).
           03 WSS-NTRV                                  PIC X(04).
       01  WSS-TSC-AUXI.
           03 FILLER                                    PIC X(05).
           03 WSS-CMA-OPCI                              PIC X(03).
           03 FILLER                                    PIC X(57).
           03 WSS-TSC-OPCI                              PIC X(03).
       01  WSS-USER                                     PIC X(08).
       01  WSS-OPID                                     PIC X(03).
       01  WSS-COR-EJEC  VALUE ZEROES                   PIC 9(05).
      
       COPY GNSBGCSC OF GNS.
      
      *COPY GNSBGCSC OF GNS.
      
       PROCEDURE DIVISION.
      *===================
      
       MAIN SECTION.
       INI-MAIN.
      *    DISPLAY "CAH: GNSBICMS".
       COPY GNSBICMS OF GNS.
      
      *    DISPLAY "CAH: PERFORM INIT-HEX".
           PERFORM INIT-HEX.
      *    DISPLAY "CAH: PERFORM GET-FHOY".
      
      * INICIALIZA FECHA EN HDRS
           PERFORM GET-FHOY.
           MOVE HOY-DHOY TO BKP-RC1-HDR-NUM-DMSA.
           MOVE HOY-MHOY TO BKP-RC1-HDR-NUM-MMSA.
           MOVE HOY-SHOY TO BKP-RC1-HDR-NUM-SMSA.
           MOVE HOY-AHOY TO BKP-RC1-HDR-NUM-AMSA.
      
           MOVE HOY-DHOY TO BKP-RC2-HDR-NUM-DMSA.
           MOVE HOY-MHOY TO BKP-RC2-HDR-NUM-MMSA.
           MOVE HOY-SHOY TO BKP-RC2-HDR-NUM-SMSA.
           MOVE HOY-AHOY TO BKP-RC2-HDR-NUM-AMSA.
      
           DISPLAY " ".
           DISPLAY "INI=================================".
           DISPLAY "INICIO PROCESADOR DE MENU - GNSPPMDP".
           DISPLAY "VERSION " WSS-GLS-VERS.
           DISPLAY "FECHA DE ACTIVACION : "
                    HOY-DHOY "-"
                    HOY-MHOY "-"
                    HOY-SHOY
                    HOY-AHOY "  "
                    HOY-HHHY ":"
                    HOY-MMHY ":"
                    HOY-SSHY.
           DISPLAY "FIN=================================".
      
           MOVE ZEROES TO WSS-IDX-AUXI-0.
      
           MOVE SPACES TO PDK-COD-CTAB.
      
           MOVE "S" TO TSF-ES-IDX.
           IF TSF-ES-IDX = "S"
               MOVE FIO-UPD TO FIO-CMND
               PERFORM GNS-FIO-TSF.
           MOVE "N" TO FIO-BTRN.
           MOVE "S" TO SYS-IND-WICB.
           MOVE "99" TO FIO-STAT.
           MOVE FIO-UPD TO FIO-CMND.
           PERFORM GNS-FIO-MNU.
           IF NOT FIO-STAT-OKS
               DISPLAY "GNSPPMDP: ERROR APERTURA ARCHIVO MNU STOP RUN"
               FIO-STAT
               STOP RUN.

      *RRM-INI 7-NOV-2000 ESTE PARRAFO SE TRASALADO A:INIC-CRG-MEM SECTI      
      *    MOVE SPACES TO WSS-COD-SIST.
      *    MOVE SPACES TO WSS-COD-CMEN.
      *    DISPLAY "RRM:==COMIENZO DE PROCESO DE ELIMACION TSF DE MENU".
      *CIC-ELI-MENU.
      *    MOVE WSS-COD-IMEN TO TSF-KEY-IREG.
      *    MOVE ZEROES TO TSF-QUE-NITM.
      *    MOVE FIO-GET-NLS TO FIO-CMND.
      *    PERFORM GNS-FIO-TSF.
      *    IF FIO-STAT-OKS
      *         MOVE TSF-KEY-IREG TO WSS-COD-IMEN
      *         IF WSS-COD-MENU NOT = "MENU"
      *              MOVE "MENU" TO WSS-COD-MENU
      *              MOVE SPACES TO WSS-COD-SIST
      *              MOVE SPACES TO WSS-COD-CMEN
      *         ELSE
      *              MOVE FIO-GET-KEY-UPD TO FIO-CMND
      *              PERFORM GNS-FIO-TSF
      *              IF NOT FIO-STAT-OKS
      *                 DISPLAY "RRM: ERROR AL TOMAR DE UPD"
      *                         " EL REGISTRO TSF DE MENU"
      *              ELSE
      *                 MOVE FIO-DEL TO FIO-CMND
      *                 PERFORM GNS-FIO-TSF
      *                 DISPLAY "RRM: REGISTRO TSF DE MENU ELIMINADO"
      *                 GO TO CIC-ELI-MENU.
      
      *    DISPLAY "RRM:====FIN DE PROCESO DE ELIMACION TSF DE MENU".
      *RRM-FIN 7-NOV-2000 
      
           MOVE "GNS"          TO MSG-COD-SIST.
           MOVE "CODNEMOSISN5" TO MSG-COD-MENS.
           PERFORM GET-MSG.
           MOVE MSG-GLS-DESC TO WSS-CODNEMOSISN5.
      
           MOVE "GNS"          TO MSG-COD-SIST.
           MOVE "CODOPCINEXST" TO MSG-COD-MENS.
           PERFORM GET-MSG.
           MOVE MSG-GLS-DESC TO WSS-CODOPCINEXST.
      
           MOVE "GNS"    TO MSG-COD-SIST.
           MOVE "PFSMEN" TO MSG-COD-MENS.
           PERFORM GET-MSG.
           MOVE MSG-GLS-DESC TO WSS-MEN1.
           MOVE MSG-GLS-MENS TO WSS-MEN2.
           MOVE WSS-MENS TO BKP-RC1-TRL-GLS-TERM.
           MOVE WSS-MENS TO BKP-RC2-TRL-GLS-TERM.
           MOVE WSS-MENS TO     RMM-TRL-GLS-TERM.
           MOVE WSS-MENS TO WSS-PFSMEN.
      
           MOVE "GNS"    TO MSG-COD-SIST.
           MOVE "PRMMEN" TO MSG-COD-MENS.
           PERFORM GET-MSG.
           MOVE MSG-GLS-DESC TO WSS-MEN1.
           MOVE MSG-GLS-MENS TO WSS-MEN2.
           MOVE WSS-MENS TO BKP-RC1-TRL-GLS-PRMT.
           MOVE WSS-MENS TO BKP-RC2-TRL-GLS-PRMT.
           MOVE WSS-MENS TO     RMM-TRL-GLS-PRMT.
      
           MOVE "GNS" TO MSG-COD-SIST.
           MOVE "PFSCMN" TO MSG-COD-MENS.
           PERFORM GET-MSG.
           MOVE MSG-GLS-DESC TO WSS-MEN1.
           MOVE MSG-GLS-MENS TO WSS-MEN2.
           MOVE WSS-MENS TO WSS-PFSCMN.
      
      *RRM-INI 7-NOV-2000 ESTE PARRAFO SE TRASALADO A:INIC-CRG-MEM SECTI      
      *    DISPLAY " ".
      *    DISPLAY "INI=================================".
      *    DISPLAY "BUSQUEDA DE SISTEMAS EN TAB GNS/SIS ".
      *
      *
      *    MOVE ZEROES TO MEM-TOT-MENU.
      *    MOVE FIO-GET-NLS TO FIO-CMND.
      *    MOVE "SIS" TO TAB-COD-TTAB IN TAB.
      *    MOVE SPACES TO TAB-COD-CTAB IN TAB.
      *CIC-MEM-TAB.
      *    MOVE "GNS" TO FIO-SIST.
      *    PERFORM GNS-FIO-TAB.
      *
      *    IF FIO-STAT-OKS AND
      *       TAB-COD-TTAB IN TAB = "SIS" AND
      *       TAB-COD-CTAB IN TAB NOT = SPACES AND
      *       TAB-COD-CTAB IN TAB NOT = "DAP" AND
      *       TAB-COD-CTAB IN TAB NOT = "SUP"
      *         DISPLAY " "
      *         IF TAB-IND-VIGE IN TAB = "S"
      *              DISPLAY "SISTEMA VIGENTE "
      *               TAB-COD-CTAB IN TAB " ==>> SE PROCESA"
      *         ELSE
      *              DISPLAY "SISTEMA NO VIGENTE "
      *               TAB-COD-CTAB IN TAB " ==>> NO SE PROCESA".
      *
      *    IF FIO-STAT-OKS AND
      *       TAB-COD-TTAB IN TAB = "SIS"
      *         IF TAB-COD-CTAB IN TAB NOT = SPACES AND
      *            TAB-COD-CTAB IN TAB NOT = "DAP" AND
      *            TAB-COD-CTAB IN TAB NOT = "SUP" AND
      *            TAB-IND-VIGE IN TAB = "S"
      *             PERFORM LLN-TBL-MEM
      *             MOVE FIO-GET-NXT TO FIO-CMND
      *             GO TO CIC-MEM-TAB
      *         ELSE
      *             MOVE FIO-GET-NXT TO FIO-CMND
      *             GO TO CIC-MEM-TAB.
      *
      *
      *    DISPLAY "BUSQUEDA DE SISTEMAS EN TAB GNS/SIS ".
      *    DISPLAY "FIN=================================".
      *RRM-FIN  7-NOV-2000.
      
           PERFORM CRGMATRIZ.
      
      
      
           DISPLAY "MAXIMO DE GRUPOS    " WSS-IDX-PDP-X.
           DISPLAY "MAXIMO DE ELEMENTOS " WSS-MAX-PDP-Y.
       LUP-MAIN.
      *     DISPLAY "GNSPPMDP EN CICLO LUP-MAIN V-0002 ".
      *    DISPLAY "GNSPPMDP: TRL-GLS-TERM " TRL-GLS-TERM.
      *    DISPLAY "GNSPPMDP: TRL-GLS-PRMT " TRL-GLS-PRMT.
      *    DISPLAY "GNSPPMDP: TRL-GLS-MENS " TRL-GLS-MENS.
      *    DISPLAY "GNSPPMDP: WFT-TRL-GLS-TERM " WFT-TRL-GLS-TERM.
      *    DISPLAY "GNSPPMDP: WFT-TRL-GLS-PRMT " WFT-TRL-GLS-PRMT.
      *    DISPLAY "GNSPPMDP: WFT-TRL-GLS-MENS " WFT-TRL-GLS-MENS.
           MOVE "S" TO WSS-PUT-MSK.
           MOVE "S" TO WSS-DSP-INI-PSWD.
           MOVE "S" TO WSS-DSP-BUS-GLOS.
           MOVE "S" TO WSS-DSP-PRO-AUTO.
           MOVE "S" TO WSS-DSP-CHK-RC3.
           MOVE "S" TO WSS-DSP-BUS-FUNC.
           MOVE "S" TO WSS-DSP-VID-RPF.
           MOVE "S" TO WSS-DSP-VID-MNU.
           MOVE "S" TO WSS-DSP-INI-OPCD.
           MOVE "S" TO WSS-DSP-BUS-LIMI.
           MOVE "S" TO WSS-DSP-PUT-TITU.
           MOVE "S" TO WSS-DSP-PUT-CMND.
           MOVE "S" TO WSS-DSP-BUS-CRPF.
           MOVE "S" TO WSS-DSP-LEE-CRPF.
           MOVE "S" TO WSS-DSP-PUT-MHDR.
           MOVE "S" TO WSS-DSP-BUS-CMND.
           MOVE "S" TO WSS-DSP-PUT-DCMN.
           MOVE "S" TO WSS-DSP-CHK-RCV.
           MOVE "S" TO WSS-DSP-CAL-PRV.
           MOVE "S" TO WSS-DSP-BUS-PRV.
           MOVE "S" TO WSS-DSP-DET-PRV.
           MOVE "EJE0" TO SYS-NTRN.
           MOVE SPACES TO UYP-COD-USER.
           MOVE ZEROES TO  WSS-T.
           MOVE ZEROES TO  WSS-DFRM-FUNC-IDX.
           MOVE ZEROES TO  WSS-DFRM-LENV.
           MOVE ZEROES TO  WSS-DFRM-LRCV.
           MOVE ZEROES TO  WSS-CAC-SUP.
           MOVE ZEROES TO  WSS-CAC-INF.
           MOVE ZEROES TO  WSS-IDX-FRM.
           MOVE ZEROES TO  WSS-IDX-WFF.
           MOVE ZEROES TO  CMN-I.
           MOVE ZEROES TO  CMN-K.
           MOVE ZEROES TO  RFN-LITM.
           MOVE 3588   TO  WSS-SXCT.
      *    MOVE ZEROES TO  WSS-AUTO.
           MOVE 1      TO  WSS-STDO.
           MOVE ZEROES TO  WSS-ISIS.
           MOVE ZEROES TO  WSS-IOPC.
           MOVE ZEROES TO  WSS-ICMD.
           MOVE ZEROES TO  WSS-IMAX.
           MOVE 9      TO  WSS-IVAL.
           MOVE ZEROES TO  WSS-I-CMN .
           MOVE ZEROES TO  WSS-I.
           MOVE ZEROES TO  WSS-J.
           MOVE ZEROES TO  WSS-K.
           MOVE ZEROES TO  WSS-L.
           MOVE ZEROES TO  WSS-IND-CMND.
           MOVE ZEROES TO  WSS-STAT.
           MOVE ZEROES TO  I.
           MOVE ZEROES TO  J.
           MOVE ZEROES TO  K.
           MOVE ZEROES TO  L.
           MOVE ZEROES TO  IMIN.
           MOVE ZEROES TO  IMAX.
           MOVE ZEROES TO  HEA-NUM-DMSA.
           MOVE ZEROES TO  HEA-NUM-MMSA.
           MOVE ZEROES TO  HEA-NUM-SMSA.
           MOVE ZEROES TO  HEA-NUM-AMSA.
      
           MOVE "S" TO  WSS-PRV-CRG-PDP.
           MOVE "S" TO WSS-DSP-TRC.
           MOVE "N" TO WSS-DFRM-LEYO-MAPA-BD.
      *    MOVE SPACES TO WSS-GLS-PRMT.
           MOVE SPACES TO WSS-AUX-PRMC.
           MOVE SPACES TO MNU.
           MOVE SPACES TO RPF.
           MOVE SPACES TO WSS-AUX-CRPF.
           MOVE SPACES TO RPF-GLS-PRMT.
           MOVE SPACES TO TRL-GLS-PRMT.
           MOVE SPACES TO WFT-TRL-GLS-PRMT.
      *    MOVE SPACES TO WFF-FLD.
           MOVE SPACES TO WSS-DFRM-DATA.
           MOVE SPACES TO WSS-DFRM-ITEM.
           MOVE SPACES TO FRM-DFLD.
           MOVE SPACES TO FRM-MENS.
           MOVE SPACES TO MSG-COD-MENS.
           MOVE SPACES TO MSG-GLS-DESC.
           MOVE SPACES TO TRL-COD-CACC.
           MOVE SPACES TO TRL-GLS-MENS.
           MOVE SPACES TO WFT-TRL-GLS-MENS.
           MOVE SPACES TO WSS-AUX-CACC-SIST.
           MOVE SPACES TO WSS-AUX-CACC-OPCI.
           MOVE SPACES TO RC3-TRL-COD-CACC.
           MOVE SPACES TO WSS-DFRM-FUNC.
           MOVE SPACES TO WSS-MENS.
           MOVE SPACES TO OPC-GLS-MENS.
           MOVE SPACES TO OP1-GLS-MENS.
           MOVE SPACES TO RC1-TRL-GLS-MENS.
           MOVE SPACES TO RC2-TRL-GLS-MENS.
           MOVE SPACES TO CUS-SDF-TRL-GLS-MENS.
      *SMG MOVE SPACES TO RCT-TRL-GLS-MENS.
           MOVE "NO" TO  SYS-EXIT.
      *    MOVE FIO-UPD TO FIO-CMND.
      *    PERFORM GNS-FIO-TSF.
      *    IF NOT FIO-STAT-OKS
      *         DISPLAY "GNSPPMDP ERROR APERTURA ARCHIVO TSF"
       INI-DSP-MDSP.
      *         STOP RUN.
           ADD 1 TO WSS-COR-EJEC.
           IF WSS-COD-FIN = "N"
               MOVE SPACES TO COMS-MESSAGE
               MOVE SPACES TO FRM-DFLD
               MOVE SPACES TO WSS-RCV-MTD
               MOVE FRM-GET-ALL TO FRM-CMND
               PERFORM GNS-PRO-FRM
               MOVE FRM-DFLD TO WSS-RCV-MTD.
      
      *         DISPLAY " INI-RCV-1 , 2 ,3 "
      *         DISPLAY  "X" WSS-RCV-1 "Y"
      *         DISPLAY  "X" WSS-RCV-2 "Y"
      *         DISPLAY  "X" WSS-RCV-3 "Y"
      *         DISPLAY " FIN-RCV-1 , 2 ,3 ".
      
      
           PERFORM UYS-GET-TERM.
           MOVE EIBTRMID TO TSC-TERM
                            QUE-TERM.
           PERFORM UYS-GET-TECL.
           IF WSS-COD-FIN = "N"
               MOVE FRM-DFLD TO WSS-AUX-TRAN
               MOVE FRM-DFLD TO WSS-FRM-DFLD.
      
      * CON TRCD EJE2 SIMULA RETORNO DESDE EL PROGRAMA A MENU
           IF WSS-AUX-TRAN = "EJE2"
               MOVE "RPGM" TO WSS-AUX-TRAN.
      
      
           MOVE SPACES TO UYS-USER.
           PERFORM UYS-GET-USER.
           IF UYS-USER = WSS-COD-USSP
               MOVE "S" TO WSS-IND-USSP
           ELSE
               MOVE "N" TO WSS-IND-USSP.
           IF WSS-COD-FIN = "S"
               MOVE "N" TO WSS-COD-FIN
               MOVE "EJEC" TO WSS-AUX-TRAN.
           IF WSS-AUX-TRAN = "EJEC"
               MOVE ZEROES TO TSC-LRCV.
           IF WSS-AUX-TRAN = "EJEC" AND UYS-USER = WSS-COD-USSP
               PERFORM GNS-DEL-TSC
               MOVE ZEROES       TO EIBCALEN
               MOVE FRM-FFLD-RET TO EIBAID
           ELSE
           IF WSS-AUX-TRAN = "EJEC"
      
                PERFORM INI-PSWD
                GO TO LUP-MAIN
      
           ELSE
           IF WSS-AUX-TRAN = "EJE1"
               MOVE FRM-DFLD TO CUS-RCV
               PERFORM VAL-PSWD
      
      *          PERFORM PRO-PSWD
                IF WSS-ERR-PSWD =  "S"
                    PERFORM INI-PSWD
                    GO TO LUP-MAIN
                ELSE
                  PERFORM GNS-DEL-TSC
                MOVE RUP-COD-USER IN RUP TO
                     UYP-COD-USER TSC-USER SCR-USER
                   MOVE ZEROES       TO EIBCALEN
                   MOVE FRM-FFLD-RET TO EIBAID
            ELSE
      * CUANDO UN PGI LLAMA A GNSPPMDP, SE SIMULA COMO SI EL USUARIO
      * ELIGIERA EL PROGRAMA COMO OPCION EN UN MENU
               MOVE 500      TO EIBCALEN.
      * Rutina que detecta transaccion invocada directamente
      *    MOVE LOW-VALUES TO OPC-FLD
      *                       OP1-FLD
      *                       HDR-FLD
      *                       TRL-FLD.
           MOVE EIBFN TO WSS-SEFN.
           PERFORM GNS-PRO-KEY.
      *    PERFORM CIC-ERR THRU FIN-CIC-ERR.
           PERFORM GNS-HDL-MNU.
      *XFM MOVE "GNSPPMDP" TO IDD-COD-CIDD IN IDD.
      *XFM MOVE FIO-GET-KEY TO FIO-CMND.
      *XFM PERFORM GNS-FIO-IDD.
      *XFM IF NOT FIO-STAT-OKS
      *XFM     MOVE "DEFAULT" TO IDD-COD-CIDD IN IDD
      *XFM     MOVE FIO-GET-KEY TO FIO-CMND
      *XFM     PERFORM GNS-FIO-IDD
      *XFM     IF NOT FIO-STAT-OKS
      *XFM         PERFORM BUS-FSIS
      *XFM     ELSE
      *XFM         MOVE IDD TO IDD-REGI
      *XFM ELSE
      *XFM     MOVE IDD TO IDD-REGI.
      *JSS IF EIBCALEN = 0 OR EIBCALEN = 7
           IF EIBCALEN = 0 OR EIBCALEN = 317
      *
               MOVE "K"      TO TSC-ICMN
               MOVE TSC-ICMN TO WSS-ICMN
      *
               PERFORM INI-SIST
      *        PERFORM BUS-MGKY
               PERFORM PRO-RMNU
               IF SYS-EXIT-YES
                   GO TO EXT-MAIN
               ELSE
                   NEXT SENTENCE
           ELSE
      *JSS IF EIBCALEN = 21
           IF EIBCALEN = 21 OR 29
               MOVE DFHCOMMAREA TO WSS-KNMO
               MOVE "K"      TO TSC-ICMN
               MOVE TSC-ICMN TO WSS-ICMN
               PERFORM INI-FUNC
               PERFORM CHK-PRV-SIST
      *        PERFORM PRO-RMNU
               PERFORM PRO-FIN
               IF SYS-EXIT-YES
                   GO TO EXT-MAIN
               ELSE
                   NEXT SENTENCE
           ELSE
               PERFORM GNS-GET-TSC
               PERFORM MOV-TSC-FRM-TRL
               MOVE TSC-USER TO UYP-COD-USER
               PERFORM CHK-RCV
      *
      *        MOVE DFHCOMMAREA TO SCR-VARI
      *
               MOVE TSC-ICMN TO WSS-ICMN
               IF ( NOT WSS-DESDE-CMN ) AND
                  ( TSC-TFUN = "HMX" OR "XMX" OR "RET" )
      *           AND EXISTIA COMANDO ORIGINAL EN EL MNU......
                   MOVE SPACES       TO WSS-FUNC
                   MOVE FRM-FFLD-PF3 TO FRM-FFLD
                   MOVE "RET" TO WSS-GO-TO-A-LEE-CMND
                   PERFORM PFM-LEE-CMND
                   IF SYS-EXIT-YES
                       GO TO EXT-MAIN.
      
      *             GO TO RET-LEE-CMND.
           IF TSC-INST = SCR-INST-HCM
               MOVE SCR-INST-GFL TO TSC-INST
               IF ( NOT EIBCALEN = 0 ) AND TSC-UARC(TSC-I) > SPACES
                   MOVE TSC-UARC( TSC-I ) TO AUX-UARC
                   MOVE TSC-PROG TO AUX-PROG
                   MOVE TSC-NTRN TO AUX-NTRN
                   MOVE AUX-PRGM TO TSC-UARC( TSC-I )
                   MOVE AUX-RPRG TO TSC-PROG
                   MOVE AUX-RTRN TO TSC-NTRN
                   PERFORM HBL-CMN
                   IF SYS-EXIT-YES
                       GO TO EXT-MAIN
                   ELSE
                       NEXT SENTENCE
               ELSE
                   PERFORM HBL-CMN
                   IF SYS-EXIT-YES
                       GO TO EXT-MAIN
                   ELSE
                       NEXT SENTENCE
           ELSE
           IF TSC-INST = SCR-INST-GFL
      
      
               PERFORM MOV-TSC-FRM-TRL
      *        PERFORM CHK-PTC
               PERFORM LEE-CACC
               IF SYS-EXIT-YES
                   GO TO EXT-MAIN
               ELSE
               PERFORM CAL-PROG.
      *JSS 2-SEP-1992 12:19:36 GOBACK.
       EXT-MAIN.
           IF SYS-EXIT-YES
              GO TO LUP-MAIN.
       FIN-MAIN.
           EXIT.
      
      
       CHK-PTC SECTION.
       INI-CHK-PTC.
      *     IF WSS-DSP-SEC = "S"
      *          MOVE "CHK-PTC " TO WSS-GLS-MDSP
      *          PERFORM DSP-MDSP.
           IF TSC-TFUN = "PTC" OR
              TSC-TFUN = "PIN"
                MOVE TSC-TFUN TO CHK-FRM-COD-TFUN
                MOVE TSC-NMAP TO CHK-FRM-GLS-NFRM
                PERFORM CHK-FRM.
       FIN-CHK-PTC.
           EXIT.
      
       CHK-PIN SECTION.
       INI-CHK-PIN.
      *    IF TSC-TFUN = "PIN"
           MOVE TSC-TFUN TO CHK-FRM-COD-TFUN.
           MOVE TSC-NMAP TO CHK-FRM-GLS-NFRM.
           PERFORM CHK-FRM.
       FIN-CHK-PIN.
           EXIT.
      
       COPY GNSBGRCM OF GNS.
       COPY GNSBHMNU OF GNS.
      
       INI-SIST SECTION.
       INI-INI-SIST.
      *XFM IF WSS-DSP-SEC = "S"
      *XFM      MOVE "INI-SIST " TO WSS-GLS-MDSP
      *XFM      PERFORM DSP-MDSP.
           IF EIBCALEN = 0
               MOVE +20     TO FRM-LFLD
               MOVE FRM-RCV TO FRM-CMND
               MOVE "SISTGNS" TO FRM-DFLD
               MOVE FRM-DFLD TO WSS-DFLD
           ELSE
      *JSS      MOVE DFHCOMMAREA TO WSS-CAXC.
               MOVE DFHCOMMAREA TO WSS-CMMA
               MOVE WSS-NSXC    TO WSS-SIST
               MOVE WSS-GSXC    TO WSS-SISG.
      *
           MOVE WSS-SIST TO TSC-SIST SCR-SIST.
           MOVE WSS-SISG TO TSC-SISG.
           MOVE SPACES TO MNU.
           MOVE "SIS" TO MNU-COD-NEMO IN MNU.
           MOVE FIO-GET-KEY TO FIO-CMND.
           PERFORM VID-MNU.
           IF NOT FIO-STAT-OKS
               MOVE "GNS" TO MSG-COD-SIST
               MOVE "CODNEMOSISN1" TO MSG-COD-MENS
               PERFORM GET-MSG
               MOVE MSG-GLS-DESC TO FRM-MENS
               MOVE FRM-MSG      TO FRM-CMND
               PERFORM GNS-PRO-FRM
           ELSE
               MOVE TSC-SIST TO MNU-COD-SIST.
           PERFORM CHK-PRV-SIST.
       FIN-INI-SIST.
           EXIT.
       INI-FUNC SECTION.
       INI-INI-FUNC.
           IF WSS-DSP-SEC = "S"
                MOVE "INI-FUNC " TO WSS-GLS-MDSP
                PERFORM DSP-MDSP.
           MOVE WSS-KNMO-SIST TO TSC-SIST SCR-SIST.
           MOVE WSS-KNMO-SISG TO TSC-SISG.
           MOVE WSS-KNMO-NEMO TO MNU-COD-NEMO.
           MOVE FIO-GET-KEY TO FIO-CMND.
           PERFORM VID-MNU.
           IF NOT FIO-STAT-OKS
               MOVE "CODNEMOSISN2" TO MSG-COD-MENS
               GO TO ERR-INI-FUNC.
           MOVE MNU-COD-TFUN TO CHK-FRM-COD-TFUN.
           MOVE MNU-GLS-NFRM TO CHK-FRM-GLS-NFRM.
           PERFORM CHK-FRM.
      *JSS-IBM
      *     IF EIBCALEN = 29 AND WSS-KNMO-PROG > SPACES
      *         MOVE WSS-KNMO-PROG TO MNU-GLS-PROG.
      *
           IF MNU-COD-SIST NOT > SPACES
               MOVE TSC-SIST TO MNU-COD-SIST.
           IF WSS-KNMO-CMND > SPACES
               MOVE WSS-KNMO-CMND TO MNU-COD-CMND.
           GO TO FIN-INI-FUNC.
       INI-FUNC-NOP.
           MOVE "SIS    NOPEN" TO MSG-COD-MENS.
           GO TO ERR-INI-FUNC.
       INI-FUNC-DSI.
           MOVE "SIS    NEXST" TO MSG-COD-MENS.
       ERR-INI-FUNC.
           MOVE "GNS" TO MSG-COD-SIST.
           PERFORM GET-MSG.
           MOVE MSG-GLS-DESC TO FRM-MENS.
           PERFORM FST-CMN.
           PERFORM CMN-MSSG.
           PERFORM CMN-PUTA.
      *EN VEZ DEL GOBACK COPIAR MODULO QUE SEPA VOLVER
      *JSS 2-SEP-1992 12:19:36 GOBACK.
       FIN-INI-FUNC.
           EXIT.
       CHK-PRV-CMND SECTION.
       INI-CHK-PRV-CMND.
      *    IF WSS-DSP-SEC = "S"
      *         MOVE "CHK-PRV-CMND " TO WSS-GLS-MDSP
      *         PERFORM DSP-MDSP.
      * INI-PRV
           MOVE 0 TO WSS-I-CMN.
       LUP-CHK-PRV-CMND.
           ADD 1 TO WSS-I-CMN.
           IF WSS-I-CMN > 10
               GO TO FIN-CHK-PRV-CMND.
           IF WSS-COD-CMND( WSS-I-CMN ) NOT > SPACES
               GO TO LUP-CHK-PRV-CMND.
      * llamada a la rutina de verificacion de permisos para verificar
      * un comando a la vez
           MOVE "GI"                  TO UYP-COD-TDPU.
           MOVE SPACES                TO UYP-COD-PREG.
           MOVE MNU-COD-SIST IN MNU   TO UYP-COD-SIST.
           MOVE MNU-COD-NEMO IN MNU   TO UYP-COD-NEMO.
           MOVE WSS-COD-CMND( WSS-I-CMN ) TO UYP-COD-CMND.
           MOVE UYP-CON-CMND TO WSS-COD-TCON.
      *    MOVE "GNSPPPRV" TO SYS-PROG.
      *    MOVE UYP-VARI   TO SYS-CMMA.
      *    MOVE +47        TO SYS-TCMA.
      *ADC MOVE SPACES TO PRV-PARAM.
      *ADC MOVE TSC-USER TO PRV-USER-CODE.
      *ADC MOVE UYP-COD-SIST TO PRV-SISTEMA.
      *ADC MOVE UYP-COD-NEMO TO PRV-COD-OPCI.
      *ADC MOVE UYP-COD-CMND TO PRV-COMANDO.
      *     DISPLAY "INVOCANDO PRIVILEGIOS PARA CMND".
      *     DISPLAY "PRV-PARAM " PRV-PARAM.
      
      
           IF WSS-IND-USSP = "S"
               MOVE "S" TO UYP-IND-RESP
           ELSE
      *         DISPLAY "INV PRIV PARA OPCI-CMND : " PRV-COD-OPCI
      *                   "-" PRV-COMANDO
      *
      *         DISPLAY "ANTES DE PRV-CMND " PRV-PARAM
      *         CALL "PRM_CMND OF GNS/EXE/GNSPPPRM"
      *               USING PRV-PARAM GIVING PRV-RESULT
      *             PERFORM DSP-RESP-ADC
      *         IF NOT PRV-RESULT-OK
      *             DISPLAY "PRV-CMD BAD " PRV-PARAM
      *             MOVE "N" TO UYP-IND-RESP
      *         ELSE
      *             DISPLAY "PRV-CMD OKS " PRV-PARAM
      *             MOVE "S" TO UYP-IND-RESP.
      *    MOVE SYS-LINK   TO SYS-CMND.
      *       DISPLAY "PRV-XY INVOCA CAL-PRV 1"
              PERFORM CAL-PRV
              MOVE "N" TO  WSS-PRV-CRG-PDP.
           IF ( UYP-IND-RESP NOT = "S" )        AND
              ( MNU-COD-CMND IN MNU > SPACES ) AND
              ( MNU-COD-CMND IN MNU = WSS-COD-CMND( WSS-I-CMN ) )
      *         MOVE "N" TO UYP-IND-RESP
      *         DISPLAY "SIN PRIV PARA OPCI-CMND : " PRV-COD-OPCI
      *                   "-" PRV-COMANDO
               MOVE 2 TO WSS-IND-CMND.
      *    ELSE
      *        MOVE "S" TO UYP-IND-RESP
      *        DISPLAY "CON PRIV PARA OPCI-CMND : " PRV-COD-OPCI
      *                  "-" PRV-COMANDO.
      *     DISPLAY "REVISANDO PRIV PARA COMANDO : " UYP-COD-CMND.
           IF UYP-IND-RESP NOT = "S"
      *ISP 27-11-97
               MOVE SPACES TO CMN-COD-CCMN( WSS-I-CMN )
               MOVE SPACES TO WSS-TABL( WSS-I-CMN )
               MOVE SPACES TO WSS-GLS-UARC( WSS-I-CMN )
               MOVE SPACES TO WSS-GLS-PRMT( WSS-I-CMN )
               MOVE SPACES TO WSS-GLS-CONF( WSS-I-CMN )
           ELSE
      *ISP 27-11-97
               MOVE UYP-COD-CMND TO CMN-COD-CCMN( WSS-I-CMN ).
           GO TO LUP-CHK-PRV-CMND.
       FIN-CHK-PRV-CMND.
           MOVE "S" TO  WSS-PRV-CRG-PDP.
           MOVE CMN-IDX-CCMN TO TSC-TRL-COD-CMND-ALL.
      *ISP 27-11-97
      *     DISPLAY "COMANDOS : " TSC-TRL-COD-CMND-ALL.
      * FIN-PRV
       EXT-CHK-PRV-CMND.
           EXIT.
      
       DSP-RESP-ADC SECTION.
       INI-DSP-RESP-ADC.
      *     DISPLAY "ADC MNU-CMND "  MNU-COD-CMND IN MNU.
      *     DISPLAY "ADC CMN-WSS-I-CMN "  WSS-COD-CMND( WSS-I-CMN ).
      *     IF NOT PRV-RESULT-OK
      *           DISPLAY "ADC-CMND SIN PRIVILEGIOS"
      *     ELSE
      *           DISPLAY "ADC-CMND CON PRIVILEGIOS".
       FIN-DSP-RESP-ADC.
           EXIT.
       LEE-CACC SECTION.
       INI-LEE-CACC.
           IF WSS-DSP-SEC = "S"
                MOVE "LEE-CACC " TO WSS-GLS-MDSP
                PERFORM DSP-MDSP.
           PERFORM LEE-CMND.
           IF SYS-EXIT-YES
               GO TO FIN-LEE-CACC.
           PERFORM PUT-DCMN.
           PERFORM CMN-PUTA.
       FIN-LEE-CACC.
           EXIT.
      
       LEE-CMND SECTION.
       INI-LEE-CMND.
      *XFM     IF WSS-DSP-SEC = "S"
      *XFM          MOVE "LEE-CMND " TO WSS-GLS-MDSP
      *XFM          PERFORM DSP-MDSP.
      *XFM     PERFORM GET-CMND.
      
           IF SYS-EXIT-YES
              GO TO FIN-LEE-CMND.
           MOVE TRL-COD-CACC TO WSS-FUNC.
      *XFM     IF FRM-FFLD = FRM-FFLD-PA2 OR FRM-FFLD-PA1
      *XFM         MOVE "SIS" TO MNU-COD-NEMO
      *XFM         MOVE FIO-GET-KEY TO FIO-CMND
      *XFM         PERFORM VID-MNU
      *XFM         IF NOT FIO-STAT-OKS
      *XFM             MOVE "CODNEMOSISN3" TO MSG-COD-MENS
      *XFM             GO TO ERR-LEE-CMND
      *XFM         ELSE
      *XFM             GO TO TCT-LEE-CMND.
       RET-LEE-CMND.
      
           IF WSS-FUNC NOT > SPACES
               IF FRM-FFLD = FRM-FFLD-RET
                   MOVE "CAC    BLK" TO MSG-COD-MENS
                   GO TO ERR-LEE-CMND
               ELSE
               IF FRM-FFLD = FRM-FFLD-PF3
                   MOVE TSC-FRET    TO MNU-COD-NEMO
                   MOVE FIO-GET-KEY TO FIO-CMND
                   PERFORM VID-MNU
                   IF NOT FIO-STAT-OKS
                       MOVE "CODFRETNEXST" TO MSG-COD-MENS
                       GO TO ERR-LEE-CMND
                   ELSE
                       MOVE MNU-COD-TFUN TO CHK-FRM-COD-TFUN
                       MOVE MNU-GLS-NFRM TO CHK-FRM-GLS-NFRM
                       PERFORM CHK-FRM
                       PERFORM PRO-FIN
                       IF SYS-EXIT-YES
                           GO TO EXT-LEE-CMND
                       ELSE
                           NEXT SENTENCE.
      
           PERFORM SHF-CACC.
           PERFORM INI-AUTO.
           PERFORM PRO-AUTO VARYING WSS-I FROM 1 BY 1
                            UNTIL WSS-I > 11.
           IF FUNCION-INVALIDA
               MOVE "FUN    INV" TO MSG-COD-MENS
               GO TO ERR-LEE-CMND.
           PERFORM UNS-CACC.
      *Decidir en Base a Teclas ENTER y PF3........
      *Si existe sistema o si existe opcion
           IF WSS-ISIS > 0 OR WSS-IOPC > 0 OR FRM-FFLD = FRM-FFLD-PF3
               PERFORM PRO-TCTL
               IF SYS-EXIT-YES
                   GO TO EXT-LEE-CMND.
      
           PERFORM BUS-CMND.
           IF MSG-COD-MENS NOT > SPACES
               GO TO FIN-LEE-CMND.
       TCT-LEE-CMND.
           PERFORM PRO-TCTL.
           IF SYS-EXIT-YES
               GO TO EXT-LEE-CMND.
       ERR-LEE-CMND.
           IF WSS-FUNC = "CRGMATRIZ" AND
              WSS-IND-USSP = "S"
                PERFORM CRGMATRIZ.
      
           MOVE "GNS" TO MSG-COD-SIST.
           PERFORM GET-MSG.
           IF FRM-MENS NOT > SPACES
               MOVE MSG-GLS-DESC TO FRM-MENS
           ELSE
           IF FRM-MEN1 NOT > SPACES
               MOVE MSG-GLS-DESC TO FRM-MEN1
           ELSE
           IF FRM-MEN2 NOT > SPACES
               MOVE MSG-GLS-DESC TO FRM-MEN2.
           PERFORM FST-CMN.
      *SMG PERFORM CMN-MSSG.
      
           PERFORM CMN-PUTA-RCT.
           PERFORM CMN-EXIT.
           IF SYS-EXIT-YES
               GO TO EXT-LEE-CMND.
       FIN-LEE-CMND.
           MOVE CMN-I TO TSC-I.
           MOVE FRM-FFLD TO TSC-FFLD.
       EXT-LEE-CMND.
           EXIT.
      
      *
      * ESTA SECTION ES IDENTICA A GET-CMND, PERO FUE CONSTRUIDA PARA
      * REEMPLAZAR  LOS  "GO  TO"  AL  INTERIOR, DE ELLA DESDE PUNTOS
      * EXTERNOS. A  ESTA  SECTION  SE HACE "PERFORM" Y SE RETORNA AL
      * PUNTO DE INVOCACION CON UN STATUS
      *
      
       PFM-LEE-CMND SECTION.
       INI-PFM-LEE-CMND.
      *     IF WSS-DSP-SEC = "S"
      *          MOVE "PFM-LEE-CMND " TO WSS-GLS-MDSP
      *          PERFORM DSP-MDSP.
      *     PERFORM GET-CMND.
      *     IF SYS-EXIT-YES
      *        GO TO FIN-PFM-LEE-CMND.
      *     MOVE TRL-COD-CACC TO WSS-FUNC.
      *     IF FRM-FFLD = FRM-FFLD-PA2 OR FRM-FFLD-PA1
      *         MOVE "SIS" TO MNU-COD-NEMO
      *         MOVE FIO-GET-KEY TO FIO-CMND
      *         PERFORM VID-MNU
      *         IF NOT FIO-STAT-OKS
      *             MOVE "CODNEMOSISNX" TO MSG-COD-MENS
      *             GO TO ERR-PFM-LEE-CMND
      *         ELSE
      *             GO TO TCT-PFM-LEE-CMND.
       RET-PFM-LEE-CMND.
           IF WSS-DSP-SEC = "S"
                MOVE "PFM-LEE-CMND " TO WSS-GLS-MDSP
                PERFORM DSP-MDSP.
           IF WSS-GO-TO-A-LEE-CMND = "ERR"
               MOVE SPACES TO WSS-GO-TO-A-LEE-CMND
               GO TO ERR-PFM-LEE-CMND.
            MOVE SPACES TO WSS-GO-TO-A-LEE-CMND.
      
           IF WSS-FUNC NOT > SPACES
               IF FRM-FFLD = FRM-FFLD-RET
                   MOVE "CAC    BLK" TO MSG-COD-MENS
                   GO TO ERR-PFM-LEE-CMND
               ELSE
               IF FRM-FFLD = FRM-FFLD-PF3
                   MOVE TSC-FRET    TO MNU-COD-NEMO
                   MOVE FIO-GET-KEY TO FIO-CMND
                   PERFORM VID-MNU
                   IF NOT FIO-STAT-OKS
                       MOVE "CODFRETNEXST" TO MSG-COD-MENS
                       GO TO ERR-PFM-LEE-CMND
                   ELSE
                       MOVE MNU-COD-TFUN TO CHK-FRM-COD-TFUN
                       MOVE MNU-GLS-NFRM TO CHK-FRM-GLS-NFRM
                       PERFORM CHK-FRM
                       PERFORM PRO-FIN
                       IF SYS-EXIT-YES
                           GO TO EXT-PFM-LEE-CMND.
      
           PERFORM SHF-CACC.
           PERFORM INI-AUTO.
           PERFORM PRO-AUTO VARYING WSS-I FROM 1 BY 1
                            UNTIL WSS-I > 11.
           IF FUNCION-INVALIDA
               MOVE "FUN    INV" TO MSG-COD-MENS
               GO TO ERR-PFM-LEE-CMND.
           PERFORM UNS-CACC.
      *Decidir en Base a Teclas ENTER y PF3........
      *Si existe sistema o si existe opcion
           IF WSS-ISIS > 0 OR WSS-IOPC > 0 OR FRM-FFLD = FRM-FFLD-PF3
               PERFORM PRO-TCTL
               IF SYS-EXIT-YES
                   GO TO EXT-PFM-LEE-CMND.
           PERFORM BUS-CMND.
           IF MSG-COD-MENS NOT > SPACES
               GO TO FIN-PFM-LEE-CMND.
       TCT-PFM-LEE-CMND.
           PERFORM PRO-TCTL.
           IF SYS-EXIT-YES
              GO TO EXT-PFM-LEE-CMND.
       ERR-PFM-LEE-CMND.
           IF WSS-FUNC = "CRGMATRIZ" AND
              WSS-IND-USSP = "S"
               PERFORM CRGMATRIZ.
      
           MOVE "GNS" TO MSG-COD-SIST.
           PERFORM GET-MSG.
           IF FRM-MENS NOT > SPACES
               MOVE MSG-GLS-DESC TO FRM-MENS
           ELSE
           IF FRM-MEN1 NOT > SPACES
               MOVE MSG-GLS-DESC TO FRM-MEN1
           ELSE
           IF FRM-MEN2 NOT > SPACES
               MOVE MSG-GLS-DESC TO FRM-MEN2.
           PERFORM FST-CMN.
      *SMG PERFORM CMN-MSSG.
           PERFORM CMN-PUTA-RCT.
           PERFORM CMN-EXIT.
           IF SYS-EXIT-YES
               GO TO EXT-PFM-LEE-CMND.
       FIN-PFM-LEE-CMND.
           MOVE CMN-I TO TSC-I.
           MOVE FRM-FFLD TO TSC-FFLD.
       EXT-PFM-LEE-CMND.
           EXIT.
      
      *XFM GET-CMND SECTION.
      *XFM INI-GET-CMND.
      *XFM     IF WSS-DSP-SEC = "S"
      *XFM          MOVE "GET-CMND " TO WSS-GLS-MDSP
      *XFM          PERFORM DSP-MDSP.
      *XFM     MOVE "GNSFCMN" TO FRM-NAME.
      *XFM     MOVE "GNSACMN" TO FRM-NLIB.
      *XFM*    PERFORM GNS-PRO-FRM.
      *XFM     IF NOT ( FRM-FFLD = FRM-FFLD-RET OR FRM-FFLD-PF3 OR
      *XFM                         FRM-FFLD-PA2 OR FRM-FFLD-PA1 )
      *XFM            MOVE "PFSINV" TO MSG-COD-MENS
      *XFM            MOVE "GNS"    TO MSG-COD-SIST
      *XFM            PERFORM GET-MSG
      *XFM            MOVE MSG-GLS-DESC TO FRM-MENS
      *XFM            PERFORM FST-CMN
      *XFM            PERFORM CMN-MSSG
      *XFM            PERFORM CMN-PUTA
      *XFM            PERFORM CMN-EXIT
      *XFM            IF SYS-EXIT-YES
      *XFM               GO TO FIN-GET-CMND.
      
      *XFM*    IF FRM-NTRN = "OPC2"
      *XFM*        MOVE FRM-DFLD TO RC2-FLD
      *XFM*        MOVE RC2-TRL-COD-CACC TO TRL-COD-CACC IN TRL-FLD
      *XFM*    ELSE
      *XFM*        MOVE FRM-DFLD TO RC1-FLD
      *XFM*        MOVE RC1-TRL-COD-CACC TO TRL-COD-CACC IN TRL-FLD.
      *XFM     IF FRM-FFLD = FRM-FFLD-PA2 OR FRM-FFLD-PA1
      *XFM*JSS     MOVE FRM-FFLD-TAB TO FRM-FFLD
      *XFM         MOVE "SIS"        TO TRL-COD-CACC.
      *XFM FIN-GET-CMND.
      *XFM     EXIT.
      
       CRGMATRIZ SECTION.
       INI-CRGMATRIZ.
      *RRM-INI 7-NOV-2000 
           PERFORM INIC-CRG-MEM.
      *RRM-FIN 7-NOV-2000  
           MOVE "CRGMATRIZ" TO MSG-COD-MENS IN MSG.
           PERFORM CRG-MEN-MEM VARYING MEM-IDX-MENU FROM 1 BY 1
                        UNTIL MEM-IDX-MENU > MEM-TOT-MENU.
           PERFORM GET-PDP.
           DISPLAY "MAXIMO DE GRUPOS    " WSS-IDX-PDP-X.
           DISPLAY "MAXIMO DE ELEMENTOS " WSS-MAX-PDP-Y.
      
       FIN-CRGMATRIZ.
           EXIT.

      *RRM-INI 7-NOV-2000
       INIC-CRG-MEM SECTION.
       INI-INIC-CRG-MEM.
           MOVE SPACES TO WSS-COD-SIST.
           MOVE SPACES TO WSS-COD-CMEN.
           DISPLAY "RRM:==COMIENZO DE PROCESO DE ELIMACION TSF DE MENU".
       CIC-ELI-MENU.
           MOVE WSS-COD-IMEN TO TSF-KEY-IREG.
           MOVE ZEROES TO TSF-QUE-NITM.
           MOVE FIO-GET-NLS TO FIO-CMND.
           PERFORM GNS-FIO-TSF.
           IF FIO-STAT-OKS
                MOVE TSF-KEY-IREG TO WSS-COD-IMEN
                IF WSS-COD-MENU NOT = "MENU"
                     MOVE "MENU" TO WSS-COD-MENU
                     MOVE SPACES TO WSS-COD-SIST
                     MOVE SPACES TO WSS-COD-CMEN
                ELSE
                     MOVE FIO-GET-KEY-UPD TO FIO-CMND
                     PERFORM GNS-FIO-TSF
                     IF NOT FIO-STAT-OKS
                        DISPLAY "RRM: ERROR AL TOMAR DE UPD"
                                " EL REGISTRO TSF DE MENU"
                     ELSE
                        MOVE FIO-DEL TO FIO-CMND
                        PERFORM GNS-FIO-TSF
                        DISPLAY "RRM: REGISTRO TSF DE MENU ELIMINADO"
                        GO TO CIC-ELI-MENU.
           DISPLAY "RRM:====FIN DE PROCESO DE ELIMACION TSF DE MENU".

           DISPLAY " ".
           DISPLAY "INI=================================".
           DISPLAY "BUSQUEDA DE SISTEMAS EN TAB GNS/SIS ".
           MOVE ZEROES TO MEM-TOT-MENU.
           MOVE FIO-GET-NLS TO FIO-CMND.
           MOVE "SIS" TO TAB-COD-TTAB IN TAB.
           MOVE SPACES TO TAB-COD-CTAB IN TAB.
       CIC-MEM-TAB.
           MOVE "GNS" TO FIO-SIST.
           PERFORM GNS-FIO-TAB.
      
           IF FIO-STAT-OKS AND
              TAB-COD-TTAB IN TAB = "SIS" AND
              TAB-COD-CTAB IN TAB NOT = SPACES AND
              TAB-COD-CTAB IN TAB NOT = "DAP" AND
              TAB-COD-CTAB IN TAB NOT = "SUP"
                DISPLAY " "
                IF TAB-IND-VIGE IN TAB = "S"
                     DISPLAY "SISTEMA VIGENTE "
                      TAB-COD-CTAB IN TAB " ==>> SE PROCESA"
                ELSE
                     DISPLAY "SISTEMA NO VIGENTE "
                      TAB-COD-CTAB IN TAB " ==>> NO SE PROCESA".
      
           IF FIO-STAT-OKS AND
              TAB-COD-TTAB IN TAB = "SIS"
                IF TAB-COD-CTAB IN TAB NOT = SPACES AND
                   TAB-COD-CTAB IN TAB NOT = "DAP" AND
                   TAB-COD-CTAB IN TAB NOT = "SUP" AND
                   TAB-IND-VIGE IN TAB = "S"
                    PERFORM LLN-TBL-MEM
                    MOVE FIO-GET-NXT TO FIO-CMND
                    GO TO CIC-MEM-TAB
                ELSE
                    MOVE FIO-GET-NXT TO FIO-CMND
                    GO TO CIC-MEM-TAB.
      
           DISPLAY "BUSQUEDA DE SISTEMAS EN TAB GNS/SIS ".
           DISPLAY "FIN=================================".      
       FIN-INIC-CRG-MEM.
           EXIT.
      *RRM-FIN 7-NOV-2000 

       SHF-CACC SECTION.
       INI-SHF-CACC.
           IF WSS-DSP-SEC = "S"
                MOVE "SHF-CACC " TO WSS-GLS-MDSP
                PERFORM DSP-MDSP.
           MOVE SPACES TO WSS-AFUN.
           MOVE 1 TO WSS-I WSS-L.
       LUP-SHF-CACC.
           IF WSS-FCHR( WSS-I ) > SPACES
               MOVE WSS-FCHR( WSS-I ) TO WSS-ACHR( WSS-L )
               ADD 1 TO WSS-L.
           ADD 1 TO WSS-I.
           IF WSS-I NOT > 11
               GO TO LUP-SHF-CACC.
           MOVE WSS-AFUN TO WSS-FUNC.
       FIN-SHF-CACC.
           EXIT.
       INI-AUTO SECTION.
       INI-INI-AUTO.
      *XFM IF WSS-DSP-SEC = "S"
      *XFM      MOVE "INI-AUTO " TO WSS-GLS-MDSP
      *XFM      PERFORM DSP-MDSP.
           MOVE "000002020000000100" TO WSS-ITM1.
           MOVE "010003030000090800" TO WSS-ITM2.
           MOVE "010004040000090800" TO WSS-ITM3.
           MOVE "010000000505090400" TO WSS-ITM4.
           MOVE "010006060000000500" TO WSS-ITM5.
           MOVE "010007070000090800" TO WSS-ITM6.
           MOVE "010008080000090800" TO WSS-ITM7.
           MOVE "010000000000090800" TO WSS-ITM8.
           MOVE "000010100000000900" TO WSS-ITM9.
           MOVE "010011110000001200" TO WSS-ITMA.
           MOVE "010012120000001200" TO WSS-ITMB.
           MOVE "010000000000001200" TO WSS-ITMC.
           MOVE 1 TO WSS-STDO.
           MOVE 0 TO WSS-ISIS.
           MOVE 0 TO WSS-IOPC.
           MOVE 0 TO WSS-ICMD.
       FIN-INI-AUTO.
           EXIT.
      
       PRO-AUTO SECTION.
       INI-PRO-AUTO.
      *XFM IF WSS-DSP-SEC = "S"
      *XFM        AND
      *XFM   WSS-DSP-PRO-AUTO = "S"
      *XFM        MOVE "N" TO WSS-DSP-PRO-AUTO
      *XFM      MOVE "PRO-AUTO " TO WSS-GLS-MDSP
      *XFM      PERFORM DSP-MDSP.
           IF WSS-FCHR( WSS-I ) NOT > SPACES
               MOVE 12 TO WSS-I
               GO TO FIN-PRO-AUTO.
           MOVE WSS-I TO WSS-IMAX.
           IF WSS-FCHR( WSS-I ) NOT < "A" AND
              WSS-FCHR( WSS-I ) NOT > "Z"
               MOVE 3 TO WSS-J
           ELSE
           IF WSS-FCHR( WSS-I ) NOT < "0" AND
              WSS-FCHR( WSS-I ) NOT > "9"
               MOVE 4 TO WSS-J
           ELSE
      *JSS-IBM IF WSS-FCHR( WSS-I ) = ":"
           IF WSS-FCHR( WSS-I ) = ":" OR "-"
               MOVE 5 TO WSS-J
               MOVE WSS-I TO WSS-ISIS
           ELSE
           IF WSS-FCHR( WSS-I ) = "/"
               MOVE 6 TO WSS-J
               MOVE WSS-I TO WSS-ISIS
           ELSE
           IF WSS-FCHR( WSS-I ) = "," OR "."
               MOVE 7 TO WSS-J
               MOVE WSS-I TO WSS-IOPC
               MOVE WSS-I TO WSS-ICMD
           ELSE
           IF WSS-FCHR( WSS-I ) NOT > SPACES
               MOVE 8 TO WSS-J
           ELSE
               MOVE 9 TO WSS-J.
           MOVE WSS-AUTO( WSS-STDO , WSS-J ) TO WSS-STDO.
           IF WSS-STDO NOT = 0
               MOVE WSS-AUTO( WSS-STDO , 1 ) TO WSS-IVAL
           ELSE
               MOVE 0 TO WSS-IVAL
               MOVE 12 TO WSS-I.
       FIN-PRO-AUTO.
           EXIT.
       UNS-CACC SECTION.
       INI-UNS-CACC.
      *XFM IF WSS-DSP-SEC = "S"
      *XFM      MOVE "UNS-CACC " TO WSS-GLS-MDSP
      *XFM      PERFORM DSP-MDSP.
           MOVE SPACES TO WSS-SIST WSS-OPCI WSS-CMND.
           IF WSS-ISIS > 0
               MOVE 0 TO WSS-K
               SUBTRACT 1 FROM WSS-ISIS GIVING WSS-J
               PERFORM MOV-SIST VARYING WSS-I FROM 1 BY 1
                                UNTIL   WSS-I > WSS-J
               ADD 1 WSS-ISIS GIVING WSS-L
           ELSE
               MOVE 1 TO WSS-L.
           IF WSS-ICMD > 0
               MOVE 0 TO WSS-K
               ADD 1 WSS-ICMD GIVING WSS-J
               PERFORM MOV-CMND VARYING WSS-I FROM WSS-J BY 1
                                UNTIL   WSS-I >    WSS-IMAX
               SUBTRACT 1 FROM WSS-ICMD GIVING WSS-M
           ELSE
               MOVE WSS-IMAX TO WSS-M.
           MOVE 0 TO WSS-K.
           PERFORM MOV-OPCI VARYING WSS-I FROM WSS-L BY 1
                            UNTIL   WSS-I > WSS-M.
       FIN-UNS-CACC.
           EXIT.
       MOV-SIST SECTION.
       INI-MOV-SIST.
           IF WSS-DSP-SEC = "S"
                MOVE "MOV-SIST " TO WSS-GLS-MDSP
                PERFORM DSP-MDSP.
           IF WSS-FCHR(WSS-I) > SPACES
               ADD 1 TO WSS-K
               MOVE WSS-FCHR(WSS-I) TO WSS-CSIS(WSS-K).
       FIN-MOV-SIST.
           EXIT.
       MOV-OPCI SECTION.
       INI-MOV-OPCI.
           IF WSS-DSP-SEC = "S"
                MOVE "MOV-OPCI " TO WSS-GLS-MDSP
                PERFORM DSP-MDSP.
           IF WSS-FCHR(WSS-I) > SPACES
               ADD 1 TO WSS-K
               MOVE WSS-FCHR(WSS-I) TO WSS-COPC(WSS-K).
       FIN-MOV-OPCI.
           EXIT.
       MOV-CMND SECTION.
       INI-MOV-CMND.
           IF WSS-DSP-SEC = "S"
                MOVE "MOV-CMND " TO WSS-GLS-MDSP
                PERFORM DSP-MDSP.
           IF WSS-FCHR(WSS-I) > SPACES
               ADD 1 TO WSS-K
               MOVE WSS-FCHR(WSS-I) TO WSS-CCMD(WSS-K).
       FIN-MOV-CMND.
           EXIT.
       PRO-TCTL SECTION.
       INI-PRO-TCTL.
           IF WSS-DSP-SEC = "S"
                MOVE "PRO-TCTL " TO WSS-GLS-MDSP
                PERFORM DSP-MDSP.
           IF WSS-SIST > SPACES AND TSC-SIST NOT = WSS-SIST
               PERFORM CHK-SIST
               IF SYS-EXIT-YES
                   GO TO FIN-PRO-TCTL
               ELSE
                   NEXT SENTENCE
           ELSE
               MOVE TSC-SIST TO WSS-SIST.
           IF WSS-OPCI > SPACES
               PERFORM CHK-OPC
               IF SYS-EXIT-YES
                   GO TO FIN-PRO-TCTL
               ELSE
                   PERFORM ANL-OPC
                   IF SYS-EXIT-YES
                       GO TO FIN-PRO-TCTL
                   ELSE
                       NEXT SENTENCE
           ELSE
           IF TSC-SIST = WSS-SIST
               IF TSC-NEMO = "SYS"
                    MOVE "FUN    ACT" TO MSG-COD-MENS
      *            GO TO ERR-LEE-CMND
               ELSE
                   MOVE "SIS"       TO MNU-COD-NEMO
                   MOVE FIO-GET-KEY TO FIO-CMND
                   PERFORM VID-MNU
                   IF NOT FIO-STAT-OKS
                       MOVE "CODNEMOSISN4" TO MSG-COD-MENS
                       MOVE "ERR" TO WSS-GO-TO-A-LEE-CMND
                       PERFORM PFM-LEE-CMND
                       IF SYS-EXIT-YES
                           GO TO FIN-PRO-TCTL.
      *                 GO TO ERR-LEE-CMND.
           MOVE WSS-SIST TO MNU-COD-SIST.
      * Con el MNU que se tiene hay que procesar
      *    IF ( MNU-COD-SIST NOT > SPACES OR
      *         MNU-COD-SIST = TSC-SIST ) AND MNU-COD-NEMO = TSC-NEMO
      *       MOVE "FUN    ACT" TO MSG-COD-MENS
      *       GO TO ERR-LEE-CMND.
           PERFORM PRO-FIN.
       FIN-PRO-TCTL.
           EXIT.
       CHK-SIST SECTION.
       INI-CHK-SIST.
      * INI-PRV
      *XFM IF WSS-DSP-SEC = "S"
      *XFM      MOVE "CHK-SIST " TO WSS-GLS-MDSP
      *XFM      PERFORM DSP-MDSP.
           MOVE "GI"     TO UYP-COD-TDPU.
           MOVE SPACES   TO UYP-COD-PREG.
           MOVE WSS-SIST TO UYP-COD-SIST.
           MOVE UYP-CON-SIST TO WSS-COD-TCON.
      *    MOVE "GNSPPPRV" TO SYS-PROG.
      *    MOVE UYP-VARI   TO SYS-CMMA.
      *    MOVE +47        TO SYS-TCMA.
      *    MOVE SYS-LINK   TO SYS-CMND.
           IF WSS-IND-USSP = "S"
                MOVE "S" TO UYP-IND-RESP
           ELSE
      *         DISPLAY "PRV-XY INVOCA CAL-PRV 2"
                PERFORM CAL-PRV.
           IF UYP-IND-RESP NOT = "S"
               GO TO CHK-SIST-NPR.
      *ADC MOVE SPACES TO PRV-PARAM.
      *ADC MOVE TSC-USER TO PRV-USER-CODE.
      *ADC MOVE UYP-COD-SIST TO PRV-SISTEMA.
      *ADC  DISPLAY "LLAMA PRV PARA SIST : " UYP-COD-SIST.
      *    IF WSS-IND-USSP = "S"
      *        MOVE "S" TO UYP-IND-RESP
      *    ELSE
      *         CALL "PRM_SIST OF GNS/EXE/GNSPPPRM"
      *         USING PRV-PARAM GIVING PRV-RESULT
      *         IF NOT PRV-RESULT-OK
      *              MOVE "N" TO UYP-IND-RESP
      *               DISPLAY "SIS PRV PARA SIST : " UYP-COD-SIST
      *                IF UYP-IND-RESP NOT = "S"
      *              GO TO CHK-SIST-NPR
      *         ELSE
      *               DISPLAY "CON PRV PARA SIST : " UYP-COD-SIST
      *              MOVE "S" TO UYP-IND-RESP.
      * FIN-PRV
           MOVE WSS-SIST    TO FIO-SIST.
           MOVE "SIS"       TO MNU-COD-NEMO.
           MOVE FIO-GET-KEY TO FIO-CMND.
           PERFORM GNS-FIO-MNU.
      *LOP-INI
      *    IF FIO-STAT-OKS
           IF FIO-STAT-OKS AND
              ( WSS-IND-USSP = "S" OR
                MNU-COD-TFUN IN MNU NOT = "NUL")
      *LOP-FIN
               PERFORM CHK-PRV-SIST
               GO TO FIN-CHK-SIST.
           IF TSC-TFUN = "MEN"
               MOVE WSS-CODNEMOSISN5 TO RMM-TRL-GLS-MENS
               MOVE RMM-FLD TO FRM-DFLD
               MOVE "N" TO WSS-DSP-TRC
               MOVE SYS-RTRN TO SYS-CMND
               PERFORM GNS-PRO-SYS
               GO TO FIN-CHK-SIST
           ELSE
               MOVE "CODNEMOSISN5" TO MSG-COD-MENS.
      
      
           MOVE "ERR" TO WSS-GO-TO-A-LEE-CMND.
           PERFORM PFM-LEE-CMND.
           GO TO FIN-CHK-SIST.
      *     GO TO ERR-LEE-CMND.
       CHK-SIST-NOP.
           MOVE "SIS    NOPEN" TO MSG-COD-MENS.
           MOVE "CODNEMOSISN6" TO MSG-COD-MENS.
           MOVE "ERR" TO WSS-GO-TO-A-LEE-CMND.
           PERFORM PFM-LEE-CMND.
           GO TO FIN-CHK-SIST.
      *     GO TO ERR-LEE-CMND.
       CHK-SIST-DSI.
           MOVE "SIS    NEXST" TO MSG-COD-MENS.
           MOVE "CODNEMOSISN7" TO MSG-COD-MENS.
           MOVE "ERR" TO WSS-GO-TO-A-LEE-CMND.
           PERFORM PFM-LEE-CMND.
           GO TO FIN-CHK-SIST.
      *     GO TO ERR-LEE-CMND.
       CHK-SIST-NPR.
           MOVE "SIS    NOPRV" TO MSG-COD-MENS.
           MOVE "CODNEMOSISN8" TO MSG-COD-MENS.
           MOVE "ERR" TO WSS-GO-TO-A-LEE-CMND.
           PERFORM PFM-LEE-CMND.
           GO TO FIN-CHK-SIST.
      *     GO TO ERR-LEE-CMND.
       FIN-CHK-SIST.
           EXIT.
       CHK-PRV-SIST SECTION.
       INI-CHK-PRV-SIST.
      * INI-PRV
           IF WSS-DSP-SEC = "S"
                MOVE "CHK-PRV-SIST " TO WSS-GLS-MDSP
                PERFORM DSP-MDSP.
           MOVE SPACES TO TSC-IPRV.
      * FIN-PRV
       FIN-CHK-PRV-SIST.
           EXIT.
      
       CHK-OPC SECTION.
       INI-CHK-OPC.
           MOVE WSS-SIST        TO FIO-SIST.
           MOVE WSS-OPCI        TO MNU-COD-OPCI IN MNU.
           MOVE FIO-GET-KEY     TO FIO-CMND.
           MOVE "MNU-COD-OPCI"  TO FIO-AKEY.
           PERFORM GNS-FIO-MNU.
           IF NOT FIO-STAT-OKS
               IF TSC-TFUN = "MEN"
                    MOVE WSS-CODOPCINEXST TO RMM-TRL-GLS-MENS
                    MOVE RMM-FLD TO FRM-DFLD
                    MOVE "N" TO WSS-DSP-TRC
                    MOVE SYS-RTRN TO SYS-CMND
                    PERFORM GNS-PRO-SYS
                    GO TO FIN-CHK-OPC
               ELSE
                    MOVE "CODOPCINEXST" TO MSG-COD-MENS
                    MOVE "ERR" TO WSS-GO-TO-A-LEE-CMND
                    PERFORM PFM-LEE-CMND
                    IF SYS-EXIT-YES
                        GO TO FIN-CHK-OPC
                    ELSE
                        NEXT SENTENCE
           ELSE
           IF MNU-COD-NEMO = "FIN         "
                MOVE "SI" TO SYS-EXIT
                MOVE "S" TO WSS-COD-FIN
                GO TO FIN-CHK-OPC.
      *         PERFORM ERR-LEE-CMND.
      * EN ESTE PUNTO SE TIENE EL REGISTRO MNU
      
           MOVE MNU-COD-TFUN TO CHK-FRM-COD-TFUN.
           MOVE MNU-GLS-NFRM TO CHK-FRM-GLS-NFRM.
           PERFORM CHK-FRM.
       FIN-CHK-OPC.
           EXIT.
       ANL-OPC SECTION.
       INI-ANL-OPC.
           IF WSS-DSP-SEC = "S"
                MOVE "ANL-OPC " TO WSS-GLS-MDSP
                PERFORM DSP-MDSP.
           IF WSS-CMND > SPACES
               MOVE WSS-CMND TO MNU-COD-CMND IN MNU.
           IF ( MNU-COD-SIST > SPACES AND MNU-COD-SIST NOT = TSC-SIST )
              AND
              ( NOT ( WSS-SIST > SPACES AND TSC-SIST NOT = WSS-SIST ) )
               MOVE MNU-COD-SIST TO WSS-SIST
               PERFORM CHK-SIST.
       FIN-ANL-OPC.
           EXIT.
      
       PRO-FIN SECTION.
       INI-PRO-FIN.
      *     IF WSS-DSP-SEC = "S"
      *          MOVE "PRO-FIN " TO WSS-GLS-MDSP
      *          PERFORM DSP-MDSP.
           IF MNU-COD-TFUN IN MNU = "NUL"
               MOVE "MNUTFUNNUL" TO MSG-COD-MENS
               GO TO ERR-PRO-FIN.
      * llamada a la rutina de verificacion de permisos para verificar
      * una funcion
      * INI-PRV
      * considera que la funcion puede ser el llamado a otro sistema, si
      * es asi entonces :
      * considera que la funcion puede ser un menu con lo cual muestra
      * de todas formas las opciones que ese menu tiene ( ya que "puede"
      * tener privilegio para una de las opciones de ese menu, y en caso
      * que no tenga no importa, ya que se validara privilegio al intent
      * llamar a la opcion ).
           MOVE "GI"                TO UYP-COD-TDPU.
           MOVE SPACES              TO UYP-COD-PREG.
           IF MNU-COD-SIST IN MNU = TSC-SIST OR
              MNU-COD-SIST IN MNU NOT > SPACES
               MOVE TSC-SIST            TO UYP-COD-SIST
               MOVE MNU-COD-NEMO IN MNU TO UYP-COD-NEMO
               MOVE UYP-CON-NEMO TO WSS-COD-TCON
               IF MNU-COD-TFUN IN MNU = "MEN"
                   MOVE "S" TO UYP-IND-RESP
                   GO TO SKP-PRO-FIN
               ELSE
                   MOVE UYP-CON-NEMO TO WSS-COD-TCON
           ELSE
               MOVE UYP-CON-SIST TO WSS-COD-TCON
               MOVE MNU-COD-SIST IN MNU TO UYP-COD-SIST.
      *    MOVE "GNSPPPRV" TO SYS-PROG.
      *    MOVE UYP-VARI   TO SYS-CMMA.
      *    MOVE +47        TO SYS-TCMA.
      *    MOVE SYS-LINK   TO SYS-CMND.
           IF WSS-IND-USSP = "S"
               MOVE "S" TO UYP-IND-RESP
           ELSE
      *        DISPLAY "PRV-XY INVOCA CAL-PRV 3"
               PERFORM CAL-PRV.
      *ADC MOVE SPACES TO PRV-PARAM.
      *ADC MOVE TSC-USER TO PRV-USER-CODE.
      *ADC MOVE UYP-COD-SIST TO PRV-SISTEMA.
      *ADC IF WSS-IND-USSP = "S"
      *ADC     MOVE "S" TO UYP-IND-RESP
      *ADC ELSE
      *ADC      DISPLAY "INVOCANDO PRIVILEGIOS PARA SIST : "PRV-SISTEMA
      *ADC     CALL "PRM_SIST OF GNS/EXE/GNSPPPRM"
      *ADC          USING PRV-PARAM GIVING PRV-RESULT
      *ADC     IF NOT PRV-RESULT-OK
      *ADC         MOVE "N" TO UYP-IND-RESP
      *ADC          DISPLAY "SIN PRV PARA SIST : " PRV-SISTEMA
           IF UYP-IND-RESP NOT = "S"
               MOVE "FUN    NOPRV" TO MSG-COD-MENS
               GO TO ERR-PRO-FIN.
      *ADC     ELSE
      *ADC          DISPLAY "CON PRV PARA SIST : " PRV-SISTEMA
      *ADC         MOVE "S" TO UYP-IND-RESP.
      * FIN-PRV
      * Que pasa IF MNU-COD-CMND IN MNU > SPACES ??????
       SKP-PRO-FIN.
           IF MNU-COD-SIST NOT > SPACES
               MOVE TSC-SIST TO MNU-COD-SIST.
           IF MNU-COD-CMND IN MNU > SPACES
               PERFORM BUS-CRPF
      *Chequear privilegios para el comando, YA ESTA HECHO
               IF WSS-COMANDO-SINPRV
                   MOVE "CMD    NOPRV" TO MSG-COD-MENS
                   GO TO ERR-PRO-FIN
               ELSE
               IF NOT WSS-EXISTE-COMANDO
                   MOVE "CMD    NEXST" TO MSG-COD-MENS
                   GO TO ERR-PRO-FIN
               ELSE
                   PERFORM CRG-VSCR.
           IF MNU-COD-SIST NOT > SPACES OR
              MNU-COD-SIST =     TSC-SIST
               MOVE TSC-SIST TO MNU-COD-SIST
               MOVE TSC-SISG TO WSS-SISG
               MOVE SPACES   TO WSS-NSIS
               GO TO CON-PRO-FIN.
           IF TSC-SIST NOT = "GNS" AND MNU-COD-SIST = "GNS"
                MOVE TSC-SIST TO TSC-SISG
           ELSE
      *JSS IF TSC-SIST = "GNS" AND MNU-COD-SIST NOT = "GNS"
                MOVE SPACES TO TSC-SISG.
           MOVE MNU-COD-SIST TO TSC-SIST SCR-SIST.
       CON-PRO-FIN.
           MOVE MNU TO WSS-RMNU.
           IF MNU-COD-TFUN = "PGI" OR "PRO" OR "MEN" OR "HMC" OR
                             "HMX" OR "XMC" OR "XMX" OR "RET" OR
                             "PTC" OR "NPC" OR "PIN"
               PERFORM PRO-RMNU
               IF SYS-EXIT-YES
                   GO TO FIN-PRO-FIN
               ELSE
                   NEXT SENTENCE
           ELSE
               PERFORM GNS-PUT-FRT
               IF MNU-COD-TFUN = "CCA"
                   PERFORM PRO-RMNU
                   IF SYS-EXIT-YES
                       GO TO FIN-PRO-FIN
                   ELSE
                       NEXT SENTENCE
               ELSE
      *POR MIENTRAS SE HACE CON XCTROL, SE DEBE ANALIZAR ( MNU-COD-TCTL
      *MNU-COD-TINF )
                   MOVE MNU-GLS-PROG TO SYS-PROG
                   MOVE LOW-VALUES   TO SYS-CMMA
                   MOVE 0            TO SYS-TCMA
                   MOVE SYS-XCTL     TO SYS-CMND
                   PERFORM GNS-PRO-SYS.
           MOVE "XCTERR" TO MSG-COD-MENS.
           MOVE SPACES   TO FRM-MEN1.
           MOVE SYS-PROG TO FRM-MEN2.
       ERR-PRO-FIN.
           IF EIBCALEN NOT = 21
               PERFORM RTRA-TSC
               MOVE "CODNEMOSISN9" TO MSG-COD-MENS.
           MOVE "ERR" TO WSS-GO-TO-A-LEE-CMND.
           PERFORM PFM-LEE-CMND.
      *     IF SYS-EXIT-YES
               GO TO FIN-PRO-FIN.
      *     GO TO ERR-LEE-CMND.
           MOVE "GNS" TO MSG-COD-SIST.
           PERFORM GET-MSG.
           MOVE MSG-GLS-DESC TO FRM-MENS.
           PERFORM FST-CMN.
           PERFORM CMN-MSSG.
           PERFORM CMN-PUTA.
      *EN VEZ DEL GOBACK COPIAR MODULO QUE SEPA VOLVER
           MOVE "RET"      TO SYS-CMMA.
           MOVE 3          TO SYS-TCMA.
      * ISP:  26-FEB-1992 09:52:46
      *       CMT SIN PRIVILEGIOS => RETORNABA INCONDICIONALMENTE VIA PF
      *       SIN CONSIDERAR VERSION
           IF MNU-COD-TFUN NOT = "PTC" OR "PIN"
               MOVE "GNSPPPF2" TO SYS-PROG
           ELSE
               MOVE "GNSPPPK2" TO SYS-PROG.
      * ISP:  26-FEB-1992 09:52:46
           MOVE SYS-XCTL   TO SYS-CMND.
           PERFORM GNS-PRO-SYS.
       GBK-PRO-FIN.
           PERFORM XCT-ERR.
       FIN-PRO-FIN.
           EXIT.
      
       CRG-VSCR SECTION.
       INI-CRG-VSCR.
           IF WSS-DSP-SEC = "S"
                MOVE "CRG-VSCR " TO WSS-GLS-MDSP
                PERFORM DSP-MDSP.
           MOVE MNU-GLS-PROG TO TSC-PROG.
           MOVE WSS-AUX-CRPF TO TSC-CRPF.
           MOVE WSS-AUX-CMNP TO TSC-CMNP.
           MOVE WSS-AUX-PRMC TO TSC-PRMC.
           MOVE WSS-AUX-CMND TO TSC-CMND.
           MOVE MNU-COD-TFUN TO TSC-TFUN.
       FIN-CRG-VSCR.
           EXIT.
      
       FST-CMN SECTION.
       INI-FST-CMN.
      *    IF WSS-DSP-SEC = "S"
      *         MOVE "FST-CMND " TO WSS-GLS-MDSP
      *         PERFORM DSP-MDSP.
      *    MOVE -1 TO TRL-COD-CACC-LEN.
       FIN-FST-CMN.
           EXIT.
      
       CMN-MSSG SECTION.
       INI-CMN-MSSG.
           IF WSS-DSP-SEC = "S"
                MOVE "CMN-MSSG " TO WSS-GLS-MDSP
                PERFORM DSP-MDSP.
           MOVE FRM-MENS TO TRL-GLS-MENS.
       FIN-CMN-MSSG.
           EXIT.
      
       XCT-ERR SECTION.
       INI-XCT-ERR.
           IF WSS-DSP-SEC = "S"
                MOVE "XCT-ERR " TO WSS-GLS-MDSP
                PERFORM DSP-MDSP.
           MOVE FRM-CLR-FRM TO FRM-CMND.
           PERFORM GNS-PRO-FRM.
           MOVE "XCTERR    " TO MSG-COD-MENS.
           MOVE "GNS"        TO MSG-COD-SIST.
           PERFORM GET-MSG.
           MOVE MSG-GLS-DESC TO FRM-MEN1.
           MOVE SYS-PROG     TO FRM-MEN2.
           MOVE FRM-MSG      TO FRM-CMND.
           PERFORM GNS-PRO-FRM.
      *JSS 2-SEP-1992 12:19:36 GOBACK.
       FIN-XCT-ERR.
           EXIT.
      * Carga numeros de Base de Datos de los Sistemas por default
       BUS-FSIS SECTION.
       INI-BUS-FSIS.
           IF WSS-DSP-SEC = "S"
                MOVE "BUS-FSIS " TO WSS-GLS-MDSP
                PERFORM DSP-MDSP.
           MOVE "NO EXISTE REGISTRO IDD CON LLAVE : " TO SYS-MEN1.
           MOVE IDD-COD-CIDD IN IDD                   TO SYS-MEN2.
           MOVE SYS-ABOR TO SYS-CMND.
           PERFORM GNS-PRO-SYS.
       FIN-BUS-FSIS.
           EXIT.
       COPY GNSBGFRM OF GNS.
      * COPY GNSBECIC OF GNS.
       COPY GNSBGMSG OF GNS.
       COPY GNSBIABT OF GNS.
       COPY GNSBGHOY OF GNS.
      * COPY GNSBGSYS OF GNS.
      * Rutina de Servicios del Sistema
       GNS-PRO-SYS SECTION.
       INI-GNS-PRO-SYS.
      
      *    IF SYS-CMND = SYS-RTRN
      *        IF TSC-TFUN = "PIN"
      *            MOVE TSC-NTRN TO SYS-NTRN
      *        ELSE
      *            MOVE "EJE0"   TO SYS-NTRN.
      
           MOVE 0 TO SYS-RESU.
           IF SYS-CMND = SYS-XCTL
               PERFORM SET-CMA
               MOVE SYS-PROG TO SYS-PROG-ALF
                CALL "GET-DESIGNATOR-USING-NAME OF DCILIBRARY"
                      USING SYS-PROG-ALF
                      VALUE PROGRAM
                      SYS-PROG-R
                      GIVING SYS-RESU
                IF SYS-RESU NOT = 0
                    DISPLAY "GNSPPMDP *** NO EXISTE PROGR ***"
                ELSE
                    MOVE SYS-PROG-R TO DESTINATIONDESG OF COMS-OUT
                    MOVE 1 TO DESTCOUNT
                    MOVE 3000  TO TEXTLENGTH OF COMS-OUT
                   SEND COMS-OUT FROM SYS-MSG-XCTL
                   MOVE "SI" TO SYS-EXIT
           ELSE
           IF SYS-CMND = SYS-RTRN
               PERFORM SET-CMA
               MOVE 1 TO DESTCOUNT
               MOVE STATION TO DESTINATIONDESG
               MOVE 3000     TO TEXTLENGTH OF COMS-OUT
               IF WSS-DSP-TRC = "S"
                   IF SYS-IND-WICB = "S"
                        PERFORM SET-TRCD
      *                 MOVE SYS-NTRN TO FRM-DFLD-MSK-TRCD
                        SEND COMS-OUT FROM FRM-DFLD
                        MOVE "SI" TO SYS-EXIT
                   ELSE
                        MOVE SYS-NTRN TO FRM-NTRN-0
                        SEND COMS-OUT FROM FRM-DFLD
                        MOVE "SI" TO SYS-EXIT
               ELSE
                   SEND COMS-OUT FROM FRM-DFLD
      *            STOP RUN
                   MOVE "SI" TO SYS-EXIT
           ELSE
           IF SYS-CMND = SYS-GET-DATE OR
              SYS-CMND = SYS-GET-TIME
                PERFORM GET-SYS-HORA
           ELSE
           IF SYS-CMND = SYS-ABOR
      *       CALL "GNSPPSYS IN OBJECT/GNSPPSYS"
      *                        USING SYS-VARI
              DISPLAY "TSTBGSYS : COMANDO INVALIDO ABORTO"
              STOP RUN.
      *    ELSE
      *       CALL "GNSPPSYS IN OBJECT/GNSPPSYS"
      *                        USING SYS-VARI.
       FIN-GNS-PRO-SYS.
           EXIT.
       SET-TRCD SECTION.
       INI-SET-TRCD.
           IF WSS-PUT-MSK = "S"
               MOVE SYS-NTRN TO FRM-DFLD-MSK-TRCD
           ELSE
               MOVE SYS-NTRN TO FRM-NTRN.
       FIN-SET-TRCD.
           EXIT.
      
       GET-SYS-HORA SECTION.
       INI-GET-SYS-HORA.
      * Obtiene fecha
           ACCEPT SYS-FHOY-2B FROM DATE.
           MOVE SYS-AHOY-2B TO SYS-AHOY.
           MOVE SYS-MHOY-2B TO SYS-MHOY.
           MOVE SYS-DHOY-2B TO SYS-DHOY.
           IF SYS-AHOY < 90
              MOVE 20 TO SYS-SHOY
           ELSE
              MOVE 19 TO SYS-SHOY.
      * Obtiene hora
           ACCEPT SYS-HHOY-2B FROM TIME.
           MOVE SYS-HHHY-2B TO SYS-HHHY.
           MOVE SYS-MMHY-2B TO SYS-MMHY.
           MOVE SYS-SSHY-2B TO SYS-SSHY.
      
           MOVE SYS-SHOY TO SYS-SSTP.
           MOVE SYS-AHOY TO SYS-AATS.
           MOVE SYS-MHOY TO SYS-METS.
           MOVE SYS-DHOY TO SYS-DDTS.
      
           MOVE SYS-HHHY TO SYS-HHTS.
           MOVE SYS-MMHY TO SYS-MMTS.
           MOVE SYS-SSHY TO SYS-SSTS.
       FIN-GET-SYS-HORA.
           EXIT.
       SET-CMA SECTION.
       INI-SET-CMA.
           IF ( SYS-NTRN = "EJE0" OR SYS-NTRN = "EJE1" )
               GO TO FIN-SET-CMA.
           MOVE QUE-GET TO QUE-CMND.
           PERFORM GNS-PRO-CMA.
           IF QUE-STAT = QUE-STAT-OKS
               MOVE QUE-MOD TO QUE-CMND
           ELSE
               MOVE QUE-PUT TO QUE-CMND.
           MOVE SYS-CMMA TO DFHCOMMAREA.
           MOVE SYS-CMMA TO SCR-AUXIL.
           PERFORM GNS-PRO-CMA.
       FIN-SET-CMA.
           EXIT.
      
       GET-CMA SECTION.
       INI-GET-CMA.
           MOVE QUE-GET TO QUE-CMND.
           PERFORM GNS-PRO-CMA.
       FIN-GET-CMA.
           EXIT.
      
       GNS-PRO-CMA SECTION.
       INI-GNS-PRO-CMA.
           MOVE EIBTRMID TO QUE-TERM.
           MOVE "CMMA"  TO QUE-TYPE.
           MOVE 1       TO QUE-NITM.
           IF QUE-CMND = QUE-PUT OR
              QUE-CMND = QUE-MOD
               MOVE DFHCOMMAREA TO QUE-ITEM.
           PERFORM GNS-PRO-QUE.
           IF QUE-STAT = QUE-STAT-OKS AND
              QUE-CMND = QUE-GET
               MOVE QUE-ITEM TO DFHCOMMAREA.
       FIN-GNS-PRO-CMA.
           EXIT.
      
      ******************************************************************
       PRO-RMNU SECTION.
       INI-PRO-RMNU.
           MOVE MNU-COD-NEMS IN MNU TO WSSM-MNU-COD-NEMS.
           MOVE TSC-IPRV TO MNU-IND-IPRV.
      *
           MOVE MNU-COD-SIST TO TSC-SIST SCR-SIST.
           MOVE MNU-COD-OPCI TO TSC-OPCI.
           MOVE MNU-COD-NEMO TO TSC-NEMO.
      *
           MOVE MNU-GLS-TRAN TO TSC-NTRN.
           MOVE MNU-GLS-PROG TO TSC-PROG.
           MOVE MNU-GLS-LFRM TO TSC-NLIB.
           MOVE MNU-GLS-NFRM TO TSC-NMAP.
           MOVE MNU-GLS-LDOC TO TSC-LDOC.
           MOVE MNU-GLS-NDOC TO TSC-NDOC.
           MOVE MNU-COD-FRET TO TSC-FRET.
           MOVE MNU-IND-IPRV TO TSC-IPRV.
           MOVE MNU-COD-INST TO TSC-TINS.
           MOVE MNU-COD-TCTL TO TSC-TCTL.
           MOVE MNU-COD-TINF TO TSC-TINF.
           MOVE MNU-COD-TFUN TO TSC-TFUN.
           MOVE MNU-COD-CIFD TO TSC-CIDD.
           MOVE +250         TO TSC-TCMA.
           IF MNU-COD-TFUN = "MEN"
               PERFORM BUS-CRPF
               PERFORM CRG-VSCR
               MOVE MNU TO WSS-RMNU
               PERFORM PRO-MENU
               MOVE WSS-RMNU TO MNU
               PERFORM PUT-MHDR
               PERFORM PUT-MSCR
               GO TO CON-PRO-RMNU.
           PERFORM GET-PROV.
           IF MNU-COD-TFUN NOT = "CCA"
               MOVE LOW-VALUES TO OPC-FLD
               MOVE LOW-VALUES TO OP1-FLD
               PERFORM PUT-MHDR
      *         PERFORM PUT-MSCR
           ELSE
               IF MNU-COD-CMND IN MNU > SPACES
                   MOVE MNU-COD-CMND TO WSS-OPCI
                   PERFORM BUS-CMND
                   PERFORM PUT-DCMN
                   PERFORM CAL-PROG
                   IF SYS-EXIT-YES
                      GO TO FIN-PRO-RMNU
                   ELSE
                      NEXT SENTENCE
               ELSE
                   PERFORM BUS-CRPF
                   PERFORM CRG-VSCR
                   PERFORM CAL-PROG
                   IF SYS-EXIT-YES
                       GO TO FIN-PRO-RMNU.
           IF MNU-COD-CMND IN MNU > SPACES
               IF TSC-TFUN = "HMX" OR "XMX"
      *Solo para cargar datos de COMMON AREA asociado al comando,
      *no se despliega MAPA
                   MOVE MNU-COD-CMND TO WSS-OPCI
                   PERFORM BUS-CMND
                   PERFORM PUT-DCMN
                   PERFORM CAL-PROG
                   IF SYS-EXIT-YES
                       GO TO FIN-PRO-RMNU
                   ELSE
                       NEXT SENTENCE
               ELSE
                   MOVE MNU-COD-CMND TO WSS-OPCI
                   PERFORM BUS-CMND
                   PERFORM PUT-DCMN
                   PERFORM CMN-PUTA
                   PERFORM CAL-PROG
                   IF SYS-EXIT-YES
                       GO TO FIN-PRO-RMNU.
           PERFORM BUS-CRPF.
           PERFORM CRG-VSCR.
       CON-PRO-RMNU.
           MOVE SCR-INST-GFL TO TSC-INST
           PERFORM HBL-CMN.
       FIN-PRO-RMNU.
           EXIT.
      ******************************************************************
       PRO-MENU SECTION.
       INI-PRO-MENU.
      *XFM DISPLAY "PFM: EN PRO-MENU SECTION".
      *XFM IF WSS-DSP-SEC = "S"
      *XFM      MOVE "PRO-MENU " TO WSS-GLS-MDSP
      *XFM      PERFORM DSP-MDSP.
           MOVE MNU-COD-MENU TO WSS-MENU.
           MOVE MNU-COD-NEMO TO WSS-NEMO.
      *     PERFORM BUS-MENU.
      *     IF NOT WSS-STAT-OKS
      *         MOVE LOW-VALUES TO OPC-FLD
      *         MOVE LOW-VALUES TO OP1-FLD
      *         MOVE FRM-MENS   TO OPC-GLS-MENS
      *         MOVE FRM-MENS   TO OP1-GLS-MENS
      *         GO TO FIN-PRO-MENU.
      *ISP-PFM
      *     PERFORM INI-OPCD VARYING J FROM 1 BY 1 UNTIL J > 20.
      *     PERFORM BUS-FUNC THRU FIN-BUS-FUNC UNTIL NOT
      *                           ( WSS-STAT-OKS AND FIO-STAT-OKS AND
      *                             MNU-COD-CMEN = WSS-MENU ).
           PERFORM BUS-FUNC.
      *     IF NOT WSS-STAT-OKS
      *         MOVE LOW-VALUES TO OPC-FLD
      *         MOVE LOW-VALUES TO OP1-FLD
      *         MOVE FRM-MENS   TO OPC-GLS-MENS
      *         MOVE FRM-MENS   TO OP1-GLS-MENS.
       FIN-PRO-MENU.
           EXIT.
      
       BUS-MENU SECTION.
       INI-BUS-MENU.
      *XFM IF WSS-DSP-SEC = "S"
      *XFM      MOVE "BUS-MENU " TO WSS-GLS-MDSP
      *XFM      PERFORM DSP-MDSP.
      *XFM MOVE SPACES          TO MNU-COD-IMEN.
      *XFM MOVE MNU-COD-MENU    TO MNU-COD-CMEN.
      *XFM MOVE "MNU-COD-IMEN"  TO FIO-AKEY.
      *XFM MOVE FIO-GET-NLS     TO FIO-CMND.
      *XFM PERFORM VID-MNU.
      *XFM IF FIO-STAT-OKS AND ( MNU-COD-CMEN = WSS-MENU )
      *XFM     GO TO FIN-BUS-MENU.
      *XFM IF WSS-NEMO = "SIS"
      *XFM     MOVE "GNS" TO MSG-COD-SIST
      *XFM     MOVE "MNUSIS NOOPC" TO MSG-COD-MENS
      *XFM     PERFORM GET-MSG
      *XFM     MOVE MSG-GLS-DESC TO FRM-MENS
      *XFM     MOVE 2 TO WSS-STAT
      *XFM ELSE
      *XFM     MOVE "GNS" TO MSG-COD-SIST
      *XFM     MOVE "MNU    NOOPC" TO MSG-COD-MENS
      *XFM     PERFORM GET-MSG
      *XFM     MOVE MSG-GLS-DESC TO FRM-MENS
      *XFM     MOVE 1 TO WSS-STAT.
       FIN-BUS-MENU.
           EXIT.
      
       INI-OPCD SECTION.
       INI-INI-OPCD.
      *XFM IF WSS-DSP-SEC = "S"
      *XFM        AND
      *XFM   WSS-DSP-INI-OPCD = "S"
      *XFM        MOVE "N" TO WSS-DSP-INI-OPCD
      *XFM        MOVE "INI-OPCD " TO WSS-GLS-MDSP
      *XFM      PERFORM DSP-MDSP.
      
      *XFM MOVE SPACES TO OPC-COD-OPCI( J ).
      *XFM MOVE SPACES TO OPC-GLS-FMEN( J ).
      *XFM MOVE FRM-CPIM-AEY TO OPC-COD-OPCI-ATR( J ).
      *XFM MOVE FRM-CPIM-AEY TO OPC-GLS-FMEN-ATR( J ).
      *XFM ADD 20 J GIVING I.
      *XFM MOVE SPACES TO OPC-COD-OPCI( I ).
      *XFM MOVE SPACES TO OPC-GLS-FMEN( I ).
      *XFM MOVE FRM-CPIM-AEY TO OPC-COD-OPCI-ATR( I ).
      *XFM MOVE FRM-CPIM-AEY TO OPC-GLS-FMEN-ATR( I ).
      *XFM MOVE SPACES TO OP1-COD-OPCI( J ).
      *XFM MOVE SPACES TO OP1-GLS-FMEN( J ).
      *XFM MOVE FRM-CPIM-AEY TO OP1-COD-OPCI-ATR( J ).
      *XFM MOVE FRM-CPIM-AEY TO OP1-GLS-FMEN-ATR( J ).
       FIN-INI-OPCD.
           EXIT.
      
       BUS-FUNC SECTION.
       INI-BUS-FUNC.
      *PFM     IF WSS-DSP-SEC = "S"
      *PFM            AND
      *PFM       WSS-DSP-BUS-FUNC = "S"
      *PFM            MOVE "N" TO WSS-DSP-BUS-FUNC
      *PFM          MOVE "BUS-FUNC " TO WSS-GLS-MDSP
      *PFM          PERFORM DSP-MDSP.
      *PFM* llamada a la rutina de verificacion de permisos para verific
      *PFM* un funcion
      *PFM* INI-PRV
      *PFM* considera que la funcion puede ser el llamado a otro sistema
      *PFM* es asi entonces :
      *PFM* considera que la funcion puede ser un menu con lo cual muest
      *PFM* de todas formas las opciones que ese menu tiene ( ya que "pu
      *PFM* tener privilegio para una de las opciones de ese menu, y en
      *PFM* que no tenga no importa, ya que se validara privilegio al in
      *PFM* llamar a la opcion ).
               MOVE "GI"                TO UYP-COD-TDPU.
               MOVE SPACES              TO UYP-COD-PREG.
               IF MNU-COD-SIST IN MNU = TSC-SIST OR
                  MNU-COD-SIST IN MNU NOT > SPACES
                   MOVE TSC-SIST            TO UYP-COD-SIST
                   MOVE MNU-COD-NEMO IN MNU TO UYP-COD-NEMO
                   IF MNU-COD-TFUN IN MNU = "MEN"
                       MOVE "S" TO UYP-IND-RESP
                       GO TO CON-BUS-FUNC
                   ELSE
                       MOVE UYP-CON-NEMO TO WSS-COD-TCON
               ELSE
                   MOVE UYP-CON-SIST TO WSS-COD-TCON
                   MOVE MNU-COD-SIST IN MNU TO UYP-COD-SIST.
      *PFM     MOVE "GNSPPPRV" TO SYS-PROG.
      *PFM     MOVE UYP-VARI   TO SYS-CMMA.
      *PFM     MOVE +47        TO SYS-TCMA.
      *PFM     MOVE SYS-LINK   TO SYS-CMND.
               IF WSS-IND-USSP = "S"
                   MOVE "S" TO UYP-IND-RESP
               ELSE
      *            DISPLAY "PRV-XY INVOCA CAL-PRV 4"
                   PERFORM CAL-PRV.
      *PFM* FIN-PRV
       CON-BUS-FUNC.
      *PFM     IF MNU-NUM-FILA < 3 OR MNU-NUM-FILA > 22
      *PFM         MOVE "GNS" TO MSG-COD-SIST
      *PFM         MOVE "MNUFILAINV" TO MSG-COD-MENS
      *PFM         PERFORM GET-MSG
      *PFM         MOVE MSG-GLS-DESC TO FRM-MENS
      *PFM         MOVE 1 TO WSS-STAT
      *PFM         GO TO FIN-BUS-FUNC.
      *PFM     SUBTRACT 2 FROM MNU-NUM-FILA.
      *PFM     IF MNU-NUM-COLU = 1
      *PFM          MOVE "0" TO WSS-IFRM
      *PFM          MULTIPLY MNU-NUM-FILA BY 2 GIVING I
      *PFM          SUBTRACT 1 FROM I
      *PFM          MOVE MNU-COD-OPCI TO OPC-COD-OPCI( I )
      *PFM          MOVE MNU-GLS-FMEN TO OPC-GLS-FMEN( I )
      *PFM*DFHBMASB
      *PFM*         MOVE "8" TO OPC-COD-OPCI-ATR( I )
      *PFM     ELSE
      *PFM     IF MNU-NUM-COLU = 41
      *PFM          MOVE "0" TO WSS-IFRM
      *PFM          MULTIPLY MNU-NUM-FILA BY 2 GIVING I
      *PFM          MOVE MNU-COD-OPCI TO OPC-COD-OPCI( I )
      *PFM          MOVE MNU-GLS-FMEN TO OPC-GLS-FMEN( I )
      *PFM*DFHBMASB
      *PFM*         MOVE "8" TO OPC-COD-OPCI-ATR( I )
      *PFM     ELSE
      *PFM     IF MNU-NUM-COLU = 24
      *PFM          MOVE "1" TO WSS-IFRM
      *PFM          MOVE MNU-COD-OPCI TO OP1-COD-OPCI(MNU-NUM-FILA)
      *PFM          MOVE MNU-GLS-FMEN TO OP1-GLS-FMEN(MNU-NUM-FILA)
      *PFM*DFHBMASB
      *PFM*         MOVE "8" TO OP1-COD-OPCI-ATR(MNU-NUM-FILA)
      *PFM     ELSE
      *PFM         MOVE "GNS" TO MSG-COD-SIST
      *PFM         MOVE "MNUCOLUINV" TO MSG-COD-MENS
      *PFM         PERFORM GET-MSG
      *PFM         MOVE MSG-GLS-DESC TO FRM-MENS
      *PFM         MOVE 1 TO WSS-STAT
      *PFM         GO TO FIN-BUS-FUNC.
      *PFM     IF WSS-IFRM = 0
      *PFM         MOVE "0" TO OPC-COD-OPCI-ATR( I )
      *PFM         IF UYP-IND-RESP = "S"
      *PFM             MOVE WSS-ATR-BOLD  TO
      *PFM                  WSS-ATR-RC2-ELM IN WSS-ATR-RC2( I )
      *PFM         ELSE
      *PFM             MOVE WSS-ATR-TENU TO
      *PFM                  WSS-ATR-RC2-ELM IN WSS-ATR-RC2( I )
      *PFM     ELSE
      *PFM     IF WSS-IFRM = 1
      *PFM         MOVE "0" TO OP1-COD-OPCI-ATR(MNU-NUM-FILA)
      *PFM         IF UYP-IND-RESP = "S"
      *PFM             MOVE WSS-ATR-BOLD  TO
      *PFM                  WSS-ATR-RC1-ELM IN WSS-ATR-RC1( MNU-NUM-FILA
      *PFM         ELSE
      *PFM             MOVE WSS-ATR-TENU TO
      *PFM                  WSS-ATR-RC1-ELM IN WSS-ATR-RC1( MNU-NUM-FILA
      *PFM NXT-BUS-FUNC.
      *PFM     MOVE FIO-GET-NXT     TO FIO-CMND.
      *PFM     MOVE "MNU-COD-IMEN"  TO FIO-AKEY.
      *PFM     PERFORM VID-MNU.
       FIN-BUS-FUNC.
           EXIT.
      ******************************************************************
       BUS-CRPF SECTION.
       INI-BUS-CRPF.
      *ISP 27-11-97
           MOVE SPACES TO CMN-IDX-CCMN.
      *    DISPLAY "GNSPPMDP : EN BUS-CRPF".
      *    IF WSS-DSP-SEC = "S"
      *            AND
      *       WSS-DSP-BUS-CRPF = "S"
      *            MOVE "N" TO WSS-DSP-BUS-CRPF
      *         MOVE "BUS-CRPF " TO WSS-GLS-MDSP
      *          PERFORM DSP-MDSP.
           MOVE 0 TO WSS-IND-CMND.
           MOVE MNU-GLS-PROG TO WSS-SIST.
           IF WSS-SIST NOT = "GNS"
               MOVE MNU-COD-SIST TO WSS-SIST.
           MOVE SPACES       TO WSS-AUX-CRPF.
      *
           IF MNU-GLS-PROG NOT > SPACES
                MOVE "GNSPPMDP" TO WSS-AUX-CMNP
                PERFORM BUS-PRMC
                GO TO FIN-BUS-CRPF.
      *
           MOVE MNU-GLS-PROG TO RPF-KEY-DPRO.
           MOVE "C "         TO RPF-KEY-TRYC.
           MOVE SPACES       TO RPF-KEY-DARC.
           MOVE FIO-GET-KEY TO FIO-CMND.
           PERFORM VID-RPF.
           IF NOT FIO-STAT-OKS
                MOVE "GNSPPMDP" TO WSS-AUX-CMNP
                PERFORM BUS-PRMC
                GO TO FIN-BUS-CRPF.
           IF RPF-GLS-PRMT NOT > SPACES
               PERFORM BUS-PRMC
           ELSE
           IF RPF-GLS-PRMT NOT = "NOMSG"
               MOVE RPF-GLS-PRMT TO WSS-AUX-PRMC
           ELSE
               MOVE SPACES TO WSS-AUX-PRMC.
           IF RPF-GLS-UARC NOT > SPACES
                MOVE "GNSPPMDP" TO WSS-AUX-CMNP
           ELSE
                MOVE RPF-GLS-UARC TO WSS-AUX-CMNP.
           MOVE MNU-GLS-PROG TO RPF-KEY-DPRO.
           MOVE "C0"         TO RPF-KEY-TRYC.
           MOVE FIO-GET-NLS  TO FIO-CMND.
           PERFORM VID-RPF.
           IF NOT FIO-STAT-OKS
                 GO TO FIN-BUS-CRPF.
           PERFORM LEE-CRPF.
           MOVE FIO-END-BRW TO FIO-CMND.
           PERFORM VID-RPF.
           PERFORM BUS-GLOS VARYING I FROM 1 BY 1 UNTIL I > 10.
      * INI-PRV
           PERFORM CHK-PRV-CMND.
      * FIN-PRV
       FIN-BUS-CRPF.
           EXIT.
       LEE-CRPF SECTION.
       INI-LEE-CRPF.
           IF WSS-DSP-SEC = "S"
                  AND
             WSS-DSP-LEE-CRPF = "S"
                  MOVE "N" TO WSS-DSP-LEE-CRPF
               MOVE "LEE-CRPF " TO WSS-GLS-MDSP
                PERFORM DSP-MDSP.
           IF NOT ( FIO-STAT-OKS AND RPF-KEY-DPRO = MNU-GLS-PROG AND
                                     RPF-KEY-TREG = "C" )
                   GO TO FIN-LEE-CRPF.
           IF MNU-COD-CMND IN MNU > SPACES AND
              MNU-COD-CMND = RPF-COD-CCMN
               MOVE MNU-COD-CMND TO WSS-AUX-CMND
               MOVE 1            TO WSS-IND-CMND.
           MOVE RPF-KEY-CORR TO I.
           ADD 1 I GIVING K.
      *    DISPLAY "GNSPPMDP : PROG-CMND " MNU-GLS-PROG RPF-COD-CCMN.
           MOVE RPF-COD-CCMN TO WSS-COD-CMND( K )
           MOVE RPF-COD-CCPP TO WSS-COD-CCPP( K )
           MOVE RPF-IND-STPP TO WSS-IND-STPP( K )
           MOVE RPF-GLS-PRMT TO WSS-GLS-PRMT( K )
           MOVE RPF-GLS-CONF TO WSS-GLS-CONF( K )
           MOVE RPF-GLS-UARC TO WSS-GLS-UARC( K )
           MOVE FIO-GET-NXT TO FIO-CMND.
           PERFORM VID-RPF.
           GO TO INI-LEE-CRPF.
       FIN-LEE-CRPF.
           EXIT.
       BUS-MGKY SECTION.
       INI-BUS-MGKY.
           IF WSS-DSP-SEC = "S"
                MOVE "BUS-MGKY " TO WSS-GLS-MDSP
                PERFORM DSP-MDSP.
           MOVE "MSGKEY" TO MSG-COD-MENS.
           MOVE "GNS"    TO MSG-COD-SIST.
           PERFORM GET-MSG.
      *    MOVE MSG-GLS-DESC TO SCR-MGKY.
       FIN-BUS-MGKY.
           EXIT.
       BUS-PRMC SECTION.
       INI-BUS-PRMC.
           IF WSS-DSP-SEC = "S"
                MOVE "BUS-PRMC " TO WSS-GLS-MDSP
                PERFORM DSP-MDSP.
           MOVE "PRMPGI" TO MSG-COD-MENS.
           MOVE "GNS"    TO MSG-COD-SIST.
           PERFORM GET-MSG.
      *INI-GET-MSG-PRUE.
      *    MOVE SCR-SIST TO FIO-SIST.
      *    MOVE FIO-GET-KEY TO FIO-CMND.
           MOVE MSG-GLS-DESC TO WSS-AUX-PRMC.
       FIN-BUS-PRMC.
           EXIT.
       BUS-GLOS SECTION.
       INI-BUS-GLOS.
           IF WSS-DSP-SEC = "S"
                  AND
             WSS-DSP-BUS-GLOS = "S"
                  MOVE "N" TO WSS-DSP-BUS-GLOS
                MOVE "BUS-GLOS " TO WSS-GLS-MDSP
                PERFORM DSP-MDSP.
           IF WSS-COD-CMND( I ) NOT > SPACES
               GO TO FIN-BUS-GLOS.
           IF WSS-GLS-PRMT( I ) NOT > SPACES
               MOVE SPACES TO WSS-COD-MENS
               IF WSS-GLS-UARC( I ) NOT > SPACES
                   MOVE "GNS"             TO MSG-COD-SIST
                   MOVE "FLD"             TO WSS-COD-TMN1
                   MOVE WSS-COD-CCPP( I ) TO WSS-COD-TMN2
                   MOVE WSS-COD-MENS      TO MSG-COD-MENS
                   PERFORM GET-MSG
                   MOVE MSG-GLS-DESC TO WSS-GLS-PRMT( I )
               ELSE
                   MOVE "GNS"             TO MSG-COD-SIST
                   MOVE "SUB"             TO WSS-COD-TMN1
                   MOVE WSS-COD-CCPP( I ) TO WSS-COD-TMN2
                   MOVE WSS-COD-MENS      TO MSG-COD-MENS
                   PERFORM GET-MSG
                   MOVE MSG-GLS-DESC TO WSS-GLS-PRMT( I )
           ELSE
           IF WSS-GLS-PRMT( I ) = "NOMSG"
               MOVE SPACES TO WSS-GLS-PRMT( I ).
           IF WSS-GLS-CONF( I ) NOT > SPACES
               MOVE SPACES TO WSS-COD-MENS
               MOVE "GNS"             TO MSG-COD-SIST
               MOVE "CNF"             TO WSS-COD-TMN1
               MOVE WSS-COD-CCPP( I ) TO WSS-COD-TMN2
               MOVE WSS-COD-MENS      TO MSG-COD-MENS
               PERFORM GET-MSG
               MOVE MSG-GLS-DESC TO WSS-GLS-CONF( I )
           ELSE
           IF WSS-GLS-CONF( I ) = "NOMSG"
               MOVE SPACES TO WSS-GLS-CONF( I ).
       FIN-BUS-GLOS.
           EXIT.
      ******************************************************************
       VID-MNU SECTION.
       INI-VID-MNU.
           IF WSS-DSP-SEC = "S"
                  AND
             WSS-DSP-VID-MNU = "S"
                  MOVE "N" TO WSS-DSP-VID-MNU
                MOVE "VID-MNU " TO WSS-GLS-MDSP
                PERFORM DSP-MDSP.
           MOVE TSC-SIST TO FIO-SIST.
           PERFORM GNS-FIO-MNU.
       FIN-VID-MNU.
           EXIT.
      
       VID-RPF SECTION.
       INI-VID-RPF.
           IF WSS-DSP-SEC = "S"
                  AND
             WSS-DSP-VID-RPF = "S"
                  MOVE "N" TO WSS-DSP-VID-RPF
               MOVE "VID-RPF " TO WSS-GLS-MDSP
                PERFORM DSP-MDSP.
           MOVE WSS-SIST TO FIO-SIST.
           PERFORM GNS-FIO-RPF.
       FIN-VID-RPF.
           EXIT.
      ******************************************************************
      
       PUT-MHDR SECTION.
       INI-PUT-MHDR.
      *XFM IF WSS-DSP-SEC = "S"
      *XFM        AND
      *XFM   WSS-DSP-PUT-MHDR = "S"
      *XFM        MOVE "N" TO WSS-DSP-PUT-MHDR
      *XFM      MOVE "PUT-MHDR " TO WSS-GLS-MDSP
      *XFM      PERFORM DSP-MDSP.
      *XFM IF TSC-TFUN = "XMC" OR "XMX"
      *XFM     MOVE 1 TO FRM-PLIN
      *XFM     MOVE 0 TO FRM-NLIN
      *XFM     MOVE FRM-CLR-FRM TO FRM-CMND
      *XFM     PERFORM GNS-PRO-FRM
      *XFM     GO TO FIN-PUT-MHDR.
           PERFORM GNSSCRHDR.
           MOVE "GNSFHDR"     TO FRM-NAME.
           MOVE "GNSAHDR"     TO FRM-NLIB.
      *XFM MOVE HDR-FLD       TO FRM-DFLD.
      *     MOVE FRM-SINI-DB1F TO FRM-SINI.
      *XFM MOVE FRM-INI       TO FRM-CMND.
       FIN-PUT-MHDR.
           EXIT.
      
       GNSSCRHDR SECTION.
       INI-GNSSCRHDR.
           MOVE SPACES       TO HEA-DOBL.
           MOVE MNU-GLS-FPRO TO HEA-SIMP.
           PERFORM HDR-TITU.
      
           MOVE HEA-DOBL     TO RC1-HDR-GLS-FPRO.
           MOVE HEA-DOBL     TO RC2-HDR-GLS-FPRO.
           MOVE HEA-DOBL     TO WFH-HDR-GLS-FPRO.
      
           MOVE TSC-SIST     TO RC1-HDR-COD-SIST.
           MOVE TSC-SIST     TO RC2-HDR-COD-SIST.
           MOVE TSC-SIST     TO WFH-HDR-COD-SIST.
      
           MOVE MNU-COD-OPCI TO RC1-HDR-GLS-NFRM.
           MOVE MNU-COD-OPCI TO RC2-HDR-GLS-NFRM.
           MOVE MNU-COD-OPCI TO WFH-HDR-GLS-NFRM.
      
           MOVE HOY-DHOY TO WFH-HDR-NUM-DMSA.
           MOVE HOY-MHOY TO WFH-HDR-NUM-MMSA.
           MOVE HOY-SHOY TO WFH-HDR-NUM-SMSA.
           MOVE HOY-AHOY TO WFH-HDR-NUM-AMSA.
      
           IF TSC-SIST = "GNS"
               MOVE TSC-SISG TO HDR-COD-FUNC
           ELSE
               MOVE SPACES TO HDR-COD-FUNC.
      
      *JSS MOVE EIBTRMID TO HDR-GLS-TRMI.
      *JSS-IBM MOVE SPACES TO HDR-GLS-HORA.
      *     MOVE SPACES TO HDR-GLS-GLS1
      *                    HDR-GLS-GLS2
      *                    HDR-GLS-GLS3.
       FIN-GNSSCRHDR.
           EXIT.
      
       HDR-TITU SECTION.
       INI-HDR-TITU.
      *     IF WSS-DSP-SEC = "S"
      *          MOVE "HDR-TITU " TO WSS-GLS-MDSP
      *          PERFORM DSP-MDSP.
           IF HEA-SIMP = SPACES
                      GO TO FIN-HDR-TITU.
           PERFORM BUS-LIMI VARYING IMIN FROM 1 BY 1
                      UNTIL HEA-GLS-SIMP(IMIN) NOT = SPACES.
           PERFORM BUS-LIMI VARYING IMAX FROM 31 BY -1
                      UNTIL HEA-GLS-SIMP(IMAX) NOT = SPACES.
           IF MNU-IND-EXGL IN MNU = "N"
               COMPUTE L = ( 61 - ( IMAX - IMIN + 1 ) ) / 2
               MOVE 1 TO I
           ELSE
               COMPUTE
                  L = ( 61 - ( 2 * ( IMAX - IMIN + 1 ) - 1 ) ) / 2 + 1
               MOVE 2 TO I.
           PERFORM PUT-TITU
                   VARYING K FROM IMIN BY 1 UNTIL K > IMAX.
       FIN-HDR-TITU.
           EXIT.
      
       BUS-LIMI SECTION.
       INI-BUS-LIMI.
      *     IF WSS-DSP-SEC = "S"
      *            AND
      *       WSS-DSP-BUS-LIMI = "S"
      *            MOVE "N" TO WSS-DSP-BUS-LIMI
      *          MOVE "BUS-LIMI " TO WSS-GLS-MDSP
      *          PERFORM DSP-MDSP.
       FIN-BUS-LIMI.
           EXIT.
      
       PUT-TITU SECTION.
       INI-PUT-TITU.
      *     IF WSS-DSP-SEC = "S"
      *            AND
      *       WSS-DSP-PUT-TITU = "S"
      *            MOVE "N" TO WSS-DSP-PUT-TITU
      *          MOVE "PUT-TITU " TO WSS-GLS-MDSP
      *          PERFORM DSP-MDSP.
           MOVE HEA-GLS-SIMP( K ) TO HEA-GLS-DOBL( L ).
           ADD I TO L.
       FIN-PUT-TITU.
           EXIT.
      ******************************************************************
       PUT-MSCR SECTION.
       INI-PUT-MSCR.
      *XFM DISPLAY "PFM: EN PUT-MSCR".
      *     IF WSS-DSP-SEC = "S"
      *          MOVE "PUT-MSCR " TO WSS-GLS-MDSP
      *          PERFORM DSP-MDSP.
           IF TSC-NMAP NOT > SPACES AND TSC-NLIB NOT > SPACES
               IF WSS-IFRM = "0"
                   MOVE "GNSFOPC" TO TSC-NMAP
                   MOVE "GNSAOPC" TO TSC-NLIB
               ELSE
                   MOVE "GNSFOP1" TO TSC-NMAP
                   MOVE "GNSAOP1" TO TSC-NLIB.
           IF TSC-NMAP NOT > SPACES
               MOVE TSC-NLIB TO TSC-NMAP.
           IF TSC-NLIB NOT > SPACES
               MOVE TSC-NMAP TO TSC-NLIB.
           MOVE TSC-NMAP TO FRM-NAME.
           MOVE TSC-NLIB TO FRM-NLIB.
      *     IF WSS-IFRM = "0"
      *         MOVE OPC-FLD TO FRM-DFLD
      *     ELSE
      *         MOVE OP1-FLD TO FRM-DFLD.
      
           MOVE ZEROES TO MEM-IDX-MENU.
      *XFM DISPLAY "PFM: BUSCARA MENU CON STRING : " WSSM-MNU-COD-NEMS.
       CIC-PUT-MSCR.
      
           ADD 1 TO MEM-IDX-MENU.
           IF MEM-IDX-MENU > 20
               DISPLAY
                    "================== ERROR ==================="
               DISPLAY
                   " MENU NO ENCONTRADO "
               DISPLAY " MNU-COD-NEMS      : " MNU-COD-NEMS IN MNU
               DISPLAY " WSSM-MNU-COD-NEMS : " WSSM-MNU-COD-NEMS
               DISPLAY
                   "================= ABORTO =================="
               PERFORM DSP-MEN-EN-MATR VARYING WSS-MEN-EN-MATR-IDX FROM
                       1 BY 1 UNTIL WSS-MEN-EN-MATR-IDX > 20
               STOP RUN.
      
           IF MEM-MATR-IDX-NEMS IN MEM-MATR(MEM-IDX-MENU) NOT =
              WSSM-MNU-COD-NEMS
                GO TO CIC-PUT-MSCR.
      
      *XFM  DISPLAY "PFM: CORRELATIVO MENU MEM-IDX-MENU : "
      *XFM                              MEM-IDX-MENU.
      
      
      *RRM-INI 30-OCT-2000
      
      *    MOVE MEM-MENU-ELM IN MEM-MENU(MEM-IDX-MENU) TO
      *             FRM-DFLD.
      
      *    MOVE MEM-MENU-ELM IN MEM-MENU(MEM-IDX-MENU) TO
      *             RC2-FLD.
      
           MOVE MEM-MATR-IDX-SISF IN MEM-MATR(MEM-IDX-MENU) TO
                WSS-COD-SIST IN WSS-COD-IMEN.
           MOVE MEM-MATR-IDX-CMEN IN MEM-MATR(MEM-IDX-MENU) TO
                WSS-COD-CMEN IN WSS-COD-IMEN.
           MOVE WSS-COD-IMEN TO QUE-TERM.
           MOVE SPACES       TO QUE-TYPE.
           MOVE 1            TO QUE-NITM.
      
           MOVE QUE-GET      TO QUE-CMND.
           PERFORM GNS-PRO-QUE.
      
           IF QUE-STAT = QUE-STAT-OKS
               MOVE QUE-DATA     TO RC2-FLD
                                    FRM-DFLD
               MOVE RC2-HDR-GLS-FPRO IN RC2-FLD
                                 TO WSS-OCC-MEN-2 IN WSS-DSPL-OCC-MEN
           ELSE
               DISPLAY "RRM:  MENU NO LEIDO".
      
      *RRM-FIN 30-OCT-2000
      
      
      
      *    DISPLAY "MENU: " MEM-MATR-IDX-NEMS IN MEM-MATR(MEM-IDX-MENU).
      *    DISPLAY "TOTO: " MEM-MATR-TOT-OPCI(MEM-IDX-MENU).
      *    DISPLAY "SIST: " MEM-MATR-IDX-SISF IN MEM-MATR(MEM-IDX-MENU).
      
           MOVE MEM-MATR-TOT-OPCI(MEM-IDX-MENU) TO MEM-TOPC-EN-MENU.
      
           IF UYS-USER NOT = WSS-COD-USSP
               PERFORM DET-PRV-MEM VARYING MEM-IDX-PRIV FROM 1
                  BY 1 UNTIL MEM-IDX-PRIV > MEM-TOPC-EN-MENU.
           MOVE "S" TO  WSS-PRV-CRG-PDP.
           MOVE RC2-FLD TO FRM-DFLD.
      
      *XFM MOVE "CMPTA OK " TO WSS-AUXI-D1.
      
      *XFM DISPLAY "PFM: DESPLEGANDO CARACTERES HDR".
      *XFM MOVE RC1-FLD TO DPP-RC1.
      *XFM PERFORM DISPLA-RC1 VARYING WSS-IDX-AUXI-0 FROM 1
      *XFM      BY 1 UNTIL WSS-IDX-AUXI-0 > 140.
      
      *XFM DISPLAY "PFM: CMPTA OK DESPLEGANDO OPCIONES MENU PRINCIPAL".
      *XFM PERFORM DSPP-RC1 VARYING WSS-IDX-AUXI-0 FROM
      *XFM    1 BY 1 UNTIL WSS-IDX-AUXI-0 > 7.
      
      
      *XFM MOVE RE1-RC1-FLD-ELM(8) TO DPP-RC1.
      *XFM DISPLAY "PFM: DESPLEGANDO CARACTERES TRL-1 8".
      *XFM PERFORM DISPLA-RC1 VARYING WSS-IDX-AUXI-0 FROM 1
      *XFM      BY 1 UNTIL WSS-IDX-AUXI-0 > 46.
      
      *XFM MOVE RE1-RC1-FLD-ELM(9) TO DPP-RC1.
      *XFM DISPLAY "PFM: DESPLEGANDO CARACTERES TRL-2 9".
      *XFM PERFORM DISPLA-RC1 VARYING WSS-IDX-AUXI-0 FROM 1
      *XFM      BY 1 UNTIL WSS-IDX-AUXI-0 > 46.
      
      *XFM MOVE RE1-RC1-FLD-ELM(10) TO DPP-RC1.
      *XFM DISPLAY "PFM: DESPLEGANDO CARACTERES TRL-3 10".
      *XFM PERFORM DISPLA-RC1 VARYING WSS-IDX-AUXI-0 FROM 1
      *XFM      BY 1 UNTIL WSS-IDX-AUXI-0 > 46.
      
      *XFM MOVE RE1-RC1-FLD-ELM(11) TO DPP-RC1.
      *XFM DISPLAY "PFM: DESPLEGANDO CARACTERES TRL-4 11".
      *XFM PERFORM DISPLA-RC1 VARYING WSS-IDX-AUXI-0 FROM 1
      *XFM      BY 1 UNTIL WSS-IDX-AUXI-0 > 46.
      
      *XFM MOVE RE1-RC1-FLD-ELM(12) TO DPP-RC1.
      *XFM DISPLAY "PFM: DESPLEGANDO CARACTERES TRL-5 12".
      *XFM PERFORM DISPLA-RC1 VARYING WSS-IDX-AUXI-0 FROM 1
      *XFM      BY 1 UNTIL WSS-IDX-AUXI-0 > 46.
      
      *XFM MOVE RE1-RC1-FLD-ELM(13) TO DPP-RC1.
      *XFM DISPLAY "PFM: DESPLEGANDO CARACTERES TRL-6 13".
      *XFM PERFORM DISPLA-RC1 VARYING WSS-IDX-AUXI-0 FROM 1
      *XFM      BY 1 UNTIL WSS-IDX-AUXI-0 > 46.
      
      
      *    MOVE FRM-SINI-DBNF TO FRM-SINI.
      *     IF TSC-TFUN = "MEN"
      *         MOVE FRM-SINI-DBNF TO FRM-SINI
      *     ELSE
      *         MOVE FRM-SINI-DBLF TO FRM-SINI.
      *
      *     MOVE FRM-INI       TO FRM-CMND.
       FIN-PUT-MSCR.
           EXIT.
      
       DSP-MEN-EN-MATR SECTION.
       INI-DSP-MEN-EN-MATR.
           DISPLAY "MENU : CORRELATIVO ==> " WSS-MEN-EN-MATR-IDX
              " ELEMENTO ==> " MEM-MATR-IDX-NEMS IN
                MEM-MATR(WSS-MEN-EN-MATR-IDX).
       FIN-DSP-MEN-EN-MATR.
           EXIT.
      
       DET-PRV-MEM SECTION.
       INI-DET-PRV-MEM.
      *    DISPLAY "DETECTANDO PRIVILEGIOS ".
      *    DISPLAY "TFUN : "
      *       MATR-OPCI-TFUN IN MATR-OPCI(MEM-IDX-MENU, MEM-IDX-PRIV ).
      *    DISPLAY "NEMO : " MATR-OPCI-NEMO IN
      *       MATR-OPCI(MEM-IDX-MENU, MEM-IDX-PRIV )
      *    DISPLAY "USER : " TSC-USER.
      *    DISPLAY "SISTC: "
      *         MEM-MATR-IDX-SISF IN MEM-MATR(MEM-IDX-MENU).
      
      * REVISA PRIVILEGIOS PARA OPCIONES NO MENU Y
      * MENU QUE SON SISTEMA
           IF MATR-OPCI-TFUN IN MATR-OPCI(MEM-IDX-MENU, MEM-IDX-PRIV )
                        = "MEN"
                          AND
              MATR-OPCI-SIST IN MATR-OPCI(MEM-IDX-MENU, MEM-IDX-PRIV )
                        NOT > SPACES
                MOVE "S" TO UYP-IND-RESP
           ELSE
           IF WSS-IND-USSP = "S"
                MOVE "S" TO UYP-IND-RESP
           ELSE
                MOVE TSC-USER TO PRV-USER-CODE
      
      *ADC      MOVE MEM-MATR-IDX-SISF IN MEM-MATR(MEM-IDX-MENU)
      *ADC             TO PRV-SISTEMA
      *ADC      MOVE MATR-OPCI-NEMO IN
      *ADC           MATR-OPCI(MEM-IDX-MENU, MEM-IDX-PRIV )
      *ADC           TO PRV-COD-OPCI
      *ADC      MOVE SPACES                TO PRV-COMANDO
                MOVE "GI"     TO UYP-COD-TDPU
                MOVE SPACES   TO UYP-COD-PREG
                MOVE MEM-MATR-IDX-SISF IN MEM-MATR(MEM-IDX-MENU)
                      TO UYP-COD-SIST
                MOVE MATR-OPCI-NEMO IN
                     MATR-OPCI(MEM-IDX-MENU, MEM-IDX-PRIV )
                     TO UYP-COD-NEMO
                MOVE SPACES TO UYP-COD-CMND
                MOVE UYP-CON-NEMO TO WSS-COD-TCON
      
                PERFORM DET-TCON-OPC
      
                IF WSS-IND-USSP = "S"
                    MOVE "S" TO UYP-IND-RESP
                ELSE
      *             DISPLAY "PRV-XY INVOCA CAL-PRV 5"
                    PERFORM CAL-PRV
                    MOVE "N" TO  WSS-PRV-CRG-PDP
      *ADC      CALL "PRM_NEMO OF GNS/EXE/GNSPPPRM"
      *ADC            USING PRV-PARAM GIVING PRV-RESULT
      *ADC
      *ADC      IF NOT PRV-RESULT-OK
                IF UYP-IND-RESP = "N"
      *ADC           MOVE "N" TO UYP-IND-RESP
      *ADC           DISPLAY "PRV BAD " PRV-PARAM
      *ISP 06-01-1998 GNSPPPRM NO DETECTA CORRECTAMENTE PRV PARA NEMO
                     MOVE WSS-ATR-TENU TO RE1-RC2-OP1-ATI-OPCI
                          IN RE1-RC2-FLD(MEM-IDX-PRIV ).
      *ADC       ELSE
      *ADC           DISPLAY "PRV OKS " PRV-PARAM
      *ADC           MOVE "S" TO UYP-IND-RESP.
       FIN-DET-PRV-MEM.
           EXIT.
      
       DET-TCON-OPC SECTION.
       INI-DET-TCON-OPC.
           IF MATR-OPCI-SIST IN MATR-OPCI(MEM-IDX-MENU, MEM-IDX-PRIV )
                        > SPACES
                MOVE
              MATR-OPCI-SIST IN MATR-OPCI(MEM-IDX-MENU, MEM-IDX-PRIV )
                TO UYP-COD-SIST
                MOVE SPACES TO UYP-COD-NEMO
                MOVE UYP-CON-SIST TO WSS-COD-TCON.
       FIN-DET-TCON-OPC.
          EXIT.
      
      ******************************************************************
       HBL-CMN SECTION.
       INI-HBL-CMN.
      *XFM DISPLAY "PFM: EN HBL-CMN".
      *     IF WSS-DSP-SEC = "S"
      *          MOVE "HBL-CMN " TO WSS-GLS-MDSP
      *          PERFORM DSP-MDSP.
      *     IF WSS-CCOD-APCT OR WSS-CCOD-ABM0
      *         MOVE "GNS"     TO MSG-COD-SIST
      *         MOVE "CICABND" TO MSG-COD-TMSG
      *         MOVE WSS-CCOD  TO MSG-COD-CMSG
      *         PERFORM GET-MSG
      *         MOVE MSG-GLS-DESC IN MSG TO TRL-GLS-MENS IN TRL-FLD.
      *     IF TSC-TFUN = "HMX" OR "XMX"
      *         MOVE LOW-VALUES TO TRL-GLS-TERM IN TRL-FLD
      *         MOVE LOW-VALUES TO TRL-COD-CMND IN TRL-FLD
      *         MOVE LOW-VALUES TO TRL-GLS-PRMT IN TRL-FLD
      *         MOVE LOW-VALUES TO TRL-COD-CACC IN TRL-FLD
      *         GO TO CON-HBL-CMN.
           PERFORM PUT-CMND VARYING CMN-K FROM 1 BY 1 UNTIL CMN-K > 10.
      
      *    DISPLAY "DESP CMND DISPON TSC TFUN : " TSC-TFUN.
           IF TSC-TFUN = "MEN"
               MOVE WSS-PFSMEN TO TRL-GLS-TERM
           ELSE
               MOVE WSS-PFSCMN TO TRL-GLS-TERM.
      
           MOVE CMN-IDX-CCMN TO TRL-COD-CMND.
      *    DISPLAY "GNSPPMDP : CMND " TSC-NEMO " : "  CMN-IDX-CCMN.
           MOVE CMN-IDX-CCMN TO TSC-TRL-COD-CMND-ALL.
      
           MOVE TSC-PRMC     TO TRL-GLS-PRMT.
           MOVE SPACES       TO TRL-COD-CACC.
       CON-HBL-CMN.
           MOVE FRM-CPIM-UBY TO TRL-COD-CACC-ATR.
           MOVE -1           TO TRL-COD-CACC-LEN.
           PERFORM CMN-PUTA.
           PERFORM CMN-EXIT.
       FIN-HBL-CMN.
           EXIT.
      
       PUT-CMND SECTION.
       INI-PUT-CMND.
      *     IF WSS-DSP-SEC = "S"
      *            AND
      *       WSS-DSP-PUT-CMND = "S"
      *            MOVE "N" TO WSS-DSP-PUT-CMND
      *          MOVE "PUT-CMND " TO WSS-GLS-MDSP
      *          PERFORM DSP-MDSP.
           MOVE TSC-CCMN ( CMN-K ) TO CMN-COD-CCMN ( CMN-K ).
       FIN-PUT-CMND.
             EXIT.
      ******************************************************************
       CMN-PUTA SECTION.
       INI-CMN-PUTA.
      *     IF WSS-DSP-SEC = "S"
      *          MOVE "CMN-PUTA " TO WSS-GLS-MDSP
      *          PERFORM DSP-MDSP.
      *     PERFORM MOV-WFH.
            PERFORM MOV-WFT.
           MOVE "GNSFCMN" TO FRM-NAME.
           MOVE "GNSACMN" TO FRM-NLIB.
      *JSS
      *    MOVE FRM-CPIM-AEY TO TRL-GLS-MENS-ATR.
           MOVE FRM-CPSF-AEY TO TRL-GLS-MENS-ATR.
      *
      *XFM DISPLAY "* EN MOVE TRL-FLD".
      *    MOVE TRL-FLD   TO FRM-DFLD.
      *    MOVE "TSC-TFUN " TSC-TFUN.
      *PFM
      *PFM     IF TSC-TFUN = "MEN"
      *PFM         MOVE LOW-VALUES TO FRM-DFLD
      *PFM         IF WSS-IFRM = "0"
      *PFM             PERFORM MOV-RC2
      *PFM             MOVE RC2-FLD TO FRM-DFLD
      *PFM         ELSE
      *PFM             PERFORM MOV-RC1
      *PFM             MOVE RC1-FLD TO FRM-DFLD.
           IF WSS-DFRM-LEYO-MAPA-BD = "S"
      *         PERFORM MOV-HDR-MSK
      *         MOVE WSS-DFRM-DATA TO FRM-DFLD
      *         PERFORM MOV-CAC-ENV
               IF TSC-TFUN = "PIN"
                   MOVE WFF-FLD       TO FRM-DFLD-RED-PTT-HYT
                   MOVE WSS-DFRM-DATA-2 TO FRM-DFLD-RED-PTT-FRM
                   PERFORM MOV-FRM-TSC-HDR
      *PGJ
               ELSE
                   PERFORM MOV-HDR-MSK
                   MOVE WSS-DFRM-DATA TO FRM-DFLD
                   PERFORM MOV-CAC-ENV
      *PGJ
      
                PERFORM MOV-FRM-TSC-HDR
           ELSE
                PERFORM MOV-FRM-TSC-TRL.
           PERFORM MOV-FRM-TSC-TRL.
           MOVE FRM-PUT-ALL TO FRM-CMND.
           PERFORM GNS-PRO-FRM.
       FIN-CMN-PUTA.
           EXIT.
      
       CMN-PUTA-RCT SECTION.
       INI-CMN-PUTA-RCT.
      *SMG IF WSS-DSP-SEC = "S"
      *SMG      MOVE "CMN-PUTA-RCT " TO WSS-GLS-MDSP
      *SMG      PERFORM DSP-MDSP.
           MOVE "GNSFCMN" TO FRM-NAME.
           MOVE "GNSACMN" TO FRM-NLIB.
      *JSS
      *    MOVE FRM-CPIM-AEY TO TRL-GLS-MENS-ATR.
      *SMG MOVE FRM-CPSF-AEY TO TRL-GLS-MENS-ATR.
      *
           PERFORM MOV-WFT.
      *SMG MOVE TRL-FLD   TO FRM-DFLD.
      *    MOVE "TSC-TFUN-RCT " TSC-TFUN.
      *    IF TSC-TFUN = "MEN"
      *SMG     MOVE LOW-VALUES TO FRM-DFLD
      *SMG     PERFORM MOV-RCT
               MOVE FRM-MENS TO RCT-TRL-GLS-MENS
               MOVE "N" TO WSS-DSP-TRC
               MOVE RCT-FLD TO FRM-DFLD.
           PERFORM MOV-FRM-TSC-TRL.
           MOVE FRM-PUT-ALL TO FRM-CMND.
           PERFORM GNS-PRO-FRM.
       FIN-CMN-PUTA-RCT.
           EXIT.
      
       CMN-EXIT SECTION.
       INI-CMN-EXIT.
           IF WSS-DSP-SEC = "S"
                MOVE "CMN-EXIT " TO WSS-GLS-MDSP
                PERFORM DSP-MDSP.
           MOVE "K" TO TSC-ICMN.
      *    SE MUEVE INMEDIATAMENTE LEIDO
      *    MOVE WSS-DFRM-LRCV TO TSC-LRCV.
           PERFORM GNS-PUT-TSC.
           MOVE WSS-GLS-TRAN TO SYS-NTRN.
      *     MOVE "K"      TO SCR-ICMN.
      *     MOVE SCR-VARI TO SYS-CMMA.
      *     MOVE SCR-TCMA TO SYS-TCMA.
           MOVE " " TO SYS-CMMA.
           MOVE +1  TO SYS-TCMA.
      
           MOVE SYS-RTRN TO SYS-CMND.
           PERFORM GNS-PRO-SYS.
       FIN-CMN-EXIT.
           EXIT.
      ******************************************************************
       BUS-CMND SECTION.
       INI-BUS-CMND.
           IF WSS-DSP-SEC = "S"
                  AND
             WSS-DSP-BUS-CMND = "S"
                  MOVE "N" TO WSS-DSP-BUS-CMND
                MOVE "BUS-CMND " TO WSS-GLS-MDSP
                PERFORM DSP-MDSP.
           MOVE "CMD    NEXST" TO MSG-COD-MENS.
           MOVE 1 TO CMN-I.
           SET TSC-ITBL TO 1.
           SEARCH TSC-TABL VARYING CMN-I
                  WHEN TSC-CCMN( TSC-ITBL ) = WSS-OPCI
                         GO TO SET-BUS-CMND.
           GO TO FIN-BUS-CMND.
       SET-BUS-CMND.
           MOVE SPACES TO MSG-COD-MENS.
       FIN-BUS-CMND.
           EXIT.
      
       PUT-DCMN SECTION.
       INI-PUT-DCMN.
           IF WSS-DSP-SEC = "S"
                  AND
             WSS-DSP-PUT-DCMN = "S"
                  MOVE "N" TO WSS-DSP-PUT-DCMN
                MOVE "PUT-DCMN " TO WSS-GLS-MDSP
                PERFORM DSP-MDSP.
           MOVE CMN-I TO TSC-I.
           MOVE TSC-CCMN( TSC-I ) TO TSC-CMND.
      *ESTOS MOVES SE HACEN AL FINAL EN LA "SECTION" CAL-PROG
      *     MOVE TSC-CCMN( TSC-I ) TO SCR-CMND.
      *     MOVE TSC-CCPP( TSC-I ) TO SCR-CCPP.
      *     MOVE TSC-STPP( TSC-I ) TO SCR-STPP.
      *     MOVE TSC-PRMT( TSC-I ) TO SCR-PRMT.
      *     MOVE TSC-CONF( TSC-I ) TO SCR-CONF.
      *     MOVE SCR-INST-HKY          TO SCR-INST.
      *
      *     IF TSC-TFUN = "HMX" OR "XMX"
      *         MOVE LOW-VALUES TO TRL-GLS-TERM IN TRL-FLD
      *         MOVE LOW-VALUES TO TRL-COD-CMND IN TRL-FLD
      *         MOVE LOW-VALUES TO TRL-GLS-PRMT IN TRL-FLD
      *         MOVE LOW-VALUES TO TRL-COD-CACC IN TRL-FLD
      *         MOVE SPACES     TO TRL-GLS-MENS IN TRL-FLD
      *         GO TO CON-PUT-DCMN.
           MOVE SPACES                TO CMN-IDX-CCMN.
           MOVE TSC-CCMN( TSC-I ) TO CMN-COD-CCMN( TSC-I ).
           MOVE CMN-IDX-CCMN          TO TRL-COD-CMND.
           MOVE SPACES                TO TRL-GLS-PRMT TRL-COD-CACC.
      
      * ISP:  17-MAR-1993 07:54:47
           IF TSC-SIST = "GNS" AND
              TSC-SISG > SPACES
                MOVE TSC-SISG TO MSG-COD-SIST
           ELSE
                MOVE TSC-SIST TO MSG-COD-SIST.
           MOVE "%"          TO WSS-COD-MSG1.
           MOVE TSC-PROG     TO WSS-COD-MSG2.
           MOVE TSC-CMND     TO WSS-COD-MSG3.
           MOVE WSS-COD-MSG0 TO MSG-COD-MENS.
           PERFORM GET-MSG.
           IF FIO-STAT-OKS AND MSG-IND-VIGE = "S"
               MOVE MSG-GLS-DESC TO WSS-MEN1
               MOVE MSG-GLS-MENS TO WSS-MEN2
               MOVE WSS-MENS TO TRL-GLS-TERM
           ELSE
               MOVE "GNS"                 TO MSG-COD-SIST
               MOVE SPACES                TO WSS-COD-MENS
               MOVE "PFSPGI"              TO WSS-COD-TMSG
               MOVE TSC-STPP( TSC-I ) TO WSS-COD-TMN3
               MOVE WSS-COD-MENS          TO MSG-COD-MENS
               PERFORM GET-MSG
               MOVE MSG-GLS-DESC TO WSS-MEN1
               MOVE MSG-GLS-MENS TO WSS-MEN2
               MOVE WSS-MENS TO TRL-GLS-TERM.
      *    MOVE SCR-MGKY TO TRL-GLS-MENS.
           PERFORM BUS-MGKY.
           MOVE MSG-GLS-DESC TO TRL-GLS-MENS.
      * ISP:  17-MAR-1993 07:54:47
      
       CON-PUT-DCMN.
      *    MOVE FRM-CPIM-AEY TO TRL-COD-CACC-ATR.
           MOVE FRM-CPSF-AEY TO TRL-COD-CACC-ATR.
           MOVE -1           TO TRL-COD-CACC-LEN.
       FIN-PUT-DCMN.
           EXIT.
       GET-PROV SECTION.
       INI-GET-PROV.
           IF WSS-DSP-SEC = "S"
                MOVE "GET-PROV " TO WSS-GLS-MDSP
                PERFORM DSP-MDSP.
           MOVE SPACES TO TSC-PROV.
           MOVE SPACES TO TSC-NTRV.
           IF NOT ( TSC-TFUN = "PTC" OR
                    TSC-TFUN = "PIN" )
               GO TO FIN-GET-PROV.
           MOVE TSC-PROG     TO RPF-KEY-DPRO.
           MOVE "C "         TO RPF-KEY-TRYC.
           MOVE SPACES       TO RPF-KEY-DARC.
      *
           MOVE TSC-PROG TO FIO-SIST.
           IF FIO-SIST NOT = "GNS"
               MOVE TSC-SIST TO FIO-SIST.
      *
           MOVE FIO-GET-KEY TO FIO-CMND.
           PERFORM GNS-FIO-RPF.
           IF NOT FIO-STAT-OKS
               GO TO FIN-GET-PROV.
           MOVE RPF-GLS-ABRT IN RPF TO WSS-PPPV.
           MOVE WSS-PROV            TO TSC-PROV.
           MOVE WSS-NTRV            TO TSC-NTRV.
       FIN-GET-PROV.
           EXIT.
       GNS-PRO-TSC SECTION.
       INI-GNS-PRO-TSC.
           IF WSS-DSP-SEC = "S"
                MOVE "GNS-PRO-TSC " TO WSS-GLS-MDSP
                PERFORM DSP-MDSP.
           MOVE TSC-TERM TO QUE-TERM.
           MOVE TSC-TYPE TO QUE-TYPE.
           MOVE TSC-LITM TO QUE-LITM.
           MOVE 1        TO QUE-NITM.
      *    IF QUE-CMND = QUE-PUT OR
      *       QUE-CMND = QUE-MOD
      *        MOVE TSC-ITEM TO QUE-ITEM.
           PERFORM GNS-PRO-QUE.
      *    IF QUE-STAT = QUE-STAT-OKS AND
      *       QUE-CMND = QUE-GET
      *        MOVE QUE-ITEM TO TSC-ITEM.
       FIN-GNS-PRO-TSC.
           EXIT.
       GNS-PUT-TSC SECTION.
       INI-GNS-PUT-TSC.
           IF WSS-DSP-SEC = "S"
                MOVE "GNS-PUT-TSC " TO WSS-GLS-MDSP
                PERFORM DSP-MDSP.
           MOVE QUE-GET  TO QUE-CMND.
           PERFORM GNS-PRO-TSC.
           IF QUE-STAT = QUE-STAT-OKS
               MOVE QUE-MOD TO QUE-CMND
           ELSE
               MOVE QUE-PUT TO QUE-CMND.
           MOVE TSC-ITEM TO QUE-ITEM.
           PERFORM GNS-PRO-TSC.
       FIN-GNS-PUT-TSC.
           EXIT.
       GNS-DEL-TSC SECTION.
       INI-GNS-DEL-TSC.
           IF WSS-DSP-SEC = "S"
                MOVE "GNS-DEL-TSC " TO WSS-GLS-MDSP
                PERFORM DSP-MDSP.
           MOVE TSC-TERM TO QUE-TERM.
           MOVE TSC-TYPE TO QUE-TYPE.
           MOVE TSC-LITM TO QUE-LITM.
           MOVE 1        TO QUE-NITM.
           MOVE TSC-ITEM TO QUE-ITEM.
           MOVE QUE-DEL  TO QUE-CMND.
           PERFORM GNS-PRO-QUE.
       FIN-GNS-DEL-TSC.
           EXIT.
       GNS-GET-TSC SECTION.
       INI-GNS-GET-TSC.
           IF WSS-DSP-SEC = "S"
                MOVE "GNS-GET-TSC " TO WSS-GLS-MDSP
                PERFORM DSP-MDSP.
           MOVE EIBTRMID TO TSC-TERM.
      *    MOVE +720     TO TSC-LITM.
           MOVE TSC-TTSC TO TSC-LITM.
      
           MOVE TSC-TERM TO QUE-TERM.
           MOVE TSC-TYPE TO QUE-TYPE.
           MOVE TSC-LITM TO QUE-LITM.
           MOVE 1        TO QUE-NITM.
           MOVE QUE-GET  TO QUE-CMND.
           PERFORM GNS-PRO-QUE.
           IF QUE-STAT = QUE-STAT-OKS
               MOVE QUE-ITEM TO TSC-ITEM
      *        MOVE "GET-TSC OK TSC      #### " TSF
           ELSE
               MOVE "GNS-GET-TSC == > NO OK " TO WSS-GLS-MDSP
                PERFORM DSP-MDSP.
      *ESTE MOVE ES PARA CONTROLAR LA VUELTA DE CONGELAR Y OTRAS
      *SITUACIONES
           IF ( WSS-SEFN = WSS-SXCT-RED ) OR ( WSS-SCOD = "S" OR "SD" )
               MOVE SCR-INST-HCM TO TSC-INST.
      *
           MOVE TSC-SIST TO SCR-SIST.
      * CUANDO UN PGI LLAMA A GNSPPMDP, SE SIMULA COMO SI EL USUARIO
      * ELIGIERA EL PROGRAMA COMO OPCION EN UN MENU
           IF WSS-AUX-TRAN = "RPGM"
               MOVE SCR-INST-GFL TO TSC-INST
               MOVE TSC-SIST     TO WSS-AUX-CACC-SIST
               MOVE TSC-OPCI     TO WSS-AUX-CACC-OPCI
               MOVE WSS-AUX-CACC TO TRL-COD-CACC IN TRL-FLD.
           GO TO FIN-GNS-GET-TSC.
       NEX-GNS-GET-TSC.
           MOVE "NO EXISTE PARA PROCESADOR MENU, TEMP. STORAGE : "
                         TO SYS-MEN1.
           MOVE TSC-COLA TO SYS-MEN2.
           MOVE SYS-ABOR  TO SYS-CMND.
           PERFORM GNS-PRO-SYS.
       FIN-GNS-GET-TSC.
           EXIT.
       GNS-PUT-IDD SECTION.
       INI-GNS-PUT-IDD.
           IF WSS-DSP-SEC = "S"
                MOVE "GNS-PUT-IDD " TO WSS-GLS-MDSP
                PERFORM DSP-MDSP.
       FIN-GNS-PUT-IDD.
           EXIT.
       CAL-PROG SECTION.
       INI-CAL-PROG.
           IF WSS-DSP-SEC = "S"
                MOVE "CAL-PROG " TO WSS-GLS-MDSP
                PERFORM DSP-MDSP.
           IF TSC-CIDD > SPACES
               MOVE TSC-CIDD TO IDD-COD-CIDD IN IDD
                                IFD-COD-CIFD IN IFD
               GO TO CON-CAL-PROG.
           MOVE TSC-PROG     TO RPF-KEY-DPRO.
           MOVE "A "         TO RPF-KEY-TRYC.
           MOVE SPACES       TO RPF-KEY-DARC.
           MOVE FIO-GET-KEY TO FIO-CMND.
           MOVE TSC-PROG TO WSS-SIST.
           IF WSS-SIST NOT = "GNS"
               MOVE TSC-SIST TO WSS-SIST.
           PERFORM VID-RPF.
           IF NOT FIO-STAT-OKS
               MOVE "DEFAULT" TO IDD-COD-CIDD IN IDD
                                 IFD-COD-CIFD IN IFD
           ELSE
           IF RPF-COD-CIFD IN RPF NOT > SPACES
               MOVE "DEFAULT" TO IDD-COD-CIDD IN IDD
                                 IFD-COD-CIFD IN IFD
           ELSE
               MOVE RPF-COD-CIFD IN RPF TO IDD-COD-CIDD IN IDD
                                           IFD-COD-CIFD IN IFD.
           MOVE IDD-COD-CIDD IN IDD TO TSC-CIDD.
       CON-CAL-PROG.
      *IDD
      *EN RIGOR SE DEBERIA PREGUNTAR IF ( TSC-TIND = "T" ==> IDD EN TS )
           MOVE FIO-GET-KEY TO FIO-CMND.
           PERFORM GNS-FIO-IDD.
           IF NOT FIO-STAT-OKS
               PERFORM BUS-FSIS
           ELSE
               MOVE IDD TO IDD-REGI.
           PERFORM GNS-PUT-IDD.
           MOVE WSS-QIDD TO SCR-QIDD.
           MOVE QUE-LITM TO SCR-LIDD.
      *
      *IFD
           IF ( TSC-TIND = "C" ) OR ( TSC-TINF NOT > SPACES )
               MOVE FIO-GET-KEY TO FIO-CMND
               PERFORM GNS-FIO-IFD
               IF NOT FIO-STAT-OKS
                   MOVE "NO EXISTE REGISTRO IFD CON LLAVE :" TO SYS-MEN1
                   MOVE IFD-COD-CIFD IN IFD                  TO SYS-MEN2
                   MOVE SYS-ABOR TO SYS-CMND
                   PERFORM GNS-PRO-SYS
               ELSE
                   MOVE IFD-GLS-DATA IN IFD TO IFD-FSIS.
      *
           IF TSC-UARC( TSC-I ) > SPACES
               MOVE TSC-UARC( TSC-I ) TO AUX-UARC
               MOVE TSC-PROG TO AUX-PROG
               MOVE TSC-NTRN TO AUX-NTRN
               MOVE AUX-PRGM TO TSC-UARC( TSC-I )
               MOVE AUX-RPRG TO TSC-PROG
               MOVE AUX-RTRN TO TSC-NTRN.
           MOVE "P"          TO TSC-ICMN.
           MOVE SCR-INST-HCM TO TSC-INST.
           IF TSC-TFUN = "PIN"
              MOVE SCR-INST-GFL TO TSC-INST.
      
      
           PERFORM GNS-PUT-TSC.
      *SE CARGAN VARIABLES DEPENDIENDO DE TSC-TINF
           IF ( TSC-TINV = "C" ) OR ( TSC-TINF NOT > SPACES )
               PERFORM PRO-MOVE-SCR1
           ELSE
               PERFORM PRO-MOVE-SCR2.
      *GRABA EN TEMPORARY STORAGE, LAS VARIABLES SCR2
           IF TSC-TINV = "T"
               PERFORM PRO-PQTS-SCR2.
           IF ( TSC-TINV = "O" OR "T" ) AND ( EIBCALEN = 29 )
      *JSS-IBM Averigua si existe cola de seteo de llaves EN ESTE CASO
      *SOLO PARA V31 Y PARA ZOOM ( EIBCALEN = 29 )
               PERFORM GNS-ERR-QUE
               MOVE EIBTRMID TO QUE-TERM
               MOVE "KYM"    TO QUE-TYPE
               MOVE 1     TO QUE-NITM
               MOVE +3000 TO QUE-LITM
               MOVE QUE-GET TO QUE-CMND
               PERFORM GNS-PRO-QUE
               IF QUE-STAT = QUE-STAT-OKS
                   MOVE "VSN"       TO TAB-COD-TTAB IN TAB
                   MOVE "RECLLAVES" TO TAB-COD-CTAB IN TAB
                   MOVE "GNS"       TO FIO-SIST
                   MOVE FIO-GET-KEY TO FIO-CMND
                   PERFORM GNS-FIO-TAB
                   IF ( FIO-STAT-OKS AND TAB-MSC-STAT IN TAB = "S" ) OR
                      ( EIBCALEN = 29 )
                       MOVE "GKY" TO OSC-INST SCR-INST
      *SE LLAMA AL PROGRAMA SEGUN TIPO DE TRASPASO DE CONTROL, ANTES
      *SE CARGAN LAS VARIABLES FRM SEGUN CORRESPONDA DEPENDIENDO DE TSC-
                       PERFORM PRO-MOVE-VSYS
                       MOVE "GNSPPPKE" TO SYS-PROG
                   ELSE
                       PERFORM PRO-MOVE-VSYS
               ELSE
                   PERFORM PRO-MOVE-VSYS
           ELSE
               PERFORM PRO-MOVE-VSYS.
      *
           IF TSC-TCTL = "XCTL"
               PERFORM PRO-CALL-XCTL
      *     ELSE
      *     IF TSC-TCTL = "LINK"
      *         PERFORM PRO-CALL-LINK
      *     ELSE
      *     IF TSC-TCTL = "STAR"
      *         PERFORM PRO-CALL-STAR
           ELSE
           IF TSC-TCTL = "RTTR"
               PERFORM PRO-CALL-RTTR
               IF SYS-EXIT-YES
                   GO TO FIN-CAL-PROG
               ELSE
                   NEXT SENTENCE
           ELSE
               PERFORM PRO-CALL-XCTL.
       FIN-CAL-PROG.
           EXIT.
       PRO-MOVE-SCR1 SECTION.
       INI-PRO-MOVE-SCR1.
           IF WSS-DSP-SEC = "S"
                MOVE "PRO-MOVE-SCR1 " TO WSS-GLS-MDSP
                PERFORM DSP-MDSP.
           MOVE +1110              TO OSC-TCMA.
           MOVE TSC-SIST           TO OSC-SIST.
           MOVE TSC-OPCI           TO OSC-FUNC.
           MOVE TSC-NEMO           TO OSC-NEMO.
           MOVE TSC-NTRV           TO OSC-NTRV.
           MOVE TSC-NTRN           TO OSC-NTRN.
           MOVE TSC-PROG           TO OSC-PROG.
           MOVE TSC-NLIB           TO OSC-NLIB.
           MOVE TSC-NMAP           TO OSC-NMAP.
           MOVE TSC-LDOC           TO OSC-LDOC.
           MOVE TSC-NDOC           TO OSC-NDOC.
           MOVE TSC-FRET           TO OSC-FRET.
           MOVE TSC-IPRV           TO OSC-IPRV.
           MOVE TSC-SISG           TO OSC-SISG.
           IF TSC-TINS > SPACES
               MOVE TSC-TINS       TO OSC-INST
           ELSE
               IF TSC-TFUN = "PIN"
                    MOVE SCR-INST-GKY   TO OSC-INST
               ELSE
      
                    MOVE SCR-INST-HKY   TO OSC-INST.
           MOVE TSC-TFUN           TO OSC-TFUN.
           MOVE TSC-CMNP           TO OSC-CMNP.
           MOVE TSC-FFLD           TO OSC-FFLD.
           MOVE TSC-I              TO OSC-I.
      *    MOVE TSC-CMND           TO OSC-CMND.
           MOVE TSC-CCMN( TSC-I )  TO OSC-CMND.
           MOVE TSC-PRMC           TO OSC-PRMC.
           MOVE TSC-CCPP( TSC-I )  TO OSC-CCPP.
           MOVE TSC-STPP( TSC-I )  TO OSC-STPP.
           MOVE 1 TO FRM-IFLD.
       LUP-PRO-MOVE-SCR1.
           MOVE TSC-CCMN(FRM-IFLD) TO OSC-COD-CCMN(FRM-IFLD).
           MOVE TSC-CCPP(FRM-IFLD) TO OSC-COD-CCPP(FRM-IFLD).
           MOVE TSC-STPP(FRM-IFLD) TO OSC-IND-STPP(FRM-IFLD).
           MOVE TSC-PRMT(FRM-IFLD) TO OSC-GLS-PRMT(FRM-IFLD).
           MOVE TSC-CONF(FRM-IFLD) TO OSC-GLS-CONF(FRM-IFLD).
           MOVE TSC-UARC(FRM-IFLD) TO OSC-GLS-UARC(FRM-IFLD).
           ADD 1 TO FRM-IFLD.
           IF FRM-IFLD NOT > 10
               GO TO LUP-PRO-MOVE-SCR1.
           MOVE TSC-USER           TO OSC-USER.
           MOVE TSC-OTRN           TO OSC-OTRN.
           MOVE TSC-PROV           TO OSC-PROV.
           MOVE "C"                TO OSC-ICMN.
       FIN-PRO-MOVE-SCR1.
           EXIT.
      *HACE MOVE A VARIABLES DE PROGRAMA ( NUEVA VERSION )
       PRO-MOVE-SCR2 SECTION.
       INI-PRO-MOVE-SCR2.
           IF WSS-DSP-SEC = "S"
                MOVE "PRO-MOVE-SCR2 " TO WSS-GLS-MDSP
                PERFORM DSP-MDSP.
           MOVE +250               TO SCR-TCMA.
           MOVE TSC-SIST           TO SCR-SIST.
           MOVE TSC-SISG           TO SCR-SISG.
           MOVE TSC-NTRN           TO SCR-NTRN.
           MOVE TSC-PROG           TO SCR-PROG.
           MOVE TSC-NTRV           TO SCR-NTRV.
           MOVE TSC-PROV           TO SCR-PROV.
           MOVE TSC-NLIB           TO SCR-NLIB.
           MOVE TSC-NMAP           TO SCR-NMAP.
           IF TSC-TINS > SPACES
               MOVE TSC-TINS       TO SCR-INST
           ELSE
               IF TSC-TFUN = "PIN"
                  MOVE SCR-INST-GKY   TO SCR-INST
               ELSE
                  MOVE SCR-INST-HKY   TO SCR-INST.
           MOVE TSC-CMNP           TO SCR-CMNP.
      *    MOVE TSC-CMND           TO SCR-CMND.
           MOVE TSC-CCMN( TSC-I )  TO SCR-CMND.
           MOVE TSC-CCPP( TSC-I )  TO SCR-CCPP.
           MOVE TSC-STPP( TSC-I )  TO SCR-STPP.
           MOVE TSC-PRMT( TSC-I )  TO SCR-PRMT.
           MOVE TSC-CONF( TSC-I )  TO SCR-CONF.
           MOVE TSC-USER           TO SCR-USER.
           IF WSS-IND-USSP = "S"
               MOVE SPACES TO SCR-USER.
           MOVE TSC-OTRN           TO SCR-OTRN.
      *    DISPLAY "MENU: SCR-OTRN " SCR-OTRN.
           MOVE "C"                TO SCR-ICMN.
      *                                SCR-QIDD
      *                                SCR-LIDD
           MOVE TSC-NEMO           TO SCR-NEMO.
           MOVE TSC-LDOC           TO SCR-LDOC.
           MOVE TSC-NDOC           TO SCR-NDOC.
           MOVE TSC-FRET           TO SCR-FRET.
           MOVE TSC-IPRV           TO SCR-IPRV.
           MOVE TSC-FFLD           TO SCR-FFLD.
      * DE ESTA FORMA FUNCIONA EL CORRECTO DESPLIEGUE DE LOS
      * COMANDOS EN UNISYS, INCLUSIVE CUANDO SE INGRESA VIA
      * OPCION,COMNADO, QUE ES DONDE FALLABA O CUANDO EXISTIA
      * UN COMANDO EN MENU
           MOVE TRL-COD-CMND IN TRL-FLD TO TSC-TRL-COD-CMND.
      *    DISPLAY "GNSPPMDP: TRL-COD-CMND : " TSC-NEMO " : "
      *     TRL-COD-CMND IN TRL-FLD.
           PERFORM MOV-TSC-SCR.
       FIN-PRO-MOVE-SCR2.
           EXIT.
       PRO-PQTS-SCR2 SECTION.
       INI-PRO-PQTS-SCR2.
           IF WSS-DSP-SEC = "S"
                MOVE "PRO-PQTS-SCR2 " TO WSS-GLS-MDSP
                PERFORM DSP-MDSP.
       FIN-PRO-PQTS-SCR2.
           EXIT.
       PRO-MOVE-VSYS SECTION.
       INI-PRO-MOVE-VSYS.
           IF WSS-DSP-SEC = "S"
                MOVE "PRO-MOVE-VSYS"  TO WSS-GLS-MDSP
                PERFORM DSP-MDSP.
      *SI LAS VARIABLES DEL PROGRAMA VAN EN COMMAREA VERSION 1
           IF ( TSC-TINV = "C" ) OR ( TSC-TINF NOT > SPACES )
               MOVE OSC-VARI TO SYS-CMMA
      *        MOVE OSC-TCMA TO SYS-TCMA
               MOVE +3500    TO SYS-TCMA
           ELSE
      *SI LAS VARIABLES DEL PROGRAMA VAN EN COMMAREA VERSION 2
           IF TSC-TINV = "O"
               MOVE SCR-VARI TO SYS-CMMA
               MOVE SCR-TCMA TO SYS-TCMA
           ELSE
      *SE ASUME "T" = SI LAS VARIABLES DEL PROGRAMA VAN EN TS
              MOVE SPACES   TO SYS-CMMA
              MOVE 0        TO SYS-TCMA.
           MOVE TSC-PROG TO SYS-PROG.
           MOVE TSC-NTRN TO SYS-NTRN.
       FIN-PRO-MOVE-VSYS.
           EXIT.
      
       PRO-CALL-XCTL SECTION.
       INI-PRO-CALL-XCTL.
      
      *     IF WSS-DSP-SEC = "S"
      *          MOVE "PRO-CALL-XCTL " TO WSS-GLS-MDSP
      *          PERFORM DSP-MDSP.
      *ISP  26-JUN-1996 18:08:49  PTC
      *     IF SCR-NEMO = "PTCACTPLC   "
      *          MOVE "D04000000012" TO SYS-MSG-XCTL-RSTO
      *          MOVE WSS-RCV-2      TO SYS-MSG-XCTL-RSTO
      *     ELSE
      *          MOVE SPACES         TO SYS-MSG-XCTL-RSTO.
           IF TSC-TFUN = "PIN" AND
              WSS-DFRM-LEYO-MAPA-BD = "S"
      *        PERFORM CHK-PIN
               MOVE WFF-FLD       TO FRM-DFLD-RED-PTT-HYT
               MOVE WSS-DFRM-DATA-2 TO FRM-DFLD-RED-PTT-FRM
      
      *DESPROTEGE CAMPO ACCION
               MOVE FRM-CPIM-UBY TO FRM-DFLD-ELM(24)
               MOVE SYS-RTRN TO SYS-CMND
               PERFORM UNP-KEYS-PDK
               MOVE TSC-NTRN TO SYS-NTRN
           ELSE
           IF TSC-TFUN = "PIN" AND
              WSS-DFRM-LEYO-MAPA-BD = "N"
               PERFORM UNP-KEYS-PHK
               MOVE WFT-FLD TO WCM-TRL-FLD
               MOVE WCM-FLD  TO FRM-DFLD
               MOVE "N" TO WSS-PUT-MSK
               MOVE SYS-RTRN TO SYS-CMND
      *        PERFORM UNP-KEYS-PHK
               MOVE TSC-NTRN TO SYS-NTRN
      *DESPROTEGE CAMPO ACCION
               MOVE FRM-CPIM-UBY TO FRM-DFLD-ELM(23)
      
           ELSE
      
               MOVE SYS-XCTL TO SYS-CMND.
           PERFORM GNS-PRO-SYS.
           PERFORM XCT-ERR.
       FIN-PRO-CALL-XCTL.
           EXIT.
      
       UNP-KEYS-PDK SECTION.
       INI-UNP-KEYS-PDK.
           MOVE ZEROES TO WSS-NUM-COR-CUR.
      *    MOVE ZEROES TO WSS-NUM-COR-H03.
      *    DISPLAY "DESPLEGARA H03 ".
      *    DISPLAY WSS-NUM-COR-H03.
      *    DISPLAY "DESPLEGO   H03 ".
           MOVE "GNS" TO FIO-SIST.
      * POSICIONES DESPROTECCION DE LLAVES
           MOVE "PHK" TO TAB-COD-TTAB IN TAB.
           IF WSS-I-CMN NOT NUMERIC
               DISPLAY "CORRELATIVO COMANDO NO NUMERICO"
               STOP RUN.
      *    ELSE
      *       DISPLAY "WSS-I-CMN : " WSS-I-CMN.
           MOVE TSC-NMAP                  TO PDK-FRM-GLS-NFRM.
           MOVE SCR-CMND                  TO PDK-FRM-COD-CMND.
           MOVE PDK-COD-CTAB TO TAB-COD-CTAB IN TAB.
           MOVE FIO-GET-KEY TO FIO-CMND.
           PERFORM GNS-FIO-TAB.
           IF NOT FIO-STAT-OKS
               GO TO FIN-UNP-KEYS-PDK.
           MOVE TAB-GLS-DESC TO WSS-TAB-40.
           MOVE TAB-GLS-DATA TO WSS-TAB-60.
      
           MOVE WSS-TAB-100  TO PHK-TBL-PHK.
           MOVE TAB-GLS-DCOR IN TAB TO WSS-TBL-ATR-RED1.
           MOVE TAB-COD-ATRN IN TAB TO WSS-TBL-ATR-RED2.
           IF TAB-GLS-ABRV IN TAB NUMERIC
               MOVE TAB-GLS-ABRV IN TAB TO WSS-NUM-COR-CUR.
      *H03 IF TAB-EXT-CTAB IN TAB NUMERIC
      *H03     MOVE TAB-EXT-CTAB IN TAB TO WSS-NUM-COR-H03.
           MOVE 414 TO PDK-IDX-PDK3.
           PERFORM UNP-KEYS-PDK-ELM VARYING PDK-IDX-PDK1 FROM 1 BY 1
             UNTIL PHK-TBL-PHK-ELM-COL-RED(PDK-IDX-PDK1) NOT > SPACES
                OR
             PDK-IDX-PDK3 > 3000.
       FIN-UNP-KEYS-PDK.
           EXIT.
      
       UNP-KEYS-PHK SECTION.
       INI-UNP-KEYS-PHK.
           MOVE "GNS" TO FIO-SIST.
      * POSICIONES DESPROTECCION DE LLAVES
           MOVE "PHK" TO TAB-COD-TTAB IN TAB.
           IF WSS-I-CMN NOT NUMERIC
               DISPLAY "CORRELATIVO COMANDO NO NUMERICO"
               STOP RUN.
      *     ELSE
      *        DISPLAY "WSS-I-CMN : " WSS-I-CMN.
           MOVE TSC-NMAP                  TO PDK-FRM-GLS-NFRM.
           MOVE SCR-CMND                  TO PDK-FRM-COD-CMND.
           MOVE PDK-COD-CTAB TO TAB-COD-CTAB IN TAB.
           MOVE FIO-GET-KEY TO FIO-CMND.
           PERFORM GNS-FIO-TAB.
           IF NOT FIO-STAT-OKS
               MOVE @1203@ TO WCM-KEY-FLD-ELM-277F(1)
               GO TO FIN-UNP-KEYS-PHK.
      
           MOVE TAB-GLS-DESC TO WSS-TAB-40.
           MOVE TAB-GLS-DATA TO WSS-TAB-60.
           MOVE WSS-TAB-100  TO PHK-TBL-PHK.
      * ASUME QUE POSICIONARA EL CURSOR EN CAMPO ACCION
           IF TAB-GLS-ABRV IN TAB NOT NUMERIC
               MOVE "00001" TO TAB-GLS-ABRV IN TAB.
           MOVE TAB-GLS-ABRV IN TAB TO WSS-TAB-GLS-ABRV-NUM.
           MOVE @61@ TO WSS-HEX-COL-C.
           MOVE @40@ TO WSS-HEX-FIL-C.
      
           PERFORM UNP-KEYS-PHK-ELM VARYING PDK-IDX-PDK1 FROM 1 BY 1
             UNTIL PHK-TBL-PHK-ELM-COL-RED(PDK-IDX-PDK1) NOT > SPACES.
      ***  MOVE @1203@ TO WCM-KEY-FLD-ELM-277F(PDK-IDX-PDK1).
           MOVE @1227@ TO WCM-KEY-FLD-ELM-277F(PDK-IDX-PDK1).
           MOVE @7F@   TO WCM-KEY-FLD-ELM-COL(PDK-IDX-PDK1).
           MOVE WSS-HEX-COL-C TO WCM-KEY-FLD-ELM-FIL(PDK-IDX-PDK1).
           MOVE WSS-HEX-FIL-C TO WCM-KEY-FLD-ELM-DI(PDK-IDX-PDK1).
           ADD 1 TO PDK-IDX-PDK1.
           MOVE @2750@ TO WCM-KEY-FLD-ELM-277F(PDK-IDX-PDK1).
           MOVE @03@   TO WCM-KEY-FLD-ELM-COL(PDK-IDX-PDK1).
       FIN-UNP-KEYS-PHK.
           EXIT.
      
      
      
       UNP-KEYS-PDK-ELM SECTION.
       INI-UNP-KEYS-PDK-ELM.
           IF FRM-DFLD-ELM(PDK-IDX-PDK3) = @03@ OR
               PDK-IDX-PDK3 NOT <  3000
               MOVE 3001 TO PDK-IDX-PDK3
               GO TO FIN-UNP-KEYS-PDK-ELM.
      
           IF FRM-DFLD-ELM(PDK-IDX-PDK3) NOT = @27@
                ADD 1 TO PDK-IDX-PDK3
                GO TO INI-UNP-KEYS-PDK-ELM.
      
           ADD 1 TO PDK-IDX-PDK3.
      
           IF FRM-DFLD-ELM(PDK-IDX-PDK3) NOT = @7F@
                ADD 1 TO PDK-IDX-PDK3
                GO TO INI-UNP-KEYS-PDK-ELM.
      
           ADD 1 TO PDK-IDX-PDK3.
      
           MOVE PHK-TBL-PHK-ELM-COL(PDK-IDX-PDK1) TO PDK-IDX-PDK4.
      
           MOVE VEC-HEX-COFI-ELM(PDK-IDX-PDK4) TO WSS-CHR-HEX-COL.
      
           IF WSS-CHR-HEX-COL = FRM-DFLD-ELM(PDK-IDX-PDK3)
               ADD 1 TO PDK-IDX-PDK4
               MOVE VEC-HEX-COFI-ELM(PDK-IDX-PDK4) TO
                        WSS-CHR-HEX-COL
               ADD 1 TO PDK-IDX-PDK3
               MOVE PHK-TBL-PHK-ELM-FIL(PDK-IDX-PDK1) TO PDK-IDX-PDK4
      
               MOVE VEC-HEX-COFI-ELM(PDK-IDX-PDK4) TO WSS-CHR-HEX-FIL
      
               IF WSS-CHR-HEX-FIL = FRM-DFLD-ELM(PDK-IDX-PDK3)
                   ADD 1 TO PDK-IDX-PDK3
                   MOVE FRM-CPIM-UBY TO FRM-DFLD-ELM(PDK-IDX-PDK3)
                   ADD 1 TO PDK-IDX-PDK3
                   PERFORM CUR-H03
                   PERFORM UNP-VRF
                   GO TO FIN-UNP-KEYS-PDK-ELM.
           GO TO INI-UNP-KEYS-PDK-ELM.
       FIN-UNP-KEYS-PDK-ELM.
           EXIT.
      
       CUR-H03 SECTION.
       INI-CUR-H03.
           IF WSS-NUM-COR-CUR NOT = ZEROES AND
              WSS-NUM-COR-H03 NOT = ZEROES
               IF WSS-NUM-COR-CUR = PDK-IDX-PDK1
                MOVE WSS-CHR-HEX-COL
                               TO FRM-DFLD-ELM(WSS-NUM-COR-H03)
                ADD 1 TO WSS-NUM-COR-H03
                MOVE WSS-CHR-HEX-FIL TO FRM-DFLD-ELM(WSS-NUM-COR-H03).
       FIN-CUR-H03.
           EXIT.
      
       UNP-VRF SECTION.
       INI-UNP-VRF.
      * PARA CAMPOS IDC
           IF WSS-TBL-ATR-ELM(PDK-IDX-PDK1) = "I"
      * SE AGREGAN 3 Y NO 4, PUES AL FINAL DE UNP-KEYS-PDK-ELM
      * COBOL SUMA 1
               ADD 3 TO PDK-IDX-PDK1
               ADD 13 TO PDK-IDX-PDK3
               MOVE FRM-CPIM-UBY TO FRM-DFLD-ELM(PDK-IDX-PDK3)
               ADD 3 TO PDK-IDX-PDK3
               MOVE FRM-CPIM-UBY TO FRM-DFLD-ELM(PDK-IDX-PDK3)
               ADD 4 TO PDK-IDX-PDK3
               MOVE FRM-CPIM-UBY TO FRM-DFLD-ELM(PDK-IDX-PDK3).
       FIN-UNP-VRF.
           EXIT.
      
       UNP-KEYS-PHK-ELM SECTION.
       INI-UNP-KEYS-PHK-ELM.
           MOVE @277F@       TO WCM-KEY-FLD-ELM-277F(PDK-IDX-PDK1).
           MOVE FRM-CPIM-UBY TO WCM-KEY-FLD-ELM-DI(PDK-IDX-PDK1).
      
           IF PHK-TBL-PHK-ELM-COL-RED(PDK-IDX-PDK1) NOT NUMERIC
               DISPLAY "COLUMNA NO NUMERICA "
                 PHK-TBL-PHK-ELM-COL-RED(PDK-IDX-PDK1)
               STOP RUN.
           MOVE PHK-TBL-PHK-ELM-COL(PDK-IDX-PDK1) TO PDK-IDX-PDK2.
           MOVE VEC-HEX-COFI-ELM(PDK-IDX-PDK2) TO
                  WCM-KEY-FLD-ELM-COL(PDK-IDX-PDK1).
           IF PDK-IDX-PDK1 = WSS-TAB-GLS-ABRV-NUM
               ADD 1 TO PDK-IDX-PDK2
               MOVE VEC-HEX-COFI-ELM(PDK-IDX-PDK2) TO WSS-HEX-COL-C.
      
           IF PHK-TBL-PHK-ELM-FIL-RED(PDK-IDX-PDK1) NOT NUMERIC
               DISPLAY "FILA    NO NUMERICA "
                 PHK-TBL-PHK-ELM-FIL-RED(PDK-IDX-PDK1)
               STOP RUN.
           MOVE PHK-TBL-PHK-ELM-FIL(PDK-IDX-PDK1) TO PDK-IDX-PDK2.
           MOVE VEC-HEX-COFI-ELM(PDK-IDX-PDK2) TO
                  WCM-KEY-FLD-ELM-FIL(PDK-IDX-PDK1).
      
           IF PDK-IDX-PDK1 = WSS-TAB-GLS-ABRV-NUM
              MOVE VEC-HEX-COFI-ELM(PDK-IDX-PDK2) TO WSS-HEX-FIL-C.
      
      
      
      
       FIN-UNP-KEYS-PHK-ELM.
           EXIT.
      
      
       PRO-CALL-RTTR SECTION.
       INI-PRO-CALL-RTTR.
      *     IF WSS-DSP-SEC = "S"
      *          MOVE "PRO-CALL-RTTR " TO WSS-GLS-MDSP
      *          PERFORM DSP-MDSP.
           MOVE SYS-RTRN TO SYS-CMND.
           PERFORM GNS-PRO-SYS.
       FIN-PRO-CALL-RTTR.
           EXIT.
       GNS-PRO-KEY SECTION.
       INI-GNS-PRO-KEY.
           IF WSS-DSP-SEC = "S"
                MOVE "GNS-PRO-KEY " TO WSS-GLS-MDSP
                PERFORM DSP-MDSP.
           MOVE EIBAID TO FRM-FFLD.
           IF NOT ( FRM-FFLD = FRM-FFLD-PF11 OR FRM-FFLD-PFK )
               GO TO FIN-GNS-PRO-KEY.
           PERFORM GNS-ERR-QUE.
           MOVE EIBTRMID TO QUE-TERM.
           MOVE "PKB"    TO QUE-TYPE.
      *     MOVE 1        TO QUE-NITM.
      *     MOVE +3000    TO QUE-LITM.
           MOVE +3007    TO QUE-LITM.
      *     MOVE QUE-GET  TO QUE-CMND.
      *     PERFORM GNS-PRO-QUE.
           PERFORM GNS-CHK-QUEU.
           IF QUE-STAT NOT = QUE-STAT-OKS
               GO TO FIN-GNS-PRO-KEY.
           MOVE DFHCOMMAREA TO SYS-CMMA.
           MOVE EIBCALEN    TO SYS-TCMA.
           MOVE SYS-XCTL    TO SYS-CMND.
           IF QUE-IKEY = "V31"
               MOVE "GNSPPPKB" TO SYS-PROG
           ELSE
               MOVE "GNSPPPFB" TO SYS-PROG.
           PERFORM GNS-PRO-SYS.
       FIN-GNS-PRO-KEY.
           EXIT.
       GNS-PUT-FRT SECTION.
       INI-GNS-PUT-FRT.
           IF WSS-DSP-SEC = "S"
                MOVE "GNS-PUT-FRT " TO WSS-GLS-MDSP
                PERFORM DSP-MDSP.
       FIN-GNS-PUT-FRT.
           EXIT.
      ******************** MANEJO DE COLAS **********************
       COPY GNSBGQUE OF GNS.
      
       CHK-FRM SECTION.
       INI-CHK-FRM.
      *     IF WSS-DSP-SEC = "S"
      *          MOVE "CHK-FRM " TO WSS-GLS-MDSP
      *          PERFORM DSP-MDSP.
           IF NOT ( CHK-FRM-COD-TFUN = "PTC" OR
                    CHK-FRM-COD-TFUN = "PIN" )
               GO TO FIN-CHK-FRM.
           MOVE CHK-FRM-GLS-NFRM TO WSS-COD-NFRM.
           MOVE WSS-COD-IMAP TO QUE-TERM.
           MOVE SPACES  TO QUE-TYPE.
           MOVE TSC-LRCV TO BKP-LRCV.
           MOVE 1       TO QUE-NITM.
           MOVE QUE-GET TO QUE-CMND.
           PERFORM GNS-PRO-QUE.
           IF NOT ( QUE-STAT = QUE-STAT-OKS )
               MOVE WSS-COD-NFRM TO FRM-GLS-NFRM IN EMU-FLD
               MOVE QUE-STAT-OKS TO QUE-STAT
               MOVE WSS-LENV TO QUE-LDAT
               MOVE WSS-LRCV TO QUE-PCUR
               MOVE EMU-FLD  TO QUE-DATA.
      
           MOVE "S" TO WSS-DFRM-LEYO-MAPA-BD.
           MOVE QUE-ITEM TO WSS-DFRM-ITEM.
           MOVE QUE-LDAT TO WSS-NUM-COR-H03.
           MOVE WSS-DFRM-LRCV TO TSC-LRCV.
       FIN-CHK-FRM.
           EXIT.
      
      * OBTIENE VARIABLES DESDE AMBIENTE UNISYS
      
       UYS-GET-TERM SECTION.
       INI-UYS-GET-TERM.
      * OBTIENE TERMINAL DESDE AMBIENTE UNISYS
           MOVE STATION TO UYS-TERM-N.
           CALL "GET-NAME-USING-DESIGNATOR OF DCILIBRARY"
                   USING UYS-TERM-N
                         UYS-TERM
                  GIVING UYS-TERM-R.
           MOVE UYS-TERM TO EIBTRMID.
       FIN-UYS-GET-TERM.
           EXIT.
      
       UYS-GET-TECL SECTION.
       INI-UYS-GET-TECL.
      * OBTIENE TECLA DESDE AMBIENTE UNISYS
           MOVE FRM-FFLD-RET TO FRM-FFLD.
      **   IF SDF-HDR-COD-CACC = "LAST "
      **         MOVE FRM-FFLD-PF10 TO FRM-FFLD
      **   ELSE
      **   IF SDF-HDR-COD-CACC = "BACK "
      **         MOVE FRM-FFLD-PF12 TO FRM-FFLD
      **   ELSE
      **   IF SDF-HDR-COD-CACC = "END  "
      **         MOVE SCR-INST-HCM TO SCR-INST
      **         MOVE "ABT" TO FRM-STAT
      **         MOVE FRM-FFLD-PF3  TO FRM-FFLD.
      *    MOVE FRM-FFLD-RET TO FRM-FFLD.
           MOVE FRM-FFLD TO EIBAID.
       FIN-UYS-GET-TECL.
           EXIT.
      
       UYS-GET-AGND SECTION.
       INI-UYS-GET-AGND.
      * OBTIENE AGENDA DESDE AMBIENTE UNISYS
           CALL "GET-DESIGNATOR-USING-NAME OF DCILIBRARY"
                   USING UYS-AGND
                   VALUE  AGENDA
                         UYS-AGND-R
                  GIVING UYS-RESU.
           IF UYS-RESU NOT = 0
               DISPLAY "GNSPPMDP ERROR EN UYS-GET-AGND ".
       FIN-UYS-GET-AGND.
           EXIT.
      
      
       UYS-GET-USER SECTION.
       INI-UYS-GET-USER.
      * OBTIENE USUARIO DESDE AMBIENTE UNISYS
           MOVE USERCODE TO UYS-USER-N.
           CALL "GET-NAME-USING-DESIGNATOR OF DCILIBRARY"
                   USING UYS-USER-N
                         UYS-USER
                  GIVING UYS-USER-R.
       FIN-UYS-GET-USER.
           EXIT.
      
      *COPY GNSBGACI OF GNS.
       CHK-RCV SECTION.
       INI-CHK-RCV.
           IF WSS-DSP-SEC = "S"
                  AND
             WSS-DSP-CHK-RCV = "S"
                  MOVE "N" TO WSS-DSP-CHK-RCV
                MOVE "CHK-RCV " TO WSS-GLS-MDSP
                PERFORM DSP-MDSP.
           IF TSC-TFUN = "MEN"
                MOVE FRM-DFLD TO RC3-FLD
                PERFORM CHK-RC3 VARYING RC3-IDX FROM 1 BY 1 UNTIL
                           RC3-IDX > 15
                MOVE RC3-TRL-COD-CACC TO TRL-COD-CACC IN TRL-FLD
            ELSE
                IF WSS-AUX-TRAN NOT = "RPGM"
      *ASUME FUNCION PTC
                    MOVE SPACES TO WSS-DFRM-FUNC
                    PERFORM MOV-CAC-RCV
                    MOVE WSS-DFRM-FUNC TO TRL-COD-CACC IN TRL-FLD.
       FIN-CHK-RCV.
           EXIT.
       CHK-RC3 SECTION.
       INI-CHK-RC3.
           IF WSS-DSP-SEC = "S"
                  AND
             WSS-DSP-CHK-RC3 = "S"
                  MOVE "N" TO WSS-DSP-CHK-RC3
                MOVE "CHK-RC3 " TO WSS-GLS-MDSP
                PERFORM DSP-MDSP.
      
           IF RC3-FLD-ELM(RC3-IDX) = LOW-VALUES
                MOVE SPACES TO RC3-FLD-ELM(RC3-IDX).
       FIN-CHK-RC3.
           EXIT.
      
      * PRV-INI
       CAL-PRV SECTION.
       INI-CAL-PRV.
      *    IF WSS-DSP-SEC = "S"
      *           AND
      *      WSS-DSP-CAL-PRV = "S"
      *           MOVE "N" TO WSS-DSP-CAL-PRV
      *         MOVE "CAL-PRV " TO WSS-GLS-MDSP
      *         PERFORM DSP-MDSP.
      
      *    IF WSS-IND-USSP = "S"
      *       MOVE "S" TO UYP-IND-RESP
      *    ELSE
      *    DISPLAY "PRV-XY PREGUNTANDO POR " UYP-COD-PREG.
      *    IF WSS-COD-TCON = UYP-CON-SIST
      *         DISPLAY "PRV-XY EN CAL-PRV CONSULTA SISTEMA "
      *    ELSE
      *    IF WSS-COD-TCON = UYP-CON-NEMO
      *         DISPLAY "PRV-XY EN CAL-PRV CONSULTA NEMOTEC "
      *    ELSE
      *    IF WSS-COD-TCON = UYP-CON-CMND
      *         DISPLAY "PRV-XY EN CAL-PRV CONSULTA COMANDO "
      *    ELSE
      *         DISPLAY "PRV-XY EN CAL-PRV CONSULTA ERRONEA".
           PERFORM BUS-PRV.
      
       FIN-CAL-PRV.
           EXIT.
      
       BUS-PRV SECTION.
       INI-BUS-PRV.
      *    DISPLAY "EN BUS-PRV".
      *    DISPLAY "BUSCA PRIVILEGIOS PARA USUARIO " UYP-COD-USER.
      *
      *    IF WSS-DSP-SEC = "S"
      *           AND
      *      WSS-DSP-BUS-PRV = "S"
      *           MOVE "N" TO WSS-DSP-BUS-PRV
      *           MOVE "BUS-PRV " TO WSS-GLS-MDSP
      *         PERFORM DSP-MDSP.
      
           IF  WSS-PRV-CRG-PDP = "S"
                PERFORM CRG-WSS-PDP.
      *    MOVE WSS-I TO WSS-TOT-PDP.
           IF  WSS-STAT-AST = "OKS" AND WSS-STAT-RUG = "OKS" AND
               WSS-STAT-PDP = "OKS"
      *  Respuesta Normal; existe Grupo "*" y usuario vigente en RUG
                 MOVE "0"        TO UYP-COD-STAT
           ELSE
           IF  WSS-STAT-AST = "OKS" AND WSS-STAT-RUG = "OKS" AND
               WSS-STAT-PDP = "NEX"
      *  Warning; existe Grupo "*", usuario vigente en RUG, pero
      *  Grupo sin Privilegios en PDP
                 MOVE "1"        TO UYP-COD-STAT
           ELSE
           IF  WSS-STAT-AST = "OKS" AND WSS-STAT-RUG = "NVG"
      *  Warning; existe Grupo "*", pero usuario no
      *  esta vigente en la RUG
                 MOVE "2"        TO UYP-COD-STAT
           ELSE
           IF  WSS-STAT-AST = "OKS" AND WSS-STAT-RUG = "NEX"
      *  Warning; existe Grupo "*", pero usuario no
      *  existe en la RUG
                 MOVE "3"        TO UYP-COD-STAT
           ELSE
           IF  WSS-STAT-AST = "NEX" AND WSS-STAT-RUG = "OKS" AND
               WSS-STAT-PDP = "OKS"
      *  Informacion; no existe Grupo "*", pero usuario esta
      *  vigente en la RUG
                 MOVE "4"        TO UYP-COD-STAT
           ELSE
           IF  WSS-STAT-AST = "NEX" AND WSS-STAT-RUG = "OKS" AND
               WSS-STAT-PDP = "NEX"
      *  Warning; no existe Grupo "*", usuario esta vigente en
      *  la RUG, pero no hay Privilegios en la PDP
                 MOVE "5"        TO UYP-COD-STAT
           ELSE
           IF  WSS-STAT-AST = "NEX" AND WSS-STAT-RUG = "NVG"
      *  Error; no existe Grupo "*", y usuario no esta
      *  vigente en la RUG
                 MOVE "6"        TO UYP-COD-STAT
           ELSE
           IF  WSS-STAT-AST = "NEX" AND WSS-STAT-RUG = "NEX"
      *  Error; no existe Grupo "*" y usuario no existe en RUG
                 MOVE "7"        TO UYP-COD-STAT.
      
           MOVE WSS-TOT-PDP      TO WSS-I.
           PERFORM DET-PRV.
      *    DISPLAY "PRV-XY RESULTADO PREGUNTA : " UYP-IND-RESP.
           IF  WSS-COD-TCON = UYP-CON-MALO
                 MOVE UYP-STAT-TCER    TO UYP-COD-STAT.
       FIN-BUS-PRV.
           EXIT.
      
       DET-PRV SECTION.
       INI-DET-PRV.
      *    IF WSS-DSP-SEC = "S"
      *           AND
      *      WSS-DSP-DET-PRV = "S"
      *           MOVE "N" TO WSS-DSP-DET-PRV
      *           MOVE "DET-PRV " TO WSS-GLS-MDSP
      *         PERFORM DSP-MDSP.
      
           MOVE WSS-I   TO WSS-T.
           MOVE "N"     TO UYP-IND-RESP.
      *    IF  UYP-COD-TDPU = UYP-COD-TDPU-GB
      *          PERFORM BUS-PRV-SIST VARYING WSS-I
      *                  FROM 1 BY 1 UNTIL WSS-I > WSS-T
      *    ELSE
      *      PERFORM DET-WSS-COD-TCON
             IF  WSS-COD-TCON = UYP-CON-SIST
                   PERFORM BUS-PRV-SIST VARYING WSS-I
                           FROM 1 BY 1 UNTIL WSS-I > WSS-T
             ELSE
               IF  WSS-COD-TCON = UYP-CON-NEMO
                     PERFORM BUS-PRV-NEMO VARYING WSS-I
                             FROM 1 BY 1 UNTIL WSS-I > WSS-T
               ELSE
                 IF  WSS-COD-TCON = UYP-CON-CMND
                       PERFORM BUS-PRV-CMND VARYING WSS-I
                               FROM 1 BY 1 UNTIL WSS-I > WSS-T
                 ELSE
                   IF  WSS-COD-TCON = UYP-CON-PROC
                       PERFORM BUS-PRV-PROC VARYING WSS-I
                               FROM 1 BY 1 UNTIL WSS-I > WSS-T
                   ELSE
                     IF  WSS-COD-TCON = UYP-CON-MALO
                           MOVE UYP-STAT-TCER TO UYP-COD-STAT.
       FIN-DET-PRV.
           EXIT.
      
       DET-WSS-COD-TCON SECTION.
       INI-DET-WSS-COD-TCON.
           IF  UYP-COD-PROC > SPACES
                 MOVE UYP-CON-PROC TO WSS-COD-TCON
           ELSE
             IF  UYP-COD-CMND > SPACES
                  MOVE UYP-CON-CMND TO WSS-COD-TCON
             ELSE
               IF  UYP-COD-NEMO > SPACES
                    MOVE UYP-CON-NEMO TO WSS-COD-TCON
               ELSE
                 IF  UYP-COD-SIST > SPACES
                       MOVE UYP-CON-SIST TO WSS-COD-TCON
                 ELSE
                       MOVE UYP-CON-MALO TO WSS-COD-TCON.
       FIN-DET-WSS-COD-TCON.
           EXIT.
      
       BUS-PRV-SIST SECTION.
       INI-BUS-PRV-SIST.
      *    DISPLAY "PRV-XY ======>>>>> EN BUS-PRV-SIST".
      *    DISPLAY "PRV-XY MTR " WSS-PDP IN WSS-QUE-VARI(WSS-I).
      *    DISPLAY "PRV-XY PRG " UYP-COD-PREG.
           IF ( WSS-PDP-COD-SIST IN WSS-PDP(WSS-I) = "*  " OR
                WSS-PDP-COD-SIST IN WSS-PDP(WSS-I) =
                UYP-COD-SIST IN UYP-VARI )
                  IF WSS-PDP-COD-NEMO IN WSS-PDP(WSS-I) = "*  " AND
                     WSS-PDP-COD-CMND IN WSS-PDP(WSS-I) = "*  "
      *                DISPLAY "PRV-XY ASIGNANDO SIS 1"
                       MOVE WSS-PDP-IND-RESP IN WSS-PDP(WSS-I) TO
                            UYP-IND-RESP IN UYP-VARI
                       ADD  1 WSS-T      GIVING WSS-I
                  ELSE
                    IF WSS-PDP-IND-RESP IN WSS-PDP(WSS-I) = "S"
      *                DISPLAY "PRV-XY ASIGNANDO SIS 2"
                         MOVE WSS-PDP-IND-RESP IN WSS-PDP(WSS-I) TO
                              UYP-IND-RESP IN UYP-VARI
                         ADD  1 WSS-T      GIVING WSS-I.
      *    DISPLAY "PRV-XY RSP " UYP-IND-RESP.
      
       FIN-BUS-PRV-SIST.
           EXIT.
      
       BUS-PRV-NEMO SECTION.
       INI-BUS-PRV-NEMO.
      *<<<<<< INI R.M.V.
      *    PERFORM DET-VAR-CMP.
      *>>>>>> FIN R.M.V.
      *    DISPLAY "PRV-XY ======>>>>> EN CHK-OPC CHK/RES ".
      *    DISPLAY "PRV-XY " WSS-PDP IN WSS-QUE-VARI(WSS-I).
           IF ( WSS-PDP-COD-SIST IN WSS-PDP(WSS-I) = "*  " OR
                WSS-PDP-COD-SIST IN WSS-PDP(WSS-I) =
                UYP-COD-SIST IN UYP-VARI )
              AND
              ( WSS-PDP-COD-NEMO IN WSS-PDP(WSS-I) = "*  " OR
                WSS-PDP-COD-NEMO IN WSS-PDP(WSS-I) = UYP-COD-NEMO )
                  IF WSS-PDP-COD-CMND IN WSS-PDP(WSS-I) = "*  "
                       MOVE WSS-PDP-IND-RESP IN WSS-PDP(WSS-I) TO
                            UYP-IND-RESP IN UYP-VARI
      *                DISPLAY "PRV-XY ASIGNANDO OPC 1"
                       ADD  1 WSS-T      GIVING WSS-I
                  ELSE
                    IF WSS-PDP-IND-RESP IN WSS-PDP(WSS-I) = "S"
                         MOVE WSS-PDP-IND-RESP IN WSS-PDP(WSS-I) TO
                              UYP-IND-RESP IN UYP-VARI
      *                   DISPLAY "PRV-XY ASIGNANDO OPC 2"
                         ADD  1 WSS-T      GIVING WSS-I.
      *    DISPLAY "PRV-XY RESP : "  UYP-IND-RESP.
       FIN-BUS-PRV-NEMO.
           EXIT.
      
       BUS-PRV-CMND SECTION.
       INI-BUS-PRV-CMND.
      *<<<<<< INI R.M.V.
      *    PERFORM DET-VAR-CMP.
      *>>>>>> FIN R.M.V.
      *     DISPLAY "PRV-XY ======>>>>> EN CHK-OPC CHK/RES ".
      *     DISPLAY "PRV-XY " WSS-PDP IN WSS-QUE-VARI(WSS-I).
           IF ( WSS-PDP-COD-SIST IN WSS-PDP(WSS-I) = "*  " OR
                WSS-PDP-COD-SIST IN WSS-PDP(WSS-I) =
                UYP-COD-SIST IN UYP-VARI )
              AND
              ( WSS-PDP-COD-NEMO IN WSS-PDP(WSS-I) = "*  " OR
                WSS-PDP-COD-NEMO IN WSS-PDP(WSS-I) = UYP-COD-NEMO )
              AND
              ( WSS-PDP-COD-CMND IN WSS-PDP(WSS-I) = "*  " OR
                WSS-PDP-COD-CMND IN WSS-PDP(WSS-I) =
                UYP-COD-CMND IN UYP-VARI )
      *           DISPLAY "PRV-XY ASIGNANDO CMN 1"
                  MOVE WSS-PDP-IND-RESP IN WSS-PDP(WSS-I) TO
                       UYP-IND-RESP IN UYP-VARI
                  ADD  1 WSS-T      GIVING WSS-I.
      *    DISPLAY "PRV-XY " UYP-IND-RESP.
       FIN-BUS-PRV-CMND.
           EXIT.
      
       BUS-PRV-PROC SECTION.
       INI-BUS-PRV-PROC.
      *<<<<<< INI R.M.V.
      *    PERFORM DET-VAR-CMP.
      *>>>>>> FIN R.M.V.
           IF ( WSS-PDP-COD-SIST IN WSS-PDP(WSS-I) = "*  " OR
                WSS-PDP-COD-SIST IN WSS-PDP(WSS-I) =
                UYP-COD-SIST IN UYP-VARI )
              AND
              ( WSS-PDP-COD-NEMO IN WSS-PDP(WSS-I) = "*  " OR
                WSS-PDP-CMP-NEMO = WSS-UYP-CMP-NEMO )
              AND
              ( WSS-PDP-COD-CMND IN WSS-PDP(WSS-I) = "*  " OR
                WSS-PDP-COD-CMND IN WSS-PDP(WSS-I) =
                UYP-COD-CMND IN UYP-VARI )
                  MOVE WSS-PDP-IND-RESP IN WSS-PDP(WSS-I) TO
                       UYP-IND-RESP IN UYP-VARI
                  ADD  1 WSS-T      GIVING WSS-I.
       FIN-BUS-PRV-PROC.
           EXIT.
      
      *>>>>>> R.M.V
       DET-VAR-CMP SECTION.
       INI-DET-VAR-CMP.
           MOVE WSS-PDP-COD-NEMO IN WSS-PDP(WSS-I) TO WSS-PDP-CMP-NEMO.
           MOVE ZEROES  TO WSS-K.
           PERFORM FND-PES-PDP VARYING WSS-J FROM 1 BY 1
                               UNTIL WSS-J > 12.
           ADD  1          WSS-K GIVING WSS-L
           PERFORM CLR-PDP-CMP VARYING WSS-J FROM WSS-L BY 1
                               UNTIL WSS-J > 12.
      
      *
           MOVE UYP-COD-NEMO TO WSS-UYP-CMP-NEMO.
      
           PERFORM CLR-UYP-CMP VARYING WSS-J FROM WSS-L BY 1
                               UNTIL WSS-J > 12.
       FIN-DET-VAR-CMP.
           EXIT.
      
       FND-PES-PDP SECTION.
       INI-FND-PES-PDP.
           IF  WSS-PDP-CMP-NEMO-IDX(WSS-J) NOT = "$"
                 ADD  1   TO WSS-K
           ELSE
                MOVE 99   TO WSS-J.
       FIN-FND-PES-PDP.
           EXIT.
      
       CLR-PDP-CMP SECTION.
       INI-CLR-PDP-CMP.
           MOVE SPACES    TO WSS-PDP-CMP-NEMO-IDX(WSS-J).
       FIN-CLR-PDP-CMP.
           EXIT.
      
       CLR-UYP-CMP SECTION.
       INI-CLR-UYP-CMP.
           MOVE SPACES    TO WSS-UYP-CMP-NEMO-IDX(WSS-J).
       FIN-CLR-UYP-CMP.
           EXIT.
      
       CRG-WSS-PDP SECTION.
       INI-CRG-WSS-PDP.
      *    DISPLAY "PRV-XY EN INI-CRG-WSS-PDP".
           MOVE "NEX"           TO WSS-STAT-RUG.
           MOVE ZEROES                   TO WSS-I.
      *    PERFORM GET-PDP-ALL.
      
           MOVE LOW-VALUES               TO RUG-KEY-IRUG IN RUG.
           MOVE UYP-COD-USER IN UYP-VARI TO RUG-COD-USER IN RUG.
      *    DISPLAY "PRV-XY USUARIO EN UYS-COD-USER " UYP-COD-USER.
           MOVE FIO-GET-NLS              TO FIO-CMND.
      
       CIC-CRG-WSS-PDP.
           MOVE "RUG-COD-USER"  TO FIO-AKEY.
           PERFORM GNS-FIO-RUG.
           IF  NOT FIO-STAT-OKS
                 GO TO END-CRG-WSS-PDP.
      
           MOVE "S"             TO WSS-CERRAR-RUG.
      
           IF  UYP-COD-USER IN UYP-VARI NOT =
               RUG-COD-USER IN RUG
                 GO TO END-CRG-WSS-PDP.
      
           IF  RUG-IND-VIGE IN RUG NOT = "S"
                 MOVE "NVG"       TO WSS-STAT-RUG
                 GO TO END-CRG-WSS-PDP.
      
           MOVE "OKS"           TO WSS-STAT-RUG.
           PERFORM CRG-PDP-X.
      
      *    PERFORM GET-PDP.
      
      *  24-MAR-1994 16:15:14
      *  UN USUARIO PERTENECE SOLO A UN GRUPO
      *     MOVE FIO-GET-NXT     TO FIO-CMND.
      *     GO TO CIC-CRG-WSS-PDP.
      
       END-CRG-WSS-PDP.
      *    IF  WSS-CERRAR-RUG = "S"
      *          MOVE "RUG-COD-USER"    TO FIO-AKEY
      *          MOVE "N"               TO WSS-CERRAR-RUG
      *          MOVE FIO-END-BRW       TO FIO-CMND
      *          PERFORM GNS-FIO-RUG.
       FIN-CRG-WSS-PDP.
           EXIT.
       CRG-PDP-X SECTION.
       INI-CRG-PDP-X.
      *    DISPLAY "PRV-XY INI-CRG-PDP-X GRUPO :" RUG-COD-GRPO IN RUG.
           MOVE "N" TO WSS-BUS-GRPO.
           MOVE SPACES TO WSS-MAT-PFL.
           PERFORM BUS-PDP-X VARYING WSS-IDX-PDP-BUS FROM 1 BY 1
              UNTIL WSS-IDX-PDP-BUS > WSS-IDX-PDP-X OR
                    WSS-BUS-GRPO = "S".
           IF WSS-BUS-GRPO = "S"
              SUBTRACT 1 FROM WSS-IDX-PDP-BUS
              MOVE WSS-PDP-GRPO-ELM IN
                   WSS-PDP-MTX(WSS-IDX-PDP-BUS) TO
                   WSS-MAT-PFL
      *       DISPLAY "PRV-XY GRUPO ENCONTRADO"
      *       DISPLAY "WSS-TOT-PDP " WSS-TOT-PDP
      *       DISPLAY "OCC 1 " WSS-PDP IN WSS-QUE-VARI(1)
      *       DISPLAY "OCC 2 " WSS-PDP IN WSS-QUE-VARI(2)
      *       DISPLAY "OCC 3 " WSS-PDP IN WSS-QUE-VARI(3)
      *       DISPLAY "OCC 4 " WSS-PDP IN WSS-QUE-VARI(4)
      *       DISPLAY "OCC 5 " WSS-PDP IN WSS-QUE-VARI(5)
      *       DISPLAY "OCC 6 " WSS-PDP IN WSS-QUE-VARI(6)
      *       DISPLAY "OCC 7 " WSS-PDP IN WSS-QUE-VARI(7)
      *       DISPLAY "OCC 8 " WSS-PDP IN WSS-QUE-VARI(8)
      *       DISPLAY "OCC 9 " WSS-PDP IN WSS-QUE-VARI(9)
           ELSE
      *       DISPLAY "PRV-XY GRUPO NO ENCONTRADO"
              MOVE ZEROES TO WSS-TOT-PDP.
       FIN-CRG-PDP-X.
          EXIT.
       BUS-PDP-X SECTION.
       INI-BUS-PDP-X.
      *    DISPLAY "GRUPO NRO " WSS-IDX-PDP-BUS " "
      *        WSS-PDP-COD-GRPO-X IN WSS-PDP-MTX-GRPO(WSS-IDX-PDP-BUS).
           IF RUG-COD-GRPO IN RUG =
              WSS-PDP-COD-GRPO-X IN WSS-PDP-MTX-GRPO(WSS-IDX-PDP-BUS)
               MOVE "S" TO WSS-BUS-GRPO.
       FIN-BUS-PDP-X.
          EXIT.
      
      
      
      *
      *  Busca el Grupo al que se encuentre adscrito el usuario
      *  y obtiene los Privilegios asociados a ese grupo.
      *
       GET-PDP SECTION.
       INI-GET-PDP.
      *    MOVE "NEX"               TO WSS-STAT-PDP.
           MOVE ZEROES TO WSS-IDX-PDP-X.
           MOVE ZEROES TO WSS-IDX-PDP-Y.
           MOVE LOW-VALUES          TO PDP-KEY-IPDP IN PDP.
      *    MOVE RUG-COD-GRPO IN RUG TO PDP-COD-GRPO IN PDP.
           MOVE FIO-GET-NLS         TO FIO-CMND.
       CIC-GET-PDP-2.
           PERFORM GNS-FIO-PDP.
           IF  NOT FIO-STAT-OKS
                 GO TO END-GET-PDP.
      
      *    MOVE "S"     TO WSS-CERRAR-PDP.
      *    IF  RUG-COD-GRPO IN RUG NOT =
      *        PDP-COD-GRPO IN PDP
      *          GO TO END-GET-PDP.
      
      *    MOVE "OKS"   TO WSS-STAT-PDP.
           IF PDP-COD-GRPO IN PDP NOT = WSS-COD-GRUP-VIG
                MOVE PDP-COD-GRPO IN PDP TO WSS-COD-GRUP-VIG
                ADD 1  TO WSS-IDX-PDP-X
      
                MOVE PDP-COD-GRPO IN PDP TO
                     WSS-PDP-COD-GRPO-X IN
                     WSS-PDP-MTX-GRPO(WSS-IDX-PDP-X)
      
                MOVE 1 TO WSS-PDP-NOC-GRPO-X IN
                     WSS-PDP-MTX(WSS-IDX-PDP-X)
      
                IF WSS-MAX-PDP-Y < WSS-IDX-PDP-Y
                     MOVE WSS-IDX-PDP-Y TO WSS-MAX-PDP-Y
                     MOVE 1 TO WSS-IDX-PDP-Y
                ELSE
                     MOVE 1 TO WSS-IDX-PDP-Y
           ELSE
                ADD 1 TO WSS-PDP-NOC-GRPO-X IN
                         WSS-PDP-MTX(WSS-IDX-PDP-X)
                ADD 1 TO WSS-IDX-PDP-Y.
      *    DISPLAY "X , Y " WSS-IDX-PDP-X " " WSS-IDX-PDP-Y.
      *    ADD  1       TO WSS-I.
      *
           MOVE PDP-COD-SIST IN PDP TO
                WSS-PDP-COD-SIST-XY IN
                WSS-PDP-MTX(WSS-IDX-PDP-X, WSS-IDX-PDP-Y).
           MOVE PDP-COD-NEMO IN PDP TO
                WSS-PDP-COD-NEMO-XY IN
                WSS-PDP-MTX(WSS-IDX-PDP-X, WSS-IDX-PDP-Y).
           MOVE PDP-COD-CMND IN PDP TO
                WSS-PDP-COD-CMND-XY IN
                WSS-PDP-MTX(WSS-IDX-PDP-X, WSS-IDX-PDP-Y).
      *    MOVE PDP-COD-PROC IN PDP TO
      *                 WSS-PDP-COD-PROC IN WSS-PDP(WSS-I).
           MOVE PDP-IND-RESP IN PDP TO
                WSS-PDP-IND-RESP-XY IN
                WSS-PDP-MTX(WSS-IDX-PDP-X, WSS-IDX-PDP-Y).
      
      
      
      *CRG DISPLAY "CARGANDO PRV X,Y, GRP "
      *CRG         WSS-IDX-PDP-X " " WSS-IDX-PDP-Y " "
      *CRG         WSS-PDP-COD-GRPO-X IN
      *CRG         WSS-PDP-MTX-GRPO(WSS-IDX-PDP-X).
      *CRG DISPLAY WSS-PDP-COD-SIST-XY IN
      *CRG         WSS-PDP-MTX(WSS-IDX-PDP-X, WSS-IDX-PDP-Y) " "
      *CRG         WSS-PDP-COD-NEMO-XY IN
      *CRG         WSS-PDP-MTX(WSS-IDX-PDP-X, WSS-IDX-PDP-Y) " "
      *CRG         WSS-PDP-COD-CMND-XY IN
      *CRG         WSS-PDP-MTX(WSS-IDX-PDP-X, WSS-IDX-PDP-Y) " "
      *CRG         WSS-PDP-IND-RESP-XY IN
      *CRG         WSS-PDP-MTX(WSS-IDX-PDP-X, WSS-IDX-PDP-Y).
            MOVE FIO-GET-NXT TO FIO-CMND.
            GO TO CIC-GET-PDP-2.
       END-GET-PDP.
      *    IF  WSS-CERRAR-PDP = "S"
      *          MOVE "N"         TO WSS-CERRAR-PDP
      *          MOVE FIO-END-BRW TO FIO-CMND
      *          PERFORM GNS-FIO-PDP.
       FIN-GET-PDP.
           EXIT.
      *
      *  Obtiene Privilegios del Grupo "*" (si existe)
      *
       GET-PDP-ALL SECTION.
       INI-GET-PDP-ALL.
           MOVE "NEX"               TO WSS-STAT-AST.
           MOVE LOW-VALUES          TO PDP-KEY-IPDP IN PDP.
           MOVE "*"                 TO PDP-COD-GRPO IN PDP.
           MOVE FIO-GET-NLS         TO FIO-CMND.
       CIC-GET-PDP-ALL-1.
           PERFORM GNS-FIO-PDP.
           IF  NOT FIO-STAT-OKS
                 GO TO FIN-GET-PDP-ALL-1.
      
           MOVE "S"     TO WSS-CERRAR-PDP.
           IF  PDP-COD-GRPO IN PDP NOT = "*"
                 GO TO FIN-GET-PDP-ALL-1.
      
           ADD  1                        TO WSS-I.
           MOVE "OKS"                    TO WSS-STAT-AST.
      *
           MOVE PDP-COD-SIST IN PDP      TO
                        WSS-PDP-COD-SIST IN WSS-PDP(WSS-I).
           MOVE PDP-COD-NEMO IN PDP      TO
                        WSS-PDP-COD-NEMO IN WSS-PDP(WSS-I).
           MOVE PDP-COD-CMND IN PDP      TO
                        WSS-PDP-COD-CMND IN WSS-PDP(WSS-I).
      *    MOVE PDP-COD-PROC IN PDP      TO
      *                 WSS-PDP-COD-PROC IN WSS-PDP(WSS-I).
           MOVE PDP-IND-RESP IN PDP      TO
                        WSS-PDP-IND-RESP IN WSS-PDP(WSS-I).
      
           MOVE FIO-GET-NXT              TO FIO-CMND.
           GO TO CIC-GET-PDP-ALL-1.
      
       FIN-GET-PDP-ALL-1.
      
           IF  WSS-CERRAR-PDP = "S"
                 MOVE "N"         TO WSS-CERRAR-PDP
                 MOVE FIO-END-BRW TO FIO-CMND
                 PERFORM GNS-FIO-PDP.
      
       FIN-GET-PDP-ALL.
           EXIT.
      
      
       DSP-MDSP SECTION.
       INI-DSP-MDSP.
           MOVE SPACES TO WSS-GLS-MDSP.
       FIN-DSP-MDSP.
           EXIT.
      
      
      *==================================
       INI-PSWD SECTION.
       INI-INI-PSWD.
      *XFM     IF WSS-DSP-SEC = "S"
      *XFM            AND
      *XFM       WSS-DSP-INI-PSWD = "S"
      *XFM            MOVE "N" TO WSS-DSP-INI-PSWD
      *XFM            MOVE "INI-PSWD " TO WSS-GLS-MDSP
      *XFM            PERFORM DSP-MDSP.
           MOVE 1 TO DESTCOUNT.
           MOVE STATION  TO DESTINATIONDESG.
           MOVE 3000     TO TEXTLENGTH OF COMS-OUT.
           MOVE CUS-FLD TO FRM-DFLD.
           MOVE "EJE1"   TO FRM-DFLD-MSK-TRCD.
           SEND COMS-OUT FROM FRM-DFLD.
       FIN-INI-PSWD.
           EXIT.
      
       PRO-PSWD SECTION.
       INI-PRO-PSWD.
      * LUP-PRO-PSWD.
      
      
      *     IF WSS-ERR-PSWD =  "S"
      *         MOVE CUS-FLD TO FRM-DFLD
      *         PERFORM CMN-EXIT
      *         IF SYS-EXIT-YES
      *              GO TO EXT-PRO-PSWD.
      * EXT-PRO-PSWD.
       FIN-PRO-PSWD.
           EXIT.
      
      
       VAL-PSWD SECTION.
       INI-VAL-PSWD.
      
           MOVE "N" TO WSS-ERR-PSWD.
      
           MOVE LOW-VALUES            TO RUG-KEY-IRUG IN RUG.
           MOVE CUS-RCV-RUP-COD-USER  TO RUG-COD-USER IN RUG.
      *     MOVE CUS-RCV-RUP-COD-USER  TO RUP-COD-USER IN RUP.
      *     GO TO FIN-VAL-PSWD.
           MOVE FIO-GET-NLS           TO FIO-CMND.
      
           MOVE "RUG-COD-USER"  TO FIO-AKEY.
           PERFORM GNS-FIO-RUG.
           IF  NOT FIO-STAT-OKS
               MOVE "RUG    NEX" TO MSG-COD-MENS
               GO TO ERR-VAL-PSWD.
      
           IF  CUS-RCV-RUP-COD-USER NOT =
               RUG-COD-USER IN RUG
               MOVE "RUG    NEX" TO MSG-COD-MENS
               GO TO ERR-VAL-PSWD.
      
           IF  RUG-IND-VIGE IN RUG NOT = "S"
               MOVE "RUG    NVG" TO MSG-COD-MENS
               GO TO ERR-VAL-PSWD.
      
           MOVE CUS-RCV-RUP-COD-USER TO RUP-COD-USER IN RUP.
           MOVE 99999                TO RUP-NUM-CORR IN RUP.
           MOVE FIO-GET-LEQ          TO FIO-CMND.
      
      *    DISPLAY "PREVIO FIO-GET-LEQ RUP ".
      *    DISPLAY "USER: " RUP-COD-USER IN RUP.
      *    DISPLAY "CORR: " RUP-NUM-CORR IN RUP.
      *    DISPLAY "PSWP: " CUS-RCV-RUP-COD-PSWD.
           PERFORM GNS-FIO-RUP.
      *    DISPLAY "STAT " FIO-STAT.
      *    DISPLAY "USER: " RUP-COD-USER IN RUP.
      *    DISPLAY "CORR: " RUP-NUM-CORR IN RUP.
      *    DISPLAY "PSEA: " RUP-COD-PSWD IN RUP.
           IF NOT ( FIO-STAT-OKS AND
                    CUS-RCV-RUP-COD-USER = RUP-COD-USER IN RUP )
               MOVE "RUP    NEX" TO MSG-COD-MENS
               GO TO ERR-VAL-PSWD.
      
           IF RUP-NUM-INTE IN RUP NOT < 3
               MOVE "INTE>=3     " TO MSG-COD-MENS
               GO TO ERR-VAL-PSWD.
      
           MOVE FIO-BEG-TRN TO FIO-CMND.
           PERFORM GNS-FIO-RUP.
      
           MOVE FIO-GET-KEY-UPD TO FIO-CMND.
           PERFORM GNS-FIO-RUP.
           IF NOT FIO-STAT-OKS
               MOVE FIO-CHK-PNT TO FIO-CMND
               PERFORM GNS-FIO-RUP
               MOVE "RUPUPDERR" TO MSG-COD-MENS
               GO TO ERR-VAL-PSWD.
      
           IF RUP-COD-PSWD IN RUP NOT = CUS-RCV-RUP-COD-PSWD
               PERFORM SET-NUM-INTE
               MOVE FIO-MOD TO FIO-CMND
               PERFORM GNS-FIO-RUP
               IF NOT FIO-STAT-OKS
                   MOVE FIO-ULK-REC TO FIO-CMND
                   PERFORM GNS-FIO-RUP
                   MOVE "ERR    PMAL" TO MSG-COD-MENS
                   GO TO ERR-VAL-PSWD
               ELSE
                   MOVE FIO-CHK-PNT TO FIO-CMND
                   PERFORM GNS-FIO-RUP
                   MOVE "RUPPSWDERR" TO MSG-COD-MENS
                   GO TO ERR-VAL-PSWD
           ELSE
               MOVE ZEROES TO RUP-NUM-INTE IN RUP
               MOVE FIO-MOD TO FIO-CMND
               PERFORM GNS-FIO-RUP
               IF NOT FIO-STAT-OKS
                   MOVE FIO-ULK-REC TO FIO-CMND
                   PERFORM GNS-FIO-RUP
                   MOVE "ERR    PMAL" TO MSG-COD-MENS
                   GO TO ERR-VAL-PSWD
               ELSE
                   MOVE FIO-CHK-PNT TO FIO-CMND
                   PERFORM GNS-FIO-RUP.
      
           GO TO FIN-VAL-PSWD.
      
       ERR-VAL-PSWD.
           MOVE "S" TO WSS-ERR-PSWD.
           MOVE "GNS" TO MSG-COD-SIST.
           PERFORM GET-MSG.
           MOVE MSG-GLS-DESC TO CUS-SDF-TRL-GLS-MENS.
       FIN-VAL-PSWD.
           EXIT.
      
      
       SET-NUM-INTE SECTION.
       INI-SET-NUM-INTE.
           ADD 1 TO RUP-NUM-INTE IN RUP.
           IF RUP-NUM-INTE IN RUP NOT < 3
               MOVE "N" TO RUP-COD-STAT IN RUP.
       FIN-SET-NUM-INTE.
           EXIT.
       RTRA-TSC SECTION.
       INI-RTRA-TSC.
           MOVE BKP-LRCV TO TSC-LRCV.
           MOVE BKP-LRCV TO WSS-DFRM-LRCV.
       FIN-RTRA-TSC.
           EXIT.
      
      
      * FIOS REALES
       COPY GNSBFMNU OF GNS.
       COPY GNSBFRPF OF GNS.
       COPY GNSBFTSM OF GNS.
       COPY GNSBFTAB OF GNS.
       COPY GNSBFRUG OF GNS.
       COPY GNSBFPDP OF GNS.
       COPY GNSBFRUP OF GNS.
      *      GNSPFTSF DENTRO DE KNSBGQUE
      * COPY GNSBFTS OF GNS.
      
      * FIOS VIRTUALES
       COPY GNSBFMSG OF GNS.
       COPY GNSBFIDD OF GNS.
       COPY GNSBFIFD OF GNS.
       COPY GNSBGDMD OF GNS.
      
       LLN-TBL-MEM SECTION.
       INI-LLN-TBL-MEM.
      
           MOVE TAB-COD-CTAB IN TAB TO FIO-SIST.
      
           MOVE SPACES TO MNU.
           MOVE FIO-GET-NLS TO FIO-CMND.
       CIC-LLN-TBL-MEM.
           PERFORM GNS-FIO-MNU.
           IF NOT FIO-STAT-OKS
               GO TO FIN-LLN-TBL-MEM.
      
           IF MNU-COD-TFUN IN MNU NOT = "MEN"
               MOVE FIO-GET-NXT TO FIO-CMND
               GO TO CIC-LLN-TBL-MEM.
      
           ADD 1 TO MEM-TOT-MENU.
      *    PERFORM NUEVO.
      
           IF MEM-TOT-MENU > 20
                 DISPLAY
                     "================== ERROR ==================="
                 DISPLAY
                     "SISTEMA CON MAS DE 20 MENUS"
                 DISPLAY
                     "================= ABORTO =================="
                 MOVE 20 TO MEM-TOT-MENU
      *          STOP RUN
           ELSE
                 MOVE MNU-COD-NEMS IN MNU TO
                      MEM-MATR-IDX-NEMS IN MEM-MATR(MEM-TOT-MENU)
                 MOVE MNU-COD-MENU IN MNU TO
                      MEM-MATR-IDX-CMEN IN MEM-MATR(MEM-TOT-MENU)
                  DISPLAY "OPC / MEN ENCONTRADO : "
                       MNU-COD-NEMS IN MNU " / " MNU-COD-MENU IN MNU
                 MOVE FIO-GET-NXT TO FIO-CMND
                 GO TO CIC-LLN-TBL-MEM.
      
       FIN-LLN-TBL-MEM.
           EXIT.
      
      *NUEVO SECTION.
      *INI-NUEVO.
      *    IF MEM-TOT-MENU > 20
      *       MOVE 20 TO MEM-TOT-MENU.
      *FIN-NUEVO.
      *    EXIT.
      
       CRG-MEN-MEM SECTION.
       INI-CRG-MEN-MEM.
           MOVE SPACES TO MNU.
           MOVE MEM-MATR-IDX-SISF IN MEM-MATR(MEM-IDX-MENU)
                TO FIO-SIST.
           MOVE MEM-MATR-IDX-NEMS IN MEM-MATR(MEM-IDX-MENU)
                TO MNU-COD-NEMS.
           MOVE FIO-GET-KEY TO FIO-CMND.
           PERFORM GNS-FIO-MNU.
           IF NOT FIO-STAT-OKS
               DISPLAY
                    "================== ERROR ==================="
               DISPLAY
                   "MENU NO EXISTE "
               DISPLAY " MNU-COD-NEMS : " MNU-COD-NEMS
               DISPLAY
                   "================= ABORTO =================="
               STOP RUN.
      
           MOVE BKP-RC1-FLD TO RC1-FLD.
           MOVE BKP-RC2-FLD TO RC2-FLD.
           MOVE SPACES TO OPC-FLD.
           MOVE SPACES TO OP1-FLD.
      
           PERFORM GNSSCRHDR.
      
           MOVE SPACES TO MNU.
      
           MOVE MEM-MATR-IDX-SISF IN MEM-MATR(MEM-IDX-MENU)
                TO FIO-SIST.
           MOVE MEM-MATR-IDX-CMEN IN MEM-MATR(MEM-IDX-MENU)
                TO MNU-COD-CMEN.
           MOVE FIO-GET-NLS TO FIO-CMND.
      
      *PFM DISPLAY " INICIANDO BUSQUEDA CON NEMS "
      *PFM MEM-MATR-IDX-NEMS IN MEM-MATR(MEM-IDX-MENU).
      *PFM DISPLAY "INICIANDO BUSQUEDA  MENU SIST,CMEN "
      *PFM         FIO-SIST "-" MNU-COD-CMEN.
           MOVE ZEROES TO MEM-MATR-TOT-OPCI IN MEM-MATR(MEM-IDX-MENU).
      
       CIC-CRG-MEN-MEM.
           MOVE "MNU-COD-IMEN"  TO FIO-AKEY.
           PERFORM GNS-FIO-MNU.
      *    IF FIO-STAT-OKS
      *        DISPLAY "REGISTRO RECUPERADO NEMS " MNU-COD-NEMS " "
      *                MNU-COD-OPCS " " MNU-COD-IMES
      *    ELSE
      *        DISPLAY "REGISTRO NO ENCONTRADO".
      
      
           IF NOT FIO-STAT-OKS AND
              FIO-CMND = FIO-GET-NLS
               GO TO FIN-CRG-MEN-MEM.
      
           IF NOT FIO-STAT-OKS
               GO TO EXT-CRG-MEN-MEM.
      
           IF MEM-MATR-IDX-CMEN(MEM-IDX-MENU) NOT = MNU-COD-CMEN
               GO TO EXT-CRG-MEN-MEM.
      
           IF MNU-NUM-FILA NOT NUMERIC
               DISPLAY
                    "================== ERROR ==================="
               DISPLAY
                   " MENU CON FILA NO NUMERICA "
               DISPLAY " MNU-COD-NEMS : " MNU-COD-NEMS
               DISPLAY "REG PADRE : "
                 MEM-MATR-IDX-NEMS IN MEM-MATR(MEM-IDX-MENU)
               DISPLAY
                   "================= ABORTO =================="
               STOP RUN.
      
           IF MNU-NUM-COLU NOT NUMERIC
               DISPLAY
                    "================== ERROR ==================="
               DISPLAY
                   " MENU CON COLUMNA NO NUMERICA "
               DISPLAY " MNU-COD-NEMS : " MNU-COD-NEMS
               DISPLAY "REG PADRE : "
                 MEM-MATR-IDX-NEMS IN MEM-MATR(MEM-IDX-MENU)
               DISPLAY
                   "================= ABORTO =================="
               STOP RUN.
      
           IF MNU-NUM-FILA < 3 OR MNU-NUM-FILA > 22
               DISPLAY
                    "================== ERROR ==================="
               DISPLAY
                   " MENU CON FILA INVALIDA "
               DISPLAY " MNU-COD-NEMS : " MNU-COD-NEMS
               DISPLAY "REG PADRE : "
                 MEM-MATR-IDX-NEMS IN MEM-MATR(MEM-IDX-MENU)
               DISPLAY "VALOR FILA : " MNU-NUM-FILA
               DISPLAY
                   "================= ABORTO =================="
               MOVE 12 TO MNU-NUM-FILA.
      *        STOP RUN.
      
           SUBTRACT 2 FROM MNU-NUM-FILA.
           IF MNU-NUM-COLU = 1
                MOVE "0" TO WSS-IFRM
                MULTIPLY MNU-NUM-FILA BY 2 GIVING I
                SUBTRACT 1 FROM I
                MOVE MNU-COD-OPCI TO RE1-RC2-OP1-COD-OPCI( I )
                MOVE MNU-GLS-FMEN TO RE1-RC2-OP1-GLS-FMEN( I )
           ELSE
           IF MNU-NUM-COLU = 41
                MOVE "0" TO WSS-IFRM
                MULTIPLY MNU-NUM-FILA BY 2 GIVING I
                MOVE MNU-COD-OPCI TO RE1-RC2-OP1-COD-OPCI( I )
                MOVE MNU-GLS-FMEN TO RE1-RC2-OP1-GLS-FMEN( I )
           ELSE
           IF MNU-NUM-COLU = 24
                MOVE "1" TO WSS-IFRM
                MOVE MNU-COD-OPCI TO RE1-RC1-OP1-COD-OPCI(MNU-NUM-FILA)
                MOVE MNU-GLS-FMEN TO RE1-RC1-OP1-GLS-FMEN(MNU-NUM-FILA)
      * ISP 05-01-1998
                MOVE MNU-NUM-FILA TO I
           ELSE
               DISPLAY
                    "================== ERROR ==================="
               DISPLAY
                   "MENU CON COLUMNA INVALIDA "
               DISPLAY " MNU-COD-NEMS : " MNU-COD-NEMS
               DISPLAY "REG PADRE : "
                 MEM-MATR-IDX-NEMS IN MEM-MATR(MEM-IDX-MENU)
               DISPLAY
                   "================= ABORTO =================="
               DISPLAY "VALOR COLUMNA " MNU-NUM-COLU
               MOVE 24 TO MNU-NUM-COLU.
      *        STOP RUN.
      
      *XFM IF WSS-IFRM = 0
      *XFM     MOVE "0" TO OPC-COD-OPCI-ATR( I )
      
      *XFM      IF UYP-IND-RESP = "S"
      *XFM         MOVE WSS-ATR-BOLD  TO
      *XFM              WSS-ATR-RC2-ELM IN WSS-ATR-RC2( I )
      *XFM     ELSE
      *XFM         MOVE WSS-ATR-TENU TO
      *XFM              WSS-ATR-RC2-ELM IN WSS-ATR-RC2( I )
      *XFM ELSE
      *XFM IF WSS-IFRM = 1
      *XFM     MOVE "0" TO OP1-COD-OPCI-ATR(MNU-NUM-FILA)
      *XFM     IF UYP-IND-RESP = "S"
      *XFM         MOVE WSS-ATR-BOLD  TO
      *XFM              WSS-ATR-RC1-ELM IN WSS-ATR-RC1( MNU-NUM-FILA )
      *XFM     ELSE
      *XFM         MOVE WSS-ATR-TENU TO
      *XFM              WSS-ATR-RC1-ELM IN WSS-ATR-RC1( MNU-NUM-FILA ).
      
           ADD 1 TO MEM-MATR-TOT-OPCI IN MEM-MATR(MEM-IDX-MENU).
           MOVE MEM-MATR-TOT-OPCI IN MEM-MATR(MEM-IDX-MENU) TO
                  MEM-TOT-OPCI.
           MOVE MNU-COD-TFUN IN MNU TO
      *ISP 05-01-1998
      *        MATR-OPCI-TFUN IN MATR-OPCI(MEM-IDX-MENU, MEM-TOT-OPCI ).
               MATR-OPCI-TFUN IN MATR-OPCI(MEM-IDX-MENU, I ).
      
           MOVE MNU-COD-NEMO IN MNU TO
      *ISP 05-01-1998
      *        MATR-OPCI-NEMO IN MATR-OPCI(MEM-IDX-MENU, MEM-TOT-OPCI ).
               MATR-OPCI-NEMO IN MATR-OPCI(MEM-IDX-MENU, I ).
      
           MOVE MNU-COD-SIST IN MNU TO
               MATR-OPCI-SIST IN MATR-OPCI(MEM-IDX-MENU, I ).
      
      
           MOVE FIO-GET-NXT     TO FIO-CMND.
           GO TO CIC-CRG-MEN-MEM.
      
       EXT-CRG-MEN-MEM.
      
           IF WSS-IFRM = "0"
      *XFM     PERFORM MOV-RC2
               PERFORM CMPTA-RC2
      *XFM     PERFORM DSPP-RC2 VARYING WSS-IDX-AUXI-0 FROM
      *XFM       1 BY 1 UNTIL WSS-IDX-AUXI-0 > WSS-IDX-AUXI-1
      *RRM-INI 30-OCT-2000
      *         MOVE RC2-FLD TO MEM-MENU-ELM IN MEM-MENU(MEM-IDX-MENU)
                MOVE MEM-MATR-IDX-SISF IN MEM-MATR(MEM-IDX-MENU) TO
                     WSS-COD-SIST IN WSS-COD-IMEN
                MOVE MEM-MATR-IDX-CMEN IN MEM-MATR(MEM-IDX-MENU) TO
                     WSS-COD-CMEN IN WSS-COD-IMEN
                DISPLAY "RRM: LLAVE PARA GRABAR QUE-DATA= " WSS-COD-IMEN
                MOVE WSS-COD-IMEN TO QUE-TERM
                MOVE SPACES       TO QUE-TYPE
                MOVE 1            TO QUE-NITM
                MOVE RC2-FLD      TO QUE-DATA
      
                MOVE QUE-PUT TO QUE-CMND
                PERFORM GNS-PRO-QUE
      
                IF QUE-STAT = QUE-STAT-OKS
                   DISPLAY "RRM: MENU GRABADO OK"
                ELSE
                   DISPLAY "RRM: MENU NO GRABADO"
      *RRM-FIN 30-OCT-2000
           ELSE
      *XFM     PERFORM MOV-RC1
               PERFORM CMPTA-RC1
      *RRM-INI 30-OCT-2000
      *        MOVE RC1-FLD TO MEM-MENU-ELM IN MEM-MENU(MEM-IDX-MENU).
                MOVE MEM-MATR-IDX-SISF IN MEM-MATR(MEM-IDX-MENU) TO
                     WSS-COD-SIST IN WSS-COD-IMEN
                MOVE MEM-MATR-IDX-CMEN IN MEM-MATR(MEM-IDX-MENU) TO
                     WSS-COD-CMEN IN WSS-COD-IMEN
                DISPLAY "RRM: LLAVE PARA GRABAR QUE-DATA= " WSS-COD-IMEN
                MOVE WSS-COD-IMEN TO QUE-TERM
                MOVE SPACES       TO QUE-TYPE
                MOVE 1            TO QUE-NITM
                MOVE RC1-FLD      TO QUE-DATA
      
                MOVE QUE-PUT TO QUE-CMND
                PERFORM GNS-PRO-QUE
      
                IF QUE-STAT = QUE-STAT-OKS
                   DISPLAY "RRM: MENU GRABADO OK"
                ELSE
                   DISPLAY "RRM: MENU NO GRABADO".
      *RRM-FIN 30-OCT-2000
      
      *XFM     DISPLAY "PFM: RC1 YA CARGADO EN MATRIZ"
      *XFM     PERFORM DSPP-RC1 VARYING WSS-IDX-AUXI-0 FROM
      *XFM       1 BY 1 UNTIL WSS-IDX-AUXI-0 > WSS-IDX-AUXI-4
      
      *XFM DISPLAY "PFM: MTX CARGADA TRL C.A.C."
      
      *XFM DISPLAY "PFM: MTX CARGADA TRL C.A.C. -1 " WSS-IDX-AUXI-3
      
      *XFM ADD 1 TO WSS-IDX-AUXI-3
      *XFM MOVE RE1-RC1-FLD-ELM(WSS-IDX-AUXI-3) TO DPP-RC1
      *XFM ADD 1 TO WSS-IDX-AUXI-3
      
      *XFM MOVE "CARGA OK " TO WSS-AUXI-D1
      
      *XFM PERFORM DISPLA-RC1 VARYING WSS-IDX-AUXI-0 FROM 1
      *XFM      BY 1 UNTIL WSS-IDX-AUXI-0 > 46
      
      *XFM DISPLAY "PFM: MTX CARGADA TRL C.A.C. -2 " WSS-IDX-AUXI-3
      *XFM MOVE RE1-RC1-FLD-ELM(WSS-IDX-AUXI-3) TO DPP-RC1
      *XFM ADD 1 TO WSS-IDX-AUXI-3
      *XFM PERFORM DISPLA-RC1 VARYING WSS-IDX-AUXI-0 FROM 1
      *XFM      BY 1 UNTIL WSS-IDX-AUXI-0 > 46
      
      *XFM DISPLAY "PFM: MTX CARGADA TRL C.A.C. -3 " WSS-IDX-AUXI-3
      *XFM MOVE RE1-RC1-FLD-ELM(WSS-IDX-AUXI-3) TO DPP-RC1
      *XFM ADD 1 TO WSS-IDX-AUXI-3
      *XFM PERFORM DISPLA-RC1 VARYING WSS-IDX-AUXI-0 FROM 1
      *XFM      BY 1 UNTIL WSS-IDX-AUXI-0 > 46
      
      *XFM DISPLAY "PFM: MTX CARGADA TRL C.A.C. -4 " WSS-IDX-AUXI-3
      *XFM MOVE RE1-RC1-FLD-ELM(WSS-IDX-AUXI-3) TO DPP-RC1
      *XFM ADD 1 TO WSS-IDX-AUXI-3
      *XFM PERFORM DISPLA-RC1 VARYING WSS-IDX-AUXI-0 FROM 1
      *XFM      BY 1 UNTIL WSS-IDX-AUXI-0 > 46
      
      *XFM  DISPLAY "PFM: MTX CARGADA TRL C.A.C. -5 " WSS-IDX-AUXI-3
      *XFM MOVE RE1-RC1-FLD-ELM(WSS-IDX-AUXI-3) TO DPP-RC1
      *XFM ADD 1 TO WSS-IDX-AUXI-3
      *XFM PERFORM DISPLA-RC1 VARYING WSS-IDX-AUXI-0 FROM 1
      *XFM      BY 1 UNTIL WSS-IDX-AUXI-0 > 46
      
      *XFM DISPLAY "PFM: MTX CARGADA TRL C.A.C. -6 " WSS-IDX-AUXI-3
      *XFM MOVE RE1-RC1-FLD-ELM(WSS-IDX-AUXI-3) TO DPP-RC1
      *XFM ADD 1 TO WSS-IDX-AUXI-3
      *XFM PERFORM DISPLA-RC1 VARYING WSS-IDX-AUXI-0 FROM 1
      *XFM      BY 1 UNTIL WSS-IDX-AUXI-0 > 46.
      
      
       FIN-CRG-MEN-MEM.
           EXIT.
      
       DSPP-RC2 SECTION.
       INI-DSPP-RC2.
      *XFM DISPLAY "RC2 / OPCI+FMEN : "
      *XFM  RE1-RC2-OP1-COD-OPCI IN RE1-RC2-FLD(WSS-IDX-AUXI-0)
      *XFM     "+"
      *XFM  RE1-RC2-OP1-GLS-FMEN IN RE1-RC2-FLD(WSS-IDX-AUXI-0).
       FIN-DSPP-RC2.
           EXIT.
      
       DSPP-RC1 SECTION.
       INI-DSPP-RC1.
      *XFM DISPLAY "RC1 / OPCI+FMEN : "
      *XFM  RE1-RC1-OP1-COD-OPCI IN RE1-RC1-FLD(WSS-IDX-AUXI-0)
      *XFM     "+"
      *XFM  RE1-RC1-OP1-GLS-FMEN IN RE1-RC1-FLD(WSS-IDX-AUXI-0).
       FIN-DSPP-RC1.
           EXIT.
      
      *====================================================
      
       DISPLA-RC1 SECTION.
       INI-DISPLA-RC1.
      
           IF DPP-RC1-ELM(WSS-IDX-AUXI-0) = "A"
                DISPLAY "PFM: " WSS-AUXI-D1 "EN RC1 ELM : "
                   WSS-IDX-AUXI-0
                   " VALE : " DPP-RC1-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC1.
      
           IF DPP-RC1-ELM(WSS-IDX-AUXI-0) = "B"
                DISPLAY "PFM: " WSS-AUXI-D1 "EN RC1 ELM : "
                   WSS-IDX-AUXI-0
                   " VALE : " DPP-RC1-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC1.
      
           IF DPP-RC1-ELM(WSS-IDX-AUXI-0) = "C"
                DISPLAY "PFM: " WSS-AUXI-D1 "EN RC1 ELM : "
                   WSS-IDX-AUXI-0
                   " VALE : " DPP-RC1-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC1.
      
           IF DPP-RC1-ELM(WSS-IDX-AUXI-0) = "D"
                DISPLAY "PFM: " WSS-AUXI-D1 "EN RC1 ELM : "
                   WSS-IDX-AUXI-0
                   " VALE : " DPP-RC1-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC1.
      
           IF DPP-RC1-ELM(WSS-IDX-AUXI-0) = "E"
                DISPLAY "PFM: " WSS-AUXI-D1 "EN RC1 ELM : "
                   WSS-IDX-AUXI-0
                   " VALE : " DPP-RC1-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC1.
      
           IF DPP-RC1-ELM(WSS-IDX-AUXI-0) = "F"
                DISPLAY "PFM: " WSS-AUXI-D1 "EN RC1 ELM : "
                   WSS-IDX-AUXI-0
                   " VALE : " DPP-RC1-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC1.
      
           IF DPP-RC1-ELM(WSS-IDX-AUXI-0) = "G"
                DISPLAY "PFM: " WSS-AUXI-D1 "EN RC1 ELM : "
                   WSS-IDX-AUXI-0
                   " VALE : " DPP-RC1-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC1.
      
           IF DPP-RC1-ELM(WSS-IDX-AUXI-0) = "H"
                DISPLAY "PFM: " WSS-AUXI-D1 "EN RC1 ELM : "
                   WSS-IDX-AUXI-0
                   " VALE : " DPP-RC1-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC1.
      
           IF DPP-RC1-ELM(WSS-IDX-AUXI-0) = "I"
                DISPLAY "PFM: " WSS-AUXI-D1 "EN RC1 ELM : "
                   WSS-IDX-AUXI-0
                   " VALE : " DPP-RC1-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC1.
      
           IF DPP-RC1-ELM(WSS-IDX-AUXI-0) = "J"
                DISPLAY "PFM: " WSS-AUXI-D1 "EN RC1 ELM : "
                   WSS-IDX-AUXI-0
                   " VALE : " DPP-RC1-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC1.
      
           IF DPP-RC1-ELM(WSS-IDX-AUXI-0) = "K"
                DISPLAY "PFM: " WSS-AUXI-D1 "EN RC1 ELM : "
                   WSS-IDX-AUXI-0
                   " VALE : " DPP-RC1-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC1.
      
           IF DPP-RC1-ELM(WSS-IDX-AUXI-0) = "L"
                DISPLAY "PFM: " WSS-AUXI-D1 "EN RC1 ELM : "
                   WSS-IDX-AUXI-0
                   " VALE : " DPP-RC1-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC1.
      
           IF DPP-RC1-ELM(WSS-IDX-AUXI-0) = "M"
                DISPLAY "PFM: " WSS-AUXI-D1 "EN RC1 ELM : "
                   WSS-IDX-AUXI-0
                   " VALE : " DPP-RC1-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC1.
      
           IF DPP-RC1-ELM(WSS-IDX-AUXI-0) = "N"
                DISPLAY "PFM: " WSS-AUXI-D1 "EN RC1 ELM : "
                   WSS-IDX-AUXI-0
                   " VALE : " DPP-RC1-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC1.
      
           IF DPP-RC1-ELM(WSS-IDX-AUXI-0) = "O"
                DISPLAY "PFM: " WSS-AUXI-D1 "EN RC1 ELM : "
                   WSS-IDX-AUXI-0
                   " VALE : " DPP-RC1-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC1.
      
           IF DPP-RC1-ELM(WSS-IDX-AUXI-0) = "P"
                DISPLAY "PFM: " WSS-AUXI-D1 "EN RC1 ELM : "
                   WSS-IDX-AUXI-0
                   " VALE : " DPP-RC1-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC1.
      
           IF DPP-RC1-ELM(WSS-IDX-AUXI-0) = "Q"
                DISPLAY "PFM: " WSS-AUXI-D1 "EN RC1 ELM : "
                   WSS-IDX-AUXI-0
                   " VALE : " DPP-RC1-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC1.
      
           IF DPP-RC1-ELM(WSS-IDX-AUXI-0) = "R"
                DISPLAY "PFM: " WSS-AUXI-D1 "EN RC1 ELM : "
                   WSS-IDX-AUXI-0
                   " VALE : " DPP-RC1-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC1.
      
           IF DPP-RC1-ELM(WSS-IDX-AUXI-0) = "S"
                DISPLAY "PFM: " WSS-AUXI-D1 "EN RC1 ELM : "
                   WSS-IDX-AUXI-0
                   " VALE : " DPP-RC1-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC1.
      
           IF DPP-RC1-ELM(WSS-IDX-AUXI-0) = "T"
                DISPLAY "PFM: " WSS-AUXI-D1 "EN RC1 ELM : "
                   WSS-IDX-AUXI-0
                   " VALE : " DPP-RC1-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC1.
      
           IF DPP-RC1-ELM(WSS-IDX-AUXI-0) = "U"
                DISPLAY "PFM: " WSS-AUXI-D1 "EN RC1 ELM : "
                   WSS-IDX-AUXI-0
                   " VALE : " DPP-RC1-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC1.
      
           IF DPP-RC1-ELM(WSS-IDX-AUXI-0) = "V"
                DISPLAY "PFM: " WSS-AUXI-D1 "EN RC1 ELM : "
                   WSS-IDX-AUXI-0
                   " VALE : " DPP-RC1-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC1.
      
           IF DPP-RC1-ELM(WSS-IDX-AUXI-0) = "W"
                DISPLAY "PFM: " WSS-AUXI-D1 "EN RC1 ELM : "
                   WSS-IDX-AUXI-0
                   " VALE : " DPP-RC1-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC1.
      
           IF DPP-RC1-ELM(WSS-IDX-AUXI-0) = "X"
                DISPLAY "PFM: " WSS-AUXI-D1 "EN RC1 ELM : "
                   WSS-IDX-AUXI-0
                   " VALE : " DPP-RC1-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC1.
      
           IF DPP-RC1-ELM(WSS-IDX-AUXI-0) = "Y"
                DISPLAY "PFM: " WSS-AUXI-D1 "EN RC1 ELM : "
                   WSS-IDX-AUXI-0
                   " VALE : " DPP-RC1-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC1.
      
           IF DPP-RC1-ELM(WSS-IDX-AUXI-0) = "Z"
                DISPLAY "PFM: " WSS-AUXI-D1 "EN RC1 ELM : "
                   WSS-IDX-AUXI-0
                   " VALE : " DPP-RC1-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC1.
      
           IF DPP-RC1-ELM(WSS-IDX-AUXI-0) = "0"
                DISPLAY "PFM: " WSS-AUXI-D1 "EN RC1 ELM : "
                   WSS-IDX-AUXI-0
                   " VALE : " DPP-RC1-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC1.
      
           IF DPP-RC1-ELM(WSS-IDX-AUXI-0) = "1"
                DISPLAY "PFM: " WSS-AUXI-D1 "EN RC1 ELM : "
                   WSS-IDX-AUXI-0
                   " VALE : " DPP-RC1-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC1.
      
           IF DPP-RC1-ELM(WSS-IDX-AUXI-0) = "2"
                DISPLAY "PFM: " WSS-AUXI-D1 "EN RC1 ELM : "
                   WSS-IDX-AUXI-0
                   " VALE : " DPP-RC1-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC1.
      
           IF DPP-RC1-ELM(WSS-IDX-AUXI-0) = "3"
                DISPLAY "PFM: " WSS-AUXI-D1 "EN RC1 ELM : "
                   WSS-IDX-AUXI-0
                   " VALE : " DPP-RC1-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC1.
      
           IF DPP-RC1-ELM(WSS-IDX-AUXI-0) = "4"
                DISPLAY "PFM: " WSS-AUXI-D1 "EN RC1 ELM : "
                   WSS-IDX-AUXI-0
                   " VALE : " DPP-RC1-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC1.
      
           IF DPP-RC1-ELM(WSS-IDX-AUXI-0) = "5"
                DISPLAY "PFM: " WSS-AUXI-D1 "EN RC1 ELM : "
                   WSS-IDX-AUXI-0
                   " VALE : " DPP-RC1-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC1.
      
           IF DPP-RC1-ELM(WSS-IDX-AUXI-0) = "6"
                DISPLAY "PFM: " WSS-AUXI-D1 "EN RC1 ELM : "
                   WSS-IDX-AUXI-0
                   " VALE : " DPP-RC1-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC1.
      
           IF DPP-RC1-ELM(WSS-IDX-AUXI-0) = "7"
                DISPLAY "PFM: " WSS-AUXI-D1 "EN RC1 ELM : "
                   WSS-IDX-AUXI-0
                   " VALE : " DPP-RC1-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC1.
      
           IF DPP-RC1-ELM(WSS-IDX-AUXI-0) = "8"
                DISPLAY "PFM: " WSS-AUXI-D1 "EN RC1 ELM : "
                   WSS-IDX-AUXI-0
                   " VALE : " DPP-RC1-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC1.
      
           IF DPP-RC1-ELM(WSS-IDX-AUXI-0) = "9"
                DISPLAY "PFM: " WSS-AUXI-D1 "EN RC1 ELM : "
                   WSS-IDX-AUXI-0
                   " VALE : " DPP-RC1-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC1.
      
           IF DPP-RC1-ELM(WSS-IDX-AUXI-0) = "("
                DISPLAY "PFM: " WSS-AUXI-D1 "EN RC1 ELM : "
                   WSS-IDX-AUXI-0
                   " VALE : " DPP-RC1-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC1.
      
           IF DPP-RC1-ELM(WSS-IDX-AUXI-0) = ")"
                DISPLAY "PFM: " WSS-AUXI-D1 "EN RC1 ELM : "
                    WSS-IDX-AUXI-0
                   " VALE : " DPP-RC1-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC1.
      
           IF DPP-RC1-ELM(WSS-IDX-AUXI-0) = "-"
                DISPLAY "PFM: " WSS-AUXI-D1 "EN RC1 ELM : "
                   WSS-IDX-AUXI-0
                   " VALE : " DPP-RC1-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC1.
      
           IF DPP-RC1-ELM(WSS-IDX-AUXI-0) = " "
                DISPLAY "PFM: " WSS-AUXI-D1 "EN RC1 ELM : "
                WSS-IDX-AUXI-0
                   " VALE : SPACES"
               GO TO FIN-DISPLA-RC1.
      
           MOVE 999 TO WSS-IDX-AUXI-2.
      
           PERFORM DISPLA-RC1-256 VARYING WSS-IDX-AUXI-1 FROM 1 BY 1
                  UNTIL WSS-IDX-AUXI-1 > 256.
      
           IF WSS-IDX-AUXI-2 = 999
               DISPLAY "PFM: " WSS-AUXI-D1 "EN RC1 ELM : "
               WSS-IDX-AUXI-0
                   " NO ENCONTRADO"
               GO TO FIN-DISPLA-RC1.
      
           SUBTRACT 1 FROM WSS-IDX-AUXI-2.
      
           DISPLAY "PFM: " WSS-AUXI-D1 "EN RC1 ELM : "
                   WSS-IDX-AUXI-0
                   " ES>> : " WSS-IDX-AUXI-2.
       FIN-DISPLA-RC1.
           EXIT.
      
       DISPLA-RC1-256 SECTION.
       INI-DISPLA-RC1-256.
           IF DPP-RC1-ELM(WSS-IDX-AUXI-0) =
              WSS-ELM-HEX(WSS-IDX-AUXI-1)
                MOVE WSS-IDX-AUXI-1 TO WSS-IDX-AUXI-2
                MOVE 257 TO WSS-IDX-AUXI-1.
       FIN-DISPLA-RC1-256.
           EXIT.
      
       DISPLA-RC2 SECTION.
       INI-DISPLA-RC2.
           IF MEM-IDX-MENU NOT = 1
               GO TO FIN-DISPLA-RC2.
           MOVE 999 TO WSS-IDX-AUXI-2.
      
           PERFORM DISPLA-RC2-256 VARYING WSS-IDX-AUXI-1 FROM 1 BY 1
                  UNTIL WSS-IDX-AUXI-1 > 256.
      
           IF WSS-IDX-AUXI-2 = 999
               DISPLAY "PFM: EN RC2 ELM : " WSS-IDX-AUXI-0
                   " NO ENCONTRADO"
               GO TO FIN-DISPLA-RC2.
      
           IF RE2-RC2-ELM(WSS-IDX-AUXI-0) = "A"
                DISPLAY "PFM EN RC2 ELM : " WSS-IDX-AUXI-0
                   " VALE : " RE2-RC2-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC2.
      
           IF RE2-RC2-ELM(WSS-IDX-AUXI-0) = "B"
                DISPLAY "PFM EN RC2 ELM : " WSS-IDX-AUXI-0
                   " VALE : " RE2-RC2-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC2.
      
           IF RE2-RC2-ELM(WSS-IDX-AUXI-0) = "C"
                DISPLAY "PFM EN RC2 ELM : " WSS-IDX-AUXI-0
                   " VALE : " RE2-RC2-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC2.
      
           IF RE2-RC2-ELM(WSS-IDX-AUXI-0) = "D"
                DISPLAY "PFM EN RC2 ELM : " WSS-IDX-AUXI-0
                   " VALE : " RE2-RC2-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC2.
      
           IF RE2-RC2-ELM(WSS-IDX-AUXI-0) = "E"
                DISPLAY "PFM EN RC2 ELM : " WSS-IDX-AUXI-0
                   " VALE : " RE2-RC2-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC2.
      
           IF RE2-RC2-ELM(WSS-IDX-AUXI-0) = "F"
                DISPLAY "PFM EN RC2 ELM : " WSS-IDX-AUXI-0
                   " VALE : " RE2-RC2-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC2.
      
           IF RE2-RC2-ELM(WSS-IDX-AUXI-0) = "G"
                DISPLAY "PFM EN RC2 ELM : " WSS-IDX-AUXI-0
                   " VALE : " RE2-RC2-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC2.
      
           IF RE2-RC2-ELM(WSS-IDX-AUXI-0) = "H"
                DISPLAY "PFM EN RC2 ELM : " WSS-IDX-AUXI-0
                   " VALE : " RE2-RC2-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC2.
      
           IF RE2-RC2-ELM(WSS-IDX-AUXI-0) = "I"
                DISPLAY "PFM EN RC2 ELM : " WSS-IDX-AUXI-0
                   " VALE : " RE2-RC2-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC2.
      
           IF RE2-RC2-ELM(WSS-IDX-AUXI-0) = "J"
                DISPLAY "PFM EN RC2 ELM : " WSS-IDX-AUXI-0
                   " VALE : " RE2-RC2-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC2.
      
           IF RE2-RC2-ELM(WSS-IDX-AUXI-0) = "K"
                DISPLAY "PFM EN RC2 ELM : " WSS-IDX-AUXI-0
                   " VALE : " RE2-RC2-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC2.
      
           IF RE2-RC2-ELM(WSS-IDX-AUXI-0) = "L"
                DISPLAY "PFM EN RC2 ELM : " WSS-IDX-AUXI-0
                   " VALE : " RE2-RC2-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC2.
      
           IF RE2-RC2-ELM(WSS-IDX-AUXI-0) = "M"
                DISPLAY "PFM EN RC2 ELM : " WSS-IDX-AUXI-0
                   " VALE : " RE2-RC2-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC2.
      
           IF RE2-RC2-ELM(WSS-IDX-AUXI-0) = "N"
                DISPLAY "PFM EN RC2 ELM : " WSS-IDX-AUXI-0
                   " VALE : " RE2-RC2-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC2.
      
           IF RE2-RC2-ELM(WSS-IDX-AUXI-0) = "O"
                DISPLAY "PFM EN RC2 ELM : " WSS-IDX-AUXI-0
                   " VALE : " RE2-RC2-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC2.
      
           IF RE2-RC2-ELM(WSS-IDX-AUXI-0) = "P"
                DISPLAY "PFM EN RC2 ELM : " WSS-IDX-AUXI-0
                   " VALE : " RE2-RC2-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC2.
      
           IF RE2-RC2-ELM(WSS-IDX-AUXI-0) = "Q"
                DISPLAY "PFM EN RC2 ELM : " WSS-IDX-AUXI-0
                   " VALE : " RE2-RC2-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC2.
      
           IF RE2-RC2-ELM(WSS-IDX-AUXI-0) = "R"
                DISPLAY "PFM EN RC2 ELM : " WSS-IDX-AUXI-0
                   " VALE : " RE2-RC2-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC2.
      
           IF RE2-RC2-ELM(WSS-IDX-AUXI-0) = "S"
                DISPLAY "PFM EN RC2 ELM : " WSS-IDX-AUXI-0
                   " VALE : " RE2-RC2-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC2.
      
           IF RE2-RC2-ELM(WSS-IDX-AUXI-0) = "T"
                DISPLAY "PFM EN RC2 ELM : " WSS-IDX-AUXI-0
                   " VALE : " RE2-RC2-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC2.
      
           IF RE2-RC2-ELM(WSS-IDX-AUXI-0) = "U"
                DISPLAY "PFM EN RC2 ELM : " WSS-IDX-AUXI-0
                   " VALE : " RE2-RC2-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC2.
      
           IF RE2-RC2-ELM(WSS-IDX-AUXI-0) = "V"
                DISPLAY "PFM EN RC2 ELM : " WSS-IDX-AUXI-0
                   " VALE : " RE2-RC2-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC2.
      
           IF RE2-RC2-ELM(WSS-IDX-AUXI-0) = "W"
                DISPLAY "PFM EN RC2 ELM : " WSS-IDX-AUXI-0
                   " VALE : " RE2-RC2-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC2.
      
           IF RE2-RC2-ELM(WSS-IDX-AUXI-0) = "X"
                DISPLAY "PFM EN RC2 ELM : " WSS-IDX-AUXI-0
                   " VALE : " RE2-RC2-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC2.
      
           IF RE2-RC2-ELM(WSS-IDX-AUXI-0) = "Y"
                DISPLAY "PFM EN RC2 ELM : " WSS-IDX-AUXI-0
                   " VALE : " RE2-RC2-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC2.
      
           IF RE2-RC2-ELM(WSS-IDX-AUXI-0) = "Z"
                DISPLAY "PFM EN RC2 ELM : " WSS-IDX-AUXI-0
                   " VALE : " RE2-RC2-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC2.
      
           IF RE2-RC2-ELM(WSS-IDX-AUXI-0) = "0"
                DISPLAY "PFM EN RC2 ELM : " WSS-IDX-AUXI-0
                   " VALE : " RE2-RC2-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC2.
      
           IF RE2-RC2-ELM(WSS-IDX-AUXI-0) = "1"
                DISPLAY "PFM EN RC2 ELM : " WSS-IDX-AUXI-0
                   " VALE : " RE2-RC2-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC2.
      
           IF RE2-RC2-ELM(WSS-IDX-AUXI-0) = "2"
                DISPLAY "PFM EN RC2 ELM : " WSS-IDX-AUXI-0
                   " VALE : " RE2-RC2-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC2.
      
           IF RE2-RC2-ELM(WSS-IDX-AUXI-0) = "3"
                DISPLAY "PFM EN RC2 ELM : " WSS-IDX-AUXI-0
                   " VALE : " RE2-RC2-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC2.
      
           IF RE2-RC2-ELM(WSS-IDX-AUXI-0) = "4"
                DISPLAY "PFM EN RC2 ELM : " WSS-IDX-AUXI-0
                   " VALE : " RE2-RC2-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC2.
      
           IF RE2-RC2-ELM(WSS-IDX-AUXI-0) = "5"
                DISPLAY "PFM EN RC2 ELM : " WSS-IDX-AUXI-0
                   " VALE : " RE2-RC2-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC2.
      
           IF RE2-RC2-ELM(WSS-IDX-AUXI-0) = "6"
                DISPLAY "PFM EN RC2 ELM : " WSS-IDX-AUXI-0
                   " VALE : " RE2-RC2-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC2.
      
           IF RE2-RC2-ELM(WSS-IDX-AUXI-0) = "7"
                DISPLAY "PFM EN RC2 ELM : " WSS-IDX-AUXI-0
                   " VALE : " RE2-RC2-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC2.
      
           IF RE2-RC2-ELM(WSS-IDX-AUXI-0) = "8"
                DISPLAY "PFM EN RC2 ELM : " WSS-IDX-AUXI-0
                   " VALE : " RE2-RC2-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC2.
      
           IF RE2-RC2-ELM(WSS-IDX-AUXI-0) = "9"
                DISPLAY "PFM EN RC2 ELM : " WSS-IDX-AUXI-0
                   " VALE : " RE2-RC2-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC2.
      
           IF RE2-RC2-ELM(WSS-IDX-AUXI-0) = "("
                DISPLAY "PFM EN RC2 ELM : " WSS-IDX-AUXI-0
                   " VALE : " RE2-RC2-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC2.
      
           IF RE2-RC2-ELM(WSS-IDX-AUXI-0) = ")"
                DISPLAY "PFM EN RC2 ELM : " WSS-IDX-AUXI-0
                   " VALE : " RE2-RC2-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC2.
      
           IF RE2-RC2-ELM(WSS-IDX-AUXI-0) = "-"
                DISPLAY "PFM EN RC2 ELM : " WSS-IDX-AUXI-0
                   " VALE : " RE2-RC2-ELM(WSS-IDX-AUXI-0)
               GO TO FIN-DISPLA-RC2.
      
           IF RE2-RC2-ELM(WSS-IDX-AUXI-0) = " "
                DISPLAY "PFM EN RC2 ELM : " WSS-IDX-AUXI-0
                   " VALE : SPACES"
               GO TO FIN-DISPLA-RC2.
      
           SUBTRACT 1 FROM WSS-IDX-AUXI-2.
      
           DISPLAY "PFM EN RC2 ELM : " WSS-IDX-AUXI-0
                   " ES>> : " WSS-IDX-AUXI-2.
       FIN-DISPLA-RC2.
           EXIT.
      
       DISPLA-RC2-256 SECTION.
       INI-DISPLA-RC2-256.
           IF RE2-RC2-ELM(WSS-IDX-AUXI-0) =
              WSS-ELM-HEX(WSS-IDX-AUXI-1)
                MOVE WSS-IDX-AUXI-1 TO WSS-IDX-AUXI-2
                MOVE 257 TO WSS-IDX-AUXI-1.
       FIN-DISPLA-RC2-256.
           EXIT.
      
      *====================================================
       CMPTA-RC1 SECTION.
       INI-CMPTA-RC1.
      * BUSCA PRIMER ELEMENTO VACIO
           MOVE 1 TO MEM-IDX-MEN1.
       NXT-CMPTA-RC1.
           IF RE1-RC1-OP1-COD-OPCI IN RE1-RC1-FLD(MEM-IDX-MEN1) > SPACES
      
               ADD 1 TO MEM-IDX-MEN1
               GO TO NXT-CMPTA-RC1.
      
           PERFORM CMPTA-RC1-IDX VARYING MEM-IDX-MEN2 FROM
                                 MEM-IDX-MEN1 BY 1
                                 UNTIL MEM-IDX-MEN2 > 19.
      * MEM-IDX-MEN1 = POSICION INICION NUEVO TRL ;
      * MEM-IDX-MEN1 = HDR + 42 * TOT_OCUR[MEM-IDX-MEN1] + 1
           SUBTRACT 1 FROM MEM-IDX-MEN1.
           MOVE MEM-IDX-MEN1 TO WSS-IDX-AUXI-1.
           MOVE MEM-IDX-MEN1 TO WSS-IDX-AUXI-3.
           MOVE MEM-IDX-MEN1 TO WSS-IDX-AUXI-4.
      *XFM DISPLAY "PFM: TOTAL ELEMENTOS COMPACTADOS PARA RC1 "
      *XFM                MEM-IDX-MEN1.
      *XFM COMPUTE MEM-IDX-MEN1 = 140 + ( 46 * MEM-IDX-MEN1 ) + 1.
           COMPUTE MEM-IDX-MEN1 = 140 + ( 42 * MEM-IDX-MEN1 ) + 1.
      
      *XFM DISPLAY "PFM: POSICION INIC PARA COMPACTAR TRL RC1 ".
      *XFM DISPLAY "PFM: MEM-IDX-MEN1 : " MEM-IDX-MEN1.
      
      * MEM-IDX-MEN2 = POSICION ORIGINAL INICIO  TRL
      *XFM MOVE 1015 TO MEM-IDX-MEN2.
           MOVE  939 TO MEM-IDX-MEN2.
      * TRANSFERIR TRL SEGUN SU LARGO ( 257 )
           PERFORM CMPTA-RC1-TRL VARYING MEM-IDX-MEN3 FROM
                            1 BY 1 UNTIL MEM-IDX-MEN3 > 257.
      *RRM-INI 26-OCT-2000
           MOVE RC1-HDR-GLS-FPRO IN RC1-FLD TO WSS-OCC-MEN-2.
           MOVE MEM-IDX-MEN1                TO WSS-OCC-MEN-3.
           DISPLAY WSS-DSPL-OCC-MEN.
      *RRM-FIN 26-OCT-2000
       FIN-CMPTA-RC1.
           EXIT.
      
       CMPTA-RC1-IDX SECTION.
       INI-CMPTA-RC1-IDX.
           IF RE1-RC1-OP1-COD-OPCI IN RE1-RC1-FLD(MEM-IDX-MEN2) > SPACES
      
           MOVE MATR-OPCI-TFUN IN MATR-OPCI(MEM-IDX-MENU, MEM-IDX-MEN2)
                          TO
                MATR-OPCI-TFUN IN MATR-OPCI(MEM-IDX-MENU, MEM-IDX-MEN1)
           MOVE MATR-OPCI-NEMO IN MATR-OPCI(MEM-IDX-MENU, MEM-IDX-MEN2)
                          TO
                MATR-OPCI-NEMO IN MATR-OPCI(MEM-IDX-MENU, MEM-IDX-MEN1)
           MOVE MATR-OPCI-SIST IN MATR-OPCI(MEM-IDX-MENU, MEM-IDX-MEN2)
                          TO
                MATR-OPCI-SIST IN MATR-OPCI(MEM-IDX-MENU, MEM-IDX-MEN1)
      
               MOVE RE1-RC1-FLD-ELM(MEM-IDX-MEN2) TO
                    RE1-RC1-FLD-ELM(MEM-IDX-MEN1)
               ADD 1 TO MEM-IDX-MEN1.
           MOVE SPACES TO RE1-RC1-FLD-ELM(MEM-IDX-MEN2).
           MOVE SPACES TO
                MATR-OPCI-TFUN IN MATR-OPCI(MEM-IDX-MENU, MEM-IDX-MEN2).
           MOVE SPACES TO
                MATR-OPCI-NEMO IN MATR-OPCI(MEM-IDX-MENU, MEM-IDX-MEN2).
           MOVE SPACES TO
                MATR-OPCI-SIST IN MATR-OPCI(MEM-IDX-MENU, MEM-IDX-MEN2).
       FIN-CMPTA-RC1-IDX.
           EXIT.
      
       CMPTA-RC1-TRL SECTION.
       INI-CMPTA-RC1-TRL.
      *XFM DISPLAY "PFM: CMPTA-RC1-TRL MEM-IDX-MEN3,2,1 " MEM-IDX-MEN3
      *XFM     " " MEM-IDX-MEN2 " " MEM-IDX-MEN1.
      *XFM MOVE RE2-RC1-ELM IN RE2-RC1-FLD(MEM-IDX-MEN2) TO DPP-RC1.
      *XFM  PERFORM DISPLA-RC1 VARYING WSS-IDX-AUXI-0 FROM 1
      *XFM       BY 1 UNTIL WSS-IDX-AUXI-0 > 1.
      
           MOVE RE2-RC1-ELM IN RE2-RC1-FLD(MEM-IDX-MEN2) TO
                RE2-RC1-ELM IN RE2-RC1-FLD(MEM-IDX-MEN1).
      
      *XFM MOVE RE2-RC1-ELM IN RE2-RC1-FLD(MEM-IDX-MEN1) TO DPP-RC1.
      *XFM PERFORM DISPLA-RC1 VARYING WSS-IDX-AUXI-0 FROM 1
      *XFM      BY 1 UNTIL WSS-IDX-AUXI-0 > 1.
      
           MOVE SPACES TO RE2-RC1-ELM IN RE2-RC1-FLD(MEM-IDX-MEN2).
           ADD 1 TO MEM-IDX-MEN1.
           ADD 1 TO MEM-IDX-MEN2.
       FIN-CMPTA-RC1-TRL.
           EXIT.
      
       CMPTA-RC2 SECTION.
       INI-CMPTA-RC2.
      * BUSCA PRIMER ELEMENTO VACIO
           MOVE 1 TO MEM-IDX-MEN1.
       NXT-CMPTA-RC2.
           IF RE1-RC2-OP1-COD-OPCI IN RE1-RC2-FLD(MEM-IDX-MEN1) > SPACES
      
               ADD 1 TO MEM-IDX-MEN1
               GO TO NXT-CMPTA-RC2.
      
           PERFORM CMPTA-RC2-IDX VARYING MEM-IDX-MEN2
                                 FROM MEM-IDX-MEN1 BY 1
                                 UNTIL MEM-IDX-MEN2 > 38.
      * MEM-IDX-MEN1 = POSICION INICION NUEVO TRL ;
      * MEM-IDX-MEN1 = HDR + 46 * TOT_OCUR + 1
           SUBTRACT 1 FROM MEM-IDX-MEN1.
      *XFM DISPLAY "PFM: TOTAL ELEMENTOS COMPACTADOS PARA RC2 "
      *XFM                MEM-IDX-MEN1.
           MOVE MEM-IDX-MEN1 TO WSS-IDX-AUXI-1.
           MOVE MEM-IDX-MEN1 TO WSS-IDX-AUXI-3.
      *XFM COMPUTE MEM-IDX-MEN1 = 140 + ( 46 * MEM-IDX-MEN1 ) + 1.
           COMPUTE MEM-IDX-MEN1 = 140 + ( 42 * MEM-IDX-MEN1 ) + 1.
      
      *XFM DISPLAY "PFM: POSICION INIC PARA COMPACTAR TRL RC2 ".
      *XFM DISPLAY "PFM: MEM-IDX-MEN1 : " MEM-IDX-MEN1.
      
      
      * MEM-IDX-MEN2 = POSICION ORIGINAL INICIO  TRL
      *    MOVE 1889 TO MEM-IDX-MEN2.
           MOVE 1737 TO MEM-IDX-MEN2.
      * TRANFERIR TRL SEGUN SU LARGO ( 257 )
           PERFORM CMPTA-RC2-TRL VARYING MEM-IDX-MEN3 FROM
                    1 BY 1 UNTIL MEM-IDX-MEN3 > 257.
      
      *RRM-INI 26-OCT-2000
           MOVE RC2-HDR-GLS-FPRO IN RC2-FLD TO WSS-OCC-MEN-2.
           MOVE MEM-IDX-MEN1                TO WSS-OCC-MEN-3.
           DISPLAY WSS-DSPL-OCC-MEN.
      *RRM-FIN 26-OCT-2000
       FIN-CMPTA-RC2.
           EXIT.
      
       CMPTA-RC2-IDX SECTION.
       INI-CMPTA-RC2-IDX.
           IF RE1-RC2-OP1-COD-OPCI IN RE1-RC2-FLD(MEM-IDX-MEN2) > SPACES
      
           MOVE MATR-OPCI-TFUN IN MATR-OPCI(MEM-IDX-MENU, MEM-IDX-MEN2)
                          TO
                MATR-OPCI-TFUN IN MATR-OPCI(MEM-IDX-MENU, MEM-IDX-MEN1)
           MOVE MATR-OPCI-NEMO IN MATR-OPCI(MEM-IDX-MENU, MEM-IDX-MEN2)
                          TO
                MATR-OPCI-NEMO IN MATR-OPCI(MEM-IDX-MENU, MEM-IDX-MEN1)
           MOVE MATR-OPCI-SIST IN MATR-OPCI(MEM-IDX-MENU, MEM-IDX-MEN2)
                          TO
                MATR-OPCI-SIST IN MATR-OPCI(MEM-IDX-MENU, MEM-IDX-MEN1)
      
               MOVE RE1-RC2-FLD-ELM(MEM-IDX-MEN2) TO
                    RE1-RC2-FLD-ELM(MEM-IDX-MEN1)
               ADD 1 TO MEM-IDX-MEN1.
           MOVE SPACES TO RE1-RC2-FLD-ELM(MEM-IDX-MEN2).
           MOVE SPACES TO
                MATR-OPCI-TFUN IN MATR-OPCI(MEM-IDX-MENU, MEM-IDX-MEN2).
           MOVE SPACES TO
                MATR-OPCI-NEMO IN MATR-OPCI(MEM-IDX-MENU, MEM-IDX-MEN2).
           MOVE SPACES TO
                MATR-OPCI-SIST IN MATR-OPCI(MEM-IDX-MENU, MEM-IDX-MEN2).
       FIN-CMPTA-RC2-IDX.
           EXIT.
      
       CMPTA-RC2-TRL SECTION.
       INI-CMPTA-RC2-TRL.
           MOVE RE2-RC2-ELM IN RE2-RC2-FLD(MEM-IDX-MEN2) TO
                RE2-RC2-ELM IN RE2-RC2-FLD(MEM-IDX-MEN1).
           MOVE SPACES TO RE2-RC2-ELM IN RE2-RC2-FLD(MEM-IDX-MEN2).
           ADD 1 TO MEM-IDX-MEN1.
           ADD 1 TO MEM-IDX-MEN2.
       FIN-CMPTA-RC2-TRL.
           EXIT.
      
       INIT-HEX SECTION.
       INI-INIT-HEX.
           MOVE ZEROES TO WSS-IDX-AUXI-0.
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @00@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @01@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @02@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @03@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @04@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @05@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @06@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @07@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @08@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @09@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @0A@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @0B@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @0C@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @0D@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @0E@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @0F@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @10@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @11@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @12@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @13@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @14@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @15@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @16@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @17@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @18@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @19@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @1A@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @1B@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @1C@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @1D@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @1E@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @1F@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @20@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @21@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @22@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @23@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @24@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @25@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @26@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @27@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @28@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @29@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @2A@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @2B@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @2C@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @2D@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @2E@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @2F@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @30@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @31@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @32@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @33@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @34@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @35@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @36@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @37@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @38@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @39@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @3A@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @3B@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @3C@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @3D@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @3E@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @3F@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @40@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @41@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @42@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @43@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @44@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @45@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @46@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @47@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @48@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @49@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @4A@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @4B@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @4C@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @4D@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @4E@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @4F@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @50@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @51@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @52@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @53@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @54@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @55@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @56@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @57@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @58@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @59@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @5A@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @5B@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @5C@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @5D@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @5E@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @5F@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @60@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @61@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @62@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @63@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @64@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @65@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @66@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @67@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @68@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @69@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @6A@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @6B@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @6C@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @6D@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @6E@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @6F@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @70@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @71@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @72@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @73@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @74@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @75@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @76@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @77@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @78@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @79@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @7A@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @7B@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @7C@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @7D@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @7E@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @7F@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @80@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @81@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @82@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @83@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @84@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @85@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @86@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @87@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @88@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @89@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @8A@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @8B@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @8C@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @8D@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @8E@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @8F@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @90@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @91@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @92@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @93@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @94@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @95@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @96@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @97@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @98@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @99@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @9A@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @9B@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @9C@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @9D@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @9E@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @9F@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @A0@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @A1@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @A2@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @A3@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @A4@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @A5@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @A6@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @A7@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @A8@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @A9@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @AA@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @AB@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @AC@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @AD@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @AE@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @AF@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @B0@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @B1@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @B2@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @B3@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @B4@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @B5@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @B6@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @B7@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @B8@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @B9@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @BA@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @BB@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @BC@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @BD@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @BE@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @BF@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @C0@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @C1@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @C2@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @C3@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @C4@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @C5@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @C6@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @C7@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @C8@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @C9@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @CA@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @CB@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @CC@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @CD@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @CE@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @CF@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @D0@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @D1@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @D2@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @D3@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @D4@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @D5@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @D6@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @D7@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @D8@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @D9@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @DA@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @DB@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @DC@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @DD@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @DE@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @DF@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @E0@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @E1@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @E2@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @E3@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @E4@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @E5@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @E6@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @E7@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @E8@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @E9@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @EA@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @EB@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @EC@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @ED@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @EE@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @EF@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @F0@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @F1@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @F2@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @F3@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @F4@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @F5@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @F6@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @F7@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @F8@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @F9@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @FA@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @FB@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @FC@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @FD@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @FE@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
      
           ADD 1 TO WSS-IDX-AUXI-0.
           MOVE @FF@ TO WSS-ELM-HEX(WSS-IDX-AUXI-0).
       FIN-INIT-HEX.
           EXIT.
      
