I
I
I
I
I
I
I
I
I
I
I	CAPACITACION GENESIS
I	---------------------
I
I
I	
I
I
I
I
I	MODULO V ADMINISTRADOR DE FORMULARIOS FRM
I	-----------------------------------------
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I							Consist.
I
I
I
I
I
I
I
I							Consist.
I
I
I
1 FRM_pantallas
#
H
H 			Administrador de Formularios FRM
T01 			Administrador de Formularios FRM
P			------------- -- ----------- ---
P
I
I					Indice
I					======
I
I
I
I
I
I
I




 
T02 Objetivos

	El producto FRM genera diferentes modulos, los cuales, al ser usados

	desde un programa interactivo,  realizan variadas funciones sobre el

	formulario asociado.

2 Funcionalidades
T02 Funcionalidades.

	1.- Diseno del formulario a traves de utilitario FMS.

	2.- Generacion para  IBM  de la descripcion BMS del mapa equivalente
	    al formulario disenado.

	3.- Generacion de  la definicion del registro COBOL para el formula-
	    rio
	    ( Registro imagen ).

	4.- Generacion de modulo de funciones sobre el formulario
	    ( Modulo de manejo )

	5.- Generacion de un archivo de parametros del formulario.

	Es importante tener claro cuales son las diferentes 'instancias'  de
	proceso de un programa interactivo, pedir llaves, pedir campos, con-
	firmacion, etc. Para  lo cual es util remitirse al documento Genera-
	cion de programas interactivos PGM.

#

2 Definicion
T02 Definicion.

	Esta documentacion esta concebida para usuarios que posean
  	un conocimiento basico de FMS.

	Para  definir o crear un formulario se debe hacer lo siguiente :

	a) Definicion del formato del formulario.
	   ( Comando DEFFRM )

	El comando DEFFRM permite disenar el formulario deseado a 
 	traves del Form Editor de FMS. Equivale a comando FMS de DCL.

	Sintaxis :
		$ DEFFRM {frm}

	Los campos deben definirse con el nombre que tienen en la
	definicion de registro de cada archivo de acuerdo con  la
	norma :

		{reg}_{tipo}_{nombre}

	Observaciones :

  	* La unica  variacion  de  nomenclatura para  definir  un campo, por
	  una restriccion del producto FMS, en un formulario que este asocia-
	  do a  un campo de  un registro, es que  para el formulario  se debe
	  utilizar "_"en vez de "-".
	
	  Ejemplo :

        	Campo en el formulario            : OFI_COD_SUCU
	
	  	Campo asociado en registro OFI    : OFI-COD-SUCU

	Clasificacion de Campos

3 Campos_llave
T03 Campos llave.
		FRM reconoce campos llaves dentro del formulario a traves de
	        un indicador  entre {reg} y {tipo}. Existen  los  siguientes
		tipos de llaves :
	
H _IKY_	
T04 Llaves _IKY_	
		Corresponde a la llave que permite identificar en forma uni-
		voca  un registro. Este  tipo de  llave no  es modificable y 
		esta orientado a llaves principales. Son los UNICOS campos 
		DESPROTEGIDOS en el comando ING.

H _MKY_
T04 Llaves _MKY_
		Corresponde a una llave por la cual es posible recuperar in-
		formacion  existente.  Este tipo  de llave es  modificable y
	        esta orientada a llaves alternativas. Son campos  
		desprotegidos, en comandos distintos de ING, durante la 
		digitacion de llaves, y que siguen desprotegidos durante la 
		captura de campos, por lo que es posible su modificacion.
		Permite corregir llaves secundarias erroneas.
		
H _AKY_
T04 Llaves _AKY_
		Es identica  a una MKY, pero con la diferencia que no es po-
		sible modificarla una vez recuperada la informacion.
		Son campos desprotegidos, en comandos distintos de ING, 
		durante la digitacion de llaves, y protegidos durante la
	      	captura de campos, por lo que estas llaves no pueden ser
	      	modificadas. Son normalmente campos que pertenecen a llaves 
		alternativas, que se utilizan para consultar.
#

4 Esquema
T04 Esquema.

	Tipo 	Instancia	Tipo de comando		Estado
	 de
	llave
	--------------------------------------------------------------
	_IKY_	Pedir llaves	Ingreso			desprotegida
	_IKY_	Pedir llaves	Modificacion		desprotegida
	_IKY_	Pedir campos	Ingreso			protegida
	_IKY_	Pedir campos	Modificacion		protegida

	_MKY_	Pedir llaves	Ingreso			protegida
	_MKY_	Pedir llaves	Modificacion		desprotegida
	_MKY_	Pedir campos	Ingreso			desprotegida
	_MKY_	Pedir campos	Modificacion		desprotegida

	_AKY_	Pedir llaves	Ingreso			protegida
	_AKY_	Pedir llaves	Modificacion		desprotegida
	_AKY_	Pedir campos	Ingreso			protegida
	_AKY_	Pedir campos	Modificacion		protegida

4 Ejemplo
T04 Ejemplo :

	Supongamos existen dos formularios.

	i. - Formulario DBC definido para el ingreso de los
	    'D'atos 'B'asicos de 'C'lientes.

	ii.- Formulario DIR definido para el ingreso de las

	     'DIR'ecciones de los  clientes  ingresados  por DBC. Un cliente
	     puede  tener  multiples  direcciones  las  cuales se distinguen
	     entre si por un correlativo.


	En el formulario DBC existen dos llaves



	DBC_IKY_VRF_ICLI,
	     Esta  llave  corresponde al rut  del cliente. Al ser IKY, es la
             llave que FRM captura al momento de ingresar o crear un cliente.
	     Una vez  creados, los  clientes pueden  ser recuperados por esta
	     llave, no es modificable.

	DBC_MKY_GLS_NOMC,
	     Esta llave corresponde al nombre del cliente. Al ser MKY,permite
	     recuperar los clientes por esta llave, es modificable.


	Por lo tanto un cliente debe ser ingresado a traves de su rut, con lo
        cual se garantiza que el registro no exista, una vez creado puede ser
        recuperado ademas de su rut por su nombre,si al ingresarlo se cometio
        un error en la digitacion del  nombre, este puede  ser modificado, no
        asi el rut.

#
	En el segundo formulario DIR existen tres llaves.
		
	DIR_IKY_VRF_ICLI,
	     Esta llave corresponde al rut  del cliente.  Al ser  IKY, es la 
             llave que FRM captura al momento de ingresar o crear una direc-
             cion asociada a un cliente.
	     Una vez creadas,las direcciones pueden ser recuperados por esta
	     llave, no es modificable.

	DIR_IKY_NUM_DIRE
	     Correlativo que distingue entre las n ocurrencias del registro de
             direcciones de un cliente.

	DBC_AKY_GLS_NOMC,
	     Esta llave corresponde  al nombre del cliente. Al ser AKY, per-
	     mite  recuperar  las  direcciones de  un cliente a traves de su
	     nombre, pero no es modificable.

	Por lo tanto una direccion debe ser ingresada a traves de su rut mas
	el correlativo, con lo cual se garantiza que el registro no exista.
	Es  posible recuperar la direccion de un cliente a traves de su nom-
	bre, pero  el nombre del  cliente no es modificable a traves de este
	formulario.

3 Campos_NO_llave
T03 Campos NO llave

	Son aquellos  campos que no tienen "IKY","MKY" ni "AKY" como indicador
	entre {reg} y {tipo}.

3 Campos_FRM
T03 Campos FRM

	Los campos cuyo {reg}  es FRM se  consideran como no pertenecientes a
	ningun registro y solo  tiene existencia en el formulario y en el re-
	gistro imagen asociado a este ( No pertenecen a ningun archivo ).
	Estos campos son utiles, por ejemplo para especificar glosas.

4 Ejemplo
T04 Ejemplo
  

	Supongamos  que  en el siguiente  formulario  se incluyen  dos codigos
        con sus respectivas glosas.


	01. Oficina      XXX                          --> DBC-COD-OFIC
                         XXXXXXXXXXXXXXXXXXXXXXXX     --> Glosa asociada
							  FRM-GLS-OFIC

	02. Actividad    XX                           --> DBC-COD-ACTI
                         XXXXXXXXXXXXXXXXXXXXXXXX     --> Glosa asociada
							  FRM-GLS-ACTI

	En este  caso las glosas no  pertenecen al registro DBC, sino que se
        rescatan desde tablas, y el unico objetivo que cumplen es documentar
        cada uno de los codigos que se dibujan en el formulario.

#
3 Campos_fecha
T03 Campos fecha

	FRM reconoce  estos campos a  traves de su {tipo}, con alguno de los 
	siguientes valores asociando su formato.

	{tipo} 		Formato

	-FEC- 		DDMMSSAA
	-DMA- 		DDMMAA
	-MSA- 		SSAA
	-FMA- 		MMAA
	-FSA- 		SSAA
	-FFA- 		AA

	FRM define estos  campos  automaticamente en el registro imagen como
	un campo   compuesto con items elementales, para independizarlos del
	formato dado en el archivo.

4 Ejemplo
T04 Ejemplo

	En general en los archivos las fechas se definen con formato SSAAMMDD.
	En el formulario  se definen con formato DDMMSSAA para efectos de des-
	pliegue.

	Supongamos que en el formulario se dibujo el siguiente campo
	
		99-99-9999 --> DBC_FEC_FNAC

		Formulario			    Archivo.
	Campo generado en registro imagen	campo en archivo.

	03  DBC-FEC-FNAC.		    03  DBC-FEC-FNAC.
	    05  DBC-NUM-DNAC PIC 9(02).         05  DBC-NUM-SNAC  PIC 9(02).
	    05  DBC-NUM-MNAC PIC 9(02).         05  DBC-NUM-ANAC  PIC 9(02).
	    05  DBC-NUM-SNAC PIC 9(02).         05  DBC-NUM-MNAC  PIC 9(02).
	    05  DBC-NUM-ANAC PIC 9(02).         05  DBC-NUM-DNAC  PIC 9(02).

	La  tranferencia de  informacion  entre el  formulario y el registro
	para este campo se hace a nivel de items elementales.
	FRM valida automaticamente estos campos. Remitirse a VALFEC en docu-
	mento "Rutinas genericas de validacion VAL".

3 Campos_VRF
T03 Campos digito verificador

	FRM reconoce estos campos a traves de su {tipo} = "_VRF_"

	-VRF- Campo con digito verificador asociado.

	FRM define  estos campos  automaticamente en el registro imagen como 
	un campo  compuesto por un digito numerico con el largo especificado
	en el formulario mas un digito verificador alfanumerico.

	Ejemplo :

		Formulario		Campo generado en registro imagen

	XXXXXXXXXX-X  DBC_VRF_ICLI	03  DBC-NUM-ICLI  PIC 9(10).
	                                03  DBC-VRF-ICLI  PIC X(01).
#


3 Campos_IDC
T03 Campos para identificacion de clientes IDC

	FRM reconoce estos campos a traves de su {tipo} = "IDC"


	-IDC- Campo complemento a "_VRF_"

	FRM  define estos  campos automaticamente en el registro imagen como
	un  campo compuesto por  un indicador y  una glosa. En general estos
	campos complementan a un campo "VRF".

	Ejemplo :


		Formulario		Campo generado en registro imagen

	X-XXX  DBC_IDC_ICLI		03  DBC-IND-ICLI  PIC X(01).
					03  DBC-GLS-ICLI  PIC X(03).



3 Campos_numericos
T03 Campos numericos.


	los campos numericos son detectados a traves de su picture
	dibujado en el diseno del formulario.

	99.999.999      Campo numerico, sin decimales, solo positivos.
	99.999.999,999  Campo numerico, con tres decimales, solo positivos.
	NN.NNN.NNN	Campo numerico, sin decimales, acepta signo.
	NN.NNN.NNN,NNN  Campo numerico, con tres decimales, acepta signo.

	Los "." son opcionales y cumplen una funcion de edicion.

	FRM valida automaticamente estos campos. Remitirse a VALNUM en
	documento "Rutinas genericas de validacion VAL".


	La  asignacion de atributos de cada  campo es equivalente para VAX
	e IBM.


	El  formulario se puede dibujar  desde la  linea 1  a la 24, esto se 
	debe combinar con el tipo de funcion que usara este formulario.
	Ver  tipo de funcion  en  documentacion  "Procesador Generico de menu
	 MEN"
	- Especificacion formateo de campos numericos

		. Entero sin decimales, PIC  99.999.999  o  NN.NNN.NNN
		
		      Se deben marcar los siguientes atributos :
		 
		      	X Right Justified
			X Zero Fill
			X Zero Supress
			0 Clear Character       

		. Entero con decimales, PIC  99.999,9999  o  NN.NNN,NNNN
		
		      Se deben marcar los siguientes atributos :
		 
		      	X Fixed Decimal
			X Zero Fill
			X Zero Supress
			0 Clear Character

	- La especificacion correcta para un campo que posee signo es
	  dibujando 'N's en la pantalla, si se desa que se edite con
	  puntos, estos se deben dibujar, y se debe agregar siempre
	  una N por delante ( solo para el signo ) al numero especificado.
	  Si el campo posee decimales se debe dibujar una coma para
	  indicar la situacion.

	  Ejemplos :

		NNN.NNN.NNN,NN	
				El numero maximo permitido para este
				campo es  +99.999.999,99, el numero
				minimo es -99.999.999,99.

		NNNNN,NN
				El numero maximo permitido para este
				campo es  +9999,99, el numero
				minimo es -9999,99 ( este numero sera
				editado sin puntos y con la coma decimal
				cuando se despliegue en pantalla ).

		N.NNN.NNN,NN	
				Sintaxis incorrecta ( la primera N se asume
				que es para el signo con lo cual la sintaxis
				restante .NNN.NNN,NN es incorrecta ).
#

3 Norma_BCI
T03 Norma de BCI
      a) Norma GENESIS

         Los campos en las pantallas o los reportes deben definirse con 
         el nombre que tienen en la definicion de registro de cada
         archivo de acuerdo con la norma :

                      {reg}_{tipo}_{nombre}

                      {reg}    = registro al cual pertenece al campo
                      {tipo}   = tipo del campo
                      {nombre} = nombre libre

                 Ejemplo :

                      Campo en un formulario            : OFI_COD_SUCU
                      Campo asociado en registro OFI    : OFI-COD-SUCU

      b) Norma BCI

         Los campos deben definirse con la sgte norma :
         Tres primeros caracteres corresponden a la abreviacion del
         nombre de la entidad del modelo corporativo a la que pertenece
         el campo.
         A continuacion se colocan las abreviaciones de los terminos
         que conforman el nombre del campo separados por "-". El largo
         total del campo no debe exeder los 15 caracteres.

                          EEE-aaa-aaa-aaa. : 

         Para una informacion mas detallada remitirse a documento
         "standar de nombres para bases de datos" elaborado por
         administracion de datos.

      c) Independencia de normas

         Cuando se desee especificar, para GENESIS, un campo en una
         pantalla interactiva o en un reporte, el cual responde a la
         "norma BCI", el campo debe llevar la informacion del registro
         al cual pertenece y su tipo de la sgte forma :

                          {reg}${tipo}$EEE-aaa-aaa-aaa
2 Generacion
T02 Generacion

	El comando GENFRM  produce una serie de modulos que son usados luego
	por  otras herramientas de  GENESIS. Algunos  tambien pueden ser em-
	pleados directamente por el programador.

	Sintaxis :

		$ GENFRM {archivo}[.{extension}]

			o bien

		$ GENFRM FMS/FORM={nombre_formulario}

	Donde {archivo} es el archivo que contiene la definicion del 
	{formulario} FMS. Se asume extension FRM.
	FMS es el nombre logico que da el GENESIS a la Biblioteca de
	Formularios del Proyecto activo ( la segunda forma del comando
	es para generar a partir de un formulario catalogado ).

	Modulos generados

3 Registro_Imagen
T03 Registro Imagen

	  {sis}WI{frm}.AIU
	  {sis} corresponde al proyecto vigente ( ultimo PRY )
	  Es el buffer de almacenamiento de los  campos del formulario,
	  para ser incluido en la WSS de los programas con COPY.
	  Este modulo no requiere ningun otro proceso para ser usado desde
	  cualquier programa.

	    a) Cada campo se define con su picture correspondiente.
	    b) Los campos numericos  se definen  con redefinicion de picture 
	       de edicion.
	    c) Para IBM se definen sus respectivos bytes de atributos
	       y largos para cada campo.

3 Modulo_de_Manejo
T03 Modulo de Manejo

	  {sis}BM{frm}.AIU
	  Este  modulo  corresponde  a un  conjunto  de  SECTION  COBOL  que
	  realizan  las  siguientes  funciones  sobre el registro imagen del
	  formulario para ser incluido en los programas con COPY.
	  Las funciones que realiza son las siguientes :

	    a) Tranferencia de  informacion entre los campos dibujados en el
	       formulario y sus respectivos campos en los archivos.

	    b) Captura  de los  campos desde  la pantalla, dependiendo de la
	       instancia en que se encuentre el programa.

		- Captura solo de campos llaves en instancia de pedir llaves.
		- Captura solo de  campos no  llaves en  instancia de pedir o
		  modificar campos asociado(s) a la(s) llave(s).
#

	    c) Validacion automatica de campos.

		- Validacion de codigos contra tablas.
		  Segun dominio y recorrido.

		- Validacion Numerica.
		  Segun formato y atributos en formulario.
	
		- Validacion de fechas.
		  Segun formato y atributos en formulario.
		  
		- Validacion de obligatoriedad para cualquier tipo de campo
		  ( numerico, no numerico, fecha , etc )
		  Segun atributo response required.

	    d) Manejo de atributos de cada campo.

		- Campos solo despliegue
		  Segun atributo display only.

		- Campos no visibles
		  Segun atributo no echo.

	    f) Posicionamiento del  cursor en los lugares  adecuados, depen-
	       diendo de la instancia en que se encuentre el programa.
		
		- Sobre el primer  campo llave del formulario, en la instan-
	          cia de pedir llaves.

		- Sobre  el primer campo no llave del formulario, en la ins-
	          tancia del  pedir o  modificar los  campos  asociados a la
	          llave del registro procesado.

		- Sobre un campo especifico al validarse este erroneamente.

	    g) Creacion de diferentes labels donde es posible incorporar co-
	       digo adicional, para agregar potencialidades al modulo de ma-
	       nejo.
	       El  codigo  adicional es  escrito  por el  programador en  un 
               archivo  cuyo nombre es  {sis}BM{frm}.TXT y  se  incorpora al
	       codigo  que se encuentra  en el archivo  generado por GENESIS,
	       {sis}BM{frm}.AIU, esto se hace con el comando GENSRC.
#

3 Archivo_Parametros
T03 Modulo Con parametros del formulario

 	  Archivo : {sis}BI{frm}

	  Este modulo contiene un conjunto de informacion para ser usada por
	  otros  modulos de  GENESIS que  usen el formulario, por ejemplo el
	  generador de programas interactivos.
	  En este archivo se guarda informacion como por ejemplo.

		- Cantidad e identificacion de los registros que intervienen
		  en el formulario.

		- Indica si el formulario posee campos numericos.
		- Indica  si el formulario posee  campos  con digito verifi-
	          cador.

		- Indica si el formulario posee codigos.


3 mapa
T03 mapa

	Solo  version IBM. El mapa  generado debe  ser compilado para quedar
	disponible para los programas que lo requieran o para el prototipo.

	    a) 	Creacion de delimitadores para campos.

		"{" y "}" para campos llaves.

		"<" y ">" para campos no llaves.
#

3 Esquema
T03 Esquema

	  La operatoria con estos modulos es la siguiente :

		{sis}BM{frm}.AIU         Contiene %* INCLUDE de PREPTEX mas
					 codigo generado por GENESIS
			  + 

		{sis}BM{frm}.TXT         Codigo adicional  del usuario  mas
			  |              ( *% IF y *% END IF + COBOL )   
			  |
			  V
		{sis}BM{frm}.SRCAIU  Modulo de manejo  asociada, COBOL puro.

     	  Los modulos  pueden residir en  el directorio del usuario o en las
	  areas respectivas AIU y TXT.

	---------  $ GENFRM {frm}   --------------------    Descripcion  BMS
	! {frm} !------------------>! {sis}A{frm}.MAP  !    Equivalente para
	---------          !        --------------------    formulario (IBM)
                           !                                Compilar
                           !
                           !
                           !        --------------------   Registro imagen
                           !------->! {sis}WI{frm}.AIU !
			   !	    --------------------
                           !
			   !        --------------------   Archivo parametros
			   !------->! {sis}BI{frm}.AIU !
                           !        --------------------
                           !
                           !        --------------------   Modulo  de  manejo
                           !------->! {sis}BM{frm}.AIU !   con labels para 
                                    --------------------   codigo adicional
					   !
					   !
					   !
					   !
      --------------------                 !      -----------------------
      ! {sis}BM{frm}.TXT !----------------------->! {sis}BM{frm}.SRCAIU !
      --------------------  $ GENSRC {sis}BM{frm} -----------------------

                                               
	Codigo adicional			  Codigo GENESIS + 
	escrito por el                            Codigo adicional del
	programador                               programador
#

2 Uso
T02 Uso

	A continuacion se detallan las diferentes SECTION COBOL generadas en
	el modulo de manejo para un formulario {frm}.

3 PUT-ALL-{frm}
	PUT-ALL-{frm} SECTION.
	   Mueve  todos los campos  que se encuentran en  los archivos  a los
	   correspondientes campos en el formulario. Esto lo hace invocando a
	   parrafos especificos por archivo de la forma :

		PERFORM PUT-{reg}-{frm}.

	   Esta  funcion es  invocada tipicamente cuando se  ha(n) leido el o 
	   los  archivo y  es  necesario mover esta  informacion al  registro 
	   imagen para ser desplegada.
       
3 PUT-{reg}-{frm}
	PUT-{reg}-{frm} SECTION.

	   Mueve  todos los campos de un archivo especifico a los correspon-
	   dientes campos en el formulario para ese archivo.
	   Esto lo hace solo si el status de lectura del archivo es exitoso.
       
3 RET-ALL-{frm}
	RET-ALL-{frm} SECTION.
	   Mueve  todos los  campos que se encuentran en el formulario a los
	   correspondientes  campos de los diferentes archivos que lo compo-
	   nen.
	   Esto  lo hace invocando a  parrafos especificos por archivo de la 
	   forma

	        PERFORM KEY-ALL-{frm}.
                PERFORM RET-{frm}-{reg}.
       
	   Esta  funcion es invocada tipicamente  cuando se  ha(n) capturado
	   los campos desde el formulario y es necesario mover esta informa-
	   cion a los archivos para grabarla, modificarla o leer un registro
	   con las llaves digitadas en la pantalla.

3 RET-{reg}-{frm}
	RET-{reg}-{frm} SECTION.
	   Mueve todos  los campos no llaves de un registro especifico desde
	   el registro imagen a su respecivo archivo.
       
3 KEY-ALL-{frm}
	KEY-ALL-{frm} SECTION.
	   Mueve solo los campos llaves que se encuentran en el formulario a
	   los correspondientes campos de los diferentes archivo que lo com-
	   ponen.
	   Esto  lo hace invocando  a parrafos especificos por archivo de la
	   forma
       
	       PERFORM KEY-{reg}-{frm}.

3 KEY-{reg}-{frm}
	KEY-{reg}-{frm} SECTION.
	   Mueve todos  los campos llaves de un registro especifico desde el
	   registro imagen a su respecivo archivo.
	   Esto se hace  tipicamente como parte de un RET-ALL-{frm} y ademas
	   en  forma independiente cuando  se desea  leer un  registro y  es
	   necesario cargar en los archivos solo las llaves.
#
3 SCR-CLRA-{frm}
	SCR-CLRA-{frm} SECTION.
	   Limpia todos los campos del registro imagen de la forma.
           PERFORM CLR-KEY-{frm}.
           PERFORM CLR-FLD-{frm}.
       
3 CLR-KEY-{frm}
	CLR-KEY-{frm} SECTION.
	   limpia los campos llaves del registro imagen.
       
3 CLR-FLD-{frm}
	CLR-FLD-{frm} SECTION.
	   limpia los campos no llaves del registro imagen, de la forma.
           PERFORM CLR-{reg}-{frm}.
       
3 CLR-{reg}-{frm}
	CLR-{reg}-{frm} SECTION.
	   limpia  los campos  no llaves del registro imagen para un archivo
	   especifico.
       
3 FST-KEY-{frm}
	FST-KEY-{frm} SECTION.
	   Posiciona el cursor en el primer campo llave de formulario.

3 FST-FLD-{frm}
	FST-FLD-{frm} SECTION.
	   Posiciona el cursor en el primer campo no llave de formulario.
       
3 PRO-KEY-{frm}
	PRO-KEY-{frm} SECTION.
	   Protege todos los campos llaves del registro imagen de la forma.
           PERFORM PRO-IKY-{frm}.
           PERFORM PRO-AKY-{frm}.
           PERFORM PRO-MKY-{frm}.
       
3 PRO-IKY-{frm}
	PRO-IKY-{frm} SECTION.
	   Protege todos los campos llaves de tipo "_IKY_" del registro imagen.
       
3 PRO-MKY-{frm}
	PRO-MKY-{frm} SECTION.
	   Protege todos los campos llaves de tipo "_MKY_" del registro imagen.
       
3 PRO-AKY-{frm}
	PRO-AKY-{frm} SECTION.
	   Protege todos los campos llaves de tipo "_AKY_" del registro imagen.
       
3 PRO-FLD-{frm}
	PRO-FLD-{frm} SECTION.
	   Protege todos los campos no llaves del formulario de la forma
           PERFORM PRO-{reg}-{frm}.
       
3 PRO-{reg}-{frm}
	PRO-{reg}-{frm} SECTION.
	   Protege todos los campos no llaves del formulario para un archivo
	   especifico.
       
3 UNP-KEY-{frm}
       UNP-KEY-{frm} SECTION.
	   Desprotege todos los campos llaves del registro imagen de la forma.
           PERFORM UNP-IKY-{frm}.
           PERFORM UNP-AKY-{frm}.
           PERFORM UNP-MKY-{frm}.
       
3 UNP-IKY-{frm}
       UNP-IKY-{frm} SECTION.
	   Desprotege todos los campos llaves de tipo "_IKY_" del registro
	   imagen.
       
3 UNP-MKY-{frm}
       UNP-MKY-{frm} SECTION.
	   Desprotege todos los campos llaves de tipo "_MKY_" del registro
	   imagen.
#

       
3 UNP-AKY-{frm}
       UNP-AKY-{frm} SECTION.
	   Desprotege  todos los campos llaves de tipo "_AKY_" del registro
	   imagen.
       
3 UNP-FLD-{frm}
       UNP-FLD-{frm} SECTION.
	   Desprotege todos los campos no llaves del formulario de la forma
           PERFORM PRO-{reg}-{frm}.
       
3 UNP-{reg}-{frm}
       UNP-{reg}-{frm} SECTION.
	   Desprotege todos  los campos  no llaves  del formulario  para un 
	   archivo especifico.
       
       
3  VAL-KEY-{frm}
       VAL-KEY-{frm} SECTION.
	   Invoca SECTION de validacion para las llaves del formulario de la 
	   forma.
           PERFORM VAL-IKY-{frm}.
           PERFORM VAL-MKY-{frm}.
           PERFORM VAL-AKY-{frm}.
       
3 VAL-IKY-{frm}
       VAL-IKY-{frm} SECTION.
	   Valida las llaves "_IKY_" del formulario de la forma :

           PERFORM VAL-{frm}-{campo}.
       
3 VAL-MKY-{frm}
       VAL-MKY-{frm} SECTION.
	   Valida las llaves "_MKY_" del formulario de la forma :

           PERFORM VAL-{frm}-{campo}.
       
3 VAL-AKY-{frm}
       VAL-AKY-{frm} SECTION.
	   Valida las llaves "_AKY_" del formulario de la forma :

           PERFORM VAL-{frm}-{campo}.
#
3 VAL-FLD-{frm}
       VAL-FLD-{frm} SECTION.
	   Valida los campos no llaves del formulario de la forma :
           PERFORM VAL-{frm}-{campo}.
       
3 VAL-{frm}-{campo}
       VAL-{frm}-{campo} SECTION.
	   En  estas SECTION  se genera el codigo que valida automaticamente
	   un campo, fecha, codigo, verificador y otros, ademas se agrega el
	   codigo adicional  de  validacion para  este campo  escrito por el
	   programador.
       
3 VAL-CON-IKY-{frm}
       VAL-CON-IKY-{frm} SECTION.
	   Esta SECTION  realiza la  validacion de consistencia de la llaves
	   "_IKY_"
       
3 VAL-CON-FLD-{frm}
       VAL-CON-FLD-{frm} SECTION.
	   Esta  SECTION realiza la validacion de consistencia de los campos
	   no llaves.
	   Se define  validacion  de consistencia como  la validacion en que
	   intervienen mas de un campo de la pantalla.
       
3 VAL-NUM-KEY-{frm}
       VAL-NUM-KEY-{frm} SECTION.
	   Valida numericamente los campos llaves de la forma :
           PERFORM VAL-NUM-IKY-{frm}.
           PERFORM VAL-NUM-MKY-{frm}.
           PERFORM VAL-NUM-AKY-{frm}.
       
3 VAL-NUM-IKY-{frm}
       VAL-NUM-IKY-{frm} SECTION.
	   Valida numericamente los campos "_IKY_"
       
3 VAL-NUM-MKY-{frm}
       VAL-NUM-MKY-{frm} SECTION.
	   Valida numericamente los campos "_MKY_"
       
3 VAL-NUM-AKY-{frm}
       VAL-NUM-AKY-{frm} SECTION.
	   Valida numericamente los campos "_AKY_"
       
3 VAL-NUM-FLD-{frm}
       VAL-NUM-FLD-{frm} SECTION.
	   Valida numericamente los campos no llaves.
       
3 EDT-KEY-{frm}
       EDT-KEY-{frm} SECTION.
	   Edita numericamente los campos llaves de la forma :
           PERFORM EDT-IKY-{frm}.
           PERFORM EDT-MKY-{frm}.
           PERFORM EDT-AKY-{frm}.
       
3 EDT-IKY-{frm}
       EDT-IKY-{frm} SECTION.
           Edita numericamente los campos "_IKY_"
       
3 EDT-MKY-{frm}
       EDT-MKY-{frm} SECTION.
           Edita numericamente los campos "_MKY_"
       
3 EDT-AKY-{frm}
       EDT-AKY-{frm} SECTION.
           Edita numericamente los campos "_AKY_"
       
3 EDT-FLD-{frm}
       EDT-FLD-{frm} SECTION.
           Edita numericamente los campos no llaves.
#

2 Codigo_adicional
T02 Codigo_adicional

	El codigo adicional permite que el modulo de manejo, realize diversas
	tareas, ya sea a nivel de campo o a nivel de formulario.
	Estas  tareas son tipicamente validaciones, ediciones,  despliegue de 
	mensajes, captura de campos.

	Cada  una de las SECTION anteriores posee un label al inicio de ella,
	es decir  ANTES de  ejecutarse y un  label al final de ella, es decir
        DESPUES de ejecutarse.
	A estos  labels se les antepone el prefijo INI_ y FIN_ repectivamente.
	
	Ejemplo :

	la SECTION PUT-ALL-{frm} posee los labels
	INI_PUT_ALL_{frm} y FIN_PUT_ALL_{frm}.

       PUT-ALL-{frm} SECTION.
       INI-PUT-ALL-{frm}.
*% INCLUDE INI_PUT_ALL_FRM OF '{sis}BM{frm}.TXT'
           PUT-{reg1}-{frm}.
           PUT-{reg2}-{frm}.
		...
		...
           PUT-{regN}-{frm}.
*% INCLUDE FIN_PUT_ALL_FRM OF '{sis}BM{frm}.TXT'
       FIN-PUT-ALL-{frm}.
           EXIT.

	A continuacion se describen funciones tipicas en algunos labels
	usados con frecuencia.

H3 INI_PUT_ALL_{frm}
*% IF INI_PUT_ALL_{frm}
      *<<<< DOC: INI_PUT_ALL_FRM
      * En este  punto esta  cargado el  registro del archivo base. Ademas
      * estan  cargados  los  registros  anexos al archivo base ( si estos
      * fueron leidos por codigo adicional ).  El registro imagen aun esta
      * vacio.
      * Es frecuente ir a buscar glosas asociadas a codigos en la pantalla
      * para  ser  desplegadas, si esto se hace en este label debe ser con
      * la  informacion  de  los archivos y ademas debe verificarse que la
      * lectura de ese archivo ha sido exitosa, pues el registro imagen no
      * esta lleno aun.
      * Para los campos que fueron especificados en el dominio y recorrido
      * esta funcion es automatica.
*% END

H3 FIN_PUT_ALL_{frm}
*% IF FIN_PUT_ALL_{frm}
      *<<<< DOC: FIN_PUT_ALL_{frm}
      * En  este  punto  estan  cargados  los registros con la informacion
      * leida  desde  los  diferentes  archivos,  ademas  esta  cargado el
      * registro imagen, pues ya se ejecuto los PUT's por registro.
      * Es frecuente ir a buscar glosas asociadas a codigos en la pantalla
      * para  ser  desplegadas,  esto  puede  hacerse desde los archivos o
      * desde el registro imagen, pues ambos estan llenos.
      * Para los campos que fueron especificados en el dominio y recorrido
      * esta funcion es automatica.
*% END
#

H3 INI_RET_ALL_{frm}
*% IF INI_RET_ALL_{frm}
      *<<<< DOC: INI_RET_ALL_{frm}
      * En este punto esta cargado el registro imagen con los datos captura-
      * dos desde la  pantalla  y  se procedera a  moverlos a los diferentes
      * archivos.  Generalmente en este punto se complementa informacion que
      * no aparece  en la pantalla  pero si se requiere que quede grabada en
      * los archivos. Por ejemplo campos con fecha y hora  de actualizacion,
      * autor de la actualizacion,etc.
*% END

H3 FIN_RET_ALL_{frm}
*% IF FIN_RET_ALL_{frm}
      *<<<< DOC: FIN_RET_ALL_{frm}
      * Este label es equivalente a INI_RET_ALL_{frm}, pero ya estan cargados
      * los registros con la informacion del registro imagen.
*% END


H3 INI_KEY_ALL_{frm}
*% IF INI_KEY_ALL_{frm}
      *<<<< DOC: INI_KEY_ALL_{frm}
      * En este  label estan cargadas las llaves en el registro imagen, pero
      * no en  los archivos.  Generalmente  aqui se  complementan las llaves
      * con informacion que no aparece  en la pantalla, pero que forma parte
      * de la llave de los archivos.

      * Ejemplo : 
      * Si existe un  archivo que  guarda ocurrencias  de un registro con un
      * correlativo, ( formulario  DIR  en descripcion  de llaves ) general-
      * mente en  ingreso el correlativo es asignado en forma automatica por
      * programa y  bajo el  comando ING el campo correlativo aparece con el
      * valor adecuado  protegido. En  este  label es  posible  completar la
      * llave del registro con el correlativo asignado.
*% END

H3 INI_KEY_{reg}_{frm}
*% IF INI_KEY_{reg}_{frm}
      *<<<< DOC: INI_KEY_{reg}_{frm}
      * Este  label  es equivalente a INI_KEY_ALL_{frm}, pero con separacion
      * por registro.
*% END


H3 INI_SCR_CLRA_{frm}
*% IF INI_SCR_CLRA_{frm}
      *<<<< DOC: INI_SCR_CLRA_{frm}
      * Este  label  permite tomar el control antes de limpiar los campos 
      * del registro imagen.
*% END

H3 FIN_SCR_CLRA_{frm}
*% IF FIN_SCR_CLRA_{frm}
      *<<<< DOC: FIN_SCR_CLRA_{frm}
      * Este  label  permite  tomar el control despues de limpiar los campos
      * del registro imagen.
*% END

#

H3 INI_CLR_KEY_{frm}
*% IF INI_CLR_KEY_{frm}
      *<<<< DOC: INI_CLR_KEY_{frm}
      * Este  label permite tomar  el control  antes  de limpiar  los campos
      * llave del registro imagen.
*% END

H3 FIN_CLR_KEY_{frm}
*% IF FIN_CLR_KEY_{frm}
      *<<<< DOC: FIN_CLR_KEY_{frm}
      * Este  label  permite  tomar el  control despues de limpiar los campos
      * llave del registro imagen.
*% END
       
H3 INI_CLR_FLD_{frm}
*% IF INI_CLR_FLD_{frm}
      *<<<< DOC: INI_CLR_FLD_{frm}
      * Este  label  permite  tomar el control antes de limpiar los campos
      * no llave del registro imagen.
*% END
       
H3 INI_CLR_{reg}_{frm}
*% IF INI_CLR_{reg}_{frm}
      *<<<< DOC: INI_CLR_{reg}_{frm}
      * Este  label  permite  tomar el control antes de limpiar los campos
      * no llave del registro imagen para el registro {reg}.
*% END

       
H3 INI_FST_KEY_{frm}
*% IF INI_FST_KEY_{frm}
      *<<<< DOC: INI_FST_KEY_{frm}
      * Este  label permite tomar el control antes de setear el primer campo
      * llave para que el cursor se pare en el.
*% END

H3 FIN_FST_KEY_{frm}
*% IF FIN_FST_KEY_{frm}
      *<<<< DOC: FIN_FST_KEY_{frm}
      * Este  label  permite tomar  el  control despues  de setear el primer 
      * campo llave para que el cursor se pare en el.
      * En  general  se usa  para resetear el primer campo llave manejado en
      * forma automatica y setear otro.
*% END


H3 INI_FLD_KEY_{frm}
*% IF INI_FLD_KEY_{frm}
      *<<<< DOC: INI_FLD_KEY_{frm}
      * Este label permite tomar el control antes  de setear el primer campo
      * no llave para que el cursor se pare en el.
*% END

H3 FIN_FLD_KEY_{frm}
*% IF FIN_FLD_KEY_{frm}
      *<<<< DOC: FIN_FLD_KEY_{frm}
      * Este  label  permite  tomar el  control  despues de setear el primer
      * campo no llave para que el cursor se pare en el.
      * En  general  se  usa para resetear el primer campo no llave manejado
      * en forma automatica y setear otro.
*% END

#

H3 INI_PRO_KEY_{frm}
*% IF INI_PRO_KEY_{frm}
      *<<<< DOC: INI_PRO_KEY_{frm}
      * Este  label permite tomar  el control  antes de proteger las llaves.
*% END

H3 FIN_PRO_KEY_{frm}
*% IF FIN_PRO_KEY_{frm}
      *<<<< DOC: FIN_PRO_KEY_{frm}
      * Este  label permite tomar  el control despues de proteger las llaves.
      * En  *% FIN_PRO_KEY_{frm}  generalmente se desprotegen ciertas llaves
      * protegidas  automaticamente   para   manejar   ciertas   situaciones
      * especiales.
*% END

H3 INI_PRO_IKY_{frm}
*% IF INI_PRO_IKY_{frm}
      *<<<< DOC: INI_PRO_IKY_{frm}
      * Este  label permite tomar  el control  antes de proteger las llaves
      * del tipo IKY.
*% END

H3 FIN_PRO_IKY_{frm}
*% IF FIN_PRO_IKY_{frm}
      *<<<< DOC: FIN_PRO_IKY_{frm}
      * Este  label permite tomar  el control despues de proteger las llaves
      * del tipo IKY.
*% END

H3 INI_PRO_AKY_{frm}
*% IF INI_PRO_AKY_{frm}
      *<<<< DOC: INI_PRO_AKY_{frm}
      * Este  label permite tomar  el control  antes de proteger las llaves
      * del tipo AKY.
*% END

H3 FIN_PRO_AKY_{frm}
*% IF FIN_PRO_AKY_{frm}
      *<<<< DOC: FIN_PRO_AKY_{frm}
      * Este  label permite tomar  el control despues de proteger las llaves
      * del tipo AKY.
*% END

H3 INI_PRO_MKY_{frm}
*% IF INI_PRO_MKY_{frm}
      *<<<< DOC: INI_PRO_MKY_{frm}
      * Este  label permite tomar  el control  antes de proteger las llaves
      * del tipo MKY.
*% END

H3 FIN_PRO_MKY_{frm}
*% IF FIN_PRO_MKY_{frm}
      *<<<< DOC: FIN_PRO_MKY_{frm}
      * Este  label permite tomar  el control despues de proteger las llaves
      * del tipo MKY.
*% END

H3 INI_PRO_FLD_{frm}
*% IF INI_PRO_FLD_{frm}
      *<<<< DOC: INI_PRO_FLD_{frm}
      * Este  label permite  tomar el control antes de proteger los  campos
      * no  llaves del registro imagen.
*% END

#

H3 FIN_PRO_FLD_{frm}
*% IF FIN_PRO_FLD_{frm}
      *<<<< DOC: FIN_PRO_FLD_{frm}
      * Este  label permite  tomar el control despues de proteger los campos
      * no llaves del registro imagen. En  *% FIN_PRO_FLD_{frm} generalmente
      * se desprotegen ciertos  campos no llaves protegidas  automaticamente
      * para manejar ciertas situaciones especiales.
*% END

H3 INI_PRO_{reg}_{frm}
*% IF INI_PRO_{reg}_{frm}
      *<<<< DOC: INI_PRO_{reg}_{frm}
      * Este  label permite  tomar el control antes de proteger los  campos
      * no llave del registro imagen para el registro {reg}.
*% END

H3 FIN_PRO_{reg}_{frm}
*% IF FIN_PRO_{reg}_{frm}
      *<<<< DOC: FIN_PRO_{reg}_{frm}
      * Este  label permite  tomar el control despues de proteger los campos
      * no llave  del registro imagen para el registro {reg}.
*% END


H3 INI_UNP_KEY_{frm}
*% IF INI_UNP_KEY_{frm}
      *<<<< DOC: INI_UNP_KEY_{frm}
      * Este label permite tomar el control antes de desproteger las llaves.
*% END

H3 FIN_UNP_KEY_{frm}
*% IF FIN_UNP_KEY_{frm}
      *<<<< DOC: FIN_UNP_KEY_{frm}
      * Este label permite tomar el control despues de desproteger las llaves.
      * En  este label  generalmente  se protegen  ciertas  llaves protegidas
      * automaticamente para manejar ciertas situaciones especiales.  
      * Por ejemplo  el caso de  un correlativo  asignado en forma automatica 
      * por programa.
*% END

H3 INI_UNP_IKY_{frm}
*% IF INI_UNP_IKY_{frm}
      *<<<< DOC: INI_UNP_IKY_{frm}
      * Este label permite tomar el control antes de desproteger las llaves
      * del tipo IKY.
*% END

H3 FIN_UNP_IKY_{frm}
*% IF FIN_UNP_IKY_{frm}
      *<<<< DOC: FIN_UNP_IKY_{frm}
      * Este label permite tomar el control despues de desproteger las llaves
      * del tipo IKY.
*% END

H3 INI_UNP_AKY_{frm}
*% IF INI_UNP_AKY_{frm}
      *<<<< DOC: INI_UNP_AKY_{frm}
      * Este label permite tomar el control antes de desproteger las llaves
      * del tipo AKY.
*% END

H3 FIN_UNP_AKY_{frm}
*% IF FIN_UNP_AKY_{frm}
      *<<<< DOC: FIN_UNP_AKY_{frm}
      * Este label permite tomar el control despues de desproteger las llaves
      * del tipo AKY.
*% END
#

H3 INI_UNP_MKY_{frm}
*% IF INI_UNP_MKY_{frm}
      *<<<< DOC: INI_UNP_MKY_{frm}
      * Este label permite tomar el control antes de desproteger las llaves
      * del tipo MKY.
*% END

H3 FIN_UNP_MKY_{frm}
*% IF FIN_UNP_MKY_{frm}
      *<<<< DOC: FIN_UNP_MKY_{frm}
      * Este label permite tomar el control despues de desproteger las llaves
      * del tipo MKY.
*% END
       
H3 INI_UNP_FLD_{frm}
*% IF INI_UNP_FLD_{frm}
      *<<<< DOC: INI_UNP_FLD_{frm}
      * Este label permite tomar el control antes de desproteger los campos
      * no llaves.
*% END
 
H3 FIN_UNP_FLD_{frm}
*% IF FIN_UNP_FLD_{frm}
      *<<<< DOC: FIN_UNP_FLD_{frm}
      * Este label permite tomar el control despues de desproteger los campos
      * no llaves. En  *% FIN_UNP_FLD_{frm}  generalmente se protegen ciertos
      * campos  no llaves  protegidos  automaticamente  para  manejar ciertas
      * situaciones especiales.
*% END
       
H3 INI_UNP_{reg}_{frm}
*% IF INI_UNP_{reg}_{frm}
      *<<<< DOC: INI_UNP_{reg}_{frm}
      * Este label permite tomar el control antes de desproteger los campos
      * no llave  del registro imagen para el registro {reg}.
*% END

H3 FIN_UNP_{reg}_{frm}
*% IF FIN_UNP_{reg}_{frm}
      *<<<< DOC: FIN_UNP_{reg}_{frm}
      * Este label permite tomar el control despues de desproteger los campos
      * no llave  del registro imagen para el registro {reg}.
*% END

       
H3 INI_VAL_KEY_{frm}
*% IF INI_VAL_KEY_{frm}
      *<<<< DOC: INI_VAL_KEY_{frm}
      * Este label permite tomar  el  control antes de validar los campos
      * llaves capturados desde la pantalla.
*% END

H3 FIN_VAL_KEY_{frm}
*% IF FIN_VAL_KEY_{frm}
      *<<<< DOC: FIN_VAL_KEY_{frm}
      * Este label permite tomar  el  control despues de validar los campos
      * llaves capturados desde la pantalla.
*% END

#

H3 INI_VAL_IKY_{frm}
*% IF INI_VAL_IKY_{frm}
      *<<<< DOC: INI_VAL_IKY_{frm}
      * Este label permite tomar  el  control antes de validar los campos
      * llaves capturados desde la pantalla del tipo IKY.
*% END

H3 FIN_VAL_IKY_{frm}
*% IF FIN_VAL_IKY_{frm}
      *<<<< DOC: FIN_VAL_IKY_{frm}
      * Este label permite tomar  el  control despues de validar los campos
      * llaves capturados desde la pantalla del tipo IKY.
*% END

H3 INI_VAL_AKY_{frm}
*% IF INI_VAL_AKY_{frm}
      *<<<< DOC: INI_VAL_AKY_{frm}
      * Este label permite tomar  el  control antes de validar los campos
      * llaves capturados desde la pantalla del tipo AKY.
*% END

H3 FIN_VAL_AKY_{frm}
*% IF FIN_VAL_AKY_{frm}
      *<<<< DOC: FIN_VAL_AKY_{frm}
      * Este label permite tomar  el  control despues de validar los campos
      * llaves capturados desde la pantalla del tipo AKY.
*% END

H3 INI_VAL_MKY_{frm}
*% IF INI_VAL_MKY_{frm}
      *<<<< DOC: INI_VAL_MKY_{frm}
      * Este label permite tomar  el  control antes de validar los campos
      * llaves capturados desde la pantalla del tipo MKY.
*% END

H3 FIN_VAL_MKY_{frm}
*% IF FIN_VAL_MKY_{frm}
      *<<<< DOC: FIN_VAL_MKY_{frm}
      * Este label permite tomar  el  control despues de validar los campos
      * llaves capturados desde la pantalla del tipo MKY.
*% END

       
H3 {reg}_{tipo}_{nombre}
*% IF {reg}_{tipo}_{nombre}
      *<<<< DOC: {reg}_{tipo}_{nombre}
      * En  este  label  se escribe el codigo de validacion para el campo
      * especifico. Busqueda en alguna tabla, rango.
      * En general se escribe el codigo de validacion  cuando el campo se 
      * valida en forma autonoma, es decir su validacion  no se relaciona
      * con otros  campos del  formulario.  Para  la  situacion  descrita
      * anteriormente existe otro label ( consistencia ).
*% END

#

H3 INI_VAL_CON_IKY_{frm}
*% IF INI_VAL_CON_IKY_{frm}
      *<<<< DOC: INI_VAL_CON_IKY_{frm}
      * En  este labels es posible tomar el control antes de la validacion
      * de consistencia de los campos llaves del tipo IKY.
      * Se  entiende por validacion de consistencia, aquella en la cual se
      * relacionan mas de un campo del formulario.
      * Ejemplos :
      *       a) Campo A mayor que campo B y menor que campo C.
      *       b) Si campo A esta vacio implica que campo B no debe estar
      *          vacio.
      *
      * Cuando una validacion de consistencia no resulta exitosa, el
      * cursor se posiciona siempre en el primer campo del tipo
      * correspondiente, llave o no llave.
*% END

H3 FIN_VAL_CON_IKY_{frm}
*% IF FIN_VAL_CON_IKY_{frm}
      *<<<< DOC: FIN_VAL_CON_IKY_{frm}
      * En este labels es posible tomar el control despues de la
      * validacion de consistencia de los campos llaves del tipo IKY.
*% END

H3 INI_VAL_CON_KEY_{frm}
*% IF INI_VAL_CON_KEY_{frm}
      *<<<< DOC: INI_VAL_CON_KEY_{frm}
      * En este labels es posible tomar el control antes de la validacion
      * de consistencia de los campos llaves del tipo IKY, AKY y MKY
      * Se entiende por validacion de consistencia, aquella en la cual se
      * relacionan mas de un campo del formulario.
      * Ejemplos :
      *       a) Campo A mayor que campo B y menor que campo C.
      *       b) Si campo A esta vacio implica que campo B no debe estar
      *          vacio.
      *
      * Cuando una validacion de consistencia no resulta exitosa, el
      * cursor se posiciona siempre en el primer campo del tipo
      * correspondiente, llave o no llave.
*% END

H3 FIN_VAL_CON_KEY_{frm}
*% IF FIN_VAL_CON_KEY_{frm}
      *<<<< DOC: FIN_VAL_CON_KEY_{frm}
      * En este label es posible tomar el control despues de la validacion
      * de consistencia de los campos llaves del tipo IKY, AKY y MKY
      * Se entiende por validacion de consistencia, aquella en la cual se
      * relacionan mas de un campo del formulario.
      * Ejemplos :
      *       a) Campo A mayor que campo B y menor que campo C.
      *       b) Si campo A esta vacio implica que campo B no debe estar
      *          vacio.
      *
      * Cuando una validacion de consistencia no resulta exitosa, el
      * cursor se posiciona siempre en el primer campo del tipo
      * correspondiente, llave o no llave.
*% END

H3 INI_VAL_CON_AKY_{frm}
*% IF INI_VAL_CON_AKY_{frm}
      *<<<< DOC: INI_VAL_CON_AKY_{frm}
      * En  este  labels es  posible tomar el control antes de la validacion
      * de consistencia de los campos llaves del tipo AKY.
*% END

H3 FIN_VAL_CON_AKY_{frm}
*% IF FIN_VAL_CON_AKY_{frm}
      *<<<< DOC: FIN_VAL_CON_AKY_{frm}
      * En  este  labels es  posible tomar el control despues de la validacion
      * de consistencia de los campos llaves del tipo AKY.
*% END

H3 INI_VAL_CON_MKY_{frm}
*% IF INI_VAL_CON_MKY_{frm}
      *<<<< DOC: INI_VAL_CON_MKY_{frm}
      * En  este  labels es  posible tomar el control antes de la validacion
      * de consistencia de los campos llaves del tipo MKY.
*% END

H3 FIN_VAL_CON_MKY_{frm}
*% IF FIN_VAL_CON_MKY_{frm}
      *<<<< DOC: FIN_VAL_CON_MKY_{frm}
      * En  este  labels es  posible tomar el control despues de la validacion
      * de consistencia de los campos llaves del tipo MKY.
*% END

H3 INI_VAL_FLD_{frm}
*% IF INI_VAL_FLD_{frm}
      *<<<< DOC: INI_VAL_FLD_{frm}
      * En este label es posible tomar el control antes de empezar a
      * realizar la validacion de cada campo no llave de la pantalla
      * ( es decir antes de empezar a llamar a los parrafos de
      *   validacion de los campos )
*% END

H3 FIN_VAL_FLD_{frm}
*% IF FIN_VAL_FLD_{frm}
      *<<<< DOC: FIN_VAL_FLD_{frm}
      * En este label es posible tomar el control despues de realizar
      * la validacion de cada campo no llave de la pantalla, siempre
      * que dichas validaciones hayan salido bien
      * ( es decir despues de llamar a los parrafos de validacion de
      *   los campos )
*% END

H3 VAL_CON_FLD_{frm}
*% IF VAL_CON_FLD_{frm}
      *<<<< DOC: VAL_CON_FLD_{frm}
      * En  este label es posible tomar el control para programar la
      * validacion de consistencia de los campos no llaves.
      * Si se debe programar algun calculo que en alguna medida depende
      * de valores de la pantalla, se recomienda programarlos en este
      * label
*% END

