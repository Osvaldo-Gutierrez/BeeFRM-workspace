I
I
I
I
I
I
I
I
I
I
I	CAPACITACION GENESIS
I	---------------------
I
I
I	
I
I
I
I
I	MODULO VII GENERADOR DE PROGRAMAS INTERACTIVOS PGM
I	--------------------------------------------------
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I							Consist.
I
I
I
I
I
I
I
1 PGM_interact
H		   Generador de programas interactivos PGM
H		    
T01		   Generador de programas interactivos PGM
P		    -----------------------------------------
I
I			Indice
I			======
I
T02	Objetivos
I

	El producto PGM permite definir y generar un programa interactivo,

	adicionalmente es posible incorporar codigo adicional al programa

	para aumentar su potencialidad.

	La generacion de un programa interactivo consta de las etapas
	siguientes :

	a) Definicion de atributos y caracteristicas del programa que
	   se desea generar.			    ( Comando DEFPGM )

	b) Creacion del codigo adicional para el programa.

	c) Generacion del programa definido en a).  ( Comando GENPGM )
	   con o sin codigo adicional.

	d) Regeneracion iterativa del programa incorporando potencialidades
	   al codigo adicional, en la etapa de depuracion del mismo.
#
2 Funcionalidades
T02	Funcionalidades.
I

	   Un programa generado sin codigo adicional posee las siguientes
	potencialidades.

	- Generacion de programa con comandos standard.
	  ( ING, MOD, ACT, ELI, CON )

	- Despliege y acceso parametrico de comandos a traves de archivo
	  de definicion y parametros de programa.

	- Creacion de registros a traves de comando ING.

	- Modificacion de registros a traves de comando MOD.

	- Creacion o modificacion de registros a traves de comando ACT.

	- Eliminacion de registros a traves de comado ELI.

	- Consulta de registros a traves de comando CON.

	- Manejo automatico de campos llaves y campos no llaves, en cada
	  uno de los comados.

	- Instancia opcional de confirmacion para comandos a traves de RPF.

	- Mensajes parametricos de confirmacion para comandos a traves de RPF.

	- Enganche automatico a menus GENESIS a traves de producto MEN.

	- Incorporacion de nuevos comandos cuyas funcionalidades
	  estan dadas por el codigo adicional escrito por el programador.

	- "Congelamiento" del programa

	- Seteo de llaves

	
#
2 Definicion
T02	Definicion
I

	   La  actualizacion  de parametros  para  un  programa interactivo,
	se hace ejecutando la opcion adecuada dentro del sistema GENESIS ad-
	ministrando el sistema al cual pertenece el programa.

	a) En IBM ejecutar : SISTGNS {sis}
	                     y elegir opcion PPI

	b) en VAX ejecutar comando : $ DEFPGM

	   Esta  opcion  ejecuta  el  programa GNSPARPF el cual actualiza el
	archivo  RPF  en  donde  se encuentran almacenadas centralizadamente
	para el sistema administrado , los parametros de todos sus programas
	interactivos.
	   GNSPARPF a  su  vez  puede ser incorporado  como opcion dentro de
	cualquier menu.Por lo tanto esto permite tener una opcion dentro del
	menu de un determinado  sistema, la cual actualice los parametros de
	los programas interactivos de ese sistema.

3 Comandos
T03 Comandos.

	El programa GNSPARPF, posee los siguientes comandos :

		- ING
		- MOD
		- ACT
		- ELI
		- CON
		- COP
	La explicacion del uso de los comandos anteriores se encuentra en el
	documento generico de uso de programas actualizadores de GENESIS.
#
 
3 Campos
T03 Descripcion de los campos

4 Programa
T04 Programa

	   Llave  principal  la cual se debe ingresar en forma obligatoria y
	corresponde al nombre del Programa a generar, en la forma :

		{sis}nombre_libre

4 Autor 
T04 Autor 

	   Se debe ingresar  en  forma  obligatoria  el nombre del Autor del
	Programa.

4 IFD_o_IDD
T04 IFD o IDD

	Permite la especificacion de una IFD o IDD especial para el programa.

4 Arc_Base
T04 Archivo Base

	   Se debe ingresar  en forma obligatoria el nombre del Archivo Base
	a actualizar, en la forma :

		{sis}{reg}

	   Este  nombre de archivo es una especificacion logica, no fisica y
	se usa para deducir registro y FIO a utilizar.


4 Formulario
T04 Formulario.

	 Se debe ingresar el nombre del Formulario que el Programa requiere.

4 Bibl_Form
T04 Biblioteca de Formulario.

	   El nombre  de  la Biblioteca, en donde reside el Formulario FMS a
	utilizar por el Programa. Se define como {sis}FMS.

4 Subr_comandos
T04 Subrutina de comandos

	   El nombre  de la Subrutina de  Comandos que  el programador desee
	usar,  en  reemplazo  de  la  rutina de defecto que provee GENESIS.

4 Prompt_Comandos
T04 Prompt de Comandos

	El Prompt con el cual la Subrutina que procesa los comandos solicitara
	los comandos.

4 Prompt_Aborto
T04 Prompt de Aborto

	   Un Prompt  general  de  Aborto,  en  el  caso  de  producirse una
	situacion de  Aborto  en el ingreso o modificacion de  los campos de
	un formulario.
#

4 Cod
T04 Cod

	   Para cada  programa  interactivo  es posible definir una lista de
	comandos. La  identificacion de estos comandos, para el usuario, du-
	rante la  explotacion  del  programa  se  denomina Codigo de Comando 
	Externo. es decir es el string con el cual el usuario elegira el co-
	mando deseado.

	   En todo caso, dentro  del  programa, estos comandos deben corres-
	ponder a alguno de los Comandos Internos. 

4 Cpp
T04 Cpp

	   Codigo de Comando Interno, asociado  al Codigo Externo, es el que
	internamente el  Programa  reconocera  como  un comando valido; este
	puede ser uno de los siguientes :

	MOD		Modificacion  ( Modifica registro existente )
	ING		Ingreso       ( Ingresa nuevo registro )
	ACT		Actualizacion ( Modificacion + Ingreso )
	ELI		Eliminacion   ( Elimina registro existente )
	ACC		Accion        ( Accion sobre un registro
					existente, debe programarse
					como codigo adicional )
	PGM		Programador   ( Debe programarse como codigo
					adicional )

	Espacios : Es valido  solo en el caso que el comando tenga subrutina
		   asociada,ya que en este caso el Codigo no es interpretado
		   por el programa principal.

4 Spp
T04 Spp
	   Codigo de Status,  asociado  al  Comando  Interno ,  e  indica el
	status  con el cual quedara el programa, despues de desplegar la in-
	formacion  del  formulario o haberla ingresado ( segun corresponda),
	este puede ser uno de los siguientes :

		M	Status de Modificacion
		A	Status de Accion
		C	Status de Consulta


4 Prompt
T04 Prompt

	   Prompt  que  desplegara el programa con Status de  Modificacion o
	Accion,  esto  se  hace naturalmente despues de desplegar o ingresar
	los datos de un formulario, segun corresponda.

4 Confirmacion
T04 Confirmacion

	   En  el caso que  se desee Confirmacion, ya sea de la ejecucion de
	la subrutina  asociada  a un Comando ( si existe ), o de la accion a
	ejecutar por  el programa en un determinado "Estado" ( Comando ), se
	debe ingresar  este Prompt, que se desplegara para el proposito men-
	cionado.

#

4 Subrutina
T04 Subrutina

	   El  nombre  de  una Subrutina, asociada a un  Comando especifico,
	esta se ejecuta cuando  se  selecciona  el comando mencionado, si el
	nombre  es  espacios,  entonces   el Comando elegido es interpretado
	como  un "estado"  para el  programa ( a traves de Cpp ).

	   Esta es activada por la subrutina DESSCRCMN. La idea es dar mayor
	flexibilidad  al  programa  a generar, a fin de incorporar tareas no
	predefinidas. 


2 Generacion
T02	Generacion
I

	El comando GENPGM permite generar un Programa Interactivo de man-
	tencion y/o consulta de datos, asociado a un formulario FMS.

	Sintaxis :

		$ GENPGM {nombre_programa}

		donde : {nombre_programa} ya debe haber sido definido por 
			DEFPGM.	
	
	Modulos Generados :

	A fin de producir el programa, se generan los modulos .TEM y .COB. 
	La idea es permitir la incorporacion de codigo adicional, preparado 
	por el usuario en el modulo .TXT. Este ultimo es opcional. 

	La operatoria con estos modulos es la siguiente :

		{nombre_programa}.TEM 	Contiene %INCLUDE de PREPTEX.
			  + 
		{nombre_programa}.TXT	Codigo adicional del usuario
			  |              ( *% IF y *% END IF + COBOL )   
			  |
			  V
		{nombre_programa}.[COB]   Programa Interactivo, COBOL puro.
				  [PGD]

	Los modulos TEM y PGD residen en la cuenta del usuario. El mo-
	dulo TXT puede estar en la cuenta del usuario o en el area
	TXT del programador o del proyecto.

#
2 Estructura
T2	Estructura
I
	A fin de obtener un adecuado rendimiento del producto PGM, es con-
	veniente comprender los distintos modulos relacionados con un pro-
	grama interactivo.

	A continuacion se describen brevemente dichos modulos, asi como un
	esquema con estas interrelaciones.

3 Modulos
T03	Modulos.
I

	* Registros de parametros : GNSWGFRM, GNSWGSCR

	Modulos estandares de GENESIS, necesarios para la comunicacion
	entre el programa principal y las distintas interfases que em-
	plea. Tambien contienen una serie de variables de trabajo local,
	Se accesan a traves de COPY en forma automatica al generar un
	programa.

	* Interfaz Usuario-Programa

	Existen varios modulos, cuyo objetivo es estandarizar y racio-
	nalizar el manejo de la interfaz del usuario con la pantalla y
	los programas interactivos.

	- Formulario Header

		Todo programa interactivo emplea un formulario standar
		de heading, el que es manejado por el producto MEN.

	- Formulario Trailer

		Todo programa interactivo emplea un formulario estandar
		de trailer, el que es manejado por el producto MEN.

	* Registro Imagen : {sis}WI{frm}

		Area de WSS que sirve de almacenamiento temporal para los
		valores de los campos del formulario.
		Este modulo es generado por el producto FRM.

	* Modulo de manejo asociado : {sis}BM{frm}
		Opera con los campos del formulario.
		Este modulo es generado por el producto FRM.

	* Registro(s) de archivo(s)

		Es necesario copiar aquellos registros de los archivos
		involucrados en el programa distintos al archivo base.
	
	* Subrutina(s) FIO

		Es necesario copiar tantas FIOs como archivos se usen
		distintos al archivo base.


#

2 Flujo
T2 Flujo

	   Un programa interactivo generado  por PGM de GENESIS para IBM se,
	ejecuta siempre bajo el control de algun menu  de GENESIS ( Producto
	MEN ), como se puede apreciar  en el esquema de la pagina previa, es
	decir, si es  invocado directamente desde CICS el programa no reali-
	za accion alguna.  MEN  es el  encargado  de capturar los parametros
	asociados al programa.

			- Mapa.

			- Comandos disponibles.

			- Confirmacion.

			- Glosas.

	   Una vez  capturados estos parametros MEN transfiere el control al
	programa con un comando ya seleccionado, las glosas asociadas  a ese
	comando y el estatus de confirmacion del comando.

	   El programa  inicia  el proceso detectando el comando con el cual
	debe operar,  esto  lo  hace  verificando  el  valor  de la variable
	SCR-CCPP  transferida  con  algun valor especifico desde MEN, ademas
	verifica el valor de la variable SCR-INST, la cual al tomar el valor
	SCR-INST-HCM indica  que el control debe ser devuelto a MEN.
	   una vez detectado el comando por el programa, invoca a las SECTION
	SCR-%%% donde %%% corresponde al comando a procesar.

	Comando		SCR-CCPP	SECTION que procesa el comando
	-------		--------	------------------------------

	Modificacion	MOD		SCR-MOD

	Ingreso		ING		SCR-ING

	Accion sobre un	
	registro 	ACC		SCR-ACC
	existente	

	Eliminacion	ELI		SCR-ELI

	Actualizacion	ACT		SCR-ACT

	Comando del
	programador	PGM		SCR-PGM


	   El programa usa el formulario {frm}, actualiza el archivo
	{sis}{fil} y opera en la siguiente forma.

#
	SCR-MOD
	1.- Desprotege los campos llaves del formulario, protege los campos
	    no llave y posiciona el cursor. Esto lo hace  a traves de HBL-KEY
	    SECTION.

	    HBL-KEY invoca las siguientes SECTION del modulo de manejo del
	    formulario asociado al programa.
       PRO-FLD-{frm} SECTION protege campos no llaves.
       UNP-KEY-{frm} SECTION desprotege campos llaves.
       FST-KEY-{frm} SECTION posiciona el cursor en el primer campo llave
			     del formulario.

	2.- Despliega el formulario con un mensaje apropiado y espera una
	    respuesta del operador.

	3.- Captura las llaves del formulario y dependiendo la tecla digitada
	    por el operador decide la accion a seguir.

		a) Enter o PF10 avanza a 4.

		b) PF12 Limpia las llaves y vuelve a 2.

		c) PF3 Protege y limpia todos los campos del formulario,
		   despliega el formulario y transfiere el control a MEN.

	    La captura de las llaves lo hace a traves de GET-KEY SECTION.

	    Valida cada campo llave ingresada a traves de las SECCION.

       VAL-IKY-{frm} SECTION valida campos tipo IKY.
       VAL-MKY-{frm} SECTION valida campos tipo MKY.
       VAL-AKY-{frm} SECTION valida campos tipo AKY.

#

	4.- Con las llaves digitadas por el operador trata de leer ese
	    registro desde el archivo base.
	    El exito en esta accion depende de dos elementos ; El status de
	    lectura  (  FIO-STAT  ) y el comando que este procesando el
	    programa.

		COMANDO		FIO-STAT	Resultado
		-------         --------        ---------
		ING		NOT OK		Exitoso
		ING		OK		No exitoso

		MOD		NOT OK		No exitoso
		MOD		OK		Exitoso

		ACT		OK		Exitoso
		ACT		NOT OK		Exitoso

		ELI		NOT OK		No exitoso
		ELI		OK		Exitoso

		ACC		NOT OK		No exitoso
		ACC		OK		Exitoso
		
	    Esta lectura para cualquier comando la ejecuta FND-KEY SECTION.
	    FND-KEY invoca la siguiente SECTION del modulo de manejo del
	    formulario asociado al programa.
		KEY-ALL-{frm} mueve las llaves desde el registro imagen
			      del formulario a las llaves en los registros.
	    Posteriormente usa la fio asociada para leer el registro de la
	    forma :

           MOVE FIO-GET-KEY TO FIO-CMND.
           PERFORM {sis}-FIO-{fil}.

	5.- Si el resultado de la lectura no es exitoso, el programa man-
	    tiene las llaves digitadas por el operador y vuelve a 2.

#


	6.- Si el  resultado   de la lectura es exitoso, el programa toma la
	    siguiente accion dependiendo del comando bajo el cual se encuen-
	    tre.


	Comando	Accion

	ING	Protege  las llaves, desprotege los campos no llaves y posi-
		ciona el cursor a traves de HBL-FLD SECTION.
		HBL-FLD invoca  las  siguientes SECTION del modulo de manejo
		del formulario asociado al programa.
       PRO-IKY-{frm} SECTION Protege campos "IKI".
       PRO-AKY-{frm} SECTION Protege campos "AKI".
       UNP-MKY-{frm} SECTION Desprotege campos "MKI".
       UNP-FLD-{frm} SECTION Desprotege campos no llaves.
       FST-FLD-{frm} SECTION Posiciona el cursor en el primer campo
					no llave.
		Posteriormente despliega  el formulario para que el operador
		ingrese los campos asociados a las llaves y espera la respu-
		esta de este.

	MOD	Actua de la  misma forma que ING, pero ademas invoca la sec-
		tion  del  modulo de manejo PUT-ALL-{frm} : Mueve los campos
		desde  los  archivos a los  campos del registro imagen, para
		que operador pueda modifcar la informacion que aparece en la
		pantalla.


	ACT 	Como ACT es la suma de ING + MOD, se comporta como ING al no
		existir el registro y como MOD al existir el registro.

	ELI	Actua como un MOD, pero en vez de usar HBL-FLD para despro-
		teger los campos usa PRO-ALL para proteger todos los campos del
		formulario y posicionar el cursor.
       PRO-KEY-RDC SECTION Protege los campos llaves del formulario.
       PRO-FLD-RDC SECTION Protege los campos no llaves del formulario.
       FST-MSG SECTION Posiciona el cursor en la linea de mensajes.

	ACC	

		Despliega el formulario y espera respuesta del operador.

	7.- Al recibir respuesta del operador, si este ha tenido acceso a
	    los campos del formulario, es decir si ha podido 'pasearse'
	    por el formulario y modificar la informacion desplegada, como
	    por ejemplo en comandos ING,MOD,ACT se validan los campos del
	    formulario. Para esto el programa invoca a VAL-FLD-{frm} del
	    modulo de manejo.
	    Si la validacion no es exitosa se va a 6 manteniendo el estatus
	    de la lectura.
	    Si la validacion resulta exitosa y el programa debe confirmar
	    este comando, protege todo el formulario con PRO-ALL, lo despliega,
	    posiciona el cursor y espera respuesta del operador.
	    Si la validacion es exitosa y el programa no debe confirmar este
	    comando, se va a 9.
#

	8.- Al recibir la confirmacion que se expresa a traves de la tecla
	    digitada por el operador el programa actua de la siguiente forma.

		PF12 : Se retorna a 6.
		PF3  : idem 3.c)
		Enter o PF10 : Va a 9.

	9.- La accion a realizar en este punto dependiendo del comando es la
	    siguiente :

	    ING : Ingresa el registro, para lo cual invoca RET-ALL-{frm} del
		  modulo de  manejo,  con lo cual se mueven todos los campos
		  del  registro  imagen  a los registros, despues usa la fio
		  para grabar el registro.

           MOVE FIO-PUT TO FIO-CMND.
           PERFORM {sis}-FIO-{fil}.

		  Esta accion la realiza a traves de CMN-ING SECTION.

	    MOD : Modifica  el  registro,  para  lo cual  primero lo toma en
		  forma  exclusiva  a  traves de la fio, cargando las llaves
		  con KEY-ALL-{FRM} del modulo de manejo.
           MOVE KEY-ALL-{frm}.
           MOVE FIO-GET-KEY-UPD TO FIO-CMND.
           PERFORM {sis}-FIO-{fil}.

		  Posteriormente lo modifica cargando todos los campos del
		  registro imagen a los registros del archivo base a traves
		  de la section RET-ALL-{frm} del modulo de manejo.
	   PERFORM RET-ALL-{frm}.
           MOVE FIO-MOD TO FIO-CMND.
           PERFORM {sis}-FIO-{fil}.


	    ACT : Como ACT es ING + MOD ingresa o modifica el registro depen-
		  diendo de la existencia del registro, para lo cual utiliza
		  las mismas SECTION de estos comandos.

	    ELI : Elimina el registro, para lo cual primero lo toma en forma
		  exclusiva cargando las llaves con KEY-ALL-{frm} del modulo
		  de manejo.
           PERFORM KEY-ALL-{frm}.
           MOVE FIO-GET-KEY-UPD TO FIO-CMND.
           PERFORM {sis}-FIO-{fil}.
	   
	   Posteriormente lo elimina usando la fio con el comando apropiado.
           MOVE FIO-DEL TO FIO-CMND.
           PERFORM {sis}-FIO-{fil}.

#
2 Codigo_Adicional
T2	Codigo adicional
I

	El codigo adicional permite que el programa modifique su com-
	portamiento para las acciones estandar o realice tareas total-
	mente especificas que el usuario desee incorporar, aprovechando
	toda la infraestructura que el programa entrega.

	A continuacion  se  detallan algunos los puntos de entrada, en
	el programa a generar en donde es posible incorporar codigo 
	adicional. Para esto se emplea PREPTEX.


H3 WSS
*% IF WSS
      * DOC: WSS
      *	Objetivo  : Incluir Codigo en la WORKING STORAGE SECTION
      *		    Variables, otros registros, etc.
      *	Ejemplo :
      *
      *    01  WSS-VARI.
      *        03  WSS-NUM-CONT           PIC 9(02).
      *    COPY COLBRDLC.
*% END
                  
H3 INI_FIO_VAX
*% IF INI_FIO_VAX
      * DOC: INI_FIO_VAX
      *	Objetivo  : Abrir Archivos anexos
      *	Instancia : Inicio del Programa, antes de abrir Archivo Base
*% END

H3 INI_FRM
*% IF INI_FRM
      * DOC: INI_FRM
      *	Objetivo  : Incluir inicializaciones de Formularios anexos	
      *	Instancia : Despues de Inicializar Formulario Principal
*% END

H3 SCR_PGM
*% IF SCR_PGM
      * DOC: SCR_PGM
      *	Objetivo  : Codigo para decidir las  acciones asociadas a los
      *		    comandos del Programador,  construidos sobre  PGM
      *		    ( FIO-STAT  indica  resultado  de  la  lectura  y
      *		    SCR-CMND el comando del programador ).
      *	Instancia : Inmediatamente despues de leer en Archivo Base el
      *		    registro requerido.
*% END

H3 SCR_RST
*% IF SCR_RST
      * DOC: SCR_RST
      *	Objetivo  : Resetear variables, contadores, etc.
      *	Instancia : Antes de Iniciar o Reiniciar el Proceso sobre
      *		    el  Archivo  Base  ( Modificacion, Ingreso,
      *		    Consulta, etc. )
*% END

#

H3 GET_KEY
*% IF GET_KEY
      * DOC: GET_KEY
      *	Objetivo  : Ninguno especifico
      *	Instancia : Antes de capturar llaves desde la pantalla.
*% END

H3 INI_FND_KEY
*% IF INI_FND_KEY
      * DOC: INI_FND_KEY
      *	Objetivo  : Leer otros archivos, Complementar llave, etc.
      *	Instancia : Previo a hacer un KEY-ALL-{frm} y previo a
      * 		    leer el archivo base.
*% END

H3 FND_KEY
*% IF FND_KEY
      * DOC: FND_KEY
      *	Objetivo  : Leer otros archivos, Complementar llave, etc.
      *	Instancia : Posterior a hacer un KEY-ALL-{frm} y previo a
      *		    leer el archivo base.
*% END

H3 FIN_FND_KEY
*% IF FIN_FND_KEY
      * DOC: FIN_FND_KEY
      *	Objetivo  : Leer otros archivos, Complementar llave, etc.
      *	Instancia : Posterior a hacer un KEY-ALL-{frm} y posterior a
      *		    leer el archivo base.
*% END

H3 PUT_SCR
*% IF PUT_SCR
      * DOC: PUT_SCR
      *	Objetivo  : Llenar campos anexos del formulario, leer Tablas,
      *		    etc.
      *	Instancia : Antes de desplegar formulario despues de leer
      *		    registro ( cuando corresponda )
*% END

H3 INI_HBL_FLD
*% IF INI_HBL_FLD
      * DOC: INI_HBL_FLD
      *	Objetivo  : Cambiar  radicalmente la habilitacion de campos
      *             ( proteccion de llaves, desproteccion de campos
      *             posicionamiento  del cursor en el primer campo)
      *             natural del programa
      *	Instancia : En comandos de ingreso y modificacion de
      *             registros antes de desproteger los campos y
      *             desplegar la pantalla
*% END

H3 FIN_HBL_FLD
*% IF FIN_HBL_FLD
      * DOC: FIN_HBL_FLD
      *	Objetivo  : Tomar  el control despues de la habilitacion de
      *             campos ( proteccion de llaves, desproteccion de
      *             campos, posicionamiento del cursor en el primer
      *             campo) natural del programa
      *	Instancia : En comandos de ingreso y modificacion de
      *             registros despues de desproteger los campos
      *             y antes de desplegar la pantalla
*% END

H3 INI_HBL_IKY
*% IF INI_HBL_IKY
      * DOC: INI_HBL_IKY
      *	Objetivo  : Cambiar radicalmente la habilitacion de llaves
      *             de tipo IKY ( desproteccion de llaves y posi-
      *             cionamiento del cursor en el primer campo IKY)
      *             natural del programa
      *	Instancia : Solo en comandos de ingreso antes de desproteger
      *             los campos de tipo IKY y desplegar la pantalla
*% END

H3 FIN_HBL_IKY
*% IF FIN_HBL_IKY
      * DOC: FIN_HBL_IKY
      *	Objetivo  : Tomar el control despues de la habilitacion de
      *             llaves de tipo IKY ( desproteccion de llaves y
      *             posicionamiento  del cursor en el primer campo
      *             IKY) natural del programa
      *	Instancia : Solo   en   comandos  de  ingreso  despues  de
      *             desproteger  los campos de tipo IKY y antes de
      *             desplegar la pantalla
*% END

H3 INI_HBL_KEY
*% IF INI_HBL_KEY
      * DOC: INI_HBL_KEY
      *	Objetivo  : Cambiar radicalmente la habilitacion de llaves
      *             de tipo IKY, AKY, MKY ( desproteccion de llaves
      *             y posicionamiento del cursor en el primer campo IKY )
      *             natural del programa
      *	Instancia : Solo en comandos de modificacion, eliminacion o
      *             consulta antes de desproteger los campos de tipo
      *             IKY, AKY y MKY y desplegar la pantalla
*% END

H3 FIN_HBL_KEY
*% IF FIN_HBL_KEY
      * DOC: FIN_HBL_KEY
      *	Objetivo  : Tomar el control despues de la habilitacion de
      *             llaves de tipo IKY, AKY, MKY ( desproteccion de
      *             llaves y posicionamiento del cursor en el primer
      *             campo IKY ) natural del programa
      *	Instancia : Solo en comandos de modificacion, eliminacion o
      *             consulta despues de desproteger los campos de tipo
      *             IKY, AKY y MKY y antes de desplegar la pantalla
*% END

H3 GET_FLD
*% IF GET_FLD
      * DOC: GET_FLD
      *	Objetivo  : Ninguno especifico
      *	Instancia : Antes de leer los campos del formulario en caso de
      *		    Ingresar un nuevo registro
*% END

C     Despues de confirmar el ingreso del registro se ejecuta la SECTION
C     CMN-ING la cual posee los siguientes puntos de entrada para codigo
C     adicional.

#

H3 INI_PRO_CONF
*% IF INI_PRO_CONF
      * DOC: INI_PRO_CONF
      *	Objetivo  : Tomar el control antes de desplegar la pantalla
      *             para la confirmacion
      *	Instancia : Antes  de  confirmar la accion para comandos de
      *             ingreso, modificacion o eliminacion
*% END

H3 INI_SCR_TRL
*% IF INI_SCR_TRL
      * DOC: INI_SCR_TRL
      *	Objetivo  : Tomar el control antes del despliegue de la
      *             pantalla  para  el  ingreso,  modificacion,
      *             eliminacion o consulta
      *	Instancia : Antes de desplegar la pantalla. En el caso de
      *             ingreso con los datos desprotegidos, en el caso de
      *             modificacion, eliminacion o consulta con los datos
      *             ya cargados en la pantalla
*% END

H3 FIN_SCR_TRL
*% IF FIN_SCR_TRL
      * DOC: FIN_SCR_TRL
      *	Objetivo  : Tomar el control antes del despliegue de la
      *             pantalla para el ingreso, modificacion,
      *             eliminacion o consulta
      *	Instancia : Antes de desplegar la pantalla. En el caso de
      *             ingreso con los datos desprotegidos, en el caso
      *             de modificacion, eliminacion o consulta con los
      *             datos ya cargados en la pantalla
*% END

H3 INI_CMN_ING
*% IF INI_CMN_ING
      * DOC: INI_CMN_ING
      *	Objetivo  : Incorporar calculos, datos en el registro a
      *		    ingresar, etc.
      *	Instancia : Previo a hacer un RET-ALL-{frm}.
      *		    Previo a grabar el registro del archivo base.
      *			( {sis}-FIO-{fil} con comando FIO-PUT )
*% END

H3 CMN_ING
*% IF CMN_ING
      * DOC: CMN_ING
      *	Objetivo  : Incorporar calculos, datos en el registro a
      *		    ingresar, etc.
      *	Instancia : Posterior a hacer un RET-ALL-{frm}.
      *		    Previo a grabar el registro del archivo base.
      *			( {sis}-FIO-{fil} con comando FIO-PUT )
*% END

H3 FIN_CMN_ING
*% IF FIN_CMN_ING
      * DOC: FIN_CMN_ING
      *	Objetivo  : Tomar el control despues de haber grabado el
      *             registro.
      *		    
      *	Instancia : Posterior a hacer un RET-ALL-{frm}.
      *		    Posterior a grabar el registro del archivo base.
      *			( {sis}-FIO-{fil} con comando FIO-PUT )
*% END

C     Despues de confirmar la modificacion del registro se ejecuta la SECTION
C     CMN-MOD la cual posee los siguientes puntos de entrada para codigo
C     adicional.

H3 INI_CMN_MOD
*% IF INI_CMN_MOD
      * DOC: INI_CMN_MOD
      *	Objetivo  : Incorporar calculos, datos en el registro a
      *		    modificar, etc.
      *	Instancia : Previo a hacer un KEY-ALL-{frm}.
      *		    Previo a leer el registro a modificar.
      *		    ( {sis}-FIO-{fil} con comando FIO-GET-KEY-UPD )
      *		    Previo a hacer un  RET-ALL-{frm}.
      *		    Previo a modificar  el registro vigente.
      *		    ( {sis}-FIO-{fil} con comando FIO-MOD )
*% END

H3 CMN_MOD_RET
*% IF CMN_MOD_RET
      * DOC: CMN_MOD_RET
      *	Objetivo  : Incorporar calculos, datos en el registro a
      *		    modificar, etc.
      *	Instancia : Posterior a hacer un KEY-ALL-{frm}.
      *		    Posterior a leer el registro a modificar.
      *		    ( {sis}-FIO-{fil} con comando FIO-GET-KEY-UPD )
      *		    Previo a hacer un  RET-ALL-{frm}.
      *		    Previo a modificar  el registro vigente.
      *		    ( {sis}-FIO-{fil} con comando FIO-MOD )
*% END

#


H3 CMN_MOD
*% IF CMN_MOD
      * DOC: CMN_MOD
      *	Objetivo  : Incorporar calculos, datos en el registro a
      *		    modificar, etc.
      *	Instancia : Posterior a hacer un KEY-ALL-{frm}.
      *		    Posterior a leer el registro a modificar.
      *		    ( {sis}-FIO-{fil} con comando FIO-GET-KEY-UPD )
      *		    Posterior a hacer un  RET-ALL-{frm}.
      *		    Previo a modificar  el registro vigente.
      *		    ( {sis}-FIO-{fil} con comando FIO-MOD )
*% END

H3 FIN_CMN_MOD
*% IF FIN_CMN_MOD
      * DOC: FIN_CMN_MOD
      *	Objetivo  : Tomar el control despues de haber modificado el
      *             registro base, para actualizar otros archivos,
      *             etc.
      *	Instancia : Posterior a hacer un RET-ALL-{frm}.
      *		    Posterior a modificar el registro del archivo base.
      *			( {sis}-FIO-{fil} con comando FIO-MOD )
*% END

   El comando ACT esta contruido sobre el comando ING o sobre el comando
   MOD, dependiendo de la existencia del registro.

C     Despues de confirmar la eliminacion del registro se ejecuta la SECTION
C     CMN-ELI la cual posee los siguientes puntos de entrada para codigo
C     adicional.

H3 INI_CMN_ELI
*% IF INI_CMN_ELI
      * DOC: INI_CMN_ELI
      *	Objetivo  : Tomar el control antes de eliminar.
      *	Instancia : Previo a hacer un KEY-ALL-{frm}
      *		    Previo a leer el registro a eliminar.
      *		    ( {sis}-FIO-{fil} con comando FIO-GET-KEY-UPD )
      *		    Previo a eliminar el registro.
      *		    ( {sis}-FIO-{fil} con comando FIO-DEL )
*% END

H3 CMN_ELI
*% IF CMN_ELI
      * DOC: CMN_ELI
      *	Objetivo  : Tomar el control antes de eliminar.
      *	Instancia : Posterior a hacer un KEY-ALL-{frm}
      *		    Posterior a leer el registro a eliminar.
      *		    ( {sis}-FIO-{fil} con comando FIO-GET-KEY-UPD )
      *		    Previo a eliminar el registro.
      *		    ( {sis}-FIO-{fil} con comando FIO-DEL )
*% END

#

H3 FIN_CMN_ELI
*% IF FIN_CMN_ELI
      * DOC: FIN_CMN_ELI
      *	Objetivo  : Tomar el control despues de haber eliminado
      *             el registro.
      *
      *	Instancia : Posterior a hacer un KEY-ALL-{frm}.
      *		    Posterior a eliminar el registro del archivo
      *             base. ( {sis}-FIO-{fil} con comando FIO-DEL )
*% END

H3 CMN_ACC
*% IF CMN_ACC
      * DOC: CMN_ACC
      *	Objetivo  : Programar  la  accion a realizar sobre el registro,
      *		    segun  el  comando  del programador  ( SCR-CMND ) y
      *		    la   confirmacion   o   rechazo   (  SCR-VFLD-YES o
      *		    SCR-VFLD-NOT ) de la accion.
      *	Instancia : Despues  de confirmar la  accion, a  realizar sobre
      *		    el registro  requerido del Archivo Base,  aplicable
      *		    solo a aquellos comandos creados por el programador
      *		    que actuan sobre registros existentes ( ACC ).
*% END

H3 CMN_PGM
*% IF CMN_PGM
      * DOC: CMN_PGM
      *	Objetivo  : Programar la accion a realizar, segun el comando del
      *		    programador ( SCR-CMND ) y la confirmacion o rechazo
      *		    ( SCR-VFLD-YES o SCR-VFLD-NOT ) de la accion.
      *	Instancia : Despues de confirmar o rechazar la accion a rea-
      *		    lizar, cuando  corresponda,  en  el  caso  de  
      *		    comandos  del programador construidos sobre PGM.
*% END

H3 EOF
*% IF EOF
      * DOC: EOF
      *	Objetivo  : Incluir Parrafos de uso General por parte del
      *		    Programador
*% END

