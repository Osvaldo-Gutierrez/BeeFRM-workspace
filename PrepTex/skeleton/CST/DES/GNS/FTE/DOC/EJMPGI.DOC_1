I
I
I	C O N S I S T 
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I			EJEMPLO DE USO DE LA HERRAMIENTA
I
I	
I	   			   GENESIS
I
I
I
I    			    PROGRAMA INTERACTIVO
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I				MAYO 1990
#
T01              Ejemplo Construccion de un programa INTERACTIVO.
P                -----------------------------------------------
1 Ejemplo_genpgm


	Construccion  de  un  programa interactivo  que  mantenga  ( Ingresar,
	Eliminar, Modificar y Consultar) un archivo de Personal (DM2), el cual
        pertenece al sistema TST.

        Nomenclatura : 

          {Nom-sist} Nombre de sistema  de 3 caracteres en este caso TST
          {Nom-pant} Nombre de pantalla de 3 caracteres en este caso DML
          {Nom-regi} Nombre de registro de 3 caracteres en este caso DM2
	  [] : Aquello encerrado por estos simbolos es opcional


 1. Definicion de la estructura del Registro.

	Esta definicion se hace en Cobol Standard utilizando el editor.

	    $ EDIT {nom-sist}BR{nom-reg}.txt   

		en este caso :
   
            $ EDIT TSTBRDM2.TXT

	La estructura del registro puede verla en el anexo 1.
#
 2. Ambiente.

	El  usuario  debe saber que GENESIS puede generar para VAX y para IBM.
	Ademas,  si  esta  generando  para  IBM  puede  estar  usando archivos
 	VSAM  o  tablas  DATACOM.  Esto  hace  necesario  que el usuario setee
	el ambiente antes de comenzar a trabajar con GENESIS.

	Los sgtes. son algunos ejemplos de comandos predefinidos para seteo de
	ambiente:

	$ AMBMVS

		este comando setea los sgtes parametros:
	
		lenguaje (LNG)		: COBOL
		sistema operativo (SOP)	: MVS
		input/output (AIO)	: DTC (DATACOM)
		interf. usuaria (AIU) 	: BMS
		Version                 : V31

	$ AMBVAX

		este comando setea los sgtes parametros:
	
		lenguaje (LNG)		: COBOL
		sistema operativo (SOP)	: VMS
		input/output (AIO)	: RMS (archivos rms)
		interf. usuaria (AIU) 	: FMS
		Version                 : V30

	Para mayor detalle digitar en VAX comando :

	$ GNSHLP COMANDOS_DE_GNS SETAMB

	Para revisar el ambiente seteado ejecutar :

	$ SPG
#
 3. Funciones de Input/Output ( FIO ) (Ver topico FIO_funciones en GNSHLP)

   3.1. Definicion del archivo.

	$ DEFFIO {nom-regi}     
             
		Para el caso del ejemplo que desarrollamos,
		ejecutar:
	   
	$ DEFFIO DM2

	si ambiente es VSI, VSB (IBM) o RMS (VAX)

		Este comando generara  un  descripcion  de  archivo  de nombre 
        	{nom-reg}.FDL,	en este caso DM2.FDL.

	si ambiente es DTC (IBM) los parametros que se solicitan son :

		sistema-registro : en este caso TSTDM2
        	elemento         : en este caso DM200
		Llaves           : llave del registro = DM2-KEY-IDM2
				   llave datacom      = DM200
		Parrafo FIO      : asume standard TST-FIO-DM2
		Nombre modulo    : asume standard TSTBFDM2

	     genera archivo con extension .EDL

		En  el  anexo  2  se  muestra  un ejemplo de definicion de FIO 
	para para el archivo DM2 y el correspondiente DM2.FDL producto de esta
	definicion.


   3.2. Generacion de la FIO.

             Una vez  creada  la definicion, se debe generar la FIO. Para esto
	se utiliza el Comando GENFIO

	Si es VSI, VSB (IBM) o RMS (VAX)
      
		$ [B]GENFIO {archivo} [/ACCess=SEQ]

			en el caso del ejemplo :
	   
		$ [B]GENFIO DM2.FDL

	Donde {archivo} corresponde a la descripcion generada al ejecutar el
	comando DEFFIO.

	acepta el cualificador ACCESS en el caso que se desee generar una
	FIO de un archivo VSAM indexado pero con acceso secuencial.

	[B]  permite  que  el  proceso   se   ejecute   en  el Batch liberando 
	el terminal.

	Si es DTC (IBM)

	        $ [B]GENFIO DM2.EDL

             Una vez terminado  este  comando  mire el directorio de trabajo y 
	vera que  se  generaron nuevos archivos con extension AIO. Dependiendo 
	del ambiente en el que Ud. esta trabajando, los modulos son:

	Si ambiente es VAX :

	  {nom-sist}BF{nom-pant}.AIO   ==>  Modulo de llamada a la subrutina FIO
                                                             (interfaz standard)
          {nom-sist}PF{nom-pant}.AIO   ==>  Subrutina FIO
          {nom-sist}PR{nom-pant}.AIO   ==>  Programa de Prueba FIO

	en el caso del ejemplo, generaria :

        	   TSTBFDM2.AIO
                   TSTPFDM2.AIO
                   TSTPRDM2.AIO
#
	Si ambiente es IBM y VSI o IBM y DTC:

	  {nom-sist}BF{nom-pant}.AIO   ==>  Modulo de llamada a la
                                            subrutina FIO

		en el caso del ejemplo, generaria :

                    TSTBFDM2.AIO

	Si ambiente es IBM y VSB :

	  {nom-sist}BF{nom-pant}.AIO   ==>  Modulo de llamada a la subrutina FIO
                                                             (interfaz standard)
          {nom-sist}PF{nom-pant}.AIO   ==>  Subrutina FIO

		en el caso del ejemplo, generaria :

                    TSTBFDM2.AIO
                    TSTPFDM2.AIO


   2.3. Prueba.

		Si  Ud. esta trabajando para ambiente VAX, debe compilar
	la subrutina FIO con el comando :

		$ COB TSTPFDM2.AIO
                  opcionalmente puede probar la subrutina FIO, para eso debe
                  compilar :
		$ COB TSTPRDM2.AIO

	Estos comandos generaran dos modulos objeto : 

		TSTPFDM2.OBJ, TSTPRDM2.OBJ

		Para  obtener  el  programa  de  prueba  ejecutable  se   debe 
	"linkear" el modulo objeto de prueba contra el modulo objeto FIO :

		$ LIN TSTPRDM2,TSTPFDM2
 
	Este comando generara el modulo ejecutable TSTPFDM2.EXE
	Para ejecutar este programa digite :

	$ RUN TSTPFDM2
#
 3. Pantalla Interactiva.

   3.1. Definicion.

	$ DEFFRM {nom-pant}

		en el caso del ejemplo, ejecutar :

	$ DEFFRM DM2

		Este comando  lo  lleva al Form Editor Menu (Utilitario FMS de 
	VAX). Elija  la  opcion Form y presione <RETURN>. Ahora esta en Assign 
	Form  Attributes,  en  el  campo  Form Name ponga el nombre que Ud. le
	dara a la pantalla. En este caso seria DM2. 
	Muevase  con <TAB> Y en el campo Help Form Name, ponga el nombre de la
	documentacion de la pantalla, ejemplo : PERSONAL.
	El  resto  de  las  opciones  no  seran  consideradas  por el momento.
	Presione  <RETURN>  y volvera a Form Editor Menu. 

	Elija  la   opcion   Layout   y   presione <RETURN> . Ahora Ud esta en 
	condiciones  de "pintar" su pantalla (entre las lineas 4 y 20) como se 
	muestra en  el  anexo 3. Recuerde que hay TEXTOS y CAMPOS (Modos TXT y
	FLD).

	Ahora que  Ud.  ha  pintado  su  pantalla, le pondremos  nombres a los 
	campos.  Para  ello  haga  <PF1>  7 (esto le permite volver del layout
	al  menu  principal);  elija  opcion A ; y luego opcion 1. Su pantalla
	sera dividida  en  dos  areas  (Layout  y Assign Field Atributes) y el 
	campo actual estara brillante e intermitente. 
	
	Ahora  ponga los nombres de acuerdo a las normas exigidas por Genesis. 

	Estas son :

	   {Nombre Registro}[-Tipo llave]-{Tipo Campo}-{Nombre Campo}
            +-------------+   +--------+   +--------+   +----------+
              Largo 3          Largo 3      Largo 3       Largo 4

           donde :
 
	   Nombre Registro : Nombre de registro al cual pertenece el  campo en 
			     cuestion.  Por   ejemplo,  DM2  para  campos  del  
			     registro DM2  o FRM para campos que no pertenecen 
			     a ningun registro .

	   Tipo llave 	   : IKY, MKI, AKY.

	   Tipo Campo      : GLS, VRF, FEC, DMA, MSA, FMA, FSA, FFA, IAC, IND, 
			     COD, etc.

           Nota : para mayor informacion sobre estas normas y digitar
		  en VAX comando :

		  $ GNSHLP FRM_PANTALLAS DEFINICION
#
           En este caso los nombres de campo serian los sgtes:



			Nombre             Solo   Oblig 
			campo              desp         

 1.- Nombre      	DM2-GLS-NOMF        N       S

 2.- R U T       	DM2-IKY-NUM-IFUN    N       N

 3.- Direccion   	DM2-GLS-DIRE        N       S

 4.- Comuna           
     Codigo		DM2-COD-COMU        N       S   
     Descripcion	FRM-GLS-COMU        S       N

 5.- Fono        	DM2-GLS-FONO        N       N

 6.- Fecha Nacimiento 
			DM2-FEC-FNAC        N       S

 6.1- Nacionalidad  
      Codigo		DM2-COD-NACI        N       N   
      descripcion	FRM-GLS-NACI        S       N  

 7.- Remuneracion     
     Monto		DM2-SGV-REMU        N       N  
     Codigo		DM2-COD-REMU        N       N   
     Descripcion	FRM-GLS-REMU        S       N  

 8.- Cargo            
     Codigo		DM2-COD-CRGO        N       N   
     Descripcion	FRM-GLS-CRGO        S       N  

 9.- Carga Familiar   
 			DM2-NUM-CFAM        N       N  


           Una vez  nombrados  los  campos,  debe darseles atributos de video,
	   (Presionando la  tecla  7  Pad  numerico) de acuerdo a la siguiente
	   norma (solo al generar para VAX) :

		- Campos que se digitan ==> UNDERLINE

 		- Campos Glosas         ==> BOLD

		_ Campos Llaves         ==> REVERSE/BOLD
#
 4. Definicion DOMINIOS y RECORRIDOS.

		La  definicion  de DOMINIOS y RECORRIDOS permite la validacion 
	automatica de campos en la pantalla. Esta validacion se realiza contra 
	tablas del  sistema  que  deben  ser definidas por el usuario usando
	el producto TAB ( Si se esta generando para VAX el comando DEFTAB
	permite poblar los codigos de tablas ).


 4.1. Definicion de DOMINIOS.

	$ DEFDMN 

	Este comando permite definir interactivamente los dominios. Un dominio
	es la definicion de un dato o concepto en particular.
	Por  ejemplo, si queremos que el campo Codigo de Comuna (DM2-COD-COMU)
	se  valide  contra  la  tabla  de  Comunas,  debemos crear el concepto
	COMUNA  esto  lo  hacemos  definiendo  un  dominio  que establezca una
	relacion entre un nombre generico y la tabla de comunas.
	(dicho nombre generico representara para nosotros el concepto comuna)
	Para esto,  se deben llenar los campos de la pantalla ACTUALIZACION DE 
	DOMINIOS de la sgte. forma:


            1.- dominio   : CODCOMU
          
            2.- Sistema   : TAB			3.- Registro  : TAB

	    4.- tabla	  : COM

	    5.- Tipo      :

	    6.- Formato   :

	    7.- Largo     :

	    8.- Formato de Impresion  :

	    9.- Parrafo de Validacion : 

	   10.- Parrafo de Busqueda   : 

	- El campo 1 es lo que representa el concepto (en este caso comuna) y
	  es libre.

	- El campo 2 indica en que sistema se digitara la tabla de comuna.

	- El campo 3 en TAB indica que la tabla es de tipo generico (se enmarca
	  dentro del producto TAB de GENESIS).

	- El campo 4 indica como se llamara la tabla en particular. Largo 3
	  caracteres.

	- Los  campos  5, 6, 7, 8, 9 y 10 no son necesarios, y son asumidos
	  por GENESIS.

        Esto  mismo  debera  hacerse  con  todos  aquellos  dominios que deban 
	definirse. 
#
 4.2. Definicion de RECORRIDOS.

	$ DEFRCR 

	Este comando permite definir interactivamente los recorridos.

	Por  ejemplo, si queremos que el campo Codigo de Comuna (DM2-COD-COMU)
	se valide contra la tabla de Comunas, se deben llenar los campos de la
	pantalla ACTUALIZACION DE RECORRIDOS de la sgte. forma:

            1.- Recorrido : DM2-COD-COMU
          
            2.- Dominio   : CODCOMU

            3.- Sistema   : TST

  	    4.- Registro  : DM2

	    5.- Formato  Impresion    : 

	    6.- Parrafo de Validacion : 

	    7.- Parrafo de Busqueda   : 

	- Campo 1 : Nombre del campo en la pantalla

	- Campo 2 : Nombre del dominio al que pertenece el campo 1

	- Campo 3 : Sistema al que pertenece el campo 1

	- Campo 4 : Registro al que pertenece el campo 1

         Esto  mismo  debera  hacerse  con  todos aquellos campos que se deban
        validar  contra  alguna  Tabla.  Los campos 5, 6 y 7 no son necesarios,
	y son asumidos por GENESIS.


 5. Modulo de Manejo, Registro Imagen, Mapa IBM y Archivo de Parametros.

   5.1.	Generacion  del Registro  Imagen,  Mapa  IBM ,Archivo  de Parametros y 
	Modulo de Manejo con label para codigo adicional.

	$ [B]GENFRM DM2  [/OPT=opcion]

		opcion : puede ser ALL, CON o UPD

	Una vez  completado  el  proceso  de  generacion mire su directorio  y
	vera una serie de nuevos archivos con extencion AIU, a saber:

	{nom-sist}BI{nom-pant}.AIU 	Modulo de Parametros para generacion

	{nom-sist}BM{nom-pant}.AIU 	Modulo de Manejo con label para codigo
					adicional. Se genera solo si NO se
					especifica parametro /OPT=opcion

	{nom-sist}BQ{nom-pant}.AIU	Modulo de Manejo con label para codigo
					adicional ( para manejo de programa
					solo de 'consulta', o para el primer
					programa en el caso de programas
					particionados ). Se genera si se
					especifica /OPT=ALL u /OPT=CON
#
	{nom-sist}BU{nom-pant}.AIU	Modulo de Manejo con label para codigo
					adicional ( para manejo de programa
					de 'actualizacion' en el caso de
					programas particionados ). Se genera
					si se especifica /OPT=ALL u /OPT=UPD

	{nom-sist}WI{nom-pant}.AIU 	Registro Cobol Imagen de Pantalla
        
	{nom-sist}A{nom-pant}.MAP 	Mapa IBM (este modulo se genera solo si 
					UD.  esta  trabajando  para ambiente de
					interfaz usuaria BMS (AIU=BMS, para IBM)

	En el caso del ejemplo generaria (Si esta generando para VAX):
                                
		TSTBIDM2.AIU
                TSTBMDM2.AIU
                TSTWIDM2.AIU

	y si ambiente interfaz usuario es BMS (AIU=BMS) se generara
	TSTADM2.MAP.
#
   5.2. Codigo Adicional (Modulo de Manejo).

        Si su  Modulo  de  Manejo  de Pantalla requiere  codigo  adicional 
        usted debera escribir este  codigo  en  un  archivo aparte cuyo
        nombre debe cumplir con las normas de genesis:

         {nom-sist}BM{nom-pant}.TXT

		En este caso seria: TSTBMDM2.TXT

	Un ejemplo  de  codigo adicional para el modulo de manejo, puede verlo 
	en el anexo 4.

	Para mayor detalle digitar en VAX comando :

	$ GNSHLP FRM_PANTALLAS CODIGO_ADICIONAL

   5.3. Generacion del Modulo de Manejo de Pantalla final.
         
        $ [B]GENSRC {nom-sist}BM{nom-pant} [/CDA=archivo_cda]

		archivo_cda : es el nombre del archivo que contiene el
			      codigo adicional ( sin extension ya que esta
			      debe ser TXT. Si se omite asume que el
			      codigo adicional tiene el mismo nombre que
			      el archivo {nom-sist}BM{nom-pant}.

		Para el caso del ejemplo :

	$ [B]GENSRC TSTBMDM2

	Este   comando   procesa   los  modulos  TSTBMDM2.AIU  y  TSTBMDM2.TXT  
	(si existe) y genera el modulo de manejo definitivo que se incluye con 
	COPY en el codigo del programa (este COPY se hace en forma automatica).

        El resultado de este comando es el sgte. modulo:
             
        {nom-sist}BM{nom-pant}.SRCAIU   

		Para el caso del ejemplo :	

			TSTBMDM2.SRCAIU

	NOTA :

	a)      Para programas particionados el o los modulos de manejo
		pueden generarse :

		$ GENSRC {nom-sist}BQ{nom-pant} /CDA={nom-sist}BM{nom-pant}
		$ GENSRC {nom-sist}BU{nom-pant} /CDA={nom-sist}BM{nom-pant}

		De esta forma puede escribir el codigo adicional en un
		archivo unico de nombre {nom-sist}BM{nom-pant}

	b)      El  modulo  de  codigo adicional {nom-sist}BM{nom-pant}.TXT es
		opcional (puede no existir), en caso que no existiera de todos
		modos es necesario ejecutar [B]GENSRC.
		Otro resultado producido por este comando es la reubicacion de 
		los  modulos  TSTBMDM2.AIU,TSTBIDM2.AIU (que se transfieren al
		area  AIU  del proyecto)  y TSTBMDM2.TXT (que se transfiere al
		area TXT del proyecto).
#
 6. Programa Interactivo.

   6.1. Definicion (Comando DEFPGM).

	$ DEFPGM 
         
	Este comando  lo  llevara  a una pantalla interactiva que le permitira
	hacer la definicion de su programa interactivo.

         - Digite ING y presione <RETURN>, para ingresar la definicion.

	 1.- Programa	: con la siguiente norma 

            {nom-sist}PA{nom-pant}  

	   En este caso TSTPADM2.


	 2.- Autor 	: LGARCIA

	 3.- Arch. Base : TSTDM2
			(definido previamente) {nom-sist} {num-reg}

	 4.- Formulario : DM2
			{nom-pant}

	 5.- Biblioteca : TSTFMS
			{nom-sist}FMS

	 6.- Subrutina Comandos : asume por Default GNSPPCMN

	 7.- Prompt Comandos    : 

	 8.- Prompt Aborto      : 


          Cod      Cpp       Spp        Prompt      Confirmacion      Subrutina
          ----------------------------------------------------------------------

          ING      ING        M

          MOD      MOD        M

          ACT      ACT        M

	  ELI      ELI        A

	  CON      ACC        C

         
        Luego  presione  <RETURN>  y  salvara  su  definicion, si quiere salir
	presione <PF4> nuevamente.

	Mas  detalles  acerca  de los codigos utilizados en Cod, Cpp y Spp los
	encontrara en el anexo 5.
	Los  campos  prompt  y confirmacion pueden ir en blanco, Genesis asume
	entonces  mensajes standard para efectos de la ejecucion del programa.
	Los  parametros  que afectan la generacion del programa son el 1 al 6.
	Los  otros  parametros se pueden alterar sin necesidad de regenerar el
	programa,  solo  los toma en tiempo de ejecucion (esto es por default,
	se puede especificar lo contrario).


   6.2. Codigo Adicional (Programa Interactivo).

        Si  su  programa  requiere codigo adicional usted debera escribir este 
	codigo  en  un  archivo  aparte  cuyo  nombre  debe  cumplir  con  las 
	normas de genesis (si su programa no requiere codigo adicional este
	archivo no debe existir) :

         {nom-sist}PA{nom-pant}.TXT

		En este caso : TSTPADM2.TXT

	Para mayor detalle digitar en VAX comando :

	$ GNSHLP PGM_INTERACT CODIGO_ADICIONAL
             o
	$ HLPPGM
             o
        $ GNSHLP CODIGO_ADICIONAL

   6.3. Generacion del Programa (Comando GENPGM).

	$ [B]GENPGM {nom-sist}PA{nom-pant}

		En este caso :

	$ [B]GENPGM TSTPADM2

	Este comando genera un programa interactivo tomando como
	codigo adicional el archivo TSTPADM2.TXT (si existe).

        El resultado de este comando es el sgte. modulo:
             
        {nom-sist}PA{nom-pant}.COB	si ambiente AIO = RMS (VAX)

		o

        {nom-sist}PA{nom-pant}.PGD	si ambiente AIO = DTC (IBM)

		o

        {nom-sist}PA{nom-pant}.PGI	si ambiente AIO = VSI (IBM)


	NOTA :

	a)      Para programas particionados el o los programas
		pueden generarse :

		$ GENPGM {nom-sist}PA{nom-pant} -
                         /OPT=CON/OUT={nom-sist}PQ{nom-pant}/CPP=ALL

			Este comando genera el primer programa
			(consulta)

		$ GENPGM {nom-sist}PA{nom-pant} -
                         /OPT=UPD/OUT={nom-sist}PU{nom-pant}/CPP=ALL

			Este comando genera el segundo programa
			(actualizacion)

		De esta forma puede escribir el codigo adicional en un
		archivo unico de nombre {nom-sist}PA{nom-pant}

	b)      El  modulo  de  codigo adicional {nom-sist}BM{nom-pant}.TXT es
		opcional (puede no existir), en caso que no existiera de todos
		modos es necesario ejecutar [B]GENPGM.

		Otros  resultados  producidos   por  este  comando  son la
		reubicacion del modulo  TSTPADM2.TXT (que se transfiere al
		area  TXT  del  proyecto)  y  la  creacion   de un  modulo
		(TSTPADM2.TEM)   que   contiene   una  copia  del programa
		interactivo  sin considerar codigo adicional mas una serie
		de label en los cuales es posible ingresar codigo adicional.

	El  usuario  inexperto  que  no domina los nombres de los label en los 
	cuales  puede programar su codigo adicional, puede utilizar el comando 
	GENLAB.

	$ GENLAB TSTPADM2.TEM

	El  resultado  de  este comando es un modulo TSTPADM2.TXT que contiene 
	solamente los label en los cuales puede programar su codigo adicional. 
	Luego  debera  hacer GENPGM para que su codigo adicional sea insertado
	en los lugares correspondientes.


 7. Compilacion y obtencion del Programa Ejecutable.

	Si  Ud.  esta  trabajando  en ambiente VAX, siga las instrucciones del
	punto 7.1  y  7.2.  Si  Ud.  esta trabajando en ambiente IBM, siga las
	instrucciones del punto 7.3.

   7.1. Compilacion.

	$ COB TSTPADM2

	Este  comando  compilara  su programa y creara un archivo TSTPADM2.OBJ
	(solo si el programa se compilo bien).

   7.2. Obtencion del Programa Ejecutable.

	Para   obtener   su  programa  ejecutable  cree  un  archivo de nombre
        {nom-sist}PA{nom-pant}.OPT, que en este caso seria TSTPADM2.OPT 

	Este archivo debe contener lo siguiente :

            TSTPADM2,GNSOBJ/INCLUDE=(GNSPFTAB,GNSPPHLP),[], OBJ/INC=/TSTPFTAB
		TSTPFDM2

	TSTPADM2 : es el programa
	GNSOBJ   : es la libreria de objetos de Genesis
	GNSPFTAB : es la rutina para accesar tablas genesis
	GNSPPHLP : es el modulo de Genesis que permitira realizar HELP a su
	           programa
	OBJ      : Libreria de objetos de su proyecto
	TSTPFTAB : Rutina de acceso a tablas del sistema TSDT (debe estar creada
	           previamente)
	TSTPFDM2 : Rutina  de  acceso al archivo TSTDM2 que para el caso esta en
	           el directorio actual por eso se especifica [], en el caso que
	           esta  rutina  la  cataloge el jefe de proyecto en la libreria
	           OBJ  se  debe  eliminar  la referencia a ella en este archivo
	           {prog}.OPT
	Nota : Las    rutinas   GNSPFTAB,   GNSPPHLP,   TSTPFTAB   se   declaran
	       explicitamente,  debido a que el programa las referencia en forma
	       'variable'.

	Una  vez  que  usted  tenga  creado  este archivo ejecute el siguiente
	comando :

	$ LIN TSTPADM2

	Una vez  terminado  de  ejecutar  el  comando LIN ejecute el siguiente
	comando :

	$ RUN TSTPADM2

	Este  comando  le permitira ejecutar su programa (antes de ejecutar su
	su  programa  con RUN es nesesario que el jefe de proyecto cataloge la
	pantalla {nomb-pant}.FRM en la libreria de formularios del proyecto.
#
   7.3. Generacion y envio de JOB'S a IBM.

	Si  ud.  esta trabajando en ambiente IBM, debe generar sus job's. Para
	esto,   GENESIS   dispone   de   dos   comandos  que  permite  generar  
	automaticamente   los job de insersion y compilacion y enviarlos a IBM.

	Comando GENJOB.

	Este comando permite generar los job's.

	En este caso Ud. debe dar los sgtes. comandos:

	$ [B]GENJOB TSTBFDM2.AIO,TSTBRDM2.TXT BF.JOB

		Permite  generar  un  job  con nombre BF.JOB  (opcional, asume
		VTI.JOB) que insertara la FIO y el registro DM2 (en el caso de
		generar para VSI debe incluir modulo TSTPFDM).

	$ [B]GENJOB TSTADM2.MAP A.JOB

		Permite  generar un job que insertara y compilara el mapa DM2.

	$ [B]GENJOB TSTWIDM2.AIU,TSTBMDM2.SRCAIU 
	
		Permite  generar  un job que insertara el registro imagen y el 
		modulo de manejo.

	$ [B]GENJOB TSTPADM2.PGD PA.JOB   o bien

	$ [B]GENJOB TSTPQDM2.PGD,TSTPUDM2.PGD PA.JOB   o bien

		Permite  generar  un job que insertara y compilara el programa
		interactivo.
		Usted  puede  realizar  un  solo  GENJOB  con toda la lista de
		archivos

	Comando RJE.

	Este comando permite enviar a IBM los job's generados.

	En este caso Ud. debe dar los sgtes. comandos:

	$ RJE BF.JOB

		Permite enviar  el job que insertara la FIO y el registro DM2.

	$ RJE A.JOB

		Permite  enviar  el job que insertara y compilara el mapa DM2.

	$ RJE BM.JOB
	
		Permite  enviar  el  job que insertara el registro imagen y el 
		modulo de manejo.
#
	$ RJE PA.JOB

		Permite  enviar  el  job que insertara y compilara el programa 
		interactivo.

               Tambien es posible generar un JOB considerando de una vez todos
               los archivos, ejemplo :

               $ GENJOB TSTBFDM2,TSTBRDM2,TSTADM2,TSTWIDM2,TSTBMDM2,TSTPADM2
                 DM2.JOB

               $ RJE DM2.JOB

	Nota : Para efectos del ejemplo se ha usado {nomb-pant}={nomb-reg},
	       pero esto no necesariamente tiene que ser asi.

				-----o0o-----
#
 4.- Coneccion a menu y depuracion final.
    --------- - ---- - ---------- -----

        IBM  Conectar al menu del sistema las opciones y sus programas asociados
             -------------------------------------------------------------------

             Ejemplo de coneccion de programa y mapa en 3.0 :

 GNS MEN        A C T U A L I Z A   M E N U   P R O G R A M A        99/99/9999
 XXX

 01 Funcion         {    COLACTVEN    }                   02 Opcion     { VEN }
 03 Menu-Correlativo{  SIS010 }                           04 Sistema    <     >
 05 Funcion Retorno <    SIS          >
 06 Funcion Anterior<                 >
 07 Glosa Menu      < ACTUALIZA VENCIMIENTOS         >
 08 Glosa Programa  < ACTUALIZA VENCIMIENTOS         >
 09 Formulario      < COLFVEN >  10 Biblioteca Formulario           < COLAVEN >
 11 Biblioteca Ayuda<         >  12 Modulo Ayuda   <                          >
 13 Tipo Funcion    < PGI >      14 Nombre Menu   <     >
 15 Programa        < COLPAVEN > 16 Transaccion  < KO95 > 17 Instancia  <     >
 18 Comando         <     >      19 IFD  < COLPPMEN     > 20 Tras.Ctl. < XCTL >
 21 Informacion Ctl.< CT  >
 22 Confirma        <   >        23 Privilegios   <   >   24 Secuencia  <     >
 25 Expande Glosa   < N >        26 Fila         <    >   27 Columna     <    >

 1=HLP 2=CMT 3=OUT 4=WRT 5=P.ANT 6=P.SIG 7=ANT 8=SIG 9=SET 10=CMN 11=CGL 12=INI

Nota : En el caso de programa en version 2.0 cambie el campo 21
       Informacion Ctl. al valor CC.



 GNS PPI                 PARAMETROS PROGS INTERACTIVOS               99/99/9999
 XXX

 1.Prog { COLPAVEN        } 2.Autor < CONSIST                                  >
 3.IFD  <                 >
 4.Arc.Base < COLOPC      > 5.Mapa  < FVEN         >   6.Mapset <              >
 7.Programa Comandos        8.Prompt Comandos          9.Prog/Trans Version 3.1
 <              >     <                            >  <                        >
                                      COMANDOS
 Cod  Cpp  Spp  Prompt                      Confirmacion              Subrutina

 ING  ING  M

 MOD  MOD  M

 ACT  ACT  M

 ELI  ELI  A

 CON  ACC  C

1=HLP 2=CMT 3=OUT 4=WRT 5=P.ANT 6=P.SIG 7=ANT 8=SIG 9=SET 10=CMN 11=CGL 12=INI
#
             Ejemplo de coneccion de programa y mapa en 3.1 :
             Programas no particionados

 GNS MEN       A C T U A L I Z A   M E N U   P R O G R A M A        99/99/9999
 XXX

 01 Funcion         {    COLACTVEN    }                   02 Opcion     { VEN }
 03 Menu-Correlativo{  SIS010 }                           04 Sistema    <     >
 05 Funcion Retorno <    SIS          >
 06 Funcion Anterior<                 >
 07 Glosa Menu      < VENCIMIENTOS                   >
 08 Glosa Programa  < VENCIMIENTOS                   >
 09 Formulario      < COLFVEN >  10 Biblioteca Formulario           < COLAVEN >
 11 Biblioteca Ayuda<         >  12 Modulo Ayuda   <                          >
 13 Tipo Funcion    < PGI >      14 Nombre Menu   <     >
 15 Programa        < COLPAVEN > 16 Transaccion  < KO96 > 17 Instancia  <     >
 18 Comando         <     >      19 IFD  < COLPPMEN     > 20 Tras.Ctl. < XCTL >
 21 Informacion Ctl.< OT  >
 22 Confirma        <   >        23 Privilegios   <   >   24 Secuencia  <     >
 25 Expande Glosa   < N >        26 Fila         <    >   27 Columna     <    >

 1=HLP 2=CMT 3=OUT 4=WRT 5=P.ANT 6=P.SIG 7=ANT 8=SIG 9=SET 10=CMN 11=CGL 12=INI


 GNS PPI                  PARAMETROS PROGS INTERACTIVOS               99/99/9999
 XXX

 1.Prog { COLPAVEN        } 2.Autor < CONSIST                                  >
 3.IFD  <                 >
 4.Arc.Base < COLVEN      > 5.Mapa  < COLAVEN      >   6.Mapset <              >
 7.Programa Comandos        8.Prompt Comandos          9.Prog/Trans Version 3.1
 <              >     <                            >  <                        >
                                     COMANDOS
 Cod  Cpp  Spp  Prompt                      Confirmacion              Subrutina

 ING  ING  M

 MOD  MOD  M

 ACT  ACT  M

 ELI  ELI  A

 CON  ACC  C

 1=HLP 2=CMT 3=OUT 4=WRT 5=P.ANT 6=P.SIG 7=ANT 8=SIG 9=SET 10=CMN 11=CGL 12=INI
#
             Ejemplo de coneccion de programa y mapa en 3.1 :
             Programas particionados

 GNS MEN        A C T U A L I Z A   M E N U   P R O G R A M A        99/99/9999
 XXX

 01 Funcion          {    COLACTVEN    }                   02 Opcion     { VEN }
 03 Menu-Correlativo {  SIS010 }                           04 Sistema    <     >
 05 Funcion Retorno  <    SIS          >
 06 Funcion Anterior <                 >
 07 Glosa Menu       < VENCIMIENTOS                   >
 08 Glosa Programa   < VENCIMIENTOS                   >
 09 Formulario       < COLFVEN >  10 Biblioteca Formulario           < COLAVEN >
 11 Biblioteca Ayuda <         >  12 Modulo Ayuda   <                          >
 13 Tipo Funcion     < PTC >      14 Nombre Menu   <     >
 15 Programa         < COLPQVEN > 16 Transaccion  < KO96 > 17 Instancia  <     >
 18 Comando          <     >      19 IFD  < COLPPMEN     > 20 Tras.Ctl. < XCTL >
 21 Informacion Ctl. < OT  >
 22 Confirma         <   >        23 Privilegios   <   >   24 Secuencia  <     >
 25 Expande Glosa    < N >        26 Fila         <    >   27 Columna     <    >

 1=HLP 2=CMT 3=OUT 4=WRT 5=P.ANT 6=P.SIG 7=ANT 8=SIG 9=SET 10=CMN 11=CGL 12=INI

Nota : Si el programa es particionado lo unico que cambia es el campo 13
       Tipo Funcion a PTC.


 GNS PPI                  PARAMETROS PROGS INTERACTIVOS               99/99/9999
 XXX

 1.Prog { COLPQVEN        } 2.Autor < CONSIST                                  >
 3.IFD  <                 >
 4.Arc.Base < COLVEN      > 5.Mapa  < COLAVEN      >   6.Mapset <              >
 7.Programa Comandos        8.Prompt Comandos          9.Prog/Trans Version 3.1
 <              >    <                             >  < COLPUVEN/KO97          >
                                      COMANDOS
 Cod  Cpp  Spp  Prompt                       Confirmacion              Subrutina

 ING  ING  M

 MOD  MOD  M

 ACT  ACT  M

 ELI  ELI  A

 CON  ACC  C

 1=HLP 2=CMT 3=OUT 4=WRT 5=P.ANT 6=P.SIG 7=ANT 8=SIG 9=SET 10=CMN 11=CGL 12=INI

Nota : Si el programa es particionado en el campo 9 Prog/Trans Version 3.1 se
       incluye el nombre del segundo programa y la transaccion asociada a el.

        Todos los programas definidos se han asociado a un grupo de base de
        datos unico (campo 19 en el menu : COLPPMEN).
#
        IBM  Definir IDD definitiva
             ----------------------
             Se incorporan nuevas tablas a medida que las usan los programas
             ejemplo :


 GNS IDD                  INDEPENDENCIA DE DATOS                      99/99/9999

        Identificacion IDD :    { COLPPMEN     }

     Sistema Grupo  Tipo  Ident             Sistema Grupo  Tipo  Ident

  1. < GNS > < C > < D > < 180 >    |    2. < TAB > < C > < D > < 150 >
  3. < SGC > < C > < D > < 190 >    |    4. < SGC > < M > < D > < 150 >
  5. <     > <   > <   > <     >    |    6. <     > <   > <   > <     >
  7. <     > <   > <   > <     >    |    8. <     > <   > <   > <     >
  9. <     > <   > <   > <     >    |   10. <     > <   > <   > <     >
 11. <     > <   > <   > <     >    |   12. <     > <   > <   > <     >
 13. < COL > < M > < D > < 160 >    |   14. <     > <   > <   > <     >
 15. < COL > < C > < D > < 210 >    |   16. <     > <   > <   > <     >
 17. <     > <   > <   > <     >    |   18. <     > <   > <   > <     >
 19. <     > <   > <   > <     >    |   20. <     > <   > <   > <     >
 21. <     > <   > <   > <     >    |   22. <     > <   > <   > <     >
 23. <     > <   > <   > <     >    |   24. <     > <   > <   > <     >
 25. <     > <   > <   > <     >    |   26. <     > <   > <   > <     >
 27. <     > <   > <   > <     >    |   28. <     > <   > <   > <     >
 29. <     > <   > <   > <     >    |   30. <     > <   > <   > <     >
 31. <     > <   > <   > <     >    |   32. <     > <   > <   > <     >
 33. <     > <   > <   > <     >    |   34. <     > <   > <   > <     >

 1=HLP 2=CMT 3=OUT 4=WRT 5=P.ANT 6=P.SIG 7=ANT 8=SIG 9=SET 10=CMN 11=CGL 12=INI

        IBM  Ejecutar el programa
             --------------------

        IBM  Poblamiento de mensajes
             -----------------------
#
V.- Resumen diferencias en versiones

  A continuacion se entrega un cuadro resumen de las diferencias para
  las distintas versiones :

 +-----------+-----------------------------------------------------------+
 | Comando o |                Version                                    |
 | Tema      +----------------+---------------+--------------------------+
 |           |     2.0        |     3.0       |           3.1            |
 +-----------+----------------+---------------+--------------------------+
 | GENFRM    |Genera un solo modulo de manejo | Opcionalmente puede gene-|
 |           |para el formulario              | rar dos modulos de manejo|
 |           |                                | del formulario para pro- |
 |           |                                | gramas particionados     |
 +-----------|--------------------------------+--------------------------+
 | Codigo    | Informacion en  $ GNSHLP cod_adicional 022 ( codigo       |
 | adicional |                                adicional que cambiar )    |
 +-----------|--------------------------------+--------------------------+
 | DEFPGM    |Comandos no obligatorios        | Comandos Obligatorios    |
 +-----------|--------------------------------|--------------------------+
 | GENPGM    |Por 'default' genera programa   | Por 'default' genera     |
 |           |con codigo para todos los       | programa con codigo      |
 |           |comandos                        | solo para los comandos   |
 |           |                                | definidos con DEFPGM.    |
 |           |                                | Posibilidad de generar   |
 |           |                                | programas particionados  |
 +-----------|----------------+---------------+--------------------------+
 | FIOS      |                |          Actua con IDD                   |
 |           | Actua con IFD  |Actualmente las FIOS de version 3.0 y 3.1 |
 |           |                |son iguales                               |
 +-----------|----------------+---------------+--------------------------+
 |Programa y | Programa fuente de 2.0 y 3.0   |Un programa en version 3.1|
 |compilacion| es el mismo. Un programa de 2.0|solo debe ser compilado en|
 |           | se transforma en 3.0 solo al   |version 3.1 y todas las   |
 |           | compilarlo. Un programa en 2.0 |FIOs que ocupa deben estar|
 |           | al compilarlo en 2.0 actua con |en version 3.0 o 3.1      |
 |           | IFD, al compilarlo en 3.0 actua|                          |
 |           | con IDD                        |                          |
 |           | Si el programa se compila en   |                          |
 |           | version 3.0, se puede compilar |                          |
 |           | con FIOs 2.0 y/o 3.0           |                          |
 +-----------|----------------+---------------|--------------------------+
 |Campos en  |Informacion Ctl.|Informacion Ctl|Informacion Ctl. debe ser |
 |poblamiento| debe ser CC    |debe ser CT    |OT                        |
 |de menu IBM| o 'blancos'    |               |Para programas particiona-|
 |(MEN)      |                |               |dos Tipo Funcion debe ser |
 |           |                |               |PTC                       |
 +-----------|----------------+---------------|--------------------------+
 |Campos en  |                                |Para programas particiona-|
 |poblamiento|                                |dos, en el campo          |
 |Parametros |                                |Prog/Trans Version 3.1    |
 |Programa   |                                |Se debe poblar el nombre y|
 |Interactivo|                                |la transaccion del segundo|
 |(PPI)      |                                |programa ( que actualiza )|
 |           |                                | en la forma              |
 |           |                                | {programa}/{Transaccion} |
 |           |                                |({programa} con 8 caracte-|
 |           |                                | res)                     |
 +-----------+--------------------------------+--------------------------+
 Este cuadro se puede consultar en $ GNSHLP Dif_versiones
#
VI.- Anexos
    ------

	ANEXO 1.

      *    Registro Demo 2
      *    ---------------
      *
      *    Nombre Registro : DM2
      *    Clave(s)        : DM2-KEY-IDM2(UU)
      *    Largo           : 297
      *    Bloqueo         : 3
      *    Observaciones   :
      *
       01  DM2.
      *
      *    Filler Compatibilidad VSAM/MVS
           03  DM2-GLS-FLAG                           PIC X(01).
      *
      *    Clave Primaria Registro
           03  DM2-KEY-IREG.
      *
      *        Identificacion Entidad
               05  DM2-KEY-IDM2.
      *            RUT Cliente
                   07  DM2-NUM-IFUN                   PIC X(08).
                   07  FILLER                         PIC X(43).
      *
      *************************************************************
      *
      *    Digito Verificador del Rut
           03  DM2-VRF-IFUN                           PIC X(01).
      *
      *    Nombre
           03  DM2-GLS-NOMF                           PIC X(50).
      *
      *    Direccion
           03  DM2-GLS-DIRE                           PIC X(50).
      *
      *    Comuna
           03  DM2-COD-COMU                           PIC X(03).
      *
      *    Fono
           03  DM2-GLS-FONO                           PIC X(12).
      *
      *    Fecha Nacimiento
           03  DM2-FEC-FNAC.
               05  DM2-NUM-SNAC                       PIC 9(02).
               05  DM2-NUM-ANAC                       PIC 9(02).
               05  DM2-NUM-MNAC                       PIC 9(02).
               05  DM2-NUM-DNAC                       PIC 9(02).
      *
      *    Remuneracion
           03  DM2-SGV-REMU                           PIC S9(11)V9(04).
#
      *
      *    Codigo Moneda Remuneracion
           03  DM2-COD-REMU                           PIC X(06).
      *
      *    Codigo Cargo
           03  DM2-COD-CRGO                           PIC X(06).
      *
      *    Cargas Familiares
           03  DM2-NUM-CFAM                           PIC 9(02).
      *
      *    Nacionalidad
           03  DM2-COD-NACI                           PIC X(03).
      *
      *    Glosa Disponible
           03  DM2-GLS-DISP                           PIC X(89).
#
	ANEXO 2.


 Archivo DM2.FDL


 TITLE	"Demostracion 2"

 IDENT	"13-AUG-1988 17:00:55   VAX-11 FDL Editor"

 SYSTEM
	SOURCE			VAX/VMS

 FILE
	NAME			"TSTDM2" codificar {nom-sist}{num-reg}
	ORGANIZATION		indexed

 RECORD
	CARRIAGE_CONTROL	carriage_return
	FORMAT			fixed
	SIZE			297

 AREA 0
	ALLOCATION		78
	BEST_TRY_CONTIGUOUS	yes
	BUCKET_SIZE		3
	EXTENSION		18

 AREA 1
	ALLOCATION		3
	BEST_TRY_CONTIGUOUS	yes
	BUCKET_SIZE		3
	EXTENSION		3

 KEY 0
	CHANGES			no
	DATA_AREA		0
	DATA_FILL		100
	DATA_KEY_COMPRESSION	yes
	DATA_RECORD_COMPRESSION	yes
	DUPLICATES		no
	INDEX_AREA		1
	INDEX_COMPRESSION	yes
	INDEX_FILL		100
	LEVEL1_INDEX_AREA	1
	NAME			"DM2-KEY-IDM2" debe existir este nombre en el
	PROLOG			3              registro
	SEG0_LENGTH		51
	SEG0_POSITION		1
	TYPE			string
#
	ANEXO 3.

          1         2         3         4         5         6         7        
 123456789 123456789 123456789 123456789 123456789 123456789 123456789 12345678
 ------------------------------------------------------------------------------
 |                                                                             
 |                                                                             
 |                                                                             
 | 1.- Nombre            XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  
 |                                                                             
 | 2.- R U T             XXXXXXXX - X                                        
 |                                                                             
 | 3.- Direccion         XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  
 |                                                                             
 | 4.- Comuna            XXX      XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX   
 |                                                                             
 | 5.- Fono              XXXXXXXXXXXX                                        
 |                                                                             
 | 6.- Fecha Nacimiento  99-99-9999      6.1  Nacionalidad   XXX   XXXXX   
 |                                                                             
 | 7.- Remuneracion      NNN.NNN.NNN.NNN,NNNN  en  XXXXXX   XXXXXXXXXXXX   
 |                                                                             
 | 8.- Cargo             XXXXXX   XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX   
 |                                                                             
 | 9.- Carga Familiar    99                                                  
 |                                                                             
 |                                                                             
 |                                                                             
 |                                                                             
 ------------------------------------------------------------------------------
 123456789 123456789 123456789 123456789 123456789 123456789 123456789 12345678
          1         2         3         4         5         6         7        
#
	ANEXO 4.

	Ejemplo de codigo adicional para el modulo de manejo.

*%! Codigo adicional
*% IF DM2_VRF_IFUN
      *<<<<
      *>>>>
*% END
*% IF INI_DM2_FEC_FNAC
      *<<<< INI_DM2_FEC_FNAC
      * el  objetivo  de este codigo es que la rutina de validacion de fechas
      * deje pasar los dias no habiles
           MOVE FEC-VHBL-N TO FEC-VHBL. Esta diciendo 'Validar HaBiL No'
      *>>>>
*% END
*% IF DM2_NUM_CFAM
      *<<<< DM2_NUM_CFAM
      * el objetivo  de  este  codigo es que se despliegue un mensaje de aviso
      * en caso que el numero de cargas familiares sea cero.
           IF DM2-NUM-CFAM IN DM2-FLD = ZEROES
      *GET-MSG Busca mensaje en tabla
               MOVE 'TST' TO MSG-COD-SIST 
               MOVE 'NUMCFAMNZERO' TO MSG-COD-MENS
               PERFORM GET-MSG
               MOVE MSG-GLS-DESC TO FRM-MENS 
               MOVE FRM-SUAR-WRN TO FRM-SUAR.
      Busca un mensaje en la tabla 'MSG' de sistema 'TST' con codigo 
      'NUMCFAMZERO'.
      *>>>>
*% END
#
	ANEXO 5.

	Breve descripcion de los codigos utilizados en Cod, Cpp y Spp.

Cod : 	String  que vera el usuario en la linea de comandos, cuando se ejecute
	el programa.

Cpp :	Codigo  de  comando  interno.  Es  el que reconoce el programa como un 
	comando valido. Los comandos validos son los sgtes:

	ING : Ingresar. Permite ingresar un registro.
	MOD : Modificar. Permite modificar un registro existente.
	ACT : Actualizar. Permite actualizar un registro. Si el reg. no existe
	      es  similar  a  ING;  si  el  registro existe, es similar a MOD.
	ELI : Eliminar. Permite eliminar  un registro existente.  
	ACC : Accion. Permite realizar alguna accion sobre un registro
	      existente. Debe programarse como codigo adicional.
	PGM : Programador. Debe programarse como codigo adicional.

Spp : 	Codigo  de  Status.  Indica  el status con el cual quedara el programa
	despues de desplegar la informacion. Los codigos validos son los sgtes:

	M : Status de modificacion.
	A : Status de accion.
	C : Status de consulta.

Nota : Aun cuando el comando ACC esta pensado para comandos particulares que el
       usuario programara, no es necesario programar codigo adicional para el
       comando CON del ejemplo ya que este comando actua naturalmente al estar
       el codigo SPP con 'C'.


				-----oOo-----
